

##file cppcheck-2.8/gui/cppchecklibrarydata.h

1:
|
25:
26: class QIODevice ;
27:
28: class CppcheckLibraryData {
29: public:
30: CppcheckLibraryData ( ) ;
31:
32: struct Container {
33: Container ( ) : access_arrayLike ( false ) , size_templateParameter ( -1 ) { }
34:
35: QString id ;
36: QString inherits ;
37: QString startPattern ;
38: QString endPattern ;
39: QString opLessAllowed ;
40: QString itEndPattern ;
41:
42: bool access_arrayLike ;
43: int size_templateParameter ;
44:
45: struct {
46: QString templateParameter ;
47: QString string ;
48: } type ;
49:
50: struct Function {
51: QString name ;
52: QString yields ;
53: QString action ;
54: } ;
55: QList < struct Function > accessFunctions ;
56: QList < struct Function > otherFunctions ;
57: QList < struct Function > sizeFunctions ;
58: } ;
59:
60: struct Define {
61: QString name ;
62: QString value ;
63: } ;
64:
65: struct Function {
66: Function ( ) : noreturn ( Unknown ) , gccPure ( false ) , gccConst ( false ) ,
67: leakignore ( false ) , useretval ( false ) { }
68:
69: QString comments ;
70: QString name ;
71: enum TrueFalseUnknown { False , True , Unknown } noreturn ;
72: bool gccPure ;
73: bool gccConst ;
74: bool leakignore ;
75: bool useretval ;
76: struct ReturnValue {
77: ReturnValue ( ) : container ( -1 ) { }
78: QString type ;
79: QString value ;
80: int container ;
81: bool empty ( ) const {
82: return type . isNull ( ) && value . isNull ( ) && container < 0 ;
83: }
84: } returnValue ;
85: struct {
86: QString scan ;
87: QString secure ;
88: } formatstr ;
89: struct Arg {
90: Arg ( ) : nr ( 0 ) , notbool ( false ) , notnull ( false ) , notuninit ( false ) ,
91: formatstr ( false ) , strz ( false ) { }
92:
93: QString name ;
94: unsigned int nr ;
95: static const unsigned int ANY ;
96: static const unsigned int VARIADIC ;
97: QString defaultValue ;
98: bool notbool ;
99: bool notnull ;
100: bool notuninit ;
101: bool formatstr ;
102: bool strz ;
103: QString valid ;
104: struct MinSize {
105: QString type ;
106: QString arg ;
107: QString arg2 ;
108: } ;
109: QList < struct MinSize > minsizes ;
110: struct Iterator {
111: Iterator ( ) : container ( -1 ) { }
112: int container ;
113: QString type ;
114: } iterator ;
115: } ;
116: QList < struct Arg > args ;
117:
118: struct {
119: QString severity ;
120: QString cstd ;
121: QString reason ;
122: QString alternatives ;
123: QString msg ;
124:
125: bool isEmpty ( ) const {
126: return cstd . isEmpty ( ) &&
127: severity . isEmpty ( ) &&
128: reason . isEmpty ( ) &&
129: alternatives . isEmpty ( ) &&
130: msg . isEmpty ( ) ;
131: }
132: } warn ;
133: } ;
134:
135: struct MemoryResource {
136: QString type ;
137: struct Alloc {
138: Alloc ( ) :
139: isRealloc ( false ) ,
140: init ( false ) ,
141: arg ( -1 ) ,
142: reallocArg ( -1 )
143: { }
144:
145: bool isRealloc ;
146: bool init ;
147: int arg ;
148: int reallocArg ;
149: QString bufferSize ;
150: QString name ;
151: } ;
152: struct Dealloc {
153: Dealloc ( ) :
154: arg ( -1 )
155: { }
156:
157: int arg ;
158: QString name ;
159: } ;
160:
161: QList < struct Alloc > alloc ;
162: QList < struct Dealloc > dealloc ;
163: QStringList use ;
164: } ;
165:
166: struct PodType {
167: QString name ;
168: QString stdtype ;
169: QString size ;
170: QString sign ;
171: } ;
172:
173: struct PlatformType {
174: QString name ;
175: QString value ;
176: QStringList types ;
177: QStringList platforms ;
178: } ;
179:
180: using TypeChecks = QList < QPair < QString , QString > > ;
181:
182: struct Reflection {
183: struct Call {
184: Call ( ) :
185: arg { -1 }
186: { }
187:
188: int arg ;
189: QString name ;
190: } ;
191:
192: QList < struct Call > calls ;
193: } ;
194:
195: struct Markup {
196: struct CodeBlocks {
197: CodeBlocks ( ) :
198: offset { -1 }
199: { }
200:
201: QStringList blocks ;
202: int offset ;
203: QString start ;
204: QString end ;
205: } ;
206:
207: struct Exporter {
208: QString prefix ;
209: QStringList prefixList ;
210: QStringList suffixList ;
211: } ;
212:
213: QString ext ;
214: bool afterCode ;
215: bool reportErrors ;
216: QStringList keywords ;
217: QStringList importer ;
218: QList < CodeBlocks > codeBlocks ;
219: QList < Exporter > exporter ;
220: } ;
221:
222: void clear ( ) {
223: containers . clear ( ) ;
224: defines . clear ( ) ;
225: undefines . clear ( ) ;
226: functions . clear ( ) ;
227: memoryresource . clear ( ) ;
228: podtypes . clear ( ) ;
229: smartPointers . clear ( ) ;
230: typeChecks . clear ( ) ;
231: platformTypes . clear ( ) ;
232: reflections . clear ( ) ;
233: markups . clear ( ) ;
234: }
235:
236: void swap ( CppcheckLibraryData & other ) {
237: containers . swap ( other . containers ) ;
238: defines . swap ( other . defines ) ;
239: undefines . swap ( other . undefines ) ;
240: functions . swap ( other . functions ) ;
241: memoryresource . swap ( other . memoryresource ) ;
242: podtypes . swap ( other . podtypes ) ;
243: smartPointers . swap ( other . smartPointers ) ;
244: typeChecks . swap ( other . typeChecks ) ;
245: platformTypes . swap ( other . platformTypes ) ;
246: reflections . swap ( other . reflections ) ;
247: markups . swap ( other . markups ) ;
248: }
249:
250: QString open ( QIODevice & file ) ;
251: QString toString ( ) const ;
252:
253: QList < struct Container > containers ;
254: QList < struct Define > defines ;
255: QList < struct Function > functions ;
256: QList < struct MemoryResource > memoryresource ;
257: QList < struct PodType > podtypes ;
258: QList < TypeChecks > typeChecks ;
259: QList < struct PlatformType > platformTypes ;
260: QStringList undefines ;
261: QStringList smartPointers ;
262: QList < struct Reflection > reflections ;
263: QList < struct Markup > markups ;
264: } ;

##file cppcheck-2.8/gui/libraryeditargdialog.h

1:
|
25:
26: class QObject ;
27: class QWidget ;
28: namespace Ui {
29: class LibraryEditArgDialog ;
30: }
31:
32: class LibraryEditArgDialog : public QDialog {
33: Q_OBJECT
34:
35: public:
36: LibraryEditArgDialog ( QWidget * parent , const CppcheckLibraryData :: Function :: Arg & arg ) ;
37: LibraryEditArgDialog ( const LibraryEditArgDialog & ) = delete ;
38: ~ LibraryEditArgDialog ( ) override ;
39: LibraryEditArgDialog & operator = ( const LibraryEditArgDialog & ) = delete ;
40:
41: CppcheckLibraryData :: Function :: Arg getArg ( ) const ;
42:
43: private slots :
44: void minsizeChanged ( int ) ;
45:
46: private:
47: Ui :: LibraryEditArgDialog * mUi ;
48:
49: QList < CppcheckLibraryData :: Function :: Arg :: MinSize > mMinSizes ;
50: } ;

##file cppcheck-2.8/gui/libraryeditargdialog.cpp

1:
|
22:
23: class QWidget ;
24:
25: LibraryEditArgDialog :: LibraryEditArgDialog ( QWidget * parent , const CppcheckLibraryData :: Function :: Arg & arg ) :
26: QDialog ( parent ) ,
27: mUi ( new Ui :: LibraryEditArgDialog ) ,
28: mMinSizes ( arg . minsizes )
29: {
30: mUi . setupUi ( this ) ;
31: mUi . notbool . setChecked ( arg . notbool ) ;
32: mUi . notnull . setChecked ( arg . notnull ) ;
33: mUi . notuninit . setChecked ( arg . notuninit ) ;
34: mUi . strz . setChecked ( arg . strz ) ;
35: mUi . formatstr . setChecked ( arg . formatstr ) ;
36: mUi . valid . setText ( arg . valid ) ;
37:
38: mUi . minsize1type . setEnabled ( true ) ;
39: mUi . minsize1arg . setEnabled ( arg . minsizes . count ( ) >= 1 ) ;
40: mUi . minsize1arg2 . setEnabled ( arg . minsizes . count ( ) >= 1 && arg . minsizes [ 0 ] . type == "mul" ) ;
41: mUi . minsize2type . setEnabled ( arg . minsizes . count ( ) >= 1 ) ;
42: mUi . minsize2arg . setEnabled ( arg . minsizes . count ( ) >= 2 ) ;
43: mUi . minsize2arg2 . setEnabled ( arg . minsizes . count ( ) >= 2 && arg . minsizes [ 1 ] . type == "mul" ) ;
44:
45: QStringList items ;
46: items << "None" << "argvalue" << "mul" << "sizeof" << "strlen" ;
47:
48: mUi . minsize1type . clear ( ) ;
49: mUi . minsize1type . addItems ( items ) ;
50: if ( arg . minsizes . count ( ) >= 1 ) {
51: mUi . minsize1type . setCurrentIndex ( items . indexOf ( mMinSizes [ 0 ] . type ) ) ;
52: mUi . minsize1arg . setValue ( mMinSizes [ 0 ] . arg . toInt ( ) ) ;
53: if ( arg . minsizes [ 0 ] . type == "mul" ) {
54: mUi . minsize1arg2 . setValue ( mMinSizes [ 0 ] . arg2 . toInt ( ) ) ; }
55: else {
56: mUi . minsize1arg2 . setValue ( 0 ) ; }
57: } else {
58: mUi . minsize1type . setCurrentIndex ( 0 ) ;
59: mUi . minsize1arg . setValue ( 0 ) ;
60: mUi . minsize1arg2 . setValue ( 0 ) ;
61: }
62:
63: mUi . minsize2type . clear ( ) ;
64: mUi . minsize2type . addItems ( items ) ;
65: if ( arg . minsizes . count ( ) >= 2 ) {
66: mUi . minsize2type . setCurrentIndex ( items . indexOf ( mMinSizes [ 1 ] . type ) ) ;
67: mUi . minsize2arg . setValue ( mMinSizes [ 1 ] . arg . toInt ( ) ) ;
68: if ( arg . minsizes [ 1 ] . type == "mul" ) {
69: mUi . minsize2arg2 . setValue ( mMinSizes [ 1 ] . arg2 . toInt ( ) ) ; }
70: else {
71: mUi . minsize2arg2 . setValue ( 0 ) ; }
72: } else {
73: mUi . minsize2type . setCurrentIndex ( 0 ) ;
74: mUi . minsize2arg . setValue ( 0 ) ;
75: mUi . minsize2arg2 . setValue ( 0 ) ;
76: }
77: }
78:
79: LibraryEditArgDialog :: ~ LibraryEditArgDialog ( )
80: {
81: delete mUi ;
82: }
83:
84: CppcheckLibraryData :: Function :: Arg LibraryEditArgDialog :: getArg ( ) const
85: {
86: CppcheckLibraryData :: Function :: Arg ret ;
87: ret . notbool = mUi . notbool . isChecked ( ) ;
88: ret . notnull = mUi . notnull . isChecked ( ) ;
89: ret . notuninit = mUi . notuninit . isChecked ( ) ;
90: ret . strz = mUi . strz . isChecked ( ) ;
91: ret . formatstr = mUi . formatstr . isChecked ( ) ;
92: if ( mUi . minsize1type . currentIndex ( ) != 0 ) {
93: CppcheckLibraryData :: Function :: Arg :: MinSize minsize1 ;
94: minsize1 . type = mUi . minsize1type . currentText ( ) ;
95: minsize1 . arg = QString :: number ( mUi . minsize1arg . value ( ) ) ;
96: if ( minsize1 . type == "mul" ) {
97: minsize1 . arg2 = QString :: number ( mUi . minsize1arg2 . value ( ) ) ; }
98: ret . minsizes . append ( minsize1 ) ;
99:
100: if ( mUi . minsize2type . currentIndex ( ) != 0 ) {
101: CppcheckLibraryData :: Function :: Arg :: MinSize minsize2 ;
102: minsize2 . type = mUi . minsize2type . currentText ( ) ;
103: minsize2 . arg = QString :: number ( mUi . minsize2arg . value ( ) ) ;
104: if ( minsize2 . type == "mul" ) {
105: minsize2 . arg2 = QString :: number ( mUi . minsize2arg2 . value ( ) ) ; }
106: ret . minsizes . append ( minsize2 ) ;
107: }
108: }
109: ret . valid = mUi . valid . text ( ) ;
110: return ret ;
111: }
112:
113: void LibraryEditArgDialog :: minsizeChanged ( int )
114: {
115: mUi . minsize1arg . setEnabled ( mUi . minsize1type . currentIndex ( ) != 0 ) ;
116: mUi . minsize1arg2 . setEnabled ( mUi . minsize1type . currentText ( ) == "mul" ) ;
117: mUi . minsize2type . setEnabled ( mUi . minsize1type . currentIndex ( ) != 0 ) ;
118: mUi . minsize2arg . setEnabled ( mUi . minsize2type . currentIndex ( ) != 0 ) ;
119: mUi . minsize2arg2 . setEnabled ( mUi . minsize2type . currentText ( ) == "mul" ) ;
120: }



##Value flow
