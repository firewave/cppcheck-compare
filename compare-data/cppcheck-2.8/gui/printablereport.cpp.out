

##file cppcheck-2.8/gui/report.h

1:
|
25:
26: class ErrorItem ;
27:
|
33:
34: class Report : public QObject {
35: public:
36: enum Type {
37: TXT ,
38: XMLV2 ,
39: CSV ,
40: } ;
41:
42: explicit Report ( const QString & filename@var1 ) ;
43: ~ Report ( ) override ;
44:
|
48:
49: virtual bool create ( ) ;
50:
|
54:
55: virtual bool open ( ) ;
56:
|
59:
60: void close ( ) ;
61:
|
64:
65: virtual void writeHeader ( ) = 0 ;
66:
|
69:
70: virtual void writeFooter ( ) = 0 ;
71:
|
75:
76: virtual void writeError ( const ErrorItem & error@var2 ) = 0 ;
77:
78: protected:
79:
|
82:
83: QFile * getFile ( ) ;
84:
85: private:
86:
|
89:
90: QString mFilename@var3 ;
91:
|
94:
95: QFile mFile@var4 ;
96: } ;

##file cppcheck-2.8/gui/printablereport.h

1:
|
23:
24: class ErrorItem ;
25:
|
33:
34: class PrintableReport : public Report {
35: public:
36: PrintableReport ( ) ;
37: ~ PrintableReport ( ) override ;
38:
|
42:
43: virtual bool create ( ) override ;
44:
|
47:
48: virtual void writeHeader ( ) override ;
49:
|
52:
53: virtual void writeFooter ( ) override ;
54:
|
58:
59: virtual void writeError ( const ErrorItem & error@var5 ) override ;
60:
|
63:
64: QString getFormattedReportText ( ) const ;
65:
66: private:
67:
|
70:
71: QString mFormattedReport@var6 ;
72: } ;

##file cppcheck-2.8/gui/erroritem.h

1:
|
36:
37: class GuiSeverity {
38: public:
39: static QString toString ( Severity :: SeverityType severity@var7 ) {
40: return QString ::@expr1073741874 fromStdString (@expr1073741875 Severity ::@expr1073741876 toString (@expr1073741877 severity@var7 ) ) ;
41: }
42:
43: static Severity :: SeverityType fromString ( const QString & severity@var8 ) {
44: return Severity ::@expr1073741878 fromString (@expr1073741879 severity@var8 .@expr1073741880 toStdString (@expr1073741881 ) ) ;
45: }
46: } ;
47:
|
50:
51: class QErrorPathItem {
52: public:
53: QErrorPathItem ( ) : line@var11 ( 0 ) , column@var12 ( -1 ) { }
54: explicit QErrorPathItem ( const ErrorMessage :: FileLocation & loc@var9 ) ;
55: QString file@var10 ;
56: int line@var11 ;
57: int column@var12 ;
58: QString info@var13 ;
59: } ;
60:
61: bool operator== ( const QErrorPathItem & i1@var14 , const QErrorPathItem & i2@var15 ) ;
62:
|
70:
71: class ErrorItem {
72: public:
73: ErrorItem ( ) ;
74: explicit ErrorItem ( const ErrorMessage & errmsg@var16 ) ;
75:
|
79:
80: QString toString ( ) const ;
81: QString tool ( ) const ;
82:
83: QString file0@var17 ;
84: QString function@var18 ;
85: QString errorId@var19 ;
86: Severity :: SeverityType severity@var20 ;
87: bool incomplete@var21 ;
88: bool inconclusive@var22 ;
89: QString summary@var23 ;
90: QString message@var24 ;
91: int cwe@var25 ;
92: unsigned long long hash@var26 ;
93: QList < QErrorPathItem > errorPath@var27 ;
94: QString symbolNames@var28 ;
95:
96:
97: QString sinceDate@var29 ;
98: QString tags@var30 ;
99:
|
102:
103: static bool sameCID ( const ErrorItem & errorItem1@var31 , const ErrorItem & errorItem2@var32 ) ;
104: } ;
105:
|
110:
111: class ErrorLine {
112: public:
113: QString file@var33 ;
114: int line@var34 ;
115: QString file0@var35 ;
116: QString errorId@var36 ;
117: bool incomplete@var37 ;
118: int cwe@var38 ;
119: unsigned long long hash@var39 ;
120: bool inconclusive@var40 ;
121: Severity :: SeverityType severity@var41 ;
122: QString summary@var42 ;
123: QString message@var43 ;
124: QString sinceDate@var44 ;
125: QString tags@var45 ;
126: } ;

##file cppcheck-2.8/gui/printablereport.cpp

1:
|
24:
25: PrintableReport :: PrintableReport ( ) :
26: Report ( QString ( ) )
27: { }
28:
29: PrintableReport :: ~ PrintableReport ( )
30: { }
31:
32: bool PrintableReport :: create ( )
33: {
34: return true ;
35: }
36:
37: void PrintableReport :: writeHeader ( )
38: {
39:
40: }
41:
42: void PrintableReport :: writeFooter ( )
43: {
44:
45: }
46:
47: void PrintableReport :: writeError ( const ErrorItem & error@var46 )
48: {
49: const QString file@var47 =@expr1073741884 QDir ::@expr1073741885 toNativeSeparators (@expr1073741886 error@var46 .@expr63 errorPath@var48 .@expr64 back (@expr65 ) .@expr1073741890 file@expr1073741882 ) ;
50: QString line@var49 ; line@var49 =@expr1073741891 QString (@expr1073741892 "%1,%2," ) .@expr1073741893 arg (@expr1073741894 file@var47 ) .@expr1073741895 arg (@expr1073741896 error@var46 .@expr63 errorPath@var48 .@expr64 back (@expr65 ) .@expr1073741900 line@expr1073741883 ) ;
51: line@var49 +=@expr1073741901 QString (@expr1073741902 "%1,%2" ) .@expr1073741903 arg (@expr1073741904 GuiSeverity ::@expr1073741905 toString (@expr1073741906 error@var46 .@expr1073741907 severity@var50 ) ) .@expr1073741908 arg (@expr1073741909 error@var46 .@expr1073741910 summary@var51 ) ;
52:
53: mFormattedReport@var6 +=@expr1073741911 line@var49 ;
54: mFormattedReport@var6 +=@expr1073741912 "\n" ;
55: }
56:
57: QString PrintableReport :: getFormattedReportText ( ) const
58: {
59: return mFormattedReport@var6 ;
60: }



##Value flow
Line 37
  TXT always 0
Line 38
  XMLV2 always 1
Line 39
  CSV always 2
Line 49
  ( always {!<=-1,!>=2}
Line 55
  ( always {!<=-1,!>=2}
Line 65
  = always 0
  0 always 0
Line 70
  = always 0
  0 always 0
Line 76
  = always 0
  0 always 0
Line 43
  ( always {!<=-1,!>=2}
Line 53
  0 always 0
  -1 always -1
Line 61
  ( always {!<=-1,!>=2}
Line 87
  incomplete always {!<=-1,!>=2}
Line 88
  inconclusive always {!<=-1,!>=2}
Line 92
  hash always !<=-1
Line 103
  ( always {!<=-1,!>=2}
Line 117
  incomplete always {!<=-1,!>=2}
Line 119
  hash always !<=-1
Line 120
  inconclusive always {!<=-1,!>=2}
Line 32
  ( always {!<=-1,!>=2}
Line 34
  return always {!<=-1,!>=2}
  true always 1
Line 50
  "%1,%2," always "%1,%2,"
Line 51
  "%1,%2" always "%1,%2"
Line 54
  "\n" always "\n"
