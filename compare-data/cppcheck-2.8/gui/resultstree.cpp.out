

##file cppcheck-2.8/gui/showtypes.h

1:
|
37:
38: class ShowTypes {
39: public:
40:
|
43:
44: enum ShowType {
45: ShowStyle = 0 ,
46: ShowWarnings ,
47: ShowPerformance ,
48: ShowPortability ,
49: ShowInformation ,
50: ShowErrors ,
51: ShowNone
52: } ;
53:
|
57:
58: ShowTypes ( ) ;
59:
|
63:
64: ~ ShowTypes ( ) ;
65:
|
68:
69: void load ( ) ;
70:
|
73:
74: void save ( ) const ;
75:
|
80:
81: bool isShown ( ShowTypes :: ShowType category ) const ;
82:
|
87:
88: bool isShown ( Severity :: SeverityType severity ) const ;
89:
|
94:
95: void show ( ShowTypes :: ShowType category , bool showing ) ;
96:
|
101:
102: static ShowTypes :: ShowType SeverityToShowType ( Severity :: SeverityType severity ) ;
103:
|
108:
109: static Severity :: SeverityType ShowTypeToSeverity ( ShowTypes :: ShowType type ) ;
110:
|
116:
117: static ShowTypes :: ShowType VariantToShowType ( const QVariant & data ) ;
118:
119: bool mVisible [ ShowNone ] ;
120: } ;

##file cppcheck-2.8/gui/resultstree.h

1:
|
28:
29: class ApplicationList ;
30: class Report ;
31: class ErrorItem ;
32: class ErrorLine ;
33: class QModelIndex ;
34: class QWidget ;
35: class QItemSelectionModel ;
36: class ThreadHandler ;
37: class QContextMenuEvent ;
38: class QKeyEvent ;
39: class QObject ;
40: class QSettings ;
41:
|
49:
50: class ResultsTree : public QTreeView {
51: Q_OBJECT
52: public:
53: explicit ResultsTree ( QWidget * parent = nullptr ) ;
54: ~ ResultsTree ( ) override ;
55: void initialize ( QSettings * settings , ApplicationList * list , ThreadHandler * checkThreadHandler ) ;
56:
|
61:
62: bool addErrorItem ( const ErrorItem & item ) ;
63:
|
67:
68: void clear ( ) ;
69:
|
72:
73: void clear ( const QString & filename ) ;
74:
|
77:
78: void clearRecheckFile ( const QString & filename ) ;
79:
|
85:
86: void filterResults ( const QString & filter ) ;
87:
|
90:
91: void showHiddenResults ( ) ;
92:
|
96:
97: void refreshTree ( ) ;
98:
|
102:
103: void saveResults ( Report * report ) const ;
104:
|
107:
108: void updateFromOldReport ( const QString & filename ) ;
109:
|
118:
119: void updateSettings ( bool showFullPath , bool saveFullPath , bool saveAllErrors , bool showErrorId , bool showInconclusive ) ;
120:
|
126:
127: void setCheckDirectory ( const QString & dir ) ;
128:
|
134:
135: QString getCheckDirectory ( ) ;
136:
|
140:
141: bool hasVisibleResults ( ) const ;
142:
|
146:
147: bool hasResults ( ) const ;
148:
|
152:
153: void saveSettings ( ) const ;
154:
|
158:
159: void translate ( ) ;
160:
|
163:
164: void showIdColumn ( bool show ) ;
165:
|
168:
169: void showInconclusiveColumn ( bool show ) ;
170:
|
173:
174: bool showIdColumn ( ) const {
175: return mShowErrorId ;
176: }
177:
|
180:
181: ShowTypes mShowSeverities ;
182:
183: void keyPressEvent ( QKeyEvent * event ) override ;
184:
185: signals :
186:
|
190:
191: void resultsHidden ( bool hidden ) ;
192:
|
197:
198: void checkSelected ( QStringList selectedItems ) ;
199:
|
204:
205: void treeSelectionChanged ( const QModelIndex & current ) ;
206:
207:
208: void suppressIds ( QStringList ids ) ;
209:
210: public slots :
211:
|
218:
219: void showResults ( ShowTypes :: ShowType type , bool show ) ;
220:
|
227:
228: void showCppcheckResults ( bool show ) ;
229:
|
235:
236: void showClangResults ( bool show ) ;
237:
238: protected slots :
239:
|
243:
244: void quickStartApplication ( const QModelIndex & index ) ;
245:
|
250:
251: void context ( int application ) ;
252:
|
255:
256: void copy ( ) ;
257:
|
261:
262: void hideResult ( ) ;
263:
|
267:
268: void recheckSelectedFiles ( ) ;
269:
|
273:
274: void hideAllIdResult ( ) ;
275:
276:
277: void suppressSelectedIds ( ) ;
278:
279:
280: void suppressHash ( ) ;
281:
|
284:
285: void openContainingFolder ( ) ;
286:
|
292:
293: void currentChanged ( const QModelIndex & current , const QModelIndex & previous ) override ;
294:
295: protected:
296:
|
300:
301: void refreshFilePaths ( ) ;
302:
|
306:
307: void refreshFilePaths ( QStandardItem * item ) ;
308:
|
316:
317: QString stripPath ( const QString & path , bool saving ) const ;
318:
|
324:
325: void saveErrors ( Report * report , const QStandardItem * fileItem ) const ;
326:
|
331:
332: QString severityToIcon ( Severity :: SeverityType severity ) const ;
333:
|
340:
341: void startApplication ( QStandardItem * target , int application = -1 ) ;
342:
|
348:
349: void copyPathToClipboard ( QStandardItem * target , bool fullPath ) ;
350:
|
356:
357: QString getFilePath ( QStandardItem * target , bool fullPath ) ;
358:
|
363:
364: void contextMenuEvent ( QContextMenuEvent * e ) override ;
365:
|
375:
376: QStandardItem * addBacktraceFiles ( QStandardItem * parent ,
377: const ErrorLine & item ,
378: const bool hide ,
379: const QString & icon ,
380: bool childOfMessage ) ;
381:
|
386:
387: static QString severityToTranslatedString ( Severity :: SeverityType severity ) ;
388:
|
392:
393: void loadSettings ( ) ;
394:
|
399:
400: QString askFileDir ( const QString & file ) ;
401:
|
408:
409: static QStandardItem * createNormalItem ( const QString & name ) ;
410:
|
417:
418: static QStandardItem * createCheckboxItem ( bool checked ) ;
419:
|
426:
427: static QStandardItem * createLineNumberItem ( const QString & linenumber ) ;
428:
|
434:
435: QStandardItem * findFileItem ( const QString & name ) const ;
436:
|
445:
446: QStandardItem * ensureFileItem ( const QString & fullpath , const QString & file0 , bool hide ) ;
447:
|
451:
452: QStandardItemModel mModel ;
453:
|
457:
458: QSettings * mSettings ;
459:
|
463:
464: QString mFilter ;
465:
|
469:
470: ApplicationList * mApplications ;
471:
|
475:
476: QStandardItem * mContextItem ;
477:
|
481:
482: bool mShowFullPath ;
483:
|
487:
488: bool mSaveFullPath ;
489:
|
493:
494: bool mSaveAllErrors ;
495:
|
499:
500: bool mShowErrorId ;
501:
|
505:
506: QString mCheckPath ;
507:
|
511:
512: bool mVisibleErrors ;
513:
514: private:
515:
516: void tagSelectedItems ( const QString & tag ) ;
517:
518:
519: void readErrorItem ( const QStandardItem * error , ErrorItem * item ) const ;
520:
521: QStringList mHiddenMessageId ;
522:
523: QItemSelectionModel * mSelectionModel ;
524: ThreadHandler * mThread ;
525:
526: bool mShowCppcheck ;
527: bool mShowClang ;
528: } ;

##file cppcheck-2.8/gui/application.h

1:
|
42:
43: class Application {
44: public:
45: Application ( ) { }
46: Application ( const QString & name , const QString & path , const QString & params ) ;
47:
|
51:
52: QString getName ( ) const {
53: return mName ;
54: }
55:
|
59:
60: QString getPath ( ) const {
61: return mPath ;
62: }
63:
|
67:
68: QString getParameters ( ) const {
69: return mParameters ;
70: }
71:
|
75:
76: void setName ( const QString & name ) {
77: mName = name ;
78: }
79:
|
83:
84: void setPath ( const QString & path ) {
85: mPath = path ;
86: }
87:
|
91:
92: void setParameters ( const QString & parameters ) {
93: mParameters = parameters ;
94: }
95:
96: private:
97:
|
100:
101: QString mName ;
102:
|
105:
106: QString mPath ;
107:
|
110:
111: QString mParameters ;
112: } ;

##file cppcheck-2.8/gui/applicationlist.h

1:
|
32:
33: class ApplicationList : public QObject {
34: Q_OBJECT
35: public:
36:
37: explicit ApplicationList ( QObject * parent = nullptr ) ;
38: ~ ApplicationList ( ) override ;
39:
|
46:
47: bool loadSettings ( ) ;
48:
|
51:
52: void saveSettings ( ) const ;
53:
|
57:
58: int getApplicationCount ( ) const ;
59:
|
65:
66: const Application & getApplication ( const int index ) const ;
67: Application & getApplication ( const int index ) ;
68:
|
72:
73: int getDefaultApplication ( ) const {
74: return mDefaultApplicationIndex ;
75: }
76:
|
81:
82: void addApplication ( const Application & app ) ;
83:
|
88:
89: void removeApplication ( const int index ) ;
90:
|
94:
95: void setDefault ( const int index ) ;
96:
|
101:
102: void copy ( const ApplicationList * list ) ;
103:
104: protected:
105:
|
109:
110: void clear ( ) ;
111:
|
119:
120: private:
121:
122: bool checkAndAddApplication ( const QString & appPath , const QString & name , const QString & parameters ) ;
123:
|
127:
128: QList < Application > mApplications ;
129:
|
133:
134: int mDefaultApplicationIndex ;
135: } ;

##file cppcheck-2.8/gui/common.h

1:
|
113:
114: QString getPath ( const QString & type ) ;
115:
|
121:
122: void setPath ( const QString & type , const QString & value ) ;
123:
|
147:
148: QString toFilterString ( const QMap < QString , QString > & filters , bool addAllSupported = true , bool addAll = true ) ;
149:
|
152:
153: QString getDataDir ( ) ;

##file cppcheck-2.8/gui/erroritem.h

1:
|
36:
37: class GuiSeverity {
38: public:
39: static QString toString ( Severity :: SeverityType severity ) {
40: return QString :: fromStdString ( Severity :: toString ( severity ) ) ;
41: }
42:
43: static Severity :: SeverityType fromString ( const QString & severity ) {
44: return Severity :: fromString ( severity . toStdString ( ) ) ;
45: }
46: } ;
47:
|
50:
51: class QErrorPathItem {
52: public:
53: QErrorPathItem ( ) : line ( 0 ) , column ( -1 ) { }
54: explicit QErrorPathItem ( const ErrorMessage :: FileLocation & loc ) ;
55: QString file ;
56: int line ;
57: int column ;
58: QString info ;
59: } ;
60:
61: bool operator == ( const QErrorPathItem & i1 , const QErrorPathItem & i2 ) ;
62:
|
70:
71: class ErrorItem {
72: public:
73: ErrorItem ( ) ;
74: explicit ErrorItem ( const ErrorMessage & errmsg ) ;
75:
|
79:
80: QString toString ( ) const ;
81: QString tool ( ) const ;
82:
83: QString file0 ;
84: QString function ;
85: QString errorId ;
86: Severity :: SeverityType severity ;
87: bool incomplete ;
88: bool inconclusive ;
89: QString summary ;
90: QString message ;
91: int cwe ;
92: unsigned long long hash ;
93: QList < QErrorPathItem > errorPath ;
94: QString symbolNames ;
95:
96:
97: QString sinceDate ;
98: QString tags ;
99:
|
102:
103: static bool sameCID ( const ErrorItem & errorItem1 , const ErrorItem & errorItem2 ) ;
104: } ;
105:
|
110:
111: class ErrorLine {
112: public:
113: QString file ;
114: int line ;
115: QString file0 ;
116: QString errorId ;
117: bool incomplete ;
118: int cwe ;
119: unsigned long long hash ;
120: bool inconclusive ;
121: Severity :: SeverityType severity ;
122: QString summary ;
123: QString message ;
124: QString sinceDate ;
125: QString tags ;
126: } ;

##file cppcheck-2.8/gui/projectfile.h

1:
|
31:
32: class QXmlStreamReader ;
33: class QXmlStreamWriter ;
34:
|
43:
44: class ProjectFile : public QObject {
45: Q_OBJECT
46:
47: public:
48: explicit ProjectFile ( QObject * parent = nullptr ) ;
49: explicit ProjectFile ( const QString & filename , QObject * parent = nullptr ) ;
50: ~ ProjectFile ( ) override {
51: if ( this == mActiveProject ) { mActiveProject = nullptr ; }
52: }
53:
54: static ProjectFile * getActiveProject ( ) {
55: return mActiveProject ;
56: }
57: void setActiveProject ( ) {
58: mActiveProject = this ;
59: }
60:
|
64:
65: bool read ( const QString & filename = QString ( ) ) ;
66:
|
70:
71: QString getRootPath ( ) const {
72: return mRootPath ;
73: }
74:
75: QString getBuildDir ( ) const {
76: return mBuildDir ;
77: }
78:
79: QString getImportProject ( ) const {
80: return mImportProject ;
81: }
82:
83: bool getAnalyzeAllVsConfigs ( ) const {
84: return mAnalyzeAllVsConfigs ;
85: }
86:
87: bool getCheckHeaders ( ) const {
88: return mCheckHeaders ;
89: }
90:
91: void setCheckHeaders ( bool b ) {
92: mCheckHeaders = b ;
93: }
94:
95: bool getCheckUnusedTemplates ( ) const {
96: return mCheckUnusedTemplates ;
97: }
98:
99: void setCheckUnusedTemplates ( bool b ) {
100: mCheckUnusedTemplates = b ;
101: }
102:
|
106:
107: QStringList getIncludeDirs ( ) const {
108: return ProjectFile :: fromNativeSeparators ( mIncludeDirs ) ;
109: }
110:
|
114:
115: QStringList getDefines ( ) const {
116: return mDefines ;
117: }
118:
|
122:
123: QStringList getUndefines ( ) const {
124: return mUndefines ;
125: }
126:
|
130:
131: QStringList getCheckPaths ( ) const {
132: return ProjectFile :: fromNativeSeparators ( mPaths ) ;
133: }
134:
|
138:
139: QStringList getExcludedPaths ( ) const {
140: return ProjectFile :: fromNativeSeparators ( mExcludedPaths ) ;
141: }
142:
|
146:
147: QStringList getVsConfigurations ( ) const {
148: return mVsConfigurations ;
149: }
150:
|
154:
155: QStringList getLibraries ( ) const {
156: return mLibraries ;
157: }
158:
|
162:
163: QString getPlatform ( ) const {
164: return mPlatform ;
165: }
166:
|
170:
171: QList < Suppressions :: Suppression > getSuppressions ( ) const {
172: return mSuppressions ;
173: }
174:
|
178:
179: QStringList getAddons ( ) const {
180: return mAddons ;
181: }
182:
|
187:
188: static QString getAddonFilePath ( QString filesDir , const QString & addon ) ;
189:
|
193:
194: QStringList getAddonsAndTools ( ) const ;
195:
196: bool getClangAnalyzer ( ) const {
197: return false ;
198: }
199:
200: void setClangAnalyzer ( bool c ) {
201: mClangAnalyzer = c ;
202: }
203:
204: bool getClangTidy ( ) const {
205: return mClangTidy ;
206: }
207:
208: void setClangTidy ( bool c ) {
209: mClangTidy = c ;
210: }
211:
212: QStringList getTags ( ) const {
213: return mTags ;
214: }
215:
216: int getMaxCtuDepth ( ) const {
217: return mMaxCtuDepth ;
218: }
219:
220: void setMaxCtuDepth ( int maxCtuDepth ) {
221: mMaxCtuDepth = maxCtuDepth ;
222: }
223:
224: int getMaxTemplateRecursion ( ) const {
225: return mMaxTemplateRecursion ;
226: }
227:
228: void setMaxTemplateRecursion ( int maxTemplateRecursion ) {
229: mMaxTemplateRecursion = maxTemplateRecursion ;
230: }
231:
|
235:
236: QString getFilename ( ) const {
237: return mFilename ;
238: }
239:
|
243:
244: void setRootPath ( const QString & rootpath ) {
245: mRootPath = rootpath ;
246: }
247:
248: void setBuildDir ( const QString & buildDir ) {
249: mBuildDir = buildDir ;
250: }
251:
252: void setImportProject ( const QString & importProject ) {
253: mImportProject = importProject ;
254: }
255:
256: void setAnalyzeAllVsConfigs ( bool b ) {
257: mAnalyzeAllVsConfigs = b ;
258: }
259:
|
263:
264: void setIncludes ( const QStringList & includes ) ;
265:
|
269:
270: void setDefines ( const QStringList & defines ) ;
271:
|
275:
276: void setUndefines ( const QStringList & undefines ) ;
277:
|
281:
282: void setCheckPaths ( const QStringList & paths ) ;
283:
|
287:
288: void setExcludedPaths ( const QStringList & paths ) ;
289:
|
293:
294: void setLibraries ( const QStringList & libraries ) ;
295:
|
299:
300: void setPlatform ( const QString & platform ) ;
301:
|
305:
306: void setSuppressions ( const QList < Suppressions :: Suppression > & suppressions ) ;
307:
308:
309: void addSuppression ( const Suppressions :: Suppression & suppression ) ;
310:
|
314:
315: void setAddons ( const QStringList & addons ) ;
316:
|
319:
320: void setVSConfigurations ( const QStringList & vsConfigs ) ;
321:
|
325:
326: void setTags ( const QStringList & tags ) {
327: mTags = tags ;
328: }
329:
330:
331: void setWarningTags ( std :: size_t hash , const QString & tags ) ;
332:
333:
334: QString getWarningTags ( std :: size_t hash ) const ;
335:
|
339:
340: bool write ( const QString & filename = QString ( ) ) ;
341:
|
345:
346: void setFilename ( const QString & filename ) {
347: mFilename = filename ;
348: }
349:
350:
351: class SafeChecks : public Settings :: SafeChecks {
352: public:
353: SafeChecks ( ) : Settings :: SafeChecks ( ) { }
354:
355: void loadFromXml ( QXmlStreamReader & xmlReader ) ;
356: void saveToXml ( QXmlStreamWriter & xmlWriter ) const ;
357: } ;
358:
359: SafeChecks safeChecks ;
360:
361:
362: QStringList getCheckUnknownFunctionReturn ( ) const {
363: return mCheckUnknownFunctionReturn ;
364: }
365: void setCheckUnknownFunctionReturn ( const QStringList & s ) {
366: mCheckUnknownFunctionReturn = s ;
367: }
368:
369:
370: bool clangParser ;
371:
372: protected:
373:
|
377:
378: void readRootPath ( QXmlStreamReader & reader ) ;
379:
380: void readBuildDir ( QXmlStreamReader & reader ) ;
381:
|
385:
386: void readImportProject ( QXmlStreamReader & reader ) ;
387:
388: bool readBool ( QXmlStreamReader & reader ) ;
389:
390: int readInt ( QXmlStreamReader & reader , int defaultValue ) ;
391:
|
395:
396: void readIncludeDirs ( QXmlStreamReader & reader ) ;
397:
|
401:
402: void readDefines ( QXmlStreamReader & reader ) ;
403:
|
407:
408: void readCheckPaths ( QXmlStreamReader & reader ) ;
409:
|
413:
414: void readExcludes ( QXmlStreamReader & reader ) ;
415:
|
419:
420: void readVsConfigurations ( QXmlStreamReader & reader ) ;
421:
|
425:
426: void readPlatform ( QXmlStreamReader & reader ) ;
427:
|
431:
432: void readSuppressions ( QXmlStreamReader & reader ) ;
433:
|
437:
438: void readTagWarnings ( QXmlStreamReader & reader , const QString & tag ) ;
439:
|
445:
446: void readStringList ( QStringList & stringlist , QXmlStreamReader & reader , const char elementname [ ] ) ;
447:
|
454:
455: static void writeStringList ( QXmlStreamWriter & xmlWriter , const QStringList & stringlist , const char startelementname [ ] , const char stringelementname [ ] ) ;
456:
457: private:
458:
459: void clear ( ) ;
460:
|
463:
464: static QStringList fromNativeSeparators ( const QStringList & paths ) ;
465:
|
468:
469: QString mFilename ;
470:
|
476:
477: QString mRootPath ;
478:
479:
480: QString mBuildDir ;
481:
482:
483: QString mImportProject ;
484:
|
489:
490: bool mAnalyzeAllVsConfigs ;
491:
492:
493: QStringList mVsConfigurations ;
494:
495:
496: bool mCheckHeaders ;
497:
498:
499: bool mCheckUnusedTemplates ;
500:
|
503:
504: QStringList mIncludeDirs ;
505:
|
508:
509: QStringList mDefines ;
510:
|
513:
514: QStringList mUndefines ;
515:
|
518:
519: QStringList mPaths ;
520:
|
523:
524: QStringList mExcludedPaths ;
525:
|
528:
529: QStringList mLibraries ;
530:
|
533:
534: QString mPlatform ;
535:
|
538:
539: QList < Suppressions :: Suppression > mSuppressions ;
540:
|
543:
544: QStringList mAddons ;
545:
546:
547: bool mClangAnalyzer ;
548:
549:
550: bool mClangTidy ;
551:
|
554:
555: QStringList mTags ;
556:
|
559:
560: std :: map < std :: size_t , QString > mWarningTags ;
561:
562:
563: int mMaxCtuDepth ;
564:
565:
566: int mMaxTemplateRecursion ;
567:
568: QStringList mCheckUnknownFunctionReturn ;
569:
570: static ProjectFile * mActiveProject ;
571: } ;

##file cppcheck-2.8/gui/report.h

1:
|
25:
26: class ErrorItem ;
27:
|
33:
34: class Report : public QObject {
35: public:
36: enum Type {
37: TXT ,
38: XMLV2 ,
39: CSV ,
40: } ;
41:
42: explicit Report ( const QString & filename ) ;
43: ~ Report ( ) override ;
44:
|
48:
49: virtual bool create ( ) ;
50:
|
54:
55: virtual bool open ( ) ;
56:
|
59:
60: void close ( ) ;
61:
|
64:
65: virtual void writeHeader ( ) = 0 ;
66:
|
69:
70: virtual void writeFooter ( ) = 0 ;
71:
|
75:
76: virtual void writeError ( const ErrorItem & error ) = 0 ;
77:
78: protected:
79:
|
82:
83: QFile * getFile ( ) ;
84:
85: private:
86:
|
89:
90: QString mFilename ;
91:
|
94:
95: QFile mFile ;
96: } ;

##file cppcheck-2.8/gui/threadresult.h

1:
|
33:
34: class ErrorItem ;
35:
|
42:
43: class ThreadResult : public QObject , public ErrorLogger {
44: Q_OBJECT
45: public:
46: ThreadResult ( ) ;
47: ~ ThreadResult ( ) override ;
48:
|
52:
53: QString getNextFile ( ) ;
54:
55: ImportProject :: FileSettings getNextFileSettings ( ) ;
56:
|
60:
61: void setFiles ( const QStringList & files ) ;
62:
63: void setProject ( const ImportProject & prj ) ;
64:
|
68:
69: void clearFiles ( ) ;
70:
|
74:
75: int getFileCount ( ) const ;
76:
|
79:
80: void reportOut ( const std :: string & outmsg , Color c = Color :: Reset ) override ;
81: void reportErr ( const ErrorMessage & msg ) override ;
82:
83: public slots :
84:
|
88:
89: void fileChecked ( const QString & file ) ;
90: signals :
91:
|
95:
96: void progress ( int value , const QString & description ) ;
97:
|
102:
103: void error ( const ErrorItem & item ) ;
104:
|
109:
110: void log ( const QString & logline ) ;
111:
|
116:
117: void debugError ( const ErrorItem & item ) ;
118:
119: protected:
120:
|
124:
125: mutable QMutex mutex ;
126:
|
130:
131: QStringList mFiles ;
132:
133: std :: list < ImportProject :: FileSettings > mFileSettings ;
134:
|
138:
139: quint64 mMaxProgress ;
140:
|
144:
145: quint64 mProgress ;
146:
|
150:
151: unsigned long mFilesChecked ;
152:
|
156:
157: unsigned long mTotalFiles ;
158: } ;

##file cppcheck-2.8/gui/threadhandler.h

1:
|
32:
33: class ResultsView ;
34: class CheckThread ;
35: class QSettings ;
36: class Settings ;
37: class ImportProject ;
38: class ErrorItem ;
39:
|
47:
48: class ThreadHandler : public QObject {
49: Q_OBJECT
50: public:
51: explicit ThreadHandler ( QObject * parent = nullptr ) ;
52: ~ ThreadHandler ( ) override ;
53:
|
57:
58: void setThreadCount ( const int count ) ;
59:
|
64:
65: void initialize ( ResultsView * view ) ;
66:
|
70:
71: void loadSettings ( const QSettings & settings ) ;
72:
|
76:
77: void saveSettings ( QSettings & settings ) const ;
78:
79: void setAddonsAndTools ( const QStringList & addonsAndTools ) {
80: mAddonsAndTools = addonsAndTools ;
81: }
82:
83: void setSuppressions ( const QList < Suppressions :: Suppression > & s ) {
84: mSuppressions = s ;
85: }
86:
87: void setClangIncludePaths ( const QStringList & s ) {
88: mClangIncludePaths = s ;
89: }
90:
|
94:
95: void clearFiles ( ) ;
96:
|
101:
102: void setFiles ( const QStringList & files ) ;
103:
|
108:
109: void setProject ( const ImportProject & prj ) ;
110:
|
115:
116: void check ( const Settings & settings ) ;
117:
|
122:
123: void setCheckFiles ( bool all ) ;
124:
|
129:
130: void setCheckFiles ( const QStringList & files ) ;
131:
|
136:
137: bool isChecking ( ) const ;
138:
|
143:
144: bool hasPreviousFiles ( ) const ;
145:
|
150:
151: int getPreviousFilesCount ( ) const ;
152:
|
157:
158: int getPreviousScanDuration ( ) const ;
159:
|
163:
164: QStringList getReCheckFiles ( bool all ) const ;
165:
|
170:
171: QDateTime getCheckStartTime ( ) const ;
172:
|
177:
178: void setCheckStartTime ( QDateTime checkStartTime ) ;
179:
180: signals :
181:
|
184:
185: void done ( ) ;
186:
187: void log ( const QString & msg ) ;
188:
189: void debugError ( const ErrorItem & item ) ;
190:
191: public slots :
192:
|
196:
197: void stop ( ) ;
198: protected slots :
199:
|
202:
203: void threadDone ( ) ;
204: protected:
205:
|
208:
209: QStringList mLastFiles ;
210:
211:
212: QDateTime mCheckStartTime ;
213:
|
216:
217: QDateTime mLastCheckTime ;
218:
|
222:
223: QElapsedTimer mTimer ;
224:
|
228:
229: int mScanDuration ;
230:
|
234:
235: void removeThreads ( ) ;
236:
|
240:
241: ThreadResult mResults ;
242:
|
246:
247: QList < CheckThread * > mThreads ;
248:
|
252:
253: int mRunningThreadCount ;
254:
255: bool mAnalyseWholeProgram ;
256:
257: QStringList mAddonsAndTools ;
258: QList < Suppressions :: Suppression > mSuppressions ;
259: QStringList mClangIncludePaths ;
260: private:
261:
|
265:
266: bool needsReCheck ( const QString & filename , std :: set < QString > & modified , std :: set < QString > & unmodified ) const ;
267: } ;

##file cppcheck-2.8/gui/xmlreport.h

1:
|
26:
27: class ErrorItem ;
28:
|
35:
36: class XmlReport : public Report {
37: public:
38: explicit XmlReport ( const QString & filename ) ;
39:
|
42:
43: virtual QList < ErrorItem > read ( ) = 0 ;
44:
|
49:
50: static QString quoteMessage ( const QString & message ) ;
51:
|
56:
57: static QString unquoteMessage ( const QString & message ) ;
58:
|
63:
64: static int determineVersion ( const QString & filename ) ;
65: } ;

##file cppcheck-2.8/gui/xmlreportv2.h

1:
|
26:
27: class QXmlStreamReader ;
28: class QXmlStreamWriter ;
29:
|
38:
39: class XmlReportV2 : public XmlReport {
40: public:
41: explicit XmlReportV2 ( const QString & filename ) ;
42: ~ XmlReportV2 ( ) override ;
43:
|
47:
48: virtual bool create ( ) override ;
49:
|
52:
53: virtual bool open ( ) override ;
54:
|
57:
58: virtual void writeHeader ( ) override ;
59:
|
62:
63: virtual void writeFooter ( ) override ;
64:
|
68:
69: virtual void writeError ( const ErrorItem & error ) override ;
70:
|
73:
74: virtual QList < ErrorItem > read ( ) override ;
75:
76: protected:
77:
|
80:
81: ErrorItem readError ( QXmlStreamReader * reader ) ;
82:
83: private:
84:
85:
86:
87: QXmlStreamReader * mXmlReader ;
88:
|
91:
92: QXmlStreamWriter * mXmlWriter ;
93: } ;

##file cppcheck-2.8/gui/resultstree.cpp

1:
|
54:
55: static const char COLUMN [ ] = "column" ;
56: static const char CWE [ ] = "cwe" ;
57: static const char ERRORID [ ] = "id" ;
58: static const char FILENAME [ ] = "file" ;
59: static const char FILE0 [ ] = "file0" ;
60: static const char FUNCTION [ ] = "function" ;
61: static const char HASH [ ] = "hash" ;
62: static const char HIDE [ ] = "hide" ;
63: static const char INCOMPLETE [ ] = "incomplete" ;
64: static const char INCONCLUSIVE [ ] = "inconclusive" ;
65: static const char LINE [ ] = "line" ;
66: static const char MESSAGE [ ] = "message" ;
67: static const char SEVERITY [ ] = "severity" ;
68: static const char SINCEDATE [ ] = "sinceDate" ;
69: static const char SYMBOLNAMES [ ] = "symbolNames" ;
70: static const char SUMMARY [ ] = "summary" ;
71: static const char TAGS [ ] = "tags" ;
72:
73:
74: static const int COLUMN_SINCE_DATE = 6 ;
75: static const int COLUMN_TAGS = 7 ;
76:
77: ResultsTree :: ResultsTree ( QWidget * parent ) :
78: QTreeView ( parent ) ,
79: mSettings ( nullptr ) ,
80: mApplications ( nullptr ) ,
81: mContextItem ( nullptr ) ,
82: mShowFullPath ( false ) ,
83: mSaveFullPath ( false ) ,
84: mSaveAllErrors ( true ) ,
85: mShowErrorId ( false ) ,
86: mVisibleErrors ( false ) ,
87: mSelectionModel ( nullptr ) ,
88: mThread ( nullptr ) ,
89: mShowCppcheck ( true ) ,
90: mShowClang ( true )
91: {
92: setModel ( & mModel ) ;
93: translate ( ) ;
94: setExpandsOnDoubleClick ( false ) ;
95: setSortingEnabled ( true ) ;
96:
97: connect ( this , & ResultsTree :: doubleClicked , this , & ResultsTree :: quickStartApplication ) ;
98: }
99:
100: ResultsTree :: ~ ResultsTree ( )
101: { }
102:
103: void ResultsTree :: keyPressEvent ( QKeyEvent * event )
104: {
105: if ( event . key ( ) == Qt :: Key_Enter || event . key ( ) == Qt :: Key_Return ) {
106: quickStartApplication ( this . currentIndex ( ) ) ;
107: }
108: QTreeView :: keyPressEvent ( event ) ;
109: }
110:
111: void ResultsTree :: initialize ( QSettings * settings , ApplicationList * list , ThreadHandler * checkThreadHandler )
112: {
113: mSettings = settings ;
114: mApplications = list ;
115: mThread = checkThreadHandler ;
116: loadSettings ( ) ;
117: }
118:
119:
120: QStandardItem * ResultsTree :: createNormalItem ( const QString & name )
121: {
122: QStandardItem * item ; item = new QStandardItem ( name ) ;
123: item . setData ( name , Qt :: ToolTipRole ) ;
124: item . setEditable ( false ) ;
125: return item ;
126: }
127:
128: QStandardItem * ResultsTree :: createCheckboxItem ( bool checked )
129: {
130: QStandardItem * item ; item = new QStandardItem ;
131: item . setCheckable ( true ) ;
132: item . setCheckState ( checked ? Qt :: Checked : Qt :: Unchecked ) ;
133: item . setEnabled ( false ) ;
134: return item ;
135: }
136:
137: QStandardItem * ResultsTree :: createLineNumberItem ( const QString & linenumber )
138: {
139: QStandardItem * item ; item = new QStandardItem ( ) ;
140: item . setData ( QVariant ( linenumber . toInt ( ) ) , Qt :: DisplayRole ) ;
141: item . setToolTip ( linenumber ) ;
142: item . setTextAlignment ( Qt :: AlignRight | Qt :: AlignVCenter ) ;
143: item . setEditable ( false ) ;
144: return item ;
145: }
146:
147: bool ResultsTree :: addErrorItem ( const ErrorItem & item )
148: {
149: if ( item . errorPath . isEmpty ( ) ) {
150: return false ;
151: }
152:
153: const QErrorPathItem & loc = item . errorId . startsWith ( "clang" ) ? item . errorPath . front ( ) : item . errorPath . back ( ) ;
154: QString realfile ; realfile = stripPath ( loc . file , false ) ;
155:
156: if ( realfile . isEmpty ( ) ) {
157: realfile = tr ( "Undefined file" ) ;
158: }
159:
160: bool hide ; hide = false ;
161:
162:
163: if ( mHiddenMessageId . contains ( item . errorId ) ) {
164: hide = true ; }
165:
166:
167: if ( ! hide && ! mFilter . isEmpty ( ) ) {
168: if ( ! item . summary . contains ( mFilter , Qt :: CaseInsensitive ) &&
169: ! item . message . contains ( mFilter , Qt :: CaseInsensitive ) &&
170: ! item . errorPath . back ( ) . file . contains ( mFilter , Qt :: CaseInsensitive ) &&
171: ! item . errorId . contains ( mFilter , Qt :: CaseInsensitive ) ) {
172: hide = true ;
173: }
174: }
175:
176:
177: if ( ! hide ) {
178: mVisibleErrors = true ;
179: }
180:
181: ErrorLine line ;
182: line . file = realfile ;
183: line . line = loc . line ;
184: line . errorId = item . errorId ;
185: line . incomplete = item . incomplete ;
186: line . cwe = item . cwe ;
187: line . hash = item . hash ;
188: line . inconclusive = item . inconclusive ;
189: line . summary = item . summary ;
190: line . message = item . message ;
191: line . severity = item . severity ;
192: line . sinceDate = item . sinceDate ;
193: if ( const ProjectFile * activeProject = ProjectFile :: getActiveProject ( ) ) {
194: line . tags = activeProject . getWarningTags ( item . hash ) ;
195: }
196:
197:
198: QStandardItem * fileItem ; fileItem = ensureFileItem ( loc . file , item . file0 , hide ) ;
199: QStandardItem * stditem ; stditem = addBacktraceFiles ( fileItem ,
200: line ,
201: hide ,
202: severityToIcon ( line . severity ) ,
203: false ) ;
204:
205: if ( ! stditem ) {
206: return false ; }
207:
208:
209: QMap < QString , QVariant > data ;
210: data [ SEVERITY ] = ShowTypes :: SeverityToShowType ( item . severity ) ;
211: data [ SUMMARY ] = item . summary ;
212: data [ MESSAGE ] = item . message ;
213: data [ FILENAME ] = loc . file ;
214: data [ LINE ] = loc . line ;
215: data [ COLUMN ] = loc . column ;
216: data [ ERRORID ] = item . errorId ;
217: data [ INCOMPLETE ] = item . incomplete ;
218: data [ CWE ] = item . cwe ;
219: data [ HASH ] = item . hash ;
220: data [ INCONCLUSIVE ] = item . inconclusive ;
221: data [ FILE0 ] = stripPath ( item . file0 , true ) ;
222: data [ FUNCTION ] = item . function ;
223: data [ SINCEDATE ] = item . sinceDate ;
224: data [ SYMBOLNAMES ] = item . symbolNames ;
225: data [ TAGS ] = line . tags ;
226: data [ HIDE ] = hide ;
227: stditem . setData ( QVariant ( data ) ) ;
228:
229:
230: if ( item . errorPath . size ( ) > 1 ) {
231: for ( int i = 0 ; i < item . errorPath . size ( ) ; i ++ ) {
232: const QErrorPathItem & e = item . errorPath [ i ] ;
233: line . file = e . file ;
234: line . line = e . line ;
235: line . message = line . summary = e . info ;
236: QStandardItem * child_item ;
237: child_item = addBacktraceFiles ( stditem ,
238: line ,
239: hide ,
240: ":images/go-down.png" ,
241: true ) ;
242: if ( ! child_item ) {
243: continue ; }
244:
245:
246: QMap < QString , QVariant > child_data ;
247: child_data [ SEVERITY ] = ShowTypes :: SeverityToShowType ( line . severity ) ;
248: child_data [ SUMMARY ] = line . summary ;
249: child_data [ MESSAGE ] = line . message ;
250: child_data [ FILENAME ] = e . file ;
251: child_data [ LINE ] = e . line ;
252: child_data [ COLUMN ] = e . column ;
253: child_data [ ERRORID ] = line . errorId ;
254: child_data [ INCOMPLETE ] = line . incomplete ;
255: child_data [ CWE ] = line . cwe ;
256: child_data [ HASH ] = line . hash ;
257: child_data [ INCONCLUSIVE ] = line . inconclusive ;
258: child_data [ SYMBOLNAMES ] = item . symbolNames ;
259: child_item . setData ( QVariant ( child_data ) ) ;
260: }
261: }
262:
263:
264: if ( ! hide ) {
265: setRowHidden ( fileItem . row ( ) , QModelIndex ( ) , ! mShowSeverities . isShown ( item . severity ) ) ;
266: }
267: return true ;
268: }
269:
270: QStandardItem * ResultsTree :: addBacktraceFiles ( QStandardItem * parent ,
271: const ErrorLine & item ,
272: const bool hide ,
273: const QString & icon ,
274: bool childOfMessage )
275: {
276: if ( ! parent ) {
277: return nullptr ;
278: }
279:
280: QList < QStandardItem * > list ;
281:
282: list << createNormalItem ( QDir :: toNativeSeparators ( item . file ) )
283: << createNormalItem ( childOfMessage ? tr ( "note" ) : severityToTranslatedString ( item . severity ) )
284: << createLineNumberItem ( QString :: number ( item . line ) )
285: << createNormalItem ( childOfMessage ? QString ( ) : item . errorId )
286: << ( childOfMessage ? createNormalItem ( QString ( ) ) : createCheckboxItem ( item . inconclusive ) )
287: << createNormalItem ( item . summary )
288: << createNormalItem ( item . sinceDate )
289: << createNormalItem ( item . tags ) ;
290:
|
294:
295: for ( int i = 0 ; i < parent . rowCount ( ) ; i ++ ) {
296:
297:
298:
299: if ( parent . child ( i , 2 ) . text ( ) == list [ 2 ] . text ( ) ) {
300:
301: if ( parent . child ( i , 1 ) . text ( ) == list [ 1 ] . text ( ) ) {
302:
303: if ( parent . child ( i , 5 ) . text ( ) == list [ 5 ] . text ( ) ) {
304:
305: return nullptr ;
306: }
307: }
308: }
309: }
310:
311: parent . appendRow ( list ) ;
312:
313: setRowHidden ( parent . rowCount ( ) - 1 , parent . index ( ) , hide ) ;
314:
315: if ( ! icon . isEmpty ( ) ) {
316: list [ 0 ] . setIcon ( QIcon ( icon ) ) ;
317: }
318:
319:
320:
321: return list [ 0 ] ;
322: }
323:
324: QString ResultsTree :: severityToTranslatedString ( Severity :: SeverityType severity )
325: {
326: switch ( severity ) {
327: case Severity :: style : ;
328: return tr ( "style" ) ;
329:
330: case Severity :: error : ;
331: return tr ( "error" ) ;
332:
333: case Severity :: warning : ;
334: return tr ( "warning" ) ;
335:
336: case Severity :: performance : ;
337: return tr ( "performance" ) ;
338:
339: case Severity :: portability : ;
340: return tr ( "portability" ) ;
341:
342: case Severity :: information : ;
343: return tr ( "information" ) ;
344:
345: case Severity :: debug : ;
346: return tr ( "debug" ) ;
347:
348: case Severity :: none : ;
349: default : ;
350: return QString ( ) ;
351: }
352: }
353:
354: QStandardItem * ResultsTree :: findFileItem ( const QString & name ) const
355: {
356:
357:
358:
359: for ( int i = 0 ; i < mModel . rowCount ( ) ; i ++ ) {
360:
361:
362:
363: if ( mModel . item ( i , 0 ) . text ( ) == name ) {
364:
365: return mModel . item ( i , 0 ) ; }
366: }
367: return nullptr ;
368: }
369:
370: void ResultsTree :: clear ( )
371: {
372: mModel . removeRows ( 0 , mModel . rowCount ( ) ) ;
373: }
374:
375: void ResultsTree :: clear ( const QString & filename )
376: {
377: const QString stripped = stripPath ( filename , false ) ;
378:
379: for ( int i = 0 ; i < mModel . rowCount ( ) ; ++ i ) {
380: const QStandardItem * fileItem ; fileItem = mModel . item ( i , 0 ) ;
381: if ( ! fileItem ) {
382: continue ; }
383:
384: QVariantMap data ; data = fileItem . data ( ) . toMap ( ) ;
385: if ( stripped == data [ FILENAME ] . toString ( ) ||
386: filename == data [ FILE0 ] . toString ( ) ) {
387: mModel . removeRow ( i ) ;
388: break ;
389: }
390: }
391: }
392:
393: void ResultsTree :: clearRecheckFile ( const QString & filename )
394: {
395: for ( int i = 0 ; i < mModel . rowCount ( ) ; ++ i ) {
396: const QStandardItem * fileItem ; fileItem = mModel . item ( i , 0 ) ;
397: if ( ! fileItem ) {
398: continue ; }
399:
400: QString actualfile ( ( ! mCheckPath . isEmpty ( ) && filename . startsWith ( mCheckPath ) ) ? filename . mid ( mCheckPath . length ( ) + 1 ) : filename ) ;
401: QVariantMap data ; data = fileItem . data ( ) . toMap ( ) ;
402: QString storedfile ; storedfile = data [ FILENAME ] . toString ( ) ;
403: storedfile = ( ( ! mCheckPath . isEmpty ( ) && storedfile . startsWith ( mCheckPath ) ) ? storedfile . mid ( mCheckPath . length ( ) + 1 ) : storedfile ) ;
404: if ( actualfile == storedfile ) {
405: mModel . removeRow ( i ) ;
406: break ;
407: }
408: }
409: }
410:
411:
412: void ResultsTree :: loadSettings ( )
413: {
414: for ( int i = 0 ; i < mModel . columnCount ( ) ; i ++ ) {
415: QString temp ; temp = QString ( $"Result column %1 width" ) . arg ( i ) ;
416: setColumnWidth ( i , qMax ( 20 , mSettings . value ( temp , 800 / mModel . columnCount ( ) ) . toInt ( ) ) ) ;
417: }
418:
419: mSaveFullPath = mSettings . value ( $"Save full path" , false ) . toBool ( ) ;
420: mSaveAllErrors = mSettings . value ( $"Save all errors" , false ) . toBool ( ) ;
421: mShowFullPath = mSettings . value ( $"Show full path" , false ) . toBool ( ) ;
422:
423: showIdColumn ( mSettings . value ( $"Show error Id" , false ) . toBool ( ) ) ;
424: showInconclusiveColumn ( mSettings . value ( $"Inconclusive errors" , false ) . toBool ( ) ) ;
425: }
426:
427: void ResultsTree :: saveSettings ( ) const
428: {
429: for ( int i = 0 ; i < mModel . columnCount ( ) ; i ++ ) {
430: QString temp ; temp = QString ( $"Result column %1 width" ) . arg ( i ) ;
431: mSettings . setValue ( temp , columnWidth ( i ) ) ;
432: }
433: }
434:
435: void ResultsTree :: showResults ( ShowTypes :: ShowType type , bool show )
436: {
437: if ( type != ShowTypes :: ShowNone && mShowSeverities . isShown ( type ) != show ) {
438: mShowSeverities . show ( type , show ) ;
439: refreshTree ( ) ;
440: }
441: }
442:
443: void ResultsTree :: showCppcheckResults ( bool show )
444: {
445: mShowCppcheck = show ;
446: refreshTree ( ) ;
447: }
448:
449: void ResultsTree :: showClangResults ( bool show )
450: {
451: mShowClang = show ;
452: refreshTree ( ) ;
453: }
454:
455: void ResultsTree :: filterResults ( const QString & filter )
456: {
457: mFilter = filter ;
458: refreshTree ( ) ;
459: }
460:
461: void ResultsTree :: showHiddenResults ( )
462: {
463:
464: mHiddenMessageId . clear ( ) ;
465: int filecount ; filecount = mModel . rowCount ( ) ;
466: for ( int i = 0 ; i < filecount ; i ++ ) {
467: QStandardItem * fileItem ; fileItem = mModel . item ( i , 0 ) ;
468: if ( ! fileItem ) {
469: continue ; }
470:
471: QVariantMap data ; data = fileItem . data ( ) . toMap ( ) ;
472: data [ HIDE ] = false ;
473: fileItem . setData ( QVariant ( data ) ) ;
474:
475: int errorcount ; errorcount = fileItem . rowCount ( ) ;
476: for ( int j = 0 ; j < errorcount ; j ++ ) {
477: QStandardItem * child ; child = fileItem . child ( j , 0 ) ;
478: if ( child ) {
479: data = child . data ( ) . toMap ( ) ;
480: data [ HIDE ] = false ;
481: child . setData ( QVariant ( data ) ) ;
482: }
483: }
484: }
485: refreshTree ( ) ;
486: emit resultsHidden ( false ) ;
487: }
488:
489:
490: void ResultsTree :: refreshTree ( )
491: {
492: mVisibleErrors = false ;
493:
494: int filecount ; filecount = mModel . rowCount ( ) ;
495:
496: for ( int i = 0 ; i < filecount ; i ++ ) {
497:
498: QStandardItem * fileItem ; fileItem = mModel . item ( i , 0 ) ;
499: if ( ! fileItem ) {
500: continue ;
501: }
502:
503:
504: int errorcount ; errorcount = fileItem . rowCount ( ) ;
505:
506:
507: bool show ; show = false ;
508:
509: for ( int j = 0 ; j < errorcount ; j ++ ) {
510:
511: QStandardItem * child ; child = fileItem . child ( j , 0 ) ;
512: if ( ! child ) {
513: continue ;
514: }
515:
516:
517: QVariant userdata ; userdata = child . data ( ) ;
518:
519: QVariantMap data ; data = userdata . toMap ( ) ;
520:
521:
522: bool hide ; hide = ( data [ HIDE ] . toBool ( ) || ! mShowSeverities . isShown ( ShowTypes :: VariantToShowType ( data [ SEVERITY ] ) ) ) ;
523:
524:
525: if ( ! hide && ! mFilter . isEmpty ( ) ) {
526: if ( ! data [ SUMMARY ] . toString ( ) . contains ( mFilter , Qt :: CaseInsensitive ) &&
527: ! data [ MESSAGE ] . toString ( ) . contains ( mFilter , Qt :: CaseInsensitive ) &&
528: ! data [ FILENAME ] . toString ( ) . contains ( mFilter , Qt :: CaseInsensitive ) &&
529: ! data [ ERRORID ] . toString ( ) . contains ( mFilter , Qt :: CaseInsensitive ) ) {
530: hide = true ;
531: }
532: }
533:
534:
535: if ( ! hide ) {
536: if ( data [ ERRORID ] . toString ( ) . startsWith ( "clang" ) ) {
537: hide = ! mShowClang ; }
538: else {
539: hide = ! mShowCppcheck ; }
540: }
541:
542: if ( ! hide ) {
543: mVisibleErrors = true ;
544: }
545:
546:
547: setRowHidden ( j , fileItem . index ( ) , hide ) ;
548:
549:
550: if ( ! hide ) {
551: show = true ;
552: }
553: }
554:
555:
556: if ( fileItem . data ( ) . toMap ( ) [ "hide" ] . toBool ( ) ) {
557: show = false ;
558: }
559:
560:
561: setRowHidden ( i , QModelIndex ( ) , ! show ) ;
562: }
563: }
564:
565: QStandardItem * ResultsTree :: ensureFileItem ( const QString & fullpath , const QString & file0 , bool hide )
566: {
567: QString name ; name = stripPath ( fullpath , false ) ;
568:
569:
570: QStandardItem * item ; item = findFileItem ( QDir :: toNativeSeparators ( name ) ) ;
571:
572: if ( item ) {
573: return item ;
574: }
575:
576:
577: name = QDir :: toNativeSeparators ( name ) ;
578: item = createNormalItem ( name ) ;
579: item . setIcon ( QIcon ( ":images/text-x-generic.png" ) ) ;
580:
581:
582: QMap < QString , QVariant > data ;
583: data [ FILENAME ] = fullpath ;
584: data [ FILE0 ] = file0 ;
585: item . setData ( QVariant ( data ) ) ;
586: mModel . appendRow ( item ) ;
587:
588: setRowHidden ( mModel . rowCount ( ) - 1 , QModelIndex ( ) , hide ) ;
589:
590: return item ;
591: }
592:
593: void ResultsTree :: contextMenuEvent ( QContextMenuEvent * e )
594: {
595: QModelIndex index ; index = indexAt ( e . pos ( ) ) ;
596: if ( index . isValid ( ) ) {
597: bool multipleSelection ; multipleSelection = false ;
598:
599: mSelectionModel = selectionModel ( ) ;
600: if ( mSelectionModel . selectedRows ( ) . count ( ) > 1 ) {
601: multipleSelection = true ; }
602:
603: mContextItem = mModel . itemFromIndex ( index ) ;
604:
605:
606: QMenu menu ( this ) ;
607:
608:
609: QList < QAction * > actions ;
610:
611:
612:
613: QSignalMapper * signalMapper ; signalMapper = new QSignalMapper ( this ) ;
614:
615: if ( mContextItem && mApplications . getApplicationCount ( ) > 0 && mContextItem . parent ( ) ) {
616:
617: int defaultApplicationIndex ; defaultApplicationIndex = mApplications . getDefaultApplication ( ) ;
618: if ( defaultApplicationIndex < 0 ) {
619: defaultApplicationIndex = 0 ; }
620: const Application & app = mApplications . getApplication ( defaultApplicationIndex ) ;
621: QAction * start ; start = new QAction ( app . getName ( ) , & menu ) ;
622: if ( multipleSelection ) {
623: start . setDisabled ( true ) ; }
624:
625:
626: actions << start ;
627:
628:
629: menu . addAction ( start ) ;
630:
631:
632: connect ( start , SIGNAL ( triggered ( ) ) , signalMapper , SLOT ( map ( ) ) ) ;
633:
634:
635: signalMapper . setMapping ( start , defaultApplicationIndex ) ;
636:
637: connect ( signalMapper , SIGNAL ( mapped ( int ) ) ,
638: this , SLOT ( context ( int ) ) ) ;
639: }
640:
641:
642: if ( mContextItem ) {
643: if ( mApplications . getApplicationCount ( ) > 0 ) {
644: menu . addSeparator ( ) ;
645: }
646:
647:
648: QAction * recheckSelectedFiles ; recheckSelectedFiles = new QAction ( tr ( "Recheck" ) , & menu ) ;
649: QAction * copy ; copy = new QAction ( tr ( "Copy" ) , & menu ) ;
650: QAction * hide ; hide = new QAction ( tr ( "Hide" ) , & menu ) ;
651: QAction * hideallid ; hideallid = new QAction ( tr ( "Hide all with id" ) , & menu ) ;
652: QAction * opencontainingfolder ; opencontainingfolder = new QAction ( tr ( "Open containing folder" ) , & menu ) ;
653:
654: if ( multipleSelection ) {
655: hideallid . setDisabled ( true ) ;
656: opencontainingfolder . setDisabled ( true ) ;
657: }
658: if ( mThread . isChecking ( ) ) {
659: recheckSelectedFiles . setDisabled ( true ) ; }
660: else {
661: recheckSelectedFiles . setDisabled ( false ) ; }
662:
663: menu . addAction ( recheckSelectedFiles ) ;
664: menu . addSeparator ( ) ;
665: menu . addAction ( copy ) ;
666: menu . addSeparator ( ) ;
667: menu . addAction ( hide ) ;
668: menu . addAction ( hideallid ) ;
669:
670: QAction * suppress ; suppress = new QAction ( tr ( "Suppress selected id(s)" ) , & menu ) ;
671: menu . addAction ( suppress ) ;
672: connect ( suppress , & QAction :: triggered , this , & ResultsTree :: suppressSelectedIds ) ;
673:
674: menu . addSeparator ( ) ;
675: menu . addAction ( opencontainingfolder ) ;
676:
677: connect ( recheckSelectedFiles , SIGNAL ( triggered ( ) ) , this , SLOT ( recheckSelectedFiles ( ) ) ) ;
678: connect ( copy , SIGNAL ( triggered ( ) ) , this , SLOT ( copy ( ) ) ) ;
679: connect ( hide , SIGNAL ( triggered ( ) ) , this , SLOT ( hideResult ( ) ) ) ;
680: connect ( hideallid , SIGNAL ( triggered ( ) ) , this , SLOT ( hideAllIdResult ( ) ) ) ;
681: connect ( opencontainingfolder , SIGNAL ( triggered ( ) ) , this , SLOT ( openContainingFolder ( ) ) ) ;
682:
683: const ProjectFile * currentProject ; currentProject = ProjectFile :: getActiveProject ( ) ;
684: if ( currentProject && ! currentProject . getTags ( ) . isEmpty ( ) ) {
685: menu . addSeparator ( ) ;
686: QMenu * tagMenu ; tagMenu = menu . addMenu ( tr ( "Tag" ) ) ;
687: {
688: QAction * action ; action = new QAction ( tr ( "No tag" ) , tagMenu ) ;
689: tagMenu . addAction ( action ) ;
690: connect ( action , & QAction :: triggered , [ = ] ( ) {
691: tagSelectedItems ( QString ( ) ) ;
692: } ) ;
693: }
694:
695: for ( const QString & tagstr : currentProject . getTags ( ) ) {
696: QAction * action ; action = new QAction ( tagstr , tagMenu ) ;
697: tagMenu . addAction ( action ) ;
698: connect ( action , & QAction :: triggered , [ = ] ( ) {
699: tagSelectedItems ( tagstr ) ;
700: } ) ;
701: }
702: }
703: }
704:
705:
706: menu . exec ( e . globalPos ( ) ) ;
707: index = indexAt ( e . pos ( ) ) ;
708: if ( index . isValid ( ) ) {
709: mContextItem = mModel . itemFromIndex ( index ) ;
710: if ( mContextItem && mApplications . getApplicationCount ( ) > 0 && mContextItem . parent ( ) ) {
711:
712: for ( QAction * action : actions ) {
713: disconnect ( action , SIGNAL ( triggered ( ) ) , signalMapper , SLOT ( map ( ) ) ) ;
714: }
715:
716: disconnect ( signalMapper , SIGNAL ( mapped ( int ) ) ,
717: this , SLOT ( context ( int ) ) ) ;
718:
719: delete signalMapper ;
720: }
721: }
722: }
723: }
724:
725: void ResultsTree :: startApplication ( QStandardItem * target , int application )
726: {
727:
728: if ( mApplications . getApplicationCount ( ) == 0 ) {
729: QMessageBox msg ( QMessageBox :: Critical ,
730: tr ( "Cppcheck" ) ,
731: tr ( "No editor application configured.\n\nConfigure the editor application for Cppcheck in preferences/Applications."
732: ) ,
733: QMessageBox :: Ok ,
734: this ) ;
735: msg . exec ( ) ;
736: return ;
737: }
738:
739: if ( application == -1 ) {
740: application = mApplications . getDefaultApplication ( ) ; }
741:
742: if ( application == -1 ) {
743: QMessageBox msg ( QMessageBox :: Critical ,
744: tr ( "Cppcheck" ) ,
745: tr ( "No default editor application selected.\n\nPlease select the default editor application in preferences/Applications."
746: ) ,
747: QMessageBox :: Ok ,
748: this ) ;
749: msg . exec ( ) ;
750: return ;
751:
752: }
753:
754: if ( target && application >= 0 && application < mApplications . getApplicationCount ( ) && target . parent ( ) ) {
755:
756: if ( target . column ( ) != 0 ) {
757: target = target . parent ( ) . child ( target . row ( ) , 0 ) ; }
758:
759: QVariantMap data ; data = target . data ( ) . toMap ( ) ;
760:
761:
762: QString file ; file = data [ FILENAME ] . toString ( ) ;
763: file = QDir :: toNativeSeparators ( file ) ;
764: qDebug ( ) << "Opening file: " << file ;
765:
766: QFileInfo info ( file ) ;
767: if ( ! info . exists ( ) ) {
768: if ( info . isAbsolute ( ) ) {
769: QMessageBox msgbox ( this ) ;
770: msgbox . setWindowTitle ( "Cppcheck" ) ;
771: msgbox . setText ( tr ( "Could not find the file!" ) ) ;
772: msgbox . setIcon ( QMessageBox :: Critical ) ;
773: msgbox . exec ( ) ;
774: } else {
775: QDir checkdir ( mCheckPath ) ;
776: if ( checkdir . isAbsolute ( ) && checkdir . exists ( ) ) {
777: file = mCheckPath + "/" + file ;
778: } else {
779: QString dir ; dir = askFileDir ( file ) ;
780: dir += '/' ;
781: file = dir + file ;
782: }
783: }
784: }
785:
786: if ( file . indexOf ( " " ) > -1 ) {
787: file . insert ( 0 , "\"" ) ;
788: file . append ( "\"" ) ;
789: }
790:
791: const Application & app = mApplications . getApplication ( application ) ;
792: QString params ; params = app . getParameters ( ) ;
793: params . replace ( "(file)" , file , Qt :: CaseInsensitive ) ;
794:
795: QVariant line ; line = data [ LINE ] ;
796: params . replace ( "(line)" , QString ( "%1" ) . arg ( line . toInt ( ) ) , Qt :: CaseInsensitive ) ;
797:
798: params . replace ( "(message)" , data [ MESSAGE ] . toString ( ) , Qt :: CaseInsensitive ) ;
799: params . replace ( "(severity)" , data [ SEVERITY ] . toString ( ) , Qt :: CaseInsensitive ) ;
800:
801: QString program ; program = app . getPath ( ) ;
802:
|
812:
813: const QString cmdLine = QString ( "%1 %2" ) . arg ( program ) . arg ( params ) ;
814:
815:
816: bool success ; success = SUPPRESS_DEPRECATED_WARNING ( QProcess :: startDetached ( cmdLine ) ) ;
817: if ( ! success ) {
818: QString text ; text = tr ( "Could not start %1\n\nPlease check the application path and parameters are correct." ) . arg ( program ) ;
819:
820: QMessageBox msgbox ( this ) ;
821: msgbox . setWindowTitle ( "Cppcheck" ) ;
822: msgbox . setText ( text ) ;
823: msgbox . setIcon ( QMessageBox :: Critical ) ;
824:
825: msgbox . exec ( ) ;
826: }
827: }
828: }
829:
830: QString ResultsTree :: askFileDir ( const QString & file )
831: {
832: QString text ; text = tr ( "Could not find file:" ) + '\n' + file + '\n' ;
833: QString title ;
834: if ( file . indexOf ( '/' ) ) {
835: QString folderName ; folderName = file . mid ( 0 , file . indexOf ( '/' ) ) ;
836: text += tr ( "Please select the folder '%1'" ) . arg ( folderName ) ;
837: title = tr ( "Select Directory '%1'" ) . arg ( folderName ) ;
838: } else {
839: text += tr ( "Please select the directory where file is located." ) ;
840: title = tr ( "Select Directory" ) ;
841: }
842:
843: QMessageBox msgbox ( this ) ;
844: msgbox . setWindowTitle ( "Cppcheck" ) ;
845: msgbox . setText ( text ) ;
846: msgbox . setIcon ( QMessageBox :: Warning ) ;
847: msgbox . exec ( ) ;
848:
849: QString dir ; dir = QFileDialog :: getExistingDirectory ( this , title ,
850: getPath ( $"Last source path" ) ,
851: QFileDialog :: ShowDirsOnly | QFileDialog :: DontResolveSymlinks ) ;
852:
853: if ( dir . isEmpty ( ) ) {
854: return QString ( ) ; }
855:
856:
857: if ( QFileInfo ( dir + '/' + file ) . exists ( ) ) {
858: mCheckPath = dir ; }
859:
860:
861: else if ( file . indexOf ( '/' ) > 0 ) {
862: dir += '/' ;
863: QString folderName ; folderName = file . mid ( 0 , file . indexOf ( '/' ) ) ;
864: if ( dir . indexOf ( '/' + folderName + '/' ) ) {
865: dir = dir . mid ( 0 , dir . lastIndexOf ( '/' + folderName + '/' ) ) ; }
866: if ( QFileInfo ( dir + '/' + file ) . exists ( ) ) {
867: mCheckPath = dir ; }
868: }
869:
870:
871: else {
872: return QString ( ) ; }
873:
874: setPath ( $"Last source path" , mCheckPath ) ;
875: return mCheckPath ;
876: }
877:
878: void ResultsTree :: copy ( )
879: {
880: if ( ! mSelectionModel ) {
881: return ; }
882:
883: QString text ;
884: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
885: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
886: if ( ! item . parent ( ) ) {
887: text += item . text ( ) + '\n' ;
888: continue ;
889: }
890: if ( item . parent ( ) . parent ( ) ) {
891: item = item . parent ( ) ; }
892: QVariantMap data ; data = item . data ( ) . toMap ( ) ;
893: if ( ! data . contains ( "id" ) ) {
894: continue ; }
895: QString inconclusive ; inconclusive = data [ INCONCLUSIVE ] . toBool ( ) ? ",inconclusive" : "" ;
896: text += '[' + data [ FILENAME ] . toString ( ) + ':' + QString :: number ( data [ LINE ] . toInt ( ) )
897: + "] ("
898: + QString :: fromStdString ( Severity :: toString ( ShowTypes :: ShowTypeToSeverity ( ( ShowTypes :: ShowType ) data [ SEVERITY ] . toInt ( ) ) ) ) + inconclusive
899: + ") "
900: + data [ MESSAGE ] . toString ( )
901: + " ["
902: + data [ ERRORID ] . toString ( )
903: + "]\n" ;
904: }
905:
906: QClipboard * clipboard ; clipboard = QApplication :: clipboard ( ) ;
907: clipboard . setText ( text ) ;
908: }
909:
910: void ResultsTree :: hideResult ( )
911: {
912: if ( ! mSelectionModel ) {
913: return ; }
914:
915: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
916: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
917:
918: QVariantMap data ; data = item . data ( ) . toMap ( ) ;
919: data [ HIDE ] = true ;
920: item . setData ( QVariant ( data ) ) ;
921:
922: refreshTree ( ) ;
923: emit resultsHidden ( true ) ;
924: }
925: }
926:
927: void ResultsTree :: recheckSelectedFiles ( )
928: {
929: if ( ! mSelectionModel ) {
930: return ; }
931:
932: QStringList selectedItems ;
933: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
934: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
935: while ( item . parent ( ) ) {
936: item = item . parent ( ) ; }
937: QVariantMap data ; data = item . data ( ) . toMap ( ) ;
938: QString currentFile ; currentFile = data [ FILENAME ] . toString ( ) ;
939: if ( ! currentFile . isEmpty ( ) ) {
940: QString fileNameWithCheckPath ;
941: QFileInfo curfileInfo ( currentFile ) ;
942: if ( ! curfileInfo . exists ( ) && ! mCheckPath . isEmpty ( ) && currentFile . indexOf ( mCheckPath ) != 0 ) {
943: fileNameWithCheckPath = mCheckPath + "/" + currentFile ; }
944: else {
945: fileNameWithCheckPath = currentFile ; }
946: const QFileInfo fileInfo ( fileNameWithCheckPath ) ;
947: if ( ! fileInfo . exists ( ) ) {
948: askFileDir ( currentFile ) ;
949: return ;
950: }
951: if ( Path :: isHeader ( currentFile . toStdString ( ) ) ) {
952: if ( ! data [ FILE0 ] . toString ( ) . isEmpty ( ) && ! selectedItems . contains ( data [ FILE0 ] . toString ( ) ) ) {
953: selectedItems << ( ( ! mCheckPath . isEmpty ( ) && ( data [ FILE0 ] . toString ( ) . indexOf ( mCheckPath ) != 0 ) ) ? ( mCheckPath + "/" + data [ FILE0 ] . toString ( ) ) : data [ FILE0 ] . toString ( ) ) ;
954: if ( ! selectedItems . contains ( fileNameWithCheckPath ) ) {
955: selectedItems << fileNameWithCheckPath ; }
956: }
957: } else if ( ! selectedItems . contains ( fileNameWithCheckPath ) ) {
958: selectedItems << fileNameWithCheckPath ; }
959: }
960: }
961: emit checkSelected ( selectedItems ) ;
962: }
963:
964: void ResultsTree :: hideAllIdResult ( )
965: {
966: if ( ! mContextItem || ! mContextItem . parent ( ) ) {
967: return ; }
968:
969:
970: if ( mContextItem . column ( ) != 0 ) {
971: mContextItem = mContextItem . parent ( ) . child ( mContextItem . row ( ) , 0 ) ; }
972: QVariantMap data ; data = mContextItem . data ( ) . toMap ( ) ;
973:
974: QString messageId ; messageId = data [ ERRORID ] . toString ( ) ;
975:
976: mHiddenMessageId . append ( messageId ) ;
977:
978:
979: int filecount ; filecount = mModel . rowCount ( ) ;
980: for ( int i = 0 ; i < filecount ; i ++ ) {
981:
982: QStandardItem * file ; file = mModel . item ( i , 0 ) ;
983: if ( ! file ) {
984: continue ;
985: }
986:
987:
988: int errorcount ; errorcount = file . rowCount ( ) ;
989:
990: for ( int j = 0 ; j < errorcount ; j ++ ) {
991:
992: QStandardItem * child ; child = file . child ( j , 0 ) ;
993: if ( ! child ) {
994: continue ;
995: }
996:
997: QVariantMap userdata ; userdata = child . data ( ) . toMap ( ) ;
998: if ( userdata [ ERRORID ] . toString ( ) == messageId ) {
999: userdata [ HIDE ] = true ;
1000: child . setData ( QVariant ( userdata ) ) ;
1001: }
1002: }
1003: }
1004:
1005: refreshTree ( ) ;
1006: emit resultsHidden ( true ) ;
1007: }
1008:
1009: void ResultsTree :: suppressSelectedIds ( )
1010: {
1011: if ( ! mSelectionModel ) {
1012: return ; }
1013:
1014: QModelIndexList selectedRows ; selectedRows = mSelectionModel . selectedRows ( ) ;
1015: QSet < QString > selectedIds ;
1016: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
1017: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
1018: if ( ! item . parent ( ) ) {
1019: continue ; }
1020: if ( item . parent ( ) . parent ( ) ) {
1021: item = item . parent ( ) ; }
1022: QVariantMap data ; data = item . data ( ) . toMap ( ) ;
1023: if ( ! data . contains ( "id" ) ) {
1024: continue ; }
1025: selectedIds << data [ ERRORID ] . toString ( ) ;
1026: }
1027:
1028:
1029: for ( int i = 0 ; i < mModel . rowCount ( ) ; i ++ ) {
1030: QStandardItem * const file ; file = mModel . item ( i , 0 ) ;
1031: for ( int j = 0 ; j < file . rowCount ( ) ; ) {
1032: QStandardItem * errorItem ; errorItem = file . child ( j , 0 ) ;
1033: QVariantMap userdata ; userdata = errorItem . data ( ) . toMap ( ) ;
1034: if ( selectedIds . contains ( userdata [ ERRORID ] . toString ( ) ) ) {
1035: file . removeRow ( j ) ;
1036: } else {
1037: j ++ ;
1038: }
1039: }
1040: if ( file . rowCount ( ) == 0 ) {
1041: mModel . removeRow ( file . row ( ) ) ; }
1042: }
1043:
1044:
1045: emit suppressIds ( selectedIds . values ( ) ) ;
1046: }
1047:
1048: void ResultsTree :: suppressHash ( )
1049: {
1050: if ( ! mSelectionModel ) {
1051: return ; }
1052:
1053:
1054: QSet < QStandardItem * > selectedWarnings ;
1055: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
1056: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
1057: if ( ! item . parent ( ) ) {
1058: continue ; }
1059: while ( item . parent ( ) . parent ( ) ) {
1060: item = item . parent ( ) ; }
1061: selectedWarnings . insert ( item ) ;
1062: }
1063:
1064: bool changed ; changed = false ;
1065: ProjectFile * projectFile ; projectFile = ProjectFile :: getActiveProject ( ) ;
1066: for ( QStandardItem * item : selectedWarnings ) {
1067: QStandardItem * fileItem ; fileItem = item . parent ( ) ;
1068: const QVariantMap data = item . data ( ) . toMap ( ) ;
1069: if ( projectFile && data . contains ( HASH ) ) {
1070: Suppressions :: Suppression suppression ;
1071: suppression . hash = data [ HASH ] . toULongLong ( ) ;
1072: suppression . errorId = data [ ERRORID ] . toString ( ) . toStdString ( ) ;
1073: suppression . fileName = data [ FILENAME ] . toString ( ) . toStdString ( ) ;
1074: suppression . lineNumber = data [ LINE ] . toInt ( ) ;
1075: projectFile . addSuppression ( suppression ) ;
1076: changed = true ;
1077: }
1078: fileItem . removeRow ( item . row ( ) ) ;
1079: if ( fileItem . rowCount ( ) == 0 ) {
1080: mModel . removeRow ( fileItem . row ( ) ) ; }
1081: }
1082:
1083: if ( changed ) {
1084: projectFile . write ( ) ; }
1085: }
1086:
1087: void ResultsTree :: openContainingFolder ( )
1088: {
1089: QString filePath ; filePath = getFilePath ( mContextItem , true ) ;
1090: if ( ! filePath . isEmpty ( ) ) {
1091: filePath = QFileInfo ( filePath ) . absolutePath ( ) ;
1092: QDesktopServices :: openUrl ( QUrl :: fromLocalFile ( filePath ) ) ;
1093: }
1094: }
1095:
1096: void ResultsTree :: tagSelectedItems ( const QString & tag )
1097: {
1098: if ( ! mSelectionModel ) {
1099: return ; }
1100: bool isTagged ; isTagged = false ;
1101: ProjectFile * currentProject ; currentProject = ProjectFile :: getActiveProject ( ) ;
1102: for ( QModelIndex index : mSelectionModel . selectedRows ( ) ) {
1103: QStandardItem * item ; item = mModel . itemFromIndex ( index ) ;
1104: QVariantMap data ; data = item . data ( ) . toMap ( ) ;
1105: if ( data . contains ( "tags" ) ) {
1106: data [ TAGS ] = tag ;
1107: item . setData ( QVariant ( data ) ) ;
1108: item . parent ( ) . child ( index . row ( ) , COLUMN_TAGS ) . setText ( tag ) ;
1109: if ( currentProject && data . contains ( HASH ) ) {
1110: isTagged = true ;
1111: currentProject . setWarningTags ( data [ HASH ] . toULongLong ( ) , tag ) ;
1112: }
1113: }
1114: }
1115: if ( isTagged ) {
1116: currentProject . write ( ) ; }
1117: }
1118:
1119: void ResultsTree :: context ( int application )
1120: {
1121: startApplication ( mContextItem , application ) ;
1122: }
1123:
1124: void ResultsTree :: quickStartApplication ( const QModelIndex & index )
1125: {
1126: startApplication ( mModel . itemFromIndex ( index ) ) ;
1127: }
1128:
1129: QString ResultsTree :: getFilePath ( QStandardItem * target , bool fullPath )
1130: {
1131: if ( target ) {
1132:
1133: if ( target . column ( ) != 0 ) {
1134: target = target . parent ( ) . child ( target . row ( ) , 0 ) ; }
1135:
1136: QVariantMap data ; data = target . data ( ) . toMap ( ) ;
1137: QString pathStr ;
1138:
1139:
1140: QString file ; file = data [ FILENAME ] . toString ( ) ;
1141: pathStr = QDir :: toNativeSeparators ( file ) ;
1142: if ( ! fullPath ) {
1143: QFileInfo fi ( pathStr ) ;
1144: pathStr = fi . fileName ( ) ;
1145: }
1146:
1147: return pathStr ;
1148: }
1149:
1150: return QString ( ) ;
1151: }
1152:
1153: QString ResultsTree :: severityToIcon ( Severity :: SeverityType severity ) const
1154: {
1155: switch ( severity ) {
1156: case Severity :: error : ;
1157: return ":images/dialog-error.png" ;
1158: case Severity :: style : ;
1159: return ":images/applications-development.png" ;
1160: case Severity :: warning : ;
1161: return ":images/dialog-warning.png" ;
1162: case Severity :: portability : ;
1163: return ":images/applications-system.png" ;
1164: case Severity :: performance : ;
1165: return ":images/utilities-system-monitor.png" ;
1166: case Severity :: information : ;
1167: return ":images/dialog-information.png" ;
1168: default : ;
1169: return QString ( ) ;
1170: }
1171: }
1172:
1173: void ResultsTree :: saveResults ( Report * report ) const
1174: {
1175: report . writeHeader ( ) ;
1176:
1177: for ( int i = 0 ; i < mModel . rowCount ( ) ; i ++ ) {
1178: if ( mSaveAllErrors || ! isRowHidden ( i , QModelIndex ( ) ) ) {
1179: saveErrors ( report , mModel . item ( i , 0 ) ) ; }
1180: }
1181:
1182: report . writeFooter ( ) ;
1183: }
1184:
1185: void ResultsTree :: saveErrors ( Report * report , const QStandardItem * fileItem ) const
1186: {
1187: if ( ! fileItem ) {
1188: return ;
1189: }
1190:
1191: for ( int i = 0 ; i < fileItem . rowCount ( ) ; i ++ ) {
1192: const QStandardItem * error ; error = fileItem . child ( i , 0 ) ;
1193:
1194: if ( ! error ) {
1195: continue ;
1196: }
1197:
1198: if ( isRowHidden ( i , fileItem . index ( ) ) && ! mSaveAllErrors ) {
1199: continue ;
1200: }
1201:
1202: ErrorItem item ;
1203: readErrorItem ( error , & item ) ;
1204:
1205: report . writeError ( item ) ;
1206: }
1207: }
1208:
1209: static int indexOf ( const QList < ErrorItem > & list , const ErrorItem & item )
1210: {
1211: for ( int i = 0 ; i < list . size ( ) ; i ++ ) {
1212: if ( ErrorItem :: sameCID ( item , list [ i ] ) ) {
1213: return i ;
1214: }
1215: }
1216: return -1 ;
1217: }
1218:
1219: void ResultsTree :: updateFromOldReport ( const QString & filename )
1220: {
1221: QList < ErrorItem > oldErrors ;
1222: XmlReportV2 oldReport ( filename ) ;
1223: if ( oldReport . open ( ) ) {
1224: oldErrors = oldReport . read ( ) ;
1225: oldReport . close ( ) ;
1226: }
1227:
1228:
1229: for ( int i = 0 ; i < mModel . rowCount ( ) ; i ++ ) {
1230: QStandardItem * fileItem ; fileItem = mModel . item ( i , 0 ) ;
1231: for ( int j = 0 ; j < fileItem . rowCount ( ) ; j ++ ) {
1232: QStandardItem * error ; error = fileItem . child ( j , 0 ) ;
1233: ErrorItem errorItem ;
1234: readErrorItem ( error , & errorItem ) ;
1235: int oldErrorIndex ; oldErrorIndex = indexOf ( oldErrors , errorItem ) ;
1236: QVariantMap data ; data = error . data ( ) . toMap ( ) ;
1237:
1238:
1239: if ( oldErrorIndex >= 0 && ! oldErrors [ oldErrorIndex ] . sinceDate . isEmpty ( ) ) {
1240: data [ SINCEDATE ] = oldErrors [ oldErrorIndex ] . sinceDate ;
1241: error . setData ( data ) ;
1242: fileItem . child ( j , COLUMN_SINCE_DATE ) . setText ( oldErrors [ oldErrorIndex ] . sinceDate ) ;
1243: } else if ( oldErrorIndex < 0 || data [ SINCEDATE ] . toString ( ) . isEmpty ( ) ) {
1244: const QString sinceDate = QLocale :: system ( ) . dateFormat ( QLocale :: ShortFormat ) ;
1245: data [ SINCEDATE ] = sinceDate ;
1246: error . setData ( data ) ;
1247: fileItem . child ( j , COLUMN_SINCE_DATE ) . setText ( sinceDate ) ;
1248: if ( oldErrorIndex < 0 ) {
1249: continue ; }
1250: }
1251:
1252: if ( ! errorItem . tags . isEmpty ( ) ) {
1253: continue ; }
1254:
1255: const ErrorItem & oldErrorItem = oldErrors [ oldErrorIndex ] ;
1256: data [ TAGS ] = oldErrorItem . tags ;
1257: error . setData ( data ) ;
1258: }
1259: }
1260: }
1261:
1262: void ResultsTree :: readErrorItem ( const QStandardItem * error , ErrorItem * item ) const
1263: {
1264:
1265: QVariantMap data ; data = error . data ( ) . toMap ( ) ;
1266:
1267: item . severity = ShowTypes :: ShowTypeToSeverity ( ShowTypes :: VariantToShowType ( data [ SEVERITY ] ) ) ;
1268: item . summary = data [ SUMMARY ] . toString ( ) ;
1269: item . message = data [ MESSAGE ] . toString ( ) ;
1270: item . errorId = data [ ERRORID ] . toString ( ) ;
1271: item . incomplete = data [ INCOMPLETE ] . toBool ( ) ;
1272: item . cwe = data [ CWE ] . toInt ( ) ;
1273: item . hash = data [ HASH ] . toULongLong ( ) ;
1274: item . inconclusive = data [ INCONCLUSIVE ] . toBool ( ) ;
1275: item . file0 = data [ FILE0 ] . toString ( ) ;
1276: item . sinceDate = data [ SINCEDATE ] . toString ( ) ;
1277: item . tags = data [ TAGS ] . toString ( ) ;
1278:
1279: if ( error . rowCount ( ) == 0 ) {
1280: QErrorPathItem e ;
1281: e . file = stripPath ( data [ FILENAME ] . toString ( ) , true ) ;
1282: e . line = data [ LINE ] . toInt ( ) ;
1283: e . info = data [ MESSAGE ] . toString ( ) ;
1284: item . errorPath << e ;
1285: }
1286:
1287: for ( int j = 0 ; j < error . rowCount ( ) ; j ++ ) {
1288: const QStandardItem * child_error ; child_error = error . child ( j , 0 ) ;
1289:
1290: QVariant child_userdata ; child_userdata = child_error . data ( ) ;
1291:
1292: QVariantMap child_data ; child_data = child_userdata . toMap ( ) ;
1293:
1294: QErrorPathItem e ;
1295: e . file = stripPath ( child_data [ FILENAME ] . toString ( ) , true ) ;
1296: e . line = child_data [ LINE ] . toInt ( ) ;
1297: e . info = child_data [ MESSAGE ] . toString ( ) ;
1298: item . errorPath << e ;
1299: }
1300: }
1301:
1302: void ResultsTree :: updateSettings ( bool showFullPath ,
1303: bool saveFullPath ,
1304: bool saveAllErrors ,
1305: bool showErrorId ,
1306: bool showInconclusive )
1307: {
1308: if ( mShowFullPath != showFullPath ) {
1309: mShowFullPath = showFullPath ;
1310: refreshFilePaths ( ) ;
1311: }
1312:
1313: mSaveFullPath = saveFullPath ;
1314: mSaveAllErrors = saveAllErrors ;
1315:
1316: showIdColumn ( showErrorId ) ;
1317: showInconclusiveColumn ( showInconclusive ) ;
1318: }
1319:
1320: void ResultsTree :: setCheckDirectory ( const QString & dir )
1321: {
1322: mCheckPath = dir ;
1323: }
1324:
1325:
1326: QString ResultsTree :: getCheckDirectory ( )
1327: {
1328: return mCheckPath ;
1329: }
1330:
1331: QString ResultsTree :: stripPath ( const QString & path , bool saving ) const
1332: {
1333: if ( ( ! saving && mShowFullPath ) || ( saving && mSaveFullPath ) ) {
1334: return QString ( path ) ;
1335: }
1336:
1337: QDir dir ( mCheckPath ) ;
1338: return dir . relativeFilePath ( path ) ;
1339: }
1340:
1341: void ResultsTree :: refreshFilePaths ( QStandardItem * item )
1342: {
1343: if ( ! item ) {
1344: return ;
1345: }
1346:
1347:
1348: bool updated ; updated = false ;
1349:
1350:
1351: for ( int i = 0 ; i < item . rowCount ( ) ; i ++ ) {
1352:
1353: QStandardItem * error ; error = item . child ( i , 0 ) ;
1354:
1355: if ( ! error ) {
1356: continue ;
1357: }
1358:
1359:
1360: QVariant userdata ; userdata = error . data ( ) ;
1361:
1362: QVariantMap data ; data = userdata . toMap ( ) ;
1363:
1364:
1365: QString file ; file = data [ FILENAME ] . toString ( ) ;
1366:
1367:
1368: error . setText ( stripPath ( file , false ) ) ;
1369:
1370:
1371: if ( error . hasChildren ( ) ) {
1372:
1373: for ( int j = 0 ; j < error . rowCount ( ) ; j ++ ) {
1374:
1375: QStandardItem * child ; child = error . child ( j , 0 ) ;
1376: if ( ! child ) {
1377: continue ;
1378: }
1379:
1380: QVariant child_userdata ; child_userdata = child . data ( ) ;
1381:
1382: QVariantMap child_data ; child_data = child_userdata . toMap ( ) ;
1383:
1384:
1385: QString child_files ; child_files = child_data [ FILENAME ] . toString ( ) ;
1386:
1387: child . setText ( stripPath ( child_files , false ) ) ;
1388: }
1389: }
1390:
1391:
1392: if ( ! updated ) {
1393: updated = true ;
1394: item . setText ( error . text ( ) ) ;
1395: }
1396:
1397: }
1398: }
1399:
1400: void ResultsTree :: refreshFilePaths ( )
1401: {
1402: qDebug ( "Refreshing file paths" ) ;
1403:
1404:
1405: for ( int i = 0 ; i < mModel . rowCount ( ) ; i ++ ) {
1406: refreshFilePaths ( mModel . item ( i , 0 ) ) ;
1407: }
1408: }
1409:
1410: bool ResultsTree :: hasVisibleResults ( ) const
1411: {
1412: return mVisibleErrors ;
1413: }
1414:
1415: bool ResultsTree :: hasResults ( ) const
1416: {
1417: return mModel . rowCount ( ) > 0 ;
1418: }
1419:
1420: void ResultsTree :: translate ( )
1421: {
1422: QStringList labels ;
1423: labels << tr ( "File" ) << tr ( "Severity" ) << tr ( "Line" ) << tr ( "Id" ) << tr ( "Inconclusive" ) << tr ( "Summary" ) << tr ( "Since date" ) << tr ( "Tag" ) ;
1424: mModel . setHorizontalHeaderLabels ( labels ) ;
1425:
1426: }
1427:
1428: void ResultsTree :: showIdColumn ( bool show )
1429: {
1430: mShowErrorId = show ;
1431: if ( show ) {
1432: showColumn ( 3 ) ; }
1433: else {
1434: hideColumn ( 3 ) ; }
1435: }
1436:
1437: void ResultsTree :: showInconclusiveColumn ( bool show )
1438: {
1439: if ( show ) {
1440: showColumn ( 4 ) ; }
1441: else {
1442: hideColumn ( 4 ) ; }
1443: }
1444:
1445: void ResultsTree :: currentChanged ( const QModelIndex & current , const QModelIndex & previous )
1446: {
1447: QTreeView :: currentChanged ( current , previous ) ;
1448: emit treeSelectionChanged ( current ) ;
1449: }



##Value flow
