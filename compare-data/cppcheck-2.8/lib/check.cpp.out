

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073743552 !@expr1073743553 mTokenizer@var28 ) {
69: instances (@expr1073743554 ) .@expr1073743555 remove (@expr1073743556 this@expr1073743557 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073743558 string (@expr1073743559 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073743560 void ) tokenizer@var21 ;
108: (@expr1073743561 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073743562 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073743563 void ) ctu@var24 ;
120: (@expr1073743564 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073743565 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073743566 0U ) , Certainty ::@expr1073743567 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073743568 list < const Token *@expr1073743569 > callstack@var41 (@expr1073743570 1 , tok@var35 ) ;
141: reportError (@expr1073743571 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073743572 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073743573 0U ) , Certainty ::@expr1073743574 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var64 ;
43: std :: string errorId@var65 ;
44: void setFileName ( const std :: string & s@var66 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var70 ;
47: }
48: int lineNumber@var67 ;
49: Certainty :: CertaintyLevel certainty@var68 ;
50: std :: string symbolNames@var69 ;
51: private:
52: std :: string mFileName@var70 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var104 ( NO_LINE ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
57: Suppression ( const Suppression & other@var71 ) {
58: *@expr1073743575 this@expr1073743576 =@expr1073743577 other@var71 ;
59: }
60: Suppression ( const std :: string & id@var72 , const std :: string & file@var73 , int line@var74 = NO_LINE ) : errorId@var102 ( id@var72 ) , fileName@var103 ( file@var73 ) , lineNumber@var104 ( line@var74 ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var75 ) {
63: errorId@var102 =@expr1073743578 other@var75 .@expr1073743579 errorId@var76 ;
64: fileName@var103 =@expr1073743580 other@var75 .@expr1073743581 fileName@var77 ;
65: lineNumber@var104 =@expr1073743582 other@var75 .@expr1073743583 lineNumber@var78 ;
66: symbolName@var105 =@expr1073743584 other@var75 .@expr1073743585 symbolName@var79 ;
67: hash@var106 =@expr1073743586 other@var75 .@expr1073743587 hash@var80 ;
68: thisAndNextLine@var107 =@expr1073743588 other@var75 .@expr1073743589 thisAndNextLine@var81 ;
69: matched@var108 =@expr1073743590 other@var75 .@expr1073743591 matched@var82 ;
70: checked@var109 =@expr1073743592 other@var75 .@expr1073743593 checked@var83 ;
71: return *@expr1073743594 this@expr1073743595 ;
72: }
73:
74: bool operator< ( const Suppression & other@var84 ) const {
75: if (@expr1073743596 errorId@var102 !=@expr1073743597 other@var84 .@expr1774 errorId@var85 ) {
76: return errorId@var102 <@expr1073743599 other@var84 .@expr1774 errorId@var85 ; }
77: if (@expr1073743601 lineNumber@var104 <@expr1073743602 other@var84 .@expr1073743603 lineNumber@var86 ) {
78: return true ; }
79: if (@expr1073743604 fileName@var103 !=@expr1073743605 other@var84 .@expr1782 fileName@var87 ) {
80: return fileName@var103 <@expr1073743607 other@var84 .@expr1782 fileName@var87 ; }
81: if (@expr1073743609 symbolName@var105 !=@expr1073743610 other@var84 .@expr1787 symbolName@var88 ) {
82: return symbolName@var105 <@expr1073743612 other@var84 .@expr1787 symbolName@var88 ; }
83: if (@expr1073743614 hash@var106 !=@expr1073743615 other@var84 .@expr1792 hash@var89 ) {
84: return hash@var106 <@expr1073743617 other@var84 .@expr1792 hash@var89 ; }
85: if (@expr1073743619 thisAndNextLine@var107 !=@expr1073743620 other@var84 .@expr1073743621 thisAndNextLine@var90 ) {
86: return thisAndNextLine@var107 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var91 , std :: string * errorMessage@var92 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var93 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var94 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073743623 fileName@var103 .@expr1073743624 empty (@expr1073743625 ) &&@expr1073743626 fileName@var103 .@expr1073743627 find_first_of (@expr1073743628 "?*" ) ==@expr1073743629 std ::@expr1073743630 string ::@expr1073743631 npos@expr1073743622 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var95 ) const {
109: return errorId@var102 ==@expr1073743632 other@var95 .@expr1073743633 errorId@var96 &&@expr1073743634
110: fileName@var103 ==@expr1073743635 other@var95 .@expr1073743636 fileName@var97 &&@expr1073743637
111: lineNumber@var104 ==@expr1073743638 other@var95 .@expr1073743639 lineNumber@var98 &&@expr1073743640
112: symbolName@var105 ==@expr1073743641 other@var95 .@expr1073743642 symbolName@var99 &&@expr1073743643
113: hash@var106 ==@expr1073743644 other@var95 .@expr1073743645 hash@var100 &&@expr1073743646
114: thisAndNextLine@var107 ==@expr1073743647 other@var95 .@expr1073743648 thisAndNextLine@var101 ;
115: }
116:
117: std :: string errorId@var102 ;
118: std :: string fileName@var103 ;
119: int lineNumber@var104 ;
120: std :: string symbolName@var105 ;
121: unsigned long hash@var106 ;
122: bool thisAndNextLine@var107 ;
123: bool matched@var108 ;
124: bool checked@var109 ;
125:
126: enum Anonymous0 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var110 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var111 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var112 , std :: string * errorMessage@var113 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var114 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var115 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var116 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var117 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var118 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var119 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var120 , const bool unusedFunctionChecking@var121 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var122 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var123 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var124 ;
219: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var125 , const Color & c@var126 ) ;
42:
43: std :: string toString ( const Color & c@var127 ) ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var128 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var129 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var130 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var131 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var132 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var148 ( 0 ) , line@var149 ( 0 ) , column@var150 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var133 , int line@var134 , unsigned int column@var135 )
73: : fileIndex@var148 ( 0 ) , line@var149 ( line@var134 ) , column@var150 ( column@var135 ) , mOrigFileName@var152 ( file@var133 ) , mFileName@var153 ( file@var133 ) { }
74:
75: FileLocation ( const std :: string & file@var136 , const std :: string & info@var137 , int line@var138 , unsigned int column@var139 )
76: : fileIndex@var148 ( 0 ) , line@var149 ( line@var138 ) , column@var150 ( column@var139 ) , mOrigFileName@var152 ( file@var136 ) , mFileName@var153 ( file@var136 ) , mInfo@var154 ( info@var137 ) { }
77:
78: FileLocation ( const Token * tok@var140 , const TokenList * tokenList@var141 ) ;
79: FileLocation ( const Token * tok@var142 , const std :: string & info@var143 , const TokenList * tokenList@var144 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var145 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var146 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var147 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var148 ;
107: int line@var149 ;
108: unsigned int column@var150 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var154 ;
112: }
113: void setinfo ( const std :: string & i@var151 ) {
114: mInfo@var154 =@expr1073743649 i@var151 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var152 ;
119: std :: string mFileName@var153 ;
120: std :: string mInfo@var154 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var155 ,
124: const std :: string & file1@var156 ,
125: Severity :: SeverityType severity@var157 ,
126: const std :: string & msg@var158 ,
127: const std :: string & id@var159 , Certainty :: CertaintyLevel certainty@var160 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var161 ,
129: const std :: string & file1@var162 ,
130: Severity :: SeverityType severity@var163 ,
131: const std :: string & msg@var164 ,
132: const std :: string & id@var165 ,
133: const CWE & cwe@var166 ,
134: Certainty :: CertaintyLevel certainty@var167 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var168 ,
136: const TokenList * list@var169 ,
137: Severity :: SeverityType severity@var170 ,
138: const std :: string & id@var171 ,
139: const std :: string & msg@var172 ,
140: Certainty :: CertaintyLevel certainty@var173 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var174 ,
142: const TokenList * list@var175 ,
143: Severity :: SeverityType severity@var176 ,
144: const std :: string & id@var177 ,
145: const std :: string & msg@var178 ,
146: const CWE & cwe@var179 ,
147: Certainty :: CertaintyLevel certainty@var180 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var181 ,
149: const TokenList * tokenList@var182 ,
150: Severity :: SeverityType severity@var183 ,
151: const char id@var184 [ ] ,
152: const std :: string & msg@var185 ,
153: const CWE & cwe@var186 ,
154: Certainty :: CertaintyLevel certainty@var187 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var188 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var189 ,
176: const std :: string & templateFormat@var190 = emptyString@var1 ,
177: const std :: string & templateLocation@var191 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var192 ) ;
181:
182: std :: list < FileLocation > callStack@var193 ;
183: std :: string id@var194 ;
184:
185:
186: std :: string file0@var195 ;
187:
188: std :: string function@var196 ;
189:
190: bool incomplete@var197 ;
191:
192: Severity :: SeverityType severity@var198 ;
193: CWE cwe@var199 ;
194: Certainty :: CertaintyLevel certainty@var200 ;
195:
196:
197: unsigned long hash@var201 ;
198:
199:
200: void setmsg ( const std :: string & msg@var202 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var204 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var205 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var206 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var203 ) ;
221:
222:
223: std :: string mShortMessage@var204 ;
224:
225:
226: std :: string mVerboseMessage@var205 ;
227:
228:
229: std :: string mSymbolNames@var206 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var207 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073743650 plistFile@var207 .@expr1073743651 is_open (@expr1073743652 ) ) {
243: plistFile@var207 <<@expr1073743653 ErrorLogger ::@expr1073743654 plistFooter (@expr1073743655 ) ;
244: plistFile@var207 .@expr1073743656 close (@expr1073743657 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var208 , Color c@var209 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var210 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var211 , const char stage@var212 [ ] , const unsigned long value@var213 ) {
271: (@expr1073743658 void ) filename@var211 ;
272: (@expr1073743659 void ) stage@var212 ;
273: (@expr1073743660 void ) value@var213 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var214 ) {
281: reportErr (@expr1073743661 msg@var214 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var215 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var216 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var217 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var218 , const std :: vector < std :: string > & files@var219 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var220 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var221 , const std :: string & from@var222 , const std :: string & to@var223 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var224 ) {
44: if (@expr1073743662 bit@var224 >=@expr1073743663 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073743664 (@expr1073743665 1LL <<@expr1073743666 (@expr1073743667 bit@var224 -@expr1073743668 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var225 ) {
50: if (@expr1073743669 bit@var225 >=@expr1073743670 64 ) {
51: return (@expr1847 ~@expr1073743672 0ULL ) >>@expr1073743673 1 ; }
52: return (@expr1847 1LL <<@expr1073743675 (@expr1847 bit@var225 -@expr1073743677 1 ) ) -@expr1073743678 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var226 ) const {
59: return value@var226 >=@expr1073743679 min_value (@expr1073743680 int_bit@var236 ) &&@expr1073743681 value@var226 <=@expr1073743682 max_value (@expr1073743683 int_bit@var236 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var227 ) const {
63: unsigned long long intMax@var228 ; intMax@var228 =@expr1073743684 max_value (@expr1073743685 int_bit@var236 ) ;
64: return value@var227 <=@expr1073743686 intMax@var228 ;
65: }
66:
67: bool isLongValue ( long long value@var229 ) const {
68: return value@var229 >=@expr1073743687 min_value (@expr1073743688 long_bit@var237 ) &&@expr1073743689 value@var229 <=@expr1073743690 max_value (@expr1073743691 long_bit@var237 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var230 ) const {
72: unsigned long long longMax@var231 ; longMax@var231 =@expr1073743692 max_value (@expr1073743693 long_bit@var237 ) ;
73: return value@var230 <=@expr1073743694 longMax@var231 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var232 ) const {
77: unsigned long long longLongMax@var233 ; longLongMax@var233 =@expr1073743695 max_value (@expr1073743696 long_long_bit@var238 ) ;
78: return value@var232 <=@expr1073743697 longLongMax@var233 ;
79: }
80:
81: int char_bit@var234 ;
82: int short_bit@var235 ;
83: int int_bit@var236 ;
84: int long_bit@var237 ;
85: int long_long_bit@var238 ;
86:
87:
88: int sizeof_bool@var239 ;
89: int sizeof_short@var240 ;
90: int sizeof_int@var241 ;
91: int sizeof_long@var242 ;
92: int sizeof_long_long@var243 ;
93: int sizeof_float@var244 ;
94: int sizeof_double@var245 ;
95: int sizeof_long_double@var246 ;
96: int sizeof_wchar_t@var247 ;
97: int sizeof_size_t@var248 ;
98: int sizeof_pointer@var249 ;
99:
100: char defaultSign@var250 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var251 ;
115:
116:
117: bool platform ( PlatformType type@var252 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var253 [ ] , const std :: string & filename@var254 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var255 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var251 ==@expr1073743698 Win32A ||@expr1073743699
136: platformType@var251 ==@expr1073743700 Win32W ||@expr1073743701
137: platformType@var251 ==@expr1073743702 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073743703 platformType@var251 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var256 ) {
145: switch (@expr1073743704 pt@var256 ) {
146: case Unspecified :@expr1881 ;
147: return "Unspecified" ;
148: case Native :@expr1881 ;
149: return "Native" ;
150: case Win32A :@expr1881 ;
151: return "win32A" ;
152: case Win32W :@expr1881 ;
153: return "win32W" ;
154: case Win64 :@expr1881 ;
155: return "win64" ;
156: case Unix32 :@expr1881 ;
157: return "unix32" ;
158: case Unix64 :@expr1881 ;
159: return "unix64" ;
160: case PlatformFile :@expr1881 ;
161: return "platformFile" ;
162: default :@expr1881 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073743714 char_bit@var234 +@expr1073743715 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073743716 char_bit@var234 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073743717 char_bit@var234 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var257 ) const {
35: return p@var257 .@expr1073743718 first@var258 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var259 ) const {
42: return p@var259 .@expr1073743719 second@var260 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var261 , const T & x@var262 )
48: {
49: return std ::@expr1073743720 find (@expr1073743721 r@var261 .@expr1073743722 begin (@expr1073743723 ) , r@var261 .@expr1900 end (@expr1901 ) , x@var262 ) !=@expr1073743726 r@var261 .@expr1900 end (@expr1901 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var263 , const T & x@var264 )
54: {
55: return std ::@expr1073743729 find (@expr1073743730 r@var263 .@expr1073743731 begin (@expr1073743732 ) , r@var263 .@expr1909 end (@expr1910 ) , x@var264 ) !=@expr1073743735 r@var263 .@expr1909 end (@expr1910 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var265 , const U & x@var266 )
60: {
61: return std ::@expr1073743738 find (@expr1073743739 r@var265 .@expr1073743740 begin (@expr1073743741 ) , r@var265 .@expr1918 end (@expr1919 ) , x@var266 ) !=@expr1073743744 r@var265 .@expr1918 end (@expr1919 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var267 ) const
68: {
69: return static_cast < unsigned long > (@expr1073743747 t@var267 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var268 , char c@var269 )
74: {
75: return !@expr1073743748 str@var268 .@expr1073743749 empty (@expr1073743750 ) &&@expr1073743751 str@var268 .@expr1073743752 back (@expr1073743753 ) ==@expr1073743754 c@var269 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var270 , const char end@var271 [ ] , unsigned long endlen@var272 )
79: {
80: return (@expr1931 str@var270 .@expr1932 size (@expr1933 ) >=@expr1073743758 endlen@var272 ) &&@expr1073743759 (@expr1931 str@var270 .@expr1073743761 compare (@expr1073743762 str@var270 .@expr1932 size (@expr1933 ) -@expr1073743765 endlen@var272 , endlen@var272 , end@var271 ) ==@expr1073743766 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var273 , const char ( & end@var274 ) [ N ] )
85: {
86: return endsWith (@expr1073743768 str@var273 , end@var274 , N@expr1073743767 -@expr1073743769 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var275 , char q@var276 , const std :: string & p@var277 )
90: {
91: if (@expr1073743770 !@expr1073743771 endsWith (@expr1073743772 str@var275 , q@var276 ) ) {
92: return false ; }
93: if (@expr1073743773 (@expr1073743774 str@var275 .@expr1073743775 length (@expr1073743776 ) +@expr1073743777 1 ) >@expr1073743778 p@var277 .@expr1073743779 length (@expr1073743780 ) &&@expr1073743781 (@expr1073743782 str@var275 .@expr1073743783 compare (@expr1073743784 0 , p@var277 .@expr1073743785 size (@expr1073743786 ) +@expr1073743787 1 , p@var277 +@expr1073743788 q@var276 ) ==@expr1073743789 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var278 , char q@var279 )
99: {
100: static const std ::@expr1966 vector < std ::@expr1966 string > suffixes@var280 {@expr1073743792 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073743793 const std ::@expr1966 string &@expr1073743795 p@var281 :@expr1073743796 suffixes@var280 ) {
102: if (@expr1073743797 isPrefixStringCharLiteral (@expr1073743798 str@var278 , q@var279 , p@var281 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var282 )
109: {
110: return isStringCharLiteral (@expr1073743799 str@var282 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var283 )
114: {
115: return isStringCharLiteral (@expr1073743800 str@var283 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var284 , char q@var285 )
119: {
120: const unsigned long quotePos@var286 =@expr1073743801 str@var284 .@expr1073743802 find (@expr1073743803 q@var285 ) ;
121: return str@var284 .@expr1073743804 substr (@expr1073743805 quotePos@var286 +@expr1073743806 1U , str@var284 .@expr1073743807 size (@expr1073743808 ) -@expr1073743809 quotePos@var286 -@expr1073743810 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var287 )
125: {
126: if (@expr1073743811 isStringLiteral (@expr1073743812 str@var287 ) ) {
127: return getStringCharLiteral (@expr1073743813 str@var287 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var288 )
132: {
133: if (@expr1073743814 isCharLiteral (@expr1073743815 str@var288 ) ) {
134: return getStringCharLiteral (@expr1073743816 str@var288 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var289 )
139: {
140: if (@expr1073743817 i@var289 ==@expr1073743818 1 ) {
141: return "st" ; }
142: if (@expr1073743819 i@var289 ==@expr1073743820 2 ) {
143: return "nd" ; }
144: if (@expr1073743821 i@var289 ==@expr1073743822 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var290 , const std :: string & rhs@var291 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var292 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var293 , const std :: string & name@var294 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var295 , const std :: string & name@var296 ) ;
156:
157: void strTolower ( std :: string & str@var297 ) ;

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var298 , const std :: string & rhs@var299 ) const {
41: return caseInsensitiveStringCompare (@expr1073743823 lhs@var298 , rhs@var299 ) <@expr1073743824 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var307 ( cppcheck :: Platform :: Unspecified ) , msc@var308 ( false ) , useMfc@var309 ( false ) { }
67: std :: string cfg@var300 ;
68: std :: string filename@var301 ;
69: std :: string defines@var302 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var302 +@expr1073743825 (@expr1073743826 msc@var308 ?@expr1073743827 ";_MSC_VER=1900" :@expr1073743828 "" ) +@expr1073743829 (@expr1073743830 useMfc@var309 ?@expr1073743831 ";__AFXWIN_H__=1" :@expr1073743832 "" ) ;
72: }
73: std :: set < std :: string > undefs@var303 ;
74: std :: list < std :: string > includePaths@var304 ;
75: std :: list < std :: string > systemIncludePaths@var305 ;
76: std :: string standard@var306 ;
77: cppcheck :: Platform :: PlatformType platformType@var307 ;
78: bool msc@var308 ;
79: bool useMfc@var309 ;
80:
81: void parseCommand ( std :: string command@var310 ) ;
82: void setDefines ( std :: string defs@var311 ) ;
83: void setIncludePaths ( const std :: string & basepath@var312 , const std :: list < std :: string > & in@var313 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var314 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var315 ;
86: Type projectType@var316 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var317 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous1 {
96: std :: string analyzeAllVsConfigs@var318 ;
97: std :: vector < std :: string > pathNames@var319 ;
98: std :: list < std :: string > libraries@var320 ;
99: std :: list < std :: string > excludedPaths@var321 ;
100: std :: list < std :: string > checkVsConfigs@var322 ;
101: std :: string projectFile@var323 ;
102: std :: string platform@var324 ;
103: } ; struct Anonymous1 guiProject@var325 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var326 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var327 ) ;
107:
108: Type import ( const std :: string & filename@var328 , Settings * settings@var329 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var330 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var331 , Settings * settings@var332 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var333 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var334 , const std :: string & path@var335 , const std :: vector < std :: string > & fileFilters@var336 ) ;
115: bool importVcxproj ( const std :: string & filename@var337 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var338 , const std :: string & additionalIncludeDirectories@var339 , const std :: vector < std :: string > & fileFilters@var340 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var341 ) ;
117:
118: static void printError ( const std :: string & message@var342 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var343 ) ;
121:
122: std :: string mPath@var344 ;
123: std :: set < std :: string > mAllVSConfigs@var345 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var346 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var347 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var348 [ 2 ] = "1" ;
131: const char BuildDirElementName@var349 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var350 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var351 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var352 [ 7 ] = "parser" ;
135: const char BugHunting@var353 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var354 [ 11 ] = "includedir" ;
137: const char DirElementName@var355 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var356 [ 5 ] = "name" ;
139: const char DefinesElementName@var357 [ 8 ] = "defines" ;
140: const char DefineName@var358 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var359 [ 5 ] = "name" ;
142: const char UndefinesElementName@var360 [ 10 ] = "undefines" ;
143: const char UndefineName@var361 [ 9 ] = "undefine" ;
144: const char PathsElementName@var362 [ 6 ] = "paths" ;
145: const char PathName@var363 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var364 [ 5 ] = "name" ;
147: const char RootPathName@var365 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var366 [ 5 ] = "name" ;
149: const char IgnoreElementName@var367 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var368 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var369 [ 5 ] = "name" ;
152: const char ExcludeElementName@var370 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var371 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var372 [ 5 ] = "name" ;
155: const char FunctionContracts@var373 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var374 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var375 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var376 [ 8 ] = "library" ;
159: const char PlatformElementName@var377 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var378 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var379 [ 12 ] = "suppression" ;
162: const char AddonElementName@var380 [ 6 ] = "addon" ;
163: const char AddonsElementName@var381 [ 7 ] = "addons" ;
164: const char ToolElementName@var382 [ 5 ] = "tool" ;
165: const char ToolsElementName@var383 [ 6 ] = "tools" ;
166: const char TagsElementName@var384 [ 5 ] = "tags" ;
167: const char TagElementName@var385 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var386 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var387 [ 4 ] = "tag" ;
170: const char WarningElementName@var388 [ 8 ] = "warning" ;
171: const char HashAttributeName@var389 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var390 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var391 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var392 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var393 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var394 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var395 [ 11 ] = "clang-tidy" ;
178: const char Name@var396 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var397 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var398 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var399 ;
42: double mDoubleValue@var400 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var401 ;
44: bool mIsUnsigned@var402 ;
45:
46: void promote ( const value & v@var403 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var404 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var401 !=@expr1073743833 Type ::@expr1073743834 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var401 ==@expr1073743835 Type ::@expr1073743836 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073743837 ) ?@expr1073743838 mDoubleValue@var400 :@expr1073743839 (@expr1073743840 double ) mIntValue@var399 ;
60: }
61:
62: static value calc ( char op@var405 , const value & v1@var406 , const value & v2@var407 ) ;
63: int compare ( const value & v@var408 ) const ;
64: value add ( int v@var409 ) const ;
65: value shiftLeft ( const value & v@var410 ) const ;
66: value shiftRight ( const value & v@var411 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var412 ;
72:
73: static long long toLongNumber ( const std :: string & str@var413 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var414 ) ;
75:
76: template < class T > static std :: string toString ( T value@var415 ) {
77: std ::@expr1073743841 ostringstream result@var416 ;
78: result@var416 <<@expr1073743842 value@var415 ;
79: return result@var416 .@expr1073743843 str (@expr1073743844 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var417 ) ;
82:
83: static bool isInt ( const std :: string & str@var418 ) ;
84: static bool isFloat ( const std :: string & str@var419 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var420 ) ;
86: static bool isNegative ( const std :: string & str@var421 ) ;
87: static bool isPositive ( const std :: string & str@var422 ) ;
88: static bool isDec ( const std :: string & str@var423 ) ;
89: static bool isFloatHex ( const std :: string & str@var424 ) ;
90: static bool isIntHex ( const std :: string & str@var425 ) ;
91: static bool isOct ( const std :: string & str@var426 ) ;
92: static bool isBin ( const std :: string & str@var427 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var428 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var429 , bool supportMicrosoftExtensions@var430 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var431 , const std :: string & second@var432 ) ;
105: static std :: string subtract ( const std :: string & first@var433 , const std :: string & second@var434 ) ;
106: static std :: string multiply ( const std :: string & first@var435 , const std :: string & second@var436 ) ;
107: static std :: string divide ( const std :: string & first@var437 , const std :: string & second@var438 ) ;
108: static std :: string mod ( const std :: string & first@var439 , const std :: string & second@var440 ) ;
109: static std :: string incdec ( const std :: string & var@var441 , const std :: string & op@var442 ) ;
110: static std :: string calculate ( const std :: string & first@var443 , const std :: string & second@var444 , char action@var445 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var446 ) ;
113: static std :: string cos ( const std :: string & tok@var447 ) ;
114: static std :: string tan ( const std :: string & tok@var448 ) ;
115: static std :: string abs ( const std :: string & tok@var449 ) ;
116: static bool isEqual ( const std :: string & first@var450 , const std :: string & second@var451 ) ;
117: static bool isNotEqual ( const std :: string & first@var452 , const std :: string & second@var453 ) ;
118: static bool isGreater ( const std :: string & first@var454 , const std :: string & second@var455 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var456 , const std :: string & second@var457 ) ;
120: static bool isLess ( const std :: string & first@var458 , const std :: string & second@var459 ) ;
121: static bool isLessEqual ( const std :: string & first@var460 , const std :: string & second@var461 ) ;
122: static bool isNullValue ( const std :: string & str@var462 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var463 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var464 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var465 , std :: string :: size_type iPos@var466 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var467 , const MathLib :: value & v2@var468 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var469 , const MathLib :: value & v2@var470 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var471 , const MathLib :: value & v2@var472 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var473 , const MathLib :: value & v2@var474 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var475 , const MathLib :: value & v2@var476 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var477 , const MathLib :: value & v2@var478 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var479 , const MathLib :: value & v2@var480 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var481 , const MathLib :: value & v2@var482 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var483 , const MathLib :: value & v2@var484 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var485 , const MathLib :: value & v2@var486 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var487 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var488 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var489 ;
42:
43:
44: std :: string stdValue@var490 ;
45:
46:
47: Standards ( ) : c@var488 ( CLatest ) , cpp@var489 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var491 ) {
50: stdValue@var490 =@expr1073743845 str@var491 ;
51: if (@expr1073743846 str@var491 ==@expr1073743847 "c89" ||@expr1073743848 str@var491 ==@expr1073743849 "C89" ) {
52: c@var488 =@expr1073743850 C89 ;
53: return true ;
54: }
55: if (@expr1073743851 str@var491 ==@expr1073743852 "c99" ||@expr1073743853 str@var491 ==@expr1073743854 "C99" ) {
56: c@var488 =@expr1073743855 C99 ;
57: return true ;
58: }
59: if (@expr1073743856 str@var491 ==@expr1073743857 "c11" ||@expr1073743858 str@var491 ==@expr1073743859 "C11" ) {
60: c@var488 =@expr1073743860 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073743861 c@var488 ) {
67: case C89 :@expr2038 ;
68: return "c89" ;
69: case C99 :@expr2038 ;
70: return "c99" ;
71: case C11 :@expr2038 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var492 ) {
77: if (@expr1073743865 std@var492 ==@expr1073743866 "c89" ) {
78: return Standards ::@expr1073743867 C89 ;
79: }
80: if (@expr1073743868 std@var492 ==@expr1073743869 "c99" ) {
81: return Standards ::@expr1073743870 C99 ;
82: }
83: if (@expr1073743871 std@var492 ==@expr1073743872 "c11" ) {
84: return Standards ::@expr1073743873 C11 ;
85: }
86: return Standards ::@expr1073743874 CLatest ;
87: }
88: bool setCPP ( std :: string str@var493 ) {
89: stdValue@var490 =@expr1073743875 str@var493 ;
90: strTolower (@expr1073743876 str@var493 ) ;
91: cpp@var489 =@expr1073743877 getCPP (@expr1073743878 str@var493 ) ;
92: return !@expr1073743879 stdValue@var490 .@expr1073743880 empty (@expr1073743881 ) &&@expr1073743882 str@var493 ==@expr1073743883 getCPP (@expr1073743884 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073743885 cpp@var489 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var494 ) {
98: switch (@expr1073743886 std@var494 ) {
99: case CPP03 :@expr2063 ;
100: return "c++03" ;
101: case CPP11 :@expr2063 ;
102: return "c++11" ;
103: case CPP14 :@expr2063 ;
104: return "c++14" ;
105: case CPP17 :@expr2063 ;
106: return "c++17" ;
107: case CPP20 :@expr2063 ;
108: return "c++20" ;
109: case CPP23 :@expr2063 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var495 ) {
115: if (@expr1073743893 std@var495 ==@expr1073743894 "c++03" ) {
116: return Standards ::@expr1073743895 CPP03 ;
117: }
118: if (@expr1073743896 std@var495 ==@expr1073743897 "c++11" ) {
119: return Standards ::@expr1073743898 CPP11 ;
120: }
121: if (@expr1073743899 std@var495 ==@expr1073743900 "c++14" ) {
122: return Standards ::@expr1073743901 CPP14 ;
123: }
124: if (@expr1073743902 std@var495 ==@expr1073743903 "c++17" ) {
125: return Standards ::@expr1073743904 CPP17 ;
126: }
127: if (@expr1073743905 std@var495 ==@expr1073743906 "c++20" ) {
128: return Standards ::@expr1073743907 CPP20 ;
129: }
130: if (@expr1073743908 std@var495 ==@expr1073743909 "c++23" ) {
131: return Standards ::@expr1073743910 CPP23 ;
132: }
133: return Standards ::@expr1073743911 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var499 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var496 ) : errorcode@var499 ( e@var496 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var497 , T && r@var498 ) : errorcode@var499 ( e@var497 ) , reason@var500 ( r@var498 ) { }
66: ErrorCode errorcode@var499 ;
67: std :: string reason@var500 ;
68: } ;
69:
70: Error load ( const char exename@var501 [ ] , const char path@var502 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var503 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var504 [ ] , unsigned long len@var505 ) ;
75:
76: struct AllocFunc {
77: int groupId@var506 ;
78: int arg@var507 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var508 ;
81: int bufferSizeArg1@var509 ;
82: int bufferSizeArg2@var510 ;
83: int reallocArg@var511 ;
84: bool initData@var512 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var513 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var514 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var515 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var516 , int arg@var517 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var518 , int arg@var519 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var520 , int arg@var521 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var522 [ ] ) const {
107: return getAllocDealloc (@expr1073743912 mAlloc@var788 , name@var522 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var523 [ ] ) const {
112: return getAllocDealloc (@expr1073743913 mDealloc@var789 , name@var523 ) ;
113: }
114:
115:
116: int allocId ( const char name@var524 [ ] ) const {
117: const AllocFunc * af@var525 ; af@var525 =@expr1073743914 getAllocDealloc (@expr1073743915 mAlloc@var788 , name@var524 ) ;
118: return af@var525 ?@expr1073743916 af@var525 .@expr1073743917 groupId@var526 :@expr1073743918 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var527 [ ] ) const {
123: const AllocFunc * af@var528 ; af@var528 =@expr1073743919 getAllocDealloc (@expr1073743920 mDealloc@var789 , name@var527 ) ;
124: return af@var528 ?@expr1073743921 af@var528 .@expr1073743922 groupId@var529 :@expr1073743923 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var530 , int id@var531 , int arg@var532 ) {
129: mAlloc@var788 [@expr2100 functionname@var530 ] .@expr1073743925 groupId@var1733 =@expr1073743926 id@var531 ;
130: mAlloc@var788 [@expr2100 functionname@var530 ] .@expr1073743928 arg@var1734 =@expr1073743929 arg@var532 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var533 , int id@var534 , int arg@var535 ) {
134: mDealloc@var789 [@expr2106 functionname@var533 ] .@expr1073743931 groupId@var1735 =@expr1073743932 id@var534 ;
135: mDealloc@var789 [@expr2106 functionname@var533 ] .@expr1073743934 arg@var1736 =@expr1073743935 arg@var535 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var536 , int id@var537 , int arg@var538 , int reallocArg@var539 = 1 ) {
139: mRealloc@var790 [@expr2112 functionname@var536 ] .@expr1073743937 groupId@var1737 =@expr1073743938 id@var537 ;
140: mRealloc@var790 [@expr2112 functionname@var536 ] .@expr1073743940 arg@var1738 =@expr1073743941 arg@var538 ;
141: mRealloc@var790 [@expr2112 functionname@var536 ] .@expr1073743943 reallocArg@var1739 =@expr1073743944 reallocArg@var539 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var540 , bool noreturn@var541 ) {
146: mNoReturn@var791 [@expr1073743945 funcname@var540 ] =@expr1073743946 noreturn@var541 ?@expr1073743947 FalseTrueMaybe ::@expr1073743948 True :@expr1073743949 FalseTrueMaybe ::@expr1073743950 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var542 ) ;
150:
151:
152: static bool ismemory ( const int id@var543 ) {
153: return (@expr2127 (@expr2127 id@var543 >@expr1073743953 0 ) &&@expr1073743954 (@expr2127 (@expr2127 id@var543 &@expr1073743957 1 ) ==@expr1073743958 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var544 ) {
156: return (@expr2135 (@expr2135 func@var544 .@expr2137 groupId@var545 >@expr1073743962 0 ) &&@expr1073743963 (@expr2135 (@expr2135 func@var544 .@expr2137 groupId@var545 &@expr1073743967 1 ) ==@expr1073743968 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var546 ) {
161: return (@expr2145 (@expr2145 id@var546 >@expr1073743971 0 ) &&@expr1073743972 (@expr2145 (@expr2145 id@var546 &@expr1073743975 1 ) ==@expr1073743976 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var547 ) {
164: return (@expr2153 (@expr2153 func@var547 .@expr2155 groupId@var548 >@expr1073743980 0 ) &&@expr1073743981 (@expr2153 (@expr2153 func@var547 .@expr2155 groupId@var548 &@expr1073743985 1 ) ==@expr1073743986 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var549 ) const ;
168: int formatstr_argno ( const Token * ftok@var550 ) const ;
169: bool formatstr_scan ( const Token * ftok@var551 ) const ;
170: bool formatstr_secure ( const Token * ftok@var552 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var553 ;
174: int ptr2Arg@var554 ;
175: int sizeArg@var555 ;
176: int strlenArg@var556 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var557 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var558 ;
182: Standards standards@var559 ;
183: Severity :: SeverityType severity@var560 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var561 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var562 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var563 ) const ;
191: bool matchArguments ( const Token * ftok@var564 , const std :: string & functionName@var565 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var566 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var567 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var568 ) const ;
198: int returnValueContainer ( const Token * ftok@var569 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var570 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var571 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var572 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var573 , std :: string * unknownFunc@var574 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var584 ( -1 ) ,
210: size_templateArgNo@var586 ( -1 ) ,
211: arrayLike_indexOp@var587 ( false ) ,
212: stdStringLike@var588 ( false ) ,
213: stdAssociativeLike@var589 ( false ) ,
214: opLessAllowed@var590 ( true ) ,
215: hasInitializerListConstructor@var591 ( false ) ,
216: unstableErase@var592 ( false ) ,
217: unstableInsert@var593 ( false ) ,
218: view@var594 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var575 ;
248: Yield yield@var576 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var577 ;
252: int templateParameter@var578 ;
253: } ;
254: std :: string startPattern@var579 ; std :: string startPattern2@var580 ; std :: string endPattern@var581 ; std :: string itEndPattern@var582 ;
255: std :: map < std :: string , Function > functions@var583 ;
256: int type_templateArgNo@var584 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var585 ;
258: int size_templateArgNo@var586 ;
259: bool arrayLike_indexOp@var587 ;
260: bool stdStringLike@var588 ;
261: bool stdAssociativeLike@var589 ;
262: bool opLessAllowed@var590 ;
263: bool hasInitializerListConstructor@var591 ;
264: bool unstableErase@var592 ;
265: bool unstableInsert@var593 ;
266: bool view@var594 ;
267:
268: Action getAction ( const std :: string & function@var595 ) const {
269: const std ::@expr1073743987 map < std ::@expr1073743988 string , Function > ::@expr1073743989 const_iterator i@var596 =@expr1073743990 functions@var583 .@expr1073743991 find (@expr1073743992 function@var595 ) ;
270: if (@expr1073743993 i@var596 !=@expr1073743994 functions@var583 .@expr1073743995 end (@expr1073743996 ) ) {
271: return i@var596 .@expr1073743997 second@var597 .@expr1073743998 action@var598 ; }
272: return Action ::@expr1073743999 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var599 ) const {
276: const std ::@expr1073744000 map < std ::@expr1073744001 string , Function > ::@expr1073744002 const_iterator i@var600 =@expr1073744003 functions@var583 .@expr1073744004 find (@expr1073744005 function@var599 ) ;
277: if (@expr1073744006 i@var600 !=@expr1073744007 functions@var583 .@expr1073744008 end (@expr1073744009 ) ) {
278: return i@var600 .@expr1073744010 second@var601 .@expr1073744011 yield@var602 ; }
279: return Yield ::@expr1073744012 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var603 ) ;
283: static Action actionFrom ( const std :: string & actionName@var604 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var605 ;
286: const Container * detectContainer ( const Token * typeStart@var606 , bool iterator@var607 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var608 , bool * isIterator@var609 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var610 ( false ) ,
293: notnull@var611 ( false ) ,
294: notuninit@var612 ( -1 ) ,
295: formatstr@var613 ( false ) ,
296: strz@var614 ( false ) ,
297: optional@var615 ( false ) ,
298: variadic@var616 ( false ) ,
299: iteratorInfo@var622 ( ) ,
300: direction@var630 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var610 ;
303: bool notnull@var611 ;
304: int notuninit@var612 ;
305: bool formatstr@var613 ;
306: bool strz@var614 ;
307: bool optional@var615 ;
308: bool variadic@var616 ;
309: std :: string valid@var617 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var618 ( 0 ) , it@var619 ( false ) , first@var620 ( false ) , last@var621 ( false ) { }
314:
315: int container@var618 ;
316: bool it@var619 ;
317: bool first@var620 ;
318: bool last@var621 ;
319: } ;
320: IteratorInfo iteratorInfo@var622 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var623 , int a@var624 ) : type@var625 ( t@var623 ) , arg@var626 ( a@var624 ) , arg2@var627 ( 0 ) , value@var628 ( 0 ) { }
326: Type type@var625 ;
327: int arg@var626 ;
328: int arg2@var627 ;
329: long long value@var628 ;
330: } ;
331: std :: vector < MinSize > minsizes@var629 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var630 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var631 ;
344: bool use@var632 ;
345: bool leakignore@var633 ;
346: bool isconst@var634 ;
347: bool ispure@var635 ;
348: UseRetValType useretval@var636 ;
349: bool ignore@var637 ;
350: bool formatstr@var638 ;
351: bool formatstr_scan@var639 ;
352: bool formatstr_secure@var640 ;
353: Container :: Action containerAction@var641 ;
354: Container :: Yield containerYield@var642 ;
355: Function ( )
356: : use@var632 ( false ) ,
357: leakignore@var633 ( false ) ,
358: isconst@var634 ( false ) ,
359: ispure@var635 ( false ) ,
360: useretval@var636 ( UseRetValType :: NONE ) ,
361: ignore@var637 ( false ) ,
362: formatstr@var638 ( false ) ,
363: formatstr_scan@var639 ( false ) ,
364: formatstr_secure@var640 ( false ) ,
365: containerAction@var641 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var642 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var643 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var644 ;
372: bool isUse ( const std :: string & functionName@var645 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var646 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var647 , bool pure@var648 ) const ;
375: bool isFunctionConst ( const Token * ftok@var649 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var650 , int argnr@var651 ) const {
378: const ArgumentChecks * arg@var652 ; arg@var652 =@expr1073744013 getarg (@expr1073744014 ftok@var650 , argnr@var651 ) ;
379: return arg@var652 &&@expr1073744015 arg@var652 .@expr1073744016 notbool@var653 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var654 , int argnr@var655 ) const ;
383: bool isuninitargbad ( const Token * ftok@var656 , int argnr@var657 , int indirect@var658 = 0 , bool * hasIndirect@var659 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var660 , int argnr@var661 ) const {
386: const ArgumentChecks * arg@var662 ; arg@var662 =@expr1073744017 getarg (@expr1073744018 ftok@var660 , argnr@var661 ) ;
387: return arg@var662 &&@expr1073744019 arg@var662 .@expr1073744020 formatstr@var663 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var664 , int argnr@var665 ) const {
391: const ArgumentChecks * arg@var666 ; arg@var666 =@expr1073744021 getarg (@expr1073744022 ftok@var664 , argnr@var665 ) ;
392: return arg@var666 &&@expr1073744023 arg@var666 .@expr1073744024 strz@var667 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var668 , int argnr@var669 , const long long argvalue@var670 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var671 , int argnr@var672 , double argvalue@var673 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var674 , int argnr@var675 ) const {
399: const ArgumentChecks * arg@var676 ; arg@var676 =@expr1073744025 getarg (@expr1073744026 ftok@var674 , argnr@var675 ) ;
400: return arg@var676 ?@expr1073744027 arg@var676 .@expr1073744028 valid@var677 :@expr1073744029 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var678 ;
405: std :: string op1@var679 ;
406: std :: string op2@var680 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744030 isInt (@expr1073744031 op1@var679 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var681 , int argnr@var682 ) const {
413: const ArgumentChecks * arg@var683 ; arg@var683 =@expr1073744032 getarg (@expr1073744033 ftok@var681 , argnr@var682 ) ;
414: return arg@var683 &&@expr1073744034 arg@var683 .@expr2211 iteratorInfo@var684 .@expr1073744036 it@var685 ?@expr1073744037 &@expr1073744038 arg@var683 .@expr2211 iteratorInfo@var684 :@expr1073744040 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var686 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var687 , int argnr@var688 ) const {
420: const ArgumentChecks * arg@var689 ; arg@var689 =@expr1073744041 getarg (@expr1073744042 ftok@var687 , argnr@var688 ) ;
421: return arg@var689 ?@expr1073744043 &@expr1073744044 arg@var689 .@expr1073744045 minsizes@var690 :@expr1073744046 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var691 , int argnr@var692 ) const ;
425:
426: bool markupFile ( const std :: string & path@var693 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var694 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var798 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var695 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var696 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var697 , const std :: string & token@var698 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var699 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var700 ) const ;
443: const std :: string & blockend ( const std :: string & file@var701 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var702 , const std :: string & keyword@var703 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var704 ) const {
448: return mExporters@var801 .@expr1073744047 find (@expr1073744048 prefix@var704 ) !=@expr1073744049 mExporters@var801 .@expr1073744050 end (@expr1073744051 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var705 , const std :: string & token@var706 ) const {
452: const std ::@expr1073744052 map < std ::@expr1073744053 string , ExportedFunctions > ::@expr1073744054 const_iterator it@var707 =@expr1073744055 mExporters@var801 .@expr1073744056 find (@expr1073744057 prefix@var705 ) ;
453: return (@expr1073744058 it@var707 !=@expr1073744059 mExporters@var801 .@expr1073744060 end (@expr1073744061 ) &&@expr1073744062 it@var707 .@expr1073744063 second@var708 .@expr1073744064 isPrefix (@expr1073744065 token@var706 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var709 , const std :: string & token@var710 ) const {
457: const std ::@expr1073744066 map < std ::@expr1073744067 string , ExportedFunctions > ::@expr1073744068 const_iterator it@var711 =@expr1073744069 mExporters@var801 .@expr1073744070 find (@expr1073744071 prefix@var709 ) ;
458: return (@expr1073744072 it@var711 !=@expr1073744073 mExporters@var801 .@expr1073744074 end (@expr1073744075 ) &&@expr1073744076 it@var711 .@expr1073744077 second@var712 .@expr1073744078 isSuffix (@expr1073744079 token@var710 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var713 , const std :: string & importer@var714 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var715 , Container :: Yield yield@var716 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var717 , Container :: Action action@var718 ) const ;
465:
466: bool isreflection ( const std :: string & token@var719 ) const {
467: return mReflection@var803 .@expr1073744080 find (@expr1073744081 token@var719 ) !=@expr1073744082 mReflection@var803 .@expr1073744083 end (@expr1073744084 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var720 ) const {
471: const std ::@expr1073744085 map < std ::@expr1073744086 string , int > ::@expr1073744087 const_iterator it@var721 =@expr1073744088 mReflection@var803 .@expr1073744089 find (@expr1073744090 token@var720 ) ;
472: if (@expr1073744091 it@var721 !=@expr1073744092 mReflection@var803 .@expr1073744093 end (@expr1073744094 ) ) {
473: return it@var721 .@expr1073744095 second@var722 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var723 ;
478:
479: struct SmartPointer {
480: std :: string name@var724 ; name@var724 = "" ;
481: bool unique@var725 ; unique@var725 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var726 ;
485: bool isSmartPointer ( const Token * tok@var727 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var728 ) const ;
487:
488: struct PodType {
489: unsigned int size@var729 ;
490: char sign@var730 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var731 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var732 ) const {
494: const std ::@expr1073744096 unordered_map < std ::@expr1073744097 string , PodType > ::@expr1073744098 const_iterator it@var733 =@expr1073744099 mPodTypes@var804 .@expr1073744100 find (@expr1073744101 name@var732 ) ;
495: return (@expr2278 it@var733 !=@expr1073744103 mPodTypes@var804 .@expr1073744104 end (@expr1073744105 ) ) ?@expr1073744106 &@expr1073744107 (@expr2278 it@var733 .@expr1073744109 second@var734 ) :@expr1073744110 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var745 ( false )
501: , mUnsigned@var746 ( false )
502: , mLong@var747 ( false )
503: , mPointer@var748 ( false )
504: , mPtrPtr@var749 ( false )
505: , mConstPtr@var750 ( false ) { }
506: bool operator== ( const PlatformType & type@var735 ) const {
507: return (@expr1073744111 mSigned@var745 ==@expr1073744112 type@var735 .@expr1073744113 mSigned@var736 &&@expr1073744114
508: mUnsigned@var746 ==@expr1073744115 type@var735 .@expr1073744116 mUnsigned@var737 &&@expr1073744117
509: mLong@var747 ==@expr1073744118 type@var735 .@expr1073744119 mLong@var738 &&@expr1073744120
510: mPointer@var748 ==@expr1073744121 type@var735 .@expr1073744122 mPointer@var739 &&@expr1073744123
511: mPtrPtr@var749 ==@expr1073744124 type@var735 .@expr1073744125 mPtrPtr@var740 &&@expr1073744126
512: mConstPtr@var750 ==@expr1073744127 type@var735 .@expr1073744128 mConstPtr@var741 &&@expr1073744129
513: mType@var744 ==@expr1073744130 type@var735 .@expr1073744131 mType@var742 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var743 ) const {
516: return !@expr1073744132 (@expr1073744133 *@expr1073744134 this@expr1073744135 ==@expr1073744136 type@var743 ) ;
517: }
518: std :: string mType@var744 ;
519: bool mSigned@var745 ;
520: bool mUnsigned@var746 ;
521: bool mLong@var747 ;
522: bool mPointer@var748 ;
523: bool mPtrPtr@var749 ;
524: bool mConstPtr@var750 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var751 ) const {
529: const std ::@expr1073744137 map < std ::@expr1073744138 string , PlatformType > ::@expr1073744139 const_iterator it@var752 =@expr1073744140 mPlatformTypes@var754 .@expr1073744141 find (@expr1073744142 name@var751 ) ;
530: return (@expr2319 it@var752 !=@expr1073744144 mPlatformTypes@var754 .@expr1073744145 end (@expr1073744146 ) ) ?@expr1073744147 &@expr1073744148 (@expr2319 it@var752 .@expr1073744150 second@var753 ) :@expr1073744151 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var754 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var755 , const std :: string & platform@var756 ) const {
536: const std ::@expr1073744152 map < std ::@expr2329 string , Platform > ::@expr1073744154 const_iterator it@var757 =@expr1073744155 mPlatforms@var806 .@expr1073744156 find (@expr1073744157 platform@var756 ) ;
537: if (@expr1073744158 it@var757 !=@expr1073744159 mPlatforms@var806 .@expr1073744160 end (@expr1073744161 ) ) {
538: const PlatformType * const type@var758 ; type@var758 =@expr1073744162 it@var757 .@expr1073744163 second@var759 .@expr1073744164 platform_type (@expr1073744165 name@var755 ) ;
539: if (@expr1073744166 type@var758 ) {
540: return type@var758 ; }
541: }
542:
543: const std ::@expr1073744167 map < std ::@expr2329 string , PlatformType > ::@expr1073744169 const_iterator it2@var760 =@expr1073744170 mPlatformTypes@var805 .@expr1073744171 find (@expr1073744172 name@var755 ) ;
544: return (@expr2349 it2@var760 !=@expr1073744174 mPlatformTypes@var805 .@expr1073744175 end (@expr1073744176 ) ) ?@expr1073744177 &@expr1073744178 (@expr2349 it2@var760 .@expr1073744180 second@var761 ) :@expr1073744181 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var762 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var763 , Library :: Container :: Yield y@var764 , const std :: string & fallback@var765 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var766 , const std :: string & typeName@var767 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var768 , const std :: string & name@var769 , std :: set < std :: string > & unknown_elements@var770 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var771 ) {
565: mPrefixes@var775 .@expr1073744182 insert (@expr1073744183 prefix@var771 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var772 ) {
568: mSuffixes@var776 .@expr1073744184 insert (@expr1073744185 suffix@var772 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var773 ) const {
571: return (@expr1073744186 mPrefixes@var775 .@expr1073744187 find (@expr1073744188 prefix@var773 ) !=@expr1073744189 mPrefixes@var775 .@expr1073744190 end (@expr1073744191 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var774 ) const {
574: return (@expr1073744192 mSuffixes@var776 .@expr1073744193 find (@expr1073744194 suffix@var774 ) !=@expr1073744195 mSuffixes@var776 .@expr1073744196 end (@expr1073744197 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var775 ;
579: std :: set < std :: string > mSuffixes@var776 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var784 ( 0 ) { }
584:
585: void setStart ( const char * s@var777 ) {
586: mStart@var782 =@expr1073744198 s@var777 ;
587: }
588: void setEnd ( const char * e@var778 ) {
589: mEnd@var783 =@expr1073744199 e@var778 ;
590: }
591: void setOffset ( const int o@var779 ) {
592: mOffset@var784 =@expr1073744200 o@var779 ;
593: }
594: void addBlock ( const char * blockName@var780 ) {
595: mBlocks@var785 .@expr1073744201 insert (@expr1073744202 blockName@var780 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var782 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var783 ;
602: }
603: int offset ( ) const {
604: return mOffset@var784 ;
605: }
606: bool isBlock ( const std :: string & blockName@var781 ) const {
607: return mBlocks@var785 .@expr1073744203 find (@expr1073744204 blockName@var781 ) !=@expr1073744205 mBlocks@var785 .@expr1073744206 end (@expr1073744207 ) ;
608: }
609:
610: private:
611: std :: string mStart@var782 ;
612: std :: string mEnd@var783 ;
613: int mOffset@var784 ;
614: std :: set < std :: string > mBlocks@var785 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var786 ;
618: std :: set < std :: string > mFiles@var787 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var788 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var789 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var790 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var791 ;
623: std :: map < std :: string , std :: string > mReturnValue@var792 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var793 ;
625: std :: map < std :: string , int > mReturnValueContainer@var794 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var795 ;
627: std :: map < std :: string , bool > mReportErrors@var796 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var797 ;
629: std :: set < std :: string > mMarkupExtensions@var798 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var799 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var800 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var801 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var802 ;
634: std :: map < std :: string , int > mReflection@var803 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var804 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var805 ;
637: std :: map < std :: string , Platform > mPlatforms@var806 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var807 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var808 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var809 , int argnr@var810 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var811 , bool * error@var812 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var813 , const std :: string & name@var814 ) {
646: const std ::@expr1073744208 map < std ::@expr1073744209 string , AllocFunc > ::@expr1073744210 const_iterator it@var815 =@expr1073744211 data@var813 .@expr1073744212 find (@expr1073744213 name@var814 ) ;
647: return (@expr1073744214 it@var815 ==@expr1073744215 data@var813 .@expr1073744216 end (@expr1073744217 ) ) ?@expr1073744218 nullptr :@expr1073744219 &@expr1073744220 it@var815 .@expr1073744221 second@var816 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var817 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var818 ,
654: const Settings * settings@var819 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var820 = nullptr ) ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var821 , std :: clock_t clocks@var822 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var823 ;
45: long mNumberOfResults@var824 ;
46:
47: TimerResultsData ( )
48: : mClocks@var823 ( 0 )
49: , mNumberOfResults@var824 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var825 =@expr1073744223 (@expr1073744224 double ) (@expr1073744225 (@expr1073744226 unsigned long ) mClocks@var823 ) /@expr1073744227 (@expr1073744228 double ) CLOCKS_PER_SEC@expr1073744222 ;
53: return ret@var825 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var826 ) const ;
62: void addResults ( const std :: string & str@var827 , std :: clock_t clocks@var828 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var829 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var830 , SHOWTIME_MODES showtimeMode@var831 , TimerResultsIntf * timerResults@var832 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var833 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var834 ;
79: TimerResultsIntf * mTimerResults@var835 ;
80: std :: clock_t mStart@var836 ;
81: const SHOWTIME_MODES mShowTimeMode@var837 ;
82: bool mStopped@var838 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var839 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var840 ;
103:
104:
105: std :: string addonPython@var841 ;
106:
107:
108: std :: vector < std :: string > basePaths@var842 ;
109:
110:
111: std :: string buildDir@var843 ;
112:
113:
114: bool checkAllConfigurations@var844 ;
115:
116:
117: bool checkConfiguration@var845 ;
118:
|
121:
122: bool checkHeaders@var846 ;
123:
124:
125: bool checkLibrary@var847 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var848 ;
129:
130:
131: bool checkUnusedTemplates@var849 ;
132:
133:
134: bool clang@var850 ;
135:
136:
137: std :: string clangExecutable@var851 ;
138:
139:
140: bool clangTidy@var852 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var853 ;
144:
145:
146: std :: string cppcheckCfgProductName@var854 ;
147:
148:
149: std :: string cppcheckCfgAbout@var855 ;
150:
151:
152: bool daca@var856 ;
153:
154:
155: bool debugnormal@var857 ;
156:
157:
158: bool debugSimplified@var858 ;
159:
160:
161: bool debugtemplate@var859 ;
162:
163:
164: bool debugwarnings@var860 ;
165:
166:
167: bool dump@var861 ;
168: std :: string dumpFile@var862 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var863 ;
176:
177:
178: bool exceptionHandling@var864 ;
179:
180:
181: std :: string exename@var865 ;
182:
183:
184:
185: int exitCode@var866 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var867 ;
189:
190:
191: bool force@var868 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var869 ;
196:
197:
198: bool inlineSuppressions@var870 ;
199:
200:
201:
202: unsigned int jobs@var871 ;
203:
|
206:
207: bool jointSuppressionReport@var872 ;
208:
209:
210: std :: list < std :: string > libraries@var873 ;
211:
212:
213: Library library@var874 ;
214:
215:
216:
217: int loadAverage@var875 ;
218:
|
221:
222: int maxConfigs@var876 ;
223:
224:
225: int maxCtuDepth@var877 ;
226:
227:
228: int maxTemplateRecursion@var878 ;
229:
230:
231: Suppressions nofail@var879 ;
232:
233:
234: Suppressions nomsg@var880 ;
235:
236:
237: std :: string outputFile@var881 ;
238:
239:
240: std :: string plistOutput@var882 ;
241:
242:
243: bool preprocessOnly@var883 ;
244:
245: ImportProject project@var884 ;
246:
247:
248: bool quiet@var885 ;
249:
250:
251: bool relativePaths@var886 ;
252:
253:
254: bool reportProgress@var887 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var888 ( "simple" )
261: , id@var890 ( "rule" )
262: , severity@var892 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var888 ;
266: std :: string pattern@var889 ;
267: std :: string id@var890 ;
268: std :: string summary@var891 ;
269: Severity :: SeverityType severity@var892 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var893 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var899 ( false ) , externalFunctions@var900 ( false ) , internalFunctions@var901 ( false ) , externalVariables@var902 ( false ) { }
281:
282: static const char XmlRootName@var894 [ ] ;
283: static const char XmlClasses@var895 [ ] ;
284: static const char XmlExternalFunctions@var896 [ ] ;
285: static const char XmlInternalFunctions@var897 [ ] ;
286: static const char XmlExternalVariables@var898 [ ] ;
287:
288: void clear ( ) {
289: classes@var899 =@expr1073744229 externalFunctions@var900 =@expr1073744230 internalFunctions@var901 =@expr1073744231 externalVariables@var902 =@expr1073744232 false ;
290: }
291:
|
297:
298: bool classes@var899 ;
299:
|
304:
305: bool externalFunctions@var900 ;
306:
|
310:
311: bool internalFunctions@var901 ;
312:
|
316:
317: bool externalVariables@var902 ;
318: } ;
319:
320: SafeChecks safeChecks@var903 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var904 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var905 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var906 ;
325:
326:
327: SHOWTIME_MODES showtime@var907 ;
328:
329:
330: Standards standards@var908 ;
331:
332:
333:
334: std :: string templateFormat@var909 ;
335:
336:
337:
338: std :: string templateLocation@var910 ;
339:
340:
341: std :: string userDefines@var911 ;
342:
343:
344: std :: set < std :: string > userUndefs@var912 ;
345:
346:
347: std :: list < std :: string > userIncludes@var913 ;
348:
349:
350: bool verbose@var914 ;
351:
352:
353: bool xml@var915 ;
354:
355:
356: int xml_version@var916 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var917 ) const {
363: for (@expr1073744233 const std ::@expr1073744234 string &@expr1073744235 configExcludePath@var918 :@expr1073744236 configExcludePaths@var853 ) {
364: if (@expr1073744237 file@var917 .@expr1073744238 length (@expr1073744239 ) >=@expr1073744240 configExcludePath@var918 .@expr2417 length (@expr2418 ) &&@expr1073744243 file@var917 .@expr1073744244 compare (@expr1073744245 0 , configExcludePath@var918 .@expr2417 length (@expr2418 ) , configExcludePath@var918 ) ==@expr1073744248 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var919 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var920 , bool inconclusiveCheck@var921 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744249 find (@expr1073744250 libraries@var873 .@expr1073744251 begin (@expr1073744252 ) , libraries@var873 .@expr2429 end (@expr2430 ) , "posix" ) !=@expr1073744255 libraries@var873 .@expr2429 end (@expr2430 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var922 = true ) {
392: Settings ::@expr1073744258 mTerminated@var839 =@expr1073744259 t@var922 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744260 mTerminated@var839 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var923 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var924 ) const {
54: x@var924 ++@expr1073744261 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var925 ) const {
60: x@var925 --@expr1073744262 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var926 , const U & y@var927 ) const {
67: return x@var926 <@expr1073744263 y@var927 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var928 , const U & y@var929 ) const {
74: return std ::@expr1073744264 abs (@expr1073744265 x@var928 -@expr1073744266 y@var929 ) ==@expr1073744267 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var930 , T x@var931 , U y@var932 ) const {
81: result@var930 =@expr1073744268 !@expr1073744269 (@expr1073744270 x@var931 >@expr1073744271 y@var932 ||@expr1073744272 x@var931 <@expr1073744273 y@var932 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var933 = 0 , Bound b@var934 = Bound :: Point )
91: : valueType@var974 ( ValueType :: INT ) ,
92: bound@var975 ( b@var934 ) ,
93: intvalue@var976 ( val@var933 ) ,
94: tokvalue@var977 ( nullptr ) ,
95: floatValue@var978 ( 0.0 ) ,
96: moveKind@var979 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var980 ( val@var933 ) ,
98: condition@var981 ( nullptr ) ,
99: varId@var983 ( 0U ) ,
100: safe@var984 ( false ) ,
101: conditional@var985 ( false ) ,
102: macro@var986 ( false ) ,
103: defaultArg@var987 ( false ) ,
104: indirect@var988 ( 0 ) ,
105: path@var989 ( 0 ) ,
106: wideintvalue@var990 ( val@var933 ) ,
107: subexpressions@var991 ( ) ,
108: capturetok@var992 ( nullptr ) ,
109: lifetimeKind@var993 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var994 ( LifetimeScope :: Local ) ,
111: valueKind@var999 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var935 , long long val@var936 , Bound b@var937 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var938 ) const {
118: if (@expr1073744274 valueType@var974 !=@expr1073744275 rhs@var938 .@expr1073744276 valueType@var939 ) {
119: return false ; }
120: switch (@expr1073744277 valueType@var974 ) {
121: case ValueType ::@expr1073744278 INT :@expr2455
122: case ValueType ::@expr1073744280 CONTAINER_SIZE :@expr2455
123: case ValueType ::@expr1073744282 BUFFER_SIZE :@expr2455
124: case ValueType ::@expr1073744284 ITERATOR_START :@expr2455
125: case ValueType ::@expr1073744286 ITERATOR_END :@expr2455 ;
126: if (@expr2464 intvalue@var976 !=@expr2465 rhs@var938 .@expr2466 intvalue@var940 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744291 TOK :@expr2455 ;
130: if (@expr2469 tokvalue@var977 !=@expr2470 rhs@var938 .@expr2471 tokvalue@var941 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744296 FLOAT :@expr2455 ;
134:
135: if (@expr1073744298 floatValue@var978 >@expr1073744299 rhs@var938 .@expr2476 floatValue@var942 ||@expr1073744301 floatValue@var978 <@expr1073744302 rhs@var938 .@expr2476 floatValue@var942 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744304 MOVED :@expr2455 ;
139: if (@expr1073744306 moveKind@var979 !=@expr1073744307 rhs@var938 .@expr1073744308 moveKind@var943 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744309 UNINIT :@expr2455 ;
143: break ;
144: case ValueType ::@expr1073744311 LIFETIME :@expr2455 ;
145: if (@expr2469 tokvalue@var977 !=@expr2470 rhs@var938 .@expr2471 tokvalue@var941 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744316 SYMBOLIC :@expr2455 ;
149: if (@expr1073744318 !@expr1073744319 sameToken (@expr1073744320 tokvalue@var977 , rhs@var938 .@expr2471 tokvalue@var941 ) ) {
150: return false ; }
151: if (@expr2464 intvalue@var976 !=@expr2465 rhs@var938 .@expr2466 intvalue@var940 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var944 , F f@var945 ) {
160: switch (@expr1073744325 self@var944 .@expr1073744326 valueType@var946 ) {
161: case ValueType ::@expr1073744327 INT :@expr2504
162: case ValueType ::@expr1073744329 SYMBOLIC :@expr2504
163: case ValueType ::@expr1073744331 BUFFER_SIZE :@expr2504
164: case ValueType ::@expr1073744333 CONTAINER_SIZE :@expr2504
165: case ValueType ::@expr1073744335 ITERATOR_START :@expr2504
166: case ValueType ::@expr1073744337 ITERATOR_END :@expr2504 ; {
167: f@var945 (@expr1073744339 self@var944 .@expr1073744340 intvalue@var947 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744341 FLOAT :@expr2504 ; {
171: f@var945 (@expr1073744343 self@var944 .@expr1073744344 floatValue@var948 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744345 UNINIT :@expr2504
175: case ValueType ::@expr1073744347 TOK :@expr2504
176: case ValueType ::@expr1073744349 LIFETIME :@expr2504
177: case ValueType ::@expr1073744351 MOVED :@expr2504 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var949 , Compare compare@var950 , T x@var951 , U y@var952 ) const {
186: result@var949 =@expr1073744353 compare@var950 (@expr1073744354 x@var951 , y@var952 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var953 , const Value & rhs@var954 , Compare compare@var955 , T x@var956 ) const {
191: visitValue (@expr1073744356 rhs@var954 ,
192: std ::@expr1073744357 bind (@expr1073744358 innerVisitor {@expr1073744359 } , std ::@expr1073744360 ref (@expr1073744361 result@var953 ) , std ::@expr1073744362 move (@expr1073744363 compare@var955 ) , x@var956 , std ::@expr1073744364 placeholders ::@expr1073744365 _1@expr1073744355 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var957 , Compare compare@var958 ) const {
198: assert (@expr1073744367 (@expr1073744368 !@expr1073744369 this@expr2546 .@expr1073744371 isSymbolicValue (@expr1073744372 ) &&@expr1073744373 !@expr1073744374 rhs@var957 .@expr1073744375 isSymbolicValue (@expr1073744376 ) ) ||@expr1073744377
199: (@expr1073744378 this@expr2546 .@expr1073744379 valueType@var974 ==@expr1073744380 rhs@var957 .@expr1073744381 valueType@var959 &&@expr1073744382 sameToken (@expr1073744383 this@expr2546 .@expr1073744384 tokvalue@var977 , rhs@var957 .@expr1073744385 tokvalue@var960 ) ) ) ;
200: bool result@var961 ; result@var961 =@expr1073744386 false ;
201: visitValue (@expr1073744387
202: *@expr1073744388 this@expr2546 ,
203: std ::@expr1073744389 bind (@expr1073744390 compareVisitor {@expr1073744391 } , std ::@expr2568 ref (@expr1073744393 result@var961 ) , std ::@expr2568 ref (@expr1073744395 rhs@var957 ) , std ::@expr1073744396 move (@expr1073744397 compare@var958 ) , std ::@expr1073744398 placeholders ::@expr1073744399 _1@expr1073744366 ) ) ;
204: return result@var961 ;
205: }
206:
207: bool operator== ( const Value & rhs@var962 ) const {
208: if (@expr1073744400 !@expr1073744401 equalValue (@expr1073744402 rhs@var962 ) ) {
209: return false ; }
210:
211: return varvalue@var980 ==@expr1073744403 rhs@var962 .@expr1073744404 varvalue@var963 &&@expr1073744405
212: condition@var981 ==@expr1073744406 rhs@var962 .@expr1073744407 condition@var964 &&@expr1073744408
213: varId@var983 ==@expr1073744409 rhs@var962 .@expr1073744410 varId@var965 &&@expr1073744411
214: conditional@var985 ==@expr1073744412 rhs@var962 .@expr1073744413 conditional@var966 &&@expr1073744414
215: defaultArg@var987 ==@expr1073744415 rhs@var962 .@expr1073744416 defaultArg@var967 &&@expr1073744417
216: indirect@var988 ==@expr1073744418 rhs@var962 .@expr1073744419 indirect@var968 &&@expr1073744420
217: valueKind@var999 ==@expr1073744421 rhs@var962 .@expr1073744422 valueKind@var969 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var970 ) const {
221: return !@expr1073744423 (@expr1073744424 *@expr1073744425 this@expr1073744426 ==@expr1073744427 rhs@var970 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var971 ) const {
226: bool result@var972 ; result@var972 =@expr1073744429 false ;
227: visitValue (@expr1073744430 *@expr1073744431 this@expr1073744432 , std ::@expr1073744433 bind (@expr1073744434 equalVisitor {@expr1073744435 } , std ::@expr1073744436 ref (@expr1073744437 result@var972 ) , x@var971 , std ::@expr1073744438 placeholders ::@expr1073744439 _1@expr1073744428 ) ) ;
228: return result@var972 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744440 bound@var975 ==@expr1073744441 Bound ::@expr1073744442 Lower ) {
233: visitValue (@expr1073744443 *@expr2620 this@expr2621 , increment {@expr1073744446 } ) ; }
234: else { if (@expr1073744447 bound@var975 ==@expr1073744448 Bound ::@expr1073744449 Upper ) {
235: visitValue (@expr1073744450 *@expr2620 this@expr2621 , decrement {@expr1073744452 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744453 bound@var975 ==@expr1073744454 Bound ::@expr2631 Lower ) {
240: bound@var975 =@expr1073744456 Bound ::@expr2633 Upper ; }
241: else { if (@expr1073744458 bound@var975 ==@expr1073744459 Bound ::@expr2633 Upper ) {
242: bound@var975 =@expr1073744461 Bound ::@expr2631 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744463 ) ;
247: decreaseRange (@expr1073744464 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var973 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var974 ;
267: bool isIntValue ( ) const {
268: return valueType@var974 ==@expr1073744466 ValueType ::@expr1073744467 INT@expr1073744465 ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var974 ==@expr1073744468 ValueType ::@expr1073744469 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var974 ==@expr1073744470 ValueType ::@expr1073744471 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var974 ==@expr1073744472 ValueType ::@expr1073744473 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var974 ==@expr1073744474 ValueType ::@expr1073744475 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var974 ==@expr1073744476 ValueType ::@expr1073744477 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var974 ==@expr1073744478 ValueType ::@expr1073744479 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var974 ==@expr1073744480 ValueType ::@expr1073744481 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var974 ==@expr1073744482 ValueType ::@expr1073744483 ITERATOR_START ||@expr1073744484 valueType@var974 ==@expr1073744485 ValueType ::@expr1073744486 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var974 ==@expr1073744487 ValueType ::@expr1073744488 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var974 ==@expr1073744489 ValueType ::@expr1073744490 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var974 ==@expr1073744491 ValueType ::@expr1073744492 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var974 ==@expr1073744494 ValueType ::@expr1073744495 LIFETIME &&@expr1073744496 lifetimeScope@var994 ==@expr1073744497 LifetimeScope ::@expr1073744498 Local@expr1073744493 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var974 ==@expr1073744499 ValueType ::@expr1073744500 LIFETIME &&@expr1073744501 lifetimeScope@var994 ==@expr1073744502 LifetimeScope ::@expr1073744503 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var974 ==@expr1073744504 ValueType ::@expr1073744505 LIFETIME &&@expr1073744506 lifetimeScope@var994 ==@expr1073744507 LifetimeScope ::@expr1073744508 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744509 ) ||@expr1073744510 isUninitValue (@expr1073744511 ) ||@expr1073744512 isLifetimeValue (@expr1073744513 ) ;
318: }
319:
320:
321: Bound bound@var975 ;
322:
323:
324: long long intvalue@var976 ;
325:
326:
327: const Token * tokvalue@var977 ;
328:
329:
330: double floatValue@var978 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var979 ;
334:
335:
336: long long varvalue@var980 ;
337:
338:
339: const Token * condition@var981 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var982 ;
342:
343:
344: int varId@var983 ;
345:
346:
347: bool safe@var984 ;
348:
349:
350: bool conditional@var985 ;
351:
352:
353: bool macro@var986 ;
354:
355:
356: bool defaultArg@var987 ;
357:
358: int indirect@var988 ;
359:
360:
361: long long path@var989 ;
362:
363:
364: long long wideintvalue@var990 ;
365:
366: std :: vector < std :: string > subexpressions@var991 ;
367:
368:
369: const Token * capturetok@var992 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var993 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var994 ;
385:
386: static const char * toString ( MoveKind moveKind@var995 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var996 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var997 ) ;
389: static const char * toString ( Bound bound@var998 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var999 ;
402:
403: void setKnown ( ) {
404: valueKind@var999 =@expr1073744514 ValueKind ::@expr1073744515 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var999 ==@expr1073744516 ValueKind ::@expr1073744517 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var999 =@expr1073744519 ValueKind ::@expr1073744520 Possible@expr1073744518 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var999 ==@expr1073744522 ValueKind ::@expr1073744523 Possible@expr1073744521 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var999 ==@expr1073744524 ValueKind ::@expr1073744525 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var999 =@expr1073744526 ValueKind ::@expr1073744527 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var1000 = true ) {
428: if (@expr1073744528 inconclusive@var1000 ) {
429: valueKind@var999 =@expr1073744529 ValueKind ::@expr1073744530 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var999 ==@expr1073744531 ValueKind ::@expr1073744532 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744534 isKnown (@expr1073744535 ) ) {
438: valueKind@var999 =@expr1073744536 ValueKind ::@expr1073744537 Possible@expr1073744533 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744538 condition@var981 &&@expr1073744539 !@expr1073744540 defaultArg@var987 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var1001 , const Token * tok2@var1002 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var1003 , const Settings * settings@var1004 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var1005 , SymbolDatabase * symboldatabase@var1006 , ErrorLogger * errorLogger@var1007 , const Settings * settings@var1008 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var1009 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var1010 , const Settings * settings@var1011 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var1012 ,
459: const Settings * settings@var1013 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var1014 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var1015 , const Token * indexTok@var1016 , bool possible@var1017 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var1018 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var1019 , const Settings * settings@var1020 = nullptr , int depth@var1021 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var1022 ;
471: bool addressOf@var1023 ;
472: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1024 ;
473: bool inconclusive@var1025 ;
474:
475: LifetimeToken ( ) : token@var1022 ( nullptr ) , addressOf@var1023 ( false ) , errorPath@var1024 ( ) , inconclusive@var1025 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var1026 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var1027 )
478: : token@var1022 ( token@var1026 ) , addressOf@var1023 ( false ) , errorPath@var1024 ( std :: move ( errorPath@var1027 ) ) , inconclusive@var1025 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var1028 , bool addressOf@var1029 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var1030 )
482: : token@var1022 ( token@var1028 ) , addressOf@var1023 ( addressOf@var1029 ) , errorPath@var1024 ( std :: move ( errorPath@var1030 ) ) , inconclusive@var1025 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var1031 , bool b@var1032 ) {
486: for (@expr1073744541 LifetimeToken &@expr1073744542 x@var1033 :@expr1073744543 v@var1031 ) {
487: x@var1033 .@expr1073744544 addressOf@var1034 =@expr1073744545 b@var1032 ; }
488: return v@var1031 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var1035 , bool b@var1036 ) {
492: for (@expr1073744546 LifetimeToken &@expr1073744547 x@var1037 :@expr1073744548 v@var1035 ) {
493: x@var1037 .@expr1073744549 inconclusive@var1038 =@expr1073744550 b@var1036 ; }
494: return v@var1035 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var1039 , ValueFlow :: Value & true_value@var1040 , ValueFlow :: Value & false_value@var1041 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var1042 ) ;
499: const Token * parseCompareInt ( const Token * tok@var1043 , ValueFlow :: Value & true_value@var1044 , ValueFlow :: Value & false_value@var1045 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var1046 , long long val@var1047 , const Token * varTok@var1048 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var1049 , const Token * varTok@var1050 , long long val@var1051 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var1052 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var1053 ,
508: ValueFlow :: Value & value@var1054 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var1055 ,
511: bool escape@var1056 = false ,
512: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1057 = std :: list < std :: pair < const Token * , std :: string > > { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var1058 , const Token * lifetime@var1059 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var1060 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1061 , bool * addressOf@var1062 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var1063 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var1064 , const Settings * settings@var1065 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var1066 , const ValueFlow :: Value * val@var1067 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var1068 , const ValueFlow :: Value * val@var1069 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1070 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var1071 , bool inconclusive@var1072 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var1073 ,
529: bool inconclusive@var1074 = false ,
530: long long path@var1075 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var1076 , const Scope * defaultScope@var1077 = nullptr , bool smallest@var1078 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var1079 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var1080 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var1081 ;
69: std :: string mScope@var1082 ;
70: std :: string mName@var1083 ;
71: std :: string mFullName@var1084 ;
72: const Token * mNameToken@var1085 ;
73: const Token * mParamEnd@var1086 ;
74: unsigned int mFlags@var1087 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var1088 ) {
90: setFlag (@expr1073744551 fIsClass , state@var1088 ) ;
91: }
92: void isFunction ( bool state@var1089 ) {
93: setFlag (@expr1073744552 fIsFunction , state@var1089 ) ;
94: }
95: void isVariable ( bool state@var1090 ) {
96: setFlag (@expr1073744553 fIsVariable , state@var1090 ) ;
97: }
98: void isAlias ( bool state@var1091 ) {
99: setFlag (@expr1073744554 fIsAlias , state@var1091 ) ;
100: }
101: void isSpecialization ( bool state@var1092 ) {
102: setFlag (@expr1073744555 fIsSpecialization , state@var1092 ) ;
103: }
104: void isPartialSpecialization ( bool state@var1093 ) {
105: setFlag (@expr1073744556 fIsPartialSpecialization , state@var1093 ) ;
106: }
107: void isForwardDeclaration ( bool state@var1094 ) {
108: setFlag (@expr1073744557 fIsForwardDeclaration , state@var1094 ) ;
109: }
110: void isVariadic ( bool state@var1095 ) {
111: setFlag (@expr1073744558 fIsVariadic , state@var1095 ) ;
112: }
113: void isFriend ( bool state@var1096 ) {
114: setFlag (@expr1073744559 fIsFriend , state@var1096 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var1097 ) const {
123: return (@expr2736 (@expr2736 mFlags@var1087 &@expr1073744562 flag@var1097 ) !=@expr1073744563 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var1098 , bool state@var1099 ) {
132: mFlags@var1087 =@expr1073744564 state@var1099 ?@expr1073744565 mFlags@var1087 |@expr1073744566 flag@var1098 :@expr1073744567 mFlags@var1087 &@expr1073744568 ~@expr1073744569 flag@var1098 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var1100 , const std :: string & scope@var1101 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var1102 , const std :: string & scope@var1103 , const Token * nameToken@var1104 , const Token * paramEnd@var1105 ) ;
150: TokenAndName ( const TokenAndName & other@var1106 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var1107 ) const {
154: return mToken@var1081 ==@expr1073744570 rhs@var1107 .@expr1073744571 mToken@var1108 &&@expr1073744572 mScope@var1082 ==@expr1073744573 rhs@var1107 .@expr1073744574 mScope@var1109 &&@expr1073744575 mName@var1083 ==@expr1073744576 rhs@var1107 .@expr1073744577 mName@var1110 &&@expr1073744578 mFullName@var1084 ==@expr1073744579 rhs@var1107 .@expr1073744580 mFullName@var1111 &&@expr1073744581
155: mNameToken@var1085 ==@expr1073744582 rhs@var1107 .@expr1073744583 mNameToken@var1112 &&@expr1073744584 mParamEnd@var1086 ==@expr1073744585 rhs@var1107 .@expr1073744586 mParamEnd@var1113 &&@expr1073744587 mFlags@var1087 ==@expr1073744588 rhs@var1107 .@expr1073744589 mFlags@var1114 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var1081 ;
160: }
161: void token ( Token * token@var1115 ) {
162: mToken@var1081 =@expr1073744590 token@var1115 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var1082 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var1083 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var1084 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var1085 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var1086 ;
178: }
179: void paramEnd ( const Token * end@var1116 ) {
180: mParamEnd@var1086 =@expr1073744591 end@var1116 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744592 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744593 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744594 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744595 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744596 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744597 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744598 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744599 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744600 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var1117 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var1118 ) const {
243:
244:
245: return (@expr2777 (@expr2777 mFlags@var1087 &@expr1073744603 fFamilyMask ) &@expr1073744604 (@expr2777 decl@var1118 .@expr1073744606 mFlags@var1119 &@expr1073744607 fFamilyMask ) ) !=@expr1073744608 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var1120 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var1121 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var1122 , const unsigned long numberOfArguments@var1123 , bool variadic@var1124 , const char patternAfter@var1125 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var1126 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var1127 , int & namepos@var1128 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1129 , int & namepos@var1130 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1131 , int & namepos@var1132 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1133 ,
306: bool & codeWithTemplates@var1134 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1135 , bool isTemplate@var1136 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1137 = nullptr , Token * backToken@var1138 = nullptr , bool isTemplate@var1139 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1140 , Token * end@var1141 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1142 , const std :: string & scope@var1143 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1144 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1145 ,
393: const std :: list < const Token * > & specializations@var1146 ,
394: const std :: time_t maxtime@var1147 ,
395: std :: set < std :: string > & expandedtemplates@var1148 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1149 , const Token * tok@var1150 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1151 , const Token * tok@var1152 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1153 ,
422: const TokenAndName & templateInstantiation@var1154 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1155 ,
424: const std :: string & newName@var1156 ,
425: bool copy@var1157 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1158 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1159 ,
435: const std :: string & newName@var1160 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1161 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1162 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1163 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1164 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1165 ,
458: const Token * templateInstantiationNameToken@var1166 ,
459: const std :: list < const Token * > & specializations@var1167 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1168 , const Token * end@var1169 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1170 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1171 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1172 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1173 ,
487: const std :: string & indent@var1174 = "    " ) const ;
488: void printOut ( const std :: string & text@var1175 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1176 ;
491: TokenList & mTokenList@var1177 ;
492: const Settings * mSettings@var1178 ;
493: ErrorLogger * mErrorLogger@var1179 ;
494: bool mChanged@var1180 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1181 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1182 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1183 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1184 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1185 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1186 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1187 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1188 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1189 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1190 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1191 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1192 ;
57: Token * back@var1193 ;
58: const TokenList * list@var1194 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1195 , const Token * bodyEnd_@var1196 , const std :: set < std :: string > & usingNamespaces_@var1197 = std :: set < std :: string > ( ) ) : name@var1198 ( name_@var1195 ) , bodyEnd@var1199 ( bodyEnd_@var1196 ) , usingNamespaces@var1200 ( usingNamespaces_@var1197 ) { }
63: std :: string name@var1198 ;
64: const Token * const bodyEnd@var1199 ;
65: std :: set < std :: string > usingNamespaces@var1200 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1201 ;
70: int mFileIndex@var1202 ;
71: int mLineNumber@var1203 ;
72: int mColumn@var1204 ;
73: int mExprId@var1205 ;
74:
75:
76: Token * mAstOperand1@var1206 ;
77: Token * mAstOperand2@var1207 ;
78: Token * mAstParent@var1208 ;
79:
80:
81: const Scope * mScope@var1209 ;
82: union {
83: const Function * mFunction@var1210 ;
84: const Variable * mVariable@var1211 ;
85: const :: Type * mType@var1212 ;
86: const Enumerator * mEnumerator@var1213 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1214 ;
94:
|
97:
98: int mIndex@var1215 ;
99:
100:
101: std :: string * mOriginalName@var1216 ;
102:
103:
104: ValueType * mValueType@var1217 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1218 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1219 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1220 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1221 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1222 ;
119: long long value@var1223 ;
120: struct CppcheckAttributes * next@var1224 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1225 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1226 ;
126:
127:
128: unsigned char mBits@var1227 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1228 , long long value@var1229 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1230 , long long * value@var1231 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1201 ( 0 )
135: , mFileIndex@var1202 ( 0 )
136: , mLineNumber@var1203 ( 0 )
137: , mColumn@var1204 ( 0 )
138: , mExprId@var1205 ( 0 )
139: , mAstOperand1@var1206 ( nullptr )
140: , mAstOperand2@var1207 ( nullptr )
141: , mAstParent@var1208 ( nullptr )
142: , mScope@var1209 ( nullptr )
143: , mFunction@var1210 ( nullptr )
144: , mProgressValue@var1214 ( 0 )
145: , mIndex@var1215 ( 0 )
146: , mOriginalName@var1216 ( nullptr )
147: , mValueType@var1217 ( nullptr )
148: , mValues@var1218 ( nullptr )
149: , mTemplateSimplifierPointers@var1220 ( nullptr )
150: , mScopeInfo@var1221 ( nullptr )
151: , mCppcheckAttributes@var1225 ( nullptr )
152: , mCpp11init@var1226 ( Cpp11init :: UNKNOWN )
153: , mBits@var1227 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1232 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1233 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1234 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1235 ) {
199: mStr@var1447 =@expr1073744609 s@var1235 ;
200: mImpl@var1453 .@expr1073744610 mVarId@var1484 =@expr1073744611 0 ;
201:
202: update_property_info (@expr1073744612 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1236 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1447 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1237 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1238 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1239 ) const ;
236: Token * tokAt ( int index@var1240 ) {
237: return const_cast < Token *@expr2789 > (@expr1073744614 const_cast < const Token *@expr2789 > (@expr1073744616 this@expr1073744617 ) .@expr1073744618 tokAt (@expr1073744619 index@var1240 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1241 ) const ;
245: Token * linkAt ( int index@var1242 ) {
246: return const_cast < Token *@expr2796 > (@expr1073744621 const_cast < const Token *@expr2796 > (@expr1073744623 this@expr1073744624 ) .@expr1073744625 linkAt (@expr1073744626 index@var1242 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1243 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1244 , const char ( & pattern@var1245 ) [ count ] ) {
276: return simpleMatch (@expr1073744628 tok@var1244 , pattern@var1245 , count@expr1073744627 -@expr1073744629 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1246 , const char pattern@var1247 [ ] , unsigned long pattern_len@var1248 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1249 , const char pattern@var1250 [ ] , int varid@var1251 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1252 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1253 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1254 , const Settings * const settings@var1255 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1256 , long long index@var1257 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1453 .@expr1073744630 mValueType@var1485 ;
366: }
367: void setValueType ( ValueType * vt@var1258 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1259 ; top@var1259 =@expr1073744631 this@expr1073744632 ;
371: while (@expr1073744633 top@var1259 &&@expr1073744634 !@expr1073744635 Token ::@expr1073744636 Match (@expr1073744637 top@var1259 .@expr2814 astParent (@expr2815 ) , ",|(" ) ) {
372: top@var1259 =@expr1073744640 top@var1259 .@expr2814 astParent (@expr2815 ) ; }
373: return top@var1259 ?@expr1073744643 top@var1259 .@expr1073744644 mImpl@var1260 .@expr1073744645 mValueType@var1261 :@expr1073744646 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1451 ;
378: }
379: void tokType ( Token :: Type t@var1262 ) {
380: mTokType@var1451 =@expr1073744647 t@var1262 ;
381:
382: const bool memoizedIsName@var1263 =@expr1073744648 mTokType@var1451 ==@expr1073744649 eName ||@expr1073744650 mTokType@var1451 ==@expr1073744651 eType ||@expr1073744652 mTokType@var1451 ==@expr1073744653 eVariable ||@expr1073744654
383: mTokType@var1451 ==@expr1073744655 eFunction ||@expr1073744656 mTokType@var1451 ==@expr1073744657 eKeyword ||@expr1073744658 mTokType@var1451 ==@expr2835 eBoolean ||@expr1073744660
384: mTokType@var1451 ==@expr2837 eEnumerator ;
385: setFlag (@expr1073744662 fIsName , memoizedIsName@var1263 ) ;
386:
387: const bool memoizedIsLiteral@var1264 =@expr1073744663 mTokType@var1451 ==@expr1073744664 eNumber ||@expr1073744665 mTokType@var1451 ==@expr1073744666 eString ||@expr1073744667 mTokType@var1451 ==@expr1073744668 eChar ||@expr1073744669
388: mTokType@var1451 ==@expr2835 eBoolean ||@expr1073744671 mTokType@var1451 ==@expr1073744672 eLiteral ||@expr1073744673 mTokType@var1451 ==@expr2837 eEnumerator ;
389: setFlag (@expr1073744675 fIsLiteral , memoizedIsLiteral@var1264 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1451 ==@expr1073744676 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073744677 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1452 ==@expr1073744678 fIsName &&@expr1073744679 mTokType@var1451 ==@expr1073744680 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073744681 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1451 ==@expr1073744682 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1451 ==@expr1073744683 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073744684 isConstOp (@expr1073744685 ) ||@expr1073744686
412: isAssignmentOp (@expr1073744687 ) ||@expr1073744688
413: mTokType@var1451 ==@expr1073744689 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073744690 isArithmeticalOp (@expr1073744691 ) ||@expr1073744692
417: mTokType@var1451 ==@expr1073744693 eLogicalOp ||@expr1073744694
418: mTokType@var1451 ==@expr1073744695 eComparisonOp ||@expr1073744696
419: mTokType@var1451 ==@expr1073744697 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073744698 ) ||@expr1073744699
423: mTokType@var1451 ==@expr1073744700 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1451 ==@expr1073744701 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1451 ==@expr1073744702 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1451 ==@expr1073744703 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1451 ==@expr1073744704 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1451 ==@expr1073744705 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073744706 ) !=@expr1073744707 nullptr &&@expr1073744708 astOperand2 (@expr1073744709 ) !=@expr1073744710 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1265 ) const {
444: return s@var1265 ==@expr1073744711 mStr@var1447 &&@expr1073744712 astOperand1 (@expr1073744713 ) !=@expr1073744714 nullptr &&@expr1073744715 astOperand2 (@expr1073744716 ) ==@expr1073744717 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1452 ;
450: }
451: void flags ( const unsigned int flags_@var1266 ) {
452: mFlags@var1452 =@expr1073744718 flags_@var1266 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073744719 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1267 ) {
458: setFlag (@expr1073744720 fIsUnsigned , sign@var1267 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073744721 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1268 ) {
464: setFlag (@expr1073744722 fIsSigned , sign@var1268 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073744723 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1269 ) {
470: setFlag (@expr1073744724 fIsPointerCompare , b@var1269 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073744725 fIsLong ) ;
474: }
475: void isLong ( bool size@var1270 ) {
476: setFlag (@expr1073744726 fIsLong , size@var1270 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073744727 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1271 ) {
482: setFlag (@expr1073744728 fIsStandardType , b@var1271 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073744729 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1272 ) {
488: setFlag (@expr1073744730 fIsExpandedMacro , m@var1272 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073744731 fIsCast ) ;
492: }
493: void isCast ( bool c@var1273 ) {
494: setFlag (@expr1073744732 fIsCast , c@var1273 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073744733 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1274 ) {
500: setFlag (@expr1073744734 fIsAttributeConstructor , ac@var1274 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073744735 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1275 ) {
506: setFlag (@expr1073744736 fIsAttributeDestructor , value@var1275 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073744737 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1276 ) {
512: setFlag (@expr1073744738 fIsAttributeUnused , unused@var1276 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073744739 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1277 ) {
518: setFlag (@expr1073744740 fIsAttributeUsed , unused@var1277 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073744741 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1278 ) {
524: setFlag (@expr1073744742 fIsAttributePure , value@var1278 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073744743 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1279 ) {
530: setFlag (@expr1073744744 fIsAttributeConst , value@var1279 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073744745 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1280 ) {
536: setFlag (@expr1073744746 fIsAttributeNoreturn , value@var1280 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073744747 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1281 ) {
542: setFlag (@expr1073744748 fIsAttributeNothrow , value@var1281 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073744749 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1282 ) {
548: setFlag (@expr1073744750 fIsAttributePacked , value@var1282 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073744751 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1283 ) {
554: setFlag (@expr1073744752 fIsAttributeNodiscard , value@var1283 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073744753 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1284 ) {
560: setFlag (@expr1073744754 fIsAttributeMaybeUnused , value@var1284 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1285 , long long value@var1286 ) {
563: mImpl@var1453 .@expr1073744755 setCppcheckAttribute (@expr1073744756 type@var1285 , value@var1286 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1287 , long long * value@var1288 ) const {
566: return mImpl@var1453 .@expr1073744757 getCppcheckAttribute (@expr1073744758 type@var1287 , value@var1288 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073744759 mImpl@var1453 .@expr1073744760 mCppcheckAttributes@var1486 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073744761 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073744762 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1289 ) {
578: setFlag (@expr1073744763 fIsOperatorKeyword , value@var1289 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073744764 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1290 ) {
584: setFlag (@expr1073744765 fIsComplex , value@var1290 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073744766 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1291 ) {
590: setFlag (@expr1073744767 fIsEnumType , value@var1291 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073744768 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1292 ) {
596: setFlag (@expr1073744769 fAtAddress , b@var1292 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073744770 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1293 ) {
602: setFlag (@expr1073744771 fIncompleteVar , b@var1293 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073744772 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1294 ) {
609: setFlag (@expr1073744773 fIsIncompleteConstant , b@var1294 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073744774 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1295 ) {
616: setFlag (@expr1073744775 fConstexpr , b@var1295 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073744776 fExternC ) ;
621: }
622: void isExternC ( bool b@var1296 ) {
623: setFlag (@expr1073744777 fExternC , b@var1296 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073744778 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1297 ) {
630: setFlag (@expr1073744779 fIsSplitVarDeclComma , b@var1297 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073744780 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1298 ) {
637: setFlag (@expr1073744781 fIsSplitVarDeclEq , b@var1298 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073744782 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1299 ) {
644: setFlag (@expr1073744783 fIsImplicitInt , b@var1299 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073744784 fIsInline ) ;
649: }
650: void isInline ( bool b@var1300 ) {
651: setFlag (@expr1073744785 fIsInline , b@var1300 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073744786 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1301 ) {
658: setFlag (@expr1073744787 fIsRemovedVoidParameter , b@var1301 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073744788 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1302 ) {
665: setFlag (@expr1073744789 fIsTemplate , b@var1302 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073744790 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1303 ) {
672: setFlag (@expr1073744791 fIsSimplifedScope , b@var1303 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1453 .@expr1073744792 mBits@var1487 >@expr1073744793 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1453 .@expr1073744794 mBits@var1487 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1453 .@expr1073744795 mTemplateSimplifierPointers@var1488 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1304 ) {
685: if (@expr1073744796 !@expr1073744797 mImpl@var1453 .@expr2974 mTemplateSimplifierPointers@var1488 ) {
686: mImpl@var1453 .@expr2974 mTemplateSimplifierPointers@var1488 =@expr1073744800 new std ::@expr1073744801 set < TemplateSimplifier ::@expr1073744802 TokenAndName *@expr1073744803 > ; }
687: mImpl@var1453 .@expr2974 mTemplateSimplifierPointers@var1488 .@expr1073744805 insert (@expr1073744806 tokenAndName@var1304 ) ;
688: }
689: void setBits ( const unsigned char b@var1305 ) {
690: mImpl@var1453 .@expr1073744807 mBits@var1487 =@expr1073744808 b@var1305 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr2985 (@expr2985 (@expr2985 mTokType@var1451 ==@expr1073744812 eString ) &&@expr1073744813 isPrefixStringCharLiteral (@expr1073744814 mStr@var1447 , '"' , "u8" ) ) ||@expr1073744815
695: (@expr2985 (@expr2985 mTokType@var1451 ==@expr1073744818 eChar ) &&@expr1073744819 isPrefixStringCharLiteral (@expr1073744820 mStr@var1447 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr2997 (@expr2997 (@expr2997 mTokType@var1451 ==@expr1073744824 eString ) &&@expr1073744825 isPrefixStringCharLiteral (@expr1073744826 mStr@var1447 , '"' , "u" ) ) ||@expr1073744827
700: (@expr2997 (@expr2997 mTokType@var1451 ==@expr1073744830 eChar ) &&@expr1073744831 isPrefixStringCharLiteral (@expr1073744832 mStr@var1447 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3009 (@expr3009 (@expr3009 mTokType@var1451 ==@expr1073744836 eString ) &&@expr1073744837 isPrefixStringCharLiteral (@expr1073744838 mStr@var1447 , '"' , "U" ) ) ||@expr1073744839
705: (@expr3009 (@expr3009 mTokType@var1451 ==@expr1073744842 eChar ) &&@expr1073744843 isPrefixStringCharLiteral (@expr1073744844 mStr@var1447 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3021 (@expr3021 (@expr3021 mTokType@var1451 ==@expr1073744848 eString ) &&@expr1073744849 isPrefixStringCharLiteral (@expr1073744850 mStr@var1447 , '"' , "" ) ) ||@expr1073744851
710: (@expr3021 (@expr3021 mTokType@var1451 ==@expr1073744854 eChar ) &&@expr1073744855 isPrefixStringCharLiteral (@expr1073744856 mStr@var1447 , '\'' , "" ) &&@expr1073744857 mStr@var1447 .@expr1073744858 length (@expr1073744859 ) ==@expr1073744860 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3037 (@expr3037 (@expr3037 mTokType@var1451 ==@expr1073744864 eChar ) &&@expr1073744865 isPrefixStringCharLiteral (@expr1073744866 mStr@var1447 , '\'' , "" ) ) &&@expr1073744867
715: (@expr3037 mStr@var1447 .@expr1073744869 length (@expr1073744870 ) >@expr1073744871 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073744872 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1306 ) {
738: setFlag (@expr1073744873 fIsTemplateArg , value@var1306 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1307 , const char ( & pattern@var1308 ) [ count ] ) {
743: return findsimplematch (@expr1073744875 startTok@var1307 , pattern@var1308 , count@expr1073744874 -@expr1073744876 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1309 , const char pattern@var1310 [ ] , unsigned long pattern_len@var1311 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1312 , const char ( & pattern@var1313 ) [ count ] , const Token * const end@var1314 ) {
749: return findsimplematch (@expr1073744878 startTok@var1312 , pattern@var1313 , count@expr1073744877 -@expr1073744879 1 , end@var1314 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1315 , const char pattern@var1316 [ ] , unsigned long pattern_len@var1317 , const Token * const end@var1318 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1319 , const char pattern@var1320 [ ] , const int varId@var1321 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1322 , const char pattern@var1323 [ ] , const Token * const end@var1324 , const int varId@var1325 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1326 , const char ( & pattern@var1327 ) [ count ] ) {
758: return findsimplematch (@expr1073744881 startTok@var1326 , pattern@var1327 , count@expr1073744880 -@expr1073744882 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1328 , const char pattern@var1329 [ ] , unsigned long pattern_len@var1330 ) {
761: return const_cast < Token *@expr3059 > (@expr1073744884 findsimplematch (@expr1073744885 const_cast < const Token *@expr3059 > (@expr1073744887 startTok@var1328 ) , pattern@var1329 , pattern_len@var1330 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1331 , const char ( & pattern@var1332 ) [ count ] , const Token * const end@var1333 ) {
765: return findsimplematch (@expr1073744889 startTok@var1331 , pattern@var1332 , count@expr1073744888 -@expr1073744890 1 , end@var1333 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1334 , const char pattern@var1335 [ ] , unsigned long pattern_len@var1336 , const Token * const end@var1337 ) {
768: return const_cast < Token *@expr3067 > (@expr1073744892 findsimplematch (@expr1073744893 const_cast < const Token *@expr3067 > (@expr1073744895 startTok@var1334 ) , pattern@var1335 , pattern_len@var1336 , end@var1337 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1338 , const char pattern@var1339 [ ] , const int varId@var1340 = 0 ) {
772: return const_cast < Token *@expr3072 > (@expr1073744897 findmatch (@expr1073744898 const_cast < const Token *@expr3072 > (@expr1073744900 startTok@var1338 ) , pattern@var1339 , varId@var1340 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1341 , const char pattern@var1342 [ ] , const Token * const end@var1343 , const int varId@var1344 = 0 ) {
775: return const_cast < Token *@expr3077 > (@expr1073744902 findmatch (@expr1073744903 const_cast < const Token *@expr3077 > (@expr1073744905 startTok@var1341 ) , pattern@var1342 , end@var1343 , varId@var1344 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1345 , const char * haystack@var1346 , int varid@var1347 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1453 .@expr1073744906 mFileIndex@var1489 ;
796: }
797: void fileIndex ( int indexOfFile@var1348 ) {
798: mImpl@var1453 .@expr1073744907 mFileIndex@var1489 =@expr1073744908 indexOfFile@var1348 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1453 .@expr1073744909 mLineNumber@var1490 ;
803: }
804: void linenr ( int lineNumber@var1349 ) {
805: mImpl@var1453 .@expr1073744910 mLineNumber@var1490 =@expr1073744911 lineNumber@var1349 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1453 .@expr1073744912 mColumn@var1491 ;
810: }
811: void column ( int c@var1350 ) {
812: mImpl@var1453 .@expr1073744913 mColumn@var1491 =@expr1073744914 c@var1350 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1448 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1351 , const Token * end@var1352 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1353 , const std :: string & originalNameStr@var1354 = emptyString@var1 , bool prepend@var1355 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1356 , const std :: string & originalNameStr@var1357 = emptyString@var1 )
840: {
841: return insertToken (@expr1073744915 tokenStr@var1356 , originalNameStr@var1357 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1449 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1453 .@expr1073744916 mVarId@var1484 ;
851: }
852: void varId ( int id@var1358 ) {
853: mImpl@var1453 .@expr1073744917 mVarId@var1484 =@expr1073744918 id@var1358 ;
854: if (@expr1073744919 id@var1358 !=@expr1073744920 0 ) {
855: tokType (@expr1073744921 eVariable ) ;
856: isStandardType (@expr1073744922 false ) ;
857: } else {
858: update_property_info (@expr1073744923 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073744924 mImpl@var1453 .@expr3101 mExprId@var1492 ) {
864: return mImpl@var1453 .@expr3101 mExprId@var1492 ; }
865: return mImpl@var1453 .@expr1073744927 mVarId@var1484 ;
866: }
867: void exprId ( int id@var1359 ) {
868: mImpl@var1453 .@expr1073744928 mExprId@var1492 =@expr1073744929 id@var1359 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1360 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1361 , const std :: vector < std :: string > & fileNames@var1362 ) const ;
888:
|
891:
892: void printLines ( int lines@var1363 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1364 , Token * start@var1365 , Token * end@var1366 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1367 ; varid@var1367 = false ;
905: bool exprid@var1368 ; exprid@var1368 = false ;
906: bool idtype@var1369 ; idtype@var1369 = false ;
907: bool attributes@var1370 ; attributes@var1370 = false ;
908: bool macro@var1371 ; macro@var1371 = false ;
909: bool linenumbers@var1372 ; linenumbers@var1372 = false ;
910: bool linebreaks@var1373 ; linebreaks@var1373 = false ;
911: bool files@var1374 ; files@var1374 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1375 ;
914: options@var1375 .@expr1073744930 attributes@var1376 =@expr1073744931 true ;
915: options@var1375 .@expr1073744932 macro@var1377 =@expr1073744933 true ;
916: options@var1375 .@expr1073744934 linenumbers@var1378 =@expr1073744935 true ;
917: options@var1375 .@expr1073744936 linebreaks@var1379 =@expr1073744937 true ;
918: options@var1375 .@expr1073744938 files@var1380 =@expr1073744939 true ;
919: return options@var1375 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1381 ; options@var1381 =@expr1073744940 forDebug (@expr1073744941 ) ;
923: options@var1381 .@expr1073744942 varid@var1382 =@expr1073744943 true ;
924: return options@var1381 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1383 ; options@var1383 =@expr1073744944 forDebug (@expr1073744945 ) ;
928: options@var1383 .@expr1073744946 exprid@var1384 =@expr1073744947 true ;
929: return options@var1383 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1385 ; options@var1385 =@expr1073744948 forDebug (@expr1073744949 ) ;
933: options@var1385 .@expr1073744950 exprid@var1386 =@expr1073744951 true ;
934: options@var1385 .@expr1073744952 varid@var1387 =@expr1073744953 true ;
935: options@var1385 .@expr1073744954 idtype@var1388 =@expr1073744955 true ;
936: return options@var1385 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1389 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1390 , bool attributes@var1391 , bool macro@var1392 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1393 , const std :: vector < std :: string > * fileNames@var1394 = nullptr , const Token * end@var1395 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1396 , bool attributes@var1397 = true ) const ;
952: std :: string stringifyList ( bool varid@var1398 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1399 , bool attributes@var1400 , bool linenumbers@var1401 , bool linebreaks@var1402 , bool files@var1403 , const std :: vector < std :: string > * fileNames@var1404 = nullptr , const Token * end@var1405 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1406 ) {
983: mLink@var1450 =@expr1073744956 linkToToken@var1406 ;
984: if (@expr1073744957 mStr@var1447 ==@expr1073744958 "<" ||@expr1073744959 mStr@var1447 ==@expr1073744960 ">" ) {
985: update_property_info (@expr1073744961 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1450 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1407 ) {
1006: mImpl@var1453 .@expr1073744962 mScope@var1493 =@expr1073744963 s@var1407 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1453 .@expr1073744964 mScope@var1493 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1408 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1451 ==@expr1073744965 eFunction ||@expr1073744966 mTokType@var1451 ==@expr1073744967 eLambda ?@expr1073744968 mImpl@var1453 .@expr1073744969 mFunction@var1494 :@expr1073744970 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1409 ) {
1034: mImpl@var1453 .@expr1073744971 mVariable@var1495 =@expr1073744972 v@var1409 ;
1035: if (@expr1073744973 v@var1409 ||@expr1073744974 mImpl@var1453 .@expr1073744975 mVarId@var1484 ) {
1036: tokType (@expr1073744976 eVariable ) ; }
1037: else { if (@expr1073744977 mTokType@var1451 ==@expr1073744978 eVariable ) {
1038: tokType (@expr1073744979 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1451 ==@expr1073744980 eVariable ?@expr1073744981 mImpl@var1453 .@expr1073744982 mVariable@var1495 :@expr1073744983 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1410 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1451 ==@expr1073744984 eType ?@expr1073744985 mImpl@var1453 .@expr1073744986 mType@var1496 :@expr1073744987 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1411 , const Token * * typeTok@var1412 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1413 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1414 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1451 ==@expr1073744988 eEnumerator ?@expr1073744989 mImpl@var1453 .@expr1073744990 mEnumerator@var1497 :@expr1073744991 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1415 ) {
1079: mImpl@var1453 .@expr1073744992 mEnumerator@var1497 =@expr1073744993 e@var1415 ;
1080: if (@expr1073744994 e@var1415 ) {
1081: tokType (@expr1073744995 eEnumerator ) ; }
1082: else { if (@expr1073744996 mTokType@var1451 ==@expr1073744997 eEnumerator ) {
1083: tokType (@expr1073744998 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1416 , Token * end@var1417 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1418 , Token * srcEnd@var1419 , Token * newLocation@var1420 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1453 .@expr1073744999 mProgressValue@var1498 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1421 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1453 .@expr3176 mOriginalName@var1499 ?@expr1073745001 *@expr1073745002 mImpl@var1453 .@expr3176 mOriginalName@var1499 :@expr1073745004 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1453 .@expr3181 mValues@var1472 ?@expr1073745006 *@expr1073745007 mImpl@var1453 .@expr3181 mValues@var1472 :@expr1073745009 TokenImpl ::@expr1073745010 mEmptyValueList@var1219 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1422 ) {
1164: if (@expr1073745011 !@expr1073745012 mImpl@var1453 .@expr3189 mOriginalName@var1499 ) {
1165: mImpl@var1453 .@expr3189 mOriginalName@var1499 =@expr1073745015 new std ::@expr1073745016 string (@expr1073745017 name@var1422 ) ; }
1166: else {
1167: *@expr1073745018 mImpl@var1453 .@expr3189 mOriginalName@var1499 =@expr1073745020 name@var1422 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1423 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1424 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1425 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1453 .@expr1073745022 mValues@var1472 .@expr1073745023 front (@expr1073745024 ) .@expr1073745025 intvalue@expr1073745021 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1426 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1427 , long long path@var1428 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1429 , const Settings * settings@var1430 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1431 , const Settings * settings@var1432 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1433 , int argnr@var1434 , const Settings * settings@var1435 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1436 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1437 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1438 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1439 ) {
1200: if (@expr1073745026 mImpl@var1453 .@expr3203 mValues@var1472 ) {
1201: mImpl@var1453 .@expr3203 mValues@var1472 .@expr1073745029 remove_if (@expr1073745030 pred@var1439 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1453 .@expr1073745031 mIndex@var1500 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1440 ) {
1213: mNext@var1448 =@expr1073745032 nextToken@var1440 ;
1214: }
1215: void previous ( Token * previousToken@var1441 ) {
1216: mPrevious@var1449 =@expr1073745033 previousToken@var1441 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1442 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1443 , const char * word@var1444 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1445 , char c@var1446 ) ;
1235:
1236: std :: string mStr@var1447 ;
1237:
1238: Token * mNext@var1448 ;
1239: Token * mPrevious@var1449 ;
1240: Token * mLink@var1450 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1451 ;
1283:
1284: uint64_t mFlags@var1452 ;
1285:
1286: TokenImpl * mImpl@var1453 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1454 ) const {
1294: return (@expr3210 (@expr3210 mFlags@var1452 &@expr1073745036 flag_@var1454 ) !=@expr1073745037 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1455 , bool state_@var1456 ) {
1303: mFlags@var1452 =@expr1073745038 state_@var1456 ?@expr1073745039 mFlags@var1452 |@expr1073745040 flag_@var1455 :@expr1073745041 mFlags@var1452 &@expr1073745042 ~@expr1073745043 flag_@var1455 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1457 , const int indent1@var1458 = 0 , const int indent2@var1459 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1460 ) ;
1321: void astOperand2 ( Token * tok@var1461 ) ;
1322: void astParent ( Token * tok@var1462 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1453 .@expr1073745044 mAstOperand1@var1463 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1453 .@expr1073745045 mAstOperand1@var1463 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1453 .@expr1073745046 mAstOperand2@var1464 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1453 .@expr1073745047 mAstOperand2@var1464 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1453 .@expr1073745048 mAstParent@var1465 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1453 .@expr1073745049 mAstParent@var1465 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745050 !@expr1073745051 astParent (@expr3228 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745053 this@expr3230 ==@expr1073745055 astParent (@expr3228 ) .@expr3233 astOperand1 (@expr3234 ) ) {
1346: return astParent (@expr3228 ) .@expr3236 astOperand2 (@expr3237 ) ; }
1347: else { if (@expr1073745062 this@expr3230 ==@expr1073745063 astParent (@expr3228 ) .@expr3236 astOperand2 (@expr3237 ) ) {
1348: return astParent (@expr3228 ) .@expr3233 astOperand1 (@expr3234 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745070 !@expr1073745071 astParent (@expr3248 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745073 this@expr3250 ==@expr1073745075 astParent (@expr3248 ) .@expr3253 astOperand1 (@expr3254 ) ) {
1356: return astParent (@expr3248 ) .@expr3256 astOperand2 (@expr3257 ) ; }
1357: else { if (@expr1073745082 this@expr3250 ==@expr1073745083 astParent (@expr3248 ) .@expr3256 astOperand2 (@expr3257 ) ) {
1358: return astParent (@expr3248 ) .@expr3253 astOperand1 (@expr3254 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1466 ; ret@var1466 =@expr1073745090 this@expr1073745091 ;
1364: while (@expr1073745092 ret@var1466 .@expr3269 mImpl@var1467 .@expr3270 mAstParent@var1468 ) {
1365: ret@var1466 =@expr1073745095 ret@var1466 .@expr3269 mImpl@var1467 .@expr3270 mAstParent@var1468 ; }
1366: return ret@var1466 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1469 ; ret@var1469 =@expr1073745098 this@expr1073745099 ;
1371: while (@expr1073745100 ret@var1469 .@expr3277 mImpl@var1470 .@expr3278 mAstParent@var1471 ) {
1372: ret@var1469 =@expr1073745103 ret@var1469 .@expr3277 mImpl@var1470 .@expr3278 mAstParent@var1471 ; }
1373: return ret@var1469 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1453 .@expr1073745106 mAstOperand1@var1463 =@expr1073745107 mImpl@var1453 .@expr1073745108 mAstOperand2@var1464 =@expr1073745109 mImpl@var1453 .@expr1073745110 mAstParent@var1465 =@expr1073745111 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1453 .@expr3288 mValues@var1472 ;
1393: mImpl@var1453 .@expr3288 mValues@var1472 =@expr1073745114 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1473 = "" ) const {
1397: std ::@expr1073745115 string ret@var1474 ;
1398: if (@expr1073745116 mImpl@var1453 .@expr3293 mAstOperand1@var1463 ) {
1399: ret@var1474 =@expr1073745118 mImpl@var1453 .@expr3293 mAstOperand1@var1463 .@expr1073745120 astString (@expr1073745121 sep@var1473 ) ; }
1400: if (@expr1073745122 mImpl@var1453 .@expr3299 mAstOperand2@var1464 ) {
1401: ret@var1474 +=@expr1073745124 mImpl@var1453 .@expr3299 mAstOperand2@var1464 .@expr1073745126 astString (@expr1073745127 sep@var1473 ) ; }
1402: return ret@var1474 +@expr1073745128 sep@var1473 +@expr1073745129 mStr@var1447 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1475 , bool xml@var1476 , const std :: vector < std :: string > & fileNames@var1477 , std :: ostream & out@var1478 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1479 , std :: ostream & out@var1480 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1481 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1482 ) const {
1419: mImpl@var1453 .@expr1073745130 mCpp11init@var1483 =@expr1073745131 cpp11init@var1482 ?@expr1073745132 TokenImpl ::@expr3309 Cpp11init ::@expr1073745134 CPP11INIT :@expr1073745135 TokenImpl ::@expr3309 Cpp11init ::@expr1073745137 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1453 .@expr1073745138 mCpp11init@var1483 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1501 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1502 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1503 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1504 ) ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var1505 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var1506 ) {
47: mSettings@var1541 =@expr1073745139 settings@var1506 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var1541 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var1543 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var1544 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var1507 ) ;
72:
73: void addtoken ( const std :: string & str@var1508 , const int lineno@var1509 , const int column@var1510 , const int fileno@var1511 , bool split@var1512 = false ) ;
74: void addtoken ( const std :: string & str@var1513 , const Token * locationTok@var1514 ) ;
75:
76: void addtoken ( const Token * tok@var1515 , const int lineno@var1516 , const int column@var1517 , const int fileno@var1518 ) ;
77: void addtoken ( const Token * tok@var1519 , const Token * locationTok@var1520 ) ;
78: void addtoken ( const Token * tok@var1521 ) ;
79:
80: static void insertTokens ( Token * dest@var1522 , const Token * src@var1523 , int n@var1524 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var1525 , const Token * first@var1526 , const Token * last@var1527 , bool one_line@var1528 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var1529 , const std :: string & file0@var1530 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var1531 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var1532 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var1538 .@expr1073745140 front@var1545 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var1538 .@expr1073745141 front@var1545 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var1538 .@expr1073745142 back@var1546 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var1538 .@expr1073745143 back@var1546 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var1539 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var1533 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var1534 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var1535 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var1536 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var1537 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var1538 ;
206:
207:
208: std :: vector < std :: string > mFiles@var1539 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var1540 ;
212:
213:
214: const Settings * mSettings@var1541 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var1542 ;
217:
218:
219: bool mIsC@var1543 ;
220: bool mIsCpp@var1544 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var1547 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var1548 ;
67: mutable int mVarId@var1549 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var1550 ) ;
73: bool hasVariable ( const std :: string & varname@var1551 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var1552 ) const {
75: return mVariableId@var1547 .@expr1073745144 find (@expr1073745145 varname@var1552 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var1547 .@expr1073745146 end (@expr1073745147 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var1547 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745148 mVarId@var1549 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var1553 , ErrorLogger * errorLogger@var1554 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var1555 ) {
95: mTimerResults@var1675 =@expr1073745149 tr@var1555 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var1653 .@expr1073745150 isC (@expr1073745151 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var1653 .@expr1073745152 isCPP (@expr1073745153 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var1556 , bool * unknown@var1557 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var1558 , const std :: string & FileName@var1559 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var1560 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var1561 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var1562 ,
142: const char FileName@var1563 [ ] ,
143: const std :: string & configuration@var1564 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var1565 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var1566 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var1567 , const Token * end@var1568 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var1569 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var1570 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var1571 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var1572 , const Token * const tokEnd@var1573 , const bool only_k_r_fpar@var1574 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var1575 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var1576 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var1577 , bool commandWithCondition@var1578 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var1579 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var1580 , Token * * _tok2@var1581 , Token * * _tok3@var1582 , std :: string & value@var1583 , int & valueVarId@var1584 , bool & valueIsPointer@var1585 , bool floatvar@var1586 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var1587 , Token * tok3@var1588 , int varid@var1589 , const std :: string & structname@var1590 , std :: string & value@var1591 , int valueVarId@var1592 , bool valueIsPointer@var1593 , const Token * const valueToken@var1594 , int indentlevel@var1595 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var1596 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var1597 , const std :: string & endsWith@var1598 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var1599 , const std :: string & endsWith@var1600 , bool cpp@var1601 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var1602 ) {
585: mPreprocessor@var1676 =@expr1073745154 preprocessor@var1602 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var1676 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var1603 , const Token * end@var1604 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var1605 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var1606 , const std :: string & code@var1607 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var1608 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var1609 , const std :: string & what@var1610 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var1611 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var1612 , const std :: string & msg@var1613 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var1614 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var1615 , const std :: string & macroName@var1616 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var1617 , const Token * end@var1618 , bool allowSemicolon@var1619 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var1620 , const Severity :: SeverityType severity@var1621 , const std :: string & id@var1622 , const std :: string & msg@var1623 , bool inconclusive@var1624 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var1625 , Severity :: SeverityType severity@var1626 , const std :: string & id@var1627 , const std :: string & msg@var1628 , bool inconclusive@var1629 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var1630 , const Token * name@var1631 , const Token * typeDef@var1632 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var1633 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var1634 ,
821: const VariableMap & variableMap@var1635 ,
822: const int scopeStartVarId@var1636 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var1637 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var1638 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var1639 ,
827: int * varId@var1640 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var1641 ,
830: Token * const startToken@var1642 ,
831: const Token * const endToken@var1643 ,
832: const std :: map < std :: string , int > & varlist@var1644 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var1645 ,
834: int * varId_@var1646 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var1647 ) ;
849:
850: bool operatorEnd ( const Token * tok@var1648 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var1674 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var1649 ) {
861: mSettings@var1660 =@expr1073745155 settings@var1649 ;
862: list@var1653 .@expr1073745156 setSettings (@expr1073745157 settings@var1649 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var1662 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var1650 ) const ;
877:
878: void dump ( std :: ostream & out@var1651 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var1652 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var1672 ;
888: }
889:
|
892:
893: TokenList list@var1653 ;
894:
895: const Token * tokens ( ) const {
896: return list@var1653 .@expr1073745158 front (@expr1073745159 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var1654 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var1655 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var1656 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var1657 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var1660 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var1658 , bool inOperator@var1659 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745160 mVarId@var1672 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var1660 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var1661 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var1662 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var1663 ;
973:
974:
975:
976: std :: string mConfiguration@var1664 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var1665 ;
980:
981: struct TypedefInfo {
982: std :: string name@var1666 ;
983: std :: string filename@var1667 ;
984: int lineNumber@var1668 ;
985: int column@var1669 ;
986: bool used@var1670 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var1671 ;
989:
990:
991: int mVarId@var1672 ;
992:
993:
994: int mUnnamedCount@var1673 ;
995:
|
999:
1000: bool mCodeWithTemplates@var1674 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var1675 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var1676 ;
1013: } ;

##file cppcheck-2.8/lib/check.cpp

1:
|
33:
34: Check :: Check ( const std :: string & aname@var1677 )
35: : mTokenizer@var28 ( nullptr ) , mSettings@var29 ( nullptr ) , mErrorLogger@var30 ( nullptr ) , mName@var63 ( aname@var1677 )
36: {
37: for (@expr1073745161 std ::@expr3338 list < Check *@expr1073745163 > ::@expr3338 iterator i@var1678 =@expr1073745165 instances (@expr3342 ) .@expr1073745167 begin (@expr1073745168 ) ; i@var1678 !=@expr1073745169 instances (@expr3342 ) .@expr1073745171 end (@expr1073745172 ) ; ++@expr1073745173 i@var1678 ) {
38: if (@expr1073745174 (@expr1073745175 *@expr1073745176 i@var1678 ) .@expr1073745177 name (@expr1073745178 ) >@expr1073745179 aname@var1677 ) {
39: instances (@expr3342 ) .@expr1073745181 insert (@expr1073745182 i@var1678 , this@expr3359 ) ;
40: return ;
41: }
42: }
43: instances (@expr3342 ) .@expr1073745185 push_back (@expr1073745186 this@expr3359 ) ;
44: }
45:
46: void Check :: reportError ( const ErrorMessage & errmsg@var1679 )
47: {
48: std ::@expr1073745189 cout@expr1073745187 <<@expr1073745190 errmsg@var1679 .@expr1073745191 toXML (@expr1073745192 ) <<@expr1073745193 std ::@expr1073745194 endl@expr1073745188 ;
49: }
50:
51:
52: void Check :: reportError ( const std :: list < const Token * > & callstack@var1680 , Severity :: SeverityType severity@var1681 , const std :: string & id@var1682 , const std :: string & msg@var1683 , const CWE & cwe@var1684 , Certainty :: CertaintyLevel certainty@var1685 )
53: {
54: const ErrorMessage errmsg@var1686 (@expr1073745195 callstack@var1680 , mTokenizer@var28 ?@expr1073745196 &@expr1073745197 mTokenizer@var28 .@expr1073745198 list@var1728 :@expr1073745199 nullptr , severity@var1681 , id@var1682 , msg@var1683 , cwe@var1684 , certainty@var1685 ) ;
55: if (@expr1073745200 mErrorLogger@var30 ) {
56: mErrorLogger@var30 .@expr1073745201 reportErr (@expr1073745202 errmsg@var1686 ) ; }
57: else {
58: reportError (@expr1073745203 errmsg@var1686 ) ; }
59: }
60:
61: void Check :: reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1687 , Severity :: SeverityType severity@var1688 , const char id@var1689 [ ] , const std :: string & msg@var1690 , const CWE & cwe@var1691 , Certainty :: CertaintyLevel certainty@var1692 )
62: {
63: const ErrorMessage errmsg@var1693 (@expr1073745204 errorPath@var1687 , mTokenizer@var28 ?@expr1073745205 &@expr1073745206 mTokenizer@var28 .@expr1073745207 list@var1728 :@expr1073745208 nullptr , severity@var1688 , id@var1689 , msg@var1690 , cwe@var1691 , certainty@var1692 ) ;
64: if (@expr1073745209 mErrorLogger@var30 ) {
65: mErrorLogger@var30 .@expr1073745210 reportErr (@expr1073745211 errmsg@var1693 ) ; }
66: else {
67: reportError (@expr1073745212 errmsg@var1693 ) ; }
68: }
69:
70: bool Check :: wrongData ( const Token * tok@var1694 , const char * str@var1695 )
71: {
72: if (@expr1073745213 mSettings@var29 .@expr1073745214 daca@var1729 ) {
73: reportError (@expr1073745215 tok@var1694 , Severity ::@expr1073745216 debug , "DacaWrongData" , "Wrong data detected by condition " +@expr1073745217 std ::@expr1073745218 string (@expr1073745219 str@var1695 ) ) ; }
74: return true ;
75: }
76:
77: std :: list < Check * > & Check :: instances ( )
78: {
79:
|
84:
85: static std ::@expr1073745220 list < Check *@expr1073745221 > _instances@var1696 ;
86: return _instances@var1696 ;
87:
88: }
89:
90: std :: string Check :: getMessageId ( const ValueFlow :: Value & value@var1697 , const char id@var1698 [ ] )
91: {
92: if (@expr1073745222 value@var1697 .@expr1073745223 condition@var1699 !=@expr1073745224 nullptr ) {
93: return id@var1698 +@expr1073745225 std ::@expr3402 string (@expr1073745227 "Cond" ) ; }
94: if (@expr1073745228 value@var1697 .@expr1073745229 safe@var1700 ) {
95: return std ::@expr3402 string (@expr1073745231 "safe" ) +@expr1073745232 (@expr1073745233 char ) std ::@expr1073745234 toupper (@expr1073745235 id@var1698 [@expr1073745236 0 ] ) +@expr1073745237 (@expr1073745238 id@var1698 +@expr1073745239 1 ) ; }
96: return id@var1698 ;
97: }
98:
99: std :: list < std :: pair < const Token * , std :: string > > Check :: getErrorPath ( const Token * errtok@var1701 , const ValueFlow :: Value * value@var1702 , const std :: string & bug@var1703 ) const
100: {
101: std ::@expr1073745240 list < std ::@expr3417 pair < const Token *@expr1073745242 , std ::@expr3417 string > > errorPath@var1704 ;
102: if (@expr1073745244 !@expr1073745245 value@var1702 ) {
103: errorPath@var1704 .@expr3422 emplace_back (@expr3423 errtok@var1701 , bug@var1703 ) ;
104: } else { if (@expr1073745248 mSettings@var29 .@expr1073745249 verbose@var1730 ||@expr1073745250 mSettings@var29 .@expr1073745251 xml@var1731 ||@expr1073745252 !@expr1073745253 mSettings@var29 .@expr1073745254 templateLocation@var1732 .@expr1073745255 empty (@expr1073745256 ) ) {
105: errorPath@var1704 =@expr1073745257 value@var1702 .@expr1073745258 errorPath@var1705 ;
106: errorPath@var1704 .@expr3422 emplace_back (@expr3423 errtok@var1701 , bug@var1703 ) ;
107: } else {
108: if (@expr1073745261 value@var1702 .@expr3438 condition@var1706 ) {
109: errorPath@var1704 .@expr3422 emplace_back (@expr1073745264 value@var1702 .@expr3438 condition@var1706 , "condition '" +@expr1073745266 value@var1702 .@expr3438 condition@var1706 .@expr1073745268 expressionString (@expr1073745269 ) +@expr1073745270 "'" ) ; }
110:
111:
112: errorPath@var1704 .@expr3422 emplace_back (@expr3423 errtok@var1701 , bug@var1703 ) ;
113: } }
114: return errorPath@var1704 ;
115: }

##file cppcheck-2.8/lib/settings.h

7:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var1707 ; mFlags@var1707 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1707 ;
54: }
55: void clear ( ) {
56: mFlags@var1707 =@expr1073745273 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1707 =@expr1073745274 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1708 ) {
62: if (@expr1073745275 enabled@var1708 ) {
63: fill (@expr1073745276 ) ; }
64: else {
65: clear (@expr1073745277 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var1709 ) const {
68: return (@expr3454 mFlags@var1707 &@expr1073745279 (@expr3454 1U <<@expr1073745281 (@expr1073745282 uint32_t ) flag@var1709 ) ) !=@expr1073745283 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var1710 ) {
71: mFlags@var1707 |=@expr1073745284 (@expr1073745285 1U <<@expr1073745286 (@expr1073745287 uint32_t ) flag@var1710 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var1711 ) {
74: mFlags@var1707 &=@expr1073745288 ~@expr1073745289 (@expr1073745290 1U <<@expr1073745291 (@expr1073745292 uint32_t ) flag@var1711 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var1712 , bool enabled@var1713 ) {
77: if (@expr1073745293 enabled@var1713 ) {
78: enable (@expr1073745294 flag@var1712 ) ; }
79: else {
80: disable (@expr1073745295 flag@var1712 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var1714 ; mFlags@var1714 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1714 ;
54: }
55: void clear ( ) {
56: mFlags@var1714 =@expr1073745296 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1714 =@expr1073745297 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1715 ) {
62: if (@expr1073745298 enabled@var1715 ) {
63: fill (@expr1073745299 ) ; }
64: else {
65: clear (@expr1073745300 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var1716 ) const {
68: return (@expr3477 mFlags@var1714 &@expr1073745302 (@expr3477 1U <<@expr1073745304 (@expr1073745305 uint32_t ) flag@var1716 ) ) !=@expr1073745306 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var1717 ) {
71: mFlags@var1714 |=@expr1073745307 (@expr1073745308 1U <<@expr1073745309 (@expr1073745310 uint32_t ) flag@var1717 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var1718 ) {
74: mFlags@var1714 &=@expr1073745311 ~@expr1073745312 (@expr1073745313 1U <<@expr1073745314 (@expr1073745315 uint32_t ) flag@var1718 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var1719 , bool enabled@var1720 ) {
77: if (@expr1073745316 enabled@var1720 ) {
78: enable (@expr1073745317 flag@var1719 ) ; }
79: else {
80: disable (@expr1073745318 flag@var1719 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var1721 ; mFlags@var1721 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1721 ;
54: }
55: void clear ( ) {
56: mFlags@var1721 =@expr1073745319 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1721 =@expr1073745320 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1722 ) {
62: if (@expr1073745321 enabled@var1722 ) {
63: fill (@expr1073745322 ) ; }
64: else {
65: clear (@expr1073745323 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var1723 ) const {
68: return (@expr3500 mFlags@var1721 &@expr1073745325 (@expr3500 1U <<@expr1073745327 (@expr1073745328 uint32_t ) flag@var1723 ) ) !=@expr1073745329 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var1724 ) {
71: mFlags@var1721 |=@expr1073745330 (@expr1073745331 1U <<@expr1073745332 (@expr1073745333 uint32_t ) flag@var1724 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var1725 ) {
74: mFlags@var1721 &=@expr1073745334 ~@expr1073745335 (@expr1073745336 1U <<@expr1073745337 (@expr1073745338 uint32_t ) flag@var1725 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var1726 , bool enabled@var1727 ) {
77: if (@expr1073745339 enabled@var1727 ) {
78: enable (@expr1073745340 flag@var1726 ) ; }
79: else {
80: disable (@expr1073745341 flag@var1726 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 65
  , inconclusive lifetime[SubObject]=(errorLogger)
  ( inconclusive lifetime[SubObject]=(errorLogger)
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  severity possible 7@13
  id possible "DacaWrongData"@13
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@14528,34@14784}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@56,34@57}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@56,""@57,""@58,"U"@59,"U"@60,"u"@61,"u"@62,"u8"@63,"u8"@64}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@189,34@190}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@186,34@188}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@146,128@147,64@148,32@149,16@150,8@151,4@152,2@153,1@154}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@155,128@156,64@157,32@158,16@159,8@160,4@161,2@162,1@163}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@155,4294967167@156,4294967231@157,4294967263@158,4294967279@159,4294967287@160,4294967291@161,4294967293@162,4294967294@163}
  flag {!<=-1,256@155,128@156,64@157,32@158,16@159,8@160,4@161,2@162,1@163}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@45,4@46,0@47}
  t possible {10@45,4@46,0@47}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@45,4@46,0@47}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@45,0@47}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@45,0@47}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@45}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@45}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@45}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@45}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@45}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@53}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@55,17179869184@66,8589934592@68,34359738368@70,4294967296@72,2147483648@74,1073741824@76,536870912@78,268435456@80}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@142,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@143}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@54,17179869184@65,8589934592@67,34359738368@69,4294967296@71,2147483648@73,1073741824@75,536870912@77,268435456@79}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@54,17179869184@65,8589934592@67,34359738368@69,4294967296@71,2147483648@73,1073741824@75,536870912@77,268435456@79}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 35
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 37
  = {lifetime[Iterator]=(instances()),start=0}
  ( {lifetime[Iterator]=(instances()),start=0}
  i inconclusive {lifetime[Iterator]=(instances()),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(instances()),end=0}
Line 38
  i inconclusive lifetime[Iterator]=(instances())
  > always {!<=-1,!>=2}
Line 39
  ( possible lifetime[Iterator]=(instances())
  i inconclusive lifetime[Iterator]=(instances())
  this always !0
Line 43
  this always !0
Line 54
  callstack possible size=1@208
  ? possible 0
  & {lifetime[Address]=(mTokenizer->list),!0}
  mTokenizer always !0
  nullptr always 0
  certainty possible 0@206
Line 56
  mErrorLogger always !0
Line 63
  ? possible 0
  & {lifetime[Address]=(mTokenizer->list),!0}
  mTokenizer always !0
  nullptr always 0
Line 65
  mErrorLogger always !0
Line 70
  ( always {!<=-1,!>=2}
Line 72
  . always {!<=-1,!>=2}
  daca always {!<=-1,!>=2}
Line 73
  :: always 7
  debug always 7
  "DacaWrongData" always "DacaWrongData"
  "Wrong data detected by condition " always "Wrong data detected by condition "
Line 74
  return always {!<=-1,!>=2}
  true always 1
Line 92
  != always {!<=-1,!>=2}
  nullptr always 0
Line 93
  "Cond" always "Cond"
Line 94
  . always {!<=-1,!>=2}
  safe always {!<=-1,!>=2}
Line 95
  "safe" always "safe"
  0 always 0
  1 always 1
Line 102
  ! always {!<=-1,!>=2}
Line 104
  . always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 105
  value always !0
Line 106
  errorPath always symbolic=(value->errorPath)
Line 108
  value always !0
Line 109
  value always !0
  "condition '" always "condition '"
  value always !0
  "'" always "'"
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
