

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073743821 !@expr1073743822 mTokenizer@var28 ) {
69: instances (@expr1073743823 ) .@expr1073743824 remove (@expr1073743825 this@expr1073743826 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073743827 string (@expr1073743828 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073743829 void ) tokenizer@var21 ;
108: (@expr1073743830 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073743831 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073743832 void ) ctu@var24 ;
120: (@expr1073743833 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073743834 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073743835 0U ) , Certainty ::@expr1073743836 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073743837 list < const Token *@expr1073743838 > callstack@var41 (@expr1073743839 1 , tok@var35 ) ;
141: reportError (@expr1073743840 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073743841 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073743842 0U ) , Certainty ::@expr1073743843 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/checkassert.h

1:
|
29:
30: class ErrorLogger ;
31: class Scope ;
32: class Settings ;
33: class Token ;
34: class Tokenizer ;
35:
|
42:
43: class CheckAssert : public Check {
44: public:
45: CheckAssert ( ) : Check ( myName ( ) ) { }
46:
47: CheckAssert ( const Tokenizer * tokenizer@var64 , const Settings * settings@var65 , ErrorLogger * errorLogger@var66 )
48: : Check ( myName ( ) , tokenizer@var64 , settings@var65 , errorLogger@var66 ) { }
49:
50:
51: void runChecks ( const Tokenizer * tokenizer@var67 , const Settings * settings@var68 , ErrorLogger * errorLogger@var69 ) override {
52: CheckAssert checkAssert@var70 (@expr1073743844 tokenizer@var67 , settings@var68 , errorLogger@var69 ) ;
53: checkAssert@var70 .@expr1073743845 assertWithSideEffects (@expr1073743846 ) ;
54: }
55:
56: void assertWithSideEffects ( ) ;
57:
58: protected:
59: void checkVariableAssignment ( const Token * assignTok@var71 , const Scope * assertionScope@var72 ) ;
60: static bool inSameScope ( const Token * returnTok@var73 , const Token * assignTok@var74 ) ;
61:
62: private:
63: void sideEffectInAssertError ( const Token * tok@var75 , const std :: string & functionName@var76 ) ;
64: void assignmentInAssertError ( const Token * tok@var77 , const std :: string & varname@var78 ) ;
65:
66: void getErrorMessages ( ErrorLogger * errorLogger@var79 , const Settings * settings@var80 ) const override {
67: CheckAssert c@var81 (@expr1073743847 nullptr , settings@var80 , errorLogger@var79 ) ;
68: c@var81 .@expr1073743848 sideEffectInAssertError (@expr1073743849 nullptr , "function" ) ;
69: c@var81 .@expr1073743850 assignmentInAssertError (@expr1073743851 nullptr , "var" ) ;
70: }
71:
72: static std :: string myName ( ) {
73: return "Assert" ;
74: }
75:
76: std :: string classInfo ( ) const override {
77: return "Warn if there are side effects in assert statements (since this cause different behaviour in debug/release builds).\n" ;
78: }
79: } ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var82 ) {
44: if (@expr1073743852 bit@var82 >=@expr1073743853 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073743854 (@expr1073743855 1LL <<@expr1073743856 (@expr1073743857 bit@var82 -@expr1073743858 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var83 ) {
50: if (@expr1073743859 bit@var83 >=@expr1073743860 64 ) {
51: return (@expr2037 ~@expr1073743862 0ULL ) >>@expr1073743863 1 ; }
52: return (@expr2037 1LL <<@expr1073743865 (@expr2037 bit@var83 -@expr1073743867 1 ) ) -@expr1073743868 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var84 ) const {
59: return value@var84 >=@expr1073743869 min_value (@expr1073743870 int_bit@var94 ) &&@expr1073743871 value@var84 <=@expr1073743872 max_value (@expr1073743873 int_bit@var94 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var85 ) const {
63: unsigned long long intMax@var86 ; intMax@var86 =@expr1073743874 max_value (@expr1073743875 int_bit@var94 ) ;
64: return value@var85 <=@expr1073743876 intMax@var86 ;
65: }
66:
67: bool isLongValue ( long long value@var87 ) const {
68: return value@var87 >=@expr1073743877 min_value (@expr1073743878 long_bit@var95 ) &&@expr1073743879 value@var87 <=@expr1073743880 max_value (@expr1073743881 long_bit@var95 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var88 ) const {
72: unsigned long long longMax@var89 ; longMax@var89 =@expr1073743882 max_value (@expr1073743883 long_bit@var95 ) ;
73: return value@var88 <=@expr1073743884 longMax@var89 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var90 ) const {
77: unsigned long long longLongMax@var91 ; longLongMax@var91 =@expr1073743885 max_value (@expr1073743886 long_long_bit@var96 ) ;
78: return value@var90 <=@expr1073743887 longLongMax@var91 ;
79: }
80:
81: int char_bit@var92 ;
82: int short_bit@var93 ;
83: int int_bit@var94 ;
84: int long_bit@var95 ;
85: int long_long_bit@var96 ;
86:
87:
88: int sizeof_bool@var97 ;
89: int sizeof_short@var98 ;
90: int sizeof_int@var99 ;
91: int sizeof_long@var100 ;
92: int sizeof_long_long@var101 ;
93: int sizeof_float@var102 ;
94: int sizeof_double@var103 ;
95: int sizeof_long_double@var104 ;
96: int sizeof_wchar_t@var105 ;
97: int sizeof_size_t@var106 ;
98: int sizeof_pointer@var107 ;
99:
100: char defaultSign@var108 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var109 ;
115:
116:
117: bool platform ( PlatformType type@var110 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var111 [ ] , const std :: string & filename@var112 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var113 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var109 ==@expr1073743888 Win32A ||@expr1073743889
136: platformType@var109 ==@expr1073743890 Win32W ||@expr1073743891
137: platformType@var109 ==@expr1073743892 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073743893 platformType@var109 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var114 ) {
145: switch (@expr1073743894 pt@var114 ) {
146: case Unspecified :@expr2071 ;
147: return "Unspecified" ;
148: case Native :@expr2071 ;
149: return "Native" ;
150: case Win32A :@expr2071 ;
151: return "win32A" ;
152: case Win32W :@expr2071 ;
153: return "win32W" ;
154: case Win64 :@expr2071 ;
155: return "win64" ;
156: case Unix32 :@expr2071 ;
157: return "unix32" ;
158: case Unix64 :@expr2071 ;
159: return "unix64" ;
160: case PlatformFile :@expr2071 ;
161: return "platformFile" ;
162: default :@expr2071 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073743904 char_bit@var92 +@expr1073743905 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073743906 char_bit@var92 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073743907 char_bit@var92 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var115 ) const {
35: return p@var115 .@expr1073743908 first@var116 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var117 ) const {
42: return p@var117 .@expr1073743909 second@var118 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var119 , const T & x@var120 )
48: {
49: return std ::@expr1073743910 find (@expr1073743911 r@var119 .@expr1073743912 begin (@expr1073743913 ) , r@var119 .@expr2090 end (@expr2091 ) , x@var120 ) !=@expr1073743916 r@var119 .@expr2090 end (@expr2091 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var121 , const T & x@var122 )
54: {
55: return std ::@expr1073743919 find (@expr1073743920 r@var121 .@expr1073743921 begin (@expr1073743922 ) , r@var121 .@expr2099 end (@expr2100 ) , x@var122 ) !=@expr1073743925 r@var121 .@expr2099 end (@expr2100 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var123 , const U & x@var124 )
60: {
61: return std ::@expr1073743928 find (@expr1073743929 r@var123 .@expr1073743930 begin (@expr1073743931 ) , r@var123 .@expr2108 end (@expr2109 ) , x@var124 ) !=@expr1073743934 r@var123 .@expr2108 end (@expr2109 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var125 ) const
68: {
69: return static_cast < unsigned long > (@expr1073743937 t@var125 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var126 , char c@var127 )
74: {
75: return !@expr1073743938 str@var126 .@expr1073743939 empty (@expr1073743940 ) &&@expr1073743941 str@var126 .@expr1073743942 back (@expr1073743943 ) ==@expr1073743944 c@var127 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var128 , const char end@var129 [ ] , unsigned long endlen@var130 )
79: {
80: return (@expr2121 str@var128 .@expr2122 size (@expr2123 ) >=@expr1073743948 endlen@var130 ) &&@expr1073743949 (@expr2121 str@var128 .@expr1073743951 compare (@expr1073743952 str@var128 .@expr2122 size (@expr2123 ) -@expr1073743955 endlen@var130 , endlen@var130 , end@var129 ) ==@expr1073743956 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var131 , const char ( & end@var132 ) [ N ] )
85: {
86: return endsWith (@expr1073743958 str@var131 , end@var132 , N@expr1073743957 -@expr1073743959 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var133 , char q@var134 , const std :: string & p@var135 )
90: {
91: if (@expr1073743960 !@expr1073743961 endsWith (@expr1073743962 str@var133 , q@var134 ) ) {
92: return false ; }
93: if (@expr1073743963 (@expr1073743964 str@var133 .@expr1073743965 length (@expr1073743966 ) +@expr1073743967 1 ) >@expr1073743968 p@var135 .@expr1073743969 length (@expr1073743970 ) &&@expr1073743971 (@expr1073743972 str@var133 .@expr1073743973 compare (@expr1073743974 0 , p@var135 .@expr1073743975 size (@expr1073743976 ) +@expr1073743977 1 , p@var135 +@expr1073743978 q@var134 ) ==@expr1073743979 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var136 , char q@var137 )
99: {
100: static const std ::@expr2156 vector < std ::@expr2156 string > suffixes@var138 {@expr1073743982 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073743983 const std ::@expr2156 string &@expr1073743985 p@var139 :@expr1073743986 suffixes@var138 ) {
102: if (@expr1073743987 isPrefixStringCharLiteral (@expr1073743988 str@var136 , q@var137 , p@var139 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var140 )
109: {
110: return isStringCharLiteral (@expr1073743989 str@var140 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var141 )
114: {
115: return isStringCharLiteral (@expr1073743990 str@var141 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var142 , char q@var143 )
119: {
120: const unsigned long quotePos@var144 =@expr1073743991 str@var142 .@expr1073743992 find (@expr1073743993 q@var143 ) ;
121: return str@var142 .@expr1073743994 substr (@expr1073743995 quotePos@var144 +@expr1073743996 1U , str@var142 .@expr1073743997 size (@expr1073743998 ) -@expr1073743999 quotePos@var144 -@expr1073744000 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var145 )
125: {
126: if (@expr1073744001 isStringLiteral (@expr1073744002 str@var145 ) ) {
127: return getStringCharLiteral (@expr1073744003 str@var145 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var146 )
132: {
133: if (@expr1073744004 isCharLiteral (@expr1073744005 str@var146 ) ) {
134: return getStringCharLiteral (@expr1073744006 str@var146 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var147 )
139: {
140: if (@expr1073744007 i@var147 ==@expr1073744008 1 ) {
141: return "st" ; }
142: if (@expr1073744009 i@var147 ==@expr1073744010 2 ) {
143: return "nd" ; }
144: if (@expr1073744011 i@var147 ==@expr1073744012 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var148 , const std :: string & rhs@var149 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var150 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var151 , const std :: string & name@var152 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var153 , const std :: string & name@var154 ) ;
156:
157: void strTolower ( std :: string & str@var155 ) ;

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var156 , const std :: string & rhs@var157 ) const {
41: return caseInsensitiveStringCompare (@expr1073744013 lhs@var156 , rhs@var157 ) <@expr1073744014 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var165 ( cppcheck :: Platform :: Unspecified ) , msc@var166 ( false ) , useMfc@var167 ( false ) { }
67: std :: string cfg@var158 ;
68: std :: string filename@var159 ;
69: std :: string defines@var160 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var160 +@expr1073744015 (@expr1073744016 msc@var166 ?@expr1073744017 ";_MSC_VER=1900" :@expr1073744018 "" ) +@expr1073744019 (@expr1073744020 useMfc@var167 ?@expr1073744021 ";__AFXWIN_H__=1" :@expr1073744022 "" ) ;
72: }
73: std :: set < std :: string > undefs@var161 ;
74: std :: list < std :: string > includePaths@var162 ;
75: std :: list < std :: string > systemIncludePaths@var163 ;
76: std :: string standard@var164 ;
77: cppcheck :: Platform :: PlatformType platformType@var165 ;
78: bool msc@var166 ;
79: bool useMfc@var167 ;
80:
81: void parseCommand ( std :: string command@var168 ) ;
82: void setDefines ( std :: string defs@var169 ) ;
83: void setIncludePaths ( const std :: string & basepath@var170 , const std :: list < std :: string > & in@var171 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var172 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var173 ;
86: Type projectType@var174 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var175 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous0 {
96: std :: string analyzeAllVsConfigs@var176 ;
97: std :: vector < std :: string > pathNames@var177 ;
98: std :: list < std :: string > libraries@var178 ;
99: std :: list < std :: string > excludedPaths@var179 ;
100: std :: list < std :: string > checkVsConfigs@var180 ;
101: std :: string projectFile@var181 ;
102: std :: string platform@var182 ;
103: } ; struct Anonymous0 guiProject@var183 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var184 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var185 ) ;
107:
108: Type import ( const std :: string & filename@var186 , Settings * settings@var187 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var188 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var189 , Settings * settings@var190 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var191 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var192 , const std :: string & path@var193 , const std :: vector < std :: string > & fileFilters@var194 ) ;
115: bool importVcxproj ( const std :: string & filename@var195 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var196 , const std :: string & additionalIncludeDirectories@var197 , const std :: vector < std :: string > & fileFilters@var198 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var199 ) ;
117:
118: static void printError ( const std :: string & message@var200 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var201 ) ;
121:
122: std :: string mPath@var202 ;
123: std :: set < std :: string > mAllVSConfigs@var203 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var204 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var205 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var206 [ 2 ] = "1" ;
131: const char BuildDirElementName@var207 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var208 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var209 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var210 [ 7 ] = "parser" ;
135: const char BugHunting@var211 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var212 [ 11 ] = "includedir" ;
137: const char DirElementName@var213 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var214 [ 5 ] = "name" ;
139: const char DefinesElementName@var215 [ 8 ] = "defines" ;
140: const char DefineName@var216 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var217 [ 5 ] = "name" ;
142: const char UndefinesElementName@var218 [ 10 ] = "undefines" ;
143: const char UndefineName@var219 [ 9 ] = "undefine" ;
144: const char PathsElementName@var220 [ 6 ] = "paths" ;
145: const char PathName@var221 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var222 [ 5 ] = "name" ;
147: const char RootPathName@var223 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var224 [ 5 ] = "name" ;
149: const char IgnoreElementName@var225 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var226 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var227 [ 5 ] = "name" ;
152: const char ExcludeElementName@var228 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var229 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var230 [ 5 ] = "name" ;
155: const char FunctionContracts@var231 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var232 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var233 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var234 [ 8 ] = "library" ;
159: const char PlatformElementName@var235 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var236 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var237 [ 12 ] = "suppression" ;
162: const char AddonElementName@var238 [ 6 ] = "addon" ;
163: const char AddonsElementName@var239 [ 7 ] = "addons" ;
164: const char ToolElementName@var240 [ 5 ] = "tool" ;
165: const char ToolsElementName@var241 [ 6 ] = "tools" ;
166: const char TagsElementName@var242 [ 5 ] = "tags" ;
167: const char TagElementName@var243 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var244 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var245 [ 4 ] = "tag" ;
170: const char WarningElementName@var246 [ 8 ] = "warning" ;
171: const char HashAttributeName@var247 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var248 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var249 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var250 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var251 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var252 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var253 [ 11 ] = "clang-tidy" ;
178: const char Name@var254 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var255 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var256 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var257 ;
42: double mDoubleValue@var258 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var259 ;
44: bool mIsUnsigned@var260 ;
45:
46: void promote ( const value & v@var261 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var262 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var259 !=@expr1073744023 Type ::@expr1073744024 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var259 ==@expr1073744025 Type ::@expr1073744026 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744027 ) ?@expr1073744028 mDoubleValue@var258 :@expr1073744029 (@expr1073744030 double ) mIntValue@var257 ;
60: }
61:
62: static value calc ( char op@var263 , const value & v1@var264 , const value & v2@var265 ) ;
63: int compare ( const value & v@var266 ) const ;
64: value add ( int v@var267 ) const ;
65: value shiftLeft ( const value & v@var268 ) const ;
66: value shiftRight ( const value & v@var269 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var270 ;
72:
73: static long long toLongNumber ( const std :: string & str@var271 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var272 ) ;
75:
76: template < class T > static std :: string toString ( T value@var273 ) {
77: std ::@expr1073744031 ostringstream result@var274 ;
78: result@var274 <<@expr1073744032 value@var273 ;
79: return result@var274 .@expr1073744033 str (@expr1073744034 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var275 ) ;
82:
83: static bool isInt ( const std :: string & str@var276 ) ;
84: static bool isFloat ( const std :: string & str@var277 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var278 ) ;
86: static bool isNegative ( const std :: string & str@var279 ) ;
87: static bool isPositive ( const std :: string & str@var280 ) ;
88: static bool isDec ( const std :: string & str@var281 ) ;
89: static bool isFloatHex ( const std :: string & str@var282 ) ;
90: static bool isIntHex ( const std :: string & str@var283 ) ;
91: static bool isOct ( const std :: string & str@var284 ) ;
92: static bool isBin ( const std :: string & str@var285 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var286 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var287 , bool supportMicrosoftExtensions@var288 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var289 , const std :: string & second@var290 ) ;
105: static std :: string subtract ( const std :: string & first@var291 , const std :: string & second@var292 ) ;
106: static std :: string multiply ( const std :: string & first@var293 , const std :: string & second@var294 ) ;
107: static std :: string divide ( const std :: string & first@var295 , const std :: string & second@var296 ) ;
108: static std :: string mod ( const std :: string & first@var297 , const std :: string & second@var298 ) ;
109: static std :: string incdec ( const std :: string & var@var299 , const std :: string & op@var300 ) ;
110: static std :: string calculate ( const std :: string & first@var301 , const std :: string & second@var302 , char action@var303 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var304 ) ;
113: static std :: string cos ( const std :: string & tok@var305 ) ;
114: static std :: string tan ( const std :: string & tok@var306 ) ;
115: static std :: string abs ( const std :: string & tok@var307 ) ;
116: static bool isEqual ( const std :: string & first@var308 , const std :: string & second@var309 ) ;
117: static bool isNotEqual ( const std :: string & first@var310 , const std :: string & second@var311 ) ;
118: static bool isGreater ( const std :: string & first@var312 , const std :: string & second@var313 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var314 , const std :: string & second@var315 ) ;
120: static bool isLess ( const std :: string & first@var316 , const std :: string & second@var317 ) ;
121: static bool isLessEqual ( const std :: string & first@var318 , const std :: string & second@var319 ) ;
122: static bool isNullValue ( const std :: string & str@var320 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var321 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var322 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var323 , std :: string :: size_type iPos@var324 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var325 , const MathLib :: value & v2@var326 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var327 , const MathLib :: value & v2@var328 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var329 , const MathLib :: value & v2@var330 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var331 , const MathLib :: value & v2@var332 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var333 , const MathLib :: value & v2@var334 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var335 , const MathLib :: value & v2@var336 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var337 , const MathLib :: value & v2@var338 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var339 , const MathLib :: value & v2@var340 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var341 , const MathLib :: value & v2@var342 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var343 , const MathLib :: value & v2@var344 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var345 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var346 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var347 ;
42:
43:
44: std :: string stdValue@var348 ;
45:
46:
47: Standards ( ) : c@var346 ( CLatest ) , cpp@var347 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var349 ) {
50: stdValue@var348 =@expr1073744035 str@var349 ;
51: if (@expr1073744036 str@var349 ==@expr1073744037 "c89" ||@expr1073744038 str@var349 ==@expr1073744039 "C89" ) {
52: c@var346 =@expr1073744040 C89 ;
53: return true ;
54: }
55: if (@expr1073744041 str@var349 ==@expr1073744042 "c99" ||@expr1073744043 str@var349 ==@expr1073744044 "C99" ) {
56: c@var346 =@expr1073744045 C99 ;
57: return true ;
58: }
59: if (@expr1073744046 str@var349 ==@expr1073744047 "c11" ||@expr1073744048 str@var349 ==@expr1073744049 "C11" ) {
60: c@var346 =@expr1073744050 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744051 c@var346 ) {
67: case C89 :@expr2228 ;
68: return "c89" ;
69: case C99 :@expr2228 ;
70: return "c99" ;
71: case C11 :@expr2228 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var350 ) {
77: if (@expr1073744055 std@var350 ==@expr1073744056 "c89" ) {
78: return Standards ::@expr1073744057 C89 ;
79: }
80: if (@expr1073744058 std@var350 ==@expr1073744059 "c99" ) {
81: return Standards ::@expr1073744060 C99 ;
82: }
83: if (@expr1073744061 std@var350 ==@expr1073744062 "c11" ) {
84: return Standards ::@expr1073744063 C11 ;
85: }
86: return Standards ::@expr1073744064 CLatest ;
87: }
88: bool setCPP ( std :: string str@var351 ) {
89: stdValue@var348 =@expr1073744065 str@var351 ;
90: strTolower (@expr1073744066 str@var351 ) ;
91: cpp@var347 =@expr1073744067 getCPP (@expr1073744068 str@var351 ) ;
92: return !@expr1073744069 stdValue@var348 .@expr1073744070 empty (@expr1073744071 ) &&@expr1073744072 str@var351 ==@expr1073744073 getCPP (@expr1073744074 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744075 cpp@var347 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var352 ) {
98: switch (@expr1073744076 std@var352 ) {
99: case CPP03 :@expr2253 ;
100: return "c++03" ;
101: case CPP11 :@expr2253 ;
102: return "c++11" ;
103: case CPP14 :@expr2253 ;
104: return "c++14" ;
105: case CPP17 :@expr2253 ;
106: return "c++17" ;
107: case CPP20 :@expr2253 ;
108: return "c++20" ;
109: case CPP23 :@expr2253 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var353 ) {
115: if (@expr1073744083 std@var353 ==@expr1073744084 "c++03" ) {
116: return Standards ::@expr1073744085 CPP03 ;
117: }
118: if (@expr1073744086 std@var353 ==@expr1073744087 "c++11" ) {
119: return Standards ::@expr1073744088 CPP11 ;
120: }
121: if (@expr1073744089 std@var353 ==@expr1073744090 "c++14" ) {
122: return Standards ::@expr1073744091 CPP14 ;
123: }
124: if (@expr1073744092 std@var353 ==@expr1073744093 "c++17" ) {
125: return Standards ::@expr1073744094 CPP17 ;
126: }
127: if (@expr1073744095 std@var353 ==@expr1073744096 "c++20" ) {
128: return Standards ::@expr1073744097 CPP20 ;
129: }
130: if (@expr1073744098 std@var353 ==@expr1073744099 "c++23" ) {
131: return Standards ::@expr1073744100 CPP23 ;
132: }
133: return Standards ::@expr1073744101 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var357 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var354 ) : errorcode@var357 ( e@var354 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var355 , T && r@var356 ) : errorcode@var357 ( e@var355 ) , reason@var358 ( r@var356 ) { }
66: ErrorCode errorcode@var357 ;
67: std :: string reason@var358 ;
68: } ;
69:
70: Error load ( const char exename@var359 [ ] , const char path@var360 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var361 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var362 [ ] , unsigned long len@var363 ) ;
75:
76: struct AllocFunc {
77: int groupId@var364 ;
78: int arg@var365 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var366 ;
81: int bufferSizeArg1@var367 ;
82: int bufferSizeArg2@var368 ;
83: int reallocArg@var369 ;
84: bool initData@var370 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var371 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var372 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var373 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var374 , int arg@var375 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var376 , int arg@var377 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var378 , int arg@var379 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var380 [ ] ) const {
107: return getAllocDealloc (@expr1073744102 mAlloc@var646 , name@var380 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var381 [ ] ) const {
112: return getAllocDealloc (@expr1073744103 mDealloc@var647 , name@var381 ) ;
113: }
114:
115:
116: int allocId ( const char name@var382 [ ] ) const {
117: const AllocFunc * af@var383 ; af@var383 =@expr1073744104 getAllocDealloc (@expr1073744105 mAlloc@var646 , name@var382 ) ;
118: return af@var383 ?@expr1073744106 af@var383 .@expr1073744107 groupId@var384 :@expr1073744108 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var385 [ ] ) const {
123: const AllocFunc * af@var386 ; af@var386 =@expr1073744109 getAllocDealloc (@expr1073744110 mDealloc@var647 , name@var385 ) ;
124: return af@var386 ?@expr1073744111 af@var386 .@expr1073744112 groupId@var387 :@expr1073744113 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var388 , int id@var389 , int arg@var390 ) {
129: mAlloc@var646 [@expr2290 functionname@var388 ] .@expr1073744115 groupId@var1999 =@expr1073744116 id@var389 ;
130: mAlloc@var646 [@expr2290 functionname@var388 ] .@expr1073744118 arg@var2000 =@expr1073744119 arg@var390 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var391 , int id@var392 , int arg@var393 ) {
134: mDealloc@var647 [@expr2296 functionname@var391 ] .@expr1073744121 groupId@var2001 =@expr1073744122 id@var392 ;
135: mDealloc@var647 [@expr2296 functionname@var391 ] .@expr1073744124 arg@var2002 =@expr1073744125 arg@var393 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var394 , int id@var395 , int arg@var396 , int reallocArg@var397 = 1 ) {
139: mRealloc@var648 [@expr2302 functionname@var394 ] .@expr1073744127 groupId@var2003 =@expr1073744128 id@var395 ;
140: mRealloc@var648 [@expr2302 functionname@var394 ] .@expr1073744130 arg@var2004 =@expr1073744131 arg@var396 ;
141: mRealloc@var648 [@expr2302 functionname@var394 ] .@expr1073744133 reallocArg@var2005 =@expr1073744134 reallocArg@var397 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var398 , bool noreturn@var399 ) {
146: mNoReturn@var649 [@expr1073744135 funcname@var398 ] =@expr1073744136 noreturn@var399 ?@expr1073744137 FalseTrueMaybe ::@expr1073744138 True :@expr1073744139 FalseTrueMaybe ::@expr1073744140 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var400 ) ;
150:
151:
152: static bool ismemory ( const int id@var401 ) {
153: return (@expr2317 (@expr2317 id@var401 >@expr1073744143 0 ) &&@expr1073744144 (@expr2317 (@expr2317 id@var401 &@expr1073744147 1 ) ==@expr1073744148 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var402 ) {
156: return (@expr2325 (@expr2325 func@var402 .@expr2327 groupId@var403 >@expr1073744152 0 ) &&@expr1073744153 (@expr2325 (@expr2325 func@var402 .@expr2327 groupId@var403 &@expr1073744157 1 ) ==@expr1073744158 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var404 ) {
161: return (@expr2335 (@expr2335 id@var404 >@expr1073744161 0 ) &&@expr1073744162 (@expr2335 (@expr2335 id@var404 &@expr1073744165 1 ) ==@expr1073744166 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var405 ) {
164: return (@expr2343 (@expr2343 func@var405 .@expr2345 groupId@var406 >@expr1073744170 0 ) &&@expr1073744171 (@expr2343 (@expr2343 func@var405 .@expr2345 groupId@var406 &@expr1073744175 1 ) ==@expr1073744176 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var407 ) const ;
168: int formatstr_argno ( const Token * ftok@var408 ) const ;
169: bool formatstr_scan ( const Token * ftok@var409 ) const ;
170: bool formatstr_secure ( const Token * ftok@var410 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var411 ;
174: int ptr2Arg@var412 ;
175: int sizeArg@var413 ;
176: int strlenArg@var414 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var415 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var416 ;
182: Standards standards@var417 ;
183: Severity :: SeverityType severity@var418 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var419 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var420 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var421 ) const ;
191: bool matchArguments ( const Token * ftok@var422 , const std :: string & functionName@var423 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var424 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var425 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var426 ) const ;
198: int returnValueContainer ( const Token * ftok@var427 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var428 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var429 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var430 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var431 , std :: string * unknownFunc@var432 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var442 ( -1 ) ,
210: size_templateArgNo@var444 ( -1 ) ,
211: arrayLike_indexOp@var445 ( false ) ,
212: stdStringLike@var446 ( false ) ,
213: stdAssociativeLike@var447 ( false ) ,
214: opLessAllowed@var448 ( true ) ,
215: hasInitializerListConstructor@var449 ( false ) ,
216: unstableErase@var450 ( false ) ,
217: unstableInsert@var451 ( false ) ,
218: view@var452 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var433 ;
248: Yield yield@var434 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var435 ;
252: int templateParameter@var436 ;
253: } ;
254: std :: string startPattern@var437 ; std :: string startPattern2@var438 ; std :: string endPattern@var439 ; std :: string itEndPattern@var440 ;
255: std :: map < std :: string , Function > functions@var441 ;
256: int type_templateArgNo@var442 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var443 ;
258: int size_templateArgNo@var444 ;
259: bool arrayLike_indexOp@var445 ;
260: bool stdStringLike@var446 ;
261: bool stdAssociativeLike@var447 ;
262: bool opLessAllowed@var448 ;
263: bool hasInitializerListConstructor@var449 ;
264: bool unstableErase@var450 ;
265: bool unstableInsert@var451 ;
266: bool view@var452 ;
267:
268: Action getAction ( const std :: string & function@var453 ) const {
269: const std ::@expr1073744177 map < std ::@expr1073744178 string , Function > ::@expr1073744179 const_iterator i@var454 =@expr1073744180 functions@var441 .@expr1073744181 find (@expr1073744182 function@var453 ) ;
270: if (@expr1073744183 i@var454 !=@expr1073744184 functions@var441 .@expr1073744185 end (@expr1073744186 ) ) {
271: return i@var454 .@expr1073744187 second@var455 .@expr1073744188 action@var456 ; }
272: return Action ::@expr1073744189 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var457 ) const {
276: const std ::@expr1073744190 map < std ::@expr1073744191 string , Function > ::@expr1073744192 const_iterator i@var458 =@expr1073744193 functions@var441 .@expr1073744194 find (@expr1073744195 function@var457 ) ;
277: if (@expr1073744196 i@var458 !=@expr1073744197 functions@var441 .@expr1073744198 end (@expr1073744199 ) ) {
278: return i@var458 .@expr1073744200 second@var459 .@expr1073744201 yield@var460 ; }
279: return Yield ::@expr1073744202 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var461 ) ;
283: static Action actionFrom ( const std :: string & actionName@var462 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var463 ;
286: const Container * detectContainer ( const Token * typeStart@var464 , bool iterator@var465 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var466 , bool * isIterator@var467 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var468 ( false ) ,
293: notnull@var469 ( false ) ,
294: notuninit@var470 ( -1 ) ,
295: formatstr@var471 ( false ) ,
296: strz@var472 ( false ) ,
297: optional@var473 ( false ) ,
298: variadic@var474 ( false ) ,
299: iteratorInfo@var480 ( ) ,
300: direction@var488 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var468 ;
303: bool notnull@var469 ;
304: int notuninit@var470 ;
305: bool formatstr@var471 ;
306: bool strz@var472 ;
307: bool optional@var473 ;
308: bool variadic@var474 ;
309: std :: string valid@var475 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var476 ( 0 ) , it@var477 ( false ) , first@var478 ( false ) , last@var479 ( false ) { }
314:
315: int container@var476 ;
316: bool it@var477 ;
317: bool first@var478 ;
318: bool last@var479 ;
319: } ;
320: IteratorInfo iteratorInfo@var480 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var481 , int a@var482 ) : type@var483 ( t@var481 ) , arg@var484 ( a@var482 ) , arg2@var485 ( 0 ) , value@var486 ( 0 ) { }
326: Type type@var483 ;
327: int arg@var484 ;
328: int arg2@var485 ;
329: long long value@var486 ;
330: } ;
331: std :: vector < MinSize > minsizes@var487 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var488 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var489 ;
344: bool use@var490 ;
345: bool leakignore@var491 ;
346: bool isconst@var492 ;
347: bool ispure@var493 ;
348: UseRetValType useretval@var494 ;
349: bool ignore@var495 ;
350: bool formatstr@var496 ;
351: bool formatstr_scan@var497 ;
352: bool formatstr_secure@var498 ;
353: Container :: Action containerAction@var499 ;
354: Container :: Yield containerYield@var500 ;
355: Function ( )
356: : use@var490 ( false ) ,
357: leakignore@var491 ( false ) ,
358: isconst@var492 ( false ) ,
359: ispure@var493 ( false ) ,
360: useretval@var494 ( UseRetValType :: NONE ) ,
361: ignore@var495 ( false ) ,
362: formatstr@var496 ( false ) ,
363: formatstr_scan@var497 ( false ) ,
364: formatstr_secure@var498 ( false ) ,
365: containerAction@var499 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var500 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var501 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var502 ;
372: bool isUse ( const std :: string & functionName@var503 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var504 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var505 , bool pure@var506 ) const ;
375: bool isFunctionConst ( const Token * ftok@var507 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var508 , int argnr@var509 ) const {
378: const ArgumentChecks * arg@var510 ; arg@var510 =@expr1073744203 getarg (@expr1073744204 ftok@var508 , argnr@var509 ) ;
379: return arg@var510 &&@expr1073744205 arg@var510 .@expr1073744206 notbool@var511 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var512 , int argnr@var513 ) const ;
383: bool isuninitargbad ( const Token * ftok@var514 , int argnr@var515 , int indirect@var516 = 0 , bool * hasIndirect@var517 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var518 , int argnr@var519 ) const {
386: const ArgumentChecks * arg@var520 ; arg@var520 =@expr1073744207 getarg (@expr1073744208 ftok@var518 , argnr@var519 ) ;
387: return arg@var520 &&@expr1073744209 arg@var520 .@expr1073744210 formatstr@var521 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var522 , int argnr@var523 ) const {
391: const ArgumentChecks * arg@var524 ; arg@var524 =@expr1073744211 getarg (@expr1073744212 ftok@var522 , argnr@var523 ) ;
392: return arg@var524 &&@expr1073744213 arg@var524 .@expr1073744214 strz@var525 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var526 , int argnr@var527 , const long long argvalue@var528 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var529 , int argnr@var530 , double argvalue@var531 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var532 , int argnr@var533 ) const {
399: const ArgumentChecks * arg@var534 ; arg@var534 =@expr1073744215 getarg (@expr1073744216 ftok@var532 , argnr@var533 ) ;
400: return arg@var534 ?@expr1073744217 arg@var534 .@expr1073744218 valid@var535 :@expr1073744219 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var536 ;
405: std :: string op1@var537 ;
406: std :: string op2@var538 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744220 isInt (@expr1073744221 op1@var537 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var539 , int argnr@var540 ) const {
413: const ArgumentChecks * arg@var541 ; arg@var541 =@expr1073744222 getarg (@expr1073744223 ftok@var539 , argnr@var540 ) ;
414: return arg@var541 &&@expr1073744224 arg@var541 .@expr2401 iteratorInfo@var542 .@expr1073744226 it@var543 ?@expr1073744227 &@expr1073744228 arg@var541 .@expr2401 iteratorInfo@var542 :@expr1073744230 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var544 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var545 , int argnr@var546 ) const {
420: const ArgumentChecks * arg@var547 ; arg@var547 =@expr1073744231 getarg (@expr1073744232 ftok@var545 , argnr@var546 ) ;
421: return arg@var547 ?@expr1073744233 &@expr1073744234 arg@var547 .@expr1073744235 minsizes@var548 :@expr1073744236 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var549 , int argnr@var550 ) const ;
425:
426: bool markupFile ( const std :: string & path@var551 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var552 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var656 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var553 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var554 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var555 , const std :: string & token@var556 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var557 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var558 ) const ;
443: const std :: string & blockend ( const std :: string & file@var559 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var560 , const std :: string & keyword@var561 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var562 ) const {
448: return mExporters@var659 .@expr1073744237 find (@expr1073744238 prefix@var562 ) !=@expr1073744239 mExporters@var659 .@expr1073744240 end (@expr1073744241 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var563 , const std :: string & token@var564 ) const {
452: const std ::@expr1073744242 map < std ::@expr1073744243 string , ExportedFunctions > ::@expr1073744244 const_iterator it@var565 =@expr1073744245 mExporters@var659 .@expr1073744246 find (@expr1073744247 prefix@var563 ) ;
453: return (@expr1073744248 it@var565 !=@expr1073744249 mExporters@var659 .@expr1073744250 end (@expr1073744251 ) &&@expr1073744252 it@var565 .@expr1073744253 second@var566 .@expr1073744254 isPrefix (@expr1073744255 token@var564 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var567 , const std :: string & token@var568 ) const {
457: const std ::@expr1073744256 map < std ::@expr1073744257 string , ExportedFunctions > ::@expr1073744258 const_iterator it@var569 =@expr1073744259 mExporters@var659 .@expr1073744260 find (@expr1073744261 prefix@var567 ) ;
458: return (@expr1073744262 it@var569 !=@expr1073744263 mExporters@var659 .@expr1073744264 end (@expr1073744265 ) &&@expr1073744266 it@var569 .@expr1073744267 second@var570 .@expr1073744268 isSuffix (@expr1073744269 token@var568 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var571 , const std :: string & importer@var572 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var573 , Container :: Yield yield@var574 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var575 , Container :: Action action@var576 ) const ;
465:
466: bool isreflection ( const std :: string & token@var577 ) const {
467: return mReflection@var661 .@expr1073744270 find (@expr1073744271 token@var577 ) !=@expr1073744272 mReflection@var661 .@expr1073744273 end (@expr1073744274 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var578 ) const {
471: const std ::@expr1073744275 map < std ::@expr1073744276 string , int > ::@expr1073744277 const_iterator it@var579 =@expr1073744278 mReflection@var661 .@expr1073744279 find (@expr1073744280 token@var578 ) ;
472: if (@expr1073744281 it@var579 !=@expr1073744282 mReflection@var661 .@expr1073744283 end (@expr1073744284 ) ) {
473: return it@var579 .@expr1073744285 second@var580 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var581 ;
478:
479: struct SmartPointer {
480: std :: string name@var582 ; name@var582 = "" ;
481: bool unique@var583 ; unique@var583 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var584 ;
485: bool isSmartPointer ( const Token * tok@var585 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var586 ) const ;
487:
488: struct PodType {
489: unsigned int size@var587 ;
490: char sign@var588 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var589 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var590 ) const {
494: const std ::@expr1073744286 unordered_map < std ::@expr1073744287 string , PodType > ::@expr1073744288 const_iterator it@var591 =@expr1073744289 mPodTypes@var662 .@expr1073744290 find (@expr1073744291 name@var590 ) ;
495: return (@expr2468 it@var591 !=@expr1073744293 mPodTypes@var662 .@expr1073744294 end (@expr1073744295 ) ) ?@expr1073744296 &@expr1073744297 (@expr2468 it@var591 .@expr1073744299 second@var592 ) :@expr1073744300 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var603 ( false )
501: , mUnsigned@var604 ( false )
502: , mLong@var605 ( false )
503: , mPointer@var606 ( false )
504: , mPtrPtr@var607 ( false )
505: , mConstPtr@var608 ( false ) { }
506: bool operator== ( const PlatformType & type@var593 ) const {
507: return (@expr1073744301 mSigned@var603 ==@expr1073744302 type@var593 .@expr1073744303 mSigned@var594 &&@expr1073744304
508: mUnsigned@var604 ==@expr1073744305 type@var593 .@expr1073744306 mUnsigned@var595 &&@expr1073744307
509: mLong@var605 ==@expr1073744308 type@var593 .@expr1073744309 mLong@var596 &&@expr1073744310
510: mPointer@var606 ==@expr1073744311 type@var593 .@expr1073744312 mPointer@var597 &&@expr1073744313
511: mPtrPtr@var607 ==@expr1073744314 type@var593 .@expr1073744315 mPtrPtr@var598 &&@expr1073744316
512: mConstPtr@var608 ==@expr1073744317 type@var593 .@expr1073744318 mConstPtr@var599 &&@expr1073744319
513: mType@var602 ==@expr1073744320 type@var593 .@expr1073744321 mType@var600 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var601 ) const {
516: return !@expr1073744322 (@expr1073744323 *@expr1073744324 this@expr1073744325 ==@expr1073744326 type@var601 ) ;
517: }
518: std :: string mType@var602 ;
519: bool mSigned@var603 ;
520: bool mUnsigned@var604 ;
521: bool mLong@var605 ;
522: bool mPointer@var606 ;
523: bool mPtrPtr@var607 ;
524: bool mConstPtr@var608 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var609 ) const {
529: const std ::@expr1073744327 map < std ::@expr1073744328 string , PlatformType > ::@expr1073744329 const_iterator it@var610 =@expr1073744330 mPlatformTypes@var612 .@expr1073744331 find (@expr1073744332 name@var609 ) ;
530: return (@expr2509 it@var610 !=@expr1073744334 mPlatformTypes@var612 .@expr1073744335 end (@expr1073744336 ) ) ?@expr1073744337 &@expr1073744338 (@expr2509 it@var610 .@expr1073744340 second@var611 ) :@expr1073744341 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var612 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var613 , const std :: string & platform@var614 ) const {
536: const std ::@expr1073744342 map < std ::@expr2519 string , Platform > ::@expr1073744344 const_iterator it@var615 =@expr1073744345 mPlatforms@var664 .@expr1073744346 find (@expr1073744347 platform@var614 ) ;
537: if (@expr1073744348 it@var615 !=@expr1073744349 mPlatforms@var664 .@expr1073744350 end (@expr1073744351 ) ) {
538: const PlatformType * const type@var616 ; type@var616 =@expr1073744352 it@var615 .@expr1073744353 second@var617 .@expr1073744354 platform_type (@expr1073744355 name@var613 ) ;
539: if (@expr1073744356 type@var616 ) {
540: return type@var616 ; }
541: }
542:
543: const std ::@expr1073744357 map < std ::@expr2519 string , PlatformType > ::@expr1073744359 const_iterator it2@var618 =@expr1073744360 mPlatformTypes@var663 .@expr1073744361 find (@expr1073744362 name@var613 ) ;
544: return (@expr2539 it2@var618 !=@expr1073744364 mPlatformTypes@var663 .@expr1073744365 end (@expr1073744366 ) ) ?@expr1073744367 &@expr1073744368 (@expr2539 it2@var618 .@expr1073744370 second@var619 ) :@expr1073744371 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var620 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var621 , Library :: Container :: Yield y@var622 , const std :: string & fallback@var623 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var624 , const std :: string & typeName@var625 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var626 , const std :: string & name@var627 , std :: set < std :: string > & unknown_elements@var628 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var629 ) {
565: mPrefixes@var633 .@expr1073744372 insert (@expr1073744373 prefix@var629 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var630 ) {
568: mSuffixes@var634 .@expr1073744374 insert (@expr1073744375 suffix@var630 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var631 ) const {
571: return (@expr1073744376 mPrefixes@var633 .@expr1073744377 find (@expr1073744378 prefix@var631 ) !=@expr1073744379 mPrefixes@var633 .@expr1073744380 end (@expr1073744381 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var632 ) const {
574: return (@expr1073744382 mSuffixes@var634 .@expr1073744383 find (@expr1073744384 suffix@var632 ) !=@expr1073744385 mSuffixes@var634 .@expr1073744386 end (@expr1073744387 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var633 ;
579: std :: set < std :: string > mSuffixes@var634 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var642 ( 0 ) { }
584:
585: void setStart ( const char * s@var635 ) {
586: mStart@var640 =@expr1073744388 s@var635 ;
587: }
588: void setEnd ( const char * e@var636 ) {
589: mEnd@var641 =@expr1073744389 e@var636 ;
590: }
591: void setOffset ( const int o@var637 ) {
592: mOffset@var642 =@expr1073744390 o@var637 ;
593: }
594: void addBlock ( const char * blockName@var638 ) {
595: mBlocks@var643 .@expr1073744391 insert (@expr1073744392 blockName@var638 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var640 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var641 ;
602: }
603: int offset ( ) const {
604: return mOffset@var642 ;
605: }
606: bool isBlock ( const std :: string & blockName@var639 ) const {
607: return mBlocks@var643 .@expr1073744393 find (@expr1073744394 blockName@var639 ) !=@expr1073744395 mBlocks@var643 .@expr1073744396 end (@expr1073744397 ) ;
608: }
609:
610: private:
611: std :: string mStart@var640 ;
612: std :: string mEnd@var641 ;
613: int mOffset@var642 ;
614: std :: set < std :: string > mBlocks@var643 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var644 ;
618: std :: set < std :: string > mFiles@var645 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var646 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var647 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var648 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var649 ;
623: std :: map < std :: string , std :: string > mReturnValue@var650 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var651 ;
625: std :: map < std :: string , int > mReturnValueContainer@var652 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var653 ;
627: std :: map < std :: string , bool > mReportErrors@var654 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var655 ;
629: std :: set < std :: string > mMarkupExtensions@var656 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var657 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var658 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var659 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var660 ;
634: std :: map < std :: string , int > mReflection@var661 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var662 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var663 ;
637: std :: map < std :: string , Platform > mPlatforms@var664 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var665 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var666 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var667 , int argnr@var668 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var669 , bool * error@var670 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var671 , const std :: string & name@var672 ) {
646: const std ::@expr1073744398 map < std ::@expr1073744399 string , AllocFunc > ::@expr1073744400 const_iterator it@var673 =@expr1073744401 data@var671 .@expr1073744402 find (@expr1073744403 name@var672 ) ;
647: return (@expr1073744404 it@var673 ==@expr1073744405 data@var671 .@expr1073744406 end (@expr1073744407 ) ) ?@expr1073744408 nullptr :@expr1073744409 &@expr1073744410 it@var673 .@expr1073744411 second@var674 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var675 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var676 ,
654: const Settings * settings@var677 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var678 = nullptr ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var679 ;
43: std :: string errorId@var680 ;
44: void setFileName ( const std :: string & s@var681 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var685 ;
47: }
48: int lineNumber@var682 ;
49: Certainty :: CertaintyLevel certainty@var683 ;
50: std :: string symbolNames@var684 ;
51: private:
52: std :: string mFileName@var685 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var719 ( NO_LINE ) , hash@var721 ( 0 ) , thisAndNextLine@var722 ( false ) , matched@var723 ( false ) , checked@var724 ( false ) { }
57: Suppression ( const Suppression & other@var686 ) {
58: *@expr1073744412 this@expr1073744413 =@expr1073744414 other@var686 ;
59: }
60: Suppression ( const std :: string & id@var687 , const std :: string & file@var688 , int line@var689 = NO_LINE ) : errorId@var717 ( id@var687 ) , fileName@var718 ( file@var688 ) , lineNumber@var719 ( line@var689 ) , hash@var721 ( 0 ) , thisAndNextLine@var722 ( false ) , matched@var723 ( false ) , checked@var724 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var690 ) {
63: errorId@var717 =@expr1073744415 other@var690 .@expr1073744416 errorId@var691 ;
64: fileName@var718 =@expr1073744417 other@var690 .@expr1073744418 fileName@var692 ;
65: lineNumber@var719 =@expr1073744419 other@var690 .@expr1073744420 lineNumber@var693 ;
66: symbolName@var720 =@expr1073744421 other@var690 .@expr1073744422 symbolName@var694 ;
67: hash@var721 =@expr1073744423 other@var690 .@expr1073744424 hash@var695 ;
68: thisAndNextLine@var722 =@expr1073744425 other@var690 .@expr1073744426 thisAndNextLine@var696 ;
69: matched@var723 =@expr1073744427 other@var690 .@expr1073744428 matched@var697 ;
70: checked@var724 =@expr1073744429 other@var690 .@expr1073744430 checked@var698 ;
71: return *@expr1073744431 this@expr1073744432 ;
72: }
73:
74: bool operator< ( const Suppression & other@var699 ) const {
75: if (@expr1073744433 errorId@var717 !=@expr1073744434 other@var699 .@expr2611 errorId@var700 ) {
76: return errorId@var717 <@expr1073744436 other@var699 .@expr2611 errorId@var700 ; }
77: if (@expr1073744438 lineNumber@var719 <@expr1073744439 other@var699 .@expr1073744440 lineNumber@var701 ) {
78: return true ; }
79: if (@expr1073744441 fileName@var718 !=@expr1073744442 other@var699 .@expr2619 fileName@var702 ) {
80: return fileName@var718 <@expr1073744444 other@var699 .@expr2619 fileName@var702 ; }
81: if (@expr1073744446 symbolName@var720 !=@expr1073744447 other@var699 .@expr2624 symbolName@var703 ) {
82: return symbolName@var720 <@expr1073744449 other@var699 .@expr2624 symbolName@var703 ; }
83: if (@expr1073744451 hash@var721 !=@expr1073744452 other@var699 .@expr2629 hash@var704 ) {
84: return hash@var721 <@expr1073744454 other@var699 .@expr2629 hash@var704 ; }
85: if (@expr1073744456 thisAndNextLine@var722 !=@expr1073744457 other@var699 .@expr1073744458 thisAndNextLine@var705 ) {
86: return thisAndNextLine@var722 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var706 , std :: string * errorMessage@var707 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var708 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var709 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744460 fileName@var718 .@expr1073744461 empty (@expr1073744462 ) &&@expr1073744463 fileName@var718 .@expr1073744464 find_first_of (@expr1073744465 "?*" ) ==@expr1073744466 std ::@expr1073744467 string ::@expr1073744468 npos@expr1073744459 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var710 ) const {
109: return errorId@var717 ==@expr1073744469 other@var710 .@expr1073744470 errorId@var711 &&@expr1073744471
110: fileName@var718 ==@expr1073744472 other@var710 .@expr1073744473 fileName@var712 &&@expr1073744474
111: lineNumber@var719 ==@expr1073744475 other@var710 .@expr1073744476 lineNumber@var713 &&@expr1073744477
112: symbolName@var720 ==@expr1073744478 other@var710 .@expr1073744479 symbolName@var714 &&@expr1073744480
113: hash@var721 ==@expr1073744481 other@var710 .@expr1073744482 hash@var715 &&@expr1073744483
114: thisAndNextLine@var722 ==@expr1073744484 other@var710 .@expr1073744485 thisAndNextLine@var716 ;
115: }
116:
117: std :: string errorId@var717 ;
118: std :: string fileName@var718 ;
119: int lineNumber@var719 ;
120: std :: string symbolName@var720 ;
121: unsigned long hash@var721 ;
122: bool thisAndNextLine@var722 ;
123: bool matched@var723 ;
124: bool checked@var724 ;
125:
126: enum Anonymous1 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var725 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var726 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var727 , std :: string * errorMessage@var728 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var729 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var730 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var731 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var732 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var733 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var734 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var735 , const bool unusedFunctionChecking@var736 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var737 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var738 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var739 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var740 , std :: clock_t clocks@var741 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var742 ;
45: long mNumberOfResults@var743 ;
46:
47: TimerResultsData ( )
48: : mClocks@var742 ( 0 )
49: , mNumberOfResults@var743 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var744 =@expr1073744487 (@expr1073744488 double ) (@expr1073744489 (@expr1073744490 unsigned long ) mClocks@var742 ) /@expr1073744491 (@expr1073744492 double ) CLOCKS_PER_SEC@expr1073744486 ;
53: return ret@var744 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var745 ) const ;
62: void addResults ( const std :: string & str@var746 , std :: clock_t clocks@var747 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var748 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var749 , SHOWTIME_MODES showtimeMode@var750 , TimerResultsIntf * timerResults@var751 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var752 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var753 ;
79: TimerResultsIntf * mTimerResults@var754 ;
80: std :: clock_t mStart@var755 ;
81: const SHOWTIME_MODES mShowTimeMode@var756 ;
82: bool mStopped@var757 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var758 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var759 ;
103:
104:
105: std :: string addonPython@var760 ;
106:
107:
108: std :: vector < std :: string > basePaths@var761 ;
109:
110:
111: std :: string buildDir@var762 ;
112:
113:
114: bool checkAllConfigurations@var763 ;
115:
116:
117: bool checkConfiguration@var764 ;
118:
|
121:
122: bool checkHeaders@var765 ;
123:
124:
125: bool checkLibrary@var766 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var767 ;
129:
130:
131: bool checkUnusedTemplates@var768 ;
132:
133:
134: bool clang@var769 ;
135:
136:
137: std :: string clangExecutable@var770 ;
138:
139:
140: bool clangTidy@var771 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var772 ;
144:
145:
146: std :: string cppcheckCfgProductName@var773 ;
147:
148:
149: std :: string cppcheckCfgAbout@var774 ;
150:
151:
152: bool daca@var775 ;
153:
154:
155: bool debugnormal@var776 ;
156:
157:
158: bool debugSimplified@var777 ;
159:
160:
161: bool debugtemplate@var778 ;
162:
163:
164: bool debugwarnings@var779 ;
165:
166:
167: bool dump@var780 ;
168: std :: string dumpFile@var781 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var782 ;
176:
177:
178: bool exceptionHandling@var783 ;
179:
180:
181: std :: string exename@var784 ;
182:
183:
184:
185: int exitCode@var785 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var786 ;
189:
190:
191: bool force@var787 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var788 ;
196:
197:
198: bool inlineSuppressions@var789 ;
199:
200:
201:
202: unsigned int jobs@var790 ;
203:
|
206:
207: bool jointSuppressionReport@var791 ;
208:
209:
210: std :: list < std :: string > libraries@var792 ;
211:
212:
213: Library library@var793 ;
214:
215:
216:
217: int loadAverage@var794 ;
218:
|
221:
222: int maxConfigs@var795 ;
223:
224:
225: int maxCtuDepth@var796 ;
226:
227:
228: int maxTemplateRecursion@var797 ;
229:
230:
231: Suppressions nofail@var798 ;
232:
233:
234: Suppressions nomsg@var799 ;
235:
236:
237: std :: string outputFile@var800 ;
238:
239:
240: std :: string plistOutput@var801 ;
241:
242:
243: bool preprocessOnly@var802 ;
244:
245: ImportProject project@var803 ;
246:
247:
248: bool quiet@var804 ;
249:
250:
251: bool relativePaths@var805 ;
252:
253:
254: bool reportProgress@var806 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var807 ( "simple" )
261: , id@var809 ( "rule" )
262: , severity@var811 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var807 ;
266: std :: string pattern@var808 ;
267: std :: string id@var809 ;
268: std :: string summary@var810 ;
269: Severity :: SeverityType severity@var811 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var812 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var818 ( false ) , externalFunctions@var819 ( false ) , internalFunctions@var820 ( false ) , externalVariables@var821 ( false ) { }
281:
282: static const char XmlRootName@var813 [ ] ;
283: static const char XmlClasses@var814 [ ] ;
284: static const char XmlExternalFunctions@var815 [ ] ;
285: static const char XmlInternalFunctions@var816 [ ] ;
286: static const char XmlExternalVariables@var817 [ ] ;
287:
288: void clear ( ) {
289: classes@var818 =@expr1073744493 externalFunctions@var819 =@expr1073744494 internalFunctions@var820 =@expr1073744495 externalVariables@var821 =@expr1073744496 false ;
290: }
291:
|
297:
298: bool classes@var818 ;
299:
|
304:
305: bool externalFunctions@var819 ;
306:
|
310:
311: bool internalFunctions@var820 ;
312:
|
316:
317: bool externalVariables@var821 ;
318: } ;
319:
320: SafeChecks safeChecks@var822 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var823 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var824 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var825 ;
325:
326:
327: SHOWTIME_MODES showtime@var826 ;
328:
329:
330: Standards standards@var827 ;
331:
332:
333:
334: std :: string templateFormat@var828 ;
335:
336:
337:
338: std :: string templateLocation@var829 ;
339:
340:
341: std :: string userDefines@var830 ;
342:
343:
344: std :: set < std :: string > userUndefs@var831 ;
345:
346:
347: std :: list < std :: string > userIncludes@var832 ;
348:
349:
350: bool verbose@var833 ;
351:
352:
353: bool xml@var834 ;
354:
355:
356: int xml_version@var835 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var836 ) const {
363: for (@expr1073744497 const std ::@expr1073744498 string &@expr1073744499 configExcludePath@var837 :@expr1073744500 configExcludePaths@var772 ) {
364: if (@expr1073744501 file@var836 .@expr1073744502 length (@expr1073744503 ) >=@expr1073744504 configExcludePath@var837 .@expr2681 length (@expr2682 ) &&@expr1073744507 file@var836 .@expr1073744508 compare (@expr1073744509 0 , configExcludePath@var837 .@expr2681 length (@expr2682 ) , configExcludePath@var837 ) ==@expr1073744512 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var838 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var839 , bool inconclusiveCheck@var840 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744513 find (@expr1073744514 libraries@var792 .@expr1073744515 begin (@expr1073744516 ) , libraries@var792 .@expr2693 end (@expr2694 ) , "posix" ) !=@expr1073744519 libraries@var792 .@expr2693 end (@expr2694 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var841 = true ) {
392: Settings ::@expr1073744522 mTerminated@var758 =@expr1073744523 t@var841 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744524 mTerminated@var758 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var842 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var843 ) const {
54: x@var843 ++@expr1073744525 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var844 ) const {
60: x@var844 --@expr1073744526 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var845 , const U & y@var846 ) const {
67: return x@var845 <@expr1073744527 y@var846 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var847 , const U & y@var848 ) const {
74: return std ::@expr1073744528 abs (@expr1073744529 x@var847 -@expr1073744530 y@var848 ) ==@expr1073744531 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var849 , T x@var850 , U y@var851 ) const {
81: result@var849 =@expr1073744532 !@expr1073744533 (@expr1073744534 x@var850 >@expr1073744535 y@var851 ||@expr1073744536 x@var850 <@expr1073744537 y@var851 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var852 = 0 , Bound b@var853 = Bound :: Point )
91: : valueType@var893 ( ValueType :: INT ) ,
92: bound@var894 ( b@var853 ) ,
93: intvalue@var895 ( val@var852 ) ,
94: tokvalue@var896 ( nullptr ) ,
95: floatValue@var897 ( 0.0 ) ,
96: moveKind@var898 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var899 ( val@var852 ) ,
98: condition@var900 ( nullptr ) ,
99: varId@var902 ( 0U ) ,
100: safe@var903 ( false ) ,
101: conditional@var904 ( false ) ,
102: macro@var905 ( false ) ,
103: defaultArg@var906 ( false ) ,
104: indirect@var907 ( 0 ) ,
105: path@var908 ( 0 ) ,
106: wideintvalue@var909 ( val@var852 ) ,
107: subexpressions@var910 ( ) ,
108: capturetok@var911 ( nullptr ) ,
109: lifetimeKind@var912 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var913 ( LifetimeScope :: Local ) ,
111: valueKind@var918 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var854 , long long val@var855 , Bound b@var856 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var857 ) const {
118: if (@expr1073744538 valueType@var893 !=@expr1073744539 rhs@var857 .@expr1073744540 valueType@var858 ) {
119: return false ; }
120: switch (@expr1073744541 valueType@var893 ) {
121: case ValueType ::@expr1073744542 INT :@expr2719
122: case ValueType ::@expr1073744544 CONTAINER_SIZE :@expr2719
123: case ValueType ::@expr1073744546 BUFFER_SIZE :@expr2719
124: case ValueType ::@expr1073744548 ITERATOR_START :@expr2719
125: case ValueType ::@expr1073744550 ITERATOR_END :@expr2719 ;
126: if (@expr2728 intvalue@var895 !=@expr2729 rhs@var857 .@expr2730 intvalue@var859 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744555 TOK :@expr2719 ;
130: if (@expr2733 tokvalue@var896 !=@expr2734 rhs@var857 .@expr2735 tokvalue@var860 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744560 FLOAT :@expr2719 ;
134:
135: if (@expr1073744562 floatValue@var897 >@expr1073744563 rhs@var857 .@expr2740 floatValue@var861 ||@expr1073744565 floatValue@var897 <@expr1073744566 rhs@var857 .@expr2740 floatValue@var861 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744568 MOVED :@expr2719 ;
139: if (@expr1073744570 moveKind@var898 !=@expr1073744571 rhs@var857 .@expr1073744572 moveKind@var862 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744573 UNINIT :@expr2719 ;
143: break ;
144: case ValueType ::@expr1073744575 LIFETIME :@expr2719 ;
145: if (@expr2733 tokvalue@var896 !=@expr2734 rhs@var857 .@expr2735 tokvalue@var860 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744580 SYMBOLIC :@expr2719 ;
149: if (@expr1073744582 !@expr1073744583 sameToken (@expr1073744584 tokvalue@var896 , rhs@var857 .@expr2735 tokvalue@var860 ) ) {
150: return false ; }
151: if (@expr2728 intvalue@var895 !=@expr2729 rhs@var857 .@expr2730 intvalue@var859 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var863 , F f@var864 ) {
160: switch (@expr1073744589 self@var863 .@expr1073744590 valueType@var865 ) {
161: case ValueType ::@expr1073744591 INT :@expr2768
162: case ValueType ::@expr1073744593 SYMBOLIC :@expr2768
163: case ValueType ::@expr1073744595 BUFFER_SIZE :@expr2768
164: case ValueType ::@expr1073744597 CONTAINER_SIZE :@expr2768
165: case ValueType ::@expr1073744599 ITERATOR_START :@expr2768
166: case ValueType ::@expr1073744601 ITERATOR_END :@expr2768 ; {
167: f@var864 (@expr1073744603 self@var863 .@expr1073744604 intvalue@var866 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744605 FLOAT :@expr2768 ; {
171: f@var864 (@expr1073744607 self@var863 .@expr1073744608 floatValue@var867 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744609 UNINIT :@expr2768
175: case ValueType ::@expr1073744611 TOK :@expr2768
176: case ValueType ::@expr1073744613 LIFETIME :@expr2768
177: case ValueType ::@expr1073744615 MOVED :@expr2768 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var868 , Compare compare@var869 , T x@var870 , U y@var871 ) const {
186: result@var868 =@expr1073744617 compare@var869 (@expr1073744618 x@var870 , y@var871 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var872 , const Value & rhs@var873 , Compare compare@var874 , T x@var875 ) const {
191: visitValue (@expr1073744620 rhs@var873 ,
192: std ::@expr1073744621 bind (@expr1073744622 innerVisitor {@expr1073744623 } , std ::@expr1073744624 ref (@expr1073744625 result@var872 ) , std ::@expr1073744626 move (@expr1073744627 compare@var874 ) , x@var875 , std ::@expr1073744628 placeholders ::@expr1073744629 _1@expr1073744619 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var876 , Compare compare@var877 ) const {
198: assert (@expr1073744631 (@expr1073744632 !@expr1073744633 this@expr2810 .@expr1073744635 isSymbolicValue (@expr1073744636 ) &&@expr1073744637 !@expr1073744638 rhs@var876 .@expr1073744639 isSymbolicValue (@expr1073744640 ) ) ||@expr1073744641
199: (@expr1073744642 this@expr2810 .@expr1073744643 valueType@var893 ==@expr1073744644 rhs@var876 .@expr1073744645 valueType@var878 &&@expr1073744646 sameToken (@expr1073744647 this@expr2810 .@expr1073744648 tokvalue@var896 , rhs@var876 .@expr1073744649 tokvalue@var879 ) ) ) ;
200: bool result@var880 ; result@var880 =@expr1073744650 false ;
201: visitValue (@expr1073744651
202: *@expr1073744652 this@expr2810 ,
203: std ::@expr1073744653 bind (@expr1073744654 compareVisitor {@expr1073744655 } , std ::@expr2832 ref (@expr1073744657 result@var880 ) , std ::@expr2832 ref (@expr1073744659 rhs@var876 ) , std ::@expr1073744660 move (@expr1073744661 compare@var877 ) , std ::@expr1073744662 placeholders ::@expr1073744663 _1@expr1073744630 ) ) ;
204: return result@var880 ;
205: }
206:
207: bool operator== ( const Value & rhs@var881 ) const {
208: if (@expr1073744664 !@expr1073744665 equalValue (@expr1073744666 rhs@var881 ) ) {
209: return false ; }
210:
211: return varvalue@var899 ==@expr1073744667 rhs@var881 .@expr1073744668 varvalue@var882 &&@expr1073744669
212: condition@var900 ==@expr1073744670 rhs@var881 .@expr1073744671 condition@var883 &&@expr1073744672
213: varId@var902 ==@expr1073744673 rhs@var881 .@expr1073744674 varId@var884 &&@expr1073744675
214: conditional@var904 ==@expr1073744676 rhs@var881 .@expr1073744677 conditional@var885 &&@expr1073744678
215: defaultArg@var906 ==@expr1073744679 rhs@var881 .@expr1073744680 defaultArg@var886 &&@expr1073744681
216: indirect@var907 ==@expr1073744682 rhs@var881 .@expr1073744683 indirect@var887 &&@expr1073744684
217: valueKind@var918 ==@expr1073744685 rhs@var881 .@expr1073744686 valueKind@var888 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var889 ) const {
221: return !@expr1073744687 (@expr1073744688 *@expr1073744689 this@expr1073744690 ==@expr1073744691 rhs@var889 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var890 ) const {
226: bool result@var891 ; result@var891 =@expr1073744693 false ;
227: visitValue (@expr1073744694 *@expr1073744695 this@expr1073744696 , std ::@expr1073744697 bind (@expr1073744698 equalVisitor {@expr1073744699 } , std ::@expr1073744700 ref (@expr1073744701 result@var891 ) , x@var890 , std ::@expr1073744702 placeholders ::@expr1073744703 _1@expr1073744692 ) ) ;
228: return result@var891 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744704 bound@var894 ==@expr1073744705 Bound ::@expr1073744706 Lower ) {
233: visitValue (@expr1073744707 *@expr2884 this@expr2885 , increment {@expr1073744710 } ) ; }
234: else { if (@expr1073744711 bound@var894 ==@expr1073744712 Bound ::@expr1073744713 Upper ) {
235: visitValue (@expr1073744714 *@expr2884 this@expr2885 , decrement {@expr1073744716 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744717 bound@var894 ==@expr1073744718 Bound ::@expr2895 Lower ) {
240: bound@var894 =@expr1073744720 Bound ::@expr2897 Upper ; }
241: else { if (@expr1073744722 bound@var894 ==@expr1073744723 Bound ::@expr2897 Upper ) {
242: bound@var894 =@expr1073744725 Bound ::@expr2895 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744727 ) ;
247: decreaseRange (@expr1073744728 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var892 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var893 ;
267: bool isIntValue ( ) const {
268: return valueType@var893 ==@expr1073744729 ValueType ::@expr1073744730 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var893 ==@expr1073744731 ValueType ::@expr1073744732 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var893 ==@expr1073744733 ValueType ::@expr1073744734 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var893 ==@expr1073744735 ValueType ::@expr1073744736 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var893 ==@expr1073744737 ValueType ::@expr1073744738 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var893 ==@expr1073744739 ValueType ::@expr1073744740 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var893 ==@expr1073744741 ValueType ::@expr1073744742 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var893 ==@expr1073744743 ValueType ::@expr1073744744 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var893 ==@expr1073744745 ValueType ::@expr1073744746 ITERATOR_START ||@expr1073744747 valueType@var893 ==@expr1073744748 ValueType ::@expr1073744749 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var893 ==@expr1073744750 ValueType ::@expr1073744751 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var893 ==@expr1073744752 ValueType ::@expr1073744753 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var893 ==@expr1073744754 ValueType ::@expr1073744755 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var893 ==@expr1073744757 ValueType ::@expr1073744758 LIFETIME &&@expr1073744759 lifetimeScope@var913 ==@expr1073744760 LifetimeScope ::@expr1073744761 Local@expr1073744756 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var893 ==@expr1073744762 ValueType ::@expr1073744763 LIFETIME &&@expr1073744764 lifetimeScope@var913 ==@expr1073744765 LifetimeScope ::@expr1073744766 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var893 ==@expr1073744767 ValueType ::@expr1073744768 LIFETIME &&@expr1073744769 lifetimeScope@var913 ==@expr1073744770 LifetimeScope ::@expr1073744771 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744772 ) ||@expr1073744773 isUninitValue (@expr1073744774 ) ||@expr1073744775 isLifetimeValue (@expr1073744776 ) ;
318: }
319:
320:
321: Bound bound@var894 ;
322:
323:
324: long long intvalue@var895 ;
325:
326:
327: const Token * tokvalue@var896 ;
328:
329:
330: double floatValue@var897 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var898 ;
334:
335:
336: long long varvalue@var899 ;
337:
338:
339: const Token * condition@var900 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var901 ;
342:
343:
344: int varId@var902 ;
345:
346:
347: bool safe@var903 ;
348:
349:
350: bool conditional@var904 ;
351:
352:
353: bool macro@var905 ;
354:
355:
356: bool defaultArg@var906 ;
357:
358: int indirect@var907 ;
359:
360:
361: long long path@var908 ;
362:
363:
364: long long wideintvalue@var909 ;
365:
366: std :: vector < std :: string > subexpressions@var910 ;
367:
368:
369: const Token * capturetok@var911 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var912 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var913 ;
385:
386: static const char * toString ( MoveKind moveKind@var914 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var915 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var916 ) ;
389: static const char * toString ( Bound bound@var917 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var918 ;
402:
403: void setKnown ( ) {
404: valueKind@var918 =@expr1073744777 ValueKind ::@expr1073744778 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var918 ==@expr1073744779 ValueKind ::@expr1073744780 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var918 =@expr1073744782 ValueKind ::@expr1073744783 Possible@expr1073744781 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var918 ==@expr1073744785 ValueKind ::@expr1073744786 Possible@expr1073744784 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var918 ==@expr1073744787 ValueKind ::@expr1073744788 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var918 =@expr1073744789 ValueKind ::@expr1073744790 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var919 = true ) {
428: if (@expr1073744791 inconclusive@var919 ) {
429: valueKind@var918 =@expr1073744792 ValueKind ::@expr1073744793 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var918 ==@expr1073744794 ValueKind ::@expr1073744795 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744797 isKnown (@expr1073744798 ) ) {
438: valueKind@var918 =@expr1073744799 ValueKind ::@expr1073744800 Possible@expr1073744796 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744801 condition@var900 &&@expr1073744802 !@expr1073744803 defaultArg@var906 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var920 , const Token * tok2@var921 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var922 , const Settings * settings@var923 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var924 , SymbolDatabase * symboldatabase@var925 , ErrorLogger * errorLogger@var926 , const Settings * settings@var927 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var928 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var929 , const Settings * settings@var930 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var931 ,
459: const Settings * settings@var932 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var933 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var934 , const Token * indexTok@var935 , bool possible@var936 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var937 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var938 , const Settings * settings@var939 = nullptr , int depth@var940 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var941 ;
471: bool addressOf@var942 ;
472: std :: list < std :: pair < const Token * , std :: string > > errorPath@var943 ;
473: bool inconclusive@var944 ;
474:
475: LifetimeToken ( ) : token@var941 ( nullptr ) , addressOf@var942 ( false ) , errorPath@var943 ( ) , inconclusive@var944 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var945 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var946 )
478: : token@var941 ( token@var945 ) , addressOf@var942 ( false ) , errorPath@var943 ( std :: move ( errorPath@var946 ) ) , inconclusive@var944 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var947 , bool addressOf@var948 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var949 )
482: : token@var941 ( token@var947 ) , addressOf@var942 ( addressOf@var948 ) , errorPath@var943 ( std :: move ( errorPath@var949 ) ) , inconclusive@var944 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var950 , bool b@var951 ) {
486: for (@expr1073744804 LifetimeToken &@expr1073744805 x@var952 :@expr1073744806 v@var950 ) {
487: x@var952 .@expr1073744807 addressOf@var953 =@expr1073744808 b@var951 ; }
488: return v@var950 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var954 , bool b@var955 ) {
492: for (@expr1073744809 LifetimeToken &@expr1073744810 x@var956 :@expr1073744811 v@var954 ) {
493: x@var956 .@expr1073744812 inconclusive@var957 =@expr1073744813 b@var955 ; }
494: return v@var954 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var958 , ValueFlow :: Value & true_value@var959 , ValueFlow :: Value & false_value@var960 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var961 ) ;
499: const Token * parseCompareInt ( const Token * tok@var962 , ValueFlow :: Value & true_value@var963 , ValueFlow :: Value & false_value@var964 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var965 , long long val@var966 , const Token * varTok@var967 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var968 , const Token * varTok@var969 , long long val@var970 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var971 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var972 ,
508: ValueFlow :: Value & value@var973 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var974 ,
511: bool escape@var975 = false ,
512: std :: list < std :: pair < const Token * , std :: string > > errorPath@var976 = std :: list < std :: pair < const Token * , std :: string > > { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var977 , const Token * lifetime@var978 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var979 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var980 , bool * addressOf@var981 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var982 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var983 , const Settings * settings@var984 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var985 , const ValueFlow :: Value * val@var986 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var987 , const ValueFlow :: Value * val@var988 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var989 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var990 , bool inconclusive@var991 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var992 ,
529: bool inconclusive@var993 = false ,
530: long long path@var994 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var995 , const Scope * defaultScope@var996 = nullptr , bool smallest@var997 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var998 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var999 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var1000 ;
69: std :: string mScope@var1001 ;
70: std :: string mName@var1002 ;
71: std :: string mFullName@var1003 ;
72: const Token * mNameToken@var1004 ;
73: const Token * mParamEnd@var1005 ;
74: unsigned int mFlags@var1006 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var1007 ) {
90: setFlag (@expr1073744814 fIsClass , state@var1007 ) ;
91: }
92: void isFunction ( bool state@var1008 ) {
93: setFlag (@expr1073744815 fIsFunction , state@var1008 ) ;
94: }
95: void isVariable ( bool state@var1009 ) {
96: setFlag (@expr1073744816 fIsVariable , state@var1009 ) ;
97: }
98: void isAlias ( bool state@var1010 ) {
99: setFlag (@expr1073744817 fIsAlias , state@var1010 ) ;
100: }
101: void isSpecialization ( bool state@var1011 ) {
102: setFlag (@expr1073744818 fIsSpecialization , state@var1011 ) ;
103: }
104: void isPartialSpecialization ( bool state@var1012 ) {
105: setFlag (@expr1073744819 fIsPartialSpecialization , state@var1012 ) ;
106: }
107: void isForwardDeclaration ( bool state@var1013 ) {
108: setFlag (@expr1073744820 fIsForwardDeclaration , state@var1013 ) ;
109: }
110: void isVariadic ( bool state@var1014 ) {
111: setFlag (@expr1073744821 fIsVariadic , state@var1014 ) ;
112: }
113: void isFriend ( bool state@var1015 ) {
114: setFlag (@expr1073744822 fIsFriend , state@var1015 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var1016 ) const {
123: return (@expr2999 (@expr2999 mFlags@var1006 &@expr1073744825 flag@var1016 ) !=@expr1073744826 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var1017 , bool state@var1018 ) {
132: mFlags@var1006 =@expr1073744827 state@var1018 ?@expr1073744828 mFlags@var1006 |@expr1073744829 flag@var1017 :@expr1073744830 mFlags@var1006 &@expr1073744831 ~@expr1073744832 flag@var1017 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var1019 , const std :: string & scope@var1020 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var1021 , const std :: string & scope@var1022 , const Token * nameToken@var1023 , const Token * paramEnd@var1024 ) ;
150: TokenAndName ( const TokenAndName & other@var1025 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var1026 ) const {
154: return mToken@var1000 ==@expr1073744833 rhs@var1026 .@expr1073744834 mToken@var1027 &&@expr1073744835 mScope@var1001 ==@expr1073744836 rhs@var1026 .@expr1073744837 mScope@var1028 &&@expr1073744838 mName@var1002 ==@expr1073744839 rhs@var1026 .@expr1073744840 mName@var1029 &&@expr1073744841 mFullName@var1003 ==@expr1073744842 rhs@var1026 .@expr1073744843 mFullName@var1030 &&@expr1073744844
155: mNameToken@var1004 ==@expr1073744845 rhs@var1026 .@expr1073744846 mNameToken@var1031 &&@expr1073744847 mParamEnd@var1005 ==@expr1073744848 rhs@var1026 .@expr1073744849 mParamEnd@var1032 &&@expr1073744850 mFlags@var1006 ==@expr1073744851 rhs@var1026 .@expr1073744852 mFlags@var1033 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var1000 ;
160: }
161: void token ( Token * token@var1034 ) {
162: mToken@var1000 =@expr1073744853 token@var1034 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var1001 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var1002 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var1003 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var1004 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var1005 ;
178: }
179: void paramEnd ( const Token * end@var1035 ) {
180: mParamEnd@var1005 =@expr1073744854 end@var1035 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744855 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744856 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744857 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744858 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744859 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744860 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744861 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744862 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744863 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var1036 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var1037 ) const {
243:
244:
245: return (@expr3040 (@expr3040 mFlags@var1006 &@expr1073744866 fFamilyMask ) &@expr1073744867 (@expr3040 decl@var1037 .@expr1073744869 mFlags@var1038 &@expr1073744870 fFamilyMask ) ) !=@expr1073744871 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var1039 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var1040 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var1041 , const unsigned long numberOfArguments@var1042 , bool variadic@var1043 , const char patternAfter@var1044 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var1045 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var1046 , int & namepos@var1047 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1048 , int & namepos@var1049 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1050 , int & namepos@var1051 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1052 ,
306: bool & codeWithTemplates@var1053 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1054 , bool isTemplate@var1055 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1056 = nullptr , Token * backToken@var1057 = nullptr , bool isTemplate@var1058 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1059 , Token * end@var1060 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1061 , const std :: string & scope@var1062 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1063 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1064 ,
393: const std :: list < const Token * > & specializations@var1065 ,
394: const std :: time_t maxtime@var1066 ,
395: std :: set < std :: string > & expandedtemplates@var1067 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1068 , const Token * tok@var1069 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1070 , const Token * tok@var1071 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1072 ,
422: const TokenAndName & templateInstantiation@var1073 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1074 ,
424: const std :: string & newName@var1075 ,
425: bool copy@var1076 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1077 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1078 ,
435: const std :: string & newName@var1079 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1080 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1081 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1082 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1083 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1084 ,
458: const Token * templateInstantiationNameToken@var1085 ,
459: const std :: list < const Token * > & specializations@var1086 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1087 , const Token * end@var1088 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1089 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1090 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1091 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1092 ,
487: const std :: string & indent@var1093 = "    " ) const ;
488: void printOut ( const std :: string & text@var1094 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1095 ;
491: TokenList & mTokenList@var1096 ;
492: const Settings * mSettings@var1097 ;
493: ErrorLogger * mErrorLogger@var1098 ;
494: bool mChanged@var1099 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1100 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1101 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1102 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1103 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1104 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1105 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1106 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1107 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1108 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1109 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1110 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1111 ;
57: Token * back@var1112 ;
58: const TokenList * list@var1113 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1114 , const Token * bodyEnd_@var1115 , const std :: set < std :: string > & usingNamespaces_@var1116 = std :: set < std :: string > ( ) ) : name@var1117 ( name_@var1114 ) , bodyEnd@var1118 ( bodyEnd_@var1115 ) , usingNamespaces@var1119 ( usingNamespaces_@var1116 ) { }
63: std :: string name@var1117 ;
64: const Token * const bodyEnd@var1118 ;
65: std :: set < std :: string > usingNamespaces@var1119 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1120 ;
70: int mFileIndex@var1121 ;
71: int mLineNumber@var1122 ;
72: int mColumn@var1123 ;
73: int mExprId@var1124 ;
74:
75:
76: Token * mAstOperand1@var1125 ;
77: Token * mAstOperand2@var1126 ;
78: Token * mAstParent@var1127 ;
79:
80:
81: const Scope * mScope@var1128 ;
82: union {
83: const Function * mFunction@var1129 ;
84: const Variable * mVariable@var1130 ;
85: const :: Type * mType@var1131 ;
86: const Enumerator * mEnumerator@var1132 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1133 ;
94:
|
97:
98: int mIndex@var1134 ;
99:
100:
101: std :: string * mOriginalName@var1135 ;
102:
103:
104: ValueType * mValueType@var1136 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1137 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1138 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1139 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1140 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1141 ;
119: long long value@var1142 ;
120: struct CppcheckAttributes * next@var1143 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1144 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1145 ;
126:
127:
128: unsigned char mBits@var1146 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1147 , long long value@var1148 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1149 , long long * value@var1150 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1120 ( 0 )
135: , mFileIndex@var1121 ( 0 )
136: , mLineNumber@var1122 ( 0 )
137: , mColumn@var1123 ( 0 )
138: , mExprId@var1124 ( 0 )
139: , mAstOperand1@var1125 ( nullptr )
140: , mAstOperand2@var1126 ( nullptr )
141: , mAstParent@var1127 ( nullptr )
142: , mScope@var1128 ( nullptr )
143: , mFunction@var1129 ( nullptr )
144: , mProgressValue@var1133 ( 0 )
145: , mIndex@var1134 ( 0 )
146: , mOriginalName@var1135 ( nullptr )
147: , mValueType@var1136 ( nullptr )
148: , mValues@var1137 ( nullptr )
149: , mTemplateSimplifierPointers@var1139 ( nullptr )
150: , mScopeInfo@var1140 ( nullptr )
151: , mCppcheckAttributes@var1144 ( nullptr )
152: , mCpp11init@var1145 ( Cpp11init :: UNKNOWN )
153: , mBits@var1146 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1151 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1152 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1153 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1154 ) {
199: mStr@var1366 =@expr1073744872 s@var1154 ;
200: mImpl@var1372 .@expr1073744873 mVarId@var1403 =@expr1073744874 0 ;
201:
202: update_property_info (@expr1073744875 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1155 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1366 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1156 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1157 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1158 ) const ;
236: Token * tokAt ( int index@var1159 ) {
237: return const_cast < Token *@expr3052 > (@expr1073744877 const_cast < const Token *@expr3052 > (@expr1073744879 this@expr1073744880 ) .@expr1073744881 tokAt (@expr1073744882 index@var1159 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1160 ) const ;
245: Token * linkAt ( int index@var1161 ) {
246: return const_cast < Token *@expr3059 > (@expr1073744884 const_cast < const Token *@expr3059 > (@expr1073744886 this@expr1073744887 ) .@expr1073744888 linkAt (@expr1073744889 index@var1161 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1162 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1163 , const char ( & pattern@var1164 ) [ count ] ) {
276: return simpleMatch (@expr1073744891 tok@var1163 , pattern@var1164 , count@expr1073744890 -@expr1073744892 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1165 , const char pattern@var1166 [ ] , unsigned long pattern_len@var1167 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1168 , const char pattern@var1169 [ ] , int varid@var1170 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1171 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1172 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1173 , const Settings * const settings@var1174 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1175 , long long index@var1176 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1372 .@expr1073744893 mValueType@var1404 ;
366: }
367: void setValueType ( ValueType * vt@var1177 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1178 ; top@var1178 =@expr1073744894 this@expr1073744895 ;
371: while (@expr1073744896 top@var1178 &&@expr1073744897 !@expr1073744898 Token ::@expr1073744899 Match (@expr1073744900 top@var1178 .@expr3077 astParent (@expr3078 ) , ",|(" ) ) {
372: top@var1178 =@expr1073744903 top@var1178 .@expr3077 astParent (@expr3078 ) ; }
373: return top@var1178 ?@expr1073744906 top@var1178 .@expr1073744907 mImpl@var1179 .@expr1073744908 mValueType@var1180 :@expr1073744909 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1370 ;
378: }
379: void tokType ( Token :: Type t@var1181 ) {
380: mTokType@var1370 =@expr1073744910 t@var1181 ;
381:
382: const bool memoizedIsName@var1182 =@expr1073744911 mTokType@var1370 ==@expr1073744912 eName ||@expr1073744913 mTokType@var1370 ==@expr1073744914 eType ||@expr1073744915 mTokType@var1370 ==@expr1073744916 eVariable ||@expr1073744917
383: mTokType@var1370 ==@expr1073744918 eFunction ||@expr1073744919 mTokType@var1370 ==@expr1073744920 eKeyword ||@expr1073744921 mTokType@var1370 ==@expr3098 eBoolean ||@expr1073744923
384: mTokType@var1370 ==@expr3100 eEnumerator ;
385: setFlag (@expr1073744925 fIsName , memoizedIsName@var1182 ) ;
386:
387: const bool memoizedIsLiteral@var1183 =@expr1073744926 mTokType@var1370 ==@expr1073744927 eNumber ||@expr1073744928 mTokType@var1370 ==@expr1073744929 eString ||@expr1073744930 mTokType@var1370 ==@expr1073744931 eChar ||@expr1073744932
388: mTokType@var1370 ==@expr3098 eBoolean ||@expr1073744934 mTokType@var1370 ==@expr1073744935 eLiteral ||@expr1073744936 mTokType@var1370 ==@expr3100 eEnumerator ;
389: setFlag (@expr1073744938 fIsLiteral , memoizedIsLiteral@var1183 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1370 ==@expr1073744939 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073744940 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1371 ==@expr1073744941 fIsName &&@expr1073744942 mTokType@var1370 ==@expr1073744943 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073744944 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1370 ==@expr1073744945 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1370 ==@expr1073744946 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073744947 isConstOp (@expr1073744948 ) ||@expr1073744949
412: isAssignmentOp (@expr1073744950 ) ||@expr1073744951
413: mTokType@var1370 ==@expr1073744952 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073744953 isArithmeticalOp (@expr1073744954 ) ||@expr1073744955
417: mTokType@var1370 ==@expr1073744956 eLogicalOp ||@expr1073744957
418: mTokType@var1370 ==@expr1073744958 eComparisonOp ||@expr1073744959
419: mTokType@var1370 ==@expr1073744960 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073744961 ) ||@expr1073744962
423: mTokType@var1370 ==@expr1073744963 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1370 ==@expr1073744964 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1370 ==@expr1073744965 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1370 ==@expr1073744966 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1370 ==@expr1073744967 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1370 ==@expr1073744968 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073744969 ) !=@expr1073744970 nullptr &&@expr1073744971 astOperand2 (@expr1073744972 ) !=@expr1073744973 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1184 ) const {
444: return s@var1184 ==@expr1073744974 mStr@var1366 &&@expr1073744975 astOperand1 (@expr1073744976 ) !=@expr1073744977 nullptr &&@expr1073744978 astOperand2 (@expr1073744979 ) ==@expr1073744980 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1371 ;
450: }
451: void flags ( const unsigned int flags_@var1185 ) {
452: mFlags@var1371 =@expr1073744981 flags_@var1185 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073744982 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1186 ) {
458: setFlag (@expr1073744983 fIsUnsigned , sign@var1186 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073744984 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1187 ) {
464: setFlag (@expr1073744985 fIsSigned , sign@var1187 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073744986 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1188 ) {
470: setFlag (@expr1073744987 fIsPointerCompare , b@var1188 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073744988 fIsLong ) ;
474: }
475: void isLong ( bool size@var1189 ) {
476: setFlag (@expr1073744989 fIsLong , size@var1189 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073744990 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1190 ) {
482: setFlag (@expr1073744991 fIsStandardType , b@var1190 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073744992 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1191 ) {
488: setFlag (@expr1073744993 fIsExpandedMacro , m@var1191 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073744994 fIsCast ) ;
492: }
493: void isCast ( bool c@var1192 ) {
494: setFlag (@expr1073744995 fIsCast , c@var1192 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073744996 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1193 ) {
500: setFlag (@expr1073744997 fIsAttributeConstructor , ac@var1193 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073744998 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1194 ) {
506: setFlag (@expr1073744999 fIsAttributeDestructor , value@var1194 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745000 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1195 ) {
512: setFlag (@expr1073745001 fIsAttributeUnused , unused@var1195 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745002 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1196 ) {
518: setFlag (@expr1073745003 fIsAttributeUsed , unused@var1196 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745004 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1197 ) {
524: setFlag (@expr1073745005 fIsAttributePure , value@var1197 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745006 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1198 ) {
530: setFlag (@expr1073745007 fIsAttributeConst , value@var1198 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745008 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1199 ) {
536: setFlag (@expr1073745009 fIsAttributeNoreturn , value@var1199 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745010 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1200 ) {
542: setFlag (@expr1073745011 fIsAttributeNothrow , value@var1200 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745012 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1201 ) {
548: setFlag (@expr1073745013 fIsAttributePacked , value@var1201 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745014 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1202 ) {
554: setFlag (@expr1073745015 fIsAttributeNodiscard , value@var1202 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745016 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1203 ) {
560: setFlag (@expr1073745017 fIsAttributeMaybeUnused , value@var1203 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1204 , long long value@var1205 ) {
563: mImpl@var1372 .@expr1073745018 setCppcheckAttribute (@expr1073745019 type@var1204 , value@var1205 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1206 , long long * value@var1207 ) const {
566: return mImpl@var1372 .@expr1073745020 getCppcheckAttribute (@expr1073745021 type@var1206 , value@var1207 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745022 mImpl@var1372 .@expr1073745023 mCppcheckAttributes@var1405 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745024 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745025 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1208 ) {
578: setFlag (@expr1073745026 fIsOperatorKeyword , value@var1208 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745027 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1209 ) {
584: setFlag (@expr1073745028 fIsComplex , value@var1209 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745029 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1210 ) {
590: setFlag (@expr1073745030 fIsEnumType , value@var1210 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745031 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1211 ) {
596: setFlag (@expr1073745032 fAtAddress , b@var1211 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745033 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1212 ) {
602: setFlag (@expr1073745034 fIncompleteVar , b@var1212 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745035 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1213 ) {
609: setFlag (@expr1073745036 fIsIncompleteConstant , b@var1213 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745037 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1214 ) {
616: setFlag (@expr1073745038 fConstexpr , b@var1214 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745039 fExternC ) ;
621: }
622: void isExternC ( bool b@var1215 ) {
623: setFlag (@expr1073745040 fExternC , b@var1215 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745041 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1216 ) {
630: setFlag (@expr1073745042 fIsSplitVarDeclComma , b@var1216 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745043 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1217 ) {
637: setFlag (@expr1073745044 fIsSplitVarDeclEq , b@var1217 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745045 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1218 ) {
644: setFlag (@expr1073745046 fIsImplicitInt , b@var1218 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745047 fIsInline ) ;
649: }
650: void isInline ( bool b@var1219 ) {
651: setFlag (@expr1073745048 fIsInline , b@var1219 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745049 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1220 ) {
658: setFlag (@expr1073745050 fIsRemovedVoidParameter , b@var1220 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745051 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1221 ) {
665: setFlag (@expr1073745052 fIsTemplate , b@var1221 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745053 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1222 ) {
672: setFlag (@expr1073745054 fIsSimplifedScope , b@var1222 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1372 .@expr1073745055 mBits@var1406 >@expr1073745056 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1372 .@expr1073745057 mBits@var1406 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1372 .@expr1073745058 mTemplateSimplifierPointers@var1407 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1223 ) {
685: if (@expr1073745059 !@expr1073745060 mImpl@var1372 .@expr3237 mTemplateSimplifierPointers@var1407 ) {
686: mImpl@var1372 .@expr3237 mTemplateSimplifierPointers@var1407 =@expr1073745063 new std ::@expr1073745064 set < TemplateSimplifier ::@expr1073745065 TokenAndName *@expr1073745066 > ; }
687: mImpl@var1372 .@expr3237 mTemplateSimplifierPointers@var1407 .@expr1073745068 insert (@expr1073745069 tokenAndName@var1223 ) ;
688: }
689: void setBits ( const unsigned char b@var1224 ) {
690: mImpl@var1372 .@expr1073745070 mBits@var1406 =@expr1073745071 b@var1224 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3248 (@expr3248 (@expr3248 mTokType@var1370 ==@expr1073745075 eString ) &&@expr1073745076 isPrefixStringCharLiteral (@expr1073745077 mStr@var1366 , '"' , "u8" ) ) ||@expr1073745078
695: (@expr3248 (@expr3248 mTokType@var1370 ==@expr1073745081 eChar ) &&@expr1073745082 isPrefixStringCharLiteral (@expr1073745083 mStr@var1366 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3260 (@expr3260 (@expr3260 mTokType@var1370 ==@expr1073745087 eString ) &&@expr1073745088 isPrefixStringCharLiteral (@expr1073745089 mStr@var1366 , '"' , "u" ) ) ||@expr1073745090
700: (@expr3260 (@expr3260 mTokType@var1370 ==@expr1073745093 eChar ) &&@expr1073745094 isPrefixStringCharLiteral (@expr1073745095 mStr@var1366 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3272 (@expr3272 (@expr3272 mTokType@var1370 ==@expr1073745099 eString ) &&@expr1073745100 isPrefixStringCharLiteral (@expr1073745101 mStr@var1366 , '"' , "U" ) ) ||@expr1073745102
705: (@expr3272 (@expr3272 mTokType@var1370 ==@expr1073745105 eChar ) &&@expr1073745106 isPrefixStringCharLiteral (@expr1073745107 mStr@var1366 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3284 (@expr3284 (@expr3284 mTokType@var1370 ==@expr1073745111 eString ) &&@expr1073745112 isPrefixStringCharLiteral (@expr1073745113 mStr@var1366 , '"' , "" ) ) ||@expr1073745114
710: (@expr3284 (@expr3284 mTokType@var1370 ==@expr1073745117 eChar ) &&@expr1073745118 isPrefixStringCharLiteral (@expr1073745119 mStr@var1366 , '\'' , "" ) &&@expr1073745120 mStr@var1366 .@expr1073745121 length (@expr1073745122 ) ==@expr1073745123 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3300 (@expr3300 (@expr3300 mTokType@var1370 ==@expr1073745127 eChar ) &&@expr1073745128 isPrefixStringCharLiteral (@expr1073745129 mStr@var1366 , '\'' , "" ) ) &&@expr1073745130
715: (@expr3300 mStr@var1366 .@expr1073745132 length (@expr1073745133 ) >@expr1073745134 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745135 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1225 ) {
738: setFlag (@expr1073745136 fIsTemplateArg , value@var1225 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1226 , const char ( & pattern@var1227 ) [ count ] ) {
743: return findsimplematch (@expr1073745138 startTok@var1226 , pattern@var1227 , count@expr1073745137 -@expr1073745139 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1228 , const char pattern@var1229 [ ] , unsigned long pattern_len@var1230 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1231 , const char ( & pattern@var1232 ) [ count ] , const Token * const end@var1233 ) {
749: return findsimplematch (@expr1073745141 startTok@var1231 , pattern@var1232 , count@expr1073745140 -@expr1073745142 1 , end@var1233 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1234 , const char pattern@var1235 [ ] , unsigned long pattern_len@var1236 , const Token * const end@var1237 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1238 , const char pattern@var1239 [ ] , const int varId@var1240 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1241 , const char pattern@var1242 [ ] , const Token * const end@var1243 , const int varId@var1244 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1245 , const char ( & pattern@var1246 ) [ count ] ) {
758: return findsimplematch (@expr1073745144 startTok@var1245 , pattern@var1246 , count@expr1073745143 -@expr1073745145 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1247 , const char pattern@var1248 [ ] , unsigned long pattern_len@var1249 ) {
761: return const_cast < Token *@expr3322 > (@expr1073745147 findsimplematch (@expr1073745148 const_cast < const Token *@expr3322 > (@expr1073745150 startTok@var1247 ) , pattern@var1248 , pattern_len@var1249 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1250 , const char ( & pattern@var1251 ) [ count ] , const Token * const end@var1252 ) {
765: return findsimplematch (@expr1073745152 startTok@var1250 , pattern@var1251 , count@expr1073745151 -@expr1073745153 1 , end@var1252 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1253 , const char pattern@var1254 [ ] , unsigned long pattern_len@var1255 , const Token * const end@var1256 ) {
768: return const_cast < Token *@expr3330 > (@expr1073745155 findsimplematch (@expr1073745156 const_cast < const Token *@expr3330 > (@expr1073745158 startTok@var1253 ) , pattern@var1254 , pattern_len@var1255 , end@var1256 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1257 , const char pattern@var1258 [ ] , const int varId@var1259 = 0 ) {
772: return const_cast < Token *@expr3335 > (@expr1073745160 findmatch (@expr1073745161 const_cast < const Token *@expr3335 > (@expr1073745163 startTok@var1257 ) , pattern@var1258 , varId@var1259 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1260 , const char pattern@var1261 [ ] , const Token * const end@var1262 , const int varId@var1263 = 0 ) {
775: return const_cast < Token *@expr3340 > (@expr1073745165 findmatch (@expr1073745166 const_cast < const Token *@expr3340 > (@expr1073745168 startTok@var1260 ) , pattern@var1261 , end@var1262 , varId@var1263 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1264 , const char * haystack@var1265 , int varid@var1266 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1372 .@expr1073745169 mFileIndex@var1408 ;
796: }
797: void fileIndex ( int indexOfFile@var1267 ) {
798: mImpl@var1372 .@expr1073745170 mFileIndex@var1408 =@expr1073745171 indexOfFile@var1267 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1372 .@expr1073745172 mLineNumber@var1409 ;
803: }
804: void linenr ( int lineNumber@var1268 ) {
805: mImpl@var1372 .@expr1073745173 mLineNumber@var1409 =@expr1073745174 lineNumber@var1268 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1372 .@expr1073745175 mColumn@var1410 ;
810: }
811: void column ( int c@var1269 ) {
812: mImpl@var1372 .@expr1073745176 mColumn@var1410 =@expr1073745177 c@var1269 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1367 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1270 , const Token * end@var1271 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1272 , const std :: string & originalNameStr@var1273 = emptyString@var1 , bool prepend@var1274 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1275 , const std :: string & originalNameStr@var1276 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745178 tokenStr@var1275 , originalNameStr@var1276 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1368 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1372 .@expr1073745179 mVarId@var1403 ;
851: }
852: void varId ( int id@var1277 ) {
853: mImpl@var1372 .@expr1073745180 mVarId@var1403 =@expr1073745181 id@var1277 ;
854: if (@expr1073745182 id@var1277 !=@expr1073745183 0 ) {
855: tokType (@expr1073745184 eVariable ) ;
856: isStandardType (@expr1073745185 false ) ;
857: } else {
858: update_property_info (@expr1073745186 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745187 mImpl@var1372 .@expr3364 mExprId@var1411 ) {
864: return mImpl@var1372 .@expr3364 mExprId@var1411 ; }
865: return mImpl@var1372 .@expr1073745190 mVarId@var1403 ;
866: }
867: void exprId ( int id@var1278 ) {
868: mImpl@var1372 .@expr1073745191 mExprId@var1411 =@expr1073745192 id@var1278 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1279 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1280 , const std :: vector < std :: string > & fileNames@var1281 ) const ;
888:
|
891:
892: void printLines ( int lines@var1282 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1283 , Token * start@var1284 , Token * end@var1285 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1286 ; varid@var1286 = false ;
905: bool exprid@var1287 ; exprid@var1287 = false ;
906: bool idtype@var1288 ; idtype@var1288 = false ;
907: bool attributes@var1289 ; attributes@var1289 = false ;
908: bool macro@var1290 ; macro@var1290 = false ;
909: bool linenumbers@var1291 ; linenumbers@var1291 = false ;
910: bool linebreaks@var1292 ; linebreaks@var1292 = false ;
911: bool files@var1293 ; files@var1293 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1294 ;
914: options@var1294 .@expr1073745193 attributes@var1295 =@expr1073745194 true ;
915: options@var1294 .@expr1073745195 macro@var1296 =@expr1073745196 true ;
916: options@var1294 .@expr1073745197 linenumbers@var1297 =@expr1073745198 true ;
917: options@var1294 .@expr1073745199 linebreaks@var1298 =@expr1073745200 true ;
918: options@var1294 .@expr1073745201 files@var1299 =@expr1073745202 true ;
919: return options@var1294 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1300 ; options@var1300 =@expr1073745203 forDebug (@expr1073745204 ) ;
923: options@var1300 .@expr1073745205 varid@var1301 =@expr1073745206 true ;
924: return options@var1300 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1302 ; options@var1302 =@expr1073745207 forDebug (@expr1073745208 ) ;
928: options@var1302 .@expr1073745209 exprid@var1303 =@expr1073745210 true ;
929: return options@var1302 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1304 ; options@var1304 =@expr1073745211 forDebug (@expr1073745212 ) ;
933: options@var1304 .@expr1073745213 exprid@var1305 =@expr1073745214 true ;
934: options@var1304 .@expr1073745215 varid@var1306 =@expr1073745216 true ;
935: options@var1304 .@expr1073745217 idtype@var1307 =@expr1073745218 true ;
936: return options@var1304 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1308 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1309 , bool attributes@var1310 , bool macro@var1311 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1312 , const std :: vector < std :: string > * fileNames@var1313 = nullptr , const Token * end@var1314 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1315 , bool attributes@var1316 = true ) const ;
952: std :: string stringifyList ( bool varid@var1317 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1318 , bool attributes@var1319 , bool linenumbers@var1320 , bool linebreaks@var1321 , bool files@var1322 , const std :: vector < std :: string > * fileNames@var1323 = nullptr , const Token * end@var1324 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1325 ) {
983: mLink@var1369 =@expr1073745219 linkToToken@var1325 ;
984: if (@expr1073745220 mStr@var1366 ==@expr1073745221 "<" ||@expr1073745222 mStr@var1366 ==@expr1073745223 ">" ) {
985: update_property_info (@expr1073745224 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1369 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1326 ) {
1006: mImpl@var1372 .@expr1073745225 mScope@var1412 =@expr1073745226 s@var1326 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1372 .@expr1073745227 mScope@var1412 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1327 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1370 ==@expr1073745228 eFunction ||@expr1073745229 mTokType@var1370 ==@expr1073745230 eLambda ?@expr1073745231 mImpl@var1372 .@expr1073745232 mFunction@var1413 :@expr1073745233 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1328 ) {
1034: mImpl@var1372 .@expr1073745234 mVariable@var1414 =@expr1073745235 v@var1328 ;
1035: if (@expr1073745236 v@var1328 ||@expr1073745237 mImpl@var1372 .@expr1073745238 mVarId@var1403 ) {
1036: tokType (@expr1073745239 eVariable ) ; }
1037: else { if (@expr1073745240 mTokType@var1370 ==@expr1073745241 eVariable ) {
1038: tokType (@expr1073745242 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1370 ==@expr1073745243 eVariable ?@expr1073745244 mImpl@var1372 .@expr1073745245 mVariable@var1414 :@expr1073745246 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1329 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1370 ==@expr1073745247 eType ?@expr1073745248 mImpl@var1372 .@expr1073745249 mType@var1415 :@expr1073745250 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1330 , const Token * * typeTok@var1331 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1332 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1333 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1370 ==@expr1073745251 eEnumerator ?@expr1073745252 mImpl@var1372 .@expr1073745253 mEnumerator@var1416 :@expr1073745254 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1334 ) {
1079: mImpl@var1372 .@expr1073745255 mEnumerator@var1416 =@expr1073745256 e@var1334 ;
1080: if (@expr1073745257 e@var1334 ) {
1081: tokType (@expr1073745258 eEnumerator ) ; }
1082: else { if (@expr1073745259 mTokType@var1370 ==@expr1073745260 eEnumerator ) {
1083: tokType (@expr1073745261 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1335 , Token * end@var1336 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1337 , Token * srcEnd@var1338 , Token * newLocation@var1339 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1372 .@expr1073745262 mProgressValue@var1417 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1340 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1372 .@expr3439 mOriginalName@var1418 ?@expr1073745264 *@expr1073745265 mImpl@var1372 .@expr3439 mOriginalName@var1418 :@expr1073745267 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1372 .@expr3444 mValues@var1391 ?@expr1073745269 *@expr1073745270 mImpl@var1372 .@expr3444 mValues@var1391 :@expr1073745272 TokenImpl ::@expr1073745273 mEmptyValueList@var1138 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1341 ) {
1164: if (@expr1073745274 !@expr1073745275 mImpl@var1372 .@expr3452 mOriginalName@var1418 ) {
1165: mImpl@var1372 .@expr3452 mOriginalName@var1418 =@expr1073745278 new std ::@expr1073745279 string (@expr1073745280 name@var1341 ) ; }
1166: else {
1167: *@expr1073745281 mImpl@var1372 .@expr3452 mOriginalName@var1418 =@expr1073745283 name@var1341 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1342 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1343 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1344 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1372 .@expr1073745285 mValues@var1391 .@expr1073745286 front (@expr1073745287 ) .@expr1073745288 intvalue@expr1073745284 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1345 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1346 , long long path@var1347 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1348 , const Settings * settings@var1349 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1350 , const Settings * settings@var1351 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1352 , int argnr@var1353 , const Settings * settings@var1354 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1355 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1356 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1357 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1358 ) {
1200: if (@expr1073745289 mImpl@var1372 .@expr3466 mValues@var1391 ) {
1201: mImpl@var1372 .@expr3466 mValues@var1391 .@expr1073745292 remove_if (@expr1073745293 pred@var1358 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1372 .@expr1073745294 mIndex@var1419 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1359 ) {
1213: mNext@var1367 =@expr1073745295 nextToken@var1359 ;
1214: }
1215: void previous ( Token * previousToken@var1360 ) {
1216: mPrevious@var1368 =@expr1073745296 previousToken@var1360 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1361 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1362 , const char * word@var1363 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1364 , char c@var1365 ) ;
1235:
1236: std :: string mStr@var1366 ;
1237:
1238: Token * mNext@var1367 ;
1239: Token * mPrevious@var1368 ;
1240: Token * mLink@var1369 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1370 ;
1283:
1284: uint64_t mFlags@var1371 ;
1285:
1286: TokenImpl * mImpl@var1372 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1373 ) const {
1294: return (@expr3473 (@expr3473 mFlags@var1371 &@expr1073745299 flag_@var1373 ) !=@expr1073745300 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1374 , bool state_@var1375 ) {
1303: mFlags@var1371 =@expr1073745301 state_@var1375 ?@expr1073745302 mFlags@var1371 |@expr1073745303 flag_@var1374 :@expr1073745304 mFlags@var1371 &@expr1073745305 ~@expr1073745306 flag_@var1374 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1376 , const int indent1@var1377 = 0 , const int indent2@var1378 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1379 ) ;
1321: void astOperand2 ( Token * tok@var1380 ) ;
1322: void astParent ( Token * tok@var1381 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1372 .@expr1073745307 mAstOperand1@var1382 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1372 .@expr1073745308 mAstOperand1@var1382 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1372 .@expr1073745309 mAstOperand2@var1383 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1372 .@expr1073745310 mAstOperand2@var1383 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1372 .@expr1073745311 mAstParent@var1384 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1372 .@expr1073745312 mAstParent@var1384 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745313 !@expr1073745314 astParent (@expr3491 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745316 this@expr3493 ==@expr1073745318 astParent (@expr3491 ) .@expr3496 astOperand1 (@expr3497 ) ) {
1346: return astParent (@expr3491 ) .@expr3499 astOperand2 (@expr3500 ) ; }
1347: else { if (@expr1073745325 this@expr3493 ==@expr1073745326 astParent (@expr3491 ) .@expr3499 astOperand2 (@expr3500 ) ) {
1348: return astParent (@expr3491 ) .@expr3496 astOperand1 (@expr3497 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745333 !@expr1073745334 astParent (@expr3511 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745336 this@expr3513 ==@expr1073745338 astParent (@expr3511 ) .@expr3516 astOperand1 (@expr3517 ) ) {
1356: return astParent (@expr3511 ) .@expr3519 astOperand2 (@expr3520 ) ; }
1357: else { if (@expr1073745345 this@expr3513 ==@expr1073745346 astParent (@expr3511 ) .@expr3519 astOperand2 (@expr3520 ) ) {
1358: return astParent (@expr3511 ) .@expr3516 astOperand1 (@expr3517 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1385 ; ret@var1385 =@expr1073745353 this@expr1073745354 ;
1364: while (@expr1073745355 ret@var1385 .@expr3532 mImpl@var1386 .@expr3533 mAstParent@var1387 ) {
1365: ret@var1385 =@expr1073745358 ret@var1385 .@expr3532 mImpl@var1386 .@expr3533 mAstParent@var1387 ; }
1366: return ret@var1385 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1388 ; ret@var1388 =@expr1073745361 this@expr1073745362 ;
1371: while (@expr1073745363 ret@var1388 .@expr3540 mImpl@var1389 .@expr3541 mAstParent@var1390 ) {
1372: ret@var1388 =@expr1073745366 ret@var1388 .@expr3540 mImpl@var1389 .@expr3541 mAstParent@var1390 ; }
1373: return ret@var1388 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1372 .@expr1073745369 mAstOperand1@var1382 =@expr1073745370 mImpl@var1372 .@expr1073745371 mAstOperand2@var1383 =@expr1073745372 mImpl@var1372 .@expr1073745373 mAstParent@var1384 =@expr1073745374 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1372 .@expr3551 mValues@var1391 ;
1393: mImpl@var1372 .@expr3551 mValues@var1391 =@expr1073745377 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1392 = "" ) const {
1397: std ::@expr1073745378 string ret@var1393 ;
1398: if (@expr1073745379 mImpl@var1372 .@expr3556 mAstOperand1@var1382 ) {
1399: ret@var1393 =@expr1073745381 mImpl@var1372 .@expr3556 mAstOperand1@var1382 .@expr1073745383 astString (@expr1073745384 sep@var1392 ) ; }
1400: if (@expr1073745385 mImpl@var1372 .@expr3562 mAstOperand2@var1383 ) {
1401: ret@var1393 +=@expr1073745387 mImpl@var1372 .@expr3562 mAstOperand2@var1383 .@expr1073745389 astString (@expr1073745390 sep@var1392 ) ; }
1402: return ret@var1393 +@expr1073745391 sep@var1392 +@expr1073745392 mStr@var1366 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1394 , bool xml@var1395 , const std :: vector < std :: string > & fileNames@var1396 , std :: ostream & out@var1397 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1398 , std :: ostream & out@var1399 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1400 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1401 ) const {
1419: mImpl@var1372 .@expr1073745393 mCpp11init@var1402 =@expr1073745394 cpp11init@var1401 ?@expr1073745395 TokenImpl ::@expr3572 Cpp11init ::@expr1073745397 CPP11INIT :@expr1073745398 TokenImpl ::@expr3572 Cpp11init ::@expr1073745400 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1372 .@expr1073745401 mCpp11init@var1402 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1420 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1421 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1422 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1423 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1424 ( nullptr ) , num@var1425 ( 0 ) , known@var1426 ( true ) { }
62:
63: const Token * tok@var1424 ;
64: long long num@var1425 ;
65: bool known@var1426 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1427 ;
72: const Scope * classScope@var1428 ;
73: const Scope * enclosingScope@var1429 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1430 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1432 ( nullptr ) , nameTok@var1433 ( nullptr ) , access@var1434 ( AccessControl :: Public ) , isVirtual@var1435 ( false ) { }
82:
83: std :: string name@var1431 ;
84: const Type * type@var1432 ;
85: const Token * nameTok@var1433 ;
86: AccessControl access@var1434 ;
87: bool isVirtual@var1435 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1436 ) const {
90: return this@expr1073745402 .@expr1073745403 type@var1432 <@expr1073745404 rhs@var1436 .@expr1073745405 type@var1437 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1438 ( nullptr ) , nameEnd@var1439 ( nullptr ) , type@var1440 ( nullptr ) { }
97:
98: const Token * nameStart@var1438 ;
99: const Token * nameEnd@var1439 ;
100: const Type * type@var1440 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1441 ;
104: std :: vector < FriendInfo > friendList@var1442 ;
105:
106: const Token * typeStart@var1443 ;
107: const Token * typeEnd@var1444 ;
108: long long sizeOf@var1445 ;
109:
110: Type ( const Token * classDef_@var1446 = nullptr , const Scope * classScope_@var1447 = nullptr , const Scope * enclosingScope_@var1448 = nullptr ) :
111: classDef@var1427 ( classDef_@var1446 ) ,
112: classScope@var1428 ( classScope_@var1447 ) ,
113: enclosingScope@var1429 ( enclosingScope_@var1448 ) ,
114: needInitialization@var1430 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1443 ( nullptr ) ,
116: typeEnd@var1444 ( nullptr ) ,
117: sizeOf@var1445 ( 0 ) {
118: if (@expr1073745406 classDef_@var1446 &&@expr1073745407 classDef_@var1446 .@expr3584 str (@expr3585 ) ==@expr1073745410 "enum" ) {
119: needInitialization@var1430 =@expr1073745411 NeedInitialization ::@expr1073745412 True ; }
120: else { if (@expr1073745413 classDef_@var1446 &&@expr1073745414 classDef_@var1446 .@expr3584 str (@expr3585 ) ==@expr1073745417 "using" ) {
121: typeStart@var1443 =@expr1073745418 classDef@var1427 .@expr1073745419 tokAt (@expr1073745420 3 ) ;
122: typeEnd@var1444 =@expr1073745421 typeStart@var1443 ;
123: while (@expr1073745422 typeEnd@var1444 .@expr3599 next (@expr3600 ) &&@expr1073745425 typeEnd@var1444 .@expr3599 next (@expr3600 ) .@expr1073745428 str (@expr1073745429 ) !=@expr1073745430 ";" ) {
124: typeEnd@var1444 =@expr1073745431 typeEnd@var1444 .@expr3599 next (@expr3600 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1427 ?@expr1073745434 classDef@var1427 .@expr1073745435 str (@expr1073745436 ) :@expr1073745437 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1427 &&@expr1073745438 classDef@var1427 .@expr1073745439 str (@expr1073745440 ) ==@expr1073745441 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1449 , const Token * tok1@var1450 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1451 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1452 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1453 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1454 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1455 ) : scope@var1456 ( scope_@var1455 ) , name@var1457 ( nullptr ) , value@var1458 ( 0 ) , start@var1459 ( nullptr ) , end@var1460 ( nullptr ) , value_known@var1461 ( false ) { }
167: const Scope * scope@var1456 ;
168: const Token * name@var1457 ;
169: long long value@var1458 ;
170: const Token * start@var1459 ;
171: const Token * end@var1460 ;
172: bool value_known@var1461 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous4 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1462 ) const {
204: return (@expr3618 (@expr3618 mFlags@var1498 &@expr1073745444 flag_@var1462 ) !=@expr1073745445 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1463 , bool state_@var1464 ) {
213: mFlags@var1498 =@expr1073745446 state_@var1464 ?@expr1073745447 mFlags@var1498 |@expr1073745448 flag_@var1463 :@expr1073745449 mFlags@var1498 &@expr1073745450 ~@expr1073745451 flag_@var1463 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1465 , bool * isContainer@var1466 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1467 , const Token * start_@var1468 , const Token * end_@var1469 ,
226: int index_@var1470 , AccessControl access_@var1471 , const Type * type_@var1472 ,
227: const Scope * scope_@var1473 , const Settings * settings@var1474 )
228: : mNameToken@var1493 ( name_@var1467 ) ,
229: mTypeStartToken@var1494 ( start_@var1468 ) ,
230: mTypeEndToken@var1495 ( end_@var1469 ) ,
231: mIndex@var1496 ( index_@var1470 ) ,
232: mAccess@var1497 ( access_@var1471 ) ,
233: mFlags@var1498 ( 0 ) ,
234: mType@var1499 ( type_@var1472 ) ,
235: mScope@var1500 ( scope_@var1473 ) ,
236: mValueType@var1501 ( nullptr ) {
237: evaluate (@expr1073745452 settings@var1474 ) ;
238: }
239:
240: Variable ( const Token * name_@var1475 , const std :: string & clangType@var1476 , const Token * typeStart@var1477 ,
241: const Token * typeEnd@var1478 , int index_@var1479 , AccessControl access_@var1480 ,
242: const Type * type_@var1481 , const Scope * scope_@var1482 ) ;
243:
244: Variable ( const Variable & var@var1483 , const Scope * scope@var1484 ) ;
245:
246: Variable ( const Variable & var@var1485 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1486 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1493 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1494 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1495 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745453 mNameToken@var1493 ) {
300: return mNameToken@var1493 .@expr1073745454 str (@expr1073745455 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745456 mNameToken@var1493 ) {
312: return mNameToken@var1493 .@expr1073745457 varId (@expr1073745458 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1496 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1497 ==@expr1073745459 AccessControl ::@expr1073745460 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1497 ==@expr1073745461 AccessControl ::@expr1073745462 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1497 ==@expr1073745463 AccessControl ::@expr1073745464 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1497 ==@expr1073745465 AccessControl ::@expr1073745466 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1497 ==@expr1073745467 AccessControl ::@expr1073745468 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1497 ==@expr1073745469 AccessControl ::@expr1073745470 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745472 mAccess@var1497 ==@expr1073745473 AccessControl ::@expr1073745474 Local@expr1073745471 ) &&@expr1073745475 !@expr1073745476 isExtern (@expr1073745477 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745478 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745479 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745480 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745481 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745482 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1497 ==@expr1073745483 AccessControl ::@expr1073745484 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745485 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745486 fIsArray ) &&@expr1073745487 !@expr1073745488 getFlag (@expr1073745489 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745490 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745491 ) &&@expr1073745492 getFlag (@expr1073745493 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745494 fIsArray ) ||@expr1073745495 getFlag (@expr1073745496 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745497 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745498 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745499 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745500 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1499 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1499 ?@expr1073745501 mType@var1499 .@expr1073745502 classScope@var1504 :@expr1073745503 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1500 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1502 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1487 ) const {
550: return mDimensions@var1502 [@expr1073745504 index_@var1487 ] .@expr1073745505 num@var2006 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1488 ) const {
558: return mDimensions@var1502 [@expr1073745506 index_@var1488 ] .@expr1073745507 known@var2007 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745508 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745509 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745510 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1489 ) const {
602: return isStlType (@expr1073745511 ) &&@expr1073745512 stlType@var1489 ==@expr1073745513 mTypeStartToken@var1494 .@expr1073745514 strAt (@expr1073745515 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1490 ) const {
616: return isStlType (@expr1073745516 ) &&@expr1073745517 stlTypes@var1490 .@expr1073745518 find (@expr1073745519 mTypeStartToken@var1494 .@expr1073745520 strAt (@expr1073745521 2 ) ) !=@expr1073745522 stlTypes@var1490 .@expr1073745523 end (@expr1073745524 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745525 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr3702 ) &&@expr1073745527 type (@expr3702 ) .@expr1073745529 isEnumType (@expr1073745530 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745531 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1501 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1491 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1497 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1492 ) {
660: mType@var1499 =@expr1073745532 t@var1492 ;
661: }
662:
663:
664: const Token * mNameToken@var1493 ;
665:
666:
667: const Token * mTypeStartToken@var1494 ;
668:
669:
670: const Token * mTypeEndToken@var1495 ;
671:
672:
673: int mIndex@var1496 ;
674:
675:
676: AccessControl mAccess@var1497 ;
677:
678:
679: unsigned int mFlags@var1498 ;
680:
681:
682: const Type * mType@var1499 ;
683:
684:
685: const Scope * mScope@var1500 ;
686:
687: ValueType * mValueType@var1501 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1502 ;
691:
692:
693: void evaluate ( const Settings * settings@var1503 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous5 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1505 ) const {
735: return (@expr3709 (@expr3709 mFlags@var1554 &@expr1073745535 flag@var1505 ) !=@expr1073745536 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1506 , bool state@var1507 ) {
744: mFlags@var1554 =@expr1073745537 state@var1507 ?@expr1073745538 mFlags@var1554 |@expr1073745539 flag@var1506 :@expr1073745540 mFlags@var1554 &@expr1073745541 ~@expr1073745542 flag@var1506 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1508 , const Token * tok@var1509 , const Scope * scope@var1510 , const Token * tokDef@var1511 , const Token * tokArgDef@var1512 ) ;
751: Function ( const Token * tokenDef@var1513 , const std :: string & clangType@var1514 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1524 .@expr1073745543 str (@expr1073745544 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1532 .@expr1073745545 size (@expr1073745546 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1532 .@expr1073745547 size (@expr1073745548 ) -@expr1073745549 initArgCount@var1533 ;
764: }
765: const Variable * getArgumentVar ( int num@var1515 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1533 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1516 , const Scope * scope@var1517 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1518 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1519 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1534 ==@expr1073745550 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1534 ==@expr1073745551 eConstructor ||@expr1073745552
785: type@var1534 ==@expr1073745553 eCopyConstructor ||@expr1073745554
786: type@var1534 ==@expr1073745555 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1534 ==@expr1073745556 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1524 .@expr1073745557 isAttributeConstructor (@expr1073745558 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1524 .@expr1073745559 isAttributeDestructor (@expr1073745560 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1524 .@expr1073745561 isAttributePure (@expr1073745562 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1524 .@expr1073745563 isAttributeConst (@expr1073745564 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1524 .@expr1073745565 isAttributeNoreturn (@expr1073745566 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1524 .@expr1073745567 isAttributeNothrow (@expr1073745568 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1524 .@expr1073745569 isAttributeNodiscard (@expr1073745570 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745571 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745572 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745573 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745574 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745575 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745576 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745577 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745578 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745579 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745580 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745581 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745582 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745583 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745584 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745585 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745586 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745587 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745588 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745589 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745590 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745591 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745592 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1520 ) {
881: setFlag (@expr1073745593 fHasBody , state@var1520 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745594 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745595 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1521 ) {
891: setFlag (@expr1073745596 fIsEscapeFunction , state@var1521 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745597 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1522 ) {
898: setFlag (@expr1073745598 fIsConstexpr , state@var1522 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1523 ) const ;
901:
902: const Token * tokenDef@var1524 ;
903: const Token * argDef@var1525 ;
904: const Token * token@var1526 ;
905: const Token * arg@var1527 ;
906: const Token * retDef@var1528 ;
907: const :: Type * retType@var1529 ;
908: const Scope * functionScope@var1530 ;
909: const Scope * nestedIn@var1531 ;
910: std :: list < Variable > argumentList@var1532 ;
911: int initArgCount@var1533 ;
912: Type type@var1534 ;
913: AccessControl access@var1535 ;
914: const Token * noexceptArg@var1536 ;
915: const Token * throwArg@var1537 ;
916: const Token * templateDef@var1538 ;
917: const Token * functionPointerUsage@var1539 ;
918:
919: bool argsMatch ( const Scope * scope@var1540 , const Token * first@var1541 , const Token * second@var1542 , const std :: string & path@var1543 , int path_length@var1544 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1545 , bool unknown@var1546 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1547 , bool unknown@var1548 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1549 , bool unknown@var1550 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1551 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745599 this@expr1073745600 .@expr1073745601 hasTrailingReturnType (@expr1073745602 ) ) {
931: return Token ::@expr1073745603 findmatch (@expr1073745604 retDef@var1528 , "{|;" ) ;
932: } else {
933: return tokenDef@var1524 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1552 , bool * foundAllBaseClasses@var1553 ) const ;
946:
947: unsigned int mFlags@var1554 ;
948:
949: void isInline ( bool state@var1555 ) {
950: setFlag (@expr1073745605 fIsInline , state@var1555 ) ;
951: }
952: void isConst ( bool state@var1556 ) {
953: setFlag (@expr1073745606 fIsConst , state@var1556 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1557 ) {
956: setFlag (@expr1073745607 fHasVirtualSpecifier , state@var1557 ) ;
957: }
958: void isPure ( bool state@var1558 ) {
959: setFlag (@expr1073745608 fIsPure , state@var1558 ) ;
960: }
961: void isStatic ( bool state@var1559 ) {
962: setFlag (@expr1073745609 fIsStatic , state@var1559 ) ;
963: }
964: void isStaticLocal ( bool state@var1560 ) {
965: setFlag (@expr1073745610 fIsStaticLocal , state@var1560 ) ;
966: }
967: void isExtern ( bool state@var1561 ) {
968: setFlag (@expr1073745611 fIsExtern , state@var1561 ) ;
969: }
970: void isFriend ( bool state@var1562 ) {
971: setFlag (@expr1073745612 fIsFriend , state@var1562 ) ;
972: }
973: void isExplicit ( bool state@var1563 ) {
974: setFlag (@expr1073745613 fIsExplicit , state@var1563 ) ;
975: }
976: void isDefault ( bool state@var1564 ) {
977: setFlag (@expr1073745614 fIsDefault , state@var1564 ) ;
978: }
979: void isDelete ( bool state@var1565 ) {
980: setFlag (@expr1073745615 fIsDelete , state@var1565 ) ;
981: }
982: void isNoExcept ( bool state@var1566 ) {
983: setFlag (@expr1073745616 fIsNoExcept , state@var1566 ) ;
984: }
985: void isThrow ( bool state@var1567 ) {
986: setFlag (@expr1073745617 fIsThrow , state@var1567 ) ;
987: }
988: void isOperator ( bool state@var1568 ) {
989: setFlag (@expr1073745618 fIsOperator , state@var1568 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1569 ) {
992: setFlag (@expr1073745619 fHasLvalRefQual , state@var1569 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1570 ) {
995: setFlag (@expr1073745620 fHasRvalRefQual , state@var1570 ) ;
996: }
997: void isVariadic ( bool state@var1571 ) {
998: setFlag (@expr1073745621 fIsVariadic , state@var1571 ) ;
999: }
1000: void isVolatile ( bool state@var1572 ) {
1001: setFlag (@expr1073745622 fIsVolatile , state@var1572 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1573 ) {
1004: return setFlag (@expr1073745623 fHasTrailingReturnType , state@var1573 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1574 ) {
1007: setFlag (@expr1073745624 fIsInlineKeyword , state@var1574 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1575 , const Scope * scope@var1576 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1577 ;
1019: const Scope * scope@var1578 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1579 , const Token * classDef_@var1580 , const Scope * nestedIn_@var1581 ) ;
1025: Scope ( const SymbolDatabase * check_@var1582 , const Token * classDef_@var1583 , const Scope * nestedIn_@var1584 , ScopeType type_@var1585 , const Token * start_@var1586 ) ;
1026:
1027: const SymbolDatabase * check@var1587 ;
1028: std :: string className@var1588 ;
1029: const Token * classDef@var1589 ;
1030: const Token * bodyStart@var1590 ;
1031: const Token * bodyEnd@var1591 ;
1032: std :: list < Function > functionList@var1592 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1593 ;
1034: std :: list < Variable > varlist@var1594 ;
1035: const Scope * nestedIn@var1595 ;
1036: std :: list < Scope * > nestedList@var1596 ;
1037: int numConstructors@var1597 ;
1038: int numCopyOrMoveConstructors@var1598 ;
1039: std :: list < UsingInfo > usingList@var1599 ;
1040: ScopeType type@var1600 ;
1041: Type * definedType@var1601 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1602 ;
1043: std :: vector < const Token * > bodyStartList@var1603 ;
1044:
1045:
1046: const Scope * functionOf@var1604 ;
1047: Function * function@var1605 ;
1048:
1049:
1050: const Token * enumType@var1606 ;
1051: bool enumClass@var1607 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1608 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1609 ) {
1056: bodyStart@var1590 =@expr1073745625 start@var1609 ;
1057: bodyEnd@var1591 =@expr1073745626 start@var1609 ?@expr1073745627 start@var1609 .@expr1073745628 link (@expr1073745629 ) :@expr1073745630 nullptr ;
1058: if (@expr1073745631 start@var1609 ) {
1059: bodyStartList@var1603 .@expr1073745632 push_back (@expr1073745633 start@var1609 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1588 .@expr1073745634 size (@expr1073745635 ) >@expr1073745636 9 &&@expr1073745637 className@var1588 .@expr1073745638 compare (@expr1073745639 0 , 9 , "Anonymous" ) ==@expr1073745640 0 &&@expr1073745641 std ::@expr1073745642 isdigit (@expr1073745643 className@var1588 [@expr1073745644 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1610 ) const {
1068: for (@expr1073745645 const Enumerator &@expr1073745646 i@var1611 :@expr1073745647 enumeratorList@var1608 ) {
1069: if (@expr1073745648 i@var1611 .@expr1073745649 name@var1612 .@expr1073745650 str (@expr1073745651 ) ==@expr1073745652 name@var1610 ) {
1070: return &@expr1073745653 i@var1611 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1613 ) const {
1076: if (@expr1073745654 !@expr1073745655 outer@var1613 ) {
1077: return false ; }
1078: if (@expr1073745656 outer@var1613 ==@expr1073745657 this@expr1073745658 ) {
1079: return true ; }
1080: const Scope * parent@var1614 ; parent@var1614 =@expr1073745659 nestedIn@var1595 ;
1081: while (@expr1073745660 outer@var1613 !=@expr1073745661 parent@var1614 &&@expr1073745662 parent@var1614 ) {
1082: parent@var1614 =@expr1073745663 parent@var1614 .@expr1073745664 nestedIn@var1615 ; }
1083: if (@expr1073745665 parent@var1614 &&@expr1073745666 parent@var1614 ==@expr1073745667 outer@var1613 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1616 ) {
1089: while (@expr1073745668 scope@var1616 ) {
1090: if (@expr1073745669 scope@var1616 .@expr1073745670 type@var1617 ==@expr1073745671 Scope ::@expr1073745672 eFunction ) {
1091: break ; }
1092: scope@var1616 =@expr1073745673 scope@var1616 .@expr1073745674 nestedIn@var1618 ;
1093: }
1094: if (@expr1073745675 !@expr1073745676 scope@var1616 ) {
1095: return nullptr ; }
1096: return scope@var1616 .@expr1073745677 function@var1619 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073745678 type@var1600 ==@expr1073745679 eClass ||@expr1073745680 type@var1600 ==@expr1073745681 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073745682 type@var1600 ==@expr1073745683 eClass ||@expr1073745684 type@var1600 ==@expr1073745685 eStruct ||@expr1073745686 type@var1600 ==@expr1073745687 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1600 !=@expr1073745688 eClass &&@expr1073745689 type@var1600 !=@expr1073745690 eStruct &&@expr1073745691 type@var1600 !=@expr1073745692 eUnion &&@expr1073745693 type@var1600 !=@expr1073745694 eGlobal &&@expr1073745695 type@var1600 !=@expr1073745696 eNamespace &&@expr1073745697 type@var1600 !=@expr1073745698 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1600 ==@expr1073745699 Scope ::@expr3876 ScopeType ::@expr1073745701 eFor ||@expr1073745702 type@var1600 ==@expr1073745703 Scope ::@expr3876 ScopeType ::@expr1073745705 eWhile ||@expr1073745706 type@var1600 ==@expr1073745707 Scope ::@expr3876 ScopeType ::@expr1073745709 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073745710 type@var1600 ==@expr1073745711 eIf ||@expr1073745712 type@var1600 ==@expr1073745713 eElse ||@expr1073745714
1117: type@var1600 ==@expr1073745715 eFor ||@expr1073745716 type@var1600 ==@expr1073745717 eWhile ||@expr1073745718 type@var1600 ==@expr1073745719 eDo ||@expr1073745720
1118: type@var1600 ==@expr1073745721 eSwitch ||@expr1073745722 type@var1600 ==@expr1073745723 eUnconditional ||@expr1073745724
1119: type@var1600 ==@expr1073745725 eTry ||@expr1073745726 type@var1600 ==@expr1073745727 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1620 , bool requireConst@var1621 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1622 , bool isC@var1623 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1624 ) {
1135: return const_cast < Scope *@expr3904 > (@expr1073745729 const_cast < const Scope *@expr3904 > (@expr1073745731 this@expr1073745732 ) .@expr1073745733 findRecordInNestedList (@expr1073745734 name@var1624 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1625 ) const ;
1139: Type * findType ( const std :: string & name@var1626 ) {
1140: return const_cast < Type *@expr3911 > (@expr1073745736 const_cast < const Scope *@expr3911 > (@expr1073745738 this@expr1073745739 ) .@expr1073745740 findType (@expr1073745741 name@var1626 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1627 ) ;
1148:
1149: void addVariable ( const Token * token_@var1628 , const Token * start_@var1629 ,
1150: const Token * end_@var1630 , AccessControl access_@var1631 , const Type * type_@var1632 ,
1151: const Scope * scope_@var1633 , const Settings * settings@var1634 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1635 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1636 ) {
1159: functionList@var1592 .@expr1073745742 push_back (@expr1073745743 func@var1636 ) ;
1160:
1161: const Function * back@var1637 ; back@var1637 =@expr1073745744 &@expr1073745745 functionList@var1592 .@expr1073745746 back (@expr1073745747 ) ;
1162:
1163: functionMap@var1593 .@expr1073745748 insert (@expr1073745749 make_pair (@expr1073745750 back@var1637 .@expr1073745751 tokenDef@var1638 .@expr1073745752 str (@expr1073745753 ) , back@var1637 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1639 , AccessControl varaccess@var1640 , const Settings * settings@var1641 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1642 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1643 , bool isCpp@var1644 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1645 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1646 , const Token * & vartok@var1647 , const Token * & typetok@var1648 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1649 , int args@var1650 , std :: vector < const Function * > & matches@var1651 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1652 , const Token * start@var1653 , const Token * end@var1654 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1655 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1656 ;
1239: int bits@var1657 ;
1240: int pointer@var1658 ;
1241: int constness@var1659 ;
1242: Reference reference@var1660 ; reference@var1660 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1661 ;
1245: const :: Type * smartPointerType@var1662 ;
1246: const Token * smartPointerTypeToken@var1663 ;
1247: const Library :: SmartPointer * smartPointer@var1664 ;
1248: const Library :: Container * container@var1665 ;
1249:
1250: const Token * containerTypeToken@var1666 ;
1251:
1252: std :: string originalTypeName@var1667 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1655 ( UNKNOWN_SIGN ) ,
1257: type@var1656 ( UNKNOWN_TYPE ) ,
1258: bits@var1657 ( 0 ) ,
1259: pointer@var1658 ( 0U ) ,
1260: constness@var1659 ( 0U ) ,
1261: typeScope@var1661 ( nullptr ) ,
1262: smartPointerType@var1662 ( nullptr ) ,
1263: smartPointerTypeToken@var1663 ( nullptr ) ,
1264: smartPointer@var1664 ( nullptr ) ,
1265: container@var1665 ( nullptr ) ,
1266: containerTypeToken@var1666 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1668 , enum Type t@var1669 , int p@var1670 )
1269: : sign@var1655 ( s@var1668 ) ,
1270: type@var1656 ( t@var1669 ) ,
1271: bits@var1657 ( 0 ) ,
1272: pointer@var1658 ( p@var1670 ) ,
1273: constness@var1659 ( 0U ) ,
1274: typeScope@var1661 ( nullptr ) ,
1275: smartPointerType@var1662 ( nullptr ) ,
1276: smartPointerTypeToken@var1663 ( nullptr ) ,
1277: smartPointer@var1664 ( nullptr ) ,
1278: container@var1665 ( nullptr ) ,
1279: containerTypeToken@var1666 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1671 , enum Type t@var1672 , int p@var1673 , int c@var1674 )
1282: : sign@var1655 ( s@var1671 ) ,
1283: type@var1656 ( t@var1672 ) ,
1284: bits@var1657 ( 0 ) ,
1285: pointer@var1658 ( p@var1673 ) ,
1286: constness@var1659 ( c@var1674 ) ,
1287: typeScope@var1661 ( nullptr ) ,
1288: smartPointerType@var1662 ( nullptr ) ,
1289: smartPointerTypeToken@var1663 ( nullptr ) ,
1290: smartPointer@var1664 ( nullptr ) ,
1291: container@var1665 ( nullptr ) ,
1292: containerTypeToken@var1666 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1675 , enum Type t@var1676 , int p@var1677 , int c@var1678 , const std :: string & otn@var1679 )
1295: : sign@var1655 ( s@var1675 ) ,
1296: type@var1656 ( t@var1676 ) ,
1297: bits@var1657 ( 0 ) ,
1298: pointer@var1658 ( p@var1677 ) ,
1299: constness@var1659 ( c@var1678 ) ,
1300: typeScope@var1661 ( nullptr ) ,
1301: smartPointerType@var1662 ( nullptr ) ,
1302: smartPointerTypeToken@var1663 ( nullptr ) ,
1303: smartPointer@var1664 ( nullptr ) ,
1304: container@var1665 ( nullptr ) ,
1305: containerTypeToken@var1666 ( nullptr ) ,
1306: originalTypeName@var1667 ( otn@var1679 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1680 , const Settings * settings@var1681 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1682 , bool longType@var1683 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1684 , const ValueType * func@var1685 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1686 , const Variable * callVar@var1687 , const Variable * funcVar@var1688 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073745754 type@var1656 >=@expr1073745755 ValueType ::@expr1073745756 Type ::@expr1073745757 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073745758 type@var1656 >=@expr1073745759 ValueType ::@expr3936 Type ::@expr1073745761 BOOL &&@expr1073745762 type@var1656 <=@expr1073745763 ValueType ::@expr3936 Type ::@expr1073745765 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073745766 type@var1656 >=@expr1073745767 ValueType ::@expr3944 Type ::@expr1073745769 FLOAT &&@expr1073745770 type@var1656 <=@expr1073745771 ValueType ::@expr3944 Type ::@expr1073745773 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1689 , const Settings * settings@var1690 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1661 &&@expr1073745774 typeScope@var1661 .@expr1073745775 type@var1691 ==@expr1073745776 Scope ::@expr1073745777 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1692 , bool p@var1693 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1694 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1695 , const Settings * settings@var1696 , ErrorLogger * errorLogger@var1697 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1698 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1699 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1700 ;
1359:
1360:
1361: std :: list < Type > typeList@var1701 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1702 , const Token * typeTok@var1703 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1704 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1705 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1706 , const Scope * startScope@var1707 , bool lookOutside@var1708 = false ) const ;
1382: Type * findType ( const Token * startTok@var1709 , Scope * startScope@var1710 , bool lookOutside@var1711 = false ) const {
1383: return const_cast < Type *@expr3954 > (@expr1073745779 this@expr1073745780 .@expr1073745781 findType (@expr1073745782 startTok@var1709 , const_cast < const Scope *@expr3954 > (@expr1073745784 startScope@var1710 ) , lookOutside@var1711 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1712 , const Scope * startScope@var1713 ) const ;
1387: Scope * findScope ( const Token * tok@var1714 , Scope * startScope@var1715 ) const {
1388: return const_cast < Scope *@expr3961 > (@expr1073745786 this@expr1073745787 .@expr1073745788 findScope (@expr1073745789 tok@var1714 , const_cast < const Scope *@expr3961 > (@expr1073745791 startScope@var1715 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1716 ) const {
1392: return varid@var1716 <@expr1073745792 mVariableList@var1773 .@expr1073745793 size (@expr1073745794 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1717 ) const {
1396: return mVariableList@var1773 .@expr1073745795 at (@expr1073745796 varId@var1717 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1773 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1718 , const std :: string & type@var1719 , const std :: string & msg@var1720 ) const ;
1407:
1408: void printOut ( const char * title@var1721 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1722 , const char * indent@var1723 ) const ;
1410: void printXml ( std :: ostream & out@var1724 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1725 , Token * tokens@var1726 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1727 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1728 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1729 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1730 , const Token * * tok@var1731 , const Token * argStart@var1732 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1733 , const Token * tok@var1734 , const Token * argStart@var1735 , const Token * funcStart@var1736 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1737 , const Token * & tok@var1738 , const Token * argStart@var1739 , const Token * funcStart@var1740 ) ;
1469: void addNewFunction ( Scope * * scope@var1741 , const Token * * tok@var1742 ) ;
1470: bool isFunction ( const Token * tok@var1743 , const Scope * outerScope@var1744 , const Token * * funcStart@var1745 , const Token * * argStart@var1746 , const Token * * declEnd@var1747 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1748 , const Scope * startScope@var1749 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1750 , const Scope * scope@var1751 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1752 , const Scope * ns@var1753 , const std :: string & path@var1754 , int path_length@var1755 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1756 , const Token * typeTok@var1757 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1758 , const Token * vartok@var1759 , Token * membertok@var1760 , const Variable * membervar@var1761 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1762 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1763 ) const ;
1485:
1486: void setValueType ( Token * tok@var1764 , const ValueType & valuetype@var1765 ) ;
1487: void setValueType ( Token * tok@var1766 , const Variable & var@var1767 ) ;
1488: void setValueType ( Token * tok@var1768 , const Enumerator & enumerator@var1769 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1770 ;
1491: const Settings * mSettings@var1771 ;
1492: ErrorLogger * mErrorLogger@var1772 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1773 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1774 ;
1499:
1500: bool mIsCpp@var1775 ;
1501: ValueType :: Sign mDefaultSignedness@var1776 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1777 ;
1505: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var1778 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var1779 ) {
47: mSettings@var1814 =@expr1073745797 settings@var1779 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var1814 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var1816 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var1817 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var1780 ) ;
72:
73: void addtoken ( const std :: string & str@var1781 , const int lineno@var1782 , const int column@var1783 , const int fileno@var1784 , bool split@var1785 = false ) ;
74: void addtoken ( const std :: string & str@var1786 , const Token * locationTok@var1787 ) ;
75:
76: void addtoken ( const Token * tok@var1788 , const int lineno@var1789 , const int column@var1790 , const int fileno@var1791 ) ;
77: void addtoken ( const Token * tok@var1792 , const Token * locationTok@var1793 ) ;
78: void addtoken ( const Token * tok@var1794 ) ;
79:
80: static void insertTokens ( Token * dest@var1795 , const Token * src@var1796 , int n@var1797 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var1798 , const Token * first@var1799 , const Token * last@var1800 , bool one_line@var1801 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var1802 , const std :: string & file0@var1803 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var1804 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var1805 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var1811 .@expr1073745798 front@var1818 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var1811 .@expr1073745799 front@var1818 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var1811 .@expr1073745800 back@var1819 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var1811 .@expr1073745801 back@var1819 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var1812 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var1806 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var1807 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var1808 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var1809 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var1810 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var1811 ;
206:
207:
208: std :: vector < std :: string > mFiles@var1812 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var1813 ;
212:
213:
214: const Settings * mSettings@var1814 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var1815 ;
217:
218:
219: bool mIsC@var1816 ;
220: bool mIsCpp@var1817 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var1820 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var1821 ;
67: mutable int mVarId@var1822 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var1823 ) ;
73: bool hasVariable ( const std :: string & varname@var1824 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var1825 ) const {
75: return mVariableId@var1820 .@expr1073745802 find (@expr1073745803 varname@var1825 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var1820 .@expr1073745804 end (@expr1073745805 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var1820 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745806 mVarId@var1822 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var1826 , ErrorLogger * errorLogger@var1827 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var1828 ) {
95: mTimerResults@var1948 =@expr1073745807 tr@var1828 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var1926 .@expr1073745808 isC (@expr1073745809 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var1926 .@expr1073745810 isCPP (@expr1073745811 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var1829 , bool * unknown@var1830 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var1831 , const std :: string & FileName@var1832 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var1833 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var1834 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var1835 ,
142: const char FileName@var1836 [ ] ,
143: const std :: string & configuration@var1837 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var1838 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var1839 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var1840 , const Token * end@var1841 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var1842 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var1843 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var1844 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var1845 , const Token * const tokEnd@var1846 , const bool only_k_r_fpar@var1847 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var1848 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var1849 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var1850 , bool commandWithCondition@var1851 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var1852 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var1853 , Token * * _tok2@var1854 , Token * * _tok3@var1855 , std :: string & value@var1856 , int & valueVarId@var1857 , bool & valueIsPointer@var1858 , bool floatvar@var1859 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var1860 , Token * tok3@var1861 , int varid@var1862 , const std :: string & structname@var1863 , std :: string & value@var1864 , int valueVarId@var1865 , bool valueIsPointer@var1866 , const Token * const valueToken@var1867 , int indentlevel@var1868 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var1869 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var1870 , const std :: string & endsWith@var1871 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var1872 , const std :: string & endsWith@var1873 , bool cpp@var1874 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var1875 ) {
585: mPreprocessor@var1949 =@expr1073745812 preprocessor@var1875 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var1949 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var1876 , const Token * end@var1877 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var1878 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var1879 , const std :: string & code@var1880 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var1881 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var1882 , const std :: string & what@var1883 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var1884 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var1885 , const std :: string & msg@var1886 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var1887 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var1888 , const std :: string & macroName@var1889 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var1890 , const Token * end@var1891 , bool allowSemicolon@var1892 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var1893 , const Severity :: SeverityType severity@var1894 , const std :: string & id@var1895 , const std :: string & msg@var1896 , bool inconclusive@var1897 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var1898 , Severity :: SeverityType severity@var1899 , const std :: string & id@var1900 , const std :: string & msg@var1901 , bool inconclusive@var1902 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var1903 , const Token * name@var1904 , const Token * typeDef@var1905 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var1906 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var1907 ,
821: const VariableMap & variableMap@var1908 ,
822: const int scopeStartVarId@var1909 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var1910 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var1911 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var1912 ,
827: int * varId@var1913 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var1914 ,
830: Token * const startToken@var1915 ,
831: const Token * const endToken@var1916 ,
832: const std :: map < std :: string , int > & varlist@var1917 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var1918 ,
834: int * varId_@var1919 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var1920 ) ;
849:
850: bool operatorEnd ( const Token * tok@var1921 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var1947 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var1922 ) {
861: mSettings@var1933 =@expr1073745813 settings@var1922 ;
862: list@var1926 .@expr1073745814 setSettings (@expr1073745815 settings@var1922 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var1935 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var1923 ) const ;
877:
878: void dump ( std :: ostream & out@var1924 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var1925 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var1945 ;
888: }
889:
|
892:
893: TokenList list@var1926 ;
894:
895: const Token * tokens ( ) const {
896: return list@var1926 .@expr1073745816 front (@expr1073745817 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var1927 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var1928 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var1929 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var1930 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var1933 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var1931 , bool inOperator@var1932 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745818 mVarId@var1945 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var1933 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var1934 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var1935 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var1936 ;
973:
974:
975:
976: std :: string mConfiguration@var1937 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var1938 ;
980:
981: struct TypedefInfo {
982: std :: string name@var1939 ;
983: std :: string filename@var1940 ;
984: int lineNumber@var1941 ;
985: int column@var1942 ;
986: bool used@var1943 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var1944 ;
989:
990:
991: int mVarId@var1945 ;
992:
993:
994: int mUnnamedCount@var1946 ;
995:
|
999:
1000: bool mCodeWithTemplates@var1947 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var1948 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var1949 ;
1013: } ;

##file cppcheck-2.8/lib/checkassert.cpp

1:
|
34:
35: static const struct CWE CWE398@var1950 ( 398U ) ;
36:
37:
38: namespace {
39: CheckAssert instance@var1951 ;
40: }
41:
42: void CheckAssert :: assertWithSideEffects ( )
43: {
44: if (@expr1073745819 !@expr1073745820 mSettings@var29 .@expr1073745821 severity@var1997 .@expr1073745822 isEnabled (@expr1073745823 Severity ::@expr1073745824 warning ) ) {
45: return ; }
46:
47: for (@expr1073745825 const Token *@expr4002 tok@var1952 =@expr1073745827 mTokenizer@var28 .@expr1073745828 list@var1998 .@expr1073745829 front (@expr1073745830 ) ; tok@var1952 ; tok@var1952 =@expr1073745831 tok@var1952 .@expr4008 next (@expr4009 ) ) {
48: if (@expr1073745834 !@expr1073745835 Token ::@expr4012 simpleMatch (@expr1073745837 tok@var1952 , "assert (" ) ) {
49: continue ; }
50:
51: const Token * endTok@var1953 ; endTok@var1953 =@expr1073745838 tok@var1952 .@expr4008 next (@expr4009 ) .@expr1073745841 link (@expr1073745842 ) ;
52: for (@expr1073745843 const Token *@expr4002 tmp@var1954 =@expr1073745845 tok@var1952 .@expr4008 next (@expr4009 ) ; tmp@var1954 !=@expr1073745848 endTok@var1953 ; tmp@var1954 =@expr1073745849 tmp@var1954 .@expr1073745850 next (@expr1073745851 ) ) {
53: if (@expr1073745852 Token ::@expr4012 simpleMatch (@expr1073745854 tmp@var1954 , "sizeof (" ) ) {
54: tmp@var1954 =@expr1073745855 tmp@var1954 .@expr1073745856 linkAt (@expr1073745857 1 ) ; }
55:
56: checkVariableAssignment (@expr1073745858 tmp@var1954 , tok@var1952 .@expr1073745859 scope (@expr1073745860 ) ) ;
57:
58: if (@expr1073745861 tmp@var1954 .@expr1073745862 tokType (@expr1073745863 ) !=@expr1073745864 Token ::@expr1073745865 eFunction ) {
59: continue ; }
60:
61: const Function * f@var1955 ; f@var1955 =@expr1073745866 tmp@var1954 .@expr1073745867 function (@expr1073745868 ) ;
62: if (@expr1073745869 f@var1955 .@expr1073745870 nestedIn@var1956 .@expr1073745871 isClassOrStruct (@expr1073745872 ) &&@expr1073745873 !@expr1073745874 f@var1955 .@expr1073745875 isStatic (@expr1073745876 ) &&@expr1073745877 !@expr1073745878 f@var1955 .@expr1073745879 isConst (@expr1073745880 ) ) {
63: sideEffectInAssertError (@expr4057 tmp@var1954 , f@var1955 .@expr4058 name (@expr4059 ) ) ;
64: continue ;
65: }
66: const Scope * scope@var1957 ; scope@var1957 =@expr1073745884 f@var1955 .@expr1073745885 functionScope@var1958 ;
67: if (@expr1073745886 !@expr1073745887 scope@var1957 ) { continue ; }
68:
69: for (@expr1073745888 const Token *@expr4002 tok2@var1959 =@expr1073745890 scope@var1957 .@expr4067 bodyStart@var1960 ; tok2@var1959 !=@expr1073745892 scope@var1957 .@expr4069 bodyEnd@var1961 ; tok2@var1959 =@expr1073745894 tok2@var1959 .@expr1073745895 next (@expr1073745896 ) ) {
70: if (@expr1073745897 !@expr1073745898 tok2@var1959 .@expr1073745899 isAssignmentOp (@expr1073745900 ) &&@expr1073745901 tok2@var1959 .@expr1073745902 tokType (@expr1073745903 ) !=@expr1073745904 Token ::@expr1073745905 eIncDecOp ) {
71: continue ; }
72:
73: const Variable * var@var1962 ; var@var1962 =@expr1073745906 tok2@var1959 .@expr1073745907 previous (@expr1073745908 ) .@expr1073745909 variable (@expr1073745910 ) ;
74: if (@expr1073745911 !@expr1073745912 var@var1962 ||@expr1073745913 var@var1962 .@expr1073745914 isLocal (@expr1073745915 ) ||@expr1073745916 (@expr1073745917 var@var1962 .@expr4094 isArgument (@expr4095 ) &&@expr1073745920 !@expr1073745921 var@var1962 .@expr1073745922 isReference (@expr1073745923 ) &&@expr1073745924 !@expr1073745925 var@var1962 .@expr4102 isPointer (@expr4103 ) ) ) {
75: continue ; }
76: if (@expr1073745928 var@var1962 .@expr4094 isArgument (@expr4095 ) &&@expr1073745931 var@var1962 .@expr4102 isPointer (@expr4103 ) &&@expr1073745934 tok2@var1959 .@expr1073745935 strAt (@expr1073745936 -2 ) !=@expr1073745937 "*" ) {
77: continue ; }
78:
79: bool noReturnInScope@var1963 ; noReturnInScope@var1963 =@expr1073745938 true ;
80: for (@expr1073745939 const Token *@expr4002 rt@var1964 =@expr1073745941 scope@var1957 .@expr4067 bodyStart@var1960 ; rt@var1964 !=@expr1073745943 scope@var1957 .@expr4069 bodyEnd@var1961 ; rt@var1964 =@expr1073745945 rt@var1964 .@expr1073745946 next (@expr1073745947 ) ) {
81: if (@expr1073745948 rt@var1964 .@expr1073745949 str (@expr1073745950 ) !=@expr1073745951 "return" ) { continue ; }
82: if (@expr1073745952 inSameScope (@expr1073745953 rt@var1964 , tok2@var1959 ) ) {
83: noReturnInScope@var1963 =@expr1073745954 false ;
84: break ;
85: }
86: }
87: if (@expr1073745955 noReturnInScope@var1963 ) { continue ; }
88:
89: sideEffectInAssertError (@expr4057 tmp@var1954 , f@var1955 .@expr4058 name (@expr4059 ) ) ;
90: break ;
91: }
92: }
93: tok@var1952 =@expr1073745959 endTok@var1953 ;
94: }
95: }
96:
97:
98:
99: void CheckAssert :: sideEffectInAssertError ( const Token * tok@var1965 , const std :: string & functionName@var1966 )
100: {
101: reportError (@expr1073745960 tok@var1965 , Severity ::@expr1073745961 warning ,
102: "assertWithSideEffect" ,
103: "$symbol:" +@expr1073745962 functionName@var1966 +@expr1073745963 "\nAssert statement calls a function which may have desired side effects: '$symbol'.\nNon-pure function: '$symbol' is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug."
104:
|
107:
108: , CWE398@var1950 , Certainty ::@expr1073745964 normal ) ;
109: }
110:
111: void CheckAssert :: assignmentInAssertError ( const Token * tok@var1967 , const std :: string & varname@var1968 )
112: {
113: reportError (@expr1073745965 tok@var1967 , Severity ::@expr1073745966 warning ,
114: "assignmentInAssert" ,
115: "$symbol:" +@expr1073745967 varname@var1968 +@expr1073745968 "\nAssert statement modifies '$symbol'.\nVariable '$symbol' is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug."
116:
|
119:
120: , CWE398@var1950 , Certainty ::@expr1073745969 normal ) ;
121: }
122:
123:
124: void CheckAssert :: checkVariableAssignment ( const Token * assignTok@var1969 , const Scope * assertionScope@var1970 )
125: {
126: if (@expr1073745970 !@expr1073745971 assignTok@var1969 .@expr4148 isAssignmentOp (@expr4149 ) &&@expr1073745974 assignTok@var1969 .@expr4151 tokType (@expr4152 ) !=@expr1073745977 Token ::@expr4154 eIncDecOp ) {
127: return ; }
128:
129: const Variable * var@var1971 ; var@var1971 =@expr1073745979 assignTok@var1969 .@expr1073745980 astOperand1 (@expr1073745981 ) .@expr1073745982 variable (@expr1073745983 ) ;
130: if (@expr1073745984 !@expr1073745985 var@var1971 ) {
131: return ; }
132:
133:
134: if (@expr1073745986 assertionScope@var1970 !=@expr1073745987 var@var1971 .@expr4164 scope (@expr4165 ) ) {
135: const Scope * s@var1972 ; s@var1972 =@expr1073745990 var@var1971 .@expr4164 scope (@expr4165 ) ;
136: while (@expr1073745993 s@var1972 &&@expr1073745994 s@var1972 !=@expr1073745995 assertionScope@var1970 ) {
137: s@var1972 =@expr1073745996 s@var1972 .@expr1073745997 nestedIn@var1973 ; }
138: if (@expr1073745998 s@var1972 ==@expr1073745999 assertionScope@var1970 ) {
139: return ; }
140: }
141:
142:
143: if (@expr1073746000 assignTok@var1969 .@expr4148 isAssignmentOp (@expr4149 ) ||@expr1073746003 assignTok@var1969 .@expr4151 tokType (@expr4152 ) ==@expr1073746006 Token ::@expr4154 eIncDecOp ) {
144: if (@expr1073746008 var@var1971 .@expr1073746009 isConst (@expr1073746010 ) ) {
145: return ;
146: }
147: assignmentInAssertError (@expr1073746011 assignTok@var1969 , var@var1971 .@expr1073746012 name (@expr1073746013 ) ) ;
148: }
149:
150: }
151:
152: bool CheckAssert :: inSameScope ( const Token * returnTok@var1974 , const Token * assignTok@var1975 )
153: {
154:
155: return returnTok@var1974 .@expr1073746014 scope (@expr1073746015 ) ==@expr1073746016 assignTok@var1975 .@expr1073746017 scope (@expr1073746018 ) ;
156: }

##file cppcheck-2.8/lib/settings.h

11:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var1976 ; mFlags@var1976 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1976 ;
54: }
55: void clear ( ) {
56: mFlags@var1976 =@expr1073746019 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1976 =@expr1073746020 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1977 ) {
62: if (@expr1073746021 enabled@var1977 ) {
63: fill (@expr1073746022 ) ; }
64: else {
65: clear (@expr1073746023 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var1978 ) const {
68: return (@expr4200 mFlags@var1976 &@expr1073746025 (@expr4200 1U <<@expr1073746027 (@expr1073746028 uint32_t ) flag@var1978 ) ) !=@expr1073746029 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var1979 ) {
71: mFlags@var1976 |=@expr1073746030 (@expr1073746031 1U <<@expr1073746032 (@expr1073746033 uint32_t ) flag@var1979 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var1980 ) {
74: mFlags@var1976 &=@expr1073746034 ~@expr1073746035 (@expr1073746036 1U <<@expr1073746037 (@expr1073746038 uint32_t ) flag@var1980 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var1981 , bool enabled@var1982 ) {
77: if (@expr1073746039 enabled@var1982 ) {
78: enable (@expr1073746040 flag@var1981 ) ; }
79: else {
80: disable (@expr1073746041 flag@var1981 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var1983 ; mFlags@var1983 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1983 ;
54: }
55: void clear ( ) {
56: mFlags@var1983 =@expr1073746042 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1983 =@expr1073746043 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1984 ) {
62: if (@expr1073746044 enabled@var1984 ) {
63: fill (@expr1073746045 ) ; }
64: else {
65: clear (@expr1073746046 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var1985 ) const {
68: return (@expr4223 mFlags@var1983 &@expr1073746048 (@expr4223 1U <<@expr1073746050 (@expr1073746051 uint32_t ) flag@var1985 ) ) !=@expr1073746052 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var1986 ) {
71: mFlags@var1983 |=@expr1073746053 (@expr1073746054 1U <<@expr1073746055 (@expr1073746056 uint32_t ) flag@var1986 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var1987 ) {
74: mFlags@var1983 &=@expr1073746057 ~@expr1073746058 (@expr1073746059 1U <<@expr1073746060 (@expr1073746061 uint32_t ) flag@var1987 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var1988 , bool enabled@var1989 ) {
77: if (@expr1073746062 enabled@var1989 ) {
78: enable (@expr1073746063 flag@var1988 ) ; }
79: else {
80: disable (@expr1073746064 flag@var1988 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var1990 ; mFlags@var1990 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1990 ;
54: }
55: void clear ( ) {
56: mFlags@var1990 =@expr1073746065 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1990 =@expr1073746066 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1991 ) {
62: if (@expr1073746067 enabled@var1991 ) {
63: fill (@expr1073746068 ) ; }
64: else {
65: clear (@expr1073746069 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var1992 ) const {
68: return (@expr4246 mFlags@var1990 &@expr1073746071 (@expr4246 1U <<@expr1073746073 (@expr1073746074 uint32_t ) flag@var1992 ) ) !=@expr1073746075 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var1993 ) {
71: mFlags@var1990 |=@expr1073746076 (@expr1073746077 1U <<@expr1073746078 (@expr1073746079 uint32_t ) flag@var1993 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var1994 ) {
74: mFlags@var1990 &=@expr1073746080 ~@expr1073746081 (@expr1073746082 1U <<@expr1073746083 (@expr1073746084 uint32_t ) flag@var1994 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var1995 , bool enabled@var1996 ) {
77: if (@expr1073746085 enabled@var1996 ) {
78: enable (@expr1073746086 flag@var1995 ) ; }
79: else {
80: disable (@expr1073746087 flag@var1995 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible 2@26
  id possible {"assignmentInAssert"@26,"assertWithSideEffect"@27}
  certainty possible 0@26
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 45
  ( always "Assert"
Line 48
  ( always "Assert"
Line 60
  ( always {!<=-1,!>=2}
Line 67
  nullptr always 0
Line 68
  nullptr always 0
  "function" always "function"
Line 69
  nullptr always 0
  "var" always "var"
Line 73
  "Assert" always "Assert"
Line 77
  "Warn if there are side effects in assert statements (since this cause different behaviour in debug/release builds).\n" always "Warn if there are side effects in assert statements (since this cause different behaviour in debug/release builds).\n"
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@49738,34@49994}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@194,34@195}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@194,""@195,""@196,"U"@197,"U"@198,"u"@199,"u"@200,"u8"@201,"u8"@202}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@71,34@72}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@68,34@70}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@28,128@29,64@30,32@31,16@32,8@33,4@34,2@35,1@36}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@37,128@38,64@39,32@40,16@41,8@42,4@43,2@44,1@45}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@37,4294967167@38,4294967231@39,4294967263@40,4294967279@41,4294967287@42,4294967291@43,4294967293@44,4294967294@45}
  flag {!<=-1,256@37,128@38,64@39,32@40,16@41,8@42,4@43,2@44,1@45}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible {"assert ("@31,"sizeof ("@36}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@183,4@184,0@185}
  t possible {10@183,4@184,0@185}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@183,4@184,0@185}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@183,0@185}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@183,0@185}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@183}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@183}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@183}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@183}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@183}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@191}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@193,17179869184@204,8589934592@206,34359738368@208,4294967296@210,2147483648@212,1073741824@214,536870912@216,268435456@218}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@24,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@25}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@192,17179869184@203,8589934592@205,34359738368@207,4294967296@209,2147483648@211,1073741824@213,536870912@215,268435456@217}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@192,17179869184@203,8589934592@205,34359738368@207,4294967296@209,2147483648@211,1073741824@213,536870912@215,268435456@217}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@126,4096@129,16384@132,2048@133,1024@134,65536@135,512@136,256@137,128@138}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@91,4194304@93,8388608@94,2097152@96,1048576@97,524288@98,262144@99,131072@100,65536@101}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@69,2097152@70,1048576@71,524288@72,262144@73,131072@74,65536@75,32768@76,16384@77}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@69,4292870143@70,4293918719@71,4294443007@72,4294705151@73,4294836223@74,4294901759@75,4294934527@76,4294950911@77}
  flag {!<=-1,8388608@69,2097152@70,1048576@71,524288@72,262144@73,131072@74,65536@75,32768@76,16384@77}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 35
  398U always 398
Line 44
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 47
  tok possible symbolic=(endTok)
Line 48
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "assert (" always "assert ("
Line 52
  != always {!<=-1,!>=2}
  endTok always symbolic=(tok->next()->link())
Line 53
  ( always {!<=-1,!>=2}
  "sizeof (" always "sizeof ("
Line 54
  1 always 1
Line 58
  != always {!<=-1,!>=2}
  :: always 2
  eFunction always 2
Line 62
  f always symbolic=(tmp->function())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  f always symbolic=(tmp->function())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  f always symbolic=(tmp->function())
  ( always {!<=-1,!>=2}
Line 63
  f always symbolic=(tmp->function())
Line 66
  f always symbolic=(tmp->function())
Line 67
  ! always {!<=-1,!>=2}
  scope always symbolic=(f->functionScope)
Line 69
  scope {symbolic=(f->functionScope),!0}
  != always {!<=-1,!>=2}
  scope {symbolic=(f->functionScope),!0}
Line 70
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 16
  eIncDecOp always 16
Line 74
  ! always {!<=-1,!>=2}
  var always symbolic=(tok2->previous()->variable())
  || always {!<=-1,!>=2}
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
Line 76
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var {symbolic=(tok2->previous()->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  -2 always -2
  != always {!<=-1,!>=2}
  "*" always "*"
Line 79
  noReturnInScope always {!<=-1,!>=2}
  noReturnInScope always {!<=-1,!>=2}
  = always 1
  true always 1
Line 80
  != always {!<=-1,!>=2}
Line 81
  != always {!<=-1,!>=2}
  "return" always "return"
Line 82
  ( always {!<=-1,!>=2}
Line 83
  noReturnInScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 87
  noReturnInScope {!<=-1,!>=2,1,0}
Line 101
  tok possible 0@87
  :: always 2
  warning always 2
Line 102
  "assertWithSideEffect" always "assertWithSideEffect"
Line 103
  "$symbol:" always "$symbol:"
  functionName possible "function"@87
  "\nAssert statement calls a function which may have desired side effects: '$symbol'.\nNon-pure function: '$symbol' is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." always "\nAssert statement calls a function which may have desired side effects: '$symbol'.\nNon-pure function: '$symbol' is called inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug."
Line 108
  :: always 0
  normal always 0
Line 113
  tok possible 0@88
  :: always 2
  warning always 2
Line 114
  "assignmentInAssert" always "assignmentInAssert"
Line 115
  "$symbol:" always "$symbol:"
  varname possible "var"@88
  "\nAssert statement modifies '$symbol'.\nVariable '$symbol' is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug." always "\nAssert statement modifies '$symbol'.\nVariable '$symbol' is modified inside assert statement. Assert statements are removed from release builds so the code inside assert statement is not executed. If the code is needed also in release builds, this is a bug."
Line 120
  :: always 0
  normal always 0
Line 126
  ! {!<=-1,!>=2,1}
  ( {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 16
  eIncDecOp always 16
Line 130
  ! always {!<=-1,!>=2}
  var always symbolic=(assignTok->astOperand1()->variable())
Line 134
  != always {!<=-1,!>=2}
  var {symbolic=(assignTok->astOperand1()->variable()),!0}
Line 135
  = always !symbolic=(assertionScope)
  var {symbolic=(assignTok->astOperand1()->variable()),!0}
  ( always !symbolic=(assertionScope)
Line 136
  s possible {symbolic=(var->scope()),symbolic=(assertionScope)}
  && always {!<=-1,!>=2}
  s {symbolic=(var->scope()),!0}
  != always {!<=-1,!>=2}
  assertionScope always !symbolic=(var->scope())
Line 137
  s {symbolic=(var->scope()),!symbolic=(assertionScope),!0}
Line 138
  s possible {symbolic=(var->scope()),symbolic=(assertionScope),0}
  == {!<=-1,!>=2,1}
  assertionScope {!symbolic=(var->scope()),symbolic=(s)}
Line 143
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 16
  eIncDecOp always 16
Line 144
  var {symbolic=(assignTok->astOperand1()->variable()),!0}
  ( always {!<=-1,!>=2}
Line 147
  var always !0
Line 152
  ( always {!<=-1,!>=2}
Line 155
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,2@28}
  flag possible 2@28
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
