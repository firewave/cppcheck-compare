

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744316 !@expr1073744317 mTokenizer@var28 ) {
69: instances (@expr1073744318 ) .@expr1073744319 remove (@expr1073744320 this@expr1073744321 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744322 string (@expr1073744323 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744324 void ) tokenizer@var21 ;
108: (@expr1073744325 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744326 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744327 void ) ctu@var24 ;
120: (@expr1073744328 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744329 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744330 0U ) , Certainty ::@expr1073744331 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744332 list < const Token *@expr1073744333 > callstack@var41 (@expr1073744334 1 , tok@var35 ) ;
141: reportError (@expr1073744335 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744336 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744337 0U ) , Certainty ::@expr1073744338 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/checkautovariables.h

1:
|
30:
31: class Settings ;
32: class Token ;
33: class Tokenizer ;
34: class ErrorLogger ;
35: class Variable ;
36:
37: namespace ValueFlow {
38: class Value ;
39: }
40:
|
45:
46: class CheckAutoVariables : public Check {
47: public:
48:
49: CheckAutoVariables ( ) : Check ( myName ( ) ) { }
50:
51:
52: CheckAutoVariables ( const Tokenizer * tokenizer@var64 , const Settings * settings@var65 , ErrorLogger * errorLogger@var66 )
53: : Check ( myName ( ) , tokenizer@var64 , settings@var65 , errorLogger@var66 ) { }
54:
55:
56: void runChecks ( const Tokenizer * tokenizer@var67 , const Settings * settings@var68 , ErrorLogger * errorLogger@var69 ) override {
57: CheckAutoVariables checkAutoVariables@var70 (@expr1073744339 tokenizer@var67 , settings@var68 , errorLogger@var69 ) ;
58: checkAutoVariables@var70 .@expr1073744340 assignFunctionArg (@expr1073744341 ) ;
59: checkAutoVariables@var70 .@expr1073744342 checkVarLifetime (@expr1073744343 ) ;
60: checkAutoVariables@var70 .@expr1073744344 autoVariables (@expr1073744345 ) ;
61: }
62:
63:
64: void assignFunctionArg ( ) ;
65:
66:
67: void autoVariables ( ) ;
68:
|
71:
72: bool checkAutoVariableAssignment ( const Token * expr@var71 , bool inconclusive@var72 , const Token * startToken@var73 = nullptr ) ;
73:
74: void checkVarLifetime ( ) ;
75:
76: void checkVarLifetimeScope ( const Token * start@var74 , const Token * end@var75 ) ;
77:
78: private:
79: void errorReturnAddressToAutoVariable ( const Token * tok@var76 ) ;
80: void errorReturnAddressToAutoVariable ( const Token * tok@var77 , const ValueFlow :: Value * value@var78 ) ;
81: void errorReturnPointerToLocalArray ( const Token * tok@var79 ) ;
82: void errorAutoVariableAssignment ( const Token * tok@var80 , bool inconclusive@var81 ) ;
83: void errorReturnDanglingLifetime ( const Token * tok@var82 , const ValueFlow :: Value * val@var83 ) ;
84: void errorInvalidLifetime ( const Token * tok@var84 , const ValueFlow :: Value * val@var85 ) ;
85: void errorDanglngLifetime ( const Token * tok@var86 , const ValueFlow :: Value * val@var87 ) ;
86: void errorDanglingTemporaryLifetime ( const Token * tok@var88 , const ValueFlow :: Value * val@var89 , const Token * tempTok@var90 ) ;
87: void errorReturnReference ( const Token * tok@var91 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var92 , bool inconclusive@var93 ) ;
88: void errorDanglingReference ( const Token * tok@var94 , const Variable * var@var95 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var96 ) ;
89: void errorDanglingTempReference ( const Token * tok@var97 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var98 , bool inconclusive@var99 ) ;
90: void errorReturnTempReference ( const Token * tok@var100 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var101 , bool inconclusive@var102 ) ;
91: void errorInvalidDeallocation ( const Token * tok@var103 , const ValueFlow :: Value * val@var104 ) ;
92: void errorReturnAddressOfFunctionParameter ( const Token * tok@var105 , const std :: string & varname@var106 ) ;
93: void errorUselessAssignmentArg ( const Token * tok@var107 ) ;
94: void errorUselessAssignmentPtrArg ( const Token * tok@var108 ) ;
95:
96: void getErrorMessages ( ErrorLogger * errorLogger@var109 , const Settings * settings@var110 ) const override {
97: std ::@expr1073744346 list < std ::@expr2523 pair < const Token *@expr1073744348 , std ::@expr2523 string > > errorPath@var111 ;
98: CheckAutoVariables c@var112 (@expr1073744350 nullptr , settings@var110 , errorLogger@var109 ) ;
99: c@var112 .@expr1073744351 errorAutoVariableAssignment (@expr1073744352 nullptr , false ) ;
100: c@var112 .@expr1073744353 errorReturnAddressToAutoVariable (@expr1073744354 nullptr ) ;
101: c@var112 .@expr1073744355 errorReturnPointerToLocalArray (@expr1073744356 nullptr ) ;
102: c@var112 .@expr1073744357 errorReturnReference (@expr1073744358 nullptr , errorPath@var111 , false ) ;
103: c@var112 .@expr1073744359 errorDanglingReference (@expr1073744360 nullptr , nullptr , errorPath@var111 ) ;
104: c@var112 .@expr1073744361 errorReturnTempReference (@expr1073744362 nullptr , errorPath@var111 , false ) ;
105: c@var112 .@expr1073744363 errorDanglingTempReference (@expr1073744364 nullptr , errorPath@var111 , false ) ;
106: c@var112 .@expr1073744365 errorInvalidDeallocation (@expr1073744366 nullptr , nullptr ) ;
107: c@var112 .@expr1073744367 errorReturnAddressOfFunctionParameter (@expr1073744368 nullptr , "parameter" ) ;
108: c@var112 .@expr1073744369 errorUselessAssignmentArg (@expr1073744370 nullptr ) ;
109: c@var112 .@expr1073744371 errorUselessAssignmentPtrArg (@expr1073744372 nullptr ) ;
110: c@var112 .@expr1073744373 errorReturnDanglingLifetime (@expr1073744374 nullptr , nullptr ) ;
111: c@var112 .@expr1073744375 errorInvalidLifetime (@expr1073744376 nullptr , nullptr ) ;
112: c@var112 .@expr1073744377 errorDanglngLifetime (@expr1073744378 nullptr , nullptr ) ;
113: c@var112 .@expr1073744379 errorDanglingTemporaryLifetime (@expr1073744380 nullptr , nullptr , nullptr ) ;
114: }
115:
116: static std :: string myName ( ) {
117: return "Auto Variables" ;
118: }
119:
120: std :: string classInfo ( ) const override {
121: return "A pointer to a variable is only valid as long as the variable is in scope.\nCheck:\n- returning a pointer to auto or temporary variable\n- assigning address of an variable to an effective parameter of a function\n- returning reference to local/temporary variable\n- returning address of function parameter\n- suspicious assignment of pointer argument\n- useless assignment of function argument\n"
122:
|
127:
128: ;
129: }
130: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var113 ;
42: double mDoubleValue@var114 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var115 ;
44: bool mIsUnsigned@var116 ;
45:
46: void promote ( const value & v@var117 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var118 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var115 !=@expr1073744381 Type ::@expr1073744382 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var115 ==@expr1073744383 Type ::@expr1073744384 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744385 ) ?@expr1073744386 mDoubleValue@var114 :@expr1073744387 (@expr1073744388 double ) mIntValue@var113 ;
60: }
61:
62: static value calc ( char op@var119 , const value & v1@var120 , const value & v2@var121 ) ;
63: int compare ( const value & v@var122 ) const ;
64: value add ( int v@var123 ) const ;
65: value shiftLeft ( const value & v@var124 ) const ;
66: value shiftRight ( const value & v@var125 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var126 ;
72:
73: static long long toLongNumber ( const std :: string & str@var127 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var128 ) ;
75:
76: template < class T > static std :: string toString ( T value@var129 ) {
77: std ::@expr1073744389 ostringstream result@var130 ;
78: result@var130 <<@expr1073744390 value@var129 ;
79: return result@var130 .@expr1073744391 str (@expr1073744392 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var131 ) ;
82:
83: static bool isInt ( const std :: string & str@var132 ) ;
84: static bool isFloat ( const std :: string & str@var133 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var134 ) ;
86: static bool isNegative ( const std :: string & str@var135 ) ;
87: static bool isPositive ( const std :: string & str@var136 ) ;
88: static bool isDec ( const std :: string & str@var137 ) ;
89: static bool isFloatHex ( const std :: string & str@var138 ) ;
90: static bool isIntHex ( const std :: string & str@var139 ) ;
91: static bool isOct ( const std :: string & str@var140 ) ;
92: static bool isBin ( const std :: string & str@var141 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var142 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var143 , bool supportMicrosoftExtensions@var144 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var145 , const std :: string & second@var146 ) ;
105: static std :: string subtract ( const std :: string & first@var147 , const std :: string & second@var148 ) ;
106: static std :: string multiply ( const std :: string & first@var149 , const std :: string & second@var150 ) ;
107: static std :: string divide ( const std :: string & first@var151 , const std :: string & second@var152 ) ;
108: static std :: string mod ( const std :: string & first@var153 , const std :: string & second@var154 ) ;
109: static std :: string incdec ( const std :: string & var@var155 , const std :: string & op@var156 ) ;
110: static std :: string calculate ( const std :: string & first@var157 , const std :: string & second@var158 , char action@var159 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var160 ) ;
113: static std :: string cos ( const std :: string & tok@var161 ) ;
114: static std :: string tan ( const std :: string & tok@var162 ) ;
115: static std :: string abs ( const std :: string & tok@var163 ) ;
116: static bool isEqual ( const std :: string & first@var164 , const std :: string & second@var165 ) ;
117: static bool isNotEqual ( const std :: string & first@var166 , const std :: string & second@var167 ) ;
118: static bool isGreater ( const std :: string & first@var168 , const std :: string & second@var169 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var170 , const std :: string & second@var171 ) ;
120: static bool isLess ( const std :: string & first@var172 , const std :: string & second@var173 ) ;
121: static bool isLessEqual ( const std :: string & first@var174 , const std :: string & second@var175 ) ;
122: static bool isNullValue ( const std :: string & str@var176 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var177 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var178 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var179 , std :: string :: size_type iPos@var180 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var181 , const MathLib :: value & v2@var182 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var183 , const MathLib :: value & v2@var184 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var185 , const MathLib :: value & v2@var186 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var187 , const MathLib :: value & v2@var188 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var189 , const MathLib :: value & v2@var190 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var191 , const MathLib :: value & v2@var192 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var193 , const MathLib :: value & v2@var194 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var195 , const MathLib :: value & v2@var196 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var197 , const MathLib :: value & v2@var198 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var199 , const MathLib :: value & v2@var200 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var201 ) ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var202 ) const {
35: return p@var202 .@expr1073744393 first@var203 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var204 ) const {
42: return p@var204 .@expr1073744394 second@var205 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var206 , const T & x@var207 )
48: {
49: return std ::@expr1073744395 find (@expr1073744396 r@var206 .@expr1073744397 begin (@expr1073744398 ) , r@var206 .@expr2575 end (@expr2576 ) , x@var207 ) !=@expr1073744401 r@var206 .@expr2575 end (@expr2576 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var208 , const T & x@var209 )
54: {
55: return std ::@expr1073744404 find (@expr1073744405 r@var208 .@expr1073744406 begin (@expr1073744407 ) , r@var208 .@expr2584 end (@expr2585 ) , x@var209 ) !=@expr1073744410 r@var208 .@expr2584 end (@expr2585 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var210 , const U & x@var211 )
60: {
61: return std ::@expr1073744413 find (@expr1073744414 r@var210 .@expr1073744415 begin (@expr1073744416 ) , r@var210 .@expr2593 end (@expr2594 ) , x@var211 ) !=@expr1073744419 r@var210 .@expr2593 end (@expr2594 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var212 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744422 t@var212 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var213 , char c@var214 )
74: {
75: return !@expr1073744423 str@var213 .@expr1073744424 empty (@expr1073744425 ) &&@expr1073744426 str@var213 .@expr1073744427 back (@expr1073744428 ) ==@expr1073744429 c@var214 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var215 , const char end@var216 [ ] , unsigned long endlen@var217 )
79: {
80: return (@expr2606 str@var215 .@expr2607 size (@expr2608 ) >=@expr1073744433 endlen@var217 ) &&@expr1073744434 (@expr2606 str@var215 .@expr1073744436 compare (@expr1073744437 str@var215 .@expr2607 size (@expr2608 ) -@expr1073744440 endlen@var217 , endlen@var217 , end@var216 ) ==@expr1073744441 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var218 , const char ( & end@var219 ) [ N ] )
85: {
86: return endsWith (@expr1073744443 str@var218 , end@var219 , N@expr1073744442 -@expr1073744444 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var220 , char q@var221 , const std :: string & p@var222 )
90: {
91: if (@expr1073744445 !@expr1073744446 endsWith (@expr1073744447 str@var220 , q@var221 ) ) {
92: return false ; }
93: if (@expr1073744448 (@expr1073744449 str@var220 .@expr1073744450 length (@expr1073744451 ) +@expr1073744452 1 ) >@expr1073744453 p@var222 .@expr1073744454 length (@expr1073744455 ) &&@expr1073744456 (@expr1073744457 str@var220 .@expr1073744458 compare (@expr1073744459 0 , p@var222 .@expr1073744460 size (@expr1073744461 ) +@expr1073744462 1 , p@var222 +@expr1073744463 q@var221 ) ==@expr1073744464 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var223 , char q@var224 )
99: {
100: static const std ::@expr2641 vector < std ::@expr2641 string > suffixes@var225 {@expr1073744467 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744468 const std ::@expr2641 string &@expr1073744470 p@var226 :@expr1073744471 suffixes@var225 ) {
102: if (@expr1073744472 isPrefixStringCharLiteral (@expr1073744473 str@var223 , q@var224 , p@var226 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var227 )
109: {
110: return isStringCharLiteral (@expr1073744474 str@var227 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var228 )
114: {
115: return isStringCharLiteral (@expr1073744475 str@var228 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var229 , char q@var230 )
119: {
120: const unsigned long quotePos@var231 =@expr1073744476 str@var229 .@expr1073744477 find (@expr1073744478 q@var230 ) ;
121: return str@var229 .@expr1073744479 substr (@expr1073744480 quotePos@var231 +@expr1073744481 1U , str@var229 .@expr1073744482 size (@expr1073744483 ) -@expr1073744484 quotePos@var231 -@expr1073744485 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var232 )
125: {
126: if (@expr1073744486 isStringLiteral (@expr1073744487 str@var232 ) ) {
127: return getStringCharLiteral (@expr1073744488 str@var232 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var233 )
132: {
133: if (@expr1073744489 isCharLiteral (@expr1073744490 str@var233 ) ) {
134: return getStringCharLiteral (@expr1073744491 str@var233 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var234 )
139: {
140: if (@expr1073744492 i@var234 ==@expr1073744493 1 ) {
141: return "st" ; }
142: if (@expr1073744494 i@var234 ==@expr1073744495 2 ) {
143: return "nd" ; }
144: if (@expr1073744496 i@var234 ==@expr1073744497 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var235 , const std :: string & rhs@var236 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var237 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var238 , const std :: string & name@var239 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var240 , const std :: string & name@var241 ) ;
156:
157: void strTolower ( std :: string & str@var242 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var243 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var244 ;
42:
43:
44: std :: string stdValue@var245 ;
45:
46:
47: Standards ( ) : c@var243 ( CLatest ) , cpp@var244 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var246 ) {
50: stdValue@var245 =@expr1073744498 str@var246 ;
51: if (@expr1073744499 str@var246 ==@expr1073744500 "c89" ||@expr1073744501 str@var246 ==@expr1073744502 "C89" ) {
52: c@var243 =@expr1073744503 C89 ;
53: return true ;
54: }
55: if (@expr1073744504 str@var246 ==@expr1073744505 "c99" ||@expr1073744506 str@var246 ==@expr1073744507 "C99" ) {
56: c@var243 =@expr1073744508 C99 ;
57: return true ;
58: }
59: if (@expr1073744509 str@var246 ==@expr1073744510 "c11" ||@expr1073744511 str@var246 ==@expr1073744512 "C11" ) {
60: c@var243 =@expr1073744513 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744514 c@var243 ) {
67: case C89 :@expr2691 ;
68: return "c89" ;
69: case C99 :@expr2691 ;
70: return "c99" ;
71: case C11 :@expr2691 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var247 ) {
77: if (@expr1073744518 std@var247 ==@expr1073744519 "c89" ) {
78: return Standards ::@expr1073744520 C89 ;
79: }
80: if (@expr1073744521 std@var247 ==@expr1073744522 "c99" ) {
81: return Standards ::@expr1073744523 C99 ;
82: }
83: if (@expr1073744524 std@var247 ==@expr1073744525 "c11" ) {
84: return Standards ::@expr1073744526 C11 ;
85: }
86: return Standards ::@expr1073744527 CLatest ;
87: }
88: bool setCPP ( std :: string str@var248 ) {
89: stdValue@var245 =@expr1073744528 str@var248 ;
90: strTolower (@expr1073744529 str@var248 ) ;
91: cpp@var244 =@expr1073744530 getCPP (@expr1073744531 str@var248 ) ;
92: return !@expr1073744532 stdValue@var245 .@expr1073744533 empty (@expr1073744534 ) &&@expr1073744535 str@var248 ==@expr1073744536 getCPP (@expr1073744537 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744538 cpp@var244 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var249 ) {
98: switch (@expr1073744539 std@var249 ) {
99: case CPP03 :@expr2716 ;
100: return "c++03" ;
101: case CPP11 :@expr2716 ;
102: return "c++11" ;
103: case CPP14 :@expr2716 ;
104: return "c++14" ;
105: case CPP17 :@expr2716 ;
106: return "c++17" ;
107: case CPP20 :@expr2716 ;
108: return "c++20" ;
109: case CPP23 :@expr2716 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var250 ) {
115: if (@expr1073744546 std@var250 ==@expr1073744547 "c++03" ) {
116: return Standards ::@expr1073744548 CPP03 ;
117: }
118: if (@expr1073744549 std@var250 ==@expr1073744550 "c++11" ) {
119: return Standards ::@expr1073744551 CPP11 ;
120: }
121: if (@expr1073744552 std@var250 ==@expr1073744553 "c++14" ) {
122: return Standards ::@expr1073744554 CPP14 ;
123: }
124: if (@expr1073744555 std@var250 ==@expr1073744556 "c++17" ) {
125: return Standards ::@expr1073744557 CPP17 ;
126: }
127: if (@expr1073744558 std@var250 ==@expr1073744559 "c++20" ) {
128: return Standards ::@expr1073744560 CPP20 ;
129: }
130: if (@expr1073744561 std@var250 ==@expr1073744562 "c++23" ) {
131: return Standards ::@expr1073744563 CPP23 ;
132: }
133: return Standards ::@expr1073744564 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var254 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var251 ) : errorcode@var254 ( e@var251 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var252 , T && r@var253 ) : errorcode@var254 ( e@var252 ) , reason@var255 ( r@var253 ) { }
66: ErrorCode errorcode@var254 ;
67: std :: string reason@var255 ;
68: } ;
69:
70: Error load ( const char exename@var256 [ ] , const char path@var257 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var258 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var259 [ ] , unsigned long len@var260 ) ;
75:
76: struct AllocFunc {
77: int groupId@var261 ;
78: int arg@var262 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var263 ;
81: int bufferSizeArg1@var264 ;
82: int bufferSizeArg2@var265 ;
83: int reallocArg@var266 ;
84: bool initData@var267 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var268 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var269 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var270 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var271 , int arg@var272 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var273 , int arg@var274 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var275 , int arg@var276 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var277 [ ] ) const {
107: return getAllocDealloc (@expr1073744565 mAlloc@var543 , name@var277 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var278 [ ] ) const {
112: return getAllocDealloc (@expr1073744566 mDealloc@var544 , name@var278 ) ;
113: }
114:
115:
116: int allocId ( const char name@var279 [ ] ) const {
117: const AllocFunc * af@var280 ; af@var280 =@expr1073744567 getAllocDealloc (@expr1073744568 mAlloc@var543 , name@var279 ) ;
118: return af@var280 ?@expr1073744569 af@var280 .@expr1073744570 groupId@var281 :@expr1073744571 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var282 [ ] ) const {
123: const AllocFunc * af@var283 ; af@var283 =@expr1073744572 getAllocDealloc (@expr1073744573 mDealloc@var544 , name@var282 ) ;
124: return af@var283 ?@expr1073744574 af@var283 .@expr1073744575 groupId@var284 :@expr1073744576 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var285 , int id@var286 , int arg@var287 ) {
129: mAlloc@var543 [@expr2753 functionname@var285 ] .@expr1073744578 groupId@var2495 =@expr1073744579 id@var286 ;
130: mAlloc@var543 [@expr2753 functionname@var285 ] .@expr1073744581 arg@var2496 =@expr1073744582 arg@var287 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var288 , int id@var289 , int arg@var290 ) {
134: mDealloc@var544 [@expr2759 functionname@var288 ] .@expr1073744584 groupId@var2497 =@expr1073744585 id@var289 ;
135: mDealloc@var544 [@expr2759 functionname@var288 ] .@expr1073744587 arg@var2498 =@expr1073744588 arg@var290 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var291 , int id@var292 , int arg@var293 , int reallocArg@var294 = 1 ) {
139: mRealloc@var545 [@expr2765 functionname@var291 ] .@expr1073744590 groupId@var2499 =@expr1073744591 id@var292 ;
140: mRealloc@var545 [@expr2765 functionname@var291 ] .@expr1073744593 arg@var2500 =@expr1073744594 arg@var293 ;
141: mRealloc@var545 [@expr2765 functionname@var291 ] .@expr1073744596 reallocArg@var2501 =@expr1073744597 reallocArg@var294 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var295 , bool noreturn@var296 ) {
146: mNoReturn@var546 [@expr1073744598 funcname@var295 ] =@expr1073744599 noreturn@var296 ?@expr1073744600 FalseTrueMaybe ::@expr1073744601 True :@expr1073744602 FalseTrueMaybe ::@expr1073744603 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var297 ) ;
150:
151:
152: static bool ismemory ( const int id@var298 ) {
153: return (@expr2780 (@expr2780 id@var298 >@expr1073744606 0 ) &&@expr1073744607 (@expr2780 (@expr2780 id@var298 &@expr1073744610 1 ) ==@expr1073744611 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var299 ) {
156: return (@expr2788 (@expr2788 func@var299 .@expr2790 groupId@var300 >@expr1073744615 0 ) &&@expr1073744616 (@expr2788 (@expr2788 func@var299 .@expr2790 groupId@var300 &@expr1073744620 1 ) ==@expr1073744621 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var301 ) {
161: return (@expr2798 (@expr2798 id@var301 >@expr1073744624 0 ) &&@expr1073744625 (@expr2798 (@expr2798 id@var301 &@expr1073744628 1 ) ==@expr1073744629 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var302 ) {
164: return (@expr2806 (@expr2806 func@var302 .@expr2808 groupId@var303 >@expr1073744633 0 ) &&@expr1073744634 (@expr2806 (@expr2806 func@var302 .@expr2808 groupId@var303 &@expr1073744638 1 ) ==@expr1073744639 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var304 ) const ;
168: int formatstr_argno ( const Token * ftok@var305 ) const ;
169: bool formatstr_scan ( const Token * ftok@var306 ) const ;
170: bool formatstr_secure ( const Token * ftok@var307 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var308 ;
174: int ptr2Arg@var309 ;
175: int sizeArg@var310 ;
176: int strlenArg@var311 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var312 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var313 ;
182: Standards standards@var314 ;
183: Severity :: SeverityType severity@var315 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var316 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var317 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var318 ) const ;
191: bool matchArguments ( const Token * ftok@var319 , const std :: string & functionName@var320 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var321 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var322 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var323 ) const ;
198: int returnValueContainer ( const Token * ftok@var324 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var325 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var326 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var327 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var328 , std :: string * unknownFunc@var329 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var339 ( -1 ) ,
210: size_templateArgNo@var341 ( -1 ) ,
211: arrayLike_indexOp@var342 ( false ) ,
212: stdStringLike@var343 ( false ) ,
213: stdAssociativeLike@var344 ( false ) ,
214: opLessAllowed@var345 ( true ) ,
215: hasInitializerListConstructor@var346 ( false ) ,
216: unstableErase@var347 ( false ) ,
217: unstableInsert@var348 ( false ) ,
218: view@var349 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var330 ;
248: Yield yield@var331 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var332 ;
252: int templateParameter@var333 ;
253: } ;
254: std :: string startPattern@var334 ; std :: string startPattern2@var335 ; std :: string endPattern@var336 ; std :: string itEndPattern@var337 ;
255: std :: map < std :: string , Function > functions@var338 ;
256: int type_templateArgNo@var339 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var340 ;
258: int size_templateArgNo@var341 ;
259: bool arrayLike_indexOp@var342 ;
260: bool stdStringLike@var343 ;
261: bool stdAssociativeLike@var344 ;
262: bool opLessAllowed@var345 ;
263: bool hasInitializerListConstructor@var346 ;
264: bool unstableErase@var347 ;
265: bool unstableInsert@var348 ;
266: bool view@var349 ;
267:
268: Action getAction ( const std :: string & function@var350 ) const {
269: const std ::@expr1073744640 map < std ::@expr1073744641 string , Function > ::@expr1073744642 const_iterator i@var351 =@expr1073744643 functions@var338 .@expr1073744644 find (@expr1073744645 function@var350 ) ;
270: if (@expr1073744646 i@var351 !=@expr1073744647 functions@var338 .@expr1073744648 end (@expr1073744649 ) ) {
271: return i@var351 .@expr1073744650 second@var352 .@expr1073744651 action@var353 ; }
272: return Action ::@expr1073744652 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var354 ) const {
276: const std ::@expr1073744653 map < std ::@expr1073744654 string , Function > ::@expr1073744655 const_iterator i@var355 =@expr1073744656 functions@var338 .@expr1073744657 find (@expr1073744658 function@var354 ) ;
277: if (@expr1073744659 i@var355 !=@expr1073744660 functions@var338 .@expr1073744661 end (@expr1073744662 ) ) {
278: return i@var355 .@expr1073744663 second@var356 .@expr1073744664 yield@var357 ; }
279: return Yield ::@expr1073744665 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var358 ) ;
283: static Action actionFrom ( const std :: string & actionName@var359 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var360 ;
286: const Container * detectContainer ( const Token * typeStart@var361 , bool iterator@var362 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var363 , bool * isIterator@var364 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var365 ( false ) ,
293: notnull@var366 ( false ) ,
294: notuninit@var367 ( -1 ) ,
295: formatstr@var368 ( false ) ,
296: strz@var369 ( false ) ,
297: optional@var370 ( false ) ,
298: variadic@var371 ( false ) ,
299: iteratorInfo@var377 ( ) ,
300: direction@var385 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var365 ;
303: bool notnull@var366 ;
304: int notuninit@var367 ;
305: bool formatstr@var368 ;
306: bool strz@var369 ;
307: bool optional@var370 ;
308: bool variadic@var371 ;
309: std :: string valid@var372 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var373 ( 0 ) , it@var374 ( false ) , first@var375 ( false ) , last@var376 ( false ) { }
314:
315: int container@var373 ;
316: bool it@var374 ;
317: bool first@var375 ;
318: bool last@var376 ;
319: } ;
320: IteratorInfo iteratorInfo@var377 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var378 , int a@var379 ) : type@var380 ( t@var378 ) , arg@var381 ( a@var379 ) , arg2@var382 ( 0 ) , value@var383 ( 0 ) { }
326: Type type@var380 ;
327: int arg@var381 ;
328: int arg2@var382 ;
329: long long value@var383 ;
330: } ;
331: std :: vector < MinSize > minsizes@var384 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var385 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var386 ;
344: bool use@var387 ;
345: bool leakignore@var388 ;
346: bool isconst@var389 ;
347: bool ispure@var390 ;
348: UseRetValType useretval@var391 ;
349: bool ignore@var392 ;
350: bool formatstr@var393 ;
351: bool formatstr_scan@var394 ;
352: bool formatstr_secure@var395 ;
353: Container :: Action containerAction@var396 ;
354: Container :: Yield containerYield@var397 ;
355: Function ( )
356: : use@var387 ( false ) ,
357: leakignore@var388 ( false ) ,
358: isconst@var389 ( false ) ,
359: ispure@var390 ( false ) ,
360: useretval@var391 ( UseRetValType :: NONE ) ,
361: ignore@var392 ( false ) ,
362: formatstr@var393 ( false ) ,
363: formatstr_scan@var394 ( false ) ,
364: formatstr_secure@var395 ( false ) ,
365: containerAction@var396 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var397 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var398 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var399 ;
372: bool isUse ( const std :: string & functionName@var400 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var401 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var402 , bool pure@var403 ) const ;
375: bool isFunctionConst ( const Token * ftok@var404 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var405 , int argnr@var406 ) const {
378: const ArgumentChecks * arg@var407 ; arg@var407 =@expr1073744666 getarg (@expr1073744667 ftok@var405 , argnr@var406 ) ;
379: return arg@var407 &&@expr1073744668 arg@var407 .@expr1073744669 notbool@var408 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var409 , int argnr@var410 ) const ;
383: bool isuninitargbad ( const Token * ftok@var411 , int argnr@var412 , int indirect@var413 = 0 , bool * hasIndirect@var414 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var415 , int argnr@var416 ) const {
386: const ArgumentChecks * arg@var417 ; arg@var417 =@expr1073744670 getarg (@expr1073744671 ftok@var415 , argnr@var416 ) ;
387: return arg@var417 &&@expr1073744672 arg@var417 .@expr1073744673 formatstr@var418 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var419 , int argnr@var420 ) const {
391: const ArgumentChecks * arg@var421 ; arg@var421 =@expr1073744674 getarg (@expr1073744675 ftok@var419 , argnr@var420 ) ;
392: return arg@var421 &&@expr1073744676 arg@var421 .@expr1073744677 strz@var422 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var423 , int argnr@var424 , const long long argvalue@var425 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var426 , int argnr@var427 , double argvalue@var428 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var429 , int argnr@var430 ) const {
399: const ArgumentChecks * arg@var431 ; arg@var431 =@expr1073744678 getarg (@expr1073744679 ftok@var429 , argnr@var430 ) ;
400: return arg@var431 ?@expr1073744680 arg@var431 .@expr1073744681 valid@var432 :@expr1073744682 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var433 ;
405: std :: string op1@var434 ;
406: std :: string op2@var435 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744683 isInt (@expr1073744684 op1@var434 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var436 , int argnr@var437 ) const {
413: const ArgumentChecks * arg@var438 ; arg@var438 =@expr1073744685 getarg (@expr1073744686 ftok@var436 , argnr@var437 ) ;
414: return arg@var438 &&@expr1073744687 arg@var438 .@expr2864 iteratorInfo@var439 .@expr1073744689 it@var440 ?@expr1073744690 &@expr1073744691 arg@var438 .@expr2864 iteratorInfo@var439 :@expr1073744693 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var441 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var442 , int argnr@var443 ) const {
420: const ArgumentChecks * arg@var444 ; arg@var444 =@expr1073744694 getarg (@expr1073744695 ftok@var442 , argnr@var443 ) ;
421: return arg@var444 ?@expr1073744696 &@expr1073744697 arg@var444 .@expr1073744698 minsizes@var445 :@expr1073744699 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var446 , int argnr@var447 ) const ;
425:
426: bool markupFile ( const std :: string & path@var448 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var449 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var553 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var450 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var451 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var452 , const std :: string & token@var453 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var454 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var455 ) const ;
443: const std :: string & blockend ( const std :: string & file@var456 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var457 , const std :: string & keyword@var458 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var459 ) const {
448: return mExporters@var556 .@expr1073744700 find (@expr1073744701 prefix@var459 ) !=@expr1073744702 mExporters@var556 .@expr1073744703 end (@expr1073744704 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var460 , const std :: string & token@var461 ) const {
452: const std ::@expr1073744705 map < std ::@expr1073744706 string , ExportedFunctions > ::@expr1073744707 const_iterator it@var462 =@expr1073744708 mExporters@var556 .@expr1073744709 find (@expr1073744710 prefix@var460 ) ;
453: return (@expr1073744711 it@var462 !=@expr1073744712 mExporters@var556 .@expr1073744713 end (@expr1073744714 ) &&@expr1073744715 it@var462 .@expr1073744716 second@var463 .@expr1073744717 isPrefix (@expr1073744718 token@var461 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var464 , const std :: string & token@var465 ) const {
457: const std ::@expr1073744719 map < std ::@expr1073744720 string , ExportedFunctions > ::@expr1073744721 const_iterator it@var466 =@expr1073744722 mExporters@var556 .@expr1073744723 find (@expr1073744724 prefix@var464 ) ;
458: return (@expr1073744725 it@var466 !=@expr1073744726 mExporters@var556 .@expr1073744727 end (@expr1073744728 ) &&@expr1073744729 it@var466 .@expr1073744730 second@var467 .@expr1073744731 isSuffix (@expr1073744732 token@var465 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var468 , const std :: string & importer@var469 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var470 , Container :: Yield yield@var471 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var472 , Container :: Action action@var473 ) const ;
465:
466: bool isreflection ( const std :: string & token@var474 ) const {
467: return mReflection@var558 .@expr1073744733 find (@expr1073744734 token@var474 ) !=@expr1073744735 mReflection@var558 .@expr1073744736 end (@expr1073744737 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var475 ) const {
471: const std ::@expr1073744738 map < std ::@expr1073744739 string , int > ::@expr1073744740 const_iterator it@var476 =@expr1073744741 mReflection@var558 .@expr1073744742 find (@expr1073744743 token@var475 ) ;
472: if (@expr1073744744 it@var476 !=@expr1073744745 mReflection@var558 .@expr1073744746 end (@expr1073744747 ) ) {
473: return it@var476 .@expr1073744748 second@var477 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var478 ;
478:
479: struct SmartPointer {
480: std :: string name@var479 ; name@var479 = "" ;
481: bool unique@var480 ; unique@var480 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var481 ;
485: bool isSmartPointer ( const Token * tok@var482 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var483 ) const ;
487:
488: struct PodType {
489: unsigned int size@var484 ;
490: char sign@var485 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var486 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var487 ) const {
494: const std ::@expr1073744749 unordered_map < std ::@expr1073744750 string , PodType > ::@expr1073744751 const_iterator it@var488 =@expr1073744752 mPodTypes@var559 .@expr1073744753 find (@expr1073744754 name@var487 ) ;
495: return (@expr2931 it@var488 !=@expr1073744756 mPodTypes@var559 .@expr1073744757 end (@expr1073744758 ) ) ?@expr1073744759 &@expr1073744760 (@expr2931 it@var488 .@expr1073744762 second@var489 ) :@expr1073744763 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var500 ( false )
501: , mUnsigned@var501 ( false )
502: , mLong@var502 ( false )
503: , mPointer@var503 ( false )
504: , mPtrPtr@var504 ( false )
505: , mConstPtr@var505 ( false ) { }
506: bool operator== ( const PlatformType & type@var490 ) const {
507: return (@expr1073744764 mSigned@var500 ==@expr1073744765 type@var490 .@expr1073744766 mSigned@var491 &&@expr1073744767
508: mUnsigned@var501 ==@expr1073744768 type@var490 .@expr1073744769 mUnsigned@var492 &&@expr1073744770
509: mLong@var502 ==@expr1073744771 type@var490 .@expr1073744772 mLong@var493 &&@expr1073744773
510: mPointer@var503 ==@expr1073744774 type@var490 .@expr1073744775 mPointer@var494 &&@expr1073744776
511: mPtrPtr@var504 ==@expr1073744777 type@var490 .@expr1073744778 mPtrPtr@var495 &&@expr1073744779
512: mConstPtr@var505 ==@expr1073744780 type@var490 .@expr1073744781 mConstPtr@var496 &&@expr1073744782
513: mType@var499 ==@expr1073744783 type@var490 .@expr1073744784 mType@var497 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var498 ) const {
516: return !@expr1073744785 (@expr1073744786 *@expr1073744787 this@expr1073744788 ==@expr1073744789 type@var498 ) ;
517: }
518: std :: string mType@var499 ;
519: bool mSigned@var500 ;
520: bool mUnsigned@var501 ;
521: bool mLong@var502 ;
522: bool mPointer@var503 ;
523: bool mPtrPtr@var504 ;
524: bool mConstPtr@var505 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var506 ) const {
529: const std ::@expr1073744790 map < std ::@expr1073744791 string , PlatformType > ::@expr1073744792 const_iterator it@var507 =@expr1073744793 mPlatformTypes@var509 .@expr1073744794 find (@expr1073744795 name@var506 ) ;
530: return (@expr2972 it@var507 !=@expr1073744797 mPlatformTypes@var509 .@expr1073744798 end (@expr1073744799 ) ) ?@expr1073744800 &@expr1073744801 (@expr2972 it@var507 .@expr1073744803 second@var508 ) :@expr1073744804 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var509 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var510 , const std :: string & platform@var511 ) const {
536: const std ::@expr1073744805 map < std ::@expr2982 string , Platform > ::@expr1073744807 const_iterator it@var512 =@expr1073744808 mPlatforms@var561 .@expr1073744809 find (@expr1073744810 platform@var511 ) ;
537: if (@expr1073744811 it@var512 !=@expr1073744812 mPlatforms@var561 .@expr1073744813 end (@expr1073744814 ) ) {
538: const PlatformType * const type@var513 ; type@var513 =@expr1073744815 it@var512 .@expr1073744816 second@var514 .@expr1073744817 platform_type (@expr1073744818 name@var510 ) ;
539: if (@expr1073744819 type@var513 ) {
540: return type@var513 ; }
541: }
542:
543: const std ::@expr1073744820 map < std ::@expr2982 string , PlatformType > ::@expr1073744822 const_iterator it2@var515 =@expr1073744823 mPlatformTypes@var560 .@expr1073744824 find (@expr1073744825 name@var510 ) ;
544: return (@expr3002 it2@var515 !=@expr1073744827 mPlatformTypes@var560 .@expr1073744828 end (@expr1073744829 ) ) ?@expr1073744830 &@expr1073744831 (@expr3002 it2@var515 .@expr1073744833 second@var516 ) :@expr1073744834 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var517 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var518 , Library :: Container :: Yield y@var519 , const std :: string & fallback@var520 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var521 , const std :: string & typeName@var522 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var523 , const std :: string & name@var524 , std :: set < std :: string > & unknown_elements@var525 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var526 ) {
565: mPrefixes@var530 .@expr1073744835 insert (@expr1073744836 prefix@var526 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var527 ) {
568: mSuffixes@var531 .@expr1073744837 insert (@expr1073744838 suffix@var527 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var528 ) const {
571: return (@expr1073744839 mPrefixes@var530 .@expr1073744840 find (@expr1073744841 prefix@var528 ) !=@expr1073744842 mPrefixes@var530 .@expr1073744843 end (@expr1073744844 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var529 ) const {
574: return (@expr1073744845 mSuffixes@var531 .@expr1073744846 find (@expr1073744847 suffix@var529 ) !=@expr1073744848 mSuffixes@var531 .@expr1073744849 end (@expr1073744850 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var530 ;
579: std :: set < std :: string > mSuffixes@var531 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var539 ( 0 ) { }
584:
585: void setStart ( const char * s@var532 ) {
586: mStart@var537 =@expr1073744851 s@var532 ;
587: }
588: void setEnd ( const char * e@var533 ) {
589: mEnd@var538 =@expr1073744852 e@var533 ;
590: }
591: void setOffset ( const int o@var534 ) {
592: mOffset@var539 =@expr1073744853 o@var534 ;
593: }
594: void addBlock ( const char * blockName@var535 ) {
595: mBlocks@var540 .@expr1073744854 insert (@expr1073744855 blockName@var535 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var537 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var538 ;
602: }
603: int offset ( ) const {
604: return mOffset@var539 ;
605: }
606: bool isBlock ( const std :: string & blockName@var536 ) const {
607: return mBlocks@var540 .@expr1073744856 find (@expr1073744857 blockName@var536 ) !=@expr1073744858 mBlocks@var540 .@expr1073744859 end (@expr1073744860 ) ;
608: }
609:
610: private:
611: std :: string mStart@var537 ;
612: std :: string mEnd@var538 ;
613: int mOffset@var539 ;
614: std :: set < std :: string > mBlocks@var540 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var541 ;
618: std :: set < std :: string > mFiles@var542 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var543 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var544 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var545 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var546 ;
623: std :: map < std :: string , std :: string > mReturnValue@var547 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var548 ;
625: std :: map < std :: string , int > mReturnValueContainer@var549 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var550 ;
627: std :: map < std :: string , bool > mReportErrors@var551 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var552 ;
629: std :: set < std :: string > mMarkupExtensions@var553 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var554 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var555 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var556 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var557 ;
634: std :: map < std :: string , int > mReflection@var558 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var559 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var560 ;
637: std :: map < std :: string , Platform > mPlatforms@var561 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var562 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var563 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var564 , int argnr@var565 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var566 , bool * error@var567 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var568 , const std :: string & name@var569 ) {
646: const std ::@expr1073744861 map < std ::@expr1073744862 string , AllocFunc > ::@expr1073744863 const_iterator it@var570 =@expr1073744864 data@var568 .@expr1073744865 find (@expr1073744866 name@var569 ) ;
647: return (@expr1073744867 it@var570 ==@expr1073744868 data@var568 .@expr1073744869 end (@expr1073744870 ) ) ?@expr1073744871 nullptr :@expr1073744872 &@expr1073744873 it@var570 .@expr1073744874 second@var571 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var572 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var573 ,
654: const Settings * settings@var574 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var575 = nullptr ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var576 ) const {
54: x@var576 ++@expr1073744875 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var577 ) const {
60: x@var577 --@expr1073744876 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var578 , const U & y@var579 ) const {
67: return x@var578 <@expr1073744877 y@var579 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var580 , const U & y@var581 ) const {
74: return std ::@expr1073744878 abs (@expr1073744879 x@var580 -@expr1073744880 y@var581 ) ==@expr1073744881 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var582 , T x@var583 , U y@var584 ) const {
81: result@var582 =@expr1073744882 !@expr1073744883 (@expr1073744884 x@var583 >@expr1073744885 y@var584 ||@expr1073744886 x@var583 <@expr1073744887 y@var584 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var585 = 0 , Bound b@var586 = Bound :: Point )
91: : valueType@var626 ( ValueType :: INT ) ,
92: bound@var627 ( b@var586 ) ,
93: intvalue@var628 ( val@var585 ) ,
94: tokvalue@var629 ( nullptr ) ,
95: floatValue@var630 ( 0.0 ) ,
96: moveKind@var631 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var632 ( val@var585 ) ,
98: condition@var633 ( nullptr ) ,
99: varId@var635 ( 0U ) ,
100: safe@var636 ( false ) ,
101: conditional@var637 ( false ) ,
102: macro@var638 ( false ) ,
103: defaultArg@var639 ( false ) ,
104: indirect@var640 ( 0 ) ,
105: path@var641 ( 0 ) ,
106: wideintvalue@var642 ( val@var585 ) ,
107: subexpressions@var643 ( ) ,
108: capturetok@var644 ( nullptr ) ,
109: lifetimeKind@var645 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var646 ( LifetimeScope :: Local ) ,
111: valueKind@var651 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var587 , long long val@var588 , Bound b@var589 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var590 ) const {
118: if (@expr1073744888 valueType@var626 !=@expr1073744889 rhs@var590 .@expr1073744890 valueType@var591 ) {
119: return false ; }
120: switch (@expr1073744891 valueType@var626 ) {
121: case ValueType ::@expr1073744892 INT :@expr3069
122: case ValueType ::@expr1073744894 CONTAINER_SIZE :@expr3069
123: case ValueType ::@expr1073744896 BUFFER_SIZE :@expr3069
124: case ValueType ::@expr1073744898 ITERATOR_START :@expr3069
125: case ValueType ::@expr1073744900 ITERATOR_END :@expr3069 ;
126: if (@expr3078 intvalue@var628 !=@expr3079 rhs@var590 .@expr3080 intvalue@var592 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744905 TOK :@expr3069 ;
130: if (@expr3083 tokvalue@var629 !=@expr3084 rhs@var590 .@expr3085 tokvalue@var593 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744910 FLOAT :@expr3069 ;
134:
135: if (@expr1073744912 floatValue@var630 >@expr1073744913 rhs@var590 .@expr3090 floatValue@var594 ||@expr1073744915 floatValue@var630 <@expr1073744916 rhs@var590 .@expr3090 floatValue@var594 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744918 MOVED :@expr3069 ;
139: if (@expr1073744920 moveKind@var631 !=@expr1073744921 rhs@var590 .@expr1073744922 moveKind@var595 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744923 UNINIT :@expr3069 ;
143: break ;
144: case ValueType ::@expr1073744925 LIFETIME :@expr3069 ;
145: if (@expr3083 tokvalue@var629 !=@expr3084 rhs@var590 .@expr3085 tokvalue@var593 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744930 SYMBOLIC :@expr3069 ;
149: if (@expr1073744932 !@expr1073744933 sameToken (@expr1073744934 tokvalue@var629 , rhs@var590 .@expr3085 tokvalue@var593 ) ) {
150: return false ; }
151: if (@expr3078 intvalue@var628 !=@expr3079 rhs@var590 .@expr3080 intvalue@var592 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var596 , F f@var597 ) {
160: switch (@expr1073744939 self@var596 .@expr1073744940 valueType@var598 ) {
161: case ValueType ::@expr1073744941 INT :@expr3118
162: case ValueType ::@expr1073744943 SYMBOLIC :@expr3118
163: case ValueType ::@expr1073744945 BUFFER_SIZE :@expr3118
164: case ValueType ::@expr1073744947 CONTAINER_SIZE :@expr3118
165: case ValueType ::@expr1073744949 ITERATOR_START :@expr3118
166: case ValueType ::@expr1073744951 ITERATOR_END :@expr3118 ; {
167: f@var597 (@expr1073744953 self@var596 .@expr1073744954 intvalue@var599 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744955 FLOAT :@expr3118 ; {
171: f@var597 (@expr1073744957 self@var596 .@expr1073744958 floatValue@var600 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744959 UNINIT :@expr3118
175: case ValueType ::@expr1073744961 TOK :@expr3118
176: case ValueType ::@expr1073744963 LIFETIME :@expr3118
177: case ValueType ::@expr1073744965 MOVED :@expr3118 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var601 , Compare compare@var602 , T x@var603 , U y@var604 ) const {
186: result@var601 =@expr1073744967 compare@var602 (@expr1073744968 x@var603 , y@var604 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var605 , const Value & rhs@var606 , Compare compare@var607 , T x@var608 ) const {
191: visitValue (@expr1073744970 rhs@var606 ,
192: std ::@expr1073744971 bind (@expr1073744972 innerVisitor {@expr1073744973 } , std ::@expr1073744974 ref (@expr1073744975 result@var605 ) , std ::@expr1073744976 move (@expr1073744977 compare@var607 ) , x@var608 , std ::@expr1073744978 placeholders ::@expr1073744979 _1@expr1073744969 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var609 , Compare compare@var610 ) const {
198: assert (@expr1073744981 (@expr1073744982 !@expr1073744983 this@expr3160 .@expr1073744985 isSymbolicValue (@expr1073744986 ) &&@expr1073744987 !@expr1073744988 rhs@var609 .@expr1073744989 isSymbolicValue (@expr1073744990 ) ) ||@expr1073744991
199: (@expr1073744992 this@expr3160 .@expr1073744993 valueType@var626 ==@expr1073744994 rhs@var609 .@expr1073744995 valueType@var611 &&@expr1073744996 sameToken (@expr1073744997 this@expr3160 .@expr1073744998 tokvalue@var629 , rhs@var609 .@expr1073744999 tokvalue@var612 ) ) ) ;
200: bool result@var613 ; result@var613 =@expr1073745000 false ;
201: visitValue (@expr1073745001
202: *@expr1073745002 this@expr3160 ,
203: std ::@expr1073745003 bind (@expr1073745004 compareVisitor {@expr1073745005 } , std ::@expr3182 ref (@expr1073745007 result@var613 ) , std ::@expr3182 ref (@expr1073745009 rhs@var609 ) , std ::@expr1073745010 move (@expr1073745011 compare@var610 ) , std ::@expr1073745012 placeholders ::@expr1073745013 _1@expr1073744980 ) ) ;
204: return result@var613 ;
205: }
206:
207: bool operator== ( const Value & rhs@var614 ) const {
208: if (@expr1073745014 !@expr1073745015 equalValue (@expr1073745016 rhs@var614 ) ) {
209: return false ; }
210:
211: return varvalue@var632 ==@expr1073745017 rhs@var614 .@expr1073745018 varvalue@var615 &&@expr1073745019
212: condition@var633 ==@expr1073745020 rhs@var614 .@expr1073745021 condition@var616 &&@expr1073745022
213: varId@var635 ==@expr1073745023 rhs@var614 .@expr1073745024 varId@var617 &&@expr1073745025
214: conditional@var637 ==@expr1073745026 rhs@var614 .@expr1073745027 conditional@var618 &&@expr1073745028
215: defaultArg@var639 ==@expr1073745029 rhs@var614 .@expr1073745030 defaultArg@var619 &&@expr1073745031
216: indirect@var640 ==@expr1073745032 rhs@var614 .@expr1073745033 indirect@var620 &&@expr1073745034
217: valueKind@var651 ==@expr1073745035 rhs@var614 .@expr1073745036 valueKind@var621 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var622 ) const {
221: return !@expr1073745037 (@expr1073745038 *@expr1073745039 this@expr1073745040 ==@expr1073745041 rhs@var622 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var623 ) const {
226: bool result@var624 ; result@var624 =@expr1073745043 false ;
227: visitValue (@expr1073745044 *@expr1073745045 this@expr1073745046 , std ::@expr1073745047 bind (@expr1073745048 equalVisitor {@expr1073745049 } , std ::@expr1073745050 ref (@expr1073745051 result@var624 ) , x@var623 , std ::@expr1073745052 placeholders ::@expr1073745053 _1@expr1073745042 ) ) ;
228: return result@var624 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073745054 bound@var627 ==@expr1073745055 Bound ::@expr1073745056 Lower ) {
233: visitValue (@expr1073745057 *@expr3234 this@expr3235 , increment {@expr1073745060 } ) ; }
234: else { if (@expr1073745061 bound@var627 ==@expr1073745062 Bound ::@expr1073745063 Upper ) {
235: visitValue (@expr1073745064 *@expr3234 this@expr3235 , decrement {@expr1073745066 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073745067 bound@var627 ==@expr1073745068 Bound ::@expr3245 Lower ) {
240: bound@var627 =@expr1073745070 Bound ::@expr3247 Upper ; }
241: else { if (@expr1073745072 bound@var627 ==@expr1073745073 Bound ::@expr3247 Upper ) {
242: bound@var627 =@expr1073745075 Bound ::@expr3245 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073745077 ) ;
247: decreaseRange (@expr1073745078 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var625 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var626 ;
267: bool isIntValue ( ) const {
268: return valueType@var626 ==@expr1073745079 ValueType ::@expr1073745080 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var626 ==@expr1073745081 ValueType ::@expr1073745082 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var626 ==@expr1073745083 ValueType ::@expr1073745084 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var626 ==@expr1073745085 ValueType ::@expr1073745086 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var626 ==@expr1073745087 ValueType ::@expr1073745088 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var626 ==@expr1073745089 ValueType ::@expr1073745090 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var626 ==@expr1073745091 ValueType ::@expr1073745092 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var626 ==@expr1073745093 ValueType ::@expr1073745094 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var626 ==@expr1073745095 ValueType ::@expr1073745096 ITERATOR_START ||@expr1073745097 valueType@var626 ==@expr1073745098 ValueType ::@expr1073745099 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var626 ==@expr1073745100 ValueType ::@expr1073745101 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var626 ==@expr1073745102 ValueType ::@expr1073745103 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var626 ==@expr1073745104 ValueType ::@expr1073745105 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var626 ==@expr1073745107 ValueType ::@expr1073745108 LIFETIME &&@expr1073745109 lifetimeScope@var646 ==@expr1073745110 LifetimeScope ::@expr1073745111 Local@expr1073745106 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var626 ==@expr1073745112 ValueType ::@expr1073745113 LIFETIME &&@expr1073745114 lifetimeScope@var646 ==@expr1073745115 LifetimeScope ::@expr1073745116 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var626 ==@expr1073745117 ValueType ::@expr1073745118 LIFETIME &&@expr1073745119 lifetimeScope@var646 ==@expr1073745120 LifetimeScope ::@expr1073745121 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073745122 ) ||@expr1073745123 isUninitValue (@expr1073745124 ) ||@expr1073745125 isLifetimeValue (@expr1073745126 ) ;
318: }
319:
320:
321: Bound bound@var627 ;
322:
323:
324: long long intvalue@var628 ;
325:
326:
327: const Token * tokvalue@var629 ;
328:
329:
330: double floatValue@var630 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var631 ;
334:
335:
336: long long varvalue@var632 ;
337:
338:
339: const Token * condition@var633 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var634 ;
342:
343:
344: int varId@var635 ;
345:
346:
347: bool safe@var636 ;
348:
349:
350: bool conditional@var637 ;
351:
352:
353: bool macro@var638 ;
354:
355:
356: bool defaultArg@var639 ;
357:
358: int indirect@var640 ;
359:
360:
361: long long path@var641 ;
362:
363:
364: long long wideintvalue@var642 ;
365:
366: std :: vector < std :: string > subexpressions@var643 ;
367:
368:
369: const Token * capturetok@var644 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var645 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var646 ;
385:
386: static const char * toString ( MoveKind moveKind@var647 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var648 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var649 ) ;
389: static const char * toString ( Bound bound@var650 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var651 ;
402:
403: void setKnown ( ) {
404: valueKind@var651 =@expr1073745127 ValueKind ::@expr1073745128 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var651 ==@expr1073745129 ValueKind ::@expr1073745130 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var651 =@expr1073745132 ValueKind ::@expr1073745133 Possible@expr1073745131 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var651 ==@expr1073745135 ValueKind ::@expr1073745136 Possible@expr1073745134 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var651 ==@expr1073745137 ValueKind ::@expr1073745138 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var651 =@expr1073745139 ValueKind ::@expr1073745140 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var652 = true ) {
428: if (@expr1073745141 inconclusive@var652 ) {
429: valueKind@var651 =@expr1073745142 ValueKind ::@expr1073745143 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var651 ==@expr1073745144 ValueKind ::@expr1073745145 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073745147 isKnown (@expr1073745148 ) ) {
438: valueKind@var651 =@expr1073745149 ValueKind ::@expr1073745150 Possible@expr1073745146 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073745151 condition@var633 &&@expr1073745152 !@expr1073745153 defaultArg@var639 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var653 , const Token * tok2@var654 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var655 , const Settings * settings@var656 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var657 , SymbolDatabase * symboldatabase@var658 , ErrorLogger * errorLogger@var659 , const Settings * settings@var660 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var661 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var662 , const Settings * settings@var663 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var664 ,
459: const Settings * settings@var665 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var666 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var667 , const Token * indexTok@var668 , bool possible@var669 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var670 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var671 , const Settings * settings@var672 = nullptr , int depth@var673 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var674 ;
471: bool addressOf@var675 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var676 ;
473: bool inconclusive@var677 ;
474:
475: LifetimeToken ( ) : token@var674 ( nullptr ) , addressOf@var675 ( false ) , errorPath@var676 ( ) , inconclusive@var677 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var678 , ValueFlow :: Value :: ErrorPath errorPath@var679 )
478: : token@var674 ( token@var678 ) , addressOf@var675 ( false ) , errorPath@var676 ( std :: move ( errorPath@var679 ) ) , inconclusive@var677 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var680 , bool addressOf@var681 , ValueFlow :: Value :: ErrorPath errorPath@var682 )
482: : token@var674 ( token@var680 ) , addressOf@var675 ( addressOf@var681 ) , errorPath@var676 ( std :: move ( errorPath@var682 ) ) , inconclusive@var677 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var683 , bool b@var684 ) {
486: for (@expr1073745154 LifetimeToken &@expr1073745155 x@var685 :@expr1073745156 v@var683 ) {
487: x@var685 .@expr1073745157 addressOf@var686 =@expr1073745158 b@var684 ; }
488: return v@var683 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var687 , bool b@var688 ) {
492: for (@expr1073745159 LifetimeToken &@expr1073745160 x@var689 :@expr1073745161 v@var687 ) {
493: x@var689 .@expr1073745162 inconclusive@var690 =@expr1073745163 b@var688 ; }
494: return v@var687 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var691 , ValueFlow :: Value & true_value@var692 , ValueFlow :: Value & false_value@var693 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var694 ) ;
499: const Token * parseCompareInt ( const Token * tok@var695 , ValueFlow :: Value & true_value@var696 , ValueFlow :: Value & false_value@var697 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var698 , long long val@var699 , const Token * varTok@var700 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var701 , const Token * varTok@var702 , long long val@var703 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var704 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var705 ,
508: ValueFlow :: Value & value@var706 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var707 ,
511: bool escape@var708 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var709 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var710 , const Token * lifetime@var711 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var712 , ValueFlow :: Value :: ErrorPath & errorPath@var713 , bool * addressOf@var714 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var715 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var716 , const Settings * settings@var717 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var718 , const ValueFlow :: Value * val@var719 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var720 , const ValueFlow :: Value * val@var721 , ValueFlow :: Value :: ErrorPath & errorPath@var722 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var723 , bool inconclusive@var724 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var725 ,
529: bool inconclusive@var726 = false ,
530: long long path@var727 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var728 , const Scope * defaultScope@var729 = nullptr , bool smallest@var730 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var731 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var732 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var733 ;
69: std :: string mScope@var734 ;
70: std :: string mName@var735 ;
71: std :: string mFullName@var736 ;
72: const Token * mNameToken@var737 ;
73: const Token * mParamEnd@var738 ;
74: unsigned int mFlags@var739 ;
75:
76: enum Anonymous0 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var740 ) {
90: setFlag (@expr1073745164 fIsClass , state@var740 ) ;
91: }
92: void isFunction ( bool state@var741 ) {
93: setFlag (@expr1073745165 fIsFunction , state@var741 ) ;
94: }
95: void isVariable ( bool state@var742 ) {
96: setFlag (@expr1073745166 fIsVariable , state@var742 ) ;
97: }
98: void isAlias ( bool state@var743 ) {
99: setFlag (@expr1073745167 fIsAlias , state@var743 ) ;
100: }
101: void isSpecialization ( bool state@var744 ) {
102: setFlag (@expr1073745168 fIsSpecialization , state@var744 ) ;
103: }
104: void isPartialSpecialization ( bool state@var745 ) {
105: setFlag (@expr1073745169 fIsPartialSpecialization , state@var745 ) ;
106: }
107: void isForwardDeclaration ( bool state@var746 ) {
108: setFlag (@expr1073745170 fIsForwardDeclaration , state@var746 ) ;
109: }
110: void isVariadic ( bool state@var747 ) {
111: setFlag (@expr1073745171 fIsVariadic , state@var747 ) ;
112: }
113: void isFriend ( bool state@var748 ) {
114: setFlag (@expr1073745172 fIsFriend , state@var748 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var749 ) const {
123: return (@expr3349 (@expr3349 mFlags@var739 &@expr1073745175 flag@var749 ) !=@expr1073745176 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var750 , bool state@var751 ) {
132: mFlags@var739 =@expr1073745177 state@var751 ?@expr1073745178 mFlags@var739 |@expr1073745179 flag@var750 :@expr1073745180 mFlags@var739 &@expr1073745181 ~@expr1073745182 flag@var750 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var752 , const std :: string & scope@var753 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var754 , const std :: string & scope@var755 , const Token * nameToken@var756 , const Token * paramEnd@var757 ) ;
150: TokenAndName ( const TokenAndName & other@var758 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var759 ) const {
154: return mToken@var733 ==@expr1073745183 rhs@var759 .@expr1073745184 mToken@var760 &&@expr1073745185 mScope@var734 ==@expr1073745186 rhs@var759 .@expr1073745187 mScope@var761 &&@expr1073745188 mName@var735 ==@expr1073745189 rhs@var759 .@expr1073745190 mName@var762 &&@expr1073745191 mFullName@var736 ==@expr1073745192 rhs@var759 .@expr1073745193 mFullName@var763 &&@expr1073745194
155: mNameToken@var737 ==@expr1073745195 rhs@var759 .@expr1073745196 mNameToken@var764 &&@expr1073745197 mParamEnd@var738 ==@expr1073745198 rhs@var759 .@expr1073745199 mParamEnd@var765 &&@expr1073745200 mFlags@var739 ==@expr1073745201 rhs@var759 .@expr1073745202 mFlags@var766 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var733 ;
160: }
161: void token ( Token * token@var767 ) {
162: mToken@var733 =@expr1073745203 token@var767 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var734 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var735 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var736 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var737 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var738 ;
178: }
179: void paramEnd ( const Token * end@var768 ) {
180: mParamEnd@var738 =@expr1073745204 end@var768 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745205 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745206 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745207 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745208 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745209 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745210 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745211 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745212 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745213 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var769 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var770 ) const {
243:
244:
245: return (@expr3390 (@expr3390 mFlags@var739 &@expr1073745216 fFamilyMask ) &@expr1073745217 (@expr3390 decl@var770 .@expr1073745219 mFlags@var771 &@expr1073745220 fFamilyMask ) ) !=@expr1073745221 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var772 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var773 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var774 , const unsigned long numberOfArguments@var775 , bool variadic@var776 , const char patternAfter@var777 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var778 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var779 , int & namepos@var780 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var781 , int & namepos@var782 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var783 , int & namepos@var784 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var785 ,
306: bool & codeWithTemplates@var786 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var787 , bool isTemplate@var788 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var789 = nullptr , Token * backToken@var790 = nullptr , bool isTemplate@var791 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var792 , Token * end@var793 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var794 , const std :: string & scope@var795 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var796 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var797 ,
393: const std :: list < const Token * > & specializations@var798 ,
394: const std :: time_t maxtime@var799 ,
395: std :: set < std :: string > & expandedtemplates@var800 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var801 , const Token * tok@var802 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var803 , const Token * tok@var804 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var805 ,
422: const TokenAndName & templateInstantiation@var806 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var807 ,
424: const std :: string & newName@var808 ,
425: bool copy@var809 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var810 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var811 ,
435: const std :: string & newName@var812 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var813 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var814 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var815 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var816 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var817 ,
458: const Token * templateInstantiationNameToken@var818 ,
459: const std :: list < const Token * > & specializations@var819 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var820 , const Token * end@var821 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var822 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var823 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var824 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var825 ,
487: const std :: string & indent@var826 = "    " ) const ;
488: void printOut ( const std :: string & text@var827 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var828 ;
491: TokenList & mTokenList@var829 ;
492: const Settings * mSettings@var830 ;
493: ErrorLogger * mErrorLogger@var831 ;
494: bool mChanged@var832 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var833 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var834 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var835 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var836 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var837 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var838 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var839 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var840 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var841 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var842 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var843 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var844 ;
57: Token * back@var845 ;
58: const TokenList * list@var846 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var847 , const Token * bodyEnd_@var848 , const std :: set < std :: string > & usingNamespaces_@var849 = std :: set < std :: string > ( ) ) : name@var850 ( name_@var847 ) , bodyEnd@var851 ( bodyEnd_@var848 ) , usingNamespaces@var852 ( usingNamespaces_@var849 ) { }
63: std :: string name@var850 ;
64: const Token * const bodyEnd@var851 ;
65: std :: set < std :: string > usingNamespaces@var852 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var853 ;
70: int mFileIndex@var854 ;
71: int mLineNumber@var855 ;
72: int mColumn@var856 ;
73: int mExprId@var857 ;
74:
75:
76: Token * mAstOperand1@var858 ;
77: Token * mAstOperand2@var859 ;
78: Token * mAstParent@var860 ;
79:
80:
81: const Scope * mScope@var861 ;
82: union {
83: const Function * mFunction@var862 ;
84: const Variable * mVariable@var863 ;
85: const :: Type * mType@var864 ;
86: const Enumerator * mEnumerator@var865 ;
87: } ;
88:
|
92:
93: int mProgressValue@var866 ;
94:
|
97:
98: int mIndex@var867 ;
99:
100:
101: std :: string * mOriginalName@var868 ;
102:
103:
104: ValueType * mValueType@var869 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var870 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var871 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var872 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var873 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var874 ;
119: long long value@var875 ;
120: struct CppcheckAttributes * next@var876 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var877 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var878 ;
126:
127:
128: unsigned char mBits@var879 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var880 , long long value@var881 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var882 , long long * value@var883 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var853 ( 0 )
135: , mFileIndex@var854 ( 0 )
136: , mLineNumber@var855 ( 0 )
137: , mColumn@var856 ( 0 )
138: , mExprId@var857 ( 0 )
139: , mAstOperand1@var858 ( nullptr )
140: , mAstOperand2@var859 ( nullptr )
141: , mAstParent@var860 ( nullptr )
142: , mScope@var861 ( nullptr )
143: , mFunction@var862 ( nullptr )
144: , mProgressValue@var866 ( 0 )
145: , mIndex@var867 ( 0 )
146: , mOriginalName@var868 ( nullptr )
147: , mValueType@var869 ( nullptr )
148: , mValues@var870 ( nullptr )
149: , mTemplateSimplifierPointers@var872 ( nullptr )
150: , mScopeInfo@var873 ( nullptr )
151: , mCppcheckAttributes@var877 ( nullptr )
152: , mCpp11init@var878 ( Cpp11init :: UNKNOWN )
153: , mBits@var879 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var884 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var885 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var886 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var887 ) {
199: mStr@var1099 =@expr1073745222 s@var887 ;
200: mImpl@var1105 .@expr1073745223 mVarId@var1136 =@expr1073745224 0 ;
201:
202: update_property_info (@expr1073745225 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var888 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1099 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var889 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var890 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var891 ) const ;
236: Token * tokAt ( int index@var892 ) {
237: return const_cast < Token *@expr3402 > (@expr1073745227 const_cast < const Token *@expr3402 > (@expr1073745229 this@expr1073745230 ) .@expr1073745231 tokAt (@expr1073745232 index@var892 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var893 ) const ;
245: Token * linkAt ( int index@var894 ) {
246: return const_cast < Token *@expr3409 > (@expr1073745234 const_cast < const Token *@expr3409 > (@expr1073745236 this@expr1073745237 ) .@expr1073745238 linkAt (@expr1073745239 index@var894 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var895 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var896 , const char ( & pattern@var897 ) [ count ] ) {
276: return simpleMatch (@expr1073745241 tok@var896 , pattern@var897 , count@expr1073745240 -@expr1073745242 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var898 , const char pattern@var899 [ ] , unsigned long pattern_len@var900 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var901 , const char pattern@var902 [ ] , int varid@var903 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var904 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var905 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var906 , const Settings * const settings@var907 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var908 , long long index@var909 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1105 .@expr1073745243 mValueType@var1137 ;
366: }
367: void setValueType ( ValueType * vt@var910 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var911 ; top@var911 =@expr1073745244 this@expr1073745245 ;
371: while (@expr1073745246 top@var911 &&@expr1073745247 !@expr1073745248 Token ::@expr1073745249 Match (@expr1073745250 top@var911 .@expr3427 astParent (@expr3428 ) , ",|(" ) ) {
372: top@var911 =@expr1073745253 top@var911 .@expr3427 astParent (@expr3428 ) ; }
373: return top@var911 ?@expr1073745256 top@var911 .@expr1073745257 mImpl@var912 .@expr1073745258 mValueType@var913 :@expr1073745259 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1103 ;
378: }
379: void tokType ( Token :: Type t@var914 ) {
380: mTokType@var1103 =@expr1073745260 t@var914 ;
381:
382: const bool memoizedIsName@var915 =@expr1073745261 mTokType@var1103 ==@expr1073745262 eName ||@expr1073745263 mTokType@var1103 ==@expr1073745264 eType ||@expr1073745265 mTokType@var1103 ==@expr1073745266 eVariable ||@expr1073745267
383: mTokType@var1103 ==@expr1073745268 eFunction ||@expr1073745269 mTokType@var1103 ==@expr1073745270 eKeyword ||@expr1073745271 mTokType@var1103 ==@expr3448 eBoolean ||@expr1073745273
384: mTokType@var1103 ==@expr3450 eEnumerator ;
385: setFlag (@expr1073745275 fIsName , memoizedIsName@var915 ) ;
386:
387: const bool memoizedIsLiteral@var916 =@expr1073745276 mTokType@var1103 ==@expr1073745277 eNumber ||@expr1073745278 mTokType@var1103 ==@expr1073745279 eString ||@expr1073745280 mTokType@var1103 ==@expr1073745281 eChar ||@expr1073745282
388: mTokType@var1103 ==@expr3448 eBoolean ||@expr1073745284 mTokType@var1103 ==@expr1073745285 eLiteral ||@expr1073745286 mTokType@var1103 ==@expr3450 eEnumerator ;
389: setFlag (@expr1073745288 fIsLiteral , memoizedIsLiteral@var916 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1103 ==@expr1073745289 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745290 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1104 ==@expr1073745291 fIsName &&@expr1073745292 mTokType@var1103 ==@expr1073745293 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745294 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1103 ==@expr1073745295 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1103 ==@expr1073745296 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745297 isConstOp (@expr1073745298 ) ||@expr1073745299
412: isAssignmentOp (@expr1073745300 ) ||@expr1073745301
413: mTokType@var1103 ==@expr1073745302 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745303 isArithmeticalOp (@expr1073745304 ) ||@expr1073745305
417: mTokType@var1103 ==@expr1073745306 eLogicalOp ||@expr1073745307
418: mTokType@var1103 ==@expr1073745308 eComparisonOp ||@expr1073745309
419: mTokType@var1103 ==@expr1073745310 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745311 ) ||@expr1073745312
423: mTokType@var1103 ==@expr1073745313 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1103 ==@expr1073745314 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1103 ==@expr1073745315 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1103 ==@expr1073745316 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1103 ==@expr1073745317 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1103 ==@expr1073745318 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745319 ) !=@expr1073745320 nullptr &&@expr1073745321 astOperand2 (@expr1073745322 ) !=@expr1073745323 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var917 ) const {
444: return s@var917 ==@expr1073745324 mStr@var1099 &&@expr1073745325 astOperand1 (@expr1073745326 ) !=@expr1073745327 nullptr &&@expr1073745328 astOperand2 (@expr1073745329 ) ==@expr1073745330 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1104 ;
450: }
451: void flags ( const unsigned int flags_@var918 ) {
452: mFlags@var1104 =@expr1073745331 flags_@var918 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745332 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var919 ) {
458: setFlag (@expr1073745333 fIsUnsigned , sign@var919 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745334 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var920 ) {
464: setFlag (@expr1073745335 fIsSigned , sign@var920 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745336 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var921 ) {
470: setFlag (@expr1073745337 fIsPointerCompare , b@var921 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745338 fIsLong ) ;
474: }
475: void isLong ( bool size@var922 ) {
476: setFlag (@expr1073745339 fIsLong , size@var922 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745340 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var923 ) {
482: setFlag (@expr1073745341 fIsStandardType , b@var923 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745342 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var924 ) {
488: setFlag (@expr1073745343 fIsExpandedMacro , m@var924 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745344 fIsCast ) ;
492: }
493: void isCast ( bool c@var925 ) {
494: setFlag (@expr1073745345 fIsCast , c@var925 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745346 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var926 ) {
500: setFlag (@expr1073745347 fIsAttributeConstructor , ac@var926 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745348 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var927 ) {
506: setFlag (@expr1073745349 fIsAttributeDestructor , value@var927 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745350 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var928 ) {
512: setFlag (@expr1073745351 fIsAttributeUnused , unused@var928 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745352 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var929 ) {
518: setFlag (@expr1073745353 fIsAttributeUsed , unused@var929 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745354 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var930 ) {
524: setFlag (@expr1073745355 fIsAttributePure , value@var930 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745356 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var931 ) {
530: setFlag (@expr1073745357 fIsAttributeConst , value@var931 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745358 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var932 ) {
536: setFlag (@expr1073745359 fIsAttributeNoreturn , value@var932 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745360 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var933 ) {
542: setFlag (@expr1073745361 fIsAttributeNothrow , value@var933 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745362 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var934 ) {
548: setFlag (@expr1073745363 fIsAttributePacked , value@var934 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745364 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var935 ) {
554: setFlag (@expr1073745365 fIsAttributeNodiscard , value@var935 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745366 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var936 ) {
560: setFlag (@expr1073745367 fIsAttributeMaybeUnused , value@var936 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var937 , long long value@var938 ) {
563: mImpl@var1105 .@expr1073745368 setCppcheckAttribute (@expr1073745369 type@var937 , value@var938 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var939 , long long * value@var940 ) const {
566: return mImpl@var1105 .@expr1073745370 getCppcheckAttribute (@expr1073745371 type@var939 , value@var940 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745372 mImpl@var1105 .@expr1073745373 mCppcheckAttributes@var1138 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745374 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745375 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var941 ) {
578: setFlag (@expr1073745376 fIsOperatorKeyword , value@var941 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745377 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var942 ) {
584: setFlag (@expr1073745378 fIsComplex , value@var942 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745379 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var943 ) {
590: setFlag (@expr1073745380 fIsEnumType , value@var943 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745381 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var944 ) {
596: setFlag (@expr1073745382 fAtAddress , b@var944 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745383 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var945 ) {
602: setFlag (@expr1073745384 fIncompleteVar , b@var945 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745385 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var946 ) {
609: setFlag (@expr1073745386 fIsIncompleteConstant , b@var946 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745387 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var947 ) {
616: setFlag (@expr1073745388 fConstexpr , b@var947 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745389 fExternC ) ;
621: }
622: void isExternC ( bool b@var948 ) {
623: setFlag (@expr1073745390 fExternC , b@var948 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745391 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var949 ) {
630: setFlag (@expr1073745392 fIsSplitVarDeclComma , b@var949 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745393 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var950 ) {
637: setFlag (@expr1073745394 fIsSplitVarDeclEq , b@var950 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745395 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var951 ) {
644: setFlag (@expr1073745396 fIsImplicitInt , b@var951 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745397 fIsInline ) ;
649: }
650: void isInline ( bool b@var952 ) {
651: setFlag (@expr1073745398 fIsInline , b@var952 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745399 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var953 ) {
658: setFlag (@expr1073745400 fIsRemovedVoidParameter , b@var953 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745401 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var954 ) {
665: setFlag (@expr1073745402 fIsTemplate , b@var954 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745403 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var955 ) {
672: setFlag (@expr1073745404 fIsSimplifedScope , b@var955 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1105 .@expr1073745405 mBits@var1139 >@expr1073745406 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1105 .@expr1073745407 mBits@var1139 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1105 .@expr1073745408 mTemplateSimplifierPointers@var1140 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var956 ) {
685: if (@expr1073745409 !@expr1073745410 mImpl@var1105 .@expr3587 mTemplateSimplifierPointers@var1140 ) {
686: mImpl@var1105 .@expr3587 mTemplateSimplifierPointers@var1140 =@expr1073745413 new std ::@expr1073745414 set < TemplateSimplifier ::@expr1073745415 TokenAndName *@expr1073745416 > ; }
687: mImpl@var1105 .@expr3587 mTemplateSimplifierPointers@var1140 .@expr1073745418 insert (@expr1073745419 tokenAndName@var956 ) ;
688: }
689: void setBits ( const unsigned char b@var957 ) {
690: mImpl@var1105 .@expr1073745420 mBits@var1139 =@expr1073745421 b@var957 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3598 (@expr3598 (@expr3598 mTokType@var1103 ==@expr1073745425 eString ) &&@expr1073745426 isPrefixStringCharLiteral (@expr1073745427 mStr@var1099 , '"' , "u8" ) ) ||@expr1073745428
695: (@expr3598 (@expr3598 mTokType@var1103 ==@expr1073745431 eChar ) &&@expr1073745432 isPrefixStringCharLiteral (@expr1073745433 mStr@var1099 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3610 (@expr3610 (@expr3610 mTokType@var1103 ==@expr1073745437 eString ) &&@expr1073745438 isPrefixStringCharLiteral (@expr1073745439 mStr@var1099 , '"' , "u" ) ) ||@expr1073745440
700: (@expr3610 (@expr3610 mTokType@var1103 ==@expr1073745443 eChar ) &&@expr1073745444 isPrefixStringCharLiteral (@expr1073745445 mStr@var1099 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3622 (@expr3622 (@expr3622 mTokType@var1103 ==@expr1073745449 eString ) &&@expr1073745450 isPrefixStringCharLiteral (@expr1073745451 mStr@var1099 , '"' , "U" ) ) ||@expr1073745452
705: (@expr3622 (@expr3622 mTokType@var1103 ==@expr1073745455 eChar ) &&@expr1073745456 isPrefixStringCharLiteral (@expr1073745457 mStr@var1099 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3634 (@expr3634 (@expr3634 mTokType@var1103 ==@expr1073745461 eString ) &&@expr1073745462 isPrefixStringCharLiteral (@expr1073745463 mStr@var1099 , '"' , "" ) ) ||@expr1073745464
710: (@expr3634 (@expr3634 mTokType@var1103 ==@expr1073745467 eChar ) &&@expr1073745468 isPrefixStringCharLiteral (@expr1073745469 mStr@var1099 , '\'' , "" ) &&@expr1073745470 mStr@var1099 .@expr1073745471 length (@expr1073745472 ) ==@expr1073745473 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3650 (@expr3650 (@expr3650 mTokType@var1103 ==@expr1073745477 eChar ) &&@expr1073745478 isPrefixStringCharLiteral (@expr1073745479 mStr@var1099 , '\'' , "" ) ) &&@expr1073745480
715: (@expr3650 mStr@var1099 .@expr1073745482 length (@expr1073745483 ) >@expr1073745484 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745485 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var958 ) {
738: setFlag (@expr1073745486 fIsTemplateArg , value@var958 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var959 , const char ( & pattern@var960 ) [ count ] ) {
743: return findsimplematch (@expr1073745488 startTok@var959 , pattern@var960 , count@expr1073745487 -@expr1073745489 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var961 , const char pattern@var962 [ ] , unsigned long pattern_len@var963 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var964 , const char ( & pattern@var965 ) [ count ] , const Token * const end@var966 ) {
749: return findsimplematch (@expr1073745491 startTok@var964 , pattern@var965 , count@expr1073745490 -@expr1073745492 1 , end@var966 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var967 , const char pattern@var968 [ ] , unsigned long pattern_len@var969 , const Token * const end@var970 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var971 , const char pattern@var972 [ ] , const int varId@var973 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var974 , const char pattern@var975 [ ] , const Token * const end@var976 , const int varId@var977 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var978 , const char ( & pattern@var979 ) [ count ] ) {
758: return findsimplematch (@expr1073745494 startTok@var978 , pattern@var979 , count@expr1073745493 -@expr1073745495 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var980 , const char pattern@var981 [ ] , unsigned long pattern_len@var982 ) {
761: return const_cast < Token *@expr3672 > (@expr1073745497 findsimplematch (@expr1073745498 const_cast < const Token *@expr3672 > (@expr1073745500 startTok@var980 ) , pattern@var981 , pattern_len@var982 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var983 , const char ( & pattern@var984 ) [ count ] , const Token * const end@var985 ) {
765: return findsimplematch (@expr1073745502 startTok@var983 , pattern@var984 , count@expr1073745501 -@expr1073745503 1 , end@var985 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var986 , const char pattern@var987 [ ] , unsigned long pattern_len@var988 , const Token * const end@var989 ) {
768: return const_cast < Token *@expr3680 > (@expr1073745505 findsimplematch (@expr1073745506 const_cast < const Token *@expr3680 > (@expr1073745508 startTok@var986 ) , pattern@var987 , pattern_len@var988 , end@var989 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var990 , const char pattern@var991 [ ] , const int varId@var992 = 0 ) {
772: return const_cast < Token *@expr3685 > (@expr1073745510 findmatch (@expr1073745511 const_cast < const Token *@expr3685 > (@expr1073745513 startTok@var990 ) , pattern@var991 , varId@var992 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var993 , const char pattern@var994 [ ] , const Token * const end@var995 , const int varId@var996 = 0 ) {
775: return const_cast < Token *@expr3690 > (@expr1073745515 findmatch (@expr1073745516 const_cast < const Token *@expr3690 > (@expr1073745518 startTok@var993 ) , pattern@var994 , end@var995 , varId@var996 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var997 , const char * haystack@var998 , int varid@var999 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1105 .@expr1073745519 mFileIndex@var1141 ;
796: }
797: void fileIndex ( int indexOfFile@var1000 ) {
798: mImpl@var1105 .@expr1073745520 mFileIndex@var1141 =@expr1073745521 indexOfFile@var1000 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1105 .@expr1073745522 mLineNumber@var1142 ;
803: }
804: void linenr ( int lineNumber@var1001 ) {
805: mImpl@var1105 .@expr1073745523 mLineNumber@var1142 =@expr1073745524 lineNumber@var1001 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1105 .@expr1073745525 mColumn@var1143 ;
810: }
811: void column ( int c@var1002 ) {
812: mImpl@var1105 .@expr1073745526 mColumn@var1143 =@expr1073745527 c@var1002 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1100 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1003 , const Token * end@var1004 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1005 , const std :: string & originalNameStr@var1006 = emptyString@var1 , bool prepend@var1007 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1008 , const std :: string & originalNameStr@var1009 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745528 tokenStr@var1008 , originalNameStr@var1009 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1101 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1105 .@expr1073745529 mVarId@var1136 ;
851: }
852: void varId ( int id@var1010 ) {
853: mImpl@var1105 .@expr1073745530 mVarId@var1136 =@expr1073745531 id@var1010 ;
854: if (@expr1073745532 id@var1010 !=@expr1073745533 0 ) {
855: tokType (@expr1073745534 eVariable ) ;
856: isStandardType (@expr1073745535 false ) ;
857: } else {
858: update_property_info (@expr1073745536 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745537 mImpl@var1105 .@expr3714 mExprId@var1144 ) {
864: return mImpl@var1105 .@expr3714 mExprId@var1144 ; }
865: return mImpl@var1105 .@expr1073745540 mVarId@var1136 ;
866: }
867: void exprId ( int id@var1011 ) {
868: mImpl@var1105 .@expr1073745541 mExprId@var1144 =@expr1073745542 id@var1011 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1012 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1013 , const std :: vector < std :: string > & fileNames@var1014 ) const ;
888:
|
891:
892: void printLines ( int lines@var1015 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1016 , Token * start@var1017 , Token * end@var1018 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1019 ; varid@var1019 = false ;
905: bool exprid@var1020 ; exprid@var1020 = false ;
906: bool idtype@var1021 ; idtype@var1021 = false ;
907: bool attributes@var1022 ; attributes@var1022 = false ;
908: bool macro@var1023 ; macro@var1023 = false ;
909: bool linenumbers@var1024 ; linenumbers@var1024 = false ;
910: bool linebreaks@var1025 ; linebreaks@var1025 = false ;
911: bool files@var1026 ; files@var1026 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1027 ;
914: options@var1027 .@expr1073745543 attributes@var1028 =@expr1073745544 true ;
915: options@var1027 .@expr1073745545 macro@var1029 =@expr1073745546 true ;
916: options@var1027 .@expr1073745547 linenumbers@var1030 =@expr1073745548 true ;
917: options@var1027 .@expr1073745549 linebreaks@var1031 =@expr1073745550 true ;
918: options@var1027 .@expr1073745551 files@var1032 =@expr1073745552 true ;
919: return options@var1027 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1033 ; options@var1033 =@expr1073745553 forDebug (@expr1073745554 ) ;
923: options@var1033 .@expr1073745555 varid@var1034 =@expr1073745556 true ;
924: return options@var1033 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1035 ; options@var1035 =@expr1073745557 forDebug (@expr1073745558 ) ;
928: options@var1035 .@expr1073745559 exprid@var1036 =@expr1073745560 true ;
929: return options@var1035 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1037 ; options@var1037 =@expr1073745561 forDebug (@expr1073745562 ) ;
933: options@var1037 .@expr1073745563 exprid@var1038 =@expr1073745564 true ;
934: options@var1037 .@expr1073745565 varid@var1039 =@expr1073745566 true ;
935: options@var1037 .@expr1073745567 idtype@var1040 =@expr1073745568 true ;
936: return options@var1037 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1041 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1042 , bool attributes@var1043 , bool macro@var1044 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1045 , const std :: vector < std :: string > * fileNames@var1046 = nullptr , const Token * end@var1047 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1048 , bool attributes@var1049 = true ) const ;
952: std :: string stringifyList ( bool varid@var1050 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1051 , bool attributes@var1052 , bool linenumbers@var1053 , bool linebreaks@var1054 , bool files@var1055 , const std :: vector < std :: string > * fileNames@var1056 = nullptr , const Token * end@var1057 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1058 ) {
983: mLink@var1102 =@expr1073745569 linkToToken@var1058 ;
984: if (@expr1073745570 mStr@var1099 ==@expr1073745571 "<" ||@expr1073745572 mStr@var1099 ==@expr1073745573 ">" ) {
985: update_property_info (@expr1073745574 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1102 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1059 ) {
1006: mImpl@var1105 .@expr1073745575 mScope@var1145 =@expr1073745576 s@var1059 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1105 .@expr1073745577 mScope@var1145 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1060 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1103 ==@expr1073745578 eFunction ||@expr1073745579 mTokType@var1103 ==@expr1073745580 eLambda ?@expr1073745581 mImpl@var1105 .@expr1073745582 mFunction@var1146 :@expr1073745583 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1061 ) {
1034: mImpl@var1105 .@expr1073745584 mVariable@var1147 =@expr1073745585 v@var1061 ;
1035: if (@expr1073745586 v@var1061 ||@expr1073745587 mImpl@var1105 .@expr1073745588 mVarId@var1136 ) {
1036: tokType (@expr1073745589 eVariable ) ; }
1037: else { if (@expr1073745590 mTokType@var1103 ==@expr1073745591 eVariable ) {
1038: tokType (@expr1073745592 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1103 ==@expr1073745593 eVariable ?@expr1073745594 mImpl@var1105 .@expr1073745595 mVariable@var1147 :@expr1073745596 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1062 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1103 ==@expr1073745597 eType ?@expr1073745598 mImpl@var1105 .@expr1073745599 mType@var1148 :@expr1073745600 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1063 , const Token * * typeTok@var1064 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1065 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1066 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1103 ==@expr1073745601 eEnumerator ?@expr1073745602 mImpl@var1105 .@expr1073745603 mEnumerator@var1149 :@expr1073745604 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1067 ) {
1079: mImpl@var1105 .@expr1073745605 mEnumerator@var1149 =@expr1073745606 e@var1067 ;
1080: if (@expr1073745607 e@var1067 ) {
1081: tokType (@expr1073745608 eEnumerator ) ; }
1082: else { if (@expr1073745609 mTokType@var1103 ==@expr1073745610 eEnumerator ) {
1083: tokType (@expr1073745611 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1068 , Token * end@var1069 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1070 , Token * srcEnd@var1071 , Token * newLocation@var1072 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1105 .@expr1073745612 mProgressValue@var1150 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1073 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1105 .@expr3789 mOriginalName@var1151 ?@expr1073745614 *@expr1073745615 mImpl@var1105 .@expr3789 mOriginalName@var1151 :@expr1073745617 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1105 .@expr3794 mValues@var1124 ?@expr1073745619 *@expr1073745620 mImpl@var1105 .@expr3794 mValues@var1124 :@expr1073745622 TokenImpl ::@expr1073745623 mEmptyValueList@var871 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1074 ) {
1164: if (@expr1073745624 !@expr1073745625 mImpl@var1105 .@expr3802 mOriginalName@var1151 ) {
1165: mImpl@var1105 .@expr3802 mOriginalName@var1151 =@expr1073745628 new std ::@expr1073745629 string (@expr1073745630 name@var1074 ) ; }
1166: else {
1167: *@expr1073745631 mImpl@var1105 .@expr3802 mOriginalName@var1151 =@expr1073745633 name@var1074 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1075 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1076 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1077 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1105 .@expr1073745635 mValues@var1124 .@expr1073745636 front (@expr1073745637 ) .@expr1073745638 intvalue@expr1073745634 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1078 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1079 , long long path@var1080 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1081 , const Settings * settings@var1082 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1083 , const Settings * settings@var1084 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1085 , int argnr@var1086 , const Settings * settings@var1087 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1088 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1089 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1090 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1091 ) {
1200: if (@expr1073745639 mImpl@var1105 .@expr3816 mValues@var1124 ) {
1201: mImpl@var1105 .@expr3816 mValues@var1124 .@expr1073745642 remove_if (@expr1073745643 pred@var1091 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1105 .@expr1073745644 mIndex@var1152 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1092 ) {
1213: mNext@var1100 =@expr1073745645 nextToken@var1092 ;
1214: }
1215: void previous ( Token * previousToken@var1093 ) {
1216: mPrevious@var1101 =@expr1073745646 previousToken@var1093 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1094 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1095 , const char * word@var1096 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1097 , char c@var1098 ) ;
1235:
1236: std :: string mStr@var1099 ;
1237:
1238: Token * mNext@var1100 ;
1239: Token * mPrevious@var1101 ;
1240: Token * mLink@var1102 ;
1241:
1242: enum Anonymous1 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1103 ;
1283:
1284: uint64_t mFlags@var1104 ;
1285:
1286: TokenImpl * mImpl@var1105 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1106 ) const {
1294: return (@expr3823 (@expr3823 mFlags@var1104 &@expr1073745649 flag_@var1106 ) !=@expr1073745650 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1107 , bool state_@var1108 ) {
1303: mFlags@var1104 =@expr1073745651 state_@var1108 ?@expr1073745652 mFlags@var1104 |@expr1073745653 flag_@var1107 :@expr1073745654 mFlags@var1104 &@expr1073745655 ~@expr1073745656 flag_@var1107 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1109 , const int indent1@var1110 = 0 , const int indent2@var1111 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1112 ) ;
1321: void astOperand2 ( Token * tok@var1113 ) ;
1322: void astParent ( Token * tok@var1114 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1105 .@expr1073745657 mAstOperand1@var1115 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1105 .@expr1073745658 mAstOperand1@var1115 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1105 .@expr1073745659 mAstOperand2@var1116 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1105 .@expr1073745660 mAstOperand2@var1116 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1105 .@expr1073745661 mAstParent@var1117 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1105 .@expr1073745662 mAstParent@var1117 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745663 !@expr1073745664 astParent (@expr3841 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745666 this@expr3843 ==@expr1073745668 astParent (@expr3841 ) .@expr3846 astOperand1 (@expr3847 ) ) {
1346: return astParent (@expr3841 ) .@expr3849 astOperand2 (@expr3850 ) ; }
1347: else { if (@expr1073745675 this@expr3843 ==@expr1073745676 astParent (@expr3841 ) .@expr3849 astOperand2 (@expr3850 ) ) {
1348: return astParent (@expr3841 ) .@expr3846 astOperand1 (@expr3847 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745683 !@expr1073745684 astParent (@expr3861 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745686 this@expr3863 ==@expr1073745688 astParent (@expr3861 ) .@expr3866 astOperand1 (@expr3867 ) ) {
1356: return astParent (@expr3861 ) .@expr3869 astOperand2 (@expr3870 ) ; }
1357: else { if (@expr1073745695 this@expr3863 ==@expr1073745696 astParent (@expr3861 ) .@expr3869 astOperand2 (@expr3870 ) ) {
1358: return astParent (@expr3861 ) .@expr3866 astOperand1 (@expr3867 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1118 ; ret@var1118 =@expr1073745703 this@expr1073745704 ;
1364: while (@expr1073745705 ret@var1118 .@expr3882 mImpl@var1119 .@expr3883 mAstParent@var1120 ) {
1365: ret@var1118 =@expr1073745708 ret@var1118 .@expr3882 mImpl@var1119 .@expr3883 mAstParent@var1120 ; }
1366: return ret@var1118 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1121 ; ret@var1121 =@expr1073745711 this@expr1073745712 ;
1371: while (@expr1073745713 ret@var1121 .@expr3890 mImpl@var1122 .@expr3891 mAstParent@var1123 ) {
1372: ret@var1121 =@expr1073745716 ret@var1121 .@expr3890 mImpl@var1122 .@expr3891 mAstParent@var1123 ; }
1373: return ret@var1121 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1105 .@expr1073745719 mAstOperand1@var1115 =@expr1073745720 mImpl@var1105 .@expr1073745721 mAstOperand2@var1116 =@expr1073745722 mImpl@var1105 .@expr1073745723 mAstParent@var1117 =@expr1073745724 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1105 .@expr3901 mValues@var1124 ;
1393: mImpl@var1105 .@expr3901 mValues@var1124 =@expr1073745727 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1125 = "" ) const {
1397: std ::@expr1073745728 string ret@var1126 ;
1398: if (@expr1073745729 mImpl@var1105 .@expr3906 mAstOperand1@var1115 ) {
1399: ret@var1126 =@expr1073745731 mImpl@var1105 .@expr3906 mAstOperand1@var1115 .@expr1073745733 astString (@expr1073745734 sep@var1125 ) ; }
1400: if (@expr1073745735 mImpl@var1105 .@expr3912 mAstOperand2@var1116 ) {
1401: ret@var1126 +=@expr1073745737 mImpl@var1105 .@expr3912 mAstOperand2@var1116 .@expr1073745739 astString (@expr1073745740 sep@var1125 ) ; }
1402: return ret@var1126 +@expr1073745741 sep@var1125 +@expr1073745742 mStr@var1099 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1127 , bool xml@var1128 , const std :: vector < std :: string > & fileNames@var1129 , std :: ostream & out@var1130 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1131 , std :: ostream & out@var1132 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1133 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1134 ) const {
1419: mImpl@var1105 .@expr1073745743 mCpp11init@var1135 =@expr1073745744 cpp11init@var1134 ?@expr1073745745 TokenImpl ::@expr3922 Cpp11init ::@expr1073745747 CPP11INIT :@expr1073745748 TokenImpl ::@expr3922 Cpp11init ::@expr1073745750 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1105 .@expr1073745751 mCpp11init@var1135 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1153 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1154 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1155 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1156 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1157 ( nullptr ) , num@var1158 ( 0 ) , known@var1159 ( true ) { }
62:
63: const Token * tok@var1157 ;
64: long long num@var1158 ;
65: bool known@var1159 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1160 ;
72: const Scope * classScope@var1161 ;
73: const Scope * enclosingScope@var1162 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1163 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1165 ( nullptr ) , nameTok@var1166 ( nullptr ) , access@var1167 ( AccessControl :: Public ) , isVirtual@var1168 ( false ) { }
82:
83: std :: string name@var1164 ;
84: const Type * type@var1165 ;
85: const Token * nameTok@var1166 ;
86: AccessControl access@var1167 ;
87: bool isVirtual@var1168 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1169 ) const {
90: return this@expr1073745752 .@expr1073745753 type@var1165 <@expr1073745754 rhs@var1169 .@expr1073745755 type@var1170 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1171 ( nullptr ) , nameEnd@var1172 ( nullptr ) , type@var1173 ( nullptr ) { }
97:
98: const Token * nameStart@var1171 ;
99: const Token * nameEnd@var1172 ;
100: const Type * type@var1173 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1174 ;
104: std :: vector < FriendInfo > friendList@var1175 ;
105:
106: const Token * typeStart@var1176 ;
107: const Token * typeEnd@var1177 ;
108: long long sizeOf@var1178 ;
109:
110: Type ( const Token * classDef_@var1179 = nullptr , const Scope * classScope_@var1180 = nullptr , const Scope * enclosingScope_@var1181 = nullptr ) :
111: classDef@var1160 ( classDef_@var1179 ) ,
112: classScope@var1161 ( classScope_@var1180 ) ,
113: enclosingScope@var1162 ( enclosingScope_@var1181 ) ,
114: needInitialization@var1163 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1176 ( nullptr ) ,
116: typeEnd@var1177 ( nullptr ) ,
117: sizeOf@var1178 ( 0 ) {
118: if (@expr1073745756 classDef_@var1179 &&@expr1073745757 classDef_@var1179 .@expr3934 str (@expr3935 ) ==@expr1073745760 "enum" ) {
119: needInitialization@var1163 =@expr1073745761 NeedInitialization ::@expr1073745762 True ; }
120: else { if (@expr1073745763 classDef_@var1179 &&@expr1073745764 classDef_@var1179 .@expr3934 str (@expr3935 ) ==@expr1073745767 "using" ) {
121: typeStart@var1176 =@expr1073745768 classDef@var1160 .@expr1073745769 tokAt (@expr1073745770 3 ) ;
122: typeEnd@var1177 =@expr1073745771 typeStart@var1176 ;
123: while (@expr1073745772 typeEnd@var1177 .@expr3949 next (@expr3950 ) &&@expr1073745775 typeEnd@var1177 .@expr3949 next (@expr3950 ) .@expr1073745778 str (@expr1073745779 ) !=@expr1073745780 ";" ) {
124: typeEnd@var1177 =@expr1073745781 typeEnd@var1177 .@expr3949 next (@expr3950 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1160 ?@expr1073745784 classDef@var1160 .@expr1073745785 str (@expr1073745786 ) :@expr1073745787 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1160 &&@expr1073745788 classDef@var1160 .@expr1073745789 str (@expr1073745790 ) ==@expr1073745791 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1182 , const Token * tok1@var1183 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1184 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1185 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1186 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1187 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1188 ) : scope@var1189 ( scope_@var1188 ) , name@var1190 ( nullptr ) , value@var1191 ( 0 ) , start@var1192 ( nullptr ) , end@var1193 ( nullptr ) , value_known@var1194 ( false ) { }
167: const Scope * scope@var1189 ;
168: const Token * name@var1190 ;
169: long long value@var1191 ;
170: const Token * start@var1192 ;
171: const Token * end@var1193 ;
172: bool value_known@var1194 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous2 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1195 ) const {
204: return (@expr3968 (@expr3968 mFlags@var1231 &@expr1073745794 flag_@var1195 ) !=@expr1073745795 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1196 , bool state_@var1197 ) {
213: mFlags@var1231 =@expr1073745796 state_@var1197 ?@expr1073745797 mFlags@var1231 |@expr1073745798 flag_@var1196 :@expr1073745799 mFlags@var1231 &@expr1073745800 ~@expr1073745801 flag_@var1196 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1198 , bool * isContainer@var1199 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1200 , const Token * start_@var1201 , const Token * end_@var1202 ,
226: int index_@var1203 , AccessControl access_@var1204 , const Type * type_@var1205 ,
227: const Scope * scope_@var1206 , const Settings * settings@var1207 )
228: : mNameToken@var1226 ( name_@var1200 ) ,
229: mTypeStartToken@var1227 ( start_@var1201 ) ,
230: mTypeEndToken@var1228 ( end_@var1202 ) ,
231: mIndex@var1229 ( index_@var1203 ) ,
232: mAccess@var1230 ( access_@var1204 ) ,
233: mFlags@var1231 ( 0 ) ,
234: mType@var1232 ( type_@var1205 ) ,
235: mScope@var1233 ( scope_@var1206 ) ,
236: mValueType@var1234 ( nullptr ) {
237: evaluate (@expr1073745802 settings@var1207 ) ;
238: }
239:
240: Variable ( const Token * name_@var1208 , const std :: string & clangType@var1209 , const Token * typeStart@var1210 ,
241: const Token * typeEnd@var1211 , int index_@var1212 , AccessControl access_@var1213 ,
242: const Type * type_@var1214 , const Scope * scope_@var1215 ) ;
243:
244: Variable ( const Variable & var@var1216 , const Scope * scope@var1217 ) ;
245:
246: Variable ( const Variable & var@var1218 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1219 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1226 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1227 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1228 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745803 mNameToken@var1226 ) {
300: return mNameToken@var1226 .@expr1073745804 str (@expr1073745805 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745806 mNameToken@var1226 ) {
312: return mNameToken@var1226 .@expr1073745807 varId (@expr1073745808 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1229 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1230 ==@expr1073745809 AccessControl ::@expr1073745810 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1230 ==@expr1073745811 AccessControl ::@expr1073745812 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1230 ==@expr1073745813 AccessControl ::@expr1073745814 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1230 ==@expr1073745815 AccessControl ::@expr1073745816 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1230 ==@expr1073745817 AccessControl ::@expr1073745818 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1230 ==@expr1073745819 AccessControl ::@expr1073745820 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745822 mAccess@var1230 ==@expr1073745823 AccessControl ::@expr1073745824 Local@expr1073745821 ) &&@expr1073745825 !@expr1073745826 isExtern (@expr1073745827 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745828 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745829 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745830 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745831 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745832 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1230 ==@expr1073745833 AccessControl ::@expr1073745834 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745835 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745836 fIsArray ) &&@expr1073745837 !@expr1073745838 getFlag (@expr1073745839 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745840 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745841 ) &&@expr1073745842 getFlag (@expr1073745843 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745844 fIsArray ) ||@expr1073745845 getFlag (@expr1073745846 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745847 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745848 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745849 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745850 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1232 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1232 ?@expr1073745851 mType@var1232 .@expr1073745852 classScope@var1237 :@expr1073745853 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1233 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1235 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1220 ) const {
550: return mDimensions@var1235 [@expr1073745854 index_@var1220 ] .@expr1073745855 num@var2502 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1221 ) const {
558: return mDimensions@var1235 [@expr1073745856 index_@var1221 ] .@expr1073745857 known@var2503 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745858 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745859 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745860 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1222 ) const {
602: return isStlType (@expr1073745861 ) &&@expr1073745862 stlType@var1222 ==@expr1073745863 mTypeStartToken@var1227 .@expr1073745864 strAt (@expr1073745865 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1223 ) const {
616: return isStlType (@expr1073745866 ) &&@expr1073745867 stlTypes@var1223 .@expr1073745868 find (@expr1073745869 mTypeStartToken@var1227 .@expr1073745870 strAt (@expr1073745871 2 ) ) !=@expr1073745872 stlTypes@var1223 .@expr1073745873 end (@expr1073745874 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745875 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr4052 ) &&@expr1073745877 type (@expr4052 ) .@expr1073745879 isEnumType (@expr1073745880 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745881 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1234 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1224 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1230 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1225 ) {
660: mType@var1232 =@expr1073745882 t@var1225 ;
661: }
662:
663:
664: const Token * mNameToken@var1226 ;
665:
666:
667: const Token * mTypeStartToken@var1227 ;
668:
669:
670: const Token * mTypeEndToken@var1228 ;
671:
672:
673: int mIndex@var1229 ;
674:
675:
676: AccessControl mAccess@var1230 ;
677:
678:
679: unsigned int mFlags@var1231 ;
680:
681:
682: const Type * mType@var1232 ;
683:
684:
685: const Scope * mScope@var1233 ;
686:
687: ValueType * mValueType@var1234 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1235 ;
691:
692:
693: void evaluate ( const Settings * settings@var1236 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous3 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1238 ) const {
735: return (@expr4059 (@expr4059 mFlags@var1287 &@expr1073745885 flag@var1238 ) !=@expr1073745886 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1239 , bool state@var1240 ) {
744: mFlags@var1287 =@expr1073745887 state@var1240 ?@expr1073745888 mFlags@var1287 |@expr1073745889 flag@var1239 :@expr1073745890 mFlags@var1287 &@expr1073745891 ~@expr1073745892 flag@var1239 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1241 , const Token * tok@var1242 , const Scope * scope@var1243 , const Token * tokDef@var1244 , const Token * tokArgDef@var1245 ) ;
751: Function ( const Token * tokenDef@var1246 , const std :: string & clangType@var1247 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1257 .@expr1073745893 str (@expr1073745894 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1265 .@expr1073745895 size (@expr1073745896 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1265 .@expr1073745897 size (@expr1073745898 ) -@expr1073745899 initArgCount@var1266 ;
764: }
765: const Variable * getArgumentVar ( int num@var1248 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1266 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1249 , const Scope * scope@var1250 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1251 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1252 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1267 ==@expr1073745900 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1267 ==@expr1073745901 eConstructor ||@expr1073745902
785: type@var1267 ==@expr1073745903 eCopyConstructor ||@expr1073745904
786: type@var1267 ==@expr1073745905 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1267 ==@expr1073745906 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1257 .@expr1073745907 isAttributeConstructor (@expr1073745908 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1257 .@expr1073745909 isAttributeDestructor (@expr1073745910 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1257 .@expr1073745911 isAttributePure (@expr1073745912 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1257 .@expr1073745913 isAttributeConst (@expr1073745914 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1257 .@expr1073745915 isAttributeNoreturn (@expr1073745916 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1257 .@expr1073745917 isAttributeNothrow (@expr1073745918 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1257 .@expr1073745919 isAttributeNodiscard (@expr1073745920 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745921 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745922 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745923 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745924 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745925 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745926 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745927 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745928 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745929 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745930 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745931 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745932 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745933 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745934 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745935 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745936 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745937 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745938 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745939 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745940 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745941 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745942 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1253 ) {
881: setFlag (@expr1073745943 fHasBody , state@var1253 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745944 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745945 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1254 ) {
891: setFlag (@expr1073745946 fIsEscapeFunction , state@var1254 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745947 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1255 ) {
898: setFlag (@expr1073745948 fIsConstexpr , state@var1255 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1256 ) const ;
901:
902: const Token * tokenDef@var1257 ;
903: const Token * argDef@var1258 ;
904: const Token * token@var1259 ;
905: const Token * arg@var1260 ;
906: const Token * retDef@var1261 ;
907: const :: Type * retType@var1262 ;
908: const Scope * functionScope@var1263 ;
909: const Scope * nestedIn@var1264 ;
910: std :: list < Variable > argumentList@var1265 ;
911: int initArgCount@var1266 ;
912: Type type@var1267 ;
913: AccessControl access@var1268 ;
914: const Token * noexceptArg@var1269 ;
915: const Token * throwArg@var1270 ;
916: const Token * templateDef@var1271 ;
917: const Token * functionPointerUsage@var1272 ;
918:
919: bool argsMatch ( const Scope * scope@var1273 , const Token * first@var1274 , const Token * second@var1275 , const std :: string & path@var1276 , int path_length@var1277 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1278 , bool unknown@var1279 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1280 , bool unknown@var1281 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1282 , bool unknown@var1283 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1284 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745949 this@expr1073745950 .@expr1073745951 hasTrailingReturnType (@expr1073745952 ) ) {
931: return Token ::@expr1073745953 findmatch (@expr1073745954 retDef@var1261 , "{|;" ) ;
932: } else {
933: return tokenDef@var1257 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1285 , bool * foundAllBaseClasses@var1286 ) const ;
946:
947: unsigned int mFlags@var1287 ;
948:
949: void isInline ( bool state@var1288 ) {
950: setFlag (@expr1073745955 fIsInline , state@var1288 ) ;
951: }
952: void isConst ( bool state@var1289 ) {
953: setFlag (@expr1073745956 fIsConst , state@var1289 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1290 ) {
956: setFlag (@expr1073745957 fHasVirtualSpecifier , state@var1290 ) ;
957: }
958: void isPure ( bool state@var1291 ) {
959: setFlag (@expr1073745958 fIsPure , state@var1291 ) ;
960: }
961: void isStatic ( bool state@var1292 ) {
962: setFlag (@expr1073745959 fIsStatic , state@var1292 ) ;
963: }
964: void isStaticLocal ( bool state@var1293 ) {
965: setFlag (@expr1073745960 fIsStaticLocal , state@var1293 ) ;
966: }
967: void isExtern ( bool state@var1294 ) {
968: setFlag (@expr1073745961 fIsExtern , state@var1294 ) ;
969: }
970: void isFriend ( bool state@var1295 ) {
971: setFlag (@expr1073745962 fIsFriend , state@var1295 ) ;
972: }
973: void isExplicit ( bool state@var1296 ) {
974: setFlag (@expr1073745963 fIsExplicit , state@var1296 ) ;
975: }
976: void isDefault ( bool state@var1297 ) {
977: setFlag (@expr1073745964 fIsDefault , state@var1297 ) ;
978: }
979: void isDelete ( bool state@var1298 ) {
980: setFlag (@expr1073745965 fIsDelete , state@var1298 ) ;
981: }
982: void isNoExcept ( bool state@var1299 ) {
983: setFlag (@expr1073745966 fIsNoExcept , state@var1299 ) ;
984: }
985: void isThrow ( bool state@var1300 ) {
986: setFlag (@expr1073745967 fIsThrow , state@var1300 ) ;
987: }
988: void isOperator ( bool state@var1301 ) {
989: setFlag (@expr1073745968 fIsOperator , state@var1301 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1302 ) {
992: setFlag (@expr1073745969 fHasLvalRefQual , state@var1302 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1303 ) {
995: setFlag (@expr1073745970 fHasRvalRefQual , state@var1303 ) ;
996: }
997: void isVariadic ( bool state@var1304 ) {
998: setFlag (@expr1073745971 fIsVariadic , state@var1304 ) ;
999: }
1000: void isVolatile ( bool state@var1305 ) {
1001: setFlag (@expr1073745972 fIsVolatile , state@var1305 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1306 ) {
1004: return setFlag (@expr1073745973 fHasTrailingReturnType , state@var1306 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1307 ) {
1007: setFlag (@expr1073745974 fIsInlineKeyword , state@var1307 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1308 , const Scope * scope@var1309 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1310 ;
1019: const Scope * scope@var1311 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1312 , const Token * classDef_@var1313 , const Scope * nestedIn_@var1314 ) ;
1025: Scope ( const SymbolDatabase * check_@var1315 , const Token * classDef_@var1316 , const Scope * nestedIn_@var1317 , ScopeType type_@var1318 , const Token * start_@var1319 ) ;
1026:
1027: const SymbolDatabase * check@var1320 ;
1028: std :: string className@var1321 ;
1029: const Token * classDef@var1322 ;
1030: const Token * bodyStart@var1323 ;
1031: const Token * bodyEnd@var1324 ;
1032: std :: list < Function > functionList@var1325 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1326 ;
1034: std :: list < Variable > varlist@var1327 ;
1035: const Scope * nestedIn@var1328 ;
1036: std :: list < Scope * > nestedList@var1329 ;
1037: int numConstructors@var1330 ;
1038: int numCopyOrMoveConstructors@var1331 ;
1039: std :: list < UsingInfo > usingList@var1332 ;
1040: ScopeType type@var1333 ;
1041: Type * definedType@var1334 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1335 ;
1043: std :: vector < const Token * > bodyStartList@var1336 ;
1044:
1045:
1046: const Scope * functionOf@var1337 ;
1047: Function * function@var1338 ;
1048:
1049:
1050: const Token * enumType@var1339 ;
1051: bool enumClass@var1340 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1341 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1342 ) {
1056: bodyStart@var1323 =@expr1073745975 start@var1342 ;
1057: bodyEnd@var1324 =@expr1073745976 start@var1342 ?@expr1073745977 start@var1342 .@expr1073745978 link (@expr1073745979 ) :@expr1073745980 nullptr ;
1058: if (@expr1073745981 start@var1342 ) {
1059: bodyStartList@var1336 .@expr1073745982 push_back (@expr1073745983 start@var1342 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1321 .@expr1073745984 size (@expr1073745985 ) >@expr1073745986 9 &&@expr1073745987 className@var1321 .@expr1073745988 compare (@expr1073745989 0 , 9 , "Anonymous" ) ==@expr1073745990 0 &&@expr1073745991 std ::@expr1073745992 isdigit (@expr1073745993 className@var1321 [@expr1073745994 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1343 ) const {
1068: for (@expr1073745995 const Enumerator &@expr1073745996 i@var1344 :@expr1073745997 enumeratorList@var1341 ) {
1069: if (@expr1073745998 i@var1344 .@expr1073745999 name@var1345 .@expr1073746000 str (@expr1073746001 ) ==@expr1073746002 name@var1343 ) {
1070: return &@expr1073746003 i@var1344 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1346 ) const {
1076: if (@expr1073746004 !@expr1073746005 outer@var1346 ) {
1077: return false ; }
1078: if (@expr1073746006 outer@var1346 ==@expr1073746007 this@expr1073746008 ) {
1079: return true ; }
1080: const Scope * parent@var1347 ; parent@var1347 =@expr1073746009 nestedIn@var1328 ;
1081: while (@expr1073746010 outer@var1346 !=@expr1073746011 parent@var1347 &&@expr1073746012 parent@var1347 ) {
1082: parent@var1347 =@expr1073746013 parent@var1347 .@expr1073746014 nestedIn@var1348 ; }
1083: if (@expr1073746015 parent@var1347 &&@expr1073746016 parent@var1347 ==@expr1073746017 outer@var1346 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1349 ) {
1089: while (@expr1073746018 scope@var1349 ) {
1090: if (@expr1073746019 scope@var1349 .@expr1073746020 type@var1350 ==@expr1073746021 Scope ::@expr1073746022 eFunction ) {
1091: break ; }
1092: scope@var1349 =@expr1073746023 scope@var1349 .@expr1073746024 nestedIn@var1351 ;
1093: }
1094: if (@expr1073746025 !@expr1073746026 scope@var1349 ) {
1095: return nullptr ; }
1096: return scope@var1349 .@expr1073746027 function@var1352 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073746028 type@var1333 ==@expr1073746029 eClass ||@expr1073746030 type@var1333 ==@expr1073746031 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073746032 type@var1333 ==@expr1073746033 eClass ||@expr1073746034 type@var1333 ==@expr1073746035 eStruct ||@expr1073746036 type@var1333 ==@expr1073746037 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1333 !=@expr1073746038 eClass &&@expr1073746039 type@var1333 !=@expr1073746040 eStruct &&@expr1073746041 type@var1333 !=@expr1073746042 eUnion &&@expr1073746043 type@var1333 !=@expr1073746044 eGlobal &&@expr1073746045 type@var1333 !=@expr1073746046 eNamespace &&@expr1073746047 type@var1333 !=@expr1073746048 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1333 ==@expr1073746049 Scope ::@expr4226 ScopeType ::@expr1073746051 eFor ||@expr1073746052 type@var1333 ==@expr1073746053 Scope ::@expr4226 ScopeType ::@expr1073746055 eWhile ||@expr1073746056 type@var1333 ==@expr1073746057 Scope ::@expr4226 ScopeType ::@expr1073746059 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073746060 type@var1333 ==@expr1073746061 eIf ||@expr1073746062 type@var1333 ==@expr1073746063 eElse ||@expr1073746064
1117: type@var1333 ==@expr1073746065 eFor ||@expr1073746066 type@var1333 ==@expr1073746067 eWhile ||@expr1073746068 type@var1333 ==@expr1073746069 eDo ||@expr1073746070
1118: type@var1333 ==@expr1073746071 eSwitch ||@expr1073746072 type@var1333 ==@expr1073746073 eUnconditional ||@expr1073746074
1119: type@var1333 ==@expr1073746075 eTry ||@expr1073746076 type@var1333 ==@expr1073746077 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1353 , bool requireConst@var1354 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1355 , bool isC@var1356 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1357 ) {
1135: return const_cast < Scope *@expr4254 > (@expr1073746079 const_cast < const Scope *@expr4254 > (@expr1073746081 this@expr1073746082 ) .@expr1073746083 findRecordInNestedList (@expr1073746084 name@var1357 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1358 ) const ;
1139: Type * findType ( const std :: string & name@var1359 ) {
1140: return const_cast < Type *@expr4261 > (@expr1073746086 const_cast < const Scope *@expr4261 > (@expr1073746088 this@expr1073746089 ) .@expr1073746090 findType (@expr1073746091 name@var1359 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1360 ) ;
1148:
1149: void addVariable ( const Token * token_@var1361 , const Token * start_@var1362 ,
1150: const Token * end_@var1363 , AccessControl access_@var1364 , const Type * type_@var1365 ,
1151: const Scope * scope_@var1366 , const Settings * settings@var1367 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1368 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1369 ) {
1159: functionList@var1325 .@expr1073746092 push_back (@expr1073746093 func@var1369 ) ;
1160:
1161: const Function * back@var1370 ; back@var1370 =@expr1073746094 &@expr1073746095 functionList@var1325 .@expr1073746096 back (@expr1073746097 ) ;
1162:
1163: functionMap@var1326 .@expr1073746098 insert (@expr1073746099 make_pair (@expr1073746100 back@var1370 .@expr1073746101 tokenDef@var1371 .@expr1073746102 str (@expr1073746103 ) , back@var1370 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1372 , AccessControl varaccess@var1373 , const Settings * settings@var1374 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1375 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1376 , bool isCpp@var1377 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1378 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1379 , const Token * & vartok@var1380 , const Token * & typetok@var1381 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1382 , int args@var1383 , std :: vector < const Function * > & matches@var1384 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1385 , const Token * start@var1386 , const Token * end@var1387 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1388 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1389 ;
1239: int bits@var1390 ;
1240: int pointer@var1391 ;
1241: int constness@var1392 ;
1242: Reference reference@var1393 ; reference@var1393 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1394 ;
1245: const :: Type * smartPointerType@var1395 ;
1246: const Token * smartPointerTypeToken@var1396 ;
1247: const Library :: SmartPointer * smartPointer@var1397 ;
1248: const Library :: Container * container@var1398 ;
1249:
1250: const Token * containerTypeToken@var1399 ;
1251:
1252: std :: string originalTypeName@var1400 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1388 ( UNKNOWN_SIGN ) ,
1257: type@var1389 ( UNKNOWN_TYPE ) ,
1258: bits@var1390 ( 0 ) ,
1259: pointer@var1391 ( 0U ) ,
1260: constness@var1392 ( 0U ) ,
1261: typeScope@var1394 ( nullptr ) ,
1262: smartPointerType@var1395 ( nullptr ) ,
1263: smartPointerTypeToken@var1396 ( nullptr ) ,
1264: smartPointer@var1397 ( nullptr ) ,
1265: container@var1398 ( nullptr ) ,
1266: containerTypeToken@var1399 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1401 , enum Type t@var1402 , int p@var1403 )
1269: : sign@var1388 ( s@var1401 ) ,
1270: type@var1389 ( t@var1402 ) ,
1271: bits@var1390 ( 0 ) ,
1272: pointer@var1391 ( p@var1403 ) ,
1273: constness@var1392 ( 0U ) ,
1274: typeScope@var1394 ( nullptr ) ,
1275: smartPointerType@var1395 ( nullptr ) ,
1276: smartPointerTypeToken@var1396 ( nullptr ) ,
1277: smartPointer@var1397 ( nullptr ) ,
1278: container@var1398 ( nullptr ) ,
1279: containerTypeToken@var1399 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1404 , enum Type t@var1405 , int p@var1406 , int c@var1407 )
1282: : sign@var1388 ( s@var1404 ) ,
1283: type@var1389 ( t@var1405 ) ,
1284: bits@var1390 ( 0 ) ,
1285: pointer@var1391 ( p@var1406 ) ,
1286: constness@var1392 ( c@var1407 ) ,
1287: typeScope@var1394 ( nullptr ) ,
1288: smartPointerType@var1395 ( nullptr ) ,
1289: smartPointerTypeToken@var1396 ( nullptr ) ,
1290: smartPointer@var1397 ( nullptr ) ,
1291: container@var1398 ( nullptr ) ,
1292: containerTypeToken@var1399 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1408 , enum Type t@var1409 , int p@var1410 , int c@var1411 , const std :: string & otn@var1412 )
1295: : sign@var1388 ( s@var1408 ) ,
1296: type@var1389 ( t@var1409 ) ,
1297: bits@var1390 ( 0 ) ,
1298: pointer@var1391 ( p@var1410 ) ,
1299: constness@var1392 ( c@var1411 ) ,
1300: typeScope@var1394 ( nullptr ) ,
1301: smartPointerType@var1395 ( nullptr ) ,
1302: smartPointerTypeToken@var1396 ( nullptr ) ,
1303: smartPointer@var1397 ( nullptr ) ,
1304: container@var1398 ( nullptr ) ,
1305: containerTypeToken@var1399 ( nullptr ) ,
1306: originalTypeName@var1400 ( otn@var1412 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1413 , const Settings * settings@var1414 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1415 , bool longType@var1416 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1417 , const ValueType * func@var1418 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1419 , const Variable * callVar@var1420 , const Variable * funcVar@var1421 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746104 type@var1389 >=@expr1073746105 ValueType ::@expr1073746106 Type ::@expr1073746107 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746108 type@var1389 >=@expr1073746109 ValueType ::@expr4286 Type ::@expr1073746111 BOOL &&@expr1073746112 type@var1389 <=@expr1073746113 ValueType ::@expr4286 Type ::@expr1073746115 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746116 type@var1389 >=@expr1073746117 ValueType ::@expr4294 Type ::@expr1073746119 FLOAT &&@expr1073746120 type@var1389 <=@expr1073746121 ValueType ::@expr4294 Type ::@expr1073746123 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1422 , const Settings * settings@var1423 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1394 &&@expr1073746124 typeScope@var1394 .@expr1073746125 type@var1424 ==@expr1073746126 Scope ::@expr1073746127 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1425 , bool p@var1426 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1427 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1428 , const Settings * settings@var1429 , ErrorLogger * errorLogger@var1430 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1431 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1432 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1433 ;
1359:
1360:
1361: std :: list < Type > typeList@var1434 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1435 , const Token * typeTok@var1436 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1437 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1438 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1439 , const Scope * startScope@var1440 , bool lookOutside@var1441 = false ) const ;
1382: Type * findType ( const Token * startTok@var1442 , Scope * startScope@var1443 , bool lookOutside@var1444 = false ) const {
1383: return const_cast < Type *@expr4304 > (@expr1073746129 this@expr1073746130 .@expr1073746131 findType (@expr1073746132 startTok@var1442 , const_cast < const Scope *@expr4304 > (@expr1073746134 startScope@var1443 ) , lookOutside@var1444 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1445 , const Scope * startScope@var1446 ) const ;
1387: Scope * findScope ( const Token * tok@var1447 , Scope * startScope@var1448 ) const {
1388: return const_cast < Scope *@expr4311 > (@expr1073746136 this@expr1073746137 .@expr1073746138 findScope (@expr1073746139 tok@var1447 , const_cast < const Scope *@expr4311 > (@expr1073746141 startScope@var1448 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1449 ) const {
1392: return varid@var1449 <@expr1073746142 mVariableList@var1506 .@expr1073746143 size (@expr1073746144 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1450 ) const {
1396: return mVariableList@var1506 .@expr1073746145 at (@expr1073746146 varId@var1450 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1506 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1451 , const std :: string & type@var1452 , const std :: string & msg@var1453 ) const ;
1407:
1408: void printOut ( const char * title@var1454 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1455 , const char * indent@var1456 ) const ;
1410: void printXml ( std :: ostream & out@var1457 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1458 , Token * tokens@var1459 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1460 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1461 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1462 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1463 , const Token * * tok@var1464 , const Token * argStart@var1465 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1466 , const Token * tok@var1467 , const Token * argStart@var1468 , const Token * funcStart@var1469 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1470 , const Token * & tok@var1471 , const Token * argStart@var1472 , const Token * funcStart@var1473 ) ;
1469: void addNewFunction ( Scope * * scope@var1474 , const Token * * tok@var1475 ) ;
1470: bool isFunction ( const Token * tok@var1476 , const Scope * outerScope@var1477 , const Token * * funcStart@var1478 , const Token * * argStart@var1479 , const Token * * declEnd@var1480 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1481 , const Scope * startScope@var1482 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1483 , const Scope * scope@var1484 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1485 , const Scope * ns@var1486 , const std :: string & path@var1487 , int path_length@var1488 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1489 , const Token * typeTok@var1490 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1491 , const Token * vartok@var1492 , Token * membertok@var1493 , const Variable * membervar@var1494 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1495 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1496 ) const ;
1485:
1486: void setValueType ( Token * tok@var1497 , const ValueType & valuetype@var1498 ) ;
1487: void setValueType ( Token * tok@var1499 , const Variable & var@var1500 ) ;
1488: void setValueType ( Token * tok@var1501 , const Enumerator & enumerator@var1502 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1503 ;
1491: const Settings * mSettings@var1504 ;
1492: ErrorLogger * mErrorLogger@var1505 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1506 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1507 ;
1499:
1500: bool mIsCpp@var1508 ;
1501: ValueType :: Sign mDefaultSignedness@var1509 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1510 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1511 , const TFunc & visitor@var1512 )
52: {
53: if (@expr1073746147 !@expr1073746148 ast@var1511 ) {
54: return ; }
55:
56: std ::@expr1073746149 stack < T *@expr4326 , std ::@expr1073746151 vector < T *@expr4326 > > tokens@var1513 ;
57: T * tok@var1514 ; tok@var1514 =@expr1073746153 ast@var1511 ;
58: do {
59: ChildrenToVisit c@var1515 ; c@var1515 =@expr1073746154 visitor@var1512 (@expr1073746155 tok@var1514 ) ;
60:
61: if (@expr1073746156 c@var1515 ==@expr1073746157 ChildrenToVisit ::@expr1073746158 done ) {
62: break ; }
63: if (@expr1073746159 c@var1515 ==@expr1073746160 ChildrenToVisit ::@expr1073746161 op2 ||@expr1073746162 c@var1515 ==@expr4339 ChildrenToVisit ::@expr4340 op1_and_op2 ) {
64: T * t2@var1516 ; t2@var1516 =@expr1073746165 tok@var1514 .@expr1073746166 astOperand2 (@expr1073746167 ) ;
65: if (@expr1073746168 t2@var1516 ) {
66: tokens@var1513 .@expr4345 push (@expr1073746170 t2@var1516 ) ; }
67: }
68: if (@expr1073746171 c@var1515 ==@expr1073746172 ChildrenToVisit ::@expr1073746173 op1 ||@expr1073746174 c@var1515 ==@expr4339 ChildrenToVisit ::@expr4340 op1_and_op2 ) {
69: T * t1@var1517 ; t1@var1517 =@expr1073746177 tok@var1514 .@expr1073746178 astOperand1 (@expr1073746179 ) ;
70: if (@expr1073746180 t1@var1517 ) {
71: tokens@var1513 .@expr4345 push (@expr1073746182 t1@var1517 ) ; }
72: }
73:
74: if (@expr1073746183 tokens@var1513 .@expr1073746184 empty (@expr1073746185 ) ) {
75: break ; }
76:
77: tok@var1514 =@expr1073746186 tokens@var1513 .@expr1073746187 top (@expr1073746188 ) ;
78: tokens@var1513 .@expr1073746189 pop (@expr1073746190 ) ;
79: } while (@expr1073746191 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1518 , const std :: function < bool ( const Token * ) > & pred@var1519 ) ;
83: const Token * findExpression ( const int exprid@var1520 ,
84: const Token * start@var1521 ,
85: const Token * end@var1522 ,
86: const std :: function < bool ( const Token * ) > & pred@var1523 ) ;
87: const Token * findExpression ( const Token * start@var1524 , const int exprid@var1525 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1526 , const char * op@var1527 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1528 , const char * op@var1529 ) ;
91:
92: int astCount ( const Token * tok@var1530 , const char * op@var1531 , int depth@var1532 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1533 , const Token * tok@var1534 ) ;
95:
96: bool astHasVar ( const Token * tok@var1535 , int varid@var1536 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1537 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1538 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1539 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1540 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1541 , bool unknown@var1542 ) ;
107: bool astIsUnsigned ( const Token * tok@var1543 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1544 , bool unknown@var1545 ) ;
110:
111: bool astIsBool ( const Token * tok@var1546 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1547 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1548 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1549 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1550 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1551 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1552 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1553 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1554 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1555 , const std :: string & comp@var1556 , const std :: string & rhs@var1557 , const Token * * vartok@var1558 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1559 ) ;
140:
141: bool isTemporary ( bool cpp@var1560 , const Token * tok@var1561 , const Library * library@var1562 , bool unknown@var1563 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1564 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1565 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1566 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1567 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1568 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1569 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1570 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1571 ) ;
155: const Token * getParentLifetime ( bool cpp@var1572 , const Token * tok@var1573 , const Library * library@var1574 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1575 ) ;
158: bool astIsRHS ( const Token * tok@var1576 ) ;
159:
160: Token * getCondTok ( Token * tok@var1577 ) ;
161: const Token * getCondTok ( const Token * tok@var1578 ) ;
162:
163: Token * getInitTok ( Token * tok@var1579 ) ;
164: const Token * getInitTok ( const Token * tok@var1580 ) ;
165:
166: Token * getStepTok ( Token * tok@var1581 ) ;
167: const Token * getStepTok ( const Token * tok@var1582 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1583 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1584 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1585 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1586 ,
180: int * const varid@var1587 ,
181: bool * const knownInitValue@var1588 ,
182: long long * const initValue@var1589 ,
183: bool * const partialCond@var1590 ,
184: long long * const stepValue@var1591 ,
185: long long * const lastValue@var1592 ) ;
186:
187: bool precedes ( const Token * tok1@var1593 , const Token * tok2@var1594 ) ;
188: bool succeeds ( const Token * tok1@var1595 , const Token * tok2@var1596 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1597 , bool onVar@var1598 = true , int depth@var1599 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1600 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1601 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1602 ,
198: bool temporary@var1603 = true ,
199: bool inconclusive@var1604 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1605 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1606 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1607 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1608 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1609 , bool macro@var1610 , const Token * tok1@var1611 , const Token * tok2@var1612 , const Library & library@var1613 , bool pure@var1614 , bool followVar@var1615 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1616 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1617 , const Token * const tok2@var1618 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1619 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1620 , bool cpp@var1621 , const Token * const cond1@var1622 , const Token * const cond2@var1623 , const Library & library@var1624 , bool pure@var1625 , bool followVar@var1626 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1627 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1628 , const Token * const tok1@var1629 , const Token * const tok2@var1630 , const Library & library@var1631 , bool pure@var1632 , bool followVar@var1633 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1634 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1635 , const Library & library@var1636 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1637 , const Library & library@var1638 , bool pure@var1639 , bool cpp@var1640 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1641 , const Token * tok@var1642 , bool checkArrayAccess@var1643 = false , bool checkReference@var1644 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1645 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1646 , const Library * library@var1647 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1648 ,
238: const Library * library@var1649 = nullptr ,
239: const Token * * unknownFunc@var1650 = nullptr ,
240: bool functionScope@var1651 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1652 ,
244: const Variable * var@var1653 ,
245: Scope :: ScopeType type@var1654 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1655 , int & argn@var1656 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1657 , int & argn@var1658 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1659 , int argnr@var1660 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1661 , int indirect@var1662 , int varid@var1663 , const Settings * settings@var1664 , bool * inconclusive@var1665 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1666 , int indirect@var1667 , const Settings * settings@var1668 , bool * inconclusive@var1669 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1670 , const Token * end@var1671 , const int exprid@var1672 , bool globalvar@var1673 , const Settings * settings@var1674 , bool cpp@var1675 , int depth@var1676 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1677 , const Token * end@var1678 , int indirect@var1679 , const int exprid@var1680 , bool globalvar@var1681 , const Settings * settings@var1682 , bool cpp@var1683 , int depth@var1684 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1685 , int indirect@var1686 , const Settings * settings@var1687 , bool cpp@var1688 , int depth@var1689 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1690 , const Settings * settings@var1691 , bool cpp@var1692 , int depth@var1693 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1694 ,
283: const Token * end@var1695 ,
284: int indirect@var1696 ,
285: std :: vector < const Variable * > vars@var1697 ,
286: const Settings * settings@var1698 ,
287: bool cpp@var1699 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1700 , int indirect@var1701 , const Settings * settings@var1702 , bool cpp@var1703 ) ;
290: bool isThisChanged ( const Token * start@var1704 , const Token * end@var1705 , int indirect@var1706 , const Settings * settings@var1707 , bool cpp@var1708 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var1709 , const Token * end@var1710 , int indirect@var1711 , const int exprid@var1712 , bool globalvar@var1713 , const Settings * settings@var1714 , bool cpp@var1715 , int depth@var1716 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var1717 , const Token * end@var1718 , int indirect@var1719 , const int exprid@var1720 , bool globalvar@var1721 , const Settings * settings@var1722 , bool cpp@var1723 , int depth@var1724 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var1725 ,
296: const Token * start@var1726 ,
297: const Token * end@var1727 ,
298: const Settings * settings@var1728 ,
299: bool cpp@var1729 ,
300: int depth@var1730 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var1731 ,
303: const Token * tok@var1732 ,
304: int indirect@var1733 ,
305: bool globalvar@var1734 ,
306: const Settings * settings@var1735 ,
307: bool cpp@var1736 ,
308: int depth@var1737 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var1738 , int varid@var1739 , bool * inconclusive@var1740 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var1741 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var1742 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var1743 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var1744 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var1745 ) ;
330:
331: int getArgumentPos ( const Variable * var@var1746 , const Function * f@var1747 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var1748 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var1749 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var1750 ) ;
346: Token * findLambdaEndToken ( Token * first@var1751 ) ;
347:
348: bool isLikelyStream ( bool cpp@var1752 , const Token * stream@var1753 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var1754 , const Token * op@var1755 ) ;
356:
357: bool isCPPCast ( const Token * tok@var1756 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var1757 , const char * skipMatch@var1758 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var1759 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var1760 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var1761 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var1762 , const Library & library@var1763 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var1764 ) ;
371:
372: bool isNullOperand ( const Token * expr@var1765 ) ;
373:
374: bool isGlobalData ( const Token * expr@var1766 , bool cpp@var1767 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var1768 , const Library & library@var1769 ) : mCpp@var1802 ( cpp@var1768 ) , mLibrary@var1803 ( library@var1769 ) , mWhat@var1804 ( What :: Reassign ) , mValueFlowKnown@var1806 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var1770 , const Token * lhs@var1771 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var1772 , const Token * startToken@var1773 , const Token * endToken@var1774 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var1775 , const Token * startToken@var1776 , const Token * endToken@var1777 ) ;
404:
405: struct KnownAndToken {
406: bool known@var1778 ;
407: const Token * token@var1779 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var1780 , const Token * startToken@var1781 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var1782 , bool * localOut@var1783 = nullptr , bool * unknownVarIdOut@var1784 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var1785 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var1786 ;
420: explicit Result ( Type type@var1787 ) : type@var1786 ( type@var1787 ) , token@var1790 ( nullptr ) { }
421: Result ( Type type@var1788 , const Token * token@var1789 ) : type@var1786 ( type@var1788 ) , token@var1790 ( token@var1789 ) { }
422: const Token * token@var1790 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var1791 , const Token * startToken@var1792 , const Token * endToken@var1793 ) ;
426: struct Result checkRecursive ( const Token * expr@var1794 , const Token * startToken@var1795 , const Token * endToken@var1796 , const std :: set < int > & exprVarIds@var1797 , bool local@var1798 , bool inInnerClass@var1799 , int depth@var1800 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var1801 ) const ;
430:
431: const bool mCpp@var1802 ;
432: const Library & mLibrary@var1803 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var1804 ;
434: std :: vector < KnownAndToken > mValueFlow@var1805 ;
435: bool mValueFlowKnown@var1806 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var1807 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var1808 ) {
44: if (@expr1073746192 bit@var1808 >=@expr1073746193 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073746194 (@expr1073746195 1LL <<@expr1073746196 (@expr1073746197 bit@var1808 -@expr1073746198 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var1809 ) {
50: if (@expr1073746199 bit@var1809 >=@expr1073746200 64 ) {
51: return (@expr4377 ~@expr1073746202 0ULL ) >>@expr1073746203 1 ; }
52: return (@expr4377 1LL <<@expr1073746205 (@expr4377 bit@var1809 -@expr1073746207 1 ) ) -@expr1073746208 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var1810 ) const {
59: return value@var1810 >=@expr1073746209 min_value (@expr1073746210 int_bit@var1820 ) &&@expr1073746211 value@var1810 <=@expr1073746212 max_value (@expr1073746213 int_bit@var1820 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var1811 ) const {
63: unsigned long long intMax@var1812 ; intMax@var1812 =@expr1073746214 max_value (@expr1073746215 int_bit@var1820 ) ;
64: return value@var1811 <=@expr1073746216 intMax@var1812 ;
65: }
66:
67: bool isLongValue ( long long value@var1813 ) const {
68: return value@var1813 >=@expr1073746217 min_value (@expr1073746218 long_bit@var1821 ) &&@expr1073746219 value@var1813 <=@expr1073746220 max_value (@expr1073746221 long_bit@var1821 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var1814 ) const {
72: unsigned long long longMax@var1815 ; longMax@var1815 =@expr1073746222 max_value (@expr1073746223 long_bit@var1821 ) ;
73: return value@var1814 <=@expr1073746224 longMax@var1815 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var1816 ) const {
77: unsigned long long longLongMax@var1817 ; longLongMax@var1817 =@expr1073746225 max_value (@expr1073746226 long_long_bit@var1822 ) ;
78: return value@var1816 <=@expr1073746227 longLongMax@var1817 ;
79: }
80:
81: int char_bit@var1818 ;
82: int short_bit@var1819 ;
83: int int_bit@var1820 ;
84: int long_bit@var1821 ;
85: int long_long_bit@var1822 ;
86:
87:
88: int sizeof_bool@var1823 ;
89: int sizeof_short@var1824 ;
90: int sizeof_int@var1825 ;
91: int sizeof_long@var1826 ;
92: int sizeof_long_long@var1827 ;
93: int sizeof_float@var1828 ;
94: int sizeof_double@var1829 ;
95: int sizeof_long_double@var1830 ;
96: int sizeof_wchar_t@var1831 ;
97: int sizeof_size_t@var1832 ;
98: int sizeof_pointer@var1833 ;
99:
100: char defaultSign@var1834 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var1835 ;
115:
116:
117: bool platform ( PlatformType type@var1836 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var1837 [ ] , const std :: string & filename@var1838 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var1839 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var1835 ==@expr1073746228 Win32A ||@expr1073746229
136: platformType@var1835 ==@expr1073746230 Win32W ||@expr1073746231
137: platformType@var1835 ==@expr1073746232 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073746233 platformType@var1835 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var1840 ) {
145: switch (@expr1073746234 pt@var1840 ) {
146: case Unspecified :@expr4411 ;
147: return "Unspecified" ;
148: case Native :@expr4411 ;
149: return "Native" ;
150: case Win32A :@expr4411 ;
151: return "win32A" ;
152: case Win32W :@expr4411 ;
153: return "win32W" ;
154: case Win64 :@expr4411 ;
155: return "win64" ;
156: case Unix32 :@expr4411 ;
157: return "unix32" ;
158: case Unix64 :@expr4411 ;
159: return "unix64" ;
160: case PlatformFile :@expr4411 ;
161: return "platformFile" ;
162: default :@expr4411 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073746244 char_bit@var1818 +@expr1073746245 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073746246 char_bit@var1818 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073746247 char_bit@var1818 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var1841 , const std :: string & rhs@var1842 ) const {
41: return caseInsensitiveStringCompare (@expr1073746248 lhs@var1841 , rhs@var1842 ) <@expr1073746249 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var1850 ( cppcheck :: Platform :: Unspecified ) , msc@var1851 ( false ) , useMfc@var1852 ( false ) { }
67: std :: string cfg@var1843 ;
68: std :: string filename@var1844 ;
69: std :: string defines@var1845 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var1845 +@expr1073746250 (@expr1073746251 msc@var1851 ?@expr1073746252 ";_MSC_VER=1900" :@expr1073746253 "" ) +@expr1073746254 (@expr1073746255 useMfc@var1852 ?@expr1073746256 ";__AFXWIN_H__=1" :@expr1073746257 "" ) ;
72: }
73: std :: set < std :: string > undefs@var1846 ;
74: std :: list < std :: string > includePaths@var1847 ;
75: std :: list < std :: string > systemIncludePaths@var1848 ;
76: std :: string standard@var1849 ;
77: cppcheck :: Platform :: PlatformType platformType@var1850 ;
78: bool msc@var1851 ;
79: bool useMfc@var1852 ;
80:
81: void parseCommand ( std :: string command@var1853 ) ;
82: void setDefines ( std :: string defs@var1854 ) ;
83: void setIncludePaths ( const std :: string & basepath@var1855 , const std :: list < std :: string > & in@var1856 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1857 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var1858 ;
86: Type projectType@var1859 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var1860 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous4 {
96: std :: string analyzeAllVsConfigs@var1861 ;
97: std :: vector < std :: string > pathNames@var1862 ;
98: std :: list < std :: string > libraries@var1863 ;
99: std :: list < std :: string > excludedPaths@var1864 ;
100: std :: list < std :: string > checkVsConfigs@var1865 ;
101: std :: string projectFile@var1866 ;
102: std :: string platform@var1867 ;
103: } ; struct Anonymous4 guiProject@var1868 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var1869 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var1870 ) ;
107:
108: Type import ( const std :: string & filename@var1871 , Settings * settings@var1872 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var1873 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var1874 , Settings * settings@var1875 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var1876 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var1877 , const std :: string & path@var1878 , const std :: vector < std :: string > & fileFilters@var1879 ) ;
115: bool importVcxproj ( const std :: string & filename@var1880 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1881 , const std :: string & additionalIncludeDirectories@var1882 , const std :: vector < std :: string > & fileFilters@var1883 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var1884 ) ;
117:
118: static void printError ( const std :: string & message@var1885 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var1886 ) ;
121:
122: std :: string mPath@var1887 ;
123: std :: set < std :: string > mAllVSConfigs@var1888 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var1889 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var1890 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var1891 [ 2 ] = "1" ;
131: const char BuildDirElementName@var1892 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var1893 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var1894 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var1895 [ 7 ] = "parser" ;
135: const char BugHunting@var1896 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var1897 [ 11 ] = "includedir" ;
137: const char DirElementName@var1898 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var1899 [ 5 ] = "name" ;
139: const char DefinesElementName@var1900 [ 8 ] = "defines" ;
140: const char DefineName@var1901 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var1902 [ 5 ] = "name" ;
142: const char UndefinesElementName@var1903 [ 10 ] = "undefines" ;
143: const char UndefineName@var1904 [ 9 ] = "undefine" ;
144: const char PathsElementName@var1905 [ 6 ] = "paths" ;
145: const char PathName@var1906 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var1907 [ 5 ] = "name" ;
147: const char RootPathName@var1908 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var1909 [ 5 ] = "name" ;
149: const char IgnoreElementName@var1910 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var1911 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var1912 [ 5 ] = "name" ;
152: const char ExcludeElementName@var1913 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var1914 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var1915 [ 5 ] = "name" ;
155: const char FunctionContracts@var1916 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var1917 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var1918 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var1919 [ 8 ] = "library" ;
159: const char PlatformElementName@var1920 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var1921 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var1922 [ 12 ] = "suppression" ;
162: const char AddonElementName@var1923 [ 6 ] = "addon" ;
163: const char AddonsElementName@var1924 [ 7 ] = "addons" ;
164: const char ToolElementName@var1925 [ 5 ] = "tool" ;
165: const char ToolsElementName@var1926 [ 6 ] = "tools" ;
166: const char TagsElementName@var1927 [ 5 ] = "tags" ;
167: const char TagElementName@var1928 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var1929 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var1930 [ 4 ] = "tag" ;
170: const char WarningElementName@var1931 [ 8 ] = "warning" ;
171: const char HashAttributeName@var1932 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var1933 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var1934 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var1935 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var1936 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var1937 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var1938 [ 11 ] = "clang-tidy" ;
178: const char Name@var1939 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var1940 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var1941 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var1942 ;
43: std :: string errorId@var1943 ;
44: void setFileName ( const std :: string & s@var1944 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var1948 ;
47: }
48: int lineNumber@var1945 ;
49: Certainty :: CertaintyLevel certainty@var1946 ;
50: std :: string symbolNames@var1947 ;
51: private:
52: std :: string mFileName@var1948 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var1982 ( NO_LINE ) , hash@var1984 ( 0 ) , thisAndNextLine@var1985 ( false ) , matched@var1986 ( false ) , checked@var1987 ( false ) { }
57: Suppression ( const Suppression & other@var1949 ) {
58: *@expr1073746258 this@expr1073746259 =@expr1073746260 other@var1949 ;
59: }
60: Suppression ( const std :: string & id@var1950 , const std :: string & file@var1951 , int line@var1952 = NO_LINE ) : errorId@var1980 ( id@var1950 ) , fileName@var1981 ( file@var1951 ) , lineNumber@var1982 ( line@var1952 ) , hash@var1984 ( 0 ) , thisAndNextLine@var1985 ( false ) , matched@var1986 ( false ) , checked@var1987 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var1953 ) {
63: errorId@var1980 =@expr1073746261 other@var1953 .@expr1073746262 errorId@var1954 ;
64: fileName@var1981 =@expr1073746263 other@var1953 .@expr1073746264 fileName@var1955 ;
65: lineNumber@var1982 =@expr1073746265 other@var1953 .@expr1073746266 lineNumber@var1956 ;
66: symbolName@var1983 =@expr1073746267 other@var1953 .@expr1073746268 symbolName@var1957 ;
67: hash@var1984 =@expr1073746269 other@var1953 .@expr1073746270 hash@var1958 ;
68: thisAndNextLine@var1985 =@expr1073746271 other@var1953 .@expr1073746272 thisAndNextLine@var1959 ;
69: matched@var1986 =@expr1073746273 other@var1953 .@expr1073746274 matched@var1960 ;
70: checked@var1987 =@expr1073746275 other@var1953 .@expr1073746276 checked@var1961 ;
71: return *@expr1073746277 this@expr1073746278 ;
72: }
73:
74: bool operator< ( const Suppression & other@var1962 ) const {
75: if (@expr1073746279 errorId@var1980 !=@expr1073746280 other@var1962 .@expr4457 errorId@var1963 ) {
76: return errorId@var1980 <@expr1073746282 other@var1962 .@expr4457 errorId@var1963 ; }
77: if (@expr1073746284 lineNumber@var1982 <@expr1073746285 other@var1962 .@expr1073746286 lineNumber@var1964 ) {
78: return true ; }
79: if (@expr1073746287 fileName@var1981 !=@expr1073746288 other@var1962 .@expr4465 fileName@var1965 ) {
80: return fileName@var1981 <@expr1073746290 other@var1962 .@expr4465 fileName@var1965 ; }
81: if (@expr1073746292 symbolName@var1983 !=@expr1073746293 other@var1962 .@expr4470 symbolName@var1966 ) {
82: return symbolName@var1983 <@expr1073746295 other@var1962 .@expr4470 symbolName@var1966 ; }
83: if (@expr1073746297 hash@var1984 !=@expr1073746298 other@var1962 .@expr4475 hash@var1967 ) {
84: return hash@var1984 <@expr1073746300 other@var1962 .@expr4475 hash@var1967 ; }
85: if (@expr1073746302 thisAndNextLine@var1985 !=@expr1073746303 other@var1962 .@expr1073746304 thisAndNextLine@var1968 ) {
86: return thisAndNextLine@var1985 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var1969 , std :: string * errorMessage@var1970 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var1971 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var1972 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073746306 fileName@var1981 .@expr1073746307 empty (@expr1073746308 ) &&@expr1073746309 fileName@var1981 .@expr1073746310 find_first_of (@expr1073746311 "?*" ) ==@expr1073746312 std ::@expr1073746313 string ::@expr1073746314 npos@expr1073746305 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var1973 ) const {
109: return errorId@var1980 ==@expr1073746315 other@var1973 .@expr1073746316 errorId@var1974 &&@expr1073746317
110: fileName@var1981 ==@expr1073746318 other@var1973 .@expr1073746319 fileName@var1975 &&@expr1073746320
111: lineNumber@var1982 ==@expr1073746321 other@var1973 .@expr1073746322 lineNumber@var1976 &&@expr1073746323
112: symbolName@var1983 ==@expr1073746324 other@var1973 .@expr1073746325 symbolName@var1977 &&@expr1073746326
113: hash@var1984 ==@expr1073746327 other@var1973 .@expr1073746328 hash@var1978 &&@expr1073746329
114: thisAndNextLine@var1985 ==@expr1073746330 other@var1973 .@expr1073746331 thisAndNextLine@var1979 ;
115: }
116:
117: std :: string errorId@var1980 ;
118: std :: string fileName@var1981 ;
119: int lineNumber@var1982 ;
120: std :: string symbolName@var1983 ;
121: unsigned long hash@var1984 ;
122: bool thisAndNextLine@var1985 ;
123: bool matched@var1986 ;
124: bool checked@var1987 ;
125:
126: enum Anonymous5 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var1988 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var1989 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var1990 , std :: string * errorMessage@var1991 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var1992 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var1993 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var1994 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var1995 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var1996 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var1997 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var1998 , const bool unusedFunctionChecking@var1999 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var2000 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var2001 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var2002 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var2003 , std :: clock_t clocks@var2004 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var2005 ;
45: long mNumberOfResults@var2006 ;
46:
47: TimerResultsData ( )
48: : mClocks@var2005 ( 0 )
49: , mNumberOfResults@var2006 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var2007 =@expr1073746333 (@expr1073746334 double ) (@expr1073746335 (@expr1073746336 unsigned long ) mClocks@var2005 ) /@expr1073746337 (@expr1073746338 double ) CLOCKS_PER_SEC@expr1073746332 ;
53: return ret@var2007 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var2008 ) const ;
62: void addResults ( const std :: string & str@var2009 , std :: clock_t clocks@var2010 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var2011 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var2012 , SHOWTIME_MODES showtimeMode@var2013 , TimerResultsIntf * timerResults@var2014 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var2015 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var2016 ;
79: TimerResultsIntf * mTimerResults@var2017 ;
80: std :: clock_t mStart@var2018 ;
81: const SHOWTIME_MODES mShowTimeMode@var2019 ;
82: bool mStopped@var2020 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var2021 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var2022 ;
103:
104:
105: std :: string addonPython@var2023 ;
106:
107:
108: std :: vector < std :: string > basePaths@var2024 ;
109:
110:
111: std :: string buildDir@var2025 ;
112:
113:
114: bool checkAllConfigurations@var2026 ;
115:
116:
117: bool checkConfiguration@var2027 ;
118:
|
121:
122: bool checkHeaders@var2028 ;
123:
124:
125: bool checkLibrary@var2029 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var2030 ;
129:
130:
131: bool checkUnusedTemplates@var2031 ;
132:
133:
134: bool clang@var2032 ;
135:
136:
137: std :: string clangExecutable@var2033 ;
138:
139:
140: bool clangTidy@var2034 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var2035 ;
144:
145:
146: std :: string cppcheckCfgProductName@var2036 ;
147:
148:
149: std :: string cppcheckCfgAbout@var2037 ;
150:
151:
152: bool daca@var2038 ;
153:
154:
155: bool debugnormal@var2039 ;
156:
157:
158: bool debugSimplified@var2040 ;
159:
160:
161: bool debugtemplate@var2041 ;
162:
163:
164: bool debugwarnings@var2042 ;
165:
166:
167: bool dump@var2043 ;
168: std :: string dumpFile@var2044 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var2045 ;
176:
177:
178: bool exceptionHandling@var2046 ;
179:
180:
181: std :: string exename@var2047 ;
182:
183:
184:
185: int exitCode@var2048 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var2049 ;
189:
190:
191: bool force@var2050 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var2051 ;
196:
197:
198: bool inlineSuppressions@var2052 ;
199:
200:
201:
202: unsigned int jobs@var2053 ;
203:
|
206:
207: bool jointSuppressionReport@var2054 ;
208:
209:
210: std :: list < std :: string > libraries@var2055 ;
211:
212:
213: Library library@var2056 ;
214:
215:
216:
217: int loadAverage@var2057 ;
218:
|
221:
222: int maxConfigs@var2058 ;
223:
224:
225: int maxCtuDepth@var2059 ;
226:
227:
228: int maxTemplateRecursion@var2060 ;
229:
230:
231: Suppressions nofail@var2061 ;
232:
233:
234: Suppressions nomsg@var2062 ;
235:
236:
237: std :: string outputFile@var2063 ;
238:
239:
240: std :: string plistOutput@var2064 ;
241:
242:
243: bool preprocessOnly@var2065 ;
244:
245: ImportProject project@var2066 ;
246:
247:
248: bool quiet@var2067 ;
249:
250:
251: bool relativePaths@var2068 ;
252:
253:
254: bool reportProgress@var2069 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var2070 ( "simple" )
261: , id@var2072 ( "rule" )
262: , severity@var2074 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var2070 ;
266: std :: string pattern@var2071 ;
267: std :: string id@var2072 ;
268: std :: string summary@var2073 ;
269: Severity :: SeverityType severity@var2074 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var2075 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var2081 ( false ) , externalFunctions@var2082 ( false ) , internalFunctions@var2083 ( false ) , externalVariables@var2084 ( false ) { }
281:
282: static const char XmlRootName@var2076 [ ] ;
283: static const char XmlClasses@var2077 [ ] ;
284: static const char XmlExternalFunctions@var2078 [ ] ;
285: static const char XmlInternalFunctions@var2079 [ ] ;
286: static const char XmlExternalVariables@var2080 [ ] ;
287:
288: void clear ( ) {
289: classes@var2081 =@expr1073746339 externalFunctions@var2082 =@expr1073746340 internalFunctions@var2083 =@expr1073746341 externalVariables@var2084 =@expr1073746342 false ;
290: }
291:
|
297:
298: bool classes@var2081 ;
299:
|
304:
305: bool externalFunctions@var2082 ;
306:
|
310:
311: bool internalFunctions@var2083 ;
312:
|
316:
317: bool externalVariables@var2084 ;
318: } ;
319:
320: SafeChecks safeChecks@var2085 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var2086 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var2087 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var2088 ;
325:
326:
327: SHOWTIME_MODES showtime@var2089 ;
328:
329:
330: Standards standards@var2090 ;
331:
332:
333:
334: std :: string templateFormat@var2091 ;
335:
336:
337:
338: std :: string templateLocation@var2092 ;
339:
340:
341: std :: string userDefines@var2093 ;
342:
343:
344: std :: set < std :: string > userUndefs@var2094 ;
345:
346:
347: std :: list < std :: string > userIncludes@var2095 ;
348:
349:
350: bool verbose@var2096 ;
351:
352:
353: bool xml@var2097 ;
354:
355:
356: int xml_version@var2098 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var2099 ) const {
363: for (@expr1073746343 const std ::@expr1073746344 string &@expr1073746345 configExcludePath@var2100 :@expr1073746346 configExcludePaths@var2035 ) {
364: if (@expr1073746347 file@var2099 .@expr1073746348 length (@expr1073746349 ) >=@expr1073746350 configExcludePath@var2100 .@expr4527 length (@expr4528 ) &&@expr1073746353 file@var2099 .@expr1073746354 compare (@expr1073746355 0 , configExcludePath@var2100 .@expr4527 length (@expr4528 ) , configExcludePath@var2100 ) ==@expr1073746358 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var2101 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var2102 , bool inconclusiveCheck@var2103 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073746359 find (@expr1073746360 libraries@var2055 .@expr1073746361 begin (@expr1073746362 ) , libraries@var2055 .@expr4539 end (@expr4540 ) , "posix" ) !=@expr1073746365 libraries@var2055 .@expr4539 end (@expr4540 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var2104 = true ) {
392: Settings ::@expr1073746368 mTerminated@var2021 =@expr1073746369 t@var2104 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073746370 mTerminated@var2021 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var2105 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var2106 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var2107 ) {
47: mSettings@var2142 =@expr1073746371 settings@var2107 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var2142 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var2144 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var2145 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var2108 ) ;
72:
73: void addtoken ( const std :: string & str@var2109 , const int lineno@var2110 , const int column@var2111 , const int fileno@var2112 , bool split@var2113 = false ) ;
74: void addtoken ( const std :: string & str@var2114 , const Token * locationTok@var2115 ) ;
75:
76: void addtoken ( const Token * tok@var2116 , const int lineno@var2117 , const int column@var2118 , const int fileno@var2119 ) ;
77: void addtoken ( const Token * tok@var2120 , const Token * locationTok@var2121 ) ;
78: void addtoken ( const Token * tok@var2122 ) ;
79:
80: static void insertTokens ( Token * dest@var2123 , const Token * src@var2124 , int n@var2125 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var2126 , const Token * first@var2127 , const Token * last@var2128 , bool one_line@var2129 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var2130 , const std :: string & file0@var2131 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var2132 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var2133 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var2139 .@expr1073746372 front@var2146 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var2139 .@expr1073746373 front@var2146 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var2139 .@expr1073746374 back@var2147 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var2139 .@expr1073746375 back@var2147 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var2140 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var2134 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var2135 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var2136 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var2137 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var2138 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var2139 ;
206:
207:
208: std :: vector < std :: string > mFiles@var2140 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var2141 ;
212:
213:
214: const Settings * mSettings@var2142 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var2143 ;
217:
218:
219: bool mIsC@var2144 ;
220: bool mIsCpp@var2145 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var2148 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var2149 ;
67: mutable int mVarId@var2150 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var2151 ) ;
73: bool hasVariable ( const std :: string & varname@var2152 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var2153 ) const {
75: return mVariableId@var2148 .@expr1073746376 find (@expr1073746377 varname@var2153 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var2148 .@expr1073746378 end (@expr1073746379 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var2148 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073746380 mVarId@var2150 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var2154 , ErrorLogger * errorLogger@var2155 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var2156 ) {
95: mTimerResults@var2276 =@expr1073746381 tr@var2156 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var2254 .@expr1073746382 isC (@expr1073746383 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var2254 .@expr1073746384 isCPP (@expr1073746385 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var2157 , bool * unknown@var2158 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var2159 , const std :: string & FileName@var2160 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var2161 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var2162 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var2163 ,
142: const char FileName@var2164 [ ] ,
143: const std :: string & configuration@var2165 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var2166 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var2167 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var2168 , const Token * end@var2169 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var2170 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var2171 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var2172 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var2173 , const Token * const tokEnd@var2174 , const bool only_k_r_fpar@var2175 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var2176 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var2177 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var2178 , bool commandWithCondition@var2179 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var2180 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var2181 , Token * * _tok2@var2182 , Token * * _tok3@var2183 , std :: string & value@var2184 , int & valueVarId@var2185 , bool & valueIsPointer@var2186 , bool floatvar@var2187 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var2188 , Token * tok3@var2189 , int varid@var2190 , const std :: string & structname@var2191 , std :: string & value@var2192 , int valueVarId@var2193 , bool valueIsPointer@var2194 , const Token * const valueToken@var2195 , int indentlevel@var2196 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var2197 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var2198 , const std :: string & endsWith@var2199 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var2200 , const std :: string & endsWith@var2201 , bool cpp@var2202 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var2203 ) {
585: mPreprocessor@var2277 =@expr1073746386 preprocessor@var2203 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var2277 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var2204 , const Token * end@var2205 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var2206 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var2207 , const std :: string & code@var2208 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var2209 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var2210 , const std :: string & what@var2211 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var2212 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var2213 , const std :: string & msg@var2214 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var2215 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var2216 , const std :: string & macroName@var2217 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var2218 , const Token * end@var2219 , bool allowSemicolon@var2220 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var2221 , const Severity :: SeverityType severity@var2222 , const std :: string & id@var2223 , const std :: string & msg@var2224 , bool inconclusive@var2225 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var2226 , Severity :: SeverityType severity@var2227 , const std :: string & id@var2228 , const std :: string & msg@var2229 , bool inconclusive@var2230 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var2231 , const Token * name@var2232 , const Token * typeDef@var2233 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var2234 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var2235 ,
821: const VariableMap & variableMap@var2236 ,
822: const int scopeStartVarId@var2237 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var2238 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var2239 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var2240 ,
827: int * varId@var2241 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var2242 ,
830: Token * const startToken@var2243 ,
831: const Token * const endToken@var2244 ,
832: const std :: map < std :: string , int > & varlist@var2245 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var2246 ,
834: int * varId_@var2247 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var2248 ) ;
849:
850: bool operatorEnd ( const Token * tok@var2249 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var2275 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var2250 ) {
861: mSettings@var2261 =@expr1073746387 settings@var2250 ;
862: list@var2254 .@expr1073746388 setSettings (@expr1073746389 settings@var2250 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var2263 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var2251 ) const ;
877:
878: void dump ( std :: ostream & out@var2252 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var2253 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var2273 ;
888: }
889:
|
892:
893: TokenList list@var2254 ;
894:
895: const Token * tokens ( ) const {
896: return list@var2254 .@expr1073746390 front (@expr1073746391 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var2255 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var2256 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var2257 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var2258 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var2261 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var2259 , bool inOperator@var2260 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073746392 mVarId@var2273 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var2261 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var2262 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var2263 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var2264 ;
973:
974:
975:
976: std :: string mConfiguration@var2265 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var2266 ;
980:
981: struct TypedefInfo {
982: std :: string name@var2267 ;
983: std :: string filename@var2268 ;
984: int lineNumber@var2269 ;
985: int column@var2270 ;
986: bool used@var2271 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var2272 ;
989:
990:
991: int mVarId@var2273 ;
992:
993:
994: int mUnnamedCount@var2274 ;
995:
|
999:
1000: bool mCodeWithTemplates@var2275 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var2276 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var2277 ;
1013: } ;

##file cppcheck-2.8/lib/checkautovariables.cpp

1:
|
41:
42: namespace {
43: CheckAutoVariables instance@var2278 ;
44: }
45:
46: static const CWE CWE398@var2279 ( 398U ) ;
47: static const CWE CWE562@var2280 ( 562U ) ;
48: static const CWE CWE590@var2281 ( 590U ) ;
49:
50: static bool isPtrArg ( const Token * tok@var2282 )
51: {
52: const Variable * var@var2283 ; var@var2283 =@expr1073746393 tok@var2282 .@expr1073746394 variable (@expr1073746395 ) ;
53: return (@expr1073746396 var@var2283 &&@expr1073746397 var@var2283 .@expr1073746398 isArgument (@expr1073746399 ) &&@expr1073746400 var@var2283 .@expr1073746401 isPointer (@expr1073746402 ) ) ;
54: }
55:
56: static bool isArrayArg ( const Token * tok@var2284 )
57: {
58: const Variable * var@var2285 ; var@var2285 =@expr1073746403 tok@var2284 .@expr1073746404 variable (@expr1073746405 ) ;
59: return (@expr1073746406 var@var2285 &&@expr1073746407 var@var2285 .@expr1073746408 isArgument (@expr1073746409 ) &&@expr1073746410 var@var2285 .@expr1073746411 isArray (@expr1073746412 ) ) ;
60: }
61:
62: static bool isArrayVar ( const Token * tok@var2286 )
63: {
64: const Variable * var@var2287 ; var@var2287 =@expr1073746413 tok@var2286 .@expr1073746414 variable (@expr1073746415 ) ;
65: return (@expr1073746416 var@var2287 &&@expr1073746417 var@var2287 .@expr1073746418 isArray (@expr1073746419 ) &&@expr1073746420 !@expr1073746421 var@var2287 .@expr1073746422 isArgument (@expr1073746423 ) ) ;
66: }
67:
68: static bool isRefPtrArg ( const Token * tok@var2288 )
69: {
70: const Variable * var@var2289 ; var@var2289 =@expr1073746424 tok@var2288 .@expr1073746425 variable (@expr1073746426 ) ;
71: return (@expr1073746427 var@var2289 &&@expr1073746428 var@var2289 .@expr1073746429 isArgument (@expr1073746430 ) &&@expr1073746431 var@var2289 .@expr1073746432 isReference (@expr1073746433 ) &&@expr1073746434 var@var2289 .@expr1073746435 isPointer (@expr1073746436 ) ) ;
72: }
73:
74: static bool isNonReferenceArg ( const Token * tok@var2290 )
75: {
76: const Variable * var@var2291 ; var@var2291 =@expr1073746437 tok@var2290 .@expr1073746438 variable (@expr1073746439 ) ;
77: return (@expr4616 var@var2291 &&@expr1073746441 var@var2291 .@expr1073746442 isArgument (@expr1073746443 ) &&@expr1073746444 !@expr1073746445 var@var2291 .@expr1073746446 isReference (@expr1073746447 ) &&@expr1073746448 (@expr4616 var@var2291 .@expr1073746450 isPointer (@expr1073746451 ) ||@expr1073746452 (@expr4616 var@var2291 .@expr4630 valueType (@expr4631 ) &&@expr1073746456 var@var2291 .@expr4630 valueType (@expr4631 ) .@expr1073746459 type@var2504 >=@expr1073746460 ValueType ::@expr1073746461 Type ::@expr1073746462 CONTAINER ) ||@expr1073746463 var@var2291 .@expr1073746464 type (@expr1073746465 ) ) ) ;
78: }
79:
80: static bool isAutoVar ( const Token * tok@var2292 )
81: {
82: const Variable * var@var2293 ; var@var2293 =@expr1073746466 tok@var2292 .@expr1073746467 variable (@expr1073746468 ) ;
83:
84: if (@expr1073746469 !@expr1073746470 var@var2293 ||@expr1073746471 !@expr1073746472 var@var2293 .@expr1073746473 isLocal (@expr1073746474 ) ||@expr1073746475 var@var2293 .@expr1073746476 isStatic (@expr1073746477 ) ) {
85: return false ; }
86:
87: if (@expr1073746478 var@var2293 .@expr1073746479 isReference (@expr1073746480 ) ) {
88:
89:
90:
91: return false ;
92: }
93:
94: if (@expr1073746481 Token ::@expr4658 Match (@expr4659 tok@var2292 , "%name% .|::" ) ) {
95: do {
96: tok@var2292 =@expr1073746484 tok@var2292 .@expr1073746485 tokAt (@expr1073746486 2 ) ;
97: } while (@expr1073746487 Token ::@expr4658 Match (@expr4659 tok@var2292 , "%name% .|::" ) ) ;
98: if (@expr1073746490 Token ::@expr4658 Match (@expr1073746492 tok@var2292 , "%name% (" ) ) {
99: return false ; }
100: }
101: return true ;
102: }
103:
104: static bool isAutoVarArray ( const Token * tok@var2294 )
105: {
106: if (@expr1073746493 !@expr1073746494 tok@var2294 ) {
107: return false ; }
108:
109:
110: if (@expr1073746495 tok@var2294 .@expr1073746496 isUnaryOp (@expr1073746497 "&" ) &&@expr1073746498 Token ::@expr1073746499 simpleMatch (@expr1073746500 tok@var2294 .@expr4677 astOperand1 (@expr4678 ) , "[" ) ) {
111: return isAutoVarArray (@expr1073746503 tok@var2294 .@expr4677 astOperand1 (@expr4678 ) .@expr1073746506 astOperand1 (@expr1073746507 ) ) ; }
112:
113:
114: if (@expr1073746508 tok@var2294 .@expr4685 str (@expr4686 ) ==@expr1073746511 "+" ) {
115: return isAutoVarArray (@expr4688 tok@var2294 .@expr4677 astOperand1 (@expr4678 ) ) ||@expr1073746515 isAutoVarArray (@expr1073746516 tok@var2294 .@expr4693 astOperand2 (@expr4694 ) ) ; }
116:
117:
118: if (@expr1073746519 tok@var2294 .@expr4685 str (@expr4686 ) ==@expr1073746522 "-" ) {
119: return isAutoVarArray (@expr4688 tok@var2294 .@expr4677 astOperand1 (@expr4678 ) ) &&@expr1073746526
120: tok@var2294 .@expr4693 astOperand2 (@expr4694 ) &&@expr1073746529
121: tok@var2294 .@expr4693 astOperand2 (@expr4694 ) .@expr4708 valueType (@expr4709 ) &&@expr1073746534
122: tok@var2294 .@expr4693 astOperand2 (@expr4694 ) .@expr4708 valueType (@expr4709 ) .@expr1073746539 isIntegral (@expr1073746540 ) ; }
123:
124: const Variable * var@var2295 ; var@var2295 =@expr1073746541 tok@var2294 .@expr1073746542 variable (@expr1073746543 ) ;
125: if (@expr1073746544 !@expr1073746545 var@var2295 ) {
126: return false ; }
127:
128:
129: if (@expr1073746546 var@var2295 .@expr1073746547 isLocal (@expr1073746548 ) &&@expr1073746549 !@expr1073746550 var@var2295 .@expr1073746551 isStatic (@expr1073746552 ) &&@expr1073746553 var@var2295 .@expr1073746554 isArray (@expr1073746555 ) &&@expr1073746556 !@expr1073746557 var@var2295 .@expr4734 isPointer (@expr4735 ) ) {
130: return true ; }
131:
132:
133: if (@expr1073746560 var@var2295 .@expr4734 isPointer (@expr4735 ) &&@expr1073746563 !@expr1073746564 var@var2295 .@expr1073746565 isArgument (@expr1073746566 ) ) {
134: for (@expr1073746567 std ::@expr4744 list < ValueFlow ::@expr4744 Value > ::@expr4744 const_iterator it@var2296 =@expr1073746571 tok@var2294 .@expr4748 values (@expr4749 ) .@expr1073746574 begin (@expr1073746575 ) ; it@var2296 !=@expr1073746576 tok@var2294 .@expr4748 values (@expr4749 ) .@expr1073746579 end (@expr1073746580 ) ; ++@expr1073746581 it@var2296 ) {
135: const ValueFlow ::@expr4744 Value &@expr1073746583 val@var2297 =@expr1073746584 *@expr1073746585 it@var2296 ;
136: if (@expr1073746586 val@var2297 .@expr1073746587 isTokValue (@expr1073746588 ) &&@expr1073746589 isAutoVarArray (@expr1073746590 val@var2297 .@expr1073746591 tokvalue@var2298 ) ) {
137: return true ; }
138: }
139: }
140:
141: return false ;
142: }
143:
144:
145: static bool checkRvalueExpression ( const Token * const vartok@var2299 )
146: {
147: const Variable * const var@var2300 ; var@var2300 =@expr1073746592 vartok@var2299 .@expr1073746593 variable (@expr1073746594 ) ;
148: if (@expr1073746595 var@var2300 ==@expr1073746596 nullptr ) {
149: return false ; }
150:
151: if (@expr1073746597 Token ::@expr4774 Match (@expr1073746599 vartok@var2299 .@expr1073746600 previous (@expr1073746601 ) , "& %name% [" ) &&@expr1073746602 var@var2300 .@expr4779 isPointer (@expr4780 ) ) {
152: return false ; }
153:
154: const Token * const next@var2301 ; next@var2301 =@expr1073746605 vartok@var2299 .@expr1073746606 next (@expr1073746607 ) ;
155:
156: if (@expr1073746608 Token ::@expr4774 Match (@expr1073746610 vartok@var2299 , "%name% . %var% [" ) &&@expr1073746611 !@expr4788 var@var2300 .@expr4779 isPointer (@expr4780 ) ) {
157: const Variable * var2@var2302 ; var2@var2302 =@expr1073746615 next@var2301 .@expr1073746616 next (@expr1073746617 ) .@expr1073746618 variable (@expr1073746619 ) ;
158: return var2@var2302 &&@expr1073746620 !@expr1073746621 var2@var2302 .@expr1073746622 isPointer (@expr1073746623 ) ;
159: }
160:
161: return (@expr4800 (@expr4800 next@var2301 .@expr1073746626 str (@expr1073746627 ) !=@expr1073746628 "." ||@expr1073746629 (@expr4800 !@expr4788 var@var2300 .@expr4779 isPointer (@expr4780 ) &&@expr1073746634 (@expr4800 !@expr1073746636 var@var2300 .@expr1073746637 isClass (@expr1073746638 ) ||@expr1073746639 var@var2300 .@expr1073746640 type (@expr1073746641 ) ) ) ) &&@expr1073746642 next@var2301 .@expr1073746643 strAt (@expr1073746644 2 ) !=@expr1073746645 "." ) ;
162: }
163:
164: static bool isAddressOfLocalVariable ( const Token * expr@var2303 )
165: {
166: if (@expr1073746646 !@expr1073746647 expr@var2303 ) {
167: return false ; }
168: if (@expr1073746648 Token ::@expr4825 Match (@expr1073746650 expr@var2303 , "+|-" ) ) {
169: return isAddressOfLocalVariable (@expr1073746651 expr@var2303 .@expr4828 astOperand1 (@expr4829 ) ) ||@expr1073746654 isAddressOfLocalVariable (@expr1073746655 expr@var2303 .@expr4832 astOperand2 (@expr4833 ) ) ; }
170: if (@expr1073746658 expr@var2303 .@expr1073746659 isCast (@expr1073746660 ) ) {
171: return isAddressOfLocalVariable (@expr1073746661 expr@var2303 .@expr4832 astOperand2 (@expr4833 ) ?@expr1073746664 expr@var2303 .@expr4832 astOperand2 (@expr4833 ) :@expr1073746667 expr@var2303 .@expr4828 astOperand1 (@expr4829 ) ) ; }
172: if (@expr1073746670 expr@var2303 .@expr1073746671 isUnaryOp (@expr1073746672 "&" ) ) {
173: const Token * op@var2304 ; op@var2304 =@expr1073746673 expr@var2303 .@expr4828 astOperand1 (@expr4829 ) ;
174: bool deref@var2305 ; deref@var2305 =@expr1073746676 false ;
175: while (@expr1073746677 Token ::@expr4825 Match (@expr1073746679 op@var2304 , ".|[" ) ) {
176: if (@expr1073746680 op@var2304 .@expr1073746681 originalName (@expr1073746682 ) ==@expr1073746683 "->" ) {
177: return false ; }
178: if (@expr1073746684 op@var2304 .@expr1073746685 str (@expr1073746686 ) ==@expr1073746687 "[" ) {
179: deref@var2305 =@expr1073746688 true ; }
180: op@var2304 =@expr1073746689 op@var2304 .@expr1073746690 astOperand1 (@expr1073746691 ) ;
181: }
182: return op@var2304 &&@expr1073746692 isAutoVar (@expr1073746693 op@var2304 ) &&@expr1073746694 (@expr1073746695 !@expr1073746696 deref@var2305 ||@expr1073746697 !@expr1073746698 op@var2304 .@expr1073746699 variable (@expr1073746700 ) .@expr1073746701 isPointer (@expr1073746702 ) ) ;
183: }
184: return false ;
185: }
186:
187: static bool variableIsUsedInScope ( const Token * start@var2306 , int varId@var2307 , const Scope * scope@var2308 )
188: {
189: if (@expr1073746703 !@expr1073746704 start@var2306 ) {
190: return false ; }
191:
192: for (@expr1073746705 const Token *@expr1073746706 tok@var2309 =@expr1073746707 start@var2306 ; tok@var2309 &&@expr1073746708 tok@var2309 !=@expr1073746709 scope@var2308 .@expr1073746710 bodyEnd@var2310 ; tok@var2309 =@expr1073746711 tok@var2309 .@expr1073746712 next (@expr1073746713 ) ) {
193: if (@expr1073746714 tok@var2309 .@expr1073746715 varId (@expr1073746716 ) ==@expr1073746717 varId@var2307 ) {
194: return true ; }
195: const Scope ::@expr1073746718 ScopeType scopeType@var2311 =@expr1073746719 tok@var2309 .@expr1073746720 scope (@expr1073746721 ) .@expr1073746722 type@var2505 ;
196: if (@expr1073746723 scopeType@var2311 ==@expr1073746724 Scope ::@expr1073746725 eFor ||@expr1073746726 scopeType@var2311 ==@expr1073746727 Scope ::@expr1073746728 eDo ||@expr1073746729 scopeType@var2311 ==@expr1073746730 Scope ::@expr1073746731 eWhile ) {
197: return true ; }
198: if (@expr1073746732 Token ::@expr1073746733 simpleMatch (@expr1073746734 tok@var2309 , "asm (" ) ) {
199: return true ; }
200: }
201: return false ;
202: }
203:
204: void CheckAutoVariables :: assignFunctionArg ( )
205: {
206: const bool printStyle@var2312 =@expr1073746735 mSettings@var29 .@expr4912 severity@var2492 .@expr4913 isEnabled (@expr1073746738 Severity ::@expr1073746739 style ) ;
207: const bool printWarning@var2313 =@expr1073746740 mSettings@var29 .@expr4912 severity@var2492 .@expr4913 isEnabled (@expr1073746743 Severity ::@expr1073746744 warning ) ;
208: if (@expr1073746745 !@expr1073746746 printStyle@var2312 &&@expr1073746747 !@expr1073746748 printWarning@var2313 ) {
209: return ; }
210:
211: const SymbolDatabase * symbolDatabase@var2314 ; symbolDatabase@var2314 =@expr1073746749 mTokenizer@var28 .@expr1073746750 getSymbolDatabase (@expr1073746751 ) ;
212: for (@expr1073746752 const Scope *@expr4929 scope@var2315 :@expr1073746754 symbolDatabase@var2314 .@expr1073746755 functionScopes@var2316 ) {
213: for (@expr1073746756 const Token *@expr4929 tok@var2317 =@expr1073746758 scope@var2315 .@expr1073746759 bodyStart@var2318 ; tok@var2317 &&@expr1073746760 tok@var2317 !=@expr1073746761 scope@var2315 .@expr4938 bodyEnd@var2319 ; tok@var2317 =@expr1073746763 tok@var2317 .@expr1073746764 next (@expr1073746765 ) ) {
214:
215: if (@expr1073746766 tok@var2317 .@expr1073746767 astParent (@expr1073746768 ) ) {
216: continue ; }
217: if (@expr1073746769 !@expr1073746770 (@expr1073746771 tok@var2317 .@expr1073746772 isAssignmentOp (@expr1073746773 ) ||@expr1073746774 Token ::@expr4951 Match (@expr1073746776 tok@var2317 , "++|--" ) ) ||@expr1073746777 !@expr1073746778 Token ::@expr4951 Match (@expr1073746780 tok@var2317 .@expr4957 astOperand1 (@expr4958 ) , "%var%" ) ) {
218: continue ; }
219: const Token * const vartok@var2320 ; vartok@var2320 =@expr1073746783 tok@var2317 .@expr4957 astOperand1 (@expr4958 ) ;
220: if (@expr1073746786 isNonReferenceArg (@expr1073746787 vartok@var2320 ) &&@expr1073746788
221: !@expr1073746789 Token ::@expr4951 Match (@expr1073746791 vartok@var2320 .@expr4968 next (@expr4969 ) , "= %varid% ;" , vartok@var2320 .@expr4970 varId (@expr4971 ) ) &&@expr1073746796
222: !@expr1073746797 variableIsUsedInScope (@expr1073746798 Token ::@expr4975 findsimplematch (@expr1073746800 vartok@var2320 .@expr4968 next (@expr4969 ) , ";" ) , vartok@var2320 .@expr4970 varId (@expr4971 ) , scope@var2315 ) &&@expr1073746805
223: !@expr1073746806 Token ::@expr4975 findsimplematch (@expr1073746808 vartok@var2320 , "goto" , scope@var2315 .@expr4938 bodyEnd@var2319 ) ) {
224: if (@expr1073746810 vartok@var2320 .@expr1073746811 variable (@expr1073746812 ) .@expr1073746813 isPointer (@expr1073746814 ) &&@expr1073746815 printWarning@var2313 ) {
225: errorUselessAssignmentPtrArg (@expr1073746816 vartok@var2320 ) ; }
226: else { if (@expr1073746817 printStyle@var2312 ) {
227: errorUselessAssignmentArg (@expr1073746818 vartok@var2320 ) ; } }
228: }
229: }
230: }
231: }
232:
233: void CheckAutoVariables :: autoVariables ( )
234: {
235: const bool printInconclusive@var2321 =@expr1073746820 mSettings@var29 .@expr1073746821 certainty@var2493 .@expr1073746822 isEnabled (@expr1073746823 Certainty ::@expr1073746824 inconclusive@expr1073746819 ) ;
236: const SymbolDatabase * symbolDatabase@var2322 ; symbolDatabase@var2322 =@expr1073746825 mTokenizer@var28 .@expr1073746826 getSymbolDatabase (@expr1073746827 ) ;
237: for (@expr1073746828 const Scope *@expr5005 scope@var2323 :@expr1073746830 symbolDatabase@var2322 .@expr1073746831 functionScopes@var2324 ) {
238: for (@expr1073746832 const Token *@expr5005 tok@var2325 =@expr1073746834 scope@var2323 .@expr1073746835 bodyStart@var2326 ; tok@var2325 &&@expr1073746836 tok@var2325 !=@expr1073746837 scope@var2323 .@expr1073746838 bodyEnd@var2327 ; tok@var2325 =@expr1073746839 tok@var2325 .@expr5016 next (@expr5017 ) ) {
239:
240: if (@expr1073746842 const Token *@expr5005 lambdaEndToken@var2328 =@expr1073746844 findLambdaEndToken (@expr1073746845 tok@var2325 ) ) {
241: tok@var2325 =@expr1073746846 lambdaEndToken@var2328 ;
242: continue ;
243: }
244:
245: if (@expr1073746847 Token ::@expr5024 Match (@expr1073746849 tok@var2325 , "[;{}] %var% = & %var%" ) &&@expr1073746850 isRefPtrArg (@expr1073746851 tok@var2325 .@expr5016 next (@expr5017 ) ) &&@expr1073746854 isAutoVar (@expr1073746855 tok@var2325 .@expr5032 tokAt (@expr5033 4 ) ) ) {
246: if (@expr1073746858 checkRvalueExpression (@expr1073746859 tok@var2325 .@expr5032 tokAt (@expr5033 4 ) ) ) {
247: checkAutoVariableAssignment (@expr5038 tok@var2325 .@expr5016 next (@expr5017 ) , false ) ; }
248: } else { if (@expr1073746865 Token ::@expr5024 Match (@expr1073746867 tok@var2325 , "[;{}] * %var% =" ) &&@expr1073746868 isPtrArg (@expr1073746869 tok@var2325 .@expr5032 tokAt (@expr5047 2 ) ) &&@expr1073746872 isAddressOfLocalVariable (@expr1073746873 tok@var2325 .@expr5032 tokAt (@expr1073746875 3 ) .@expr1073746876 astOperand2 (@expr1073746877 ) ) ) {
249: checkAutoVariableAssignment (@expr5038 tok@var2325 .@expr5016 next (@expr5017 ) , false ) ;
250: } else { if (@expr1073746881 Token ::@expr5024 Match (@expr1073746883 tok@var2325 , "[;{}] %var% . %var% =" ) &&@expr1073746884 isPtrArg (@expr5061 tok@var2325 .@expr5016 next (@expr5017 ) ) &&@expr1073746888 isAddressOfLocalVariable (@expr1073746889 tok@var2325 .@expr5032 tokAt (@expr5033 4 ) .@expr1073746892 astOperand2 (@expr1073746893 ) ) ) {
251: checkAutoVariableAssignment (@expr5038 tok@var2325 .@expr5016 next (@expr5017 ) , false ) ;
252: } else { if (@expr1073746897 Token ::@expr5024 Match (@expr1073746899 tok@var2325 , "[;{}] %var% . %var% = %var% ;" ) ) {
253:
254: if (@expr1073746900 printInconclusive@var2321 &&@expr1073746901 isPtrArg (@expr5061 tok@var2325 .@expr5016 next (@expr5017 ) ) ) {
255: if (@expr1073746905 isAutoVarArray (@expr1073746906 tok@var2325 .@expr5032 tokAt (@expr5084 5 ) ) ) {
256: checkAutoVariableAssignment (@expr1073746909 tok@var2325 .@expr5016 next (@expr5017 ) , true ) ; }
257: }
258: tok@var2325 =@expr1073746912 tok@var2325 .@expr5032 tokAt (@expr5084 5 ) ;
259: } else { if (@expr1073746915 Token ::@expr5024 Match (@expr1073746917 tok@var2325 , "[;{}] * %var% = %var% ;" ) ) {
260: const Variable * var1@var2329 ; var1@var2329 =@expr1073746918 tok@var2325 .@expr5032 tokAt (@expr5047 2 ) .@expr1073746921 variable (@expr1073746922 ) ;
261: if (@expr1073746923 var1@var2329 &&@expr1073746924 var1@var2329 .@expr1073746925 isArgument (@expr1073746926 ) &&@expr1073746927 Token ::@expr5024 Match (@expr1073746929 var1@var2329 .@expr1073746930 nameToken (@expr1073746931 ) .@expr1073746932 tokAt (@expr1073746933 -3 ) , "%type% * *" ) ) {
262: if (@expr1073746934 isAutoVarArray (@expr1073746935 tok@var2325 .@expr5032 tokAt (@expr5033 4 ) ) ) {
263: checkAutoVariableAssignment (@expr5038 tok@var2325 .@expr5016 next (@expr5017 ) , false ) ; }
264: }
265: tok@var2325 =@expr1073746941 tok@var2325 .@expr5032 tokAt (@expr5033 4 ) ;
266: } else { if (@expr1073746944 Token ::@expr5024 Match (@expr1073746946 tok@var2325 , "[;{}] %var% [" ) &&@expr1073746947 Token ::@expr1073746948 simpleMatch (@expr1073746949 tok@var2325 .@expr5126 linkAt (@expr5127 2 ) , "] =" ) &&@expr1073746952
267: (@expr1073746953 isPtrArg (@expr5061 tok@var2325 .@expr5016 next (@expr5017 ) ) ||@expr1073746957 isArrayArg (@expr1073746958 tok@var2325 .@expr5016 next (@expr5017 ) ) ) &&@expr1073746961 isAddressOfLocalVariable (@expr1073746962 tok@var2325 .@expr5126 linkAt (@expr5127 2 ) .@expr1073746965 next (@expr1073746966 ) .@expr1073746967 astOperand2 (@expr1073746968 ) ) ) {
268: errorAutoVariableAssignment (@expr1073746969 tok@var2325 .@expr5016 next (@expr5017 ) , false ) ;
269: }
270:
271: else { if (@expr1073746972 (@expr1073746973 Token ::@expr5024 Match (@expr1073746975 tok@var2325 , "%name% ( %var%|%str% ) ;" ) &&@expr1073746976 mSettings@var29 .@expr5153 library@var2494 .@expr5154 getDeallocFuncInfo (@expr5155 tok@var2325 ) ) ||@expr1073746980
272: (@expr1073746981 mTokenizer@var28 .@expr5158 isCPP (@expr5159 ) &&@expr1073746984 Token ::@expr5024 Match (@expr1073746986 tok@var2325 , "delete [| ]| (| %var%|%str% !![" ) ) ) {
273: tok@var2325 =@expr1073746987 Token ::@expr5164 findmatch (@expr1073746989 tok@var2325 .@expr5016 next (@expr5017 ) , "%var%|%str%" ) ;
274: if (@expr1073746992 isArrayVar (@expr1073746993 tok@var2325 ) ||@expr1073746994 tok@var2325 .@expr1073746995 tokType (@expr1073746996 ) ==@expr1073746997 Token ::@expr5174 eString ) {
275: errorInvalidDeallocation (@expr5175 tok@var2325 , nullptr ) ; }
276: else { if (@expr1073747000 tok@var2325 .@expr5177 variable (@expr5178 ) &&@expr1073747003 tok@var2325 .@expr5177 variable (@expr5178 ) .@expr1073747006 isPointer (@expr1073747007 ) ) {
277: for (@expr1073747008 const ValueFlow ::@expr1073747009 Value &@expr1073747010 v@var2330 :@expr1073747011 tok@var2325 .@expr1073747012 values (@expr1073747013 ) ) {
278: if (@expr1073747014 !@expr1073747015 (@expr1073747016 v@var2330 .@expr1073747017 isTokValue (@expr1073747018 ) ) ) {
279: continue ; }
280: if (@expr1073747019 isArrayVar (@expr1073747020 v@var2330 .@expr5197 tokvalue@var2331 ) ||@expr1073747022 (@expr1073747023 (@expr1073747024 v@var2330 .@expr5197 tokvalue@var2331 .@expr1073747026 tokType (@expr1073747027 ) ==@expr1073747028 Token ::@expr5174 eString ) &&@expr1073747030 !@expr1073747031 v@var2330 .@expr1073747032 isImpossible (@expr1073747033 ) ) ) {
281: errorInvalidDeallocation (@expr1073747034 tok@var2325 , &@expr1073747035 v@var2330 ) ;
282: break ;
283: }
284: }
285: } }
286: } else { if (@expr1073747036 (@expr1073747037 Token ::@expr5024 Match (@expr1073747039 tok@var2325 , "%name% ( & %var% ) ;" ) &&@expr1073747040 mSettings@var29 .@expr5153 library@var2494 .@expr5154 getDeallocFuncInfo (@expr5155 tok@var2325 ) ) ||@expr1073747044
287: (@expr1073747045 mTokenizer@var28 .@expr5158 isCPP (@expr5159 ) &&@expr1073747048 Token ::@expr5024 Match (@expr1073747050 tok@var2325 , "delete [| ]| (| & %var% !![" ) ) ) {
288: tok@var2325 =@expr1073747051 Token ::@expr5164 findmatch (@expr1073747053 tok@var2325 .@expr5016 next (@expr5017 ) , "%var%" ) ;
289: if (@expr1073747056 isAutoVar (@expr1073747057 tok@var2325 ) ) {
290: errorInvalidDeallocation (@expr5175 tok@var2325 , nullptr ) ; }
291: } } } } } } } }
292: }
293: }
294: }
295:
296: bool CheckAutoVariables :: checkAutoVariableAssignment ( const Token * expr@var2332 , bool inconclusive@var2333 , const Token * startToken@var2334 )
297: {
298: if (@expr1073747059 !@expr1073747060 startToken@var2334 ) {
299: startToken@var2334 =@expr1073747061 Token ::@expr1073747062 findsimplematch (@expr1073747063 expr@var2332 , "=" ) .@expr1073747064 next (@expr1073747065 ) ; }
300: for (@expr1073747066 const Token *@expr1073747067 tok@var2335 =@expr1073747068 startToken@var2334 ; tok@var2335 ; tok@var2335 =@expr1073747069 tok@var2335 .@expr1073747070 next (@expr1073747071 ) ) {
301: if (@expr1073747072 tok@var2335 .@expr1073747073 str (@expr1073747074 ) ==@expr1073747075 "}" &&@expr1073747076 tok@var2335 .@expr1073747077 scope (@expr1073747078 ) .@expr1073747079 type@var2505 ==@expr1073747080 Scope ::@expr1073747081 ScopeType ::@expr1073747082 eFunction ) {
302: errorAutoVariableAssignment (@expr5259 expr@var2332 , inconclusive@var2333 ) ; }
303:
304: if (@expr1073747084 Token ::@expr5261 Match (@expr1073747086 tok@var2335 , "return|throw|break|continue" ) ) {
305: errorAutoVariableAssignment (@expr5259 expr@var2332 , inconclusive@var2333 ) ;
306: return true ;
307: }
308: if (@expr1073747088 Token ::@expr5265 simpleMatch (@expr1073747090 tok@var2335 , "=" ) ) {
309: const Token * lhs@var2336 ; lhs@var2336 =@expr1073747091 tok@var2335 ;
310: while (@expr1073747092 Token ::@expr5261 Match (@expr1073747094 lhs@var2336 .@expr5271 previous (@expr5272 ) , "%name%|.|*" ) ) {
311: lhs@var2336 =@expr1073747097 lhs@var2336 .@expr5271 previous (@expr5272 ) ; }
312: const Token * e@var2337 ; e@var2337 =@expr1073747100 expr@var2332 ;
313: while (@expr1073747101 e@var2337 .@expr5278 str (@expr5279 ) !=@expr1073747104 "=" &&@expr1073747105 lhs@var2336 .@expr5282 str (@expr5283 ) ==@expr1073747108 e@var2337 .@expr5278 str (@expr5279 ) ) {
314: e@var2337 =@expr1073747111 e@var2337 .@expr1073747112 next (@expr1073747113 ) ;
315: lhs@var2336 =@expr1073747114 lhs@var2336 .@expr1073747115 next (@expr1073747116 ) ;
316: }
317: if (@expr1073747117 lhs@var2336 .@expr5282 str (@expr5283 ) ==@expr1073747120 "=" ) {
318: return false ; }
319: }
320:
321: if (@expr1073747121 Token ::@expr5265 simpleMatch (@expr1073747123 tok@var2335 , "if (" ) ) {
322: const Token * ifStart@var2338 ; ifStart@var2338 =@expr1073747124 tok@var2335 .@expr5301 linkAt (@expr1073747126 1 ) .@expr1073747127 next (@expr1073747128 ) ;
323: return checkAutoVariableAssignment (@expr1073747129 expr@var2332 , inconclusive@var2333 , ifStart@var2338 ) ||@expr1073747130 checkAutoVariableAssignment (@expr1073747131 expr@var2332 , inconclusive@var2333 , ifStart@var2338 .@expr1073747132 link (@expr1073747133 ) .@expr1073747134 next (@expr1073747135 ) ) ;
324: }
325: if (@expr1073747136 Token ::@expr5265 simpleMatch (@expr1073747138 tok@var2335 , "} else {" ) ) {
326: tok@var2335 =@expr1073747139 tok@var2335 .@expr5301 linkAt (@expr1073747141 2 ) ; }
327: }
328: return false ;
329: }
330:
331:
332:
333: void CheckAutoVariables :: errorReturnAddressToAutoVariable ( const Token * tok@var2339 )
334: {
335: reportError (@expr1073747142 tok@var2339 , Severity ::@expr1073747143 error , "returnAddressOfAutoVariable" , "Address of an auto-variable returned." , CWE562@var2280 , Certainty ::@expr1073747144 normal ) ;
336: }
337:
338: void CheckAutoVariables :: errorReturnAddressToAutoVariable ( const Token * tok@var2340 , const ValueFlow :: Value * value@var2341 )
339: {
340: reportError (@expr1073747145 tok@var2340 , Severity ::@expr1073747146 error , "returnAddressOfAutoVariable" , "Address of auto-variable '" +@expr1073747147 value@var2341 .@expr1073747148 tokvalue@var2342 .@expr1073747149 astOperand1 (@expr1073747150 ) .@expr1073747151 expressionString (@expr1073747152 ) +@expr1073747153 "' returned" , CWE562@var2280 , Certainty ::@expr1073747154 normal ) ;
341: }
342:
343: void CheckAutoVariables :: errorReturnPointerToLocalArray ( const Token * tok@var2343 )
344: {
345: reportError (@expr1073747155 tok@var2343 , Severity ::@expr1073747156 error , "returnLocalVariable" , "Pointer to local array variable returned." , CWE562@var2280 , Certainty ::@expr1073747157 normal ) ;
346: }
347:
348: void CheckAutoVariables :: errorAutoVariableAssignment ( const Token * tok@var2344 , bool inconclusive@var2345 )
349: {
350: if (@expr1073747159 !@expr1073747160 inconclusive@var2345 ) {
351: reportError (@expr1073747161 tok@var2344 , Severity ::@expr5338 error , "autoVariables" ,
352: "Address of local auto-variable assigned to a function parameter.\nDangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends."
353:
354:
355:
356: , CWE562@var2280 , Certainty ::@expr1073747163 normal ) ;
357: } else {
358: reportError (@expr1073747164 tok@var2344 , Severity ::@expr5338 error , "autoVariables" ,
359: "Address of local auto-variable assigned to a function parameter.\nFunction parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. The address is invalid after the function ends and it might 'leak' from the function through the parameter."
360:
361:
362:
363: ,
364: CWE562@var2280 ,
365: Certainty ::@expr1073747166 inconclusive@expr1073747158 ) ;
366: }
367: }
368:
369: void CheckAutoVariables :: errorReturnAddressOfFunctionParameter ( const Token * tok@var2346 , const std :: string & varname@var2347 )
370: {
371: reportError (@expr1073747167 tok@var2346 , Severity ::@expr1073747168 error , "returnAddressOfFunctionParameter" ,
372: "$symbol:" +@expr1073747169 varname@var2347 +@expr1073747170 "\nAddress of function parameter '$symbol' returned.\nAddress of the function parameter '$symbol' becomes invalid after the function exits because function parameters are stored on the stack which is freed when the function exits. Thus the returned value is invalid."
373:
374:
375:
376: , CWE562@var2280 , Certainty ::@expr1073747171 normal ) ;
377: }
378:
379: void CheckAutoVariables :: errorUselessAssignmentArg ( const Token * tok@var2348 )
380: {
381: reportError (@expr1073747172 tok@var2348 ,
382: Severity ::@expr1073747173 style ,
383: "uselessAssignmentArg" ,
384: "Assignment of function parameter has no effect outside the function." , CWE398@var2279 , Certainty ::@expr1073747174 normal ) ;
385: }
386:
387: void CheckAutoVariables :: errorUselessAssignmentPtrArg ( const Token * tok@var2349 )
388: {
389: reportError (@expr1073747175 tok@var2349 ,
390: Severity ::@expr1073747176 warning ,
391: "uselessAssignmentPtrArg" ,
392: "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" , CWE398@var2279 , Certainty ::@expr1073747177 normal ) ;
393: }
394:
395:
396:
397: static bool isInScope ( const Token * tok@var2350 , const Scope * scope@var2351 )
398: {
399: if (@expr1073747178 !@expr1073747179 tok@var2350 ) {
400: return false ; }
401: if (@expr1073747180 !@expr1073747181 scope@var2351 ) {
402: return false ; }
403: const Variable * var@var2352 ; var@var2352 =@expr1073747182 tok@var2350 .@expr1073747183 variable (@expr1073747184 ) ;
404: if (@expr1073747185 var@var2352 &&@expr1073747186 (@expr1073747187 var@var2352 .@expr1073747188 isGlobal (@expr1073747189 ) ||@expr1073747190 var@var2352 .@expr1073747191 isStatic (@expr1073747192 ) ||@expr1073747193 var@var2352 .@expr1073747194 isExtern (@expr1073747195 ) ) ) {
405: return false ; }
406: if (@expr1073747196 tok@var2350 .@expr5373 scope (@expr5374 ) &&@expr1073747199 tok@var2350 .@expr5373 scope (@expr5374 ) .@expr1073747202 isNestedIn (@expr1073747203 scope@var2351 ) ) {
407: return true ; }
408: if (@expr1073747204 !@expr1073747205 var@var2352 ) {
409: return false ; }
410: if (@expr1073747206 var@var2352 .@expr1073747207 isArgument (@expr1073747208 ) &&@expr1073747209 !@expr1073747210 var@var2352 .@expr1073747211 isReference (@expr1073747212 ) ) {
411: const Scope * tokScope@var2353 ; tokScope@var2353 =@expr1073747213 tok@var2350 .@expr5373 scope (@expr5374 ) ;
412: if (@expr1073747216 !@expr1073747217 tokScope@var2353 ) {
413: return false ; }
414: for (@expr1073747218 const Scope *@expr1073747219 argScope@var2354 :@expr1073747220 tokScope@var2353 .@expr1073747221 nestedList@var2355 ) {
415: if (@expr1073747222 argScope@var2354 &&@expr1073747223 argScope@var2354 .@expr1073747224 isNestedIn (@expr1073747225 scope@var2351 ) ) {
416: return true ; }
417: }
418: }
419: return false ;
420: }
421:
422: static bool isDeadScope ( const Token * tok@var2356 , const Scope * scope@var2357 )
423: {
424: if (@expr1073747226 !@expr1073747227 tok@var2356 ) {
425: return false ; }
426: if (@expr1073747228 !@expr1073747229 scope@var2357 ) {
427: return false ; }
428: const Variable * var@var2358 ; var@var2358 =@expr1073747230 tok@var2356 .@expr1073747231 variable (@expr1073747232 ) ;
429: if (@expr1073747233 var@var2358 &&@expr1073747234 (@expr1073747235 !@expr1073747236 var@var2358 .@expr1073747237 isLocal (@expr1073747238 ) ||@expr1073747239 var@var2358 .@expr1073747240 isStatic (@expr1073747241 ) ||@expr1073747242 var@var2358 .@expr1073747243 isExtern (@expr1073747244 ) ) ) {
430: return false ; }
431: if (@expr1073747245 tok@var2356 .@expr5422 scope (@expr5423 ) &&@expr1073747248 tok@var2356 .@expr5422 scope (@expr5423 ) .@expr5427 bodyEnd@var2506 !=@expr1073747252 scope@var2357 .@expr5429 bodyEnd@var2359 &&@expr1073747254 precedes (@expr1073747255 tok@var2356 .@expr5422 scope (@expr5423 ) .@expr5427 bodyEnd@var2506 , scope@var2357 .@expr5429 bodyEnd@var2359 ) ) {
432: return true ; }
433: return false ;
434: }
435:
436: static int getPointerDepth ( const Token * tok@var2360 )
437: {
438: if (@expr1073747260 !@expr1073747261 tok@var2360 ) {
439: return 0 ; }
440: if (@expr1073747262 tok@var2360 .@expr5439 valueType (@expr5440 ) ) {
441: return tok@var2360 .@expr5439 valueType (@expr5440 ) .@expr1073747267 pointer@var2507 ; }
442: int n@var2361 ; n@var2361 =@expr1073747268 0 ;
443: std ::@expr1073747269 pair < const Token *@expr5446 , const Token *@expr5446 > decl@var2362 ; decl@var2362 =@expr1073747272 Token ::@expr1073747273 typeDecl (@expr1073747274 tok@var2360 ) ;
444: for (@expr1073747275 const Token *@expr5446 tok2@var2363 =@expr1073747277 decl@var2362 .@expr1073747278 first@var2364 ; tok2@var2363 !=@expr1073747279 decl@var2362 .@expr1073747280 second@var2365 ; tok2@var2363 =@expr1073747281 tok2@var2363 .@expr1073747282 next (@expr1073747283 ) ) {
445: if (@expr1073747284 Token ::@expr1073747285 simpleMatch (@expr1073747286 tok@var2360 , "*" ) ) {
446: n@var2361 ++@expr1073747287 ; } }
447: return n@var2361 ;
448: }
449:
450: static bool isDeadTemporary ( bool cpp@var2366 , const Token * tok@var2367 , const Token * expr@var2368 , const Library * library@var2369 )
451: {
452: if (@expr1073747288 !@expr1073747289 isTemporary (@expr1073747290 cpp@var2366 , tok@var2367 , library@var2369 ) ) {
453: return false ; }
454: if (@expr1073747291 expr@var2368 ) {
455: if (@expr1073747292 !@expr1073747293 precedes (@expr1073747294 nextAfterAstRightmostLeaf (@expr1073747295 tok@var2367 .@expr1073747296 astTop (@expr1073747297 ) ) , nextAfterAstRightmostLeaf (@expr1073747298 expr@var2368 .@expr1073747299 astTop (@expr1073747300 ) ) ) ) {
456: return false ; }
457: const Token * parent@var2370 ; parent@var2370 =@expr1073747301 tok@var2367 .@expr1073747302 astParent (@expr1073747303 ) ;
458:
459: if (@expr1073747304 astIsRHS (@expr1073747305 tok@var2367 ) &&@expr1073747306 Token ::@expr5483 simpleMatch (@expr1073747308 parent@var2370 , ":" ) &&@expr1073747309 Token ::@expr5483 simpleMatch (@expr1073747311 parent@var2370 .@expr5488 astParent (@expr5489 ) , "(" ) &&@expr1073747314 Token ::@expr5483 simpleMatch (@expr1073747316 parent@var2370 .@expr5488 astParent (@expr5489 ) .@expr1073747319 previous (@expr1073747320 ) , "for (" ) ) {
460: const Token * braces@var2371 ; braces@var2371 =@expr1073747321 parent@var2370 .@expr5488 astParent (@expr5489 ) .@expr1073747324 link (@expr1073747325 ) .@expr1073747326 next (@expr1073747327 ) ;
461: if (@expr1073747328 precedes (@expr1073747329 braces@var2371 , expr@var2368 ) &&@expr1073747330 precedes (@expr1073747331 expr@var2368 , braces@var2371 .@expr1073747332 link (@expr1073747333 ) ) ) {
462: return false ; }
463: }
464: }
465: return true ;
466: }
467:
468: static bool isEscapedReference ( const Variable * var@var2372 )
469: {
470: if (@expr1073747334 !@expr1073747335 var@var2372 ) {
471: return false ; }
472: if (@expr1073747336 !@expr1073747337 var@var2372 .@expr1073747338 isReference (@expr1073747339 ) ) {
473: return false ; }
474: if (@expr1073747340 !@expr1073747341 var@var2372 .@expr5518 declEndToken (@expr5519 ) ) {
475: return false ; }
476: if (@expr1073747344 !@expr1073747345 Token ::@expr1073747346 simpleMatch (@expr1073747347 var@var2372 .@expr5518 declEndToken (@expr5519 ) , "=" ) ) {
477: return false ; }
478: const Token * vartok@var2373 ; vartok@var2373 =@expr1073747350 var@var2372 .@expr5518 declEndToken (@expr5519 ) .@expr1073747353 astOperand2 (@expr1073747354 ) ;
479: return !@expr1073747355 isTemporary (@expr1073747356 true , vartok@var2373 , nullptr , false ) ;
480: }
481:
482: static bool isDanglingSubFunction ( const Token * tokvalue@var2374 , const Token * tok@var2375 )
483: {
484: if (@expr1073747357 !@expr1073747358 tokvalue@var2374 ) {
485: return false ; }
486: const Variable * var@var2376 ; var@var2376 =@expr1073747359 tokvalue@var2374 .@expr1073747360 variable (@expr1073747361 ) ;
487: if (@expr1073747362 !@expr1073747363 var@var2376 .@expr1073747364 isLocal (@expr1073747365 ) ) {
488: return false ; }
489: Function * f@var2377 ; f@var2377 =@expr1073747366 Scope ::@expr1073747367 nestedInFunction (@expr1073747368 tok@var2375 .@expr1073747369 scope (@expr1073747370 ) ) ;
490: if (@expr1073747371 !@expr1073747372 f@var2377 ) {
491: return false ; }
492: const Token * parent@var2378 ; parent@var2378 =@expr1073747373 tokvalue@var2374 .@expr1073747374 astParent (@expr1073747375 ) ;
493: while (@expr1073747376 parent@var2378 &&@expr1073747377 !@expr1073747378 Token ::@expr1073747379 Match (@expr1073747380 parent@var2378 .@expr1073747381 previous (@expr1073747382 ) , "%name% (" ) ) {
494: parent@var2378 =@expr1073747383 parent@var2378 .@expr1073747384 astParent (@expr1073747385 ) ;
495: }
496: if (@expr1073747386 !@expr1073747387 Token ::@expr1073747388 simpleMatch (@expr1073747389 parent@var2378 , "(" ) ) {
497: return false ; }
498: return exprDependsOnThis (@expr1073747390 parent@var2378 ) ;
499: }
500:
501: static const Variable * getParentVar ( const Token * tok@var2379 )
502: {
503: if (@expr1073747391 !@expr1073747392 tok@var2379 ) {
504: return nullptr ; }
505: if (@expr1073747393 Token ::@expr1073747394 simpleMatch (@expr1073747395 tok@var2379 , "." ) ) {
506: return getParentVar (@expr1073747396 tok@var2379 .@expr1073747397 astOperand1 (@expr1073747398 ) ) ; }
507: return tok@var2379 .@expr1073747399 variable (@expr1073747400 ) ;
508: }
509:
510: static bool isAssignedToNonLocal ( const Token * tok@var2380 )
511: {
512: if (@expr1073747401 !@expr1073747402 Token ::@expr1073747403 simpleMatch (@expr1073747404 tok@var2380 .@expr5581 astParent (@expr5582 ) , "=" ) ) {
513: return false ; }
514: if (@expr1073747407 !@expr1073747408 astIsRHS (@expr1073747409 tok@var2380 ) ) {
515: return false ; }
516: const Variable * var@var2381 ; var@var2381 =@expr1073747410 getParentVar (@expr1073747411 tok@var2380 .@expr5581 astParent (@expr5582 ) .@expr1073747414 astOperand1 (@expr1073747415 ) ) ;
517: if (@expr1073747416 !@expr1073747417 var@var2381 ) {
518: return false ; }
519: return !@expr1073747418 var@var2381 .@expr1073747419 isLocal (@expr1073747420 ) ||@expr1073747421 var@var2381 .@expr1073747422 isStatic (@expr1073747423 ) ;
520: }
521:
522: void CheckAutoVariables :: checkVarLifetimeScope ( const Token * start@var2382 , const Token * end@var2383 )
523: {
524: const bool printInconclusive@var2384 =@expr1073747425 mSettings@var29 .@expr1073747426 certainty@var2493 .@expr1073747427 isEnabled (@expr1073747428 Certainty ::@expr1073747429 inconclusive@expr1073747424 ) ;
525: if (@expr1073747430 !@expr1073747431 start@var2382 ) {
526: return ; }
527: const Scope * scope@var2385 ; scope@var2385 =@expr1073747432 start@var2382 .@expr1073747433 scope (@expr1073747434 ) ;
528: if (@expr1073747435 !@expr1073747436 scope@var2385 ) {
529: return ; }
530:
531: if (@expr1073747437 scope@var2385 .@expr1073747438 bodyStart@var2386 !=@expr1073747439 start@var2382 ) {
532: return ; }
533: bool returnRef@var2387 ; returnRef@var2387 =@expr1073747440 Function ::@expr1073747441 returnsReference (@expr1073747442 scope@var2385 .@expr1073747443 function@var2388 ) ;
534: for (@expr1073747444 const Token *@expr5621 tok@var2389 =@expr1073747446 start@var2382 ; tok@var2389 &&@expr1073747447 tok@var2389 !=@expr1073747448 end@var2383 ; tok@var2389 =@expr1073747449 tok@var2389 .@expr5626 next (@expr5627 ) ) {
535:
536: if (@expr1073747452 returnRef@var2387 &&@expr1073747453 Token ::@expr5630 simpleMatch (@expr1073747455 tok@var2389 .@expr5632 astParent (@expr5633 ) , "return" ) ) {
537: for (@expr1073747458 const LifetimeToken &@expr5635 lt@var2390 :@expr1073747460 getLifetimeTokens (@expr1073747461 tok@var2389 , true ) ) {
538: if (@expr1073747462 !@expr5639 printInconclusive@var2384 &&@expr1073747464 lt@var2390 .@expr5641 inconclusive@var2391 ) {
539: continue ; }
540: const Variable * var@var2392 ; var@var2392 =@expr1073747466 lt@var2390 .@expr5643 token@var2393 .@expr1073747468 variable (@expr1073747469 ) ;
541: if (@expr1073747470 var@var2392 &&@expr1073747471 !@expr1073747472 var@var2392 .@expr1073747473 isGlobal (@expr1073747474 ) &&@expr1073747475 !@expr1073747476 var@var2392 .@expr1073747477 isStatic (@expr1073747478 ) &&@expr1073747479 !@expr1073747480 var@var2392 .@expr1073747481 isReference (@expr1073747482 ) &&@expr1073747483 !@expr1073747484 var@var2392 .@expr1073747485 isRValueReference (@expr1073747486 ) &&@expr1073747487
542: isInScope (@expr1073747488 var@var2392 .@expr1073747489 nameToken (@expr1073747490 ) , tok@var2389 .@expr5667 scope (@expr5668 ) ) ) {
543: errorReturnReference (@expr1073747493 tok@var2389 , lt@var2390 .@expr5670 errorPath@var2394 , lt@var2390 .@expr5641 inconclusive@var2391 ) ;
544: break ;
545: } else { if (@expr1073747496 isDeadTemporary (@expr1073747497 mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) , lt@var2390 .@expr5643 token@var2393 , nullptr , &@expr5677 mSettings@var29 .@expr5678 library@var2494 ) ) {
546: errorReturnTempReference (@expr1073747503 tok@var2389 , lt@var2390 .@expr5670 errorPath@var2394 , lt@var2390 .@expr5641 inconclusive@var2391 ) ;
547: break ;
548: } }
549: }
550:
551: } else { if (@expr1073747506 Token ::@expr5683 Match (@expr1073747508 tok@var2389 .@expr1073747509 previous (@expr1073747510 ) , "&|&& %var% =" ) &&@expr1073747511 tok@var2389 .@expr5632 astParent (@expr5633 ) ==@expr1073747514 tok@var2389 .@expr5626 next (@expr5627 ) &&@expr1073747517
552: tok@var2389 .@expr5694 variable (@expr5695 ) &&@expr1073747520 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747523 nameToken (@expr1073747524 ) ==@expr1073747525 tok@var2389 &&@expr1073747526
553: tok@var2389 .@expr5694 variable (@expr5695 ) .@expr5705 declarationId (@expr5706 ) ==@expr5707 tok@var2389 .@expr5708 varId (@expr5709 ) &&@expr1073747534 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747537 isStatic (@expr1073747538 ) &&@expr1073747539
554: !@expr1073747540 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747543 isArgument (@expr1073747544 ) ) {
555: std ::@expr1073747545 list < std ::@expr5722 pair < const Token *@expr5621 , std ::@expr5722 string > > errorPath@var2395 ;
556: const Variable * var@var2396 ; var@var2396 =@expr1073747549 getLifetimeVariable (@expr1073747550 tok@var2389 , errorPath@var2395 ) ;
557: if (@expr1073747551 var@var2396 &&@expr1073747552 isInScope (@expr1073747553 var@var2396 .@expr1073747554 nameToken (@expr1073747555 ) , tok@var2389 .@expr5667 scope (@expr5668 ) ) ) {
558: errorDanglingReference (@expr1073747558 tok@var2389 , var@var2396 , errorPath@var2395 ) ;
559: continue ;
560: }
561:
562: } else { if (@expr1073747559 tok@var2389 .@expr5694 variable (@expr5695 ) &&@expr1073747562 (@expr1073747563 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747566 isReference (@expr1073747567 ) ||@expr1073747568 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747571 isRValueReference (@expr1073747572 ) ) ) {
563: for (@expr1073747573 const LifetimeToken &@expr5635 lt@var2397 :@expr1073747575 getLifetimeTokens (@expr1073747576 getParentLifetime (@expr1073747577 tok@var2389 ) ) ) {
564: if (@expr1073747578 !@expr5639 printInconclusive@var2384 &&@expr1073747580 lt@var2397 .@expr5757 inconclusive@var2398 ) {
565: continue ; }
566: const Token * tokvalue@var2399 ; tokvalue@var2399 =@expr1073747582 lt@var2397 .@expr1073747583 token@var2400 ;
567: if (@expr1073747584 isDeadTemporary (@expr1073747585 mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) , tokvalue@var2399 , tok@var2389 , &@expr5677 mSettings@var29 .@expr5678 library@var2494 ) ) {
568: errorDanglingTempReference (@expr1073747590 tok@var2389 , lt@var2397 .@expr1073747591 errorPath@var2401 , lt@var2397 .@expr5757 inconclusive@var2398 ) ;
569: break ;
570: }
571: }
572: } } }
573: const bool escape@var2402 =@expr1073747593 Token ::@expr5683 Match (@expr1073747595 tok@var2389 .@expr5632 astParent (@expr5633 ) , "return|throw" ) ;
574: std ::@expr1073747598 unordered_set < const Token *@expr5621 > exprs@var2403 ;
575: for (@expr1073747600 const ValueFlow ::@expr5722 Value &@expr5635 val@var2404 :@expr1073747603 tok@var2389 .@expr1073747604 values (@expr1073747605 ) ) {
576: if (@expr1073747606 !@expr1073747607 val@var2404 .@expr5784 isLocalLifetimeValue (@expr5785 ) &&@expr1073747610 !@expr1073747611 val@var2404 .@expr5788 isSubFunctionLifetimeValue (@expr5789 ) ) {
577: continue ; }
578: if (@expr1073747614 !@expr5639 printInconclusive@var2384 &&@expr1073747616 val@var2404 .@expr1073747617 isInconclusive (@expr1073747618 ) ) {
579: continue ; }
580: const Token * parent@var2405 ; parent@var2405 =@expr1073747619 getParentLifetime (@expr1073747620 mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) , val@var2404 .@expr1073747623 tokvalue@var2406 , &@expr5677 mSettings@var29 .@expr5678 library@var2494 ) ;
581: if (@expr1073747626 !@expr1073747627 exprs@var2403 .@expr1073747628 insert (@expr1073747629 parent@var2405 ) .@expr1073747630 second@var2407 ) {
582: continue ; }
583: for (@expr1073747631 const LifetimeToken &@expr5635 lt@var2408 :@expr1073747633 getLifetimeTokens (@expr1073747634 parent@var2405 , escape@var2402 ||@expr1073747635 isAssignedToNonLocal (@expr1073747636 tok@var2389 ) ) ) {
584: const Token * tokvalue@var2409 ; tokvalue@var2409 =@expr1073747637 lt@var2408 .@expr1073747638 token@var2410 ;
585: if (@expr1073747639 val@var2404 .@expr5784 isLocalLifetimeValue (@expr5785 ) ) {
586: if (@expr1073747642 escape@var2402 ) {
587: if (@expr1073747643 getPointerDepth (@expr1073747644 tok@var2389 ) <@expr1073747645 getPointerDepth (@expr1073747646 tokvalue@var2409 ) ) {
588: continue ; }
589: if (@expr5823 !@expr5824 isLifetimeBorrowed (@expr5825 tok@var2389 , mSettings@var29 ) ) {
590: continue ; }
591: if (@expr1073747650 tokvalue@var2409 .@expr1073747651 exprId (@expr1073747652 ) ==@expr1073747653 tok@var2389 .@expr1073747654 exprId (@expr1073747655 ) &&@expr1073747656 !@expr1073747657 (@expr1073747658 tok@var2389 .@expr5694 variable (@expr5695 ) &&@expr1073747661 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr1073747664 isArray (@expr1073747665 ) ) &&@expr1073747666
592: !@expr1073747667 astIsContainerView (@expr1073747668 tok@var2389 .@expr5632 astParent (@expr5633 ) ) ) {
593: continue ; }
594: if (@expr1073747671 (@expr1073747672 tokvalue@var2409 .@expr5849 variable (@expr5850 ) &&@expr1073747675 !@expr1073747676 isEscapedReference (@expr1073747677 tokvalue@var2409 .@expr5849 variable (@expr5850 ) ) &&@expr1073747680
595: isInScope (@expr1073747681 tokvalue@var2409 .@expr5849 variable (@expr5850 ) .@expr5860 nameToken (@expr5861 ) , scope@var2385 ) ) ||@expr1073747686
596: isDeadTemporary (@expr1073747687 mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) , tokvalue@var2409 , nullptr , &@expr5677 mSettings@var29 .@expr5678 library@var2494 ) ) {
597: errorReturnDanglingLifetime (@expr1073747692 tok@var2389 , &@expr5869 val@var2404 ) ;
598: break ;
599: }
600: } else { if (@expr1073747694 tokvalue@var2409 .@expr5849 variable (@expr5850 ) &&@expr1073747697 isDeadScope (@expr1073747698 tokvalue@var2409 .@expr5849 variable (@expr5850 ) .@expr5860 nameToken (@expr5861 ) , tok@var2389 .@expr5667 scope (@expr5668 ) ) ) {
601: errorInvalidLifetime (@expr1073747705 tok@var2389 , &@expr5869 val@var2404 ) ;
602: break ;
603: } else { if (@expr1073747707 !@expr1073747708 tokvalue@var2409 .@expr5849 variable (@expr5850 ) &&@expr1073747711
604: isDeadTemporary (@expr1073747712 mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) , tokvalue@var2409 , tok@var2389 , &@expr5677 mSettings@var29 .@expr5678 library@var2494 ) ) {
605: errorDanglingTemporaryLifetime (@expr1073747717 tok@var2389 , &@expr5869 val@var2404 , tokvalue@var2409 ) ;
606: break ;
607: } } }
608: }
609: if (@expr1073747719 tokvalue@var2409 .@expr5849 variable (@expr5850 ) &&@expr1073747722 (@expr1073747723 isInScope (@expr1073747724 tokvalue@var2409 .@expr5849 variable (@expr5850 ) .@expr5860 nameToken (@expr5861 ) , tok@var2389 .@expr5667 scope (@expr5668 ) ) ||@expr1073747731
610: (@expr1073747732 val@var2404 .@expr5788 isSubFunctionLifetimeValue (@expr5789 ) &&@expr1073747735 isDanglingSubFunction (@expr1073747736 tokvalue@var2409 , tok@var2389 ) ) ) ) {
611: const Variable * var@var2411 ; var@var2411 =@expr1073747737 nullptr ;
612: const Token * tok2@var2412 ; tok2@var2412 =@expr1073747738 tok@var2389 ;
613: if (@expr1073747739 Token ::@expr5630 simpleMatch (@expr1073747741 tok@var2389 .@expr5632 astParent (@expr5633 ) , "=" ) ) {
614: if (@expr1073747744 astIsRHS (@expr1073747745 tok@var2389 ) ) {
615: var@var2411 =@expr1073747746 getParentVar (@expr1073747747 tok@var2389 .@expr5632 astParent (@expr5633 ) .@expr5926 astOperand1 (@expr5927 ) ) ;
616: tok2@var2412 =@expr1073747752 tok@var2389 .@expr5632 astParent (@expr5633 ) .@expr5926 astOperand1 (@expr5927 ) ;
617: }
618: } else { if (@expr1073747757 tok@var2389 .@expr5694 variable (@expr5695 ) &&@expr1073747760 tok@var2389 .@expr5694 variable (@expr5695 ) .@expr5705 declarationId (@expr5706 ) ==@expr5707 tok@var2389 .@expr5708 varId (@expr5709 ) ) {
619: var@var2411 =@expr1073747768 tok@var2389 .@expr5694 variable (@expr5695 ) ;
620: } }
621: if (@expr5823 !@expr5824 isLifetimeBorrowed (@expr5825 tok@var2389 , mSettings@var29 ) ) {
622: continue ; }
623: const Token * nextTok@var2413 ; nextTok@var2413 =@expr1073747774 nextAfterAstRightmostLeaf (@expr1073747775 tok@var2389 .@expr1073747776 astTop (@expr1073747777 ) ) ;
624: if (@expr1073747778 !@expr1073747779 nextTok@var2413 ) {
625: nextTok@var2413 =@expr1073747780 tok@var2389 .@expr5626 next (@expr5627 ) ; }
626: if (@expr1073747783 var@var2411 &&@expr1073747784 !@expr1073747785 var@var2411 .@expr1073747786 isLocal (@expr1073747787 ) &&@expr1073747788 !@expr1073747789 var@var2411 .@expr1073747790 isArgument (@expr1073747791 ) &&@expr1073747792
627: !@expr1073747793 isVariableChanged (@expr1073747794 nextTok@var2413 ,
628: tok@var2389 .@expr5667 scope (@expr5668 ) .@expr1073747797 bodyEnd@var2506 ,
629: var@var2411 .@expr1073747798 declarationId (@expr1073747799 ) ,
630: var@var2411 .@expr1073747800 isGlobal (@expr1073747801 ) ,
631: mSettings@var29 ,
632: mTokenizer@var28 .@expr5674 isCPP (@expr5675 ) ) ) {
633: errorDanglngLifetime (@expr1073747804 tok2@var2412 , &@expr5869 val@var2404 ) ;
634: break ;
635: }
636: }
637: }
638: }
639: const Token * lambdaEndToken@var2414 ; lambdaEndToken@var2414 =@expr1073747806 findLambdaEndToken (@expr1073747807 tok@var2389 ) ;
640: if (@expr1073747808 lambdaEndToken@var2414 ) {
641: checkVarLifetimeScope (@expr1073747809 lambdaEndToken@var2414 .@expr1073747810 link (@expr1073747811 ) , lambdaEndToken@var2414 ) ;
642: tok@var2389 =@expr1073747812 lambdaEndToken@var2414 ;
643: }
644: if (@expr1073747813 tok@var2389 .@expr1073747814 str (@expr1073747815 ) ==@expr1073747816 "{" &&@expr1073747817 tok@var2389 .@expr5667 scope (@expr5668 ) ) {
645:
646: if (@expr1073747820 tok@var2389 .@expr5667 scope (@expr5668 ) .@expr5999 type@var2505 ==@expr1073747824 Scope ::@expr1073747825 eClass ||@expr1073747826
647: tok@var2389 .@expr5667 scope (@expr5668 ) .@expr5999 type@var2505 ==@expr1073747830 Scope ::@expr1073747831 eStruct ||@expr1073747832
648: tok@var2389 .@expr5667 scope (@expr5668 ) .@expr5999 type@var2505 ==@expr1073747836 Scope ::@expr1073747837 eUnion ) {
649: for (@expr1073747838 const Function &@expr5635 f@var2415 :@expr1073747840 tok@var2389 .@expr5667 scope (@expr5668 ) .@expr1073747843 functionList@var2508 ) {
650: if (@expr1073747844 f@var2415 .@expr6021 functionScope@var2416 ) {
651: checkVarLifetimeScope (@expr1073747846 f@var2415 .@expr6021 functionScope@var2416 .@expr1073747848 bodyStart@var2417 , f@var2415 .@expr6021 functionScope@var2416 .@expr1073747850 bodyEnd@var2418 ) ; }
652: }
653: tok@var2389 =@expr1073747851 tok@var2389 .@expr1073747852 link (@expr1073747853 ) ;
654: }
655: }
656: }
657: }
658:
659: void CheckAutoVariables :: checkVarLifetime ( )
660: {
661: const SymbolDatabase * symbolDatabase@var2419 ; symbolDatabase@var2419 =@expr1073747854 mTokenizer@var28 .@expr1073747855 getSymbolDatabase (@expr1073747856 ) ;
662: for (@expr1073747857 const Scope *@expr1073747858 scope@var2420 :@expr1073747859 symbolDatabase@var2419 .@expr1073747860 functionScopes@var2421 ) {
663: if (@expr1073747861 !@expr1073747862 scope@var2420 .@expr1073747863 function@var2422 ) {
664: continue ; }
665: checkVarLifetimeScope (@expr1073747864 scope@var2420 .@expr1073747865 bodyStart@var2423 , scope@var2420 .@expr1073747866 bodyEnd@var2424 ) ;
666: }
667: }
668:
669: void CheckAutoVariables :: errorReturnDanglingLifetime ( const Token * tok@var2425 , const ValueFlow :: Value * val@var2426 )
670: {
671: const bool inconclusive@var2427 =@expr1073747867 val@var2426 ?@expr1073747868 val@var2426 .@expr1073747869 isInconclusive (@expr1073747870 ) :@expr1073747871 false ;
672: std ::@expr1073747872 list < std ::@expr6049 pair < const Token *@expr6050 , std ::@expr6049 string > > errorPath@var2428 ; errorPath@var2428 =@expr1073747876 val@var2426 ?@expr1073747877 val@var2426 .@expr1073747878 errorPath@var2429 :@expr1073747879 std ::@expr1073747880 list < std ::@expr6049 pair < const Token *@expr6050 , std ::@expr6049 string > > (@expr1073747884 ) ;
673: std ::@expr1073747885 string msg@var2430 ; msg@var2430 =@expr1073747886 "Returning " +@expr1073747887 lifetimeMessage (@expr1073747888 tok@var2425 , val@var2426 , errorPath@var2428 ) ;
674: errorPath@var2428 .@expr1073747889 emplace_back (@expr1073747890 tok@var2425 , "" ) ;
675: reportError (@expr1073747891 errorPath@var2428 , Severity ::@expr1073747892 error , "returnDanglingLifetime" , msg@var2430 +@expr1073747893 " that will be invalid when returning." , CWE562@var2280 , inconclusive@var2427 ?@expr1073747894 Certainty ::@expr1073747895 inconclusive :@expr1073747896 Certainty ::@expr1073747897 normal ) ;
676: }
677:
678: void CheckAutoVariables :: errorInvalidLifetime ( const Token * tok@var2431 , const ValueFlow :: Value * val@var2432 )
679: {
680: const bool inconclusive@var2433 =@expr1073747898 val@var2432 ?@expr1073747899 val@var2432 .@expr1073747900 isInconclusive (@expr1073747901 ) :@expr1073747902 false ;
681: std ::@expr1073747903 list < std ::@expr6080 pair < const Token *@expr6081 , std ::@expr6080 string > > errorPath@var2434 ; errorPath@var2434 =@expr1073747907 val@var2432 ?@expr1073747908 val@var2432 .@expr1073747909 errorPath@var2435 :@expr1073747910 std ::@expr1073747911 list < std ::@expr6080 pair < const Token *@expr6081 , std ::@expr6080 string > > (@expr1073747915 ) ;
682: std ::@expr1073747916 string msg@var2436 ; msg@var2436 =@expr1073747917 "Using " +@expr1073747918 lifetimeMessage (@expr1073747919 tok@var2431 , val@var2432 , errorPath@var2434 ) ;
683: errorPath@var2434 .@expr1073747920 emplace_back (@expr1073747921 tok@var2431 , "" ) ;
684: reportError (@expr1073747922 errorPath@var2434 , Severity ::@expr1073747923 error , "invalidLifetime" , msg@var2436 +@expr1073747924 " that is out of scope." , CWE562@var2280 , inconclusive@var2433 ?@expr1073747925 Certainty ::@expr1073747926 inconclusive :@expr1073747927 Certainty ::@expr1073747928 normal ) ;
685: }
686:
687: void CheckAutoVariables :: errorDanglingTemporaryLifetime ( const Token * tok@var2437 , const ValueFlow :: Value * val@var2438 , const Token * tempTok@var2439 )
688: {
689: const bool inconclusive@var2440 =@expr1073747929 val@var2438 ?@expr1073747930 val@var2438 .@expr1073747931 isInconclusive (@expr1073747932 ) :@expr1073747933 false ;
690: std ::@expr1073747934 list < std ::@expr6111 pair < const Token *@expr6112 , std ::@expr6111 string > > errorPath@var2441 ; errorPath@var2441 =@expr1073747938 val@var2438 ?@expr1073747939 val@var2438 .@expr1073747940 errorPath@var2442 :@expr1073747941 std ::@expr1073747942 list < std ::@expr6111 pair < const Token *@expr6112 , std ::@expr6111 string > > (@expr1073747946 ) ;
691: std ::@expr1073747947 string msg@var2443 ; msg@var2443 =@expr1073747948 "Using " +@expr1073747949 lifetimeMessage (@expr1073747950 tok@var2437 , val@var2438 , errorPath@var2441 ) ;
692: errorPath@var2441 .@expr6127 emplace_back (@expr1073747952 tempTok@var2439 , "Temporary created here." ) ;
693: errorPath@var2441 .@expr6127 emplace_back (@expr1073747954 tok@var2437 , "" ) ;
694: reportError (@expr1073747955 errorPath@var2441 ,
695: Severity ::@expr1073747956 error ,
696: "danglingTemporaryLifetime" ,
697: msg@var2443 +@expr1073747957 " that is a temporary." ,
698: CWE562@var2280 ,
699: inconclusive@var2440 ?@expr1073747958 Certainty ::@expr1073747959 inconclusive :@expr1073747960 Certainty ::@expr1073747961 normal ) ;
700: }
701:
702: void CheckAutoVariables :: errorDanglngLifetime ( const Token * tok@var2444 , const ValueFlow :: Value * val@var2445 )
703: {
704: const bool inconclusive@var2446 =@expr1073747962 val@var2445 ?@expr1073747963 val@var2445 .@expr1073747964 isInconclusive (@expr1073747965 ) :@expr1073747966 false ;
705: std ::@expr1073747967 list < std ::@expr6144 pair < const Token *@expr6145 , std ::@expr6144 string > > errorPath@var2447 ; errorPath@var2447 =@expr1073747971 val@var2445 ?@expr1073747972 val@var2445 .@expr1073747973 errorPath@var2448 :@expr1073747974 std ::@expr1073747975 list < std ::@expr6144 pair < const Token *@expr6145 , std ::@expr6144 string > > (@expr1073747979 ) ;
706: std ::@expr1073747980 string tokName@var2449 ; tokName@var2449 =@expr1073747981 tok@var2444 ?@expr1073747982 tok@var2444 .@expr1073747983 expressionString (@expr1073747984 ) :@expr1073747985 "x" ;
707: std ::@expr1073747986 string msg@var2450 ; msg@var2450 =@expr1073747987 "Non-local variable '" +@expr1073747988 tokName@var2449 +@expr1073747989 "' will use " +@expr1073747990 lifetimeMessage (@expr1073747991 tok@var2444 , val@var2445 , errorPath@var2447 ) ;
708: errorPath@var2447 .@expr1073747992 emplace_back (@expr1073747993 tok@var2444 , "" ) ;
709: reportError (@expr1073747994 errorPath@var2447 , Severity ::@expr1073747995 error , "danglingLifetime" , msg@var2450 +@expr1073747996 "." , CWE562@var2280 , inconclusive@var2446 ?@expr1073747997 Certainty ::@expr1073747998 inconclusive :@expr1073747999 Certainty ::@expr1073748000 normal ) ;
710: }
711:
712: void CheckAutoVariables :: errorDanglingTempReference ( const Token * tok@var2451 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var2452 , bool inconclusive@var2453 )
713: {
714: errorPath@var2452 .@expr1073748001 emplace_back (@expr1073748002 tok@var2451 , "" ) ;
715: reportError (@expr1073748003
716: errorPath@var2452 , Severity ::@expr1073748004 error , "danglingTempReference" , "Using reference to dangling temporary." , CWE562@var2280 , inconclusive@var2453 ?@expr1073748005 Certainty ::@expr1073748006 inconclusive :@expr1073748007 Certainty ::@expr1073748008 normal ) ;
717: }
718:
719: void CheckAutoVariables :: errorReturnReference ( const Token * tok@var2454 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var2455 , bool inconclusive@var2456 )
720: {
721: errorPath@var2455 .@expr1073748009 emplace_back (@expr1073748010 tok@var2454 , "" ) ;
722: reportError (@expr1073748011
723: errorPath@var2455 , Severity ::@expr1073748012 error , "returnReference" , "Reference to local variable returned." , CWE562@var2280 , inconclusive@var2456 ?@expr1073748013 Certainty ::@expr1073748014 inconclusive :@expr1073748015 Certainty ::@expr1073748016 normal ) ;
724: }
725:
726: void CheckAutoVariables :: errorDanglingReference ( const Token * tok@var2457 , const Variable * var@var2458 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var2459 )
727: {
728: std ::@expr1073748017 string tokName@var2460 ; tokName@var2460 =@expr1073748018 tok@var2457 ?@expr1073748019 tok@var2457 .@expr1073748020 str (@expr1073748021 ) :@expr1073748022 "x" ;
729: std ::@expr1073748023 string varName@var2461 ; varName@var2461 =@expr1073748024 var@var2458 ?@expr1073748025 var@var2458 .@expr1073748026 name (@expr1073748027 ) :@expr1073748028 "y" ;
730: std ::@expr1073748029 string msg@var2462 ; msg@var2462 =@expr1073748030 "Non-local reference variable '" +@expr1073748031 tokName@var2460 +@expr1073748032 "' to local variable '" +@expr1073748033 varName@var2461 +@expr1073748034 "'" ;
731: errorPath@var2459 .@expr1073748035 emplace_back (@expr1073748036 tok@var2457 , "" ) ;
732: reportError (@expr1073748037 errorPath@var2459 , Severity ::@expr1073748038 error , "danglingReference" , msg@var2462 , CWE562@var2280 , Certainty ::@expr1073748039 normal ) ;
733: }
734:
735: void CheckAutoVariables :: errorReturnTempReference ( const Token * tok@var2463 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var2464 , bool inconclusive@var2465 )
736: {
737: errorPath@var2464 .@expr1073748040 emplace_back (@expr1073748041 tok@var2463 , "" ) ;
738: reportError (@expr1073748042
739: errorPath@var2464 , Severity ::@expr1073748043 error , "returnTempReference" , "Reference to temporary returned." , CWE562@var2280 , inconclusive@var2465 ?@expr1073748044 Certainty ::@expr1073748045 inconclusive :@expr1073748046 Certainty ::@expr1073748047 normal ) ;
740: }
741:
742: void CheckAutoVariables :: errorInvalidDeallocation ( const Token * tok@var2466 , const ValueFlow :: Value * val@var2467 )
743: {
744: const Variable * var@var2468 ; var@var2468 =@expr1073748048 val@var2467 ?@expr1073748049 val@var2467 .@expr6226 tokvalue@var2469 .@expr1073748051 variable (@expr1073748052 ) :@expr1073748053 (@expr1073748054 tok@var2466 ?@expr1073748055 tok@var2466 .@expr1073748056 variable (@expr1073748057 ) :@expr1073748058 nullptr ) ;
745:
746: std ::@expr1073748059 string type@var2470 ; type@var2470 =@expr1073748060 "an auto-variable" ;
747: if (@expr1073748061 tok@var2466 &&@expr1073748062 tok@var2466 .@expr1073748063 tokType (@expr1073748064 ) ==@expr1073748065 Token ::@expr6242 eString ) {
748: type@var2470 =@expr1073748067 "a string literal" ; }
749: else { if (@expr1073748068 val@var2467 &&@expr1073748069 val@var2467 .@expr6226 tokvalue@var2469 .@expr1073748071 tokType (@expr1073748072 ) ==@expr1073748073 Token ::@expr6242 eString ) {
750: type@var2470 =@expr1073748075 "a pointer pointing to a string literal" ; }
751: else { if (@expr1073748076 var@var2468 ) {
752: if (@expr1073748077 var@var2468 .@expr1073748078 isGlobal (@expr1073748079 ) ) {
753: type@var2470 =@expr1073748080 "a global variable" ; }
754: else { if (@expr1073748081 var@var2468 .@expr1073748082 isStatic (@expr1073748083 ) ) {
755: type@var2470 =@expr1073748084 "a static variable" ; } }
756: } } }
757:
758: if (@expr1073748085 val@var2467 ) {
759: type@var2470 +=@expr1073748086 " (" +@expr1073748087 val@var2467 .@expr6226 tokvalue@var2469 .@expr1073748089 str (@expr1073748090 ) +@expr1073748091 ")" ; }
760:
761: reportError (@expr1073748092 getErrorPath (@expr1073748093 tok@var2466 , val@var2467 , "Deallocating memory that was not dynamically allocated" ) ,
762: Severity ::@expr1073748094 error ,
763: "autovarInvalidDeallocation" ,
764: "Deallocation of " +@expr1073748095 type@var2470 +@expr1073748096 " results in undefined behaviour.\nThe deallocation of "
765: +@expr1073748097 type@var2470 +@expr1073748098 " results in undefined behaviour. You should only free memory that has been allocated dynamically."
766: , CWE590@var2281 , Certainty ::@expr1073748099 normal ) ;
767: }

##file cppcheck-2.8/lib/settings.h

13:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2471 ; mFlags@var2471 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2471 ;
54: }
55: void clear ( ) {
56: mFlags@var2471 =@expr1073748100 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2471 =@expr1073748101 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2472 ) {
62: if (@expr1073748102 enabled@var2472 ) {
63: fill (@expr1073748103 ) ; }
64: else {
65: clear (@expr1073748104 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2473 ) const {
68: return (@expr6281 mFlags@var2471 &@expr1073748106 (@expr6281 1U <<@expr1073748108 (@expr1073748109 uint32_t ) flag@var2473 ) ) !=@expr1073748110 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2474 ) {
71: mFlags@var2471 |=@expr1073748111 (@expr1073748112 1U <<@expr1073748113 (@expr1073748114 uint32_t ) flag@var2474 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2475 ) {
74: mFlags@var2471 &=@expr1073748115 ~@expr1073748116 (@expr1073748117 1U <<@expr1073748118 (@expr1073748119 uint32_t ) flag@var2475 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2476 , bool enabled@var2477 ) {
77: if (@expr1073748120 enabled@var2477 ) {
78: enable (@expr1073748121 flag@var2476 ) ; }
79: else {
80: disable (@expr1073748122 flag@var2476 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2478 ; mFlags@var2478 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2478 ;
54: }
55: void clear ( ) {
56: mFlags@var2478 =@expr1073748123 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2478 =@expr1073748124 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2479 ) {
62: if (@expr1073748125 enabled@var2479 ) {
63: fill (@expr1073748126 ) ; }
64: else {
65: clear (@expr1073748127 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2480 ) const {
68: return (@expr6304 mFlags@var2478 &@expr1073748129 (@expr6304 1U <<@expr1073748131 (@expr1073748132 uint32_t ) flag@var2480 ) ) !=@expr1073748133 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2481 ) {
71: mFlags@var2478 |=@expr1073748134 (@expr1073748135 1U <<@expr1073748136 (@expr1073748137 uint32_t ) flag@var2481 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2482 ) {
74: mFlags@var2478 &=@expr1073748138 ~@expr1073748139 (@expr1073748140 1U <<@expr1073748141 (@expr1073748142 uint32_t ) flag@var2482 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2483 , bool enabled@var2484 ) {
77: if (@expr1073748143 enabled@var2484 ) {
78: enable (@expr1073748144 flag@var2483 ) ; }
79: else {
80: disable (@expr1073748145 flag@var2483 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2485 ; mFlags@var2485 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2485 ;
54: }
55: void clear ( ) {
56: mFlags@var2485 =@expr1073748146 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2485 =@expr1073748147 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2486 ) {
62: if (@expr1073748148 enabled@var2486 ) {
63: fill (@expr1073748149 ) ; }
64: else {
65: clear (@expr1073748150 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2487 ) const {
68: return (@expr6327 mFlags@var2485 &@expr1073748152 (@expr6327 1U <<@expr1073748154 (@expr1073748155 uint32_t ) flag@var2487 ) ) !=@expr1073748156 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2488 ) {
71: mFlags@var2485 |=@expr1073748157 (@expr1073748158 1U <<@expr1073748159 (@expr1073748160 uint32_t ) flag@var2488 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2489 ) {
74: mFlags@var2485 &=@expr1073748161 ~@expr1073748162 (@expr1073748163 1U <<@expr1073748164 (@expr1073748165 uint32_t ) flag@var2489 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2490 , bool enabled@var2491 ) {
77: if (@expr1073748166 enabled@var2491 ) {
78: enable (@expr1073748167 flag@var2490 ) ; }
79: else {
80: disable (@expr1073748168 flag@var2490 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible {2@197,3@198,1@199}
  id possible {"uselessAssignmentPtrArg"@197,"uselessAssignmentArg"@198,"returnAddressOfFunctionParameter"@199,"autoVariables"@200,"returnLocalVariable"@201,"returnAddressOfAutoVariable"@202,"returnAddressOfAutoVariable"@204}
  msg possible {"Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?"@197,"Assignment of function parameter has no effect outside the function."@198,"Address of local auto-variable assigned to a function parameter.\nDangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends."@200,"Pointer to local array variable returned."@201,"Address of an auto-variable returned."@204}
  certainty possible 0@197
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 49
  ( always "Auto Variables"
Line 53
  ( always "Auto Variables"
Line 72
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 98
  nullptr always 0
Line 99
  nullptr always 0
  false always 0
Line 100
  nullptr always 0
Line 101
  nullptr always 0
Line 102
  nullptr always 0
  errorPath always size=0
  false always 0
Line 103
  nullptr always 0
  nullptr always 0
  errorPath always size=0
Line 104
  nullptr always 0
  errorPath always size=0
  false always 0
Line 105
  nullptr always 0
  errorPath always size=0
  false always 0
Line 106
  nullptr always 0
  nullptr always 0
Line 107
  nullptr always 0
  "parameter" always "parameter"
Line 108
  nullptr always 0
Line 109
  nullptr always 0
Line 110
  nullptr always 0
  nullptr always 0
Line 111
  nullptr always 0
  nullptr always 0
Line 112
  nullptr always 0
  nullptr always 0
Line 113
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 117
  "Auto Variables" always "Auto Variables"
Line 121
  "A pointer to a variable is only valid as long as the variable is in scope.\nCheck:\n- returning a pointer to auto or temporary variable\n- assigning address of an variable to an effective parameter of a function\n- returning reference to local/temporary variable\n- returning address of function parameter\n- suspicious assignment of pointer argument\n- useless assignment of function argument\n" always "A pointer to a variable is only valid as long as the variable is in scope.\nCheck:\n- returning a pointer to auto or temporary variable\n- assigning address of an variable to an effective parameter of a function\n- returning reference to local/temporary variable\n- returning address of function parameter\n- suspicious assignment of pointer argument\n- useless assignment of function argument\n"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@6817,34@7073}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@26,34@27}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@26,""@27,""@28,"U"@29,"U"@30,"u"@31,"u"@32,"u8"@33,"u8"@34}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@158,34@159}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@155,34@157}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@116,128@117,64@118,32@119,16@120,8@121,4@122,2@123,1@124}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@125,128@126,64@127,32@128,16@129,8@130,4@131,2@132,1@133}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@125,4294967167@126,4294967231@127,4294967263@128,4294967279@129,4294967287@130,4294967291@131,4294967293@132,4294967294@133}
  flag {!<=-1,256@125,128@126,64@127,32@128,16@129,8@130,4@131,2@132,1@133}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok possible {symbolic=(tokvalue->astParent())@158,0@158,symbolic=(tok->astParent())@165}
  pattern possible {"return"@31,"="@109,"="@140,"."@147,"("@158,"="@160,":"@165,"("@166,"for ("@168,"*"@178}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@15,4@16,0@17}
  t possible {10@15,4@16,0@17}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@15,4@16,0@17}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@15,0@17}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@15,0@17}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@15}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@15}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@15}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@15}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@15}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  s possible {"&"@64,"&"@84}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@23}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  pattern possible {"="@205,";"@43}
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  startTok possible symbolic=(tok->astOperand1())@46
  pattern inconclusive "goto"@46
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@25,17179869184@36,8589934592@38,34359738368@40,4294967296@42,2147483648@44,1073741824@46,536870912@48,268435456@50}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@112,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@113}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@24,17179869184@35,8589934592@37,34359738368@39,4294967296@41,2147483648@43,1073741824@45,536870912@47,268435456@49}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@24,17179869184@35,8589934592@37,34359738368@39,4294967296@41,2147483648@43,1073741824@45,536870912@47,268435456@49}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@214,4096@217,16384@220,2048@221,1024@222,65536@223,512@224,256@225,128@226}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@179,4194304@181,8388608@182,2097152@184,1048576@185,524288@186,262144@187,131072@188,65536@189}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@157,2097152@158,1048576@159,524288@160,262144@161,131072@162,65536@163,32768@164,16384@165}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@157,4292870143@158,4293918719@159,4294443007@160,4294705151@161,4294836223@162,4294901759@163,4294934527@164,4294950911@165}
  flag {!<=-1,8388608@157,2097152@158,1048576@159,524288@160,262144@161,131072@162,65536@163,32768@164,16384@165}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 46
  398U always 398
Line 47
  562U always 562
Line 48
  590U always 590
Line 50
  ( always {!<=-1,!>=2}
Line 53
  return always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 56
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
Line 65
  return always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 68
  ( always {!<=-1,!>=2}
Line 71
  return always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  ( always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
Line 76
  tok possible symbolic=(tok->astOperand1())@39
Line 77
  return always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  ( always !0
  >= always {!<=-1,!>=2}
  :: always 5
  CONTAINER always 5
  || always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
Line 80
  ( always {!<=-1,!>=2}
Line 84
  ! always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 85
  return always {!<=-1,!>=2}
  false always 0
Line 87
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 91
  return always {!<=-1,!>=2}
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "%name% .|::" always "%name% .|::"
Line 96
  2 always 2
Line 97
  ( always {!<=-1,!>=2}
  "%name% .|::" always "%name% .|::"
Line 98
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 99
  return always {!<=-1,!>=2}
  false always 0
Line 101
  return always {!<=-1,!>=2}
  true always 1
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ! always {!<=-1,!>=2}
Line 107
  return always {!<=-1,!>=2}
  false always 0
Line 110
  tok always !0
  ( always {!<=-1,!>=2}
  "&" always "&"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
  "[" always "["
Line 111
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
Line 114
  tok always !0
  ( possible size=1
  == always {!<=-1,!>=2}
  "+" always "+"
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
Line 118
  == always {!<=-1,!>=2}
  "-" always "-"
Line 119
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 120
  && always {!<=-1,!>=2}
Line 121
  ( always !0
  && always {!<=-1,!>=2}
Line 122
  ( always !0
  ( always !0
  ( always {!<=-1,!>=2}
Line 125
  ! always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
Line 126
  return always {!<=-1,!>=2}
  false always 0
Line 129
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 130
  return always {!<=-1,!>=2}
  true always 1
Line 133
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 134
  = {lifetime[Iterator]=(tok->values()),start=0}
  ( {lifetime[Iterator]=(tok->values()),start=0}
  it possible {lifetime[Iterator]=(tok->values()),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(tok->values()),end=0}
Line 135
  it {lifetime[Iterator]=(tok->values()),!symbolic=(tok->values().end()),!end=0}
Line 136
  val always symbolic=(*it)
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  val always symbolic=(*it)
Line 137
  return always {!<=-1,!>=2}
  true always 1
Line 141
  return always {!<=-1,!>=2}
  false always 0
Line 145
  ( always {!<=-1,!>=2}
Line 148
  var always symbolic=(vartok->variable())
  == always {!<=-1,!>=2}
  nullptr always 0
Line 149
  return always {!<=-1,!>=2}
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "& %name% [" always "& %name% ["
  && always {!<=-1,!>=2}
  var {symbolic=(vartok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "%name% . %var% [" always "%name% . %var% ["
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 157
  next always symbolic=(vartok->next())
Line 158
  return always {!<=-1,!>=2}
  var2 always symbolic=(next->next()->variable())
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var2 {symbolic=(next->next()->variable()),!0}
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  next always symbolic=(vartok->next())
  != always {!<=-1,!>=2}
  "." always "."
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  next always symbolic=(vartok->next())
  2 always 2
  != always {!<=-1,!>=2}
  "." always "."
Line 164
  ( always {!<=-1,!>=2}
Line 166
  ! always {!<=-1,!>=2}
Line 167
  return always {!<=-1,!>=2}
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  expr always !0
  "+|-" always "+|-"
Line 169
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr always !0
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr always !0
Line 170
  expr always !0
  ( always {!<=-1,!>=2}
Line 171
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr always !0
  expr always !0
  ( always !0
  : always 1
  expr always !0
Line 172
  ( always {!<=-1,!>=2}
  "&" always "&"
Line 174
  deref always {!<=-1,!>=2}
  deref always {!<=-1,!>=2}
  = always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  op possible {symbolic=(expr->astOperand1()),0}
  ".|[" always ".|["
Line 176
  == always {!<=-1,!>=2}
  "->" always "->"
Line 177
  return always {!<=-1,!>=2}
  false always 0
Line 178
  == always {!<=-1,!>=2}
  "[" always "["
Line 179
  deref always {!<=-1,!>=2}
  = always 1
  true always 1
Line 182
  return always {!<=-1,!>=2}
  op possible symbolic=(expr->astOperand1())
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  op always !0
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  deref always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  op always !0
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  false always 0
Line 187
  ( always {!<=-1,!>=2}
Line 189
  ! always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  false always 0
Line 192
  = always !0
  start always !0
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
Line 193
  == always {!<=-1,!>=2}
Line 194
  return always {!<=-1,!>=2}
  true always 1
Line 196
  scopeType {symbolic=(tok->scope()->type),10,9}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  scopeType {symbolic=(tok->scope()->type),9,!8}
  == {!<=-1,!>=2,0}
  :: always 10
  eDo always 10
  || always {!<=-1,!>=2}
  scopeType {symbolic=(tok->scope()->type),!8,!10}
  == always {!<=-1,!>=2}
  :: always 9
  eWhile always 9
Line 197
  return always {!<=-1,!>=2}
  true always 1
Line 198
  ( always {!<=-1,!>=2}
  "asm (" always "asm ("
Line 199
  return always {!<=-1,!>=2}
  true always 1
Line 201
  return always {!<=-1,!>=2}
  false always 0
Line 206
  printStyle always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 207
  printWarning always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 208
  ! {!<=-1,!>=2,1}
  printStyle {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  printWarning always {!<=-1,!>=2}
Line 212
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 213
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
Line 217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "++|--" always "++|--"
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%var%" always "%var%"
Line 220
  ( always {!<=-1,!>=2}
  vartok always symbolic=(tok->astOperand1())
  && always {!<=-1,!>=2}
Line 221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  vartok always symbolic=(tok->astOperand1())
  "= %varid% ;" always "= %varid% ;"
  vartok always symbolic=(tok->astOperand1())
  && always {!<=-1,!>=2}
Line 222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  vartok always symbolic=(tok->astOperand1())
  ";" always ";"
  vartok always symbolic=(tok->astOperand1())
  && always {!<=-1,!>=2}
Line 223
  ! always {!<=-1,!>=2}
  vartok always symbolic=(tok->astOperand1())
  "goto" always "goto"
Line 224
  vartok always symbolic=(tok->astOperand1())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  printWarning always {!<=-1,!>=2}
Line 225
  vartok always symbolic=(tok->astOperand1())
Line 226
  printStyle always {!<=-1,!>=2}
Line 227
  vartok always symbolic=(tok->astOperand1())
Line 235
  printInconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 237
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 238
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
Line 241
  = always !0
  lambdaEndToken always !0
Line 245
  ( always {!<=-1,!>=2}
  "[;{}] %var% = & %var%" always "[;{}] %var% = & %var%"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  4 always 4
Line 246
  ( always {!<=-1,!>=2}
  4 always 4
Line 247
  ( always {!<=-1,!>=2}
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "[;{}] * %var% =" always "[;{}] * %var% ="
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  2 always 2
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  3 always 3
Line 249
  ( always {!<=-1,!>=2}
  false always 0
Line 250
  ( always {!<=-1,!>=2}
  "[;{}] %var% . %var% =" always "[;{}] %var% . %var% ="
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  4 always 4
Line 251
  ( always {!<=-1,!>=2}
  false always 0
Line 252
  ( always {!<=-1,!>=2}
  "[;{}] %var% . %var% = %var% ;" always "[;{}] %var% . %var% = %var% ;"
Line 254
  printInconclusive always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 255
  ( always {!<=-1,!>=2}
  5 always 5
Line 256
  ( always {!<=-1,!>=2}
  true always 1
Line 258
  5 always 5
Line 259
  ( always {!<=-1,!>=2}
  "[;{}] * %var% = %var% ;" always "[;{}] * %var% = %var% ;"
Line 260
  2 always 2
Line 261
  && always {!<=-1,!>=2}
  var1 always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  var1 always !0
  -3 always -3
  "%type% * *" always "%type% * *"
Line 262
  ( always {!<=-1,!>=2}
  4 always 4
Line 263
  ( always {!<=-1,!>=2}
  false always 0
Line 265
  4 always 4
Line 266
  ( always {!<=-1,!>=2}
  "[;{}] %var% [" always "[;{}] %var% ["
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  2 always 2
  "] =" always "] ="
  && always {!<=-1,!>=2}
Line 267
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  2 always 2
Line 268
  false always 0
Line 271
  ( always {!<=-1,!>=2}
  "%name% ( %var%|%str% ) ;" always "%name% ( %var%|%str% ) ;"
  && always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "delete [| ]| (| %var%|%str% !![" always "delete [| ]| (| %var%|%str% !!["
Line 273
  "%var%|%str%" always "%var%|%str%"
Line 274
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  eString always 6
Line 275
  nullptr always 0
Line 276
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 280
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  eString always 6
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 281
  & always !0
Line 286
  ( always {!<=-1,!>=2}
  "%name% ( & %var% ) ;" always "%name% ( & %var% ) ;"
  && always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 287
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "delete [| ]| (| & %var% !![" always "delete [| ]| (| & %var% !!["
Line 288
  "%var%" always "%var%"
Line 289
  ( always {!<=-1,!>=2}
Line 290
  nullptr always 0
Line 296
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 298
  ! always {!<=-1,!>=2}
Line 299
  "=" always "="
Line 300
  = possible symbolic=(Token::findsimplematch(expr,"=")->next())
  startToken possible symbolic=(Token::findsimplematch(expr,"=")->next())
  tok possible symbolic=(Token::findsimplematch(expr,"=")->next())
Line 301
  == always {!<=-1,!>=2}
  "}" always "}"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 302
  inconclusive always {!<=-1,!>=2}
Line 304
  ( always {!<=-1,!>=2}
  "return|throw|break|continue" always "return|throw|break|continue"
Line 305
  inconclusive always {!<=-1,!>=2}
Line 306
  return always {!<=-1,!>=2}
  true always 1
Line 308
  ( always {!<=-1,!>=2}
  "=" always "="
Line 310
  ( always {!<=-1,!>=2}
  lhs possible symbolic=(tok)
  "%name%|.|*" always "%name%|.|*"
Line 313
  e possible symbolic=(expr)
  != always {!<=-1,!>=2}
  "=" always "="
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  e possible symbolic=(expr)
Line 317
  == always {!<=-1,!>=2}
  "=" always "="
Line 318
  return always {!<=-1,!>=2}
  false always 0
Line 321
  ( always {!<=-1,!>=2}
  "if (" always "if ("
Line 322
  1 always 1
Line 323
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 325
  ( always {!<=-1,!>=2}
  "} else {" always "} else {"
Line 326
  2 always 2
Line 328
  return always {!<=-1,!>=2}
  false always 0
Line 335
  tok possible 0@165
  :: always 1
  error always 1
  "returnAddressOfAutoVariable" always "returnAddressOfAutoVariable"
  "Address of an auto-variable returned." always "Address of an auto-variable returned."
  :: always 0
  normal always 0
Line 340
  :: always 1
  error always 1
  "returnAddressOfAutoVariable" always "returnAddressOfAutoVariable"
  "Address of auto-variable '" always "Address of auto-variable '"
  "' returned" always "' returned"
  :: always 0
  normal always 0
Line 345
  tok possible 0@166
  :: always 1
  error always 1
  "returnLocalVariable" always "returnLocalVariable"
  "Pointer to local array variable returned." always "Pointer to local array variable returned."
  :: always 0
  normal always 0
Line 348
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 350
  ! {!<=-1,!>=2,1@11}
  inconclusive {!<=-1,!>=2,0@11}
Line 351
  tok possible 0@164
  :: always 1
  error always 1
  "autoVariables" always "autoVariables"
Line 352
  "Address of local auto-variable assigned to a function parameter.\nDangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends." always "Address of local auto-variable assigned to a function parameter.\nDangerous assignment - the function parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. So the pointer to a local variable is invalid after the function ends."
Line 356
  :: always 0
  normal always 0
Line 358
  :: always 1
  error always 1
  "autoVariables" always "autoVariables"
Line 359
  "Address of local auto-variable assigned to a function parameter.\nFunction parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. The address is invalid after the function ends and it might 'leak' from the function through the parameter." always "Address of local auto-variable assigned to a function parameter.\nFunction parameter is assigned the address of a local auto-variable. Local auto-variables are reserved from the stack which is freed when the function ends. The address is invalid after the function ends and it might 'leak' from the function through the parameter."
Line 371
  tok possible 0@172
  :: always 1
  error always 1
  "returnAddressOfFunctionParameter" always "returnAddressOfFunctionParameter"
Line 372
  "$symbol:" always "$symbol:"
  varname possible "parameter"@172
  "\nAddress of function parameter '$symbol' returned.\nAddress of the function parameter '$symbol' becomes invalid after the function exits because function parameters are stored on the stack which is freed when the function exits. Thus the returned value is invalid." always "\nAddress of function parameter '$symbol' returned.\nAddress of the function parameter '$symbol' becomes invalid after the function exits because function parameters are stored on the stack which is freed when the function exits. Thus the returned value is invalid."
Line 376
  :: always 0
  normal always 0
Line 381
  tok possible {symbolic=(tok->astOperand1())@50,0@173}
Line 382
  :: always 3
  style always 3
Line 383
  "uselessAssignmentArg" always "uselessAssignmentArg"
Line 384
  "Assignment of function parameter has no effect outside the function." always "Assignment of function parameter has no effect outside the function."
  :: always 0
  normal always 0
Line 389
  tok possible {symbolic=(tok->astOperand1())@49,0@174}
Line 390
  :: always 2
  warning always 2
Line 391
  "uselessAssignmentPtrArg" always "uselessAssignmentPtrArg"
Line 392
  "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?" always "Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?"
  :: always 0
  normal always 0
Line 397
  ( always {!<=-1,!>=2}
Line 399
  ! always {!<=-1,!>=2}
Line 400
  return always {!<=-1,!>=2}
  false always 0
Line 401
  ! always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  false always 0
Line 403
  tok always !0
Line 404
  var {symbolic=(tok->variable()),0}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  false always 0
Line 406
  ( possible 0
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
  scope always !0
Line 407
  return always {!<=-1,!>=2}
  true always 1
Line 408
  ! always {!<=-1,!>=2}
Line 409
  return always {!<=-1,!>=2}
  false always 0
Line 410
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 412
  ! {!<=-1,!>=2,1}
  tokScope {symbolic=(tok->scope()),0}
Line 413
  return always {!<=-1,!>=2}
  false always 0
Line 414
  tokScope {symbolic=(tok->scope()),!0}
Line 415
  && always {!<=-1,!>=2}
  argScope always !0
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  true always 1
Line 419
  return always {!<=-1,!>=2}
  false always 0
Line 422
  ( always {!<=-1,!>=2}
Line 424
  ! always {!<=-1,!>=2}
Line 425
  return always {!<=-1,!>=2}
  false always 0
Line 426
  ! always {!<=-1,!>=2}
Line 427
  return always {!<=-1,!>=2}
  false always 0
Line 428
  tok always !0
Line 429
  var always symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 430
  return always {!<=-1,!>=2}
  false always 0
Line 431
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  scope always !0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  . always !symbolic=(scope->bodyEnd)
  scope always !0
  . always !symbolic=(tok->scope()->bodyEnd)
Line 432
  return always {!<=-1,!>=2}
  true always 1
Line 433
  return always {!<=-1,!>=2}
  false always 0
Line 438
  ! always {!<=-1,!>=2}
Line 439
  0 always 0
Line 440
  tok always !0
Line 441
  tok always !0
  ( always !0
Line 442
  = always 0
  0 always 0
Line 443
  tok always !0
Line 444
  != always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
  tok always !0
  "*" always "*"
Line 450
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  tok possible symbolic=(lt.token)@65
  library possible {lifetime[Address]=(mSettings->library)@41,lifetime[Address]=(mSettings->library)@65,lifetime[Address]=(mSettings->library)@89,lifetime[Address]=(mSettings->library)@99}
Line 453
  return always {!<=-1,!>=2}
  false always 0
Line 454
  expr possible 0@41
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr always !0
Line 456
  return always {!<=-1,!>=2}
  false always 0
Line 459
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent always symbolic=(tok->astParent())
  ":" always ":"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent always symbolic=(tok->astParent())
  "(" always "("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent always symbolic=(tok->astParent())
  "for (" always "for ("
Line 460
  parent always symbolic=(tok->astParent())
Line 461
  ( always {!<=-1,!>=2}
  braces always symbolic=(parent->astParent()->link()->next())
  expr always !0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr always !0
  braces always symbolic=(parent->astParent()->link()->next())
Line 462
  return always {!<=-1,!>=2}
  false always 0
Line 465
  return always {!<=-1,!>=2}
  true always 1
Line 468
  ( always {!<=-1,!>=2}
Line 470
  ! always {!<=-1,!>=2}
Line 471
  return always {!<=-1,!>=2}
  false always 0
Line 472
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  false always 0
Line 474
  ! always {!<=-1,!>=2}
  var always !0
Line 475
  return always {!<=-1,!>=2}
  false always 0
Line 476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  "=" always "="
Line 477
  return always {!<=-1,!>=2}
  false always 0
Line 478
  ( always !0
Line 479
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  true always 1
  vartok always symbolic=(var->declEndToken()->astOperand2())
  nullptr always 0
  false always 0
Line 482
  ( always {!<=-1,!>=2}
Line 484
  ! always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  false always 0
Line 486
  tokvalue always !0
Line 487
  ! always {!<=-1,!>=2}
  var always symbolic=(tokvalue->variable())
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  false always 0
Line 490
  ! always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  false always 0
Line 493
  parent possible symbolic=(tokvalue->astParent())
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent {symbolic=(tokvalue->astParent()),!0}
  "%name% (" always "%name% ("
Line 494
  parent always !0
Line 496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent possible {symbolic=(tokvalue->astParent()),0}
  "(" always "("
Line 497
  return always {!<=-1,!>=2}
  false always 0
Line 498
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 503
  ! always {!<=-1,!>=2}
Line 504
  nullptr always 0
Line 505
  ( always {!<=-1,!>=2}
  tok always !0
  "." always "."
Line 506
  tok always !0
Line 507
  tok always !0
Line 510
  ( always {!<=-1,!>=2}
Line 512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "=" always "="
Line 513
  return always {!<=-1,!>=2}
  false always 0
Line 514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  false always 0
Line 517
  ! always {!<=-1,!>=2}
Line 518
  return always {!<=-1,!>=2}
  false always 0
Line 519
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 524
  printInconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 525
  ! always {!<=-1,!>=2}
Line 527
  start always !0
Line 528
  ! always {!<=-1,!>=2}
  scope always symbolic=(start->scope())
Line 531
  scope {symbolic=(start->scope()),!0}
  != always {!<=-1,!>=2}
  start always !0
Line 533
  returnRef always {!<=-1,!>=2}
  returnRef always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  scope always !0
Line 534
  = always symbolic=(scope->bodyStart)
  start always symbolic=(scope->bodyStart)
  tok inconclusive symbolic=(scope->bodyStart)
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
Line 536
  returnRef always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return" always "return"
Line 537
  true always 1
Line 538
  ! always {!<=-1,!>=2}
  printInconclusive always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 541
  var always symbolic=(lt.token->variable())
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(lt.token->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(lt.token->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always symbolic=(lt.token->variable())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always symbolic=(lt.token->variable())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 542
  ( always {!<=-1,!>=2}
  var always symbolic=(lt.token->variable())
Line 543
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 545
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  nullptr always 0
  & {lifetime[Address]=(mSettings->library),!0}
Line 546
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 551
  ( always {!<=-1,!>=2}
  tok possible symbolic=(tok->variable()->nameToken())
  "&|&& %var% =" always "&|&& %var% ="
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 552
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 553
  tok always symbolic=(tok->variable()->nameToken())
  ( always !0
  == always {!<=-1,!>=2}
  tok always symbolic=(tok->variable()->nameToken())
  && always {!<=-1,!>=2}
  tok always symbolic=(tok->variable()->nameToken())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 554
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 556
  tok always symbolic=(tok->variable()->nameToken())
  errorPath always size=0
Line 557
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  var always !0
  tok always symbolic=(tok->variable()->nameToken())
Line 558
  tok always symbolic=(tok->variable()->nameToken())
  var always !0
Line 562
  ( possible 0
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 564
  ! always {!<=-1,!>=2}
  printInconclusive always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 567
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tokvalue always symbolic=(lt.token)
  & {lifetime[Address]=(mSettings->library),!0}
Line 568
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 573
  escape always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok possible symbolic=(tok->variable()->nameToken())
  ( possible symbolic=(tok->next())
  "return|throw" always "return|throw"
Line 575
  tok possible symbolic=(tok->variable()->nameToken())
Line 576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 578
  ! always {!<=-1,!>=2}
  printInconclusive always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(mSettings->library),!0}
Line 581
  ! always {!<=-1,!>=2}
Line 583
  escape {!<=-1,!>=2,0}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 585
  ( always {!<=-1,!>=2}
Line 586
  escape always {!<=-1,!>=2}
Line 587
  < always {!<=-1,!>=2}
Line 589
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 591
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 592
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 594
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
Line 595
  ( always {!<=-1,!>=2}
  ( always !0
  || always {!<=-1,!>=2}
Line 596
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  nullptr always 0
  & {lifetime[Address]=(mSettings->library),!0}
Line 597
  & always !0
Line 600
  tokvalue always symbolic=(lt.token)
  ( possible 0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tokvalue always symbolic=(lt.token)
  ( always !0
Line 601
  & always !0
Line 603
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 604
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(mSettings->library),!0}
Line 605
  & always !0
Line 609
  tokvalue possible symbolic=(lt.token)
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  || always {!<=-1,!>=2}
Line 610
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 611
  = always 0
  nullptr always 0
Line 613
  ( always {!<=-1,!>=2}
  tok always symbolic=(tok2)
  "=" always "="
Line 614
  ( always {!<=-1,!>=2}
  tok always symbolic=(tok2)
Line 615
  tok always symbolic=(tok2)
Line 616
  tok always symbolic=(tok2)
Line 618
  tok always symbolic=(tok2)
  && always {!<=-1,!>=2}
  tok always symbolic=(tok2)
  ( always !0
  == always {!<=-1,!>=2}
  tok always symbolic=(tok2)
Line 619
  = always !0
  tok always symbolic=(tok2)
  ( always !0
Line 621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok possible symbolic=(tok2)
Line 624
  ! always {!<=-1,!>=2}
Line 626
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 627
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 630
  ( always {!<=-1,!>=2}
Line 632
  ( always {!<=-1,!>=2}
Line 633
  & always !0
Line 641
  lambdaEndToken always !0
  lambdaEndToken always !0
Line 642
  = always !0
  lambdaEndToken always !0
Line 644
  tok possible symbolic=(lambdaEndToken)
  == always {!<=-1,!>=2}
  "{" always "{"
  && always {!<=-1,!>=2}
Line 646
  ( always !0
  . possible {2,3}
  == {!<=-1,!>=2,0}
  :: always 1
  eClass always 1
  || {!<=-1,!>=2,0}
Line 647
  ( always !0
  . {3,!1}
  == {!<=-1,!>=2,0}
  :: always 2
  eStruct always 2
  || always {!<=-1,!>=2}
Line 648
  ( always !0
  . always {!1,!2}
  == always {!<=-1,!>=2}
  :: always 3
  eUnion always 3
Line 649
  ( always !0
Line 662
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 663
  ! always {!<=-1,!>=2}
Line 671
  inconclusive always {!<=-1,!>=2}
  = {0,!<=-1,!>=2}
  val possible 0@175
  ? {0,!<=-1,!>=2}
  val always !0
  ( always {!<=-1,!>=2}
  : always 0
  false always 0
Line 672
  val possible 0@175
  val always !0
  ( always size=0
Line 673
  "Returning " always "Returning "
  tok possible 0@175
  val possible 0@175
  errorPath always symbolic=(val?val->errorPath:std::list<std::pair<const Token*,std::string>>())
Line 674
  tok possible 0@175
  "" always ""
Line 675
  :: always 1
  error always 1
  "returnDanglingLifetime" always "returnDanglingLifetime"
  " that will be invalid when returning." always " that will be invalid when returning."
  inconclusive {symbolic=(val?val->isInconclusive():false),!<=-1,!>=2}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 680
  inconclusive always {!<=-1,!>=2}
  = {0,!<=-1,!>=2}
  val possible 0@176
  ? {0,!<=-1,!>=2}
  val always !0
  ( always {!<=-1,!>=2}
  : always 0
  false always 0
Line 681
  val possible 0@176
  val always !0
  ( always size=0
Line 682
  "Using " always "Using "
  tok possible 0@176
  val possible 0@176
  errorPath always symbolic=(val?val->errorPath:std::list<std::pair<const Token*,std::string>>())
Line 683
  tok possible 0@176
  "" always ""
Line 684
  :: always 1
  error always 1
  "invalidLifetime" always "invalidLifetime"
  " that is out of scope." always " that is out of scope."
  inconclusive {symbolic=(val?val->isInconclusive():false),!<=-1,!>=2}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 689
  inconclusive always {!<=-1,!>=2}
  = {0,!<=-1,!>=2}
  val possible 0@178
  ? {0,!<=-1,!>=2}
  val always !0
  ( always {!<=-1,!>=2}
  : always 0
  false always 0
Line 690
  val possible 0@178
  val always !0
  ( always size=0
Line 691
  "Using " always "Using "
  tok possible 0@178
  val possible 0@178
  errorPath always symbolic=(val?val->errorPath:std::list<std::pair<const Token*,std::string>>())
Line 692
  tempTok possible 0@178
  "Temporary created here." always "Temporary created here."
Line 693
  tok inconclusive 0@178
  "" always ""
Line 695
  :: always 1
  error always 1
Line 696
  "danglingTemporaryLifetime" always "danglingTemporaryLifetime"
Line 697
  " that is a temporary." always " that is a temporary."
Line 699
  inconclusive {symbolic=(val?val->isInconclusive():false),!<=-1,!>=2}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 704
  inconclusive always {!<=-1,!>=2}
  = {0,!<=-1,!>=2}
  val possible 0@177
  ? {0,!<=-1,!>=2}
  val always !0
  ( always {!<=-1,!>=2}
  : always 0
  false always 0
Line 705
  val possible 0@177
  val always !0
  ( always size=0
Line 706
  = possible "x"
  tok possible 0@177
  ? possible "x"
  tok always !0
  : always "x"
  "x" always "x"
Line 707
  "Non-local variable '" always "Non-local variable '"
  tokName always symbolic=(tok?tok->expressionString():"x")
  "' will use " always "' will use "
  tok possible 0@177
  val possible 0@177
  errorPath always symbolic=(val?val->errorPath:std::list<std::pair<const Token*,std::string>>())
Line 708
  tok possible 0@177
  "" always ""
Line 709
  :: always 1
  error always 1
  "danglingLifetime" always "danglingLifetime"
  "." always "."
  inconclusive {symbolic=(val?val->isInconclusive():false),!<=-1,!>=2}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 712
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 714
  errorPath possible size=0@170
  tok possible 0@170
  "" always ""
Line 716
  :: always 1
  error always 1
  "danglingTempReference" always "danglingTempReference"
  "Using reference to dangling temporary." always "Using reference to dangling temporary."
  inconclusive {!<=-1,!>=2,0@170}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 719
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 721
  errorPath possible size=0@167
  tok possible 0@167
  "" always ""
Line 723
  :: always 1
  error always 1
  "returnReference" always "returnReference"
  "Reference to local variable returned." always "Reference to local variable returned."
  inconclusive {!<=-1,!>=2,0@167}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 728
  = possible "x"
  tok possible {symbolic=(tok->variable()->nameToken())@59,0@168}
  ? possible "x"
  tok always !0
  : always "x"
  "x" always "x"
Line 729
  = possible "y"
  var possible 0@168
  ? possible "y"
  var always !0
  : always "y"
  "y" always "y"
Line 730
  "Non-local reference variable '" always "Non-local reference variable '"
  tokName always symbolic=(tok?tok->str():"x")
  "' to local variable '" always "' to local variable '"
  varName always symbolic=(var?var->name():"y")
  "'" always "'"
Line 731
  errorPath possible size=0@168
  tok possible 0@168
  "" always ""
Line 732
  :: always 1
  error always 1
  "danglingReference" always "danglingReference"
  msg always symbolic=("Non-local reference variable '"+tokName+"' to local variable '"+varName+"'")
  :: always 0
  normal always 0
Line 735
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 737
  errorPath possible size=0@169
  tok possible 0@169
  "" always ""
Line 739
  :: always 1
  error always 1
  "returnTempReference" always "returnTempReference"
  "Reference to temporary returned." always "Reference to temporary returned."
  inconclusive {!<=-1,!>=2,0@169}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 744
  = possible 0
  val possible 0
  ? possible 0
  val always !0
  : possible 0
  tok possible 0
  ? possible 0
  tok always !0
  : always 0
  nullptr always 0
Line 746
  = always "an auto-variable"
  "an auto-variable" always "an auto-variable"
Line 747
  tok possible 0@171
  && always {!<=-1,!>=2}
  tok always !0
  == always {!<=-1,!>=2}
  :: always 6
  eString always 6
Line 748
  = always "a string literal"
  "a string literal" always "a string literal"
Line 749
  val possible 0@171
  && always {!<=-1,!>=2}
  val always !0
  == always {!<=-1,!>=2}
  :: always 6
  eString always 6
Line 750
  = always "a pointer pointing to a string literal"
  "a pointer pointing to a string literal" always "a pointer pointing to a string literal"
Line 751
  var always symbolic=(val?val->tokvalue->variable():(tok?tok->variable():nullptr))
Line 752
  var {symbolic=(val?val->tokvalue->variable():(tok?tok->variable():nullptr)),!0}
  ( always {!<=-1,!>=2}
Line 753
  = always "a global variable"
  "a global variable" always "a global variable"
Line 754
  var {symbolic=(val?val->tokvalue->variable():(tok?tok->variable():nullptr)),!0}
  ( always {!<=-1,!>=2}
Line 755
  = always "a static variable"
  "a static variable" always "a static variable"
Line 758
  val possible 0
Line 759
  " (" always " ("
  val always !0
  ")" always ")"
Line 761
  tok possible 0@171
  val possible 0
  "Deallocating memory that was not dynamically allocated" always "Deallocating memory that was not dynamically allocated"
Line 762
  :: always 1
  error always 1
Line 763
  "autovarInvalidDeallocation" always "autovarInvalidDeallocation"
Line 764
  "Deallocation of " always "Deallocation of "
  " results in undefined behaviour.\nThe deallocation of " always " results in undefined behaviour.\nThe deallocation of "
Line 765
  " results in undefined behaviour. You should only free memory that has been allocated dynamically." always " results in undefined behaviour. You should only free memory that has been allocated dynamically."
Line 766
  :: always 0
  normal always 0
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,3@31,2@32}
  flag possible {3@31,2@32}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
