

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744219 !@expr1073744220 mTokenizer@var28 ) {
69: instances (@expr1073744221 ) .@expr1073744222 remove (@expr1073744223 this@expr1073744224 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744225 string (@expr1073744226 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744227 void ) tokenizer@var21 ;
108: (@expr1073744228 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744229 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744230 void ) ctu@var24 ;
120: (@expr1073744231 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744232 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744233 0U ) , Certainty ::@expr1073744234 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744235 list < const Token *@expr1073744236 > callstack@var41 (@expr1073744237 1 , tok@var35 ) ;
141: reportError (@expr1073744238 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744239 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744240 0U ) , Certainty ::@expr1073744241 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/checkbool.h

1:
|
29:
30: class ErrorLogger ;
31: class Settings ;
32: class Token ;
33: class Tokenizer ;
34:
|
40:
41: class CheckBool : public Check {
42: public:
43:
44: CheckBool ( ) : Check ( myName ( ) ) { }
45:
46:
47: CheckBool ( const Tokenizer * tokenizer@var64 , const Settings * settings@var65 , ErrorLogger * errorLogger@var66 )
48: : Check ( myName ( ) , tokenizer@var64 , settings@var65 , errorLogger@var66 ) { }
49:
50:
51: void runChecks ( const Tokenizer * tokenizer@var67 , const Settings * settings@var68 , ErrorLogger * errorLogger@var69 ) override {
52: CheckBool checkBool@var70 (@expr1073744242 tokenizer@var67 , settings@var68 , errorLogger@var69 ) ;
53:
54:
55: checkBool@var70 .@expr1073744243 checkComparisonOfBoolExpressionWithInt (@expr1073744244 ) ;
56: checkBool@var70 .@expr1073744245 checkComparisonOfBoolWithInt (@expr1073744246 ) ;
57: checkBool@var70 .@expr1073744247 checkAssignBoolToFloat (@expr1073744248 ) ;
58: checkBool@var70 .@expr1073744249 pointerArithBool (@expr1073744250 ) ;
59: checkBool@var70 .@expr1073744251 returnValueOfFunctionReturningBool (@expr1073744252 ) ;
60: checkBool@var70 .@expr1073744253 checkComparisonOfFuncReturningBool (@expr1073744254 ) ;
61: checkBool@var70 .@expr1073744255 checkComparisonOfBoolWithBool (@expr1073744256 ) ;
62: checkBool@var70 .@expr1073744257 checkIncrementBoolean (@expr1073744258 ) ;
63: checkBool@var70 .@expr1073744259 checkAssignBoolToPointer (@expr1073744260 ) ;
64: checkBool@var70 .@expr1073744261 checkBitwiseOnBoolean (@expr1073744262 ) ;
65: }
66:
67:
68: void checkComparisonOfFuncReturningBool ( ) ;
69:
70:
71: void checkComparisonOfBoolWithBool ( ) ;
72:
73:
74: void checkIncrementBoolean ( ) ;
75:
76:
77: void checkComparisonOfBoolWithInt ( ) ;
78:
79:
80: void checkAssignBoolToPointer ( ) ;
81:
82:
83: void checkAssignBoolToFloat ( ) ;
84:
85:
86: void checkBitwiseOnBoolean ( ) ;
87:
88:
89: void checkComparisonOfBoolExpressionWithInt ( ) ;
90:
91:
92: void pointerArithBool ( ) ;
93: void pointerArithBoolCond ( const Token * tok@var71 ) ;
94:
95:
96: void returnValueOfFunctionReturningBool ( ) ;
97:
98: private:
99:
100: void comparisonOfFuncReturningBoolError ( const Token * tok@var72 , const std :: string & expression@var73 ) ;
101: void comparisonOfTwoFuncsReturningBoolError ( const Token * tok@var74 , const std :: string & expression1@var75 , const std :: string & expression2@var76 ) ;
102: void comparisonOfBoolWithBoolError ( const Token * tok@var77 , const std :: string & expression@var78 ) ;
103: void incrementBooleanError ( const Token * tok@var79 ) ;
104: void comparisonOfBoolWithInvalidComparator ( const Token * tok@var80 , const std :: string & expression@var81 ) ;
105: void assignBoolToPointerError ( const Token * tok@var82 ) ;
106: void assignBoolToFloatError ( const Token * tok@var83 ) ;
107: void bitwiseOnBooleanError ( const Token * tok@var84 , const std :: string & expression@var85 , const std :: string & op@var86 ) ;
108: void comparisonOfBoolExpressionWithIntError ( const Token * tok@var87 , bool not0or1@var88 ) ;
109: void pointerArithBoolError ( const Token * tok@var89 ) ;
110: void returnValueBoolError ( const Token * tok@var90 ) ;
111:
112: void getErrorMessages ( ErrorLogger * errorLogger@var91 , const Settings * settings@var92 ) const override {
113: CheckBool c@var93 (@expr1073744263 nullptr , settings@var92 , errorLogger@var91 ) ;
114:
115: c@var93 .@expr1073744264 assignBoolToPointerError (@expr1073744265 nullptr ) ;
116: c@var93 .@expr1073744266 assignBoolToFloatError (@expr1073744267 nullptr ) ;
117: c@var93 .@expr1073744268 comparisonOfFuncReturningBoolError (@expr1073744269 nullptr , "func_name" ) ;
118: c@var93 .@expr1073744270 comparisonOfTwoFuncsReturningBoolError (@expr1073744271 nullptr , "func_name1" , "func_name2" ) ;
119: c@var93 .@expr1073744272 comparisonOfBoolWithBoolError (@expr1073744273 nullptr , "var_name" ) ;
120: c@var93 .@expr1073744274 incrementBooleanError (@expr1073744275 nullptr ) ;
121: c@var93 .@expr1073744276 bitwiseOnBooleanError (@expr1073744277 nullptr , "expression" , "&&" ) ;
122: c@var93 .@expr1073744278 comparisonOfBoolExpressionWithIntError (@expr1073744279 nullptr , true ) ;
123: c@var93 .@expr1073744280 pointerArithBoolError (@expr1073744281 nullptr ) ;
124: c@var93 .@expr1073744282 comparisonOfBoolWithInvalidComparator (@expr1073744283 nullptr , "expression" ) ;
125: c@var93 .@expr1073744284 returnValueBoolError (@expr1073744285 nullptr ) ;
126: }
127:
128: static std :: string myName ( ) {
129: return "Boolean" ;
130: }
131:
132: std :: string classInfo ( ) const override {
133: return "Boolean type checks\n- using increment on boolean\n- comparison of a boolean expression with an integer other than 0 or 1\n- comparison of a function returning boolean value using relational operator\n- comparison of a boolean value with boolean value using relational operator\n- using bool in bitwise expression\n- pointer addition in condition (either dereference is forgot or pointer overflow is required to make the condition false)\n- Assigning bool value to pointer or float\n- Returning an integer other than 0 or 1 from a function with boolean return value\n"
134:
|
140:
141: ;
142: }
143: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var94 ;
42: double mDoubleValue@var95 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var96 ;
44: bool mIsUnsigned@var97 ;
45:
46: void promote ( const value & v@var98 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var99 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var96 !=@expr1073744286 Type ::@expr1073744287 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var96 ==@expr1073744288 Type ::@expr1073744289 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744290 ) ?@expr1073744291 mDoubleValue@var95 :@expr1073744292 (@expr1073744293 double ) mIntValue@var94 ;
60: }
61:
62: static value calc ( char op@var100 , const value & v1@var101 , const value & v2@var102 ) ;
63: int compare ( const value & v@var103 ) const ;
64: value add ( int v@var104 ) const ;
65: value shiftLeft ( const value & v@var105 ) const ;
66: value shiftRight ( const value & v@var106 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var107 ;
72:
73: static long long toLongNumber ( const std :: string & str@var108 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var109 ) ;
75:
76: template < class T > static std :: string toString ( T value@var110 ) {
77: std ::@expr1073744294 ostringstream result@var111 ;
78: result@var111 <<@expr1073744295 value@var110 ;
79: return result@var111 .@expr1073744296 str (@expr1073744297 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var112 ) ;
82:
83: static bool isInt ( const std :: string & str@var113 ) ;
84: static bool isFloat ( const std :: string & str@var114 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var115 ) ;
86: static bool isNegative ( const std :: string & str@var116 ) ;
87: static bool isPositive ( const std :: string & str@var117 ) ;
88: static bool isDec ( const std :: string & str@var118 ) ;
89: static bool isFloatHex ( const std :: string & str@var119 ) ;
90: static bool isIntHex ( const std :: string & str@var120 ) ;
91: static bool isOct ( const std :: string & str@var121 ) ;
92: static bool isBin ( const std :: string & str@var122 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var123 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var124 , bool supportMicrosoftExtensions@var125 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var126 , const std :: string & second@var127 ) ;
105: static std :: string subtract ( const std :: string & first@var128 , const std :: string & second@var129 ) ;
106: static std :: string multiply ( const std :: string & first@var130 , const std :: string & second@var131 ) ;
107: static std :: string divide ( const std :: string & first@var132 , const std :: string & second@var133 ) ;
108: static std :: string mod ( const std :: string & first@var134 , const std :: string & second@var135 ) ;
109: static std :: string incdec ( const std :: string & var@var136 , const std :: string & op@var137 ) ;
110: static std :: string calculate ( const std :: string & first@var138 , const std :: string & second@var139 , char action@var140 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var141 ) ;
113: static std :: string cos ( const std :: string & tok@var142 ) ;
114: static std :: string tan ( const std :: string & tok@var143 ) ;
115: static std :: string abs ( const std :: string & tok@var144 ) ;
116: static bool isEqual ( const std :: string & first@var145 , const std :: string & second@var146 ) ;
117: static bool isNotEqual ( const std :: string & first@var147 , const std :: string & second@var148 ) ;
118: static bool isGreater ( const std :: string & first@var149 , const std :: string & second@var150 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var151 , const std :: string & second@var152 ) ;
120: static bool isLess ( const std :: string & first@var153 , const std :: string & second@var154 ) ;
121: static bool isLessEqual ( const std :: string & first@var155 , const std :: string & second@var156 ) ;
122: static bool isNullValue ( const std :: string & str@var157 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var158 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var159 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var160 , std :: string :: size_type iPos@var161 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var162 , const MathLib :: value & v2@var163 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var164 , const MathLib :: value & v2@var165 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var166 , const MathLib :: value & v2@var167 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var168 , const MathLib :: value & v2@var169 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var170 , const MathLib :: value & v2@var171 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var172 , const MathLib :: value & v2@var173 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var174 , const MathLib :: value & v2@var175 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var176 , const MathLib :: value & v2@var177 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var178 , const MathLib :: value & v2@var179 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var180 , const MathLib :: value & v2@var181 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var182 ) ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var183 ) const {
35: return p@var183 .@expr1073744298 first@var184 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var185 ) const {
42: return p@var185 .@expr1073744299 second@var186 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var187 , const T & x@var188 )
48: {
49: return std ::@expr1073744300 find (@expr1073744301 r@var187 .@expr1073744302 begin (@expr1073744303 ) , r@var187 .@expr2480 end (@expr2481 ) , x@var188 ) !=@expr1073744306 r@var187 .@expr2480 end (@expr2481 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var189 , const T & x@var190 )
54: {
55: return std ::@expr1073744309 find (@expr1073744310 r@var189 .@expr1073744311 begin (@expr1073744312 ) , r@var189 .@expr2489 end (@expr2490 ) , x@var190 ) !=@expr1073744315 r@var189 .@expr2489 end (@expr2490 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var191 , const U & x@var192 )
60: {
61: return std ::@expr1073744318 find (@expr1073744319 r@var191 .@expr1073744320 begin (@expr1073744321 ) , r@var191 .@expr2498 end (@expr2499 ) , x@var192 ) !=@expr1073744324 r@var191 .@expr2498 end (@expr2499 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var193 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744327 t@var193 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var194 , char c@var195 )
74: {
75: return !@expr1073744328 str@var194 .@expr1073744329 empty (@expr1073744330 ) &&@expr1073744331 str@var194 .@expr1073744332 back (@expr1073744333 ) ==@expr1073744334 c@var195 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var196 , const char end@var197 [ ] , unsigned long endlen@var198 )
79: {
80: return (@expr2511 str@var196 .@expr2512 size (@expr2513 ) >=@expr1073744338 endlen@var198 ) &&@expr1073744339 (@expr2511 str@var196 .@expr1073744341 compare (@expr1073744342 str@var196 .@expr2512 size (@expr2513 ) -@expr1073744345 endlen@var198 , endlen@var198 , end@var197 ) ==@expr1073744346 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var199 , const char ( & end@var200 ) [ N ] )
85: {
86: return endsWith (@expr1073744348 str@var199 , end@var200 , N@expr1073744347 -@expr1073744349 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var201 , char q@var202 , const std :: string & p@var203 )
90: {
91: if (@expr1073744350 !@expr1073744351 endsWith (@expr1073744352 str@var201 , q@var202 ) ) {
92: return false ; }
93: if (@expr1073744353 (@expr1073744354 str@var201 .@expr1073744355 length (@expr1073744356 ) +@expr1073744357 1 ) >@expr1073744358 p@var203 .@expr1073744359 length (@expr1073744360 ) &&@expr1073744361 (@expr1073744362 str@var201 .@expr1073744363 compare (@expr1073744364 0 , p@var203 .@expr1073744365 size (@expr1073744366 ) +@expr1073744367 1 , p@var203 +@expr1073744368 q@var202 ) ==@expr1073744369 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var204 , char q@var205 )
99: {
100: static const std ::@expr2546 vector < std ::@expr2546 string > suffixes@var206 {@expr1073744372 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744373 const std ::@expr2546 string &@expr1073744375 p@var207 :@expr1073744376 suffixes@var206 ) {
102: if (@expr1073744377 isPrefixStringCharLiteral (@expr1073744378 str@var204 , q@var205 , p@var207 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var208 )
109: {
110: return isStringCharLiteral (@expr1073744379 str@var208 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var209 )
114: {
115: return isStringCharLiteral (@expr1073744380 str@var209 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var210 , char q@var211 )
119: {
120: const unsigned long quotePos@var212 =@expr1073744381 str@var210 .@expr1073744382 find (@expr1073744383 q@var211 ) ;
121: return str@var210 .@expr1073744384 substr (@expr1073744385 quotePos@var212 +@expr1073744386 1U , str@var210 .@expr1073744387 size (@expr1073744388 ) -@expr1073744389 quotePos@var212 -@expr1073744390 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var213 )
125: {
126: if (@expr1073744391 isStringLiteral (@expr1073744392 str@var213 ) ) {
127: return getStringCharLiteral (@expr1073744393 str@var213 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var214 )
132: {
133: if (@expr1073744394 isCharLiteral (@expr1073744395 str@var214 ) ) {
134: return getStringCharLiteral (@expr1073744396 str@var214 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var215 )
139: {
140: if (@expr1073744397 i@var215 ==@expr1073744398 1 ) {
141: return "st" ; }
142: if (@expr1073744399 i@var215 ==@expr1073744400 2 ) {
143: return "nd" ; }
144: if (@expr1073744401 i@var215 ==@expr1073744402 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var216 , const std :: string & rhs@var217 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var218 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var219 , const std :: string & name@var220 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var221 , const std :: string & name@var222 ) ;
156:
157: void strTolower ( std :: string & str@var223 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var224 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var225 ;
42:
43:
44: std :: string stdValue@var226 ;
45:
46:
47: Standards ( ) : c@var224 ( CLatest ) , cpp@var225 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var227 ) {
50: stdValue@var226 =@expr1073744403 str@var227 ;
51: if (@expr1073744404 str@var227 ==@expr1073744405 "c89" ||@expr1073744406 str@var227 ==@expr1073744407 "C89" ) {
52: c@var224 =@expr1073744408 C89 ;
53: return true ;
54: }
55: if (@expr1073744409 str@var227 ==@expr1073744410 "c99" ||@expr1073744411 str@var227 ==@expr1073744412 "C99" ) {
56: c@var224 =@expr1073744413 C99 ;
57: return true ;
58: }
59: if (@expr1073744414 str@var227 ==@expr1073744415 "c11" ||@expr1073744416 str@var227 ==@expr1073744417 "C11" ) {
60: c@var224 =@expr1073744418 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744419 c@var224 ) {
67: case C89 :@expr2596 ;
68: return "c89" ;
69: case C99 :@expr2596 ;
70: return "c99" ;
71: case C11 :@expr2596 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var228 ) {
77: if (@expr1073744423 std@var228 ==@expr1073744424 "c89" ) {
78: return Standards ::@expr1073744425 C89 ;
79: }
80: if (@expr1073744426 std@var228 ==@expr1073744427 "c99" ) {
81: return Standards ::@expr1073744428 C99 ;
82: }
83: if (@expr1073744429 std@var228 ==@expr1073744430 "c11" ) {
84: return Standards ::@expr1073744431 C11 ;
85: }
86: return Standards ::@expr1073744432 CLatest ;
87: }
88: bool setCPP ( std :: string str@var229 ) {
89: stdValue@var226 =@expr1073744433 str@var229 ;
90: strTolower (@expr1073744434 str@var229 ) ;
91: cpp@var225 =@expr1073744435 getCPP (@expr1073744436 str@var229 ) ;
92: return !@expr1073744437 stdValue@var226 .@expr1073744438 empty (@expr1073744439 ) &&@expr1073744440 str@var229 ==@expr1073744441 getCPP (@expr1073744442 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744443 cpp@var225 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var230 ) {
98: switch (@expr1073744444 std@var230 ) {
99: case CPP03 :@expr2621 ;
100: return "c++03" ;
101: case CPP11 :@expr2621 ;
102: return "c++11" ;
103: case CPP14 :@expr2621 ;
104: return "c++14" ;
105: case CPP17 :@expr2621 ;
106: return "c++17" ;
107: case CPP20 :@expr2621 ;
108: return "c++20" ;
109: case CPP23 :@expr2621 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var231 ) {
115: if (@expr1073744451 std@var231 ==@expr1073744452 "c++03" ) {
116: return Standards ::@expr1073744453 CPP03 ;
117: }
118: if (@expr1073744454 std@var231 ==@expr1073744455 "c++11" ) {
119: return Standards ::@expr1073744456 CPP11 ;
120: }
121: if (@expr1073744457 std@var231 ==@expr1073744458 "c++14" ) {
122: return Standards ::@expr1073744459 CPP14 ;
123: }
124: if (@expr1073744460 std@var231 ==@expr1073744461 "c++17" ) {
125: return Standards ::@expr1073744462 CPP17 ;
126: }
127: if (@expr1073744463 std@var231 ==@expr1073744464 "c++20" ) {
128: return Standards ::@expr1073744465 CPP20 ;
129: }
130: if (@expr1073744466 std@var231 ==@expr1073744467 "c++23" ) {
131: return Standards ::@expr1073744468 CPP23 ;
132: }
133: return Standards ::@expr1073744469 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var235 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var232 ) : errorcode@var235 ( e@var232 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var233 , T && r@var234 ) : errorcode@var235 ( e@var233 ) , reason@var236 ( r@var234 ) { }
66: ErrorCode errorcode@var235 ;
67: std :: string reason@var236 ;
68: } ;
69:
70: Error load ( const char exename@var237 [ ] , const char path@var238 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var239 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var240 [ ] , unsigned long len@var241 ) ;
75:
76: struct AllocFunc {
77: int groupId@var242 ;
78: int arg@var243 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var244 ;
81: int bufferSizeArg1@var245 ;
82: int bufferSizeArg2@var246 ;
83: int reallocArg@var247 ;
84: bool initData@var248 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var249 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var250 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var251 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var252 , int arg@var253 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var254 , int arg@var255 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var256 , int arg@var257 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var258 [ ] ) const {
107: return getAllocDealloc (@expr1073744470 mAlloc@var524 , name@var258 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var259 [ ] ) const {
112: return getAllocDealloc (@expr1073744471 mDealloc@var525 , name@var259 ) ;
113: }
114:
115:
116: int allocId ( const char name@var260 [ ] ) const {
117: const AllocFunc * af@var261 ; af@var261 =@expr1073744472 getAllocDealloc (@expr1073744473 mAlloc@var524 , name@var260 ) ;
118: return af@var261 ?@expr1073744474 af@var261 .@expr1073744475 groupId@var262 :@expr1073744476 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var263 [ ] ) const {
123: const AllocFunc * af@var264 ; af@var264 =@expr1073744477 getAllocDealloc (@expr1073744478 mDealloc@var525 , name@var263 ) ;
124: return af@var264 ?@expr1073744479 af@var264 .@expr1073744480 groupId@var265 :@expr1073744481 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var266 , int id@var267 , int arg@var268 ) {
129: mAlloc@var524 [@expr2658 functionname@var266 ] .@expr1073744483 groupId@var2398 =@expr1073744484 id@var267 ;
130: mAlloc@var524 [@expr2658 functionname@var266 ] .@expr1073744486 arg@var2399 =@expr1073744487 arg@var268 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var269 , int id@var270 , int arg@var271 ) {
134: mDealloc@var525 [@expr2664 functionname@var269 ] .@expr1073744489 groupId@var2400 =@expr1073744490 id@var270 ;
135: mDealloc@var525 [@expr2664 functionname@var269 ] .@expr1073744492 arg@var2401 =@expr1073744493 arg@var271 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var272 , int id@var273 , int arg@var274 , int reallocArg@var275 = 1 ) {
139: mRealloc@var526 [@expr2670 functionname@var272 ] .@expr1073744495 groupId@var2402 =@expr1073744496 id@var273 ;
140: mRealloc@var526 [@expr2670 functionname@var272 ] .@expr1073744498 arg@var2403 =@expr1073744499 arg@var274 ;
141: mRealloc@var526 [@expr2670 functionname@var272 ] .@expr1073744501 reallocArg@var2404 =@expr1073744502 reallocArg@var275 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var276 , bool noreturn@var277 ) {
146: mNoReturn@var527 [@expr1073744503 funcname@var276 ] =@expr1073744504 noreturn@var277 ?@expr1073744505 FalseTrueMaybe ::@expr1073744506 True :@expr1073744507 FalseTrueMaybe ::@expr1073744508 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var278 ) ;
150:
151:
152: static bool ismemory ( const int id@var279 ) {
153: return (@expr2685 (@expr2685 id@var279 >@expr1073744511 0 ) &&@expr1073744512 (@expr2685 (@expr2685 id@var279 &@expr1073744515 1 ) ==@expr1073744516 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var280 ) {
156: return (@expr2693 (@expr2693 func@var280 .@expr2695 groupId@var281 >@expr1073744520 0 ) &&@expr1073744521 (@expr2693 (@expr2693 func@var280 .@expr2695 groupId@var281 &@expr1073744525 1 ) ==@expr1073744526 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var282 ) {
161: return (@expr2703 (@expr2703 id@var282 >@expr1073744529 0 ) &&@expr1073744530 (@expr2703 (@expr2703 id@var282 &@expr1073744533 1 ) ==@expr1073744534 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var283 ) {
164: return (@expr2711 (@expr2711 func@var283 .@expr2713 groupId@var284 >@expr1073744538 0 ) &&@expr1073744539 (@expr2711 (@expr2711 func@var283 .@expr2713 groupId@var284 &@expr1073744543 1 ) ==@expr1073744544 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var285 ) const ;
168: int formatstr_argno ( const Token * ftok@var286 ) const ;
169: bool formatstr_scan ( const Token * ftok@var287 ) const ;
170: bool formatstr_secure ( const Token * ftok@var288 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var289 ;
174: int ptr2Arg@var290 ;
175: int sizeArg@var291 ;
176: int strlenArg@var292 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var293 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var294 ;
182: Standards standards@var295 ;
183: Severity :: SeverityType severity@var296 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var297 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var298 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var299 ) const ;
191: bool matchArguments ( const Token * ftok@var300 , const std :: string & functionName@var301 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var302 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var303 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var304 ) const ;
198: int returnValueContainer ( const Token * ftok@var305 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var306 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var307 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var308 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var309 , std :: string * unknownFunc@var310 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var320 ( -1 ) ,
210: size_templateArgNo@var322 ( -1 ) ,
211: arrayLike_indexOp@var323 ( false ) ,
212: stdStringLike@var324 ( false ) ,
213: stdAssociativeLike@var325 ( false ) ,
214: opLessAllowed@var326 ( true ) ,
215: hasInitializerListConstructor@var327 ( false ) ,
216: unstableErase@var328 ( false ) ,
217: unstableInsert@var329 ( false ) ,
218: view@var330 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var311 ;
248: Yield yield@var312 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var313 ;
252: int templateParameter@var314 ;
253: } ;
254: std :: string startPattern@var315 ; std :: string startPattern2@var316 ; std :: string endPattern@var317 ; std :: string itEndPattern@var318 ;
255: std :: map < std :: string , Function > functions@var319 ;
256: int type_templateArgNo@var320 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var321 ;
258: int size_templateArgNo@var322 ;
259: bool arrayLike_indexOp@var323 ;
260: bool stdStringLike@var324 ;
261: bool stdAssociativeLike@var325 ;
262: bool opLessAllowed@var326 ;
263: bool hasInitializerListConstructor@var327 ;
264: bool unstableErase@var328 ;
265: bool unstableInsert@var329 ;
266: bool view@var330 ;
267:
268: Action getAction ( const std :: string & function@var331 ) const {
269: const std ::@expr1073744545 map < std ::@expr1073744546 string , Function > ::@expr1073744547 const_iterator i@var332 =@expr1073744548 functions@var319 .@expr1073744549 find (@expr1073744550 function@var331 ) ;
270: if (@expr1073744551 i@var332 !=@expr1073744552 functions@var319 .@expr1073744553 end (@expr1073744554 ) ) {
271: return i@var332 .@expr1073744555 second@var333 .@expr1073744556 action@var334 ; }
272: return Action ::@expr1073744557 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var335 ) const {
276: const std ::@expr1073744558 map < std ::@expr1073744559 string , Function > ::@expr1073744560 const_iterator i@var336 =@expr1073744561 functions@var319 .@expr1073744562 find (@expr1073744563 function@var335 ) ;
277: if (@expr1073744564 i@var336 !=@expr1073744565 functions@var319 .@expr1073744566 end (@expr1073744567 ) ) {
278: return i@var336 .@expr1073744568 second@var337 .@expr1073744569 yield@var338 ; }
279: return Yield ::@expr1073744570 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var339 ) ;
283: static Action actionFrom ( const std :: string & actionName@var340 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var341 ;
286: const Container * detectContainer ( const Token * typeStart@var342 , bool iterator@var343 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var344 , bool * isIterator@var345 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var346 ( false ) ,
293: notnull@var347 ( false ) ,
294: notuninit@var348 ( -1 ) ,
295: formatstr@var349 ( false ) ,
296: strz@var350 ( false ) ,
297: optional@var351 ( false ) ,
298: variadic@var352 ( false ) ,
299: iteratorInfo@var358 ( ) ,
300: direction@var366 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var346 ;
303: bool notnull@var347 ;
304: int notuninit@var348 ;
305: bool formatstr@var349 ;
306: bool strz@var350 ;
307: bool optional@var351 ;
308: bool variadic@var352 ;
309: std :: string valid@var353 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var354 ( 0 ) , it@var355 ( false ) , first@var356 ( false ) , last@var357 ( false ) { }
314:
315: int container@var354 ;
316: bool it@var355 ;
317: bool first@var356 ;
318: bool last@var357 ;
319: } ;
320: IteratorInfo iteratorInfo@var358 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var359 , int a@var360 ) : type@var361 ( t@var359 ) , arg@var362 ( a@var360 ) , arg2@var363 ( 0 ) , value@var364 ( 0 ) { }
326: Type type@var361 ;
327: int arg@var362 ;
328: int arg2@var363 ;
329: long long value@var364 ;
330: } ;
331: std :: vector < MinSize > minsizes@var365 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var366 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var367 ;
344: bool use@var368 ;
345: bool leakignore@var369 ;
346: bool isconst@var370 ;
347: bool ispure@var371 ;
348: UseRetValType useretval@var372 ;
349: bool ignore@var373 ;
350: bool formatstr@var374 ;
351: bool formatstr_scan@var375 ;
352: bool formatstr_secure@var376 ;
353: Container :: Action containerAction@var377 ;
354: Container :: Yield containerYield@var378 ;
355: Function ( )
356: : use@var368 ( false ) ,
357: leakignore@var369 ( false ) ,
358: isconst@var370 ( false ) ,
359: ispure@var371 ( false ) ,
360: useretval@var372 ( UseRetValType :: NONE ) ,
361: ignore@var373 ( false ) ,
362: formatstr@var374 ( false ) ,
363: formatstr_scan@var375 ( false ) ,
364: formatstr_secure@var376 ( false ) ,
365: containerAction@var377 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var378 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var379 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var380 ;
372: bool isUse ( const std :: string & functionName@var381 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var382 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var383 , bool pure@var384 ) const ;
375: bool isFunctionConst ( const Token * ftok@var385 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var386 , int argnr@var387 ) const {
378: const ArgumentChecks * arg@var388 ; arg@var388 =@expr1073744571 getarg (@expr1073744572 ftok@var386 , argnr@var387 ) ;
379: return arg@var388 &&@expr1073744573 arg@var388 .@expr1073744574 notbool@var389 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var390 , int argnr@var391 ) const ;
383: bool isuninitargbad ( const Token * ftok@var392 , int argnr@var393 , int indirect@var394 = 0 , bool * hasIndirect@var395 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var396 , int argnr@var397 ) const {
386: const ArgumentChecks * arg@var398 ; arg@var398 =@expr1073744575 getarg (@expr1073744576 ftok@var396 , argnr@var397 ) ;
387: return arg@var398 &&@expr1073744577 arg@var398 .@expr1073744578 formatstr@var399 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var400 , int argnr@var401 ) const {
391: const ArgumentChecks * arg@var402 ; arg@var402 =@expr1073744579 getarg (@expr1073744580 ftok@var400 , argnr@var401 ) ;
392: return arg@var402 &&@expr1073744581 arg@var402 .@expr1073744582 strz@var403 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var404 , int argnr@var405 , const long long argvalue@var406 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var407 , int argnr@var408 , double argvalue@var409 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var410 , int argnr@var411 ) const {
399: const ArgumentChecks * arg@var412 ; arg@var412 =@expr1073744583 getarg (@expr1073744584 ftok@var410 , argnr@var411 ) ;
400: return arg@var412 ?@expr1073744585 arg@var412 .@expr1073744586 valid@var413 :@expr1073744587 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var414 ;
405: std :: string op1@var415 ;
406: std :: string op2@var416 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744588 isInt (@expr1073744589 op1@var415 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var417 , int argnr@var418 ) const {
413: const ArgumentChecks * arg@var419 ; arg@var419 =@expr1073744590 getarg (@expr1073744591 ftok@var417 , argnr@var418 ) ;
414: return arg@var419 &&@expr1073744592 arg@var419 .@expr2769 iteratorInfo@var420 .@expr1073744594 it@var421 ?@expr1073744595 &@expr1073744596 arg@var419 .@expr2769 iteratorInfo@var420 :@expr1073744598 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var422 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var423 , int argnr@var424 ) const {
420: const ArgumentChecks * arg@var425 ; arg@var425 =@expr1073744599 getarg (@expr1073744600 ftok@var423 , argnr@var424 ) ;
421: return arg@var425 ?@expr1073744601 &@expr1073744602 arg@var425 .@expr1073744603 minsizes@var426 :@expr1073744604 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var427 , int argnr@var428 ) const ;
425:
426: bool markupFile ( const std :: string & path@var429 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var430 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var534 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var431 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var432 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var433 , const std :: string & token@var434 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var435 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var436 ) const ;
443: const std :: string & blockend ( const std :: string & file@var437 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var438 , const std :: string & keyword@var439 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var440 ) const {
448: return mExporters@var537 .@expr1073744605 find (@expr1073744606 prefix@var440 ) !=@expr1073744607 mExporters@var537 .@expr1073744608 end (@expr1073744609 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var441 , const std :: string & token@var442 ) const {
452: const std ::@expr1073744610 map < std ::@expr1073744611 string , ExportedFunctions > ::@expr1073744612 const_iterator it@var443 =@expr1073744613 mExporters@var537 .@expr1073744614 find (@expr1073744615 prefix@var441 ) ;
453: return (@expr1073744616 it@var443 !=@expr1073744617 mExporters@var537 .@expr1073744618 end (@expr1073744619 ) &&@expr1073744620 it@var443 .@expr1073744621 second@var444 .@expr1073744622 isPrefix (@expr1073744623 token@var442 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var445 , const std :: string & token@var446 ) const {
457: const std ::@expr1073744624 map < std ::@expr1073744625 string , ExportedFunctions > ::@expr1073744626 const_iterator it@var447 =@expr1073744627 mExporters@var537 .@expr1073744628 find (@expr1073744629 prefix@var445 ) ;
458: return (@expr1073744630 it@var447 !=@expr1073744631 mExporters@var537 .@expr1073744632 end (@expr1073744633 ) &&@expr1073744634 it@var447 .@expr1073744635 second@var448 .@expr1073744636 isSuffix (@expr1073744637 token@var446 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var449 , const std :: string & importer@var450 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var451 , Container :: Yield yield@var452 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var453 , Container :: Action action@var454 ) const ;
465:
466: bool isreflection ( const std :: string & token@var455 ) const {
467: return mReflection@var539 .@expr1073744638 find (@expr1073744639 token@var455 ) !=@expr1073744640 mReflection@var539 .@expr1073744641 end (@expr1073744642 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var456 ) const {
471: const std ::@expr1073744643 map < std ::@expr1073744644 string , int > ::@expr1073744645 const_iterator it@var457 =@expr1073744646 mReflection@var539 .@expr1073744647 find (@expr1073744648 token@var456 ) ;
472: if (@expr1073744649 it@var457 !=@expr1073744650 mReflection@var539 .@expr1073744651 end (@expr1073744652 ) ) {
473: return it@var457 .@expr1073744653 second@var458 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var459 ;
478:
479: struct SmartPointer {
480: std :: string name@var460 ; name@var460 = "" ;
481: bool unique@var461 ; unique@var461 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var462 ;
485: bool isSmartPointer ( const Token * tok@var463 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var464 ) const ;
487:
488: struct PodType {
489: unsigned int size@var465 ;
490: char sign@var466 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var467 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var468 ) const {
494: const std ::@expr1073744654 unordered_map < std ::@expr1073744655 string , PodType > ::@expr1073744656 const_iterator it@var469 =@expr1073744657 mPodTypes@var540 .@expr1073744658 find (@expr1073744659 name@var468 ) ;
495: return (@expr2836 it@var469 !=@expr1073744661 mPodTypes@var540 .@expr1073744662 end (@expr1073744663 ) ) ?@expr1073744664 &@expr1073744665 (@expr2836 it@var469 .@expr1073744667 second@var470 ) :@expr1073744668 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var481 ( false )
501: , mUnsigned@var482 ( false )
502: , mLong@var483 ( false )
503: , mPointer@var484 ( false )
504: , mPtrPtr@var485 ( false )
505: , mConstPtr@var486 ( false ) { }
506: bool operator== ( const PlatformType & type@var471 ) const {
507: return (@expr1073744669 mSigned@var481 ==@expr1073744670 type@var471 .@expr1073744671 mSigned@var472 &&@expr1073744672
508: mUnsigned@var482 ==@expr1073744673 type@var471 .@expr1073744674 mUnsigned@var473 &&@expr1073744675
509: mLong@var483 ==@expr1073744676 type@var471 .@expr1073744677 mLong@var474 &&@expr1073744678
510: mPointer@var484 ==@expr1073744679 type@var471 .@expr1073744680 mPointer@var475 &&@expr1073744681
511: mPtrPtr@var485 ==@expr1073744682 type@var471 .@expr1073744683 mPtrPtr@var476 &&@expr1073744684
512: mConstPtr@var486 ==@expr1073744685 type@var471 .@expr1073744686 mConstPtr@var477 &&@expr1073744687
513: mType@var480 ==@expr1073744688 type@var471 .@expr1073744689 mType@var478 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var479 ) const {
516: return !@expr1073744690 (@expr1073744691 *@expr1073744692 this@expr1073744693 ==@expr1073744694 type@var479 ) ;
517: }
518: std :: string mType@var480 ;
519: bool mSigned@var481 ;
520: bool mUnsigned@var482 ;
521: bool mLong@var483 ;
522: bool mPointer@var484 ;
523: bool mPtrPtr@var485 ;
524: bool mConstPtr@var486 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var487 ) const {
529: const std ::@expr1073744695 map < std ::@expr1073744696 string , PlatformType > ::@expr1073744697 const_iterator it@var488 =@expr1073744698 mPlatformTypes@var490 .@expr1073744699 find (@expr1073744700 name@var487 ) ;
530: return (@expr2877 it@var488 !=@expr1073744702 mPlatformTypes@var490 .@expr1073744703 end (@expr1073744704 ) ) ?@expr1073744705 &@expr1073744706 (@expr2877 it@var488 .@expr1073744708 second@var489 ) :@expr1073744709 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var490 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var491 , const std :: string & platform@var492 ) const {
536: const std ::@expr1073744710 map < std ::@expr2887 string , Platform > ::@expr1073744712 const_iterator it@var493 =@expr1073744713 mPlatforms@var542 .@expr1073744714 find (@expr1073744715 platform@var492 ) ;
537: if (@expr1073744716 it@var493 !=@expr1073744717 mPlatforms@var542 .@expr1073744718 end (@expr1073744719 ) ) {
538: const PlatformType * const type@var494 ; type@var494 =@expr1073744720 it@var493 .@expr1073744721 second@var495 .@expr1073744722 platform_type (@expr1073744723 name@var491 ) ;
539: if (@expr1073744724 type@var494 ) {
540: return type@var494 ; }
541: }
542:
543: const std ::@expr1073744725 map < std ::@expr2887 string , PlatformType > ::@expr1073744727 const_iterator it2@var496 =@expr1073744728 mPlatformTypes@var541 .@expr1073744729 find (@expr1073744730 name@var491 ) ;
544: return (@expr2907 it2@var496 !=@expr1073744732 mPlatformTypes@var541 .@expr1073744733 end (@expr1073744734 ) ) ?@expr1073744735 &@expr1073744736 (@expr2907 it2@var496 .@expr1073744738 second@var497 ) :@expr1073744739 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var498 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var499 , Library :: Container :: Yield y@var500 , const std :: string & fallback@var501 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var502 , const std :: string & typeName@var503 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var504 , const std :: string & name@var505 , std :: set < std :: string > & unknown_elements@var506 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var507 ) {
565: mPrefixes@var511 .@expr1073744740 insert (@expr1073744741 prefix@var507 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var508 ) {
568: mSuffixes@var512 .@expr1073744742 insert (@expr1073744743 suffix@var508 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var509 ) const {
571: return (@expr1073744744 mPrefixes@var511 .@expr1073744745 find (@expr1073744746 prefix@var509 ) !=@expr1073744747 mPrefixes@var511 .@expr1073744748 end (@expr1073744749 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var510 ) const {
574: return (@expr1073744750 mSuffixes@var512 .@expr1073744751 find (@expr1073744752 suffix@var510 ) !=@expr1073744753 mSuffixes@var512 .@expr1073744754 end (@expr1073744755 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var511 ;
579: std :: set < std :: string > mSuffixes@var512 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var520 ( 0 ) { }
584:
585: void setStart ( const char * s@var513 ) {
586: mStart@var518 =@expr1073744756 s@var513 ;
587: }
588: void setEnd ( const char * e@var514 ) {
589: mEnd@var519 =@expr1073744757 e@var514 ;
590: }
591: void setOffset ( const int o@var515 ) {
592: mOffset@var520 =@expr1073744758 o@var515 ;
593: }
594: void addBlock ( const char * blockName@var516 ) {
595: mBlocks@var521 .@expr1073744759 insert (@expr1073744760 blockName@var516 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var518 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var519 ;
602: }
603: int offset ( ) const {
604: return mOffset@var520 ;
605: }
606: bool isBlock ( const std :: string & blockName@var517 ) const {
607: return mBlocks@var521 .@expr1073744761 find (@expr1073744762 blockName@var517 ) !=@expr1073744763 mBlocks@var521 .@expr1073744764 end (@expr1073744765 ) ;
608: }
609:
610: private:
611: std :: string mStart@var518 ;
612: std :: string mEnd@var519 ;
613: int mOffset@var520 ;
614: std :: set < std :: string > mBlocks@var521 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var522 ;
618: std :: set < std :: string > mFiles@var523 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var524 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var525 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var526 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var527 ;
623: std :: map < std :: string , std :: string > mReturnValue@var528 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var529 ;
625: std :: map < std :: string , int > mReturnValueContainer@var530 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var531 ;
627: std :: map < std :: string , bool > mReportErrors@var532 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var533 ;
629: std :: set < std :: string > mMarkupExtensions@var534 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var535 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var536 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var537 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var538 ;
634: std :: map < std :: string , int > mReflection@var539 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var540 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var541 ;
637: std :: map < std :: string , Platform > mPlatforms@var542 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var543 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var544 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var545 , int argnr@var546 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var547 , bool * error@var548 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var549 , const std :: string & name@var550 ) {
646: const std ::@expr1073744766 map < std ::@expr1073744767 string , AllocFunc > ::@expr1073744768 const_iterator it@var551 =@expr1073744769 data@var549 .@expr1073744770 find (@expr1073744771 name@var550 ) ;
647: return (@expr1073744772 it@var551 ==@expr1073744773 data@var549 .@expr1073744774 end (@expr1073744775 ) ) ?@expr1073744776 nullptr :@expr1073744777 &@expr1073744778 it@var551 .@expr1073744779 second@var552 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var553 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var554 ,
654: const Settings * settings@var555 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var556 = nullptr ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var557 ) const {
54: x@var557 ++@expr1073744780 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var558 ) const {
60: x@var558 --@expr1073744781 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var559 , const U & y@var560 ) const {
67: return x@var559 <@expr1073744782 y@var560 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var561 , const U & y@var562 ) const {
74: return std ::@expr1073744783 abs (@expr1073744784 x@var561 -@expr1073744785 y@var562 ) ==@expr1073744786 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var563 , T x@var564 , U y@var565 ) const {
81: result@var563 =@expr1073744787 !@expr1073744788 (@expr1073744789 x@var564 >@expr1073744790 y@var565 ||@expr1073744791 x@var564 <@expr1073744792 y@var565 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var566 = 0 , Bound b@var567 = Bound :: Point )
91: : valueType@var607 ( ValueType :: INT ) ,
92: bound@var608 ( b@var567 ) ,
93: intvalue@var609 ( val@var566 ) ,
94: tokvalue@var610 ( nullptr ) ,
95: floatValue@var611 ( 0.0 ) ,
96: moveKind@var612 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var613 ( val@var566 ) ,
98: condition@var614 ( nullptr ) ,
99: varId@var616 ( 0U ) ,
100: safe@var617 ( false ) ,
101: conditional@var618 ( false ) ,
102: macro@var619 ( false ) ,
103: defaultArg@var620 ( false ) ,
104: indirect@var621 ( 0 ) ,
105: path@var622 ( 0 ) ,
106: wideintvalue@var623 ( val@var566 ) ,
107: subexpressions@var624 ( ) ,
108: capturetok@var625 ( nullptr ) ,
109: lifetimeKind@var626 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var627 ( LifetimeScope :: Local ) ,
111: valueKind@var632 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var568 , long long val@var569 , Bound b@var570 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var571 ) const {
118: if (@expr1073744793 valueType@var607 !=@expr1073744794 rhs@var571 .@expr1073744795 valueType@var572 ) {
119: return false ; }
120: switch (@expr1073744796 valueType@var607 ) {
121: case ValueType ::@expr1073744797 INT :@expr2974
122: case ValueType ::@expr1073744799 CONTAINER_SIZE :@expr2974
123: case ValueType ::@expr1073744801 BUFFER_SIZE :@expr2974
124: case ValueType ::@expr1073744803 ITERATOR_START :@expr2974
125: case ValueType ::@expr1073744805 ITERATOR_END :@expr2974 ;
126: if (@expr2983 intvalue@var609 !=@expr2984 rhs@var571 .@expr2985 intvalue@var573 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744810 TOK :@expr2974 ;
130: if (@expr2988 tokvalue@var610 !=@expr2989 rhs@var571 .@expr2990 tokvalue@var574 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744815 FLOAT :@expr2974 ;
134:
135: if (@expr1073744817 floatValue@var611 >@expr1073744818 rhs@var571 .@expr2995 floatValue@var575 ||@expr1073744820 floatValue@var611 <@expr1073744821 rhs@var571 .@expr2995 floatValue@var575 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744823 MOVED :@expr2974 ;
139: if (@expr1073744825 moveKind@var612 !=@expr1073744826 rhs@var571 .@expr1073744827 moveKind@var576 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744828 UNINIT :@expr2974 ;
143: break ;
144: case ValueType ::@expr1073744830 LIFETIME :@expr2974 ;
145: if (@expr2988 tokvalue@var610 !=@expr2989 rhs@var571 .@expr2990 tokvalue@var574 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744835 SYMBOLIC :@expr2974 ;
149: if (@expr1073744837 !@expr1073744838 sameToken (@expr1073744839 tokvalue@var610 , rhs@var571 .@expr2990 tokvalue@var574 ) ) {
150: return false ; }
151: if (@expr2983 intvalue@var609 !=@expr2984 rhs@var571 .@expr2985 intvalue@var573 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var577 , F f@var578 ) {
160: switch (@expr1073744844 self@var577 .@expr1073744845 valueType@var579 ) {
161: case ValueType ::@expr1073744846 INT :@expr3023
162: case ValueType ::@expr1073744848 SYMBOLIC :@expr3023
163: case ValueType ::@expr1073744850 BUFFER_SIZE :@expr3023
164: case ValueType ::@expr1073744852 CONTAINER_SIZE :@expr3023
165: case ValueType ::@expr1073744854 ITERATOR_START :@expr3023
166: case ValueType ::@expr1073744856 ITERATOR_END :@expr3023 ; {
167: f@var578 (@expr1073744858 self@var577 .@expr1073744859 intvalue@var580 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744860 FLOAT :@expr3023 ; {
171: f@var578 (@expr1073744862 self@var577 .@expr1073744863 floatValue@var581 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744864 UNINIT :@expr3023
175: case ValueType ::@expr1073744866 TOK :@expr3023
176: case ValueType ::@expr1073744868 LIFETIME :@expr3023
177: case ValueType ::@expr1073744870 MOVED :@expr3023 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var582 , Compare compare@var583 , T x@var584 , U y@var585 ) const {
186: result@var582 =@expr1073744872 compare@var583 (@expr1073744873 x@var584 , y@var585 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var586 , const Value & rhs@var587 , Compare compare@var588 , T x@var589 ) const {
191: visitValue (@expr1073744875 rhs@var587 ,
192: std ::@expr1073744876 bind (@expr1073744877 innerVisitor {@expr1073744878 } , std ::@expr1073744879 ref (@expr1073744880 result@var586 ) , std ::@expr1073744881 move (@expr1073744882 compare@var588 ) , x@var589 , std ::@expr1073744883 placeholders ::@expr1073744884 _1@expr1073744874 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var590 , Compare compare@var591 ) const {
198: assert (@expr1073744886 (@expr1073744887 !@expr1073744888 this@expr3065 .@expr1073744890 isSymbolicValue (@expr1073744891 ) &&@expr1073744892 !@expr1073744893 rhs@var590 .@expr1073744894 isSymbolicValue (@expr1073744895 ) ) ||@expr1073744896
199: (@expr1073744897 this@expr3065 .@expr1073744898 valueType@var607 ==@expr1073744899 rhs@var590 .@expr1073744900 valueType@var592 &&@expr1073744901 sameToken (@expr1073744902 this@expr3065 .@expr1073744903 tokvalue@var610 , rhs@var590 .@expr1073744904 tokvalue@var593 ) ) ) ;
200: bool result@var594 ; result@var594 =@expr1073744905 false ;
201: visitValue (@expr1073744906
202: *@expr1073744907 this@expr3065 ,
203: std ::@expr1073744908 bind (@expr1073744909 compareVisitor {@expr1073744910 } , std ::@expr3087 ref (@expr1073744912 result@var594 ) , std ::@expr3087 ref (@expr1073744914 rhs@var590 ) , std ::@expr1073744915 move (@expr1073744916 compare@var591 ) , std ::@expr1073744917 placeholders ::@expr1073744918 _1@expr1073744885 ) ) ;
204: return result@var594 ;
205: }
206:
207: bool operator== ( const Value & rhs@var595 ) const {
208: if (@expr1073744919 !@expr1073744920 equalValue (@expr1073744921 rhs@var595 ) ) {
209: return false ; }
210:
211: return varvalue@var613 ==@expr1073744922 rhs@var595 .@expr1073744923 varvalue@var596 &&@expr1073744924
212: condition@var614 ==@expr1073744925 rhs@var595 .@expr1073744926 condition@var597 &&@expr1073744927
213: varId@var616 ==@expr1073744928 rhs@var595 .@expr1073744929 varId@var598 &&@expr1073744930
214: conditional@var618 ==@expr1073744931 rhs@var595 .@expr1073744932 conditional@var599 &&@expr1073744933
215: defaultArg@var620 ==@expr1073744934 rhs@var595 .@expr1073744935 defaultArg@var600 &&@expr1073744936
216: indirect@var621 ==@expr1073744937 rhs@var595 .@expr1073744938 indirect@var601 &&@expr1073744939
217: valueKind@var632 ==@expr1073744940 rhs@var595 .@expr1073744941 valueKind@var602 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var603 ) const {
221: return !@expr1073744942 (@expr1073744943 *@expr1073744944 this@expr1073744945 ==@expr1073744946 rhs@var603 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var604 ) const {
226: bool result@var605 ; result@var605 =@expr1073744948 false ;
227: visitValue (@expr1073744949 *@expr1073744950 this@expr1073744951 , std ::@expr1073744952 bind (@expr1073744953 equalVisitor {@expr1073744954 } , std ::@expr1073744955 ref (@expr1073744956 result@var605 ) , x@var604 , std ::@expr1073744957 placeholders ::@expr1073744958 _1@expr1073744947 ) ) ;
228: return result@var605 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744959 bound@var608 ==@expr1073744960 Bound ::@expr1073744961 Lower ) {
233: visitValue (@expr1073744962 *@expr3139 this@expr3140 , increment {@expr1073744965 } ) ; }
234: else { if (@expr1073744966 bound@var608 ==@expr1073744967 Bound ::@expr1073744968 Upper ) {
235: visitValue (@expr1073744969 *@expr3139 this@expr3140 , decrement {@expr1073744971 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744972 bound@var608 ==@expr1073744973 Bound ::@expr3150 Lower ) {
240: bound@var608 =@expr1073744975 Bound ::@expr3152 Upper ; }
241: else { if (@expr1073744977 bound@var608 ==@expr1073744978 Bound ::@expr3152 Upper ) {
242: bound@var608 =@expr1073744980 Bound ::@expr3150 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744982 ) ;
247: decreaseRange (@expr1073744983 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var606 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var607 ;
267: bool isIntValue ( ) const {
268: return valueType@var607 ==@expr1073744984 ValueType ::@expr1073744985 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var607 ==@expr1073744986 ValueType ::@expr1073744987 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var607 ==@expr1073744988 ValueType ::@expr1073744989 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var607 ==@expr1073744990 ValueType ::@expr1073744991 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var607 ==@expr1073744992 ValueType ::@expr1073744993 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var607 ==@expr1073744994 ValueType ::@expr1073744995 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var607 ==@expr1073744996 ValueType ::@expr1073744997 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var607 ==@expr1073744998 ValueType ::@expr1073744999 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var607 ==@expr1073745000 ValueType ::@expr1073745001 ITERATOR_START ||@expr1073745002 valueType@var607 ==@expr1073745003 ValueType ::@expr1073745004 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var607 ==@expr1073745005 ValueType ::@expr1073745006 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var607 ==@expr1073745007 ValueType ::@expr1073745008 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var607 ==@expr1073745009 ValueType ::@expr1073745010 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var607 ==@expr1073745012 ValueType ::@expr1073745013 LIFETIME &&@expr1073745014 lifetimeScope@var627 ==@expr1073745015 LifetimeScope ::@expr1073745016 Local@expr1073745011 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var607 ==@expr1073745017 ValueType ::@expr1073745018 LIFETIME &&@expr1073745019 lifetimeScope@var627 ==@expr1073745020 LifetimeScope ::@expr1073745021 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var607 ==@expr1073745022 ValueType ::@expr1073745023 LIFETIME &&@expr1073745024 lifetimeScope@var627 ==@expr1073745025 LifetimeScope ::@expr1073745026 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073745027 ) ||@expr1073745028 isUninitValue (@expr1073745029 ) ||@expr1073745030 isLifetimeValue (@expr1073745031 ) ;
318: }
319:
320:
321: Bound bound@var608 ;
322:
323:
324: long long intvalue@var609 ;
325:
326:
327: const Token * tokvalue@var610 ;
328:
329:
330: double floatValue@var611 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var612 ;
334:
335:
336: long long varvalue@var613 ;
337:
338:
339: const Token * condition@var614 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var615 ;
342:
343:
344: int varId@var616 ;
345:
346:
347: bool safe@var617 ;
348:
349:
350: bool conditional@var618 ;
351:
352:
353: bool macro@var619 ;
354:
355:
356: bool defaultArg@var620 ;
357:
358: int indirect@var621 ;
359:
360:
361: long long path@var622 ;
362:
363:
364: long long wideintvalue@var623 ;
365:
366: std :: vector < std :: string > subexpressions@var624 ;
367:
368:
369: const Token * capturetok@var625 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var626 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var627 ;
385:
386: static const char * toString ( MoveKind moveKind@var628 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var629 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var630 ) ;
389: static const char * toString ( Bound bound@var631 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var632 ;
402:
403: void setKnown ( ) {
404: valueKind@var632 =@expr1073745032 ValueKind ::@expr1073745033 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var632 ==@expr1073745034 ValueKind ::@expr1073745035 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var632 =@expr1073745037 ValueKind ::@expr1073745038 Possible@expr1073745036 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var632 ==@expr1073745040 ValueKind ::@expr1073745041 Possible@expr1073745039 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var632 ==@expr1073745042 ValueKind ::@expr1073745043 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var632 =@expr1073745044 ValueKind ::@expr1073745045 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var633 = true ) {
428: if (@expr1073745046 inconclusive@var633 ) {
429: valueKind@var632 =@expr1073745047 ValueKind ::@expr1073745048 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var632 ==@expr1073745049 ValueKind ::@expr1073745050 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073745052 isKnown (@expr1073745053 ) ) {
438: valueKind@var632 =@expr1073745054 ValueKind ::@expr1073745055 Possible@expr1073745051 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073745056 condition@var614 &&@expr1073745057 !@expr1073745058 defaultArg@var620 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var634 , const Token * tok2@var635 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var636 , const Settings * settings@var637 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var638 , SymbolDatabase * symboldatabase@var639 , ErrorLogger * errorLogger@var640 , const Settings * settings@var641 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var642 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var643 , const Settings * settings@var644 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var645 ,
459: const Settings * settings@var646 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var647 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var648 , const Token * indexTok@var649 , bool possible@var650 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var651 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var652 , const Settings * settings@var653 = nullptr , int depth@var654 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var655 ;
471: bool addressOf@var656 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var657 ;
473: bool inconclusive@var658 ;
474:
475: LifetimeToken ( ) : token@var655 ( nullptr ) , addressOf@var656 ( false ) , errorPath@var657 ( ) , inconclusive@var658 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var659 , ValueFlow :: Value :: ErrorPath errorPath@var660 )
478: : token@var655 ( token@var659 ) , addressOf@var656 ( false ) , errorPath@var657 ( std :: move ( errorPath@var660 ) ) , inconclusive@var658 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var661 , bool addressOf@var662 , ValueFlow :: Value :: ErrorPath errorPath@var663 )
482: : token@var655 ( token@var661 ) , addressOf@var656 ( addressOf@var662 ) , errorPath@var657 ( std :: move ( errorPath@var663 ) ) , inconclusive@var658 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var664 , bool b@var665 ) {
486: for (@expr1073745059 LifetimeToken &@expr1073745060 x@var666 :@expr1073745061 v@var664 ) {
487: x@var666 .@expr1073745062 addressOf@var667 =@expr1073745063 b@var665 ; }
488: return v@var664 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var668 , bool b@var669 ) {
492: for (@expr1073745064 LifetimeToken &@expr1073745065 x@var670 :@expr1073745066 v@var668 ) {
493: x@var670 .@expr1073745067 inconclusive@var671 =@expr1073745068 b@var669 ; }
494: return v@var668 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var672 , ValueFlow :: Value & true_value@var673 , ValueFlow :: Value & false_value@var674 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var675 ) ;
499: const Token * parseCompareInt ( const Token * tok@var676 , ValueFlow :: Value & true_value@var677 , ValueFlow :: Value & false_value@var678 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var679 , long long val@var680 , const Token * varTok@var681 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var682 , const Token * varTok@var683 , long long val@var684 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var685 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var686 ,
508: ValueFlow :: Value & value@var687 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var688 ,
511: bool escape@var689 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var690 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var691 , const Token * lifetime@var692 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var693 , ValueFlow :: Value :: ErrorPath & errorPath@var694 , bool * addressOf@var695 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var696 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var697 , const Settings * settings@var698 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var699 , const ValueFlow :: Value * val@var700 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var701 , const ValueFlow :: Value * val@var702 , ValueFlow :: Value :: ErrorPath & errorPath@var703 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var704 , bool inconclusive@var705 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var706 ,
529: bool inconclusive@var707 = false ,
530: long long path@var708 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var709 , const Scope * defaultScope@var710 = nullptr , bool smallest@var711 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var712 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var713 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var714 ;
69: std :: string mScope@var715 ;
70: std :: string mName@var716 ;
71: std :: string mFullName@var717 ;
72: const Token * mNameToken@var718 ;
73: const Token * mParamEnd@var719 ;
74: unsigned int mFlags@var720 ;
75:
76: enum Anonymous0 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var721 ) {
90: setFlag (@expr1073745069 fIsClass , state@var721 ) ;
91: }
92: void isFunction ( bool state@var722 ) {
93: setFlag (@expr1073745070 fIsFunction , state@var722 ) ;
94: }
95: void isVariable ( bool state@var723 ) {
96: setFlag (@expr1073745071 fIsVariable , state@var723 ) ;
97: }
98: void isAlias ( bool state@var724 ) {
99: setFlag (@expr1073745072 fIsAlias , state@var724 ) ;
100: }
101: void isSpecialization ( bool state@var725 ) {
102: setFlag (@expr1073745073 fIsSpecialization , state@var725 ) ;
103: }
104: void isPartialSpecialization ( bool state@var726 ) {
105: setFlag (@expr1073745074 fIsPartialSpecialization , state@var726 ) ;
106: }
107: void isForwardDeclaration ( bool state@var727 ) {
108: setFlag (@expr1073745075 fIsForwardDeclaration , state@var727 ) ;
109: }
110: void isVariadic ( bool state@var728 ) {
111: setFlag (@expr1073745076 fIsVariadic , state@var728 ) ;
112: }
113: void isFriend ( bool state@var729 ) {
114: setFlag (@expr1073745077 fIsFriend , state@var729 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var730 ) const {
123: return (@expr3254 (@expr3254 mFlags@var720 &@expr1073745080 flag@var730 ) !=@expr1073745081 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var731 , bool state@var732 ) {
132: mFlags@var720 =@expr1073745082 state@var732 ?@expr1073745083 mFlags@var720 |@expr1073745084 flag@var731 :@expr1073745085 mFlags@var720 &@expr1073745086 ~@expr1073745087 flag@var731 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var733 , const std :: string & scope@var734 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var735 , const std :: string & scope@var736 , const Token * nameToken@var737 , const Token * paramEnd@var738 ) ;
150: TokenAndName ( const TokenAndName & other@var739 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var740 ) const {
154: return mToken@var714 ==@expr1073745088 rhs@var740 .@expr1073745089 mToken@var741 &&@expr1073745090 mScope@var715 ==@expr1073745091 rhs@var740 .@expr1073745092 mScope@var742 &&@expr1073745093 mName@var716 ==@expr1073745094 rhs@var740 .@expr1073745095 mName@var743 &&@expr1073745096 mFullName@var717 ==@expr1073745097 rhs@var740 .@expr1073745098 mFullName@var744 &&@expr1073745099
155: mNameToken@var718 ==@expr1073745100 rhs@var740 .@expr1073745101 mNameToken@var745 &&@expr1073745102 mParamEnd@var719 ==@expr1073745103 rhs@var740 .@expr1073745104 mParamEnd@var746 &&@expr1073745105 mFlags@var720 ==@expr1073745106 rhs@var740 .@expr1073745107 mFlags@var747 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var714 ;
160: }
161: void token ( Token * token@var748 ) {
162: mToken@var714 =@expr1073745108 token@var748 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var715 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var716 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var717 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var718 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var719 ;
178: }
179: void paramEnd ( const Token * end@var749 ) {
180: mParamEnd@var719 =@expr1073745109 end@var749 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745110 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745111 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745112 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745113 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745114 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745115 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745116 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745117 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745118 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var750 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var751 ) const {
243:
244:
245: return (@expr3295 (@expr3295 mFlags@var720 &@expr1073745121 fFamilyMask ) &@expr1073745122 (@expr3295 decl@var751 .@expr1073745124 mFlags@var752 &@expr1073745125 fFamilyMask ) ) !=@expr1073745126 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var753 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var754 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var755 , const unsigned long numberOfArguments@var756 , bool variadic@var757 , const char patternAfter@var758 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var759 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var760 , int & namepos@var761 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var762 , int & namepos@var763 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var764 , int & namepos@var765 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var766 ,
306: bool & codeWithTemplates@var767 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var768 , bool isTemplate@var769 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var770 = nullptr , Token * backToken@var771 = nullptr , bool isTemplate@var772 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var773 , Token * end@var774 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var775 , const std :: string & scope@var776 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var777 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var778 ,
393: const std :: list < const Token * > & specializations@var779 ,
394: const std :: time_t maxtime@var780 ,
395: std :: set < std :: string > & expandedtemplates@var781 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var782 , const Token * tok@var783 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var784 , const Token * tok@var785 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var786 ,
422: const TokenAndName & templateInstantiation@var787 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var788 ,
424: const std :: string & newName@var789 ,
425: bool copy@var790 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var791 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var792 ,
435: const std :: string & newName@var793 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var794 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var795 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var796 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var797 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var798 ,
458: const Token * templateInstantiationNameToken@var799 ,
459: const std :: list < const Token * > & specializations@var800 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var801 , const Token * end@var802 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var803 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var804 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var805 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var806 ,
487: const std :: string & indent@var807 = "    " ) const ;
488: void printOut ( const std :: string & text@var808 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var809 ;
491: TokenList & mTokenList@var810 ;
492: const Settings * mSettings@var811 ;
493: ErrorLogger * mErrorLogger@var812 ;
494: bool mChanged@var813 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var814 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var815 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var816 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var817 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var818 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var819 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var820 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var821 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var822 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var823 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var824 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var825 ;
57: Token * back@var826 ;
58: const TokenList * list@var827 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var828 , const Token * bodyEnd_@var829 , const std :: set < std :: string > & usingNamespaces_@var830 = std :: set < std :: string > ( ) ) : name@var831 ( name_@var828 ) , bodyEnd@var832 ( bodyEnd_@var829 ) , usingNamespaces@var833 ( usingNamespaces_@var830 ) { }
63: std :: string name@var831 ;
64: const Token * const bodyEnd@var832 ;
65: std :: set < std :: string > usingNamespaces@var833 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var834 ;
70: int mFileIndex@var835 ;
71: int mLineNumber@var836 ;
72: int mColumn@var837 ;
73: int mExprId@var838 ;
74:
75:
76: Token * mAstOperand1@var839 ;
77: Token * mAstOperand2@var840 ;
78: Token * mAstParent@var841 ;
79:
80:
81: const Scope * mScope@var842 ;
82: union {
83: const Function * mFunction@var843 ;
84: const Variable * mVariable@var844 ;
85: const :: Type * mType@var845 ;
86: const Enumerator * mEnumerator@var846 ;
87: } ;
88:
|
92:
93: int mProgressValue@var847 ;
94:
|
97:
98: int mIndex@var848 ;
99:
100:
101: std :: string * mOriginalName@var849 ;
102:
103:
104: ValueType * mValueType@var850 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var851 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var852 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var853 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var854 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var855 ;
119: long long value@var856 ;
120: struct CppcheckAttributes * next@var857 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var858 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var859 ;
126:
127:
128: unsigned char mBits@var860 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var861 , long long value@var862 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var863 , long long * value@var864 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var834 ( 0 )
135: , mFileIndex@var835 ( 0 )
136: , mLineNumber@var836 ( 0 )
137: , mColumn@var837 ( 0 )
138: , mExprId@var838 ( 0 )
139: , mAstOperand1@var839 ( nullptr )
140: , mAstOperand2@var840 ( nullptr )
141: , mAstParent@var841 ( nullptr )
142: , mScope@var842 ( nullptr )
143: , mFunction@var843 ( nullptr )
144: , mProgressValue@var847 ( 0 )
145: , mIndex@var848 ( 0 )
146: , mOriginalName@var849 ( nullptr )
147: , mValueType@var850 ( nullptr )
148: , mValues@var851 ( nullptr )
149: , mTemplateSimplifierPointers@var853 ( nullptr )
150: , mScopeInfo@var854 ( nullptr )
151: , mCppcheckAttributes@var858 ( nullptr )
152: , mCpp11init@var859 ( Cpp11init :: UNKNOWN )
153: , mBits@var860 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var865 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var866 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var867 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var868 ) {
199: mStr@var1080 =@expr1073745127 s@var868 ;
200: mImpl@var1086 .@expr1073745128 mVarId@var1117 =@expr1073745129 0 ;
201:
202: update_property_info (@expr1073745130 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var869 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1080 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var870 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var871 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var872 ) const ;
236: Token * tokAt ( int index@var873 ) {
237: return const_cast < Token *@expr3307 > (@expr1073745132 const_cast < const Token *@expr3307 > (@expr1073745134 this@expr1073745135 ) .@expr1073745136 tokAt (@expr1073745137 index@var873 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var874 ) const ;
245: Token * linkAt ( int index@var875 ) {
246: return const_cast < Token *@expr3314 > (@expr1073745139 const_cast < const Token *@expr3314 > (@expr1073745141 this@expr1073745142 ) .@expr1073745143 linkAt (@expr1073745144 index@var875 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var876 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var877 , const char ( & pattern@var878 ) [ count ] ) {
276: return simpleMatch (@expr1073745146 tok@var877 , pattern@var878 , count@expr1073745145 -@expr1073745147 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var879 , const char pattern@var880 [ ] , unsigned long pattern_len@var881 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var882 , const char pattern@var883 [ ] , int varid@var884 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var885 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var886 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var887 , const Settings * const settings@var888 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var889 , long long index@var890 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1086 .@expr1073745148 mValueType@var1118 ;
366: }
367: void setValueType ( ValueType * vt@var891 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var892 ; top@var892 =@expr1073745149 this@expr1073745150 ;
371: while (@expr1073745151 top@var892 &&@expr1073745152 !@expr1073745153 Token ::@expr1073745154 Match (@expr1073745155 top@var892 .@expr3332 astParent (@expr3333 ) , ",|(" ) ) {
372: top@var892 =@expr1073745158 top@var892 .@expr3332 astParent (@expr3333 ) ; }
373: return top@var892 ?@expr1073745161 top@var892 .@expr1073745162 mImpl@var893 .@expr1073745163 mValueType@var894 :@expr1073745164 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1084 ;
378: }
379: void tokType ( Token :: Type t@var895 ) {
380: mTokType@var1084 =@expr1073745165 t@var895 ;
381:
382: const bool memoizedIsName@var896 =@expr1073745166 mTokType@var1084 ==@expr1073745167 eName ||@expr1073745168 mTokType@var1084 ==@expr1073745169 eType ||@expr1073745170 mTokType@var1084 ==@expr1073745171 eVariable ||@expr1073745172
383: mTokType@var1084 ==@expr1073745173 eFunction ||@expr1073745174 mTokType@var1084 ==@expr1073745175 eKeyword ||@expr1073745176 mTokType@var1084 ==@expr3353 eBoolean ||@expr1073745178
384: mTokType@var1084 ==@expr3355 eEnumerator ;
385: setFlag (@expr1073745180 fIsName , memoizedIsName@var896 ) ;
386:
387: const bool memoizedIsLiteral@var897 =@expr1073745181 mTokType@var1084 ==@expr1073745182 eNumber ||@expr1073745183 mTokType@var1084 ==@expr1073745184 eString ||@expr1073745185 mTokType@var1084 ==@expr1073745186 eChar ||@expr1073745187
388: mTokType@var1084 ==@expr3353 eBoolean ||@expr1073745189 mTokType@var1084 ==@expr1073745190 eLiteral ||@expr1073745191 mTokType@var1084 ==@expr3355 eEnumerator ;
389: setFlag (@expr1073745193 fIsLiteral , memoizedIsLiteral@var897 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1084 ==@expr1073745194 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745195 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1085 ==@expr1073745196 fIsName &&@expr1073745197 mTokType@var1084 ==@expr1073745198 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745199 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1084 ==@expr1073745200 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1084 ==@expr1073745201 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745202 isConstOp (@expr1073745203 ) ||@expr1073745204
412: isAssignmentOp (@expr1073745205 ) ||@expr1073745206
413: mTokType@var1084 ==@expr1073745207 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745208 isArithmeticalOp (@expr1073745209 ) ||@expr1073745210
417: mTokType@var1084 ==@expr1073745211 eLogicalOp ||@expr1073745212
418: mTokType@var1084 ==@expr1073745213 eComparisonOp ||@expr1073745214
419: mTokType@var1084 ==@expr1073745215 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745216 ) ||@expr1073745217
423: mTokType@var1084 ==@expr1073745218 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1084 ==@expr1073745219 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1084 ==@expr1073745220 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1084 ==@expr1073745221 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1084 ==@expr1073745222 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1084 ==@expr1073745223 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745224 ) !=@expr1073745225 nullptr &&@expr1073745226 astOperand2 (@expr1073745227 ) !=@expr1073745228 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var898 ) const {
444: return s@var898 ==@expr1073745229 mStr@var1080 &&@expr1073745230 astOperand1 (@expr1073745231 ) !=@expr1073745232 nullptr &&@expr1073745233 astOperand2 (@expr1073745234 ) ==@expr1073745235 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1085 ;
450: }
451: void flags ( const unsigned int flags_@var899 ) {
452: mFlags@var1085 =@expr1073745236 flags_@var899 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745237 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var900 ) {
458: setFlag (@expr1073745238 fIsUnsigned , sign@var900 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745239 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var901 ) {
464: setFlag (@expr1073745240 fIsSigned , sign@var901 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745241 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var902 ) {
470: setFlag (@expr1073745242 fIsPointerCompare , b@var902 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745243 fIsLong ) ;
474: }
475: void isLong ( bool size@var903 ) {
476: setFlag (@expr1073745244 fIsLong , size@var903 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745245 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var904 ) {
482: setFlag (@expr1073745246 fIsStandardType , b@var904 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745247 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var905 ) {
488: setFlag (@expr1073745248 fIsExpandedMacro , m@var905 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745249 fIsCast ) ;
492: }
493: void isCast ( bool c@var906 ) {
494: setFlag (@expr1073745250 fIsCast , c@var906 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745251 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var907 ) {
500: setFlag (@expr1073745252 fIsAttributeConstructor , ac@var907 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745253 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var908 ) {
506: setFlag (@expr1073745254 fIsAttributeDestructor , value@var908 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745255 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var909 ) {
512: setFlag (@expr1073745256 fIsAttributeUnused , unused@var909 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745257 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var910 ) {
518: setFlag (@expr1073745258 fIsAttributeUsed , unused@var910 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745259 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var911 ) {
524: setFlag (@expr1073745260 fIsAttributePure , value@var911 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745261 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var912 ) {
530: setFlag (@expr1073745262 fIsAttributeConst , value@var912 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745263 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var913 ) {
536: setFlag (@expr1073745264 fIsAttributeNoreturn , value@var913 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745265 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var914 ) {
542: setFlag (@expr1073745266 fIsAttributeNothrow , value@var914 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745267 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var915 ) {
548: setFlag (@expr1073745268 fIsAttributePacked , value@var915 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745269 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var916 ) {
554: setFlag (@expr1073745270 fIsAttributeNodiscard , value@var916 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745271 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var917 ) {
560: setFlag (@expr1073745272 fIsAttributeMaybeUnused , value@var917 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var918 , long long value@var919 ) {
563: mImpl@var1086 .@expr1073745273 setCppcheckAttribute (@expr1073745274 type@var918 , value@var919 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var920 , long long * value@var921 ) const {
566: return mImpl@var1086 .@expr1073745275 getCppcheckAttribute (@expr1073745276 type@var920 , value@var921 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745277 mImpl@var1086 .@expr1073745278 mCppcheckAttributes@var1119 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745279 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745280 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var922 ) {
578: setFlag (@expr1073745281 fIsOperatorKeyword , value@var922 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745282 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var923 ) {
584: setFlag (@expr1073745283 fIsComplex , value@var923 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745284 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var924 ) {
590: setFlag (@expr1073745285 fIsEnumType , value@var924 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745286 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var925 ) {
596: setFlag (@expr1073745287 fAtAddress , b@var925 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745288 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var926 ) {
602: setFlag (@expr1073745289 fIncompleteVar , b@var926 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745290 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var927 ) {
609: setFlag (@expr1073745291 fIsIncompleteConstant , b@var927 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745292 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var928 ) {
616: setFlag (@expr1073745293 fConstexpr , b@var928 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745294 fExternC ) ;
621: }
622: void isExternC ( bool b@var929 ) {
623: setFlag (@expr1073745295 fExternC , b@var929 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745296 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var930 ) {
630: setFlag (@expr1073745297 fIsSplitVarDeclComma , b@var930 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745298 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var931 ) {
637: setFlag (@expr1073745299 fIsSplitVarDeclEq , b@var931 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745300 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var932 ) {
644: setFlag (@expr1073745301 fIsImplicitInt , b@var932 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745302 fIsInline ) ;
649: }
650: void isInline ( bool b@var933 ) {
651: setFlag (@expr1073745303 fIsInline , b@var933 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745304 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var934 ) {
658: setFlag (@expr1073745305 fIsRemovedVoidParameter , b@var934 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745306 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var935 ) {
665: setFlag (@expr1073745307 fIsTemplate , b@var935 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745308 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var936 ) {
672: setFlag (@expr1073745309 fIsSimplifedScope , b@var936 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1086 .@expr1073745310 mBits@var1120 >@expr1073745311 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1086 .@expr1073745312 mBits@var1120 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1086 .@expr1073745313 mTemplateSimplifierPointers@var1121 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var937 ) {
685: if (@expr1073745314 !@expr1073745315 mImpl@var1086 .@expr3492 mTemplateSimplifierPointers@var1121 ) {
686: mImpl@var1086 .@expr3492 mTemplateSimplifierPointers@var1121 =@expr1073745318 new std ::@expr1073745319 set < TemplateSimplifier ::@expr1073745320 TokenAndName *@expr1073745321 > ; }
687: mImpl@var1086 .@expr3492 mTemplateSimplifierPointers@var1121 .@expr1073745323 insert (@expr1073745324 tokenAndName@var937 ) ;
688: }
689: void setBits ( const unsigned char b@var938 ) {
690: mImpl@var1086 .@expr1073745325 mBits@var1120 =@expr1073745326 b@var938 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3503 (@expr3503 (@expr3503 mTokType@var1084 ==@expr1073745330 eString ) &&@expr1073745331 isPrefixStringCharLiteral (@expr1073745332 mStr@var1080 , '"' , "u8" ) ) ||@expr1073745333
695: (@expr3503 (@expr3503 mTokType@var1084 ==@expr1073745336 eChar ) &&@expr1073745337 isPrefixStringCharLiteral (@expr1073745338 mStr@var1080 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3515 (@expr3515 (@expr3515 mTokType@var1084 ==@expr1073745342 eString ) &&@expr1073745343 isPrefixStringCharLiteral (@expr1073745344 mStr@var1080 , '"' , "u" ) ) ||@expr1073745345
700: (@expr3515 (@expr3515 mTokType@var1084 ==@expr1073745348 eChar ) &&@expr1073745349 isPrefixStringCharLiteral (@expr1073745350 mStr@var1080 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3527 (@expr3527 (@expr3527 mTokType@var1084 ==@expr1073745354 eString ) &&@expr1073745355 isPrefixStringCharLiteral (@expr1073745356 mStr@var1080 , '"' , "U" ) ) ||@expr1073745357
705: (@expr3527 (@expr3527 mTokType@var1084 ==@expr1073745360 eChar ) &&@expr1073745361 isPrefixStringCharLiteral (@expr1073745362 mStr@var1080 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3539 (@expr3539 (@expr3539 mTokType@var1084 ==@expr1073745366 eString ) &&@expr1073745367 isPrefixStringCharLiteral (@expr1073745368 mStr@var1080 , '"' , "" ) ) ||@expr1073745369
710: (@expr3539 (@expr3539 mTokType@var1084 ==@expr1073745372 eChar ) &&@expr1073745373 isPrefixStringCharLiteral (@expr1073745374 mStr@var1080 , '\'' , "" ) &&@expr1073745375 mStr@var1080 .@expr1073745376 length (@expr1073745377 ) ==@expr1073745378 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3555 (@expr3555 (@expr3555 mTokType@var1084 ==@expr1073745382 eChar ) &&@expr1073745383 isPrefixStringCharLiteral (@expr1073745384 mStr@var1080 , '\'' , "" ) ) &&@expr1073745385
715: (@expr3555 mStr@var1080 .@expr1073745387 length (@expr1073745388 ) >@expr1073745389 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745390 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var939 ) {
738: setFlag (@expr1073745391 fIsTemplateArg , value@var939 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var940 , const char ( & pattern@var941 ) [ count ] ) {
743: return findsimplematch (@expr1073745393 startTok@var940 , pattern@var941 , count@expr1073745392 -@expr1073745394 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var942 , const char pattern@var943 [ ] , unsigned long pattern_len@var944 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var945 , const char ( & pattern@var946 ) [ count ] , const Token * const end@var947 ) {
749: return findsimplematch (@expr1073745396 startTok@var945 , pattern@var946 , count@expr1073745395 -@expr1073745397 1 , end@var947 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var948 , const char pattern@var949 [ ] , unsigned long pattern_len@var950 , const Token * const end@var951 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var952 , const char pattern@var953 [ ] , const int varId@var954 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var955 , const char pattern@var956 [ ] , const Token * const end@var957 , const int varId@var958 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var959 , const char ( & pattern@var960 ) [ count ] ) {
758: return findsimplematch (@expr1073745399 startTok@var959 , pattern@var960 , count@expr1073745398 -@expr1073745400 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var961 , const char pattern@var962 [ ] , unsigned long pattern_len@var963 ) {
761: return const_cast < Token *@expr3577 > (@expr1073745402 findsimplematch (@expr1073745403 const_cast < const Token *@expr3577 > (@expr1073745405 startTok@var961 ) , pattern@var962 , pattern_len@var963 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var964 , const char ( & pattern@var965 ) [ count ] , const Token * const end@var966 ) {
765: return findsimplematch (@expr1073745407 startTok@var964 , pattern@var965 , count@expr1073745406 -@expr1073745408 1 , end@var966 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var967 , const char pattern@var968 [ ] , unsigned long pattern_len@var969 , const Token * const end@var970 ) {
768: return const_cast < Token *@expr3585 > (@expr1073745410 findsimplematch (@expr1073745411 const_cast < const Token *@expr3585 > (@expr1073745413 startTok@var967 ) , pattern@var968 , pattern_len@var969 , end@var970 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var971 , const char pattern@var972 [ ] , const int varId@var973 = 0 ) {
772: return const_cast < Token *@expr3590 > (@expr1073745415 findmatch (@expr1073745416 const_cast < const Token *@expr3590 > (@expr1073745418 startTok@var971 ) , pattern@var972 , varId@var973 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var974 , const char pattern@var975 [ ] , const Token * const end@var976 , const int varId@var977 = 0 ) {
775: return const_cast < Token *@expr3595 > (@expr1073745420 findmatch (@expr1073745421 const_cast < const Token *@expr3595 > (@expr1073745423 startTok@var974 ) , pattern@var975 , end@var976 , varId@var977 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var978 , const char * haystack@var979 , int varid@var980 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1086 .@expr1073745424 mFileIndex@var1122 ;
796: }
797: void fileIndex ( int indexOfFile@var981 ) {
798: mImpl@var1086 .@expr1073745425 mFileIndex@var1122 =@expr1073745426 indexOfFile@var981 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1086 .@expr1073745427 mLineNumber@var1123 ;
803: }
804: void linenr ( int lineNumber@var982 ) {
805: mImpl@var1086 .@expr1073745428 mLineNumber@var1123 =@expr1073745429 lineNumber@var982 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1086 .@expr1073745430 mColumn@var1124 ;
810: }
811: void column ( int c@var983 ) {
812: mImpl@var1086 .@expr1073745431 mColumn@var1124 =@expr1073745432 c@var983 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1081 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var984 , const Token * end@var985 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var986 , const std :: string & originalNameStr@var987 = emptyString@var1 , bool prepend@var988 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var989 , const std :: string & originalNameStr@var990 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745433 tokenStr@var989 , originalNameStr@var990 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1082 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1086 .@expr1073745434 mVarId@var1117 ;
851: }
852: void varId ( int id@var991 ) {
853: mImpl@var1086 .@expr1073745435 mVarId@var1117 =@expr1073745436 id@var991 ;
854: if (@expr1073745437 id@var991 !=@expr1073745438 0 ) {
855: tokType (@expr1073745439 eVariable ) ;
856: isStandardType (@expr1073745440 false ) ;
857: } else {
858: update_property_info (@expr1073745441 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745442 mImpl@var1086 .@expr3619 mExprId@var1125 ) {
864: return mImpl@var1086 .@expr3619 mExprId@var1125 ; }
865: return mImpl@var1086 .@expr1073745445 mVarId@var1117 ;
866: }
867: void exprId ( int id@var992 ) {
868: mImpl@var1086 .@expr1073745446 mExprId@var1125 =@expr1073745447 id@var992 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var993 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var994 , const std :: vector < std :: string > & fileNames@var995 ) const ;
888:
|
891:
892: void printLines ( int lines@var996 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var997 , Token * start@var998 , Token * end@var999 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1000 ; varid@var1000 = false ;
905: bool exprid@var1001 ; exprid@var1001 = false ;
906: bool idtype@var1002 ; idtype@var1002 = false ;
907: bool attributes@var1003 ; attributes@var1003 = false ;
908: bool macro@var1004 ; macro@var1004 = false ;
909: bool linenumbers@var1005 ; linenumbers@var1005 = false ;
910: bool linebreaks@var1006 ; linebreaks@var1006 = false ;
911: bool files@var1007 ; files@var1007 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1008 ;
914: options@var1008 .@expr1073745448 attributes@var1009 =@expr1073745449 true ;
915: options@var1008 .@expr1073745450 macro@var1010 =@expr1073745451 true ;
916: options@var1008 .@expr1073745452 linenumbers@var1011 =@expr1073745453 true ;
917: options@var1008 .@expr1073745454 linebreaks@var1012 =@expr1073745455 true ;
918: options@var1008 .@expr1073745456 files@var1013 =@expr1073745457 true ;
919: return options@var1008 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1014 ; options@var1014 =@expr1073745458 forDebug (@expr1073745459 ) ;
923: options@var1014 .@expr1073745460 varid@var1015 =@expr1073745461 true ;
924: return options@var1014 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1016 ; options@var1016 =@expr1073745462 forDebug (@expr1073745463 ) ;
928: options@var1016 .@expr1073745464 exprid@var1017 =@expr1073745465 true ;
929: return options@var1016 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1018 ; options@var1018 =@expr1073745466 forDebug (@expr1073745467 ) ;
933: options@var1018 .@expr1073745468 exprid@var1019 =@expr1073745469 true ;
934: options@var1018 .@expr1073745470 varid@var1020 =@expr1073745471 true ;
935: options@var1018 .@expr1073745472 idtype@var1021 =@expr1073745473 true ;
936: return options@var1018 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1022 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1023 , bool attributes@var1024 , bool macro@var1025 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1026 , const std :: vector < std :: string > * fileNames@var1027 = nullptr , const Token * end@var1028 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1029 , bool attributes@var1030 = true ) const ;
952: std :: string stringifyList ( bool varid@var1031 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1032 , bool attributes@var1033 , bool linenumbers@var1034 , bool linebreaks@var1035 , bool files@var1036 , const std :: vector < std :: string > * fileNames@var1037 = nullptr , const Token * end@var1038 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1039 ) {
983: mLink@var1083 =@expr1073745474 linkToToken@var1039 ;
984: if (@expr1073745475 mStr@var1080 ==@expr1073745476 "<" ||@expr1073745477 mStr@var1080 ==@expr1073745478 ">" ) {
985: update_property_info (@expr1073745479 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1083 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1040 ) {
1006: mImpl@var1086 .@expr1073745480 mScope@var1126 =@expr1073745481 s@var1040 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1086 .@expr1073745482 mScope@var1126 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1041 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1084 ==@expr1073745483 eFunction ||@expr1073745484 mTokType@var1084 ==@expr1073745485 eLambda ?@expr1073745486 mImpl@var1086 .@expr1073745487 mFunction@var1127 :@expr1073745488 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1042 ) {
1034: mImpl@var1086 .@expr1073745489 mVariable@var1128 =@expr1073745490 v@var1042 ;
1035: if (@expr1073745491 v@var1042 ||@expr1073745492 mImpl@var1086 .@expr1073745493 mVarId@var1117 ) {
1036: tokType (@expr1073745494 eVariable ) ; }
1037: else { if (@expr1073745495 mTokType@var1084 ==@expr1073745496 eVariable ) {
1038: tokType (@expr1073745497 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1084 ==@expr1073745498 eVariable ?@expr1073745499 mImpl@var1086 .@expr1073745500 mVariable@var1128 :@expr1073745501 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1043 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1084 ==@expr1073745502 eType ?@expr1073745503 mImpl@var1086 .@expr1073745504 mType@var1129 :@expr1073745505 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1044 , const Token * * typeTok@var1045 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1046 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1047 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1084 ==@expr1073745506 eEnumerator ?@expr1073745507 mImpl@var1086 .@expr1073745508 mEnumerator@var1130 :@expr1073745509 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1048 ) {
1079: mImpl@var1086 .@expr1073745510 mEnumerator@var1130 =@expr1073745511 e@var1048 ;
1080: if (@expr1073745512 e@var1048 ) {
1081: tokType (@expr1073745513 eEnumerator ) ; }
1082: else { if (@expr1073745514 mTokType@var1084 ==@expr1073745515 eEnumerator ) {
1083: tokType (@expr1073745516 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1049 , Token * end@var1050 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1051 , Token * srcEnd@var1052 , Token * newLocation@var1053 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1086 .@expr1073745517 mProgressValue@var1131 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1054 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1086 .@expr3694 mOriginalName@var1132 ?@expr1073745519 *@expr1073745520 mImpl@var1086 .@expr3694 mOriginalName@var1132 :@expr1073745522 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1086 .@expr3699 mValues@var1105 ?@expr1073745524 *@expr1073745525 mImpl@var1086 .@expr3699 mValues@var1105 :@expr1073745527 TokenImpl ::@expr1073745528 mEmptyValueList@var852 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1055 ) {
1164: if (@expr1073745529 !@expr1073745530 mImpl@var1086 .@expr3707 mOriginalName@var1132 ) {
1165: mImpl@var1086 .@expr3707 mOriginalName@var1132 =@expr1073745533 new std ::@expr1073745534 string (@expr1073745535 name@var1055 ) ; }
1166: else {
1167: *@expr1073745536 mImpl@var1086 .@expr3707 mOriginalName@var1132 =@expr1073745538 name@var1055 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1056 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1057 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1058 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1086 .@expr1073745540 mValues@var1105 .@expr1073745541 front (@expr1073745542 ) .@expr1073745543 intvalue@expr1073745539 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1059 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1060 , long long path@var1061 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1062 , const Settings * settings@var1063 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1064 , const Settings * settings@var1065 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1066 , int argnr@var1067 , const Settings * settings@var1068 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1069 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1070 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1071 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1072 ) {
1200: if (@expr1073745544 mImpl@var1086 .@expr3721 mValues@var1105 ) {
1201: mImpl@var1086 .@expr3721 mValues@var1105 .@expr1073745547 remove_if (@expr1073745548 pred@var1072 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1086 .@expr1073745549 mIndex@var1133 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1073 ) {
1213: mNext@var1081 =@expr1073745550 nextToken@var1073 ;
1214: }
1215: void previous ( Token * previousToken@var1074 ) {
1216: mPrevious@var1082 =@expr1073745551 previousToken@var1074 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1075 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1076 , const char * word@var1077 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1078 , char c@var1079 ) ;
1235:
1236: std :: string mStr@var1080 ;
1237:
1238: Token * mNext@var1081 ;
1239: Token * mPrevious@var1082 ;
1240: Token * mLink@var1083 ;
1241:
1242: enum Anonymous1 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1084 ;
1283:
1284: uint64_t mFlags@var1085 ;
1285:
1286: TokenImpl * mImpl@var1086 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1087 ) const {
1294: return (@expr3728 (@expr3728 mFlags@var1085 &@expr1073745554 flag_@var1087 ) !=@expr1073745555 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1088 , bool state_@var1089 ) {
1303: mFlags@var1085 =@expr1073745556 state_@var1089 ?@expr1073745557 mFlags@var1085 |@expr1073745558 flag_@var1088 :@expr1073745559 mFlags@var1085 &@expr1073745560 ~@expr1073745561 flag_@var1088 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1090 , const int indent1@var1091 = 0 , const int indent2@var1092 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1093 ) ;
1321: void astOperand2 ( Token * tok@var1094 ) ;
1322: void astParent ( Token * tok@var1095 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1086 .@expr1073745562 mAstOperand1@var1096 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1086 .@expr1073745563 mAstOperand1@var1096 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1086 .@expr1073745564 mAstOperand2@var1097 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1086 .@expr1073745565 mAstOperand2@var1097 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1086 .@expr1073745566 mAstParent@var1098 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1086 .@expr1073745567 mAstParent@var1098 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745568 !@expr1073745569 astParent (@expr3746 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745571 this@expr3748 ==@expr1073745573 astParent (@expr3746 ) .@expr3751 astOperand1 (@expr3752 ) ) {
1346: return astParent (@expr3746 ) .@expr3754 astOperand2 (@expr3755 ) ; }
1347: else { if (@expr1073745580 this@expr3748 ==@expr1073745581 astParent (@expr3746 ) .@expr3754 astOperand2 (@expr3755 ) ) {
1348: return astParent (@expr3746 ) .@expr3751 astOperand1 (@expr3752 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745588 !@expr1073745589 astParent (@expr3766 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745591 this@expr3768 ==@expr1073745593 astParent (@expr3766 ) .@expr3771 astOperand1 (@expr3772 ) ) {
1356: return astParent (@expr3766 ) .@expr3774 astOperand2 (@expr3775 ) ; }
1357: else { if (@expr1073745600 this@expr3768 ==@expr1073745601 astParent (@expr3766 ) .@expr3774 astOperand2 (@expr3775 ) ) {
1358: return astParent (@expr3766 ) .@expr3771 astOperand1 (@expr3772 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1099 ; ret@var1099 =@expr1073745608 this@expr1073745609 ;
1364: while (@expr1073745610 ret@var1099 .@expr3787 mImpl@var1100 .@expr3788 mAstParent@var1101 ) {
1365: ret@var1099 =@expr1073745613 ret@var1099 .@expr3787 mImpl@var1100 .@expr3788 mAstParent@var1101 ; }
1366: return ret@var1099 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1102 ; ret@var1102 =@expr1073745616 this@expr1073745617 ;
1371: while (@expr1073745618 ret@var1102 .@expr3795 mImpl@var1103 .@expr3796 mAstParent@var1104 ) {
1372: ret@var1102 =@expr1073745621 ret@var1102 .@expr3795 mImpl@var1103 .@expr3796 mAstParent@var1104 ; }
1373: return ret@var1102 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1086 .@expr1073745624 mAstOperand1@var1096 =@expr1073745625 mImpl@var1086 .@expr1073745626 mAstOperand2@var1097 =@expr1073745627 mImpl@var1086 .@expr1073745628 mAstParent@var1098 =@expr1073745629 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1086 .@expr3806 mValues@var1105 ;
1393: mImpl@var1086 .@expr3806 mValues@var1105 =@expr1073745632 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1106 = "" ) const {
1397: std ::@expr1073745633 string ret@var1107 ;
1398: if (@expr1073745634 mImpl@var1086 .@expr3811 mAstOperand1@var1096 ) {
1399: ret@var1107 =@expr1073745636 mImpl@var1086 .@expr3811 mAstOperand1@var1096 .@expr1073745638 astString (@expr1073745639 sep@var1106 ) ; }
1400: if (@expr1073745640 mImpl@var1086 .@expr3817 mAstOperand2@var1097 ) {
1401: ret@var1107 +=@expr1073745642 mImpl@var1086 .@expr3817 mAstOperand2@var1097 .@expr1073745644 astString (@expr1073745645 sep@var1106 ) ; }
1402: return ret@var1107 +@expr1073745646 sep@var1106 +@expr1073745647 mStr@var1080 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1108 , bool xml@var1109 , const std :: vector < std :: string > & fileNames@var1110 , std :: ostream & out@var1111 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1112 , std :: ostream & out@var1113 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1114 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1115 ) const {
1419: mImpl@var1086 .@expr1073745648 mCpp11init@var1116 =@expr1073745649 cpp11init@var1115 ?@expr1073745650 TokenImpl ::@expr3827 Cpp11init ::@expr1073745652 CPP11INIT :@expr1073745653 TokenImpl ::@expr3827 Cpp11init ::@expr1073745655 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1086 .@expr1073745656 mCpp11init@var1116 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1134 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1135 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1136 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1137 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1138 ( nullptr ) , num@var1139 ( 0 ) , known@var1140 ( true ) { }
62:
63: const Token * tok@var1138 ;
64: long long num@var1139 ;
65: bool known@var1140 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1141 ;
72: const Scope * classScope@var1142 ;
73: const Scope * enclosingScope@var1143 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1144 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1146 ( nullptr ) , nameTok@var1147 ( nullptr ) , access@var1148 ( AccessControl :: Public ) , isVirtual@var1149 ( false ) { }
82:
83: std :: string name@var1145 ;
84: const Type * type@var1146 ;
85: const Token * nameTok@var1147 ;
86: AccessControl access@var1148 ;
87: bool isVirtual@var1149 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1150 ) const {
90: return this@expr1073745657 .@expr1073745658 type@var1146 <@expr1073745659 rhs@var1150 .@expr1073745660 type@var1151 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1152 ( nullptr ) , nameEnd@var1153 ( nullptr ) , type@var1154 ( nullptr ) { }
97:
98: const Token * nameStart@var1152 ;
99: const Token * nameEnd@var1153 ;
100: const Type * type@var1154 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1155 ;
104: std :: vector < FriendInfo > friendList@var1156 ;
105:
106: const Token * typeStart@var1157 ;
107: const Token * typeEnd@var1158 ;
108: long long sizeOf@var1159 ;
109:
110: Type ( const Token * classDef_@var1160 = nullptr , const Scope * classScope_@var1161 = nullptr , const Scope * enclosingScope_@var1162 = nullptr ) :
111: classDef@var1141 ( classDef_@var1160 ) ,
112: classScope@var1142 ( classScope_@var1161 ) ,
113: enclosingScope@var1143 ( enclosingScope_@var1162 ) ,
114: needInitialization@var1144 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1157 ( nullptr ) ,
116: typeEnd@var1158 ( nullptr ) ,
117: sizeOf@var1159 ( 0 ) {
118: if (@expr1073745661 classDef_@var1160 &&@expr1073745662 classDef_@var1160 .@expr3839 str (@expr3840 ) ==@expr1073745665 "enum" ) {
119: needInitialization@var1144 =@expr1073745666 NeedInitialization ::@expr1073745667 True ; }
120: else { if (@expr1073745668 classDef_@var1160 &&@expr1073745669 classDef_@var1160 .@expr3839 str (@expr3840 ) ==@expr1073745672 "using" ) {
121: typeStart@var1157 =@expr1073745673 classDef@var1141 .@expr1073745674 tokAt (@expr1073745675 3 ) ;
122: typeEnd@var1158 =@expr1073745676 typeStart@var1157 ;
123: while (@expr1073745677 typeEnd@var1158 .@expr3854 next (@expr3855 ) &&@expr1073745680 typeEnd@var1158 .@expr3854 next (@expr3855 ) .@expr1073745683 str (@expr1073745684 ) !=@expr1073745685 ";" ) {
124: typeEnd@var1158 =@expr1073745686 typeEnd@var1158 .@expr3854 next (@expr3855 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1141 ?@expr1073745689 classDef@var1141 .@expr1073745690 str (@expr1073745691 ) :@expr1073745692 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1141 &&@expr1073745693 classDef@var1141 .@expr1073745694 str (@expr1073745695 ) ==@expr1073745696 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1163 , const Token * tok1@var1164 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1165 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1166 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1167 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1168 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1169 ) : scope@var1170 ( scope_@var1169 ) , name@var1171 ( nullptr ) , value@var1172 ( 0 ) , start@var1173 ( nullptr ) , end@var1174 ( nullptr ) , value_known@var1175 ( false ) { }
167: const Scope * scope@var1170 ;
168: const Token * name@var1171 ;
169: long long value@var1172 ;
170: const Token * start@var1173 ;
171: const Token * end@var1174 ;
172: bool value_known@var1175 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous2 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1176 ) const {
204: return (@expr3873 (@expr3873 mFlags@var1212 &@expr1073745699 flag_@var1176 ) !=@expr1073745700 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1177 , bool state_@var1178 ) {
213: mFlags@var1212 =@expr1073745701 state_@var1178 ?@expr1073745702 mFlags@var1212 |@expr1073745703 flag_@var1177 :@expr1073745704 mFlags@var1212 &@expr1073745705 ~@expr1073745706 flag_@var1177 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1179 , bool * isContainer@var1180 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1181 , const Token * start_@var1182 , const Token * end_@var1183 ,
226: int index_@var1184 , AccessControl access_@var1185 , const Type * type_@var1186 ,
227: const Scope * scope_@var1187 , const Settings * settings@var1188 )
228: : mNameToken@var1207 ( name_@var1181 ) ,
229: mTypeStartToken@var1208 ( start_@var1182 ) ,
230: mTypeEndToken@var1209 ( end_@var1183 ) ,
231: mIndex@var1210 ( index_@var1184 ) ,
232: mAccess@var1211 ( access_@var1185 ) ,
233: mFlags@var1212 ( 0 ) ,
234: mType@var1213 ( type_@var1186 ) ,
235: mScope@var1214 ( scope_@var1187 ) ,
236: mValueType@var1215 ( nullptr ) {
237: evaluate (@expr1073745707 settings@var1188 ) ;
238: }
239:
240: Variable ( const Token * name_@var1189 , const std :: string & clangType@var1190 , const Token * typeStart@var1191 ,
241: const Token * typeEnd@var1192 , int index_@var1193 , AccessControl access_@var1194 ,
242: const Type * type_@var1195 , const Scope * scope_@var1196 ) ;
243:
244: Variable ( const Variable & var@var1197 , const Scope * scope@var1198 ) ;
245:
246: Variable ( const Variable & var@var1199 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1200 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1207 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1208 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1209 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745708 mNameToken@var1207 ) {
300: return mNameToken@var1207 .@expr1073745709 str (@expr1073745710 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745711 mNameToken@var1207 ) {
312: return mNameToken@var1207 .@expr1073745712 varId (@expr1073745713 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1210 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1211 ==@expr1073745714 AccessControl ::@expr1073745715 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1211 ==@expr1073745716 AccessControl ::@expr1073745717 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1211 ==@expr1073745718 AccessControl ::@expr1073745719 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1211 ==@expr1073745720 AccessControl ::@expr1073745721 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1211 ==@expr1073745722 AccessControl ::@expr1073745723 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1211 ==@expr1073745724 AccessControl ::@expr1073745725 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745727 mAccess@var1211 ==@expr1073745728 AccessControl ::@expr1073745729 Local@expr1073745726 ) &&@expr1073745730 !@expr1073745731 isExtern (@expr1073745732 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745733 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745734 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745735 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745736 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745737 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1211 ==@expr1073745738 AccessControl ::@expr1073745739 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745740 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745741 fIsArray ) &&@expr1073745742 !@expr1073745743 getFlag (@expr1073745744 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745745 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745746 ) &&@expr1073745747 getFlag (@expr1073745748 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745749 fIsArray ) ||@expr1073745750 getFlag (@expr1073745751 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745752 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745753 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745754 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745755 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1213 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1213 ?@expr1073745756 mType@var1213 .@expr1073745757 classScope@var1218 :@expr1073745758 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1214 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1216 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1201 ) const {
550: return mDimensions@var1216 [@expr1073745759 index_@var1201 ] .@expr1073745760 num@var2405 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1202 ) const {
558: return mDimensions@var1216 [@expr1073745761 index_@var1202 ] .@expr1073745762 known@var2406 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745763 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745764 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745765 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1203 ) const {
602: return isStlType (@expr1073745766 ) &&@expr1073745767 stlType@var1203 ==@expr1073745768 mTypeStartToken@var1208 .@expr1073745769 strAt (@expr1073745770 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1204 ) const {
616: return isStlType (@expr1073745771 ) &&@expr1073745772 stlTypes@var1204 .@expr1073745773 find (@expr1073745774 mTypeStartToken@var1208 .@expr1073745775 strAt (@expr1073745776 2 ) ) !=@expr1073745777 stlTypes@var1204 .@expr1073745778 end (@expr1073745779 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745780 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr3957 ) &&@expr1073745782 type (@expr3957 ) .@expr1073745784 isEnumType (@expr1073745785 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745786 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1215 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1205 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1211 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1206 ) {
660: mType@var1213 =@expr1073745787 t@var1206 ;
661: }
662:
663:
664: const Token * mNameToken@var1207 ;
665:
666:
667: const Token * mTypeStartToken@var1208 ;
668:
669:
670: const Token * mTypeEndToken@var1209 ;
671:
672:
673: int mIndex@var1210 ;
674:
675:
676: AccessControl mAccess@var1211 ;
677:
678:
679: unsigned int mFlags@var1212 ;
680:
681:
682: const Type * mType@var1213 ;
683:
684:
685: const Scope * mScope@var1214 ;
686:
687: ValueType * mValueType@var1215 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1216 ;
691:
692:
693: void evaluate ( const Settings * settings@var1217 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous3 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1219 ) const {
735: return (@expr3964 (@expr3964 mFlags@var1268 &@expr1073745790 flag@var1219 ) !=@expr1073745791 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1220 , bool state@var1221 ) {
744: mFlags@var1268 =@expr1073745792 state@var1221 ?@expr1073745793 mFlags@var1268 |@expr1073745794 flag@var1220 :@expr1073745795 mFlags@var1268 &@expr1073745796 ~@expr1073745797 flag@var1220 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1222 , const Token * tok@var1223 , const Scope * scope@var1224 , const Token * tokDef@var1225 , const Token * tokArgDef@var1226 ) ;
751: Function ( const Token * tokenDef@var1227 , const std :: string & clangType@var1228 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1238 .@expr1073745798 str (@expr1073745799 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1246 .@expr1073745800 size (@expr1073745801 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1246 .@expr1073745802 size (@expr1073745803 ) -@expr1073745804 initArgCount@var1247 ;
764: }
765: const Variable * getArgumentVar ( int num@var1229 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1247 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1230 , const Scope * scope@var1231 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1232 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1233 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1248 ==@expr1073745805 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1248 ==@expr1073745806 eConstructor ||@expr1073745807
785: type@var1248 ==@expr1073745808 eCopyConstructor ||@expr1073745809
786: type@var1248 ==@expr1073745810 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1248 ==@expr1073745811 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1238 .@expr1073745812 isAttributeConstructor (@expr1073745813 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1238 .@expr1073745814 isAttributeDestructor (@expr1073745815 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1238 .@expr1073745816 isAttributePure (@expr1073745817 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1238 .@expr1073745818 isAttributeConst (@expr1073745819 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1238 .@expr1073745820 isAttributeNoreturn (@expr1073745821 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1238 .@expr1073745822 isAttributeNothrow (@expr1073745823 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1238 .@expr1073745824 isAttributeNodiscard (@expr1073745825 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745826 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745827 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745828 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745829 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745830 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745831 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745832 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745833 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745834 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745835 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745836 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745837 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745838 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745839 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745840 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745841 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745842 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745843 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745844 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745845 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745846 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745847 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1234 ) {
881: setFlag (@expr1073745848 fHasBody , state@var1234 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745849 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745850 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1235 ) {
891: setFlag (@expr1073745851 fIsEscapeFunction , state@var1235 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745852 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1236 ) {
898: setFlag (@expr1073745853 fIsConstexpr , state@var1236 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1237 ) const ;
901:
902: const Token * tokenDef@var1238 ;
903: const Token * argDef@var1239 ;
904: const Token * token@var1240 ;
905: const Token * arg@var1241 ;
906: const Token * retDef@var1242 ;
907: const :: Type * retType@var1243 ;
908: const Scope * functionScope@var1244 ;
909: const Scope * nestedIn@var1245 ;
910: std :: list < Variable > argumentList@var1246 ;
911: int initArgCount@var1247 ;
912: Type type@var1248 ;
913: AccessControl access@var1249 ;
914: const Token * noexceptArg@var1250 ;
915: const Token * throwArg@var1251 ;
916: const Token * templateDef@var1252 ;
917: const Token * functionPointerUsage@var1253 ;
918:
919: bool argsMatch ( const Scope * scope@var1254 , const Token * first@var1255 , const Token * second@var1256 , const std :: string & path@var1257 , int path_length@var1258 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1259 , bool unknown@var1260 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1261 , bool unknown@var1262 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1263 , bool unknown@var1264 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1265 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745854 this@expr1073745855 .@expr1073745856 hasTrailingReturnType (@expr1073745857 ) ) {
931: return Token ::@expr1073745858 findmatch (@expr1073745859 retDef@var1242 , "{|;" ) ;
932: } else {
933: return tokenDef@var1238 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1266 , bool * foundAllBaseClasses@var1267 ) const ;
946:
947: unsigned int mFlags@var1268 ;
948:
949: void isInline ( bool state@var1269 ) {
950: setFlag (@expr1073745860 fIsInline , state@var1269 ) ;
951: }
952: void isConst ( bool state@var1270 ) {
953: setFlag (@expr1073745861 fIsConst , state@var1270 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1271 ) {
956: setFlag (@expr1073745862 fHasVirtualSpecifier , state@var1271 ) ;
957: }
958: void isPure ( bool state@var1272 ) {
959: setFlag (@expr1073745863 fIsPure , state@var1272 ) ;
960: }
961: void isStatic ( bool state@var1273 ) {
962: setFlag (@expr1073745864 fIsStatic , state@var1273 ) ;
963: }
964: void isStaticLocal ( bool state@var1274 ) {
965: setFlag (@expr1073745865 fIsStaticLocal , state@var1274 ) ;
966: }
967: void isExtern ( bool state@var1275 ) {
968: setFlag (@expr1073745866 fIsExtern , state@var1275 ) ;
969: }
970: void isFriend ( bool state@var1276 ) {
971: setFlag (@expr1073745867 fIsFriend , state@var1276 ) ;
972: }
973: void isExplicit ( bool state@var1277 ) {
974: setFlag (@expr1073745868 fIsExplicit , state@var1277 ) ;
975: }
976: void isDefault ( bool state@var1278 ) {
977: setFlag (@expr1073745869 fIsDefault , state@var1278 ) ;
978: }
979: void isDelete ( bool state@var1279 ) {
980: setFlag (@expr1073745870 fIsDelete , state@var1279 ) ;
981: }
982: void isNoExcept ( bool state@var1280 ) {
983: setFlag (@expr1073745871 fIsNoExcept , state@var1280 ) ;
984: }
985: void isThrow ( bool state@var1281 ) {
986: setFlag (@expr1073745872 fIsThrow , state@var1281 ) ;
987: }
988: void isOperator ( bool state@var1282 ) {
989: setFlag (@expr1073745873 fIsOperator , state@var1282 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1283 ) {
992: setFlag (@expr1073745874 fHasLvalRefQual , state@var1283 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1284 ) {
995: setFlag (@expr1073745875 fHasRvalRefQual , state@var1284 ) ;
996: }
997: void isVariadic ( bool state@var1285 ) {
998: setFlag (@expr1073745876 fIsVariadic , state@var1285 ) ;
999: }
1000: void isVolatile ( bool state@var1286 ) {
1001: setFlag (@expr1073745877 fIsVolatile , state@var1286 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1287 ) {
1004: return setFlag (@expr1073745878 fHasTrailingReturnType , state@var1287 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1288 ) {
1007: setFlag (@expr1073745879 fIsInlineKeyword , state@var1288 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1289 , const Scope * scope@var1290 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1291 ;
1019: const Scope * scope@var1292 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1293 , const Token * classDef_@var1294 , const Scope * nestedIn_@var1295 ) ;
1025: Scope ( const SymbolDatabase * check_@var1296 , const Token * classDef_@var1297 , const Scope * nestedIn_@var1298 , ScopeType type_@var1299 , const Token * start_@var1300 ) ;
1026:
1027: const SymbolDatabase * check@var1301 ;
1028: std :: string className@var1302 ;
1029: const Token * classDef@var1303 ;
1030: const Token * bodyStart@var1304 ;
1031: const Token * bodyEnd@var1305 ;
1032: std :: list < Function > functionList@var1306 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1307 ;
1034: std :: list < Variable > varlist@var1308 ;
1035: const Scope * nestedIn@var1309 ;
1036: std :: list < Scope * > nestedList@var1310 ;
1037: int numConstructors@var1311 ;
1038: int numCopyOrMoveConstructors@var1312 ;
1039: std :: list < UsingInfo > usingList@var1313 ;
1040: ScopeType type@var1314 ;
1041: Type * definedType@var1315 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1316 ;
1043: std :: vector < const Token * > bodyStartList@var1317 ;
1044:
1045:
1046: const Scope * functionOf@var1318 ;
1047: Function * function@var1319 ;
1048:
1049:
1050: const Token * enumType@var1320 ;
1051: bool enumClass@var1321 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1322 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1323 ) {
1056: bodyStart@var1304 =@expr1073745880 start@var1323 ;
1057: bodyEnd@var1305 =@expr1073745881 start@var1323 ?@expr1073745882 start@var1323 .@expr1073745883 link (@expr1073745884 ) :@expr1073745885 nullptr ;
1058: if (@expr1073745886 start@var1323 ) {
1059: bodyStartList@var1317 .@expr1073745887 push_back (@expr1073745888 start@var1323 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1302 .@expr1073745889 size (@expr1073745890 ) >@expr1073745891 9 &&@expr1073745892 className@var1302 .@expr1073745893 compare (@expr1073745894 0 , 9 , "Anonymous" ) ==@expr1073745895 0 &&@expr1073745896 std ::@expr1073745897 isdigit (@expr1073745898 className@var1302 [@expr1073745899 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1324 ) const {
1068: for (@expr1073745900 const Enumerator &@expr1073745901 i@var1325 :@expr1073745902 enumeratorList@var1322 ) {
1069: if (@expr1073745903 i@var1325 .@expr1073745904 name@var1326 .@expr1073745905 str (@expr1073745906 ) ==@expr1073745907 name@var1324 ) {
1070: return &@expr1073745908 i@var1325 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1327 ) const {
1076: if (@expr1073745909 !@expr1073745910 outer@var1327 ) {
1077: return false ; }
1078: if (@expr1073745911 outer@var1327 ==@expr1073745912 this@expr1073745913 ) {
1079: return true ; }
1080: const Scope * parent@var1328 ; parent@var1328 =@expr1073745914 nestedIn@var1309 ;
1081: while (@expr1073745915 outer@var1327 !=@expr1073745916 parent@var1328 &&@expr1073745917 parent@var1328 ) {
1082: parent@var1328 =@expr1073745918 parent@var1328 .@expr1073745919 nestedIn@var1329 ; }
1083: if (@expr1073745920 parent@var1328 &&@expr1073745921 parent@var1328 ==@expr1073745922 outer@var1327 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1330 ) {
1089: while (@expr1073745923 scope@var1330 ) {
1090: if (@expr1073745924 scope@var1330 .@expr1073745925 type@var1331 ==@expr1073745926 Scope ::@expr1073745927 eFunction ) {
1091: break ; }
1092: scope@var1330 =@expr1073745928 scope@var1330 .@expr1073745929 nestedIn@var1332 ;
1093: }
1094: if (@expr1073745930 !@expr1073745931 scope@var1330 ) {
1095: return nullptr ; }
1096: return scope@var1330 .@expr1073745932 function@var1333 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073745933 type@var1314 ==@expr1073745934 eClass ||@expr1073745935 type@var1314 ==@expr1073745936 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073745937 type@var1314 ==@expr1073745938 eClass ||@expr1073745939 type@var1314 ==@expr1073745940 eStruct ||@expr1073745941 type@var1314 ==@expr1073745942 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1314 !=@expr1073745943 eClass &&@expr1073745944 type@var1314 !=@expr1073745945 eStruct &&@expr1073745946 type@var1314 !=@expr1073745947 eUnion &&@expr1073745948 type@var1314 !=@expr1073745949 eGlobal &&@expr1073745950 type@var1314 !=@expr1073745951 eNamespace &&@expr1073745952 type@var1314 !=@expr1073745953 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1314 ==@expr1073745954 Scope ::@expr4131 ScopeType ::@expr1073745956 eFor ||@expr1073745957 type@var1314 ==@expr1073745958 Scope ::@expr4131 ScopeType ::@expr1073745960 eWhile ||@expr1073745961 type@var1314 ==@expr1073745962 Scope ::@expr4131 ScopeType ::@expr1073745964 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073745965 type@var1314 ==@expr1073745966 eIf ||@expr1073745967 type@var1314 ==@expr1073745968 eElse ||@expr1073745969
1117: type@var1314 ==@expr1073745970 eFor ||@expr1073745971 type@var1314 ==@expr1073745972 eWhile ||@expr1073745973 type@var1314 ==@expr1073745974 eDo ||@expr1073745975
1118: type@var1314 ==@expr1073745976 eSwitch ||@expr1073745977 type@var1314 ==@expr1073745978 eUnconditional ||@expr1073745979
1119: type@var1314 ==@expr1073745980 eTry ||@expr1073745981 type@var1314 ==@expr1073745982 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1334 , bool requireConst@var1335 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1336 , bool isC@var1337 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1338 ) {
1135: return const_cast < Scope *@expr4159 > (@expr1073745984 const_cast < const Scope *@expr4159 > (@expr1073745986 this@expr1073745987 ) .@expr1073745988 findRecordInNestedList (@expr1073745989 name@var1338 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1339 ) const ;
1139: Type * findType ( const std :: string & name@var1340 ) {
1140: return const_cast < Type *@expr4166 > (@expr1073745991 const_cast < const Scope *@expr4166 > (@expr1073745993 this@expr1073745994 ) .@expr1073745995 findType (@expr1073745996 name@var1340 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1341 ) ;
1148:
1149: void addVariable ( const Token * token_@var1342 , const Token * start_@var1343 ,
1150: const Token * end_@var1344 , AccessControl access_@var1345 , const Type * type_@var1346 ,
1151: const Scope * scope_@var1347 , const Settings * settings@var1348 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1349 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1350 ) {
1159: functionList@var1306 .@expr1073745997 push_back (@expr1073745998 func@var1350 ) ;
1160:
1161: const Function * back@var1351 ; back@var1351 =@expr1073745999 &@expr1073746000 functionList@var1306 .@expr1073746001 back (@expr1073746002 ) ;
1162:
1163: functionMap@var1307 .@expr1073746003 insert (@expr1073746004 make_pair (@expr1073746005 back@var1351 .@expr1073746006 tokenDef@var1352 .@expr1073746007 str (@expr1073746008 ) , back@var1351 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1353 , AccessControl varaccess@var1354 , const Settings * settings@var1355 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1356 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1357 , bool isCpp@var1358 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1359 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1360 , const Token * & vartok@var1361 , const Token * & typetok@var1362 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1363 , int args@var1364 , std :: vector < const Function * > & matches@var1365 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1366 , const Token * start@var1367 , const Token * end@var1368 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1369 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1370 ;
1239: int bits@var1371 ;
1240: int pointer@var1372 ;
1241: int constness@var1373 ;
1242: Reference reference@var1374 ; reference@var1374 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1375 ;
1245: const :: Type * smartPointerType@var1376 ;
1246: const Token * smartPointerTypeToken@var1377 ;
1247: const Library :: SmartPointer * smartPointer@var1378 ;
1248: const Library :: Container * container@var1379 ;
1249:
1250: const Token * containerTypeToken@var1380 ;
1251:
1252: std :: string originalTypeName@var1381 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1369 ( UNKNOWN_SIGN ) ,
1257: type@var1370 ( UNKNOWN_TYPE ) ,
1258: bits@var1371 ( 0 ) ,
1259: pointer@var1372 ( 0U ) ,
1260: constness@var1373 ( 0U ) ,
1261: typeScope@var1375 ( nullptr ) ,
1262: smartPointerType@var1376 ( nullptr ) ,
1263: smartPointerTypeToken@var1377 ( nullptr ) ,
1264: smartPointer@var1378 ( nullptr ) ,
1265: container@var1379 ( nullptr ) ,
1266: containerTypeToken@var1380 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1382 , enum Type t@var1383 , int p@var1384 )
1269: : sign@var1369 ( s@var1382 ) ,
1270: type@var1370 ( t@var1383 ) ,
1271: bits@var1371 ( 0 ) ,
1272: pointer@var1372 ( p@var1384 ) ,
1273: constness@var1373 ( 0U ) ,
1274: typeScope@var1375 ( nullptr ) ,
1275: smartPointerType@var1376 ( nullptr ) ,
1276: smartPointerTypeToken@var1377 ( nullptr ) ,
1277: smartPointer@var1378 ( nullptr ) ,
1278: container@var1379 ( nullptr ) ,
1279: containerTypeToken@var1380 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1385 , enum Type t@var1386 , int p@var1387 , int c@var1388 )
1282: : sign@var1369 ( s@var1385 ) ,
1283: type@var1370 ( t@var1386 ) ,
1284: bits@var1371 ( 0 ) ,
1285: pointer@var1372 ( p@var1387 ) ,
1286: constness@var1373 ( c@var1388 ) ,
1287: typeScope@var1375 ( nullptr ) ,
1288: smartPointerType@var1376 ( nullptr ) ,
1289: smartPointerTypeToken@var1377 ( nullptr ) ,
1290: smartPointer@var1378 ( nullptr ) ,
1291: container@var1379 ( nullptr ) ,
1292: containerTypeToken@var1380 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1389 , enum Type t@var1390 , int p@var1391 , int c@var1392 , const std :: string & otn@var1393 )
1295: : sign@var1369 ( s@var1389 ) ,
1296: type@var1370 ( t@var1390 ) ,
1297: bits@var1371 ( 0 ) ,
1298: pointer@var1372 ( p@var1391 ) ,
1299: constness@var1373 ( c@var1392 ) ,
1300: typeScope@var1375 ( nullptr ) ,
1301: smartPointerType@var1376 ( nullptr ) ,
1302: smartPointerTypeToken@var1377 ( nullptr ) ,
1303: smartPointer@var1378 ( nullptr ) ,
1304: container@var1379 ( nullptr ) ,
1305: containerTypeToken@var1380 ( nullptr ) ,
1306: originalTypeName@var1381 ( otn@var1393 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1394 , const Settings * settings@var1395 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1396 , bool longType@var1397 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1398 , const ValueType * func@var1399 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1400 , const Variable * callVar@var1401 , const Variable * funcVar@var1402 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746009 type@var1370 >=@expr1073746010 ValueType ::@expr1073746011 Type ::@expr1073746012 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746013 type@var1370 >=@expr1073746014 ValueType ::@expr4191 Type ::@expr1073746016 BOOL &&@expr1073746017 type@var1370 <=@expr1073746018 ValueType ::@expr4191 Type ::@expr1073746020 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746021 type@var1370 >=@expr1073746022 ValueType ::@expr4199 Type ::@expr1073746024 FLOAT &&@expr1073746025 type@var1370 <=@expr1073746026 ValueType ::@expr4199 Type ::@expr1073746028 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1403 , const Settings * settings@var1404 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1375 &&@expr1073746029 typeScope@var1375 .@expr1073746030 type@var1405 ==@expr1073746031 Scope ::@expr1073746032 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1406 , bool p@var1407 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1408 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1409 , const Settings * settings@var1410 , ErrorLogger * errorLogger@var1411 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1412 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1413 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1414 ;
1359:
1360:
1361: std :: list < Type > typeList@var1415 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1416 , const Token * typeTok@var1417 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1418 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1419 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1420 , const Scope * startScope@var1421 , bool lookOutside@var1422 = false ) const ;
1382: Type * findType ( const Token * startTok@var1423 , Scope * startScope@var1424 , bool lookOutside@var1425 = false ) const {
1383: return const_cast < Type *@expr4209 > (@expr1073746034 this@expr1073746035 .@expr1073746036 findType (@expr1073746037 startTok@var1423 , const_cast < const Scope *@expr4209 > (@expr1073746039 startScope@var1424 ) , lookOutside@var1425 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1426 , const Scope * startScope@var1427 ) const ;
1387: Scope * findScope ( const Token * tok@var1428 , Scope * startScope@var1429 ) const {
1388: return const_cast < Scope *@expr4216 > (@expr1073746041 this@expr1073746042 .@expr1073746043 findScope (@expr1073746044 tok@var1428 , const_cast < const Scope *@expr4216 > (@expr1073746046 startScope@var1429 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1430 ) const {
1392: return varid@var1430 <@expr1073746047 mVariableList@var1487 .@expr1073746048 size (@expr1073746049 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1431 ) const {
1396: return mVariableList@var1487 .@expr1073746050 at (@expr1073746051 varId@var1431 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1487 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1432 , const std :: string & type@var1433 , const std :: string & msg@var1434 ) const ;
1407:
1408: void printOut ( const char * title@var1435 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1436 , const char * indent@var1437 ) const ;
1410: void printXml ( std :: ostream & out@var1438 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1439 , Token * tokens@var1440 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1441 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1442 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1443 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1444 , const Token * * tok@var1445 , const Token * argStart@var1446 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1447 , const Token * tok@var1448 , const Token * argStart@var1449 , const Token * funcStart@var1450 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1451 , const Token * & tok@var1452 , const Token * argStart@var1453 , const Token * funcStart@var1454 ) ;
1469: void addNewFunction ( Scope * * scope@var1455 , const Token * * tok@var1456 ) ;
1470: bool isFunction ( const Token * tok@var1457 , const Scope * outerScope@var1458 , const Token * * funcStart@var1459 , const Token * * argStart@var1460 , const Token * * declEnd@var1461 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1462 , const Scope * startScope@var1463 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1464 , const Scope * scope@var1465 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1466 , const Scope * ns@var1467 , const std :: string & path@var1468 , int path_length@var1469 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1470 , const Token * typeTok@var1471 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1472 , const Token * vartok@var1473 , Token * membertok@var1474 , const Variable * membervar@var1475 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1476 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1477 ) const ;
1485:
1486: void setValueType ( Token * tok@var1478 , const ValueType & valuetype@var1479 ) ;
1487: void setValueType ( Token * tok@var1480 , const Variable & var@var1481 ) ;
1488: void setValueType ( Token * tok@var1482 , const Enumerator & enumerator@var1483 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1484 ;
1491: const Settings * mSettings@var1485 ;
1492: ErrorLogger * mErrorLogger@var1486 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1487 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1488 ;
1499:
1500: bool mIsCpp@var1489 ;
1501: ValueType :: Sign mDefaultSignedness@var1490 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1491 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1492 , const TFunc & visitor@var1493 )
52: {
53: if (@expr1073746052 !@expr1073746053 ast@var1492 ) {
54: return ; }
55:
56: std ::@expr1073746054 stack < T *@expr4231 , std ::@expr1073746056 vector < T *@expr4231 > > tokens@var1494 ;
57: T * tok@var1495 ; tok@var1495 =@expr1073746058 ast@var1492 ;
58: do {
59: ChildrenToVisit c@var1496 ; c@var1496 =@expr1073746059 visitor@var1493 (@expr1073746060 tok@var1495 ) ;
60:
61: if (@expr1073746061 c@var1496 ==@expr1073746062 ChildrenToVisit ::@expr1073746063 done ) {
62: break ; }
63: if (@expr1073746064 c@var1496 ==@expr1073746065 ChildrenToVisit ::@expr1073746066 op2 ||@expr1073746067 c@var1496 ==@expr4244 ChildrenToVisit ::@expr4245 op1_and_op2 ) {
64: T * t2@var1497 ; t2@var1497 =@expr1073746070 tok@var1495 .@expr1073746071 astOperand2 (@expr1073746072 ) ;
65: if (@expr1073746073 t2@var1497 ) {
66: tokens@var1494 .@expr4250 push (@expr1073746075 t2@var1497 ) ; }
67: }
68: if (@expr1073746076 c@var1496 ==@expr1073746077 ChildrenToVisit ::@expr1073746078 op1 ||@expr1073746079 c@var1496 ==@expr4244 ChildrenToVisit ::@expr4245 op1_and_op2 ) {
69: T * t1@var1498 ; t1@var1498 =@expr1073746082 tok@var1495 .@expr1073746083 astOperand1 (@expr1073746084 ) ;
70: if (@expr1073746085 t1@var1498 ) {
71: tokens@var1494 .@expr4250 push (@expr1073746087 t1@var1498 ) ; }
72: }
73:
74: if (@expr1073746088 tokens@var1494 .@expr1073746089 empty (@expr1073746090 ) ) {
75: break ; }
76:
77: tok@var1495 =@expr1073746091 tokens@var1494 .@expr1073746092 top (@expr1073746093 ) ;
78: tokens@var1494 .@expr1073746094 pop (@expr1073746095 ) ;
79: } while (@expr1073746096 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1499 , const std :: function < bool ( const Token * ) > & pred@var1500 ) ;
83: const Token * findExpression ( const int exprid@var1501 ,
84: const Token * start@var1502 ,
85: const Token * end@var1503 ,
86: const std :: function < bool ( const Token * ) > & pred@var1504 ) ;
87: const Token * findExpression ( const Token * start@var1505 , const int exprid@var1506 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1507 , const char * op@var1508 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1509 , const char * op@var1510 ) ;
91:
92: int astCount ( const Token * tok@var1511 , const char * op@var1512 , int depth@var1513 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1514 , const Token * tok@var1515 ) ;
95:
96: bool astHasVar ( const Token * tok@var1516 , int varid@var1517 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1518 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1519 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1520 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1521 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1522 , bool unknown@var1523 ) ;
107: bool astIsUnsigned ( const Token * tok@var1524 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1525 , bool unknown@var1526 ) ;
110:
111: bool astIsBool ( const Token * tok@var1527 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1528 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1529 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1530 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1531 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1532 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1533 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1534 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1535 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1536 , const std :: string & comp@var1537 , const std :: string & rhs@var1538 , const Token * * vartok@var1539 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1540 ) ;
140:
141: bool isTemporary ( bool cpp@var1541 , const Token * tok@var1542 , const Library * library@var1543 , bool unknown@var1544 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1545 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1546 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1547 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1548 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1549 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1550 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1551 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1552 ) ;
155: const Token * getParentLifetime ( bool cpp@var1553 , const Token * tok@var1554 , const Library * library@var1555 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1556 ) ;
158: bool astIsRHS ( const Token * tok@var1557 ) ;
159:
160: Token * getCondTok ( Token * tok@var1558 ) ;
161: const Token * getCondTok ( const Token * tok@var1559 ) ;
162:
163: Token * getInitTok ( Token * tok@var1560 ) ;
164: const Token * getInitTok ( const Token * tok@var1561 ) ;
165:
166: Token * getStepTok ( Token * tok@var1562 ) ;
167: const Token * getStepTok ( const Token * tok@var1563 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1564 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1565 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1566 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1567 ,
180: int * const varid@var1568 ,
181: bool * const knownInitValue@var1569 ,
182: long long * const initValue@var1570 ,
183: bool * const partialCond@var1571 ,
184: long long * const stepValue@var1572 ,
185: long long * const lastValue@var1573 ) ;
186:
187: bool precedes ( const Token * tok1@var1574 , const Token * tok2@var1575 ) ;
188: bool succeeds ( const Token * tok1@var1576 , const Token * tok2@var1577 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1578 , bool onVar@var1579 = true , int depth@var1580 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1581 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1582 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1583 ,
198: bool temporary@var1584 = true ,
199: bool inconclusive@var1585 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1586 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1587 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1588 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1589 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1590 , bool macro@var1591 , const Token * tok1@var1592 , const Token * tok2@var1593 , const Library & library@var1594 , bool pure@var1595 , bool followVar@var1596 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1597 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1598 , const Token * const tok2@var1599 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1600 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1601 , bool cpp@var1602 , const Token * const cond1@var1603 , const Token * const cond2@var1604 , const Library & library@var1605 , bool pure@var1606 , bool followVar@var1607 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1608 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1609 , const Token * const tok1@var1610 , const Token * const tok2@var1611 , const Library & library@var1612 , bool pure@var1613 , bool followVar@var1614 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1615 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1616 , const Library & library@var1617 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1618 , const Library & library@var1619 , bool pure@var1620 , bool cpp@var1621 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1622 , const Token * tok@var1623 , bool checkArrayAccess@var1624 = false , bool checkReference@var1625 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1626 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1627 , const Library * library@var1628 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1629 ,
238: const Library * library@var1630 = nullptr ,
239: const Token * * unknownFunc@var1631 = nullptr ,
240: bool functionScope@var1632 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1633 ,
244: const Variable * var@var1634 ,
245: Scope :: ScopeType type@var1635 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1636 , int & argn@var1637 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1638 , int & argn@var1639 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1640 , int argnr@var1641 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1642 , int indirect@var1643 , int varid@var1644 , const Settings * settings@var1645 , bool * inconclusive@var1646 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1647 , int indirect@var1648 , const Settings * settings@var1649 , bool * inconclusive@var1650 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1651 , const Token * end@var1652 , const int exprid@var1653 , bool globalvar@var1654 , const Settings * settings@var1655 , bool cpp@var1656 , int depth@var1657 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1658 , const Token * end@var1659 , int indirect@var1660 , const int exprid@var1661 , bool globalvar@var1662 , const Settings * settings@var1663 , bool cpp@var1664 , int depth@var1665 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1666 , int indirect@var1667 , const Settings * settings@var1668 , bool cpp@var1669 , int depth@var1670 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1671 , const Settings * settings@var1672 , bool cpp@var1673 , int depth@var1674 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1675 ,
283: const Token * end@var1676 ,
284: int indirect@var1677 ,
285: std :: vector < const Variable * > vars@var1678 ,
286: const Settings * settings@var1679 ,
287: bool cpp@var1680 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1681 , int indirect@var1682 , const Settings * settings@var1683 , bool cpp@var1684 ) ;
290: bool isThisChanged ( const Token * start@var1685 , const Token * end@var1686 , int indirect@var1687 , const Settings * settings@var1688 , bool cpp@var1689 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var1690 , const Token * end@var1691 , int indirect@var1692 , const int exprid@var1693 , bool globalvar@var1694 , const Settings * settings@var1695 , bool cpp@var1696 , int depth@var1697 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var1698 , const Token * end@var1699 , int indirect@var1700 , const int exprid@var1701 , bool globalvar@var1702 , const Settings * settings@var1703 , bool cpp@var1704 , int depth@var1705 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var1706 ,
296: const Token * start@var1707 ,
297: const Token * end@var1708 ,
298: const Settings * settings@var1709 ,
299: bool cpp@var1710 ,
300: int depth@var1711 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var1712 ,
303: const Token * tok@var1713 ,
304: int indirect@var1714 ,
305: bool globalvar@var1715 ,
306: const Settings * settings@var1716 ,
307: bool cpp@var1717 ,
308: int depth@var1718 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var1719 , int varid@var1720 , bool * inconclusive@var1721 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var1722 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var1723 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var1724 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var1725 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var1726 ) ;
330:
331: int getArgumentPos ( const Variable * var@var1727 , const Function * f@var1728 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var1729 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var1730 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var1731 ) ;
346: Token * findLambdaEndToken ( Token * first@var1732 ) ;
347:
348: bool isLikelyStream ( bool cpp@var1733 , const Token * stream@var1734 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var1735 , const Token * op@var1736 ) ;
356:
357: bool isCPPCast ( const Token * tok@var1737 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var1738 , const char * skipMatch@var1739 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var1740 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var1741 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var1742 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var1743 , const Library & library@var1744 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var1745 ) ;
371:
372: bool isNullOperand ( const Token * expr@var1746 ) ;
373:
374: bool isGlobalData ( const Token * expr@var1747 , bool cpp@var1748 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var1749 , const Library & library@var1750 ) : mCpp@var1783 ( cpp@var1749 ) , mLibrary@var1784 ( library@var1750 ) , mWhat@var1785 ( What :: Reassign ) , mValueFlowKnown@var1787 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var1751 , const Token * lhs@var1752 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var1753 , const Token * startToken@var1754 , const Token * endToken@var1755 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var1756 , const Token * startToken@var1757 , const Token * endToken@var1758 ) ;
404:
405: struct KnownAndToken {
406: bool known@var1759 ;
407: const Token * token@var1760 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var1761 , const Token * startToken@var1762 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var1763 , bool * localOut@var1764 = nullptr , bool * unknownVarIdOut@var1765 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var1766 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var1767 ;
420: explicit Result ( Type type@var1768 ) : type@var1767 ( type@var1768 ) , token@var1771 ( nullptr ) { }
421: Result ( Type type@var1769 , const Token * token@var1770 ) : type@var1767 ( type@var1769 ) , token@var1771 ( token@var1770 ) { }
422: const Token * token@var1771 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var1772 , const Token * startToken@var1773 , const Token * endToken@var1774 ) ;
426: struct Result checkRecursive ( const Token * expr@var1775 , const Token * startToken@var1776 , const Token * endToken@var1777 , const std :: set < int > & exprVarIds@var1778 , bool local@var1779 , bool inInnerClass@var1780 , int depth@var1781 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var1782 ) const ;
430:
431: const bool mCpp@var1783 ;
432: const Library & mLibrary@var1784 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var1785 ;
434: std :: vector < KnownAndToken > mValueFlow@var1786 ;
435: bool mValueFlowKnown@var1787 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var1788 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var1789 ) {
44: if (@expr1073746097 bit@var1789 >=@expr1073746098 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073746099 (@expr1073746100 1LL <<@expr1073746101 (@expr1073746102 bit@var1789 -@expr1073746103 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var1790 ) {
50: if (@expr1073746104 bit@var1790 >=@expr1073746105 64 ) {
51: return (@expr4282 ~@expr1073746107 0ULL ) >>@expr1073746108 1 ; }
52: return (@expr4282 1LL <<@expr1073746110 (@expr4282 bit@var1790 -@expr1073746112 1 ) ) -@expr1073746113 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var1791 ) const {
59: return value@var1791 >=@expr1073746114 min_value (@expr1073746115 int_bit@var1801 ) &&@expr1073746116 value@var1791 <=@expr1073746117 max_value (@expr1073746118 int_bit@var1801 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var1792 ) const {
63: unsigned long long intMax@var1793 ; intMax@var1793 =@expr1073746119 max_value (@expr1073746120 int_bit@var1801 ) ;
64: return value@var1792 <=@expr1073746121 intMax@var1793 ;
65: }
66:
67: bool isLongValue ( long long value@var1794 ) const {
68: return value@var1794 >=@expr1073746122 min_value (@expr1073746123 long_bit@var1802 ) &&@expr1073746124 value@var1794 <=@expr1073746125 max_value (@expr1073746126 long_bit@var1802 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var1795 ) const {
72: unsigned long long longMax@var1796 ; longMax@var1796 =@expr1073746127 max_value (@expr1073746128 long_bit@var1802 ) ;
73: return value@var1795 <=@expr1073746129 longMax@var1796 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var1797 ) const {
77: unsigned long long longLongMax@var1798 ; longLongMax@var1798 =@expr1073746130 max_value (@expr1073746131 long_long_bit@var1803 ) ;
78: return value@var1797 <=@expr1073746132 longLongMax@var1798 ;
79: }
80:
81: int char_bit@var1799 ;
82: int short_bit@var1800 ;
83: int int_bit@var1801 ;
84: int long_bit@var1802 ;
85: int long_long_bit@var1803 ;
86:
87:
88: int sizeof_bool@var1804 ;
89: int sizeof_short@var1805 ;
90: int sizeof_int@var1806 ;
91: int sizeof_long@var1807 ;
92: int sizeof_long_long@var1808 ;
93: int sizeof_float@var1809 ;
94: int sizeof_double@var1810 ;
95: int sizeof_long_double@var1811 ;
96: int sizeof_wchar_t@var1812 ;
97: int sizeof_size_t@var1813 ;
98: int sizeof_pointer@var1814 ;
99:
100: char defaultSign@var1815 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var1816 ;
115:
116:
117: bool platform ( PlatformType type@var1817 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var1818 [ ] , const std :: string & filename@var1819 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var1820 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var1816 ==@expr1073746133 Win32A ||@expr1073746134
136: platformType@var1816 ==@expr1073746135 Win32W ||@expr1073746136
137: platformType@var1816 ==@expr1073746137 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073746138 platformType@var1816 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var1821 ) {
145: switch (@expr1073746139 pt@var1821 ) {
146: case Unspecified :@expr4316 ;
147: return "Unspecified" ;
148: case Native :@expr4316 ;
149: return "Native" ;
150: case Win32A :@expr4316 ;
151: return "win32A" ;
152: case Win32W :@expr4316 ;
153: return "win32W" ;
154: case Win64 :@expr4316 ;
155: return "win64" ;
156: case Unix32 :@expr4316 ;
157: return "unix32" ;
158: case Unix64 :@expr4316 ;
159: return "unix64" ;
160: case PlatformFile :@expr4316 ;
161: return "platformFile" ;
162: default :@expr4316 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073746149 char_bit@var1799 +@expr1073746150 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073746151 char_bit@var1799 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073746152 char_bit@var1799 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var1822 , const std :: string & rhs@var1823 ) const {
41: return caseInsensitiveStringCompare (@expr1073746153 lhs@var1822 , rhs@var1823 ) <@expr1073746154 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var1831 ( cppcheck :: Platform :: Unspecified ) , msc@var1832 ( false ) , useMfc@var1833 ( false ) { }
67: std :: string cfg@var1824 ;
68: std :: string filename@var1825 ;
69: std :: string defines@var1826 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var1826 +@expr1073746155 (@expr1073746156 msc@var1832 ?@expr1073746157 ";_MSC_VER=1900" :@expr1073746158 "" ) +@expr1073746159 (@expr1073746160 useMfc@var1833 ?@expr1073746161 ";__AFXWIN_H__=1" :@expr1073746162 "" ) ;
72: }
73: std :: set < std :: string > undefs@var1827 ;
74: std :: list < std :: string > includePaths@var1828 ;
75: std :: list < std :: string > systemIncludePaths@var1829 ;
76: std :: string standard@var1830 ;
77: cppcheck :: Platform :: PlatformType platformType@var1831 ;
78: bool msc@var1832 ;
79: bool useMfc@var1833 ;
80:
81: void parseCommand ( std :: string command@var1834 ) ;
82: void setDefines ( std :: string defs@var1835 ) ;
83: void setIncludePaths ( const std :: string & basepath@var1836 , const std :: list < std :: string > & in@var1837 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1838 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var1839 ;
86: Type projectType@var1840 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var1841 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous4 {
96: std :: string analyzeAllVsConfigs@var1842 ;
97: std :: vector < std :: string > pathNames@var1843 ;
98: std :: list < std :: string > libraries@var1844 ;
99: std :: list < std :: string > excludedPaths@var1845 ;
100: std :: list < std :: string > checkVsConfigs@var1846 ;
101: std :: string projectFile@var1847 ;
102: std :: string platform@var1848 ;
103: } ; struct Anonymous4 guiProject@var1849 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var1850 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var1851 ) ;
107:
108: Type import ( const std :: string & filename@var1852 , Settings * settings@var1853 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var1854 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var1855 , Settings * settings@var1856 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var1857 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var1858 , const std :: string & path@var1859 , const std :: vector < std :: string > & fileFilters@var1860 ) ;
115: bool importVcxproj ( const std :: string & filename@var1861 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1862 , const std :: string & additionalIncludeDirectories@var1863 , const std :: vector < std :: string > & fileFilters@var1864 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var1865 ) ;
117:
118: static void printError ( const std :: string & message@var1866 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var1867 ) ;
121:
122: std :: string mPath@var1868 ;
123: std :: set < std :: string > mAllVSConfigs@var1869 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var1870 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var1871 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var1872 [ 2 ] = "1" ;
131: const char BuildDirElementName@var1873 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var1874 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var1875 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var1876 [ 7 ] = "parser" ;
135: const char BugHunting@var1877 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var1878 [ 11 ] = "includedir" ;
137: const char DirElementName@var1879 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var1880 [ 5 ] = "name" ;
139: const char DefinesElementName@var1881 [ 8 ] = "defines" ;
140: const char DefineName@var1882 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var1883 [ 5 ] = "name" ;
142: const char UndefinesElementName@var1884 [ 10 ] = "undefines" ;
143: const char UndefineName@var1885 [ 9 ] = "undefine" ;
144: const char PathsElementName@var1886 [ 6 ] = "paths" ;
145: const char PathName@var1887 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var1888 [ 5 ] = "name" ;
147: const char RootPathName@var1889 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var1890 [ 5 ] = "name" ;
149: const char IgnoreElementName@var1891 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var1892 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var1893 [ 5 ] = "name" ;
152: const char ExcludeElementName@var1894 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var1895 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var1896 [ 5 ] = "name" ;
155: const char FunctionContracts@var1897 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var1898 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var1899 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var1900 [ 8 ] = "library" ;
159: const char PlatformElementName@var1901 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var1902 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var1903 [ 12 ] = "suppression" ;
162: const char AddonElementName@var1904 [ 6 ] = "addon" ;
163: const char AddonsElementName@var1905 [ 7 ] = "addons" ;
164: const char ToolElementName@var1906 [ 5 ] = "tool" ;
165: const char ToolsElementName@var1907 [ 6 ] = "tools" ;
166: const char TagsElementName@var1908 [ 5 ] = "tags" ;
167: const char TagElementName@var1909 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var1910 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var1911 [ 4 ] = "tag" ;
170: const char WarningElementName@var1912 [ 8 ] = "warning" ;
171: const char HashAttributeName@var1913 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var1914 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var1915 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var1916 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var1917 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var1918 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var1919 [ 11 ] = "clang-tidy" ;
178: const char Name@var1920 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var1921 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var1922 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var1923 ;
43: std :: string errorId@var1924 ;
44: void setFileName ( const std :: string & s@var1925 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var1929 ;
47: }
48: int lineNumber@var1926 ;
49: Certainty :: CertaintyLevel certainty@var1927 ;
50: std :: string symbolNames@var1928 ;
51: private:
52: std :: string mFileName@var1929 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var1963 ( NO_LINE ) , hash@var1965 ( 0 ) , thisAndNextLine@var1966 ( false ) , matched@var1967 ( false ) , checked@var1968 ( false ) { }
57: Suppression ( const Suppression & other@var1930 ) {
58: *@expr1073746163 this@expr1073746164 =@expr1073746165 other@var1930 ;
59: }
60: Suppression ( const std :: string & id@var1931 , const std :: string & file@var1932 , int line@var1933 = NO_LINE ) : errorId@var1961 ( id@var1931 ) , fileName@var1962 ( file@var1932 ) , lineNumber@var1963 ( line@var1933 ) , hash@var1965 ( 0 ) , thisAndNextLine@var1966 ( false ) , matched@var1967 ( false ) , checked@var1968 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var1934 ) {
63: errorId@var1961 =@expr1073746166 other@var1934 .@expr1073746167 errorId@var1935 ;
64: fileName@var1962 =@expr1073746168 other@var1934 .@expr1073746169 fileName@var1936 ;
65: lineNumber@var1963 =@expr1073746170 other@var1934 .@expr1073746171 lineNumber@var1937 ;
66: symbolName@var1964 =@expr1073746172 other@var1934 .@expr1073746173 symbolName@var1938 ;
67: hash@var1965 =@expr1073746174 other@var1934 .@expr1073746175 hash@var1939 ;
68: thisAndNextLine@var1966 =@expr1073746176 other@var1934 .@expr1073746177 thisAndNextLine@var1940 ;
69: matched@var1967 =@expr1073746178 other@var1934 .@expr1073746179 matched@var1941 ;
70: checked@var1968 =@expr1073746180 other@var1934 .@expr1073746181 checked@var1942 ;
71: return *@expr1073746182 this@expr1073746183 ;
72: }
73:
74: bool operator< ( const Suppression & other@var1943 ) const {
75: if (@expr1073746184 errorId@var1961 !=@expr1073746185 other@var1943 .@expr4362 errorId@var1944 ) {
76: return errorId@var1961 <@expr1073746187 other@var1943 .@expr4362 errorId@var1944 ; }
77: if (@expr1073746189 lineNumber@var1963 <@expr1073746190 other@var1943 .@expr1073746191 lineNumber@var1945 ) {
78: return true ; }
79: if (@expr1073746192 fileName@var1962 !=@expr1073746193 other@var1943 .@expr4370 fileName@var1946 ) {
80: return fileName@var1962 <@expr1073746195 other@var1943 .@expr4370 fileName@var1946 ; }
81: if (@expr1073746197 symbolName@var1964 !=@expr1073746198 other@var1943 .@expr4375 symbolName@var1947 ) {
82: return symbolName@var1964 <@expr1073746200 other@var1943 .@expr4375 symbolName@var1947 ; }
83: if (@expr1073746202 hash@var1965 !=@expr1073746203 other@var1943 .@expr4380 hash@var1948 ) {
84: return hash@var1965 <@expr1073746205 other@var1943 .@expr4380 hash@var1948 ; }
85: if (@expr1073746207 thisAndNextLine@var1966 !=@expr1073746208 other@var1943 .@expr1073746209 thisAndNextLine@var1949 ) {
86: return thisAndNextLine@var1966 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var1950 , std :: string * errorMessage@var1951 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var1952 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var1953 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073746211 fileName@var1962 .@expr1073746212 empty (@expr1073746213 ) &&@expr1073746214 fileName@var1962 .@expr1073746215 find_first_of (@expr1073746216 "?*" ) ==@expr1073746217 std ::@expr1073746218 string ::@expr1073746219 npos@expr1073746210 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var1954 ) const {
109: return errorId@var1961 ==@expr1073746220 other@var1954 .@expr1073746221 errorId@var1955 &&@expr1073746222
110: fileName@var1962 ==@expr1073746223 other@var1954 .@expr1073746224 fileName@var1956 &&@expr1073746225
111: lineNumber@var1963 ==@expr1073746226 other@var1954 .@expr1073746227 lineNumber@var1957 &&@expr1073746228
112: symbolName@var1964 ==@expr1073746229 other@var1954 .@expr1073746230 symbolName@var1958 &&@expr1073746231
113: hash@var1965 ==@expr1073746232 other@var1954 .@expr1073746233 hash@var1959 &&@expr1073746234
114: thisAndNextLine@var1966 ==@expr1073746235 other@var1954 .@expr1073746236 thisAndNextLine@var1960 ;
115: }
116:
117: std :: string errorId@var1961 ;
118: std :: string fileName@var1962 ;
119: int lineNumber@var1963 ;
120: std :: string symbolName@var1964 ;
121: unsigned long hash@var1965 ;
122: bool thisAndNextLine@var1966 ;
123: bool matched@var1967 ;
124: bool checked@var1968 ;
125:
126: enum Anonymous5 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var1969 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var1970 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var1971 , std :: string * errorMessage@var1972 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var1973 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var1974 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var1975 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var1976 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var1977 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var1978 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var1979 , const bool unusedFunctionChecking@var1980 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var1981 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var1982 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var1983 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var1984 , std :: clock_t clocks@var1985 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var1986 ;
45: long mNumberOfResults@var1987 ;
46:
47: TimerResultsData ( )
48: : mClocks@var1986 ( 0 )
49: , mNumberOfResults@var1987 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var1988 =@expr1073746238 (@expr1073746239 double ) (@expr1073746240 (@expr1073746241 unsigned long ) mClocks@var1986 ) /@expr1073746242 (@expr1073746243 double ) CLOCKS_PER_SEC@expr1073746237 ;
53: return ret@var1988 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var1989 ) const ;
62: void addResults ( const std :: string & str@var1990 , std :: clock_t clocks@var1991 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var1992 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var1993 , SHOWTIME_MODES showtimeMode@var1994 , TimerResultsIntf * timerResults@var1995 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var1996 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var1997 ;
79: TimerResultsIntf * mTimerResults@var1998 ;
80: std :: clock_t mStart@var1999 ;
81: const SHOWTIME_MODES mShowTimeMode@var2000 ;
82: bool mStopped@var2001 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var2002 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var2003 ;
103:
104:
105: std :: string addonPython@var2004 ;
106:
107:
108: std :: vector < std :: string > basePaths@var2005 ;
109:
110:
111: std :: string buildDir@var2006 ;
112:
113:
114: bool checkAllConfigurations@var2007 ;
115:
116:
117: bool checkConfiguration@var2008 ;
118:
|
121:
122: bool checkHeaders@var2009 ;
123:
124:
125: bool checkLibrary@var2010 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var2011 ;
129:
130:
131: bool checkUnusedTemplates@var2012 ;
132:
133:
134: bool clang@var2013 ;
135:
136:
137: std :: string clangExecutable@var2014 ;
138:
139:
140: bool clangTidy@var2015 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var2016 ;
144:
145:
146: std :: string cppcheckCfgProductName@var2017 ;
147:
148:
149: std :: string cppcheckCfgAbout@var2018 ;
150:
151:
152: bool daca@var2019 ;
153:
154:
155: bool debugnormal@var2020 ;
156:
157:
158: bool debugSimplified@var2021 ;
159:
160:
161: bool debugtemplate@var2022 ;
162:
163:
164: bool debugwarnings@var2023 ;
165:
166:
167: bool dump@var2024 ;
168: std :: string dumpFile@var2025 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var2026 ;
176:
177:
178: bool exceptionHandling@var2027 ;
179:
180:
181: std :: string exename@var2028 ;
182:
183:
184:
185: int exitCode@var2029 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var2030 ;
189:
190:
191: bool force@var2031 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var2032 ;
196:
197:
198: bool inlineSuppressions@var2033 ;
199:
200:
201:
202: unsigned int jobs@var2034 ;
203:
|
206:
207: bool jointSuppressionReport@var2035 ;
208:
209:
210: std :: list < std :: string > libraries@var2036 ;
211:
212:
213: Library library@var2037 ;
214:
215:
216:
217: int loadAverage@var2038 ;
218:
|
221:
222: int maxConfigs@var2039 ;
223:
224:
225: int maxCtuDepth@var2040 ;
226:
227:
228: int maxTemplateRecursion@var2041 ;
229:
230:
231: Suppressions nofail@var2042 ;
232:
233:
234: Suppressions nomsg@var2043 ;
235:
236:
237: std :: string outputFile@var2044 ;
238:
239:
240: std :: string plistOutput@var2045 ;
241:
242:
243: bool preprocessOnly@var2046 ;
244:
245: ImportProject project@var2047 ;
246:
247:
248: bool quiet@var2048 ;
249:
250:
251: bool relativePaths@var2049 ;
252:
253:
254: bool reportProgress@var2050 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var2051 ( "simple" )
261: , id@var2053 ( "rule" )
262: , severity@var2055 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var2051 ;
266: std :: string pattern@var2052 ;
267: std :: string id@var2053 ;
268: std :: string summary@var2054 ;
269: Severity :: SeverityType severity@var2055 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var2056 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var2062 ( false ) , externalFunctions@var2063 ( false ) , internalFunctions@var2064 ( false ) , externalVariables@var2065 ( false ) { }
281:
282: static const char XmlRootName@var2057 [ ] ;
283: static const char XmlClasses@var2058 [ ] ;
284: static const char XmlExternalFunctions@var2059 [ ] ;
285: static const char XmlInternalFunctions@var2060 [ ] ;
286: static const char XmlExternalVariables@var2061 [ ] ;
287:
288: void clear ( ) {
289: classes@var2062 =@expr1073746244 externalFunctions@var2063 =@expr1073746245 internalFunctions@var2064 =@expr1073746246 externalVariables@var2065 =@expr1073746247 false ;
290: }
291:
|
297:
298: bool classes@var2062 ;
299:
|
304:
305: bool externalFunctions@var2063 ;
306:
|
310:
311: bool internalFunctions@var2064 ;
312:
|
316:
317: bool externalVariables@var2065 ;
318: } ;
319:
320: SafeChecks safeChecks@var2066 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var2067 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var2068 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var2069 ;
325:
326:
327: SHOWTIME_MODES showtime@var2070 ;
328:
329:
330: Standards standards@var2071 ;
331:
332:
333:
334: std :: string templateFormat@var2072 ;
335:
336:
337:
338: std :: string templateLocation@var2073 ;
339:
340:
341: std :: string userDefines@var2074 ;
342:
343:
344: std :: set < std :: string > userUndefs@var2075 ;
345:
346:
347: std :: list < std :: string > userIncludes@var2076 ;
348:
349:
350: bool verbose@var2077 ;
351:
352:
353: bool xml@var2078 ;
354:
355:
356: int xml_version@var2079 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var2080 ) const {
363: for (@expr1073746248 const std ::@expr1073746249 string &@expr1073746250 configExcludePath@var2081 :@expr1073746251 configExcludePaths@var2016 ) {
364: if (@expr1073746252 file@var2080 .@expr1073746253 length (@expr1073746254 ) >=@expr1073746255 configExcludePath@var2081 .@expr4432 length (@expr4433 ) &&@expr1073746258 file@var2080 .@expr1073746259 compare (@expr1073746260 0 , configExcludePath@var2081 .@expr4432 length (@expr4433 ) , configExcludePath@var2081 ) ==@expr1073746263 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var2082 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var2083 , bool inconclusiveCheck@var2084 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073746264 find (@expr1073746265 libraries@var2036 .@expr1073746266 begin (@expr1073746267 ) , libraries@var2036 .@expr4444 end (@expr4445 ) , "posix" ) !=@expr1073746270 libraries@var2036 .@expr4444 end (@expr4445 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var2085 = true ) {
392: Settings ::@expr1073746273 mTerminated@var2002 =@expr1073746274 t@var2085 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073746275 mTerminated@var2002 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var2086 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var2087 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var2088 ) {
47: mSettings@var2123 =@expr1073746276 settings@var2088 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var2123 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var2125 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var2126 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var2089 ) ;
72:
73: void addtoken ( const std :: string & str@var2090 , const int lineno@var2091 , const int column@var2092 , const int fileno@var2093 , bool split@var2094 = false ) ;
74: void addtoken ( const std :: string & str@var2095 , const Token * locationTok@var2096 ) ;
75:
76: void addtoken ( const Token * tok@var2097 , const int lineno@var2098 , const int column@var2099 , const int fileno@var2100 ) ;
77: void addtoken ( const Token * tok@var2101 , const Token * locationTok@var2102 ) ;
78: void addtoken ( const Token * tok@var2103 ) ;
79:
80: static void insertTokens ( Token * dest@var2104 , const Token * src@var2105 , int n@var2106 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var2107 , const Token * first@var2108 , const Token * last@var2109 , bool one_line@var2110 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var2111 , const std :: string & file0@var2112 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var2113 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var2114 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var2120 .@expr1073746277 front@var2127 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var2120 .@expr1073746278 front@var2127 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var2120 .@expr1073746279 back@var2128 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var2120 .@expr1073746280 back@var2128 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var2121 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var2115 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var2116 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var2117 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var2118 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var2119 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var2120 ;
206:
207:
208: std :: vector < std :: string > mFiles@var2121 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var2122 ;
212:
213:
214: const Settings * mSettings@var2123 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var2124 ;
217:
218:
219: bool mIsC@var2125 ;
220: bool mIsCpp@var2126 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var2129 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var2130 ;
67: mutable int mVarId@var2131 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var2132 ) ;
73: bool hasVariable ( const std :: string & varname@var2133 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var2134 ) const {
75: return mVariableId@var2129 .@expr1073746281 find (@expr1073746282 varname@var2134 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var2129 .@expr1073746283 end (@expr1073746284 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var2129 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073746285 mVarId@var2131 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var2135 , ErrorLogger * errorLogger@var2136 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var2137 ) {
95: mTimerResults@var2257 =@expr1073746286 tr@var2137 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var2235 .@expr1073746287 isC (@expr1073746288 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var2235 .@expr1073746289 isCPP (@expr1073746290 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var2138 , bool * unknown@var2139 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var2140 , const std :: string & FileName@var2141 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var2142 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var2143 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var2144 ,
142: const char FileName@var2145 [ ] ,
143: const std :: string & configuration@var2146 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var2147 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var2148 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var2149 , const Token * end@var2150 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var2151 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var2152 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var2153 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var2154 , const Token * const tokEnd@var2155 , const bool only_k_r_fpar@var2156 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var2157 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var2158 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var2159 , bool commandWithCondition@var2160 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var2161 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var2162 , Token * * _tok2@var2163 , Token * * _tok3@var2164 , std :: string & value@var2165 , int & valueVarId@var2166 , bool & valueIsPointer@var2167 , bool floatvar@var2168 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var2169 , Token * tok3@var2170 , int varid@var2171 , const std :: string & structname@var2172 , std :: string & value@var2173 , int valueVarId@var2174 , bool valueIsPointer@var2175 , const Token * const valueToken@var2176 , int indentlevel@var2177 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var2178 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var2179 , const std :: string & endsWith@var2180 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var2181 , const std :: string & endsWith@var2182 , bool cpp@var2183 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var2184 ) {
585: mPreprocessor@var2258 =@expr1073746291 preprocessor@var2184 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var2258 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var2185 , const Token * end@var2186 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var2187 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var2188 , const std :: string & code@var2189 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var2190 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var2191 , const std :: string & what@var2192 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var2193 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var2194 , const std :: string & msg@var2195 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var2196 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var2197 , const std :: string & macroName@var2198 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var2199 , const Token * end@var2200 , bool allowSemicolon@var2201 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var2202 , const Severity :: SeverityType severity@var2203 , const std :: string & id@var2204 , const std :: string & msg@var2205 , bool inconclusive@var2206 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var2207 , Severity :: SeverityType severity@var2208 , const std :: string & id@var2209 , const std :: string & msg@var2210 , bool inconclusive@var2211 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var2212 , const Token * name@var2213 , const Token * typeDef@var2214 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var2215 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var2216 ,
821: const VariableMap & variableMap@var2217 ,
822: const int scopeStartVarId@var2218 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var2219 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var2220 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var2221 ,
827: int * varId@var2222 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var2223 ,
830: Token * const startToken@var2224 ,
831: const Token * const endToken@var2225 ,
832: const std :: map < std :: string , int > & varlist@var2226 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var2227 ,
834: int * varId_@var2228 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var2229 ) ;
849:
850: bool operatorEnd ( const Token * tok@var2230 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var2256 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var2231 ) {
861: mSettings@var2242 =@expr1073746292 settings@var2231 ;
862: list@var2235 .@expr1073746293 setSettings (@expr1073746294 settings@var2231 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var2244 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var2232 ) const ;
877:
878: void dump ( std :: ostream & out@var2233 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var2234 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var2254 ;
888: }
889:
|
892:
893: TokenList list@var2235 ;
894:
895: const Token * tokens ( ) const {
896: return list@var2235 .@expr1073746295 front (@expr1073746296 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var2236 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var2237 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var2238 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var2239 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var2242 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var2240 , bool inOperator@var2241 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073746297 mVarId@var2254 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var2242 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var2243 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var2244 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var2245 ;
973:
974:
975:
976: std :: string mConfiguration@var2246 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var2247 ;
980:
981: struct TypedefInfo {
982: std :: string name@var2248 ;
983: std :: string filename@var2249 ;
984: int lineNumber@var2250 ;
985: int column@var2251 ;
986: bool used@var2252 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var2253 ;
989:
990:
991: int mVarId@var2254 ;
992:
993:
994: int mUnnamedCount@var2255 ;
995:
|
999:
1000: bool mCodeWithTemplates@var2256 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var2257 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var2258 ;
1013: } ;

##file cppcheck-2.8/lib/checkbool.cpp

1:
|
35:
36: namespace {
37: CheckBool instance@var2259 ;
38: }
39:
40: static const CWE CWE398@var2260 ( 398U ) ;
41: static const CWE CWE571@var2261 ( 571U ) ;
42: static const CWE CWE587@var2262 ( 587U ) ;
43: static const CWE CWE704@var2263 ( 704U ) ;
44:
45: static bool isBool ( const Variable * var@var2264 )
46: {
47: return (@expr1073746298 var@var2264 &&@expr1073746299 Token ::@expr1073746300 Match (@expr1073746301 var@var2264 .@expr1073746302 typeEndToken (@expr1073746303 ) , "bool|_Bool" ) ) ;
48: }
49:
50:
51: void CheckBool :: checkIncrementBoolean ( )
52: {
53: if (@expr1073746304 !@expr1073746305 mSettings@var29 .@expr1073746306 severity@var2395 .@expr1073746307 isEnabled (@expr1073746308 Severity ::@expr1073746309 style ) ) {
54: return ; }
55:
56: const SymbolDatabase * symbolDatabase@var2265 ; symbolDatabase@var2265 =@expr1073746310 mTokenizer@var28 .@expr1073746311 getSymbolDatabase (@expr1073746312 ) ;
57: for (@expr1073746313 const Scope *@expr4490 scope@var2266 :@expr1073746315 symbolDatabase@var2265 .@expr1073746316 functionScopes@var2267 ) {
58: for (@expr1073746317 const Token *@expr4490 tok@var2268 =@expr1073746319 scope@var2266 .@expr1073746320 bodyStart@var2269 .@expr1073746321 next (@expr1073746322 ) ; tok@var2268 !=@expr1073746323 scope@var2266 .@expr1073746324 bodyEnd@var2270 ; tok@var2268 =@expr1073746325 tok@var2268 .@expr1073746326 next (@expr1073746327 ) ) {
59: if (@expr1073746328 astIsBool (@expr1073746329 tok@var2268 ) &&@expr1073746330 tok@var2268 .@expr4507 astParent (@expr4508 ) &&@expr1073746333 tok@var2268 .@expr4507 astParent (@expr4508 ) .@expr1073746336 str (@expr1073746337 ) ==@expr1073746338 "++" ) {
60: incrementBooleanError (@expr1073746339 tok@var2268 ) ;
61: }
62: }
63: }
64: }
65:
66: void CheckBool :: incrementBooleanError ( const Token * tok@var2271 )
67: {
68: reportError (@expr1073746340
69: tok@var2271 ,
70: Severity ::@expr1073746341 style ,
71: "incrementboolean" ,
72: "Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.\nThe operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value 'true' instead."
73: ,
74: CWE398@var2260 , Certainty ::@expr1073746342 normal
75: ) ;
76: }
77:
78: static bool isConvertedToBool ( const Token * tok@var2272 )
79: {
80: if (@expr1073746343 !@expr1073746344 tok@var2272 .@expr4521 astParent (@expr4522 ) ) {
81: return false ; }
82: return astIsBool (@expr1073746347 tok@var2272 .@expr4521 astParent (@expr4522 ) ) ||@expr1073746350 Token ::@expr1073746351 Match (@expr1073746352 tok@var2272 .@expr4521 astParent (@expr4522 ) .@expr1073746355 previous (@expr1073746356 ) , "if|while (" ) ;
83: }
84:
|
88:
89: void CheckBool :: checkBitwiseOnBoolean ( )
90: {
91: if (@expr1073746357 !@expr1073746358 mSettings@var29 .@expr1073746359 severity@var2395 .@expr1073746360 isEnabled (@expr1073746361 Severity ::@expr1073746362 style ) ) {
92: return ; }
93:
94:
95:
96: if (@expr1073746363 !@expr1073746364 mSettings@var29 .@expr1073746365 certainty@var2396 .@expr1073746366 isEnabled (@expr1073746367 Certainty ::@expr1073746368 inconclusive ) ) {
97: return ; }
98:
99: const SymbolDatabase * symbolDatabase@var2273 ; symbolDatabase@var2273 =@expr1073746369 mTokenizer@var28 .@expr1073746370 getSymbolDatabase (@expr1073746371 ) ;
100: for (@expr1073746372 const Scope *@expr4549 scope@var2274 :@expr1073746374 symbolDatabase@var2273 .@expr1073746375 functionScopes@var2275 ) {
101: for (@expr1073746376 const Token *@expr4549 tok@var2276 =@expr1073746378 scope@var2274 .@expr1073746379 bodyStart@var2277 .@expr1073746380 next (@expr1073746381 ) ; tok@var2276 !=@expr1073746382 scope@var2274 .@expr1073746383 bodyEnd@var2278 ; tok@var2276 =@expr1073746384 tok@var2276 .@expr1073746385 next (@expr1073746386 ) ) {
102: if (@expr1073746387 tok@var2276 .@expr1073746388 isBinaryOp (@expr1073746389 ) &&@expr1073746390 (@expr1073746391 tok@var2276 .@expr4568 str (@expr4569 ) ==@expr4570 "&" ||@expr1073746395 tok@var2276 .@expr4568 str (@expr4569 ) ==@expr4574 "|" ) ) {
103: if (@expr1073746399 !@expr1073746400 (@expr1073746401 astIsBool (@expr4578 tok@var2276 .@expr4579 astOperand1 (@expr4580 ) ) ||@expr1073746405 astIsBool (@expr4582 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) ) ) ) {
104: continue ; }
105: if (@expr1073746409 tok@var2276 .@expr4568 str (@expr4569 ) ==@expr4574 "|" &&@expr1073746413 !@expr1073746414 isConvertedToBool (@expr1073746415 tok@var2276 ) &&@expr1073746416 !@expr1073746417 (@expr1073746418 astIsBool (@expr4578 tok@var2276 .@expr4579 astOperand1 (@expr4580 ) ) &&@expr1073746422 astIsBool (@expr4582 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) ) ) ) {
106: continue ; }
107: if (@expr1073746426 !@expr1073746427 isConstExpression (@expr1073746428 tok@var2276 .@expr4579 astOperand1 (@expr4580 ) , mSettings@var29 .@expr4607 library@var2397 , true , mTokenizer@var28 .@expr4608 isCPP (@expr4609 ) ) ) {
108: continue ; }
109: if (@expr1073746434 !@expr1073746435 isConstExpression (@expr1073746436 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) , mSettings@var29 .@expr4607 library@var2397 , true , mTokenizer@var28 .@expr4608 isCPP (@expr4609 ) ) ) {
110: continue ; }
111: if (@expr1073746442 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) .@expr4621 variable (@expr4622 ) &&@expr1073746447 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) .@expr4621 variable (@expr4622 ) .@expr1073746452 nameToken (@expr1073746453 ) ==@expr1073746454 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) ) {
112: continue ; }
113: const std ::@expr1073746457 string expression@var2279 =@expr1073746458 astIsBool (@expr4578 tok@var2276 .@expr4579 astOperand1 (@expr4580 ) ) ?@expr1073746462 tok@var2276 .@expr4579 astOperand1 (@expr4580 ) .@expr1073746465 expressionString (@expr1073746466 )
114: :@expr1073746467 tok@var2276 .@expr4583 astOperand2 (@expr4584 ) .@expr1073746470 expressionString (@expr1073746471 ) ;
115: bitwiseOnBooleanError (@expr1073746472 tok@var2276 , expression@var2279 , tok@var2276 .@expr4568 str (@expr4569 ) ==@expr4570 "&" ?@expr1073746476 "&&" :@expr1073746477 "||" ) ;
116: }
117: }
118: }
119: }
120:
121: void CheckBool :: bitwiseOnBooleanError ( const Token * tok@var2280 , const std :: string & expression@var2281 , const std :: string & op@var2282 )
122: {
123: reportError (@expr1073746478 tok@var2280 ,
124: Severity ::@expr1073746479 style ,
125: "bitwiseOnBoolean" ,
126: "Boolean expression '" +@expr1073746480 expression@var2281 +@expr1073746481 "' is used in bitwise operation. Did you mean '" +@expr1073746482 op@var2282 +@expr1073746483 "'?" ,
127: CWE398@var2260 ,
128: Certainty ::@expr1073746484 inconclusive ) ;
129: }
130:
|
134:
135: void CheckBool :: checkComparisonOfBoolWithInt ( )
136: {
137: if (@expr1073746485 !@expr1073746486 mSettings@var29 .@expr1073746487 severity@var2395 .@expr1073746488 isEnabled (@expr1073746489 Severity ::@expr1073746490 warning ) ||@expr1073746491 !@expr1073746492 mTokenizer@var28 .@expr1073746493 isCPP (@expr1073746494 ) ) {
138: return ; }
139:
140: const SymbolDatabase * const symbolDatabase@var2283 ; symbolDatabase@var2283 =@expr1073746495 mTokenizer@var28 .@expr1073746496 getSymbolDatabase (@expr1073746497 ) ;
141: for (@expr1073746498 const Scope *@expr4675 scope@var2284 :@expr1073746500 symbolDatabase@var2283 .@expr1073746501 functionScopes@var2285 ) {
142: for (@expr1073746502 const Token *@expr4675 tok@var2286 =@expr1073746504 scope@var2284 .@expr1073746505 bodyStart@var2287 .@expr1073746506 next (@expr1073746507 ) ; tok@var2286 !=@expr1073746508 scope@var2284 .@expr1073746509 bodyEnd@var2288 ; tok@var2286 =@expr1073746510 tok@var2286 .@expr1073746511 next (@expr1073746512 ) ) {
143: if (@expr1073746513 !@expr1073746514 tok@var2286 .@expr1073746515 isComparisonOp (@expr1073746516 ) ||@expr1073746517 !@expr1073746518 tok@var2286 .@expr1073746519 isBinaryOp (@expr1073746520 ) ) {
144: continue ; }
145: const Token * const left@var2289 ; left@var2289 =@expr1073746521 tok@var2286 .@expr1073746522 astOperand1 (@expr1073746523 ) ;
146: const Token * const right@var2290 ; right@var2290 =@expr1073746524 tok@var2286 .@expr1073746525 astOperand2 (@expr1073746526 ) ;
147: if (@expr1073746527 left@var2289 .@expr1073746528 isBoolean (@expr1073746529 ) &&@expr1073746530 right@var2290 .@expr1073746531 varId (@expr1073746532 ) ) {
148: if (@expr4709 tok@var2286 .@expr4710 str (@expr4711 ) !=@expr4712 "==" &&@expr4713 tok@var2286 .@expr4710 str (@expr4711 ) !=@expr4716 "!=" ) {
149: comparisonOfBoolWithInvalidComparator (@expr4717 right@var2290 , left@var2289 .@expr4718 str (@expr4719 ) ) ;
150: }
151: } else { if (@expr1073746544 left@var2289 .@expr1073746545 varId (@expr1073746546 ) &&@expr1073746547 right@var2290 .@expr1073746548 isBoolean (@expr1073746549 ) ) {
152: if (@expr4709 tok@var2286 .@expr4710 str (@expr4711 ) !=@expr4712 "==" &&@expr4713 tok@var2286 .@expr4710 str (@expr4711 ) !=@expr4716 "!=" ) {
153: comparisonOfBoolWithInvalidComparator (@expr4717 right@var2290 , left@var2289 .@expr4718 str (@expr4719 ) ) ;
154: }
155: } }
156: }
157: }
158: }
159:
160: void CheckBool :: comparisonOfBoolWithInvalidComparator ( const Token * tok@var2291 , const std :: string & expression@var2292 )
161: {
162: reportError (@expr1073746561 tok@var2291 , Severity ::@expr1073746562 warning , "comparisonOfBoolWithInvalidComparator" ,
163: "Comparison of a boolean value using relational operator (<, >, <= or >=).\nThe result of the expression '"
164: +@expr1073746563 expression@var2292 +@expr1073746564 "' is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
165:
166: ) ;
167: }
168:
|
172:
173: static bool tokenIsFunctionReturningBool ( const Token * tok@var2293 )
174: {
175: const Function * func@var2294 ; func@var2294 =@expr1073746565 tok@var2293 ?@expr1073746566 tok@var2293 .@expr1073746567 function (@expr1073746568 ) :@expr1073746569 nullptr ;
176: if (@expr1073746570 func@var2294 &&@expr1073746571 Token ::@expr4748 Match (@expr1073746573 tok@var2293 , "%name% (" ) ) {
177: if (@expr1073746574 func@var2294 .@expr4751 tokenDef@var2295 &&@expr1073746576 Token ::@expr4748 Match (@expr1073746578 func@var2294 .@expr4751 tokenDef@var2295 .@expr1073746580 previous (@expr1073746581 ) , "bool|_Bool" ) ) {
178: return true ;
179: }
180: }
181: return false ;
182: }
183:
184: void CheckBool :: checkComparisonOfFuncReturningBool ( )
185: {
186: if (@expr1073746582 !@expr1073746583 mSettings@var29 .@expr1073746584 severity@var2395 .@expr1073746585 isEnabled (@expr1073746586 Severity ::@expr1073746587 style ) ) {
187: return ; }
188:
189: if (@expr1073746588 !@expr1073746589 mTokenizer@var28 .@expr1073746590 isCPP (@expr1073746591 ) ) {
190: return ; }
191:
192: const SymbolDatabase * const symbolDatabase@var2296 ; symbolDatabase@var2296 =@expr1073746592 mTokenizer@var28 .@expr1073746593 getSymbolDatabase (@expr1073746594 ) ;
193: auto getFunctionTok@var2297 ; getFunctionTok@var2297 =@expr1073746595 [@expr1073746596 ] (@expr1073746597 const Token *@expr4774 tok@var2298 ) .@expr1073746599 const Token *@expr4774 {
194: while (@expr1073746601 Token ::@expr1073746602 simpleMatch (@expr1073746603 tok@var2298 , "!" ) ||@expr1073746604 (@expr1073746605 tok@var2298 &&@expr1073746606 tok@var2298 .@expr1073746607 isCast (@expr1073746608 ) &&@expr1073746609 !@expr1073746610 isCPPCast (@expr4787 tok@var2298 ) ) ) {
195: tok@var2298 =@expr1073746612 tok@var2298 .@expr1073746613 astOperand1 (@expr1073746614 ) ; }
196: if (@expr1073746615 isCPPCast (@expr4787 tok@var2298 ) ) {
197: tok@var2298 =@expr1073746617 tok@var2298 .@expr1073746618 astOperand2 (@expr1073746619 ) ; }
198: if (@expr1073746620 tok@var2298 ) {
199: return tok@var2298 .@expr1073746621 previous (@expr1073746622 ) ; }
200: return nullptr ;
201: } ;
202:
203: for (@expr1073746623 const Scope *@expr4774 scope@var2299 :@expr1073746625 symbolDatabase@var2296 .@expr1073746626 functionScopes@var2300 ) {
204: for (@expr1073746627 const Token *@expr4774 tok@var2301 =@expr1073746629 scope@var2299 .@expr1073746630 bodyStart@var2302 .@expr1073746631 next (@expr1073746632 ) ; tok@var2301 !=@expr1073746633 scope@var2299 .@expr1073746634 bodyEnd@var2303 ; tok@var2301 =@expr1073746635 tok@var2301 .@expr1073746636 next (@expr1073746637 ) ) {
205: if (@expr1073746638 !@expr1073746639 tok@var2301 .@expr1073746640 isComparisonOp (@expr1073746641 ) ||@expr1073746642 tok@var2301 .@expr4819 str (@expr4820 ) ==@expr1073746645 "==" ||@expr1073746646 tok@var2301 .@expr4819 str (@expr4820 ) ==@expr1073746649 "!=" ) {
206: continue ; }
207:
208: const Token * firstToken@var2304 ; firstToken@var2304 =@expr1073746650 getFunctionTok@var2297 (@expr1073746651 tok@var2301 .@expr1073746652 astOperand1 (@expr1073746653 ) ) ;
209: const Token * secondToken@var2305 ; secondToken@var2305 =@expr1073746654 getFunctionTok@var2297 (@expr1073746655 tok@var2301 .@expr1073746656 astOperand2 (@expr1073746657 ) ) ;
210: if (@expr1073746658 !@expr1073746659 firstToken@var2304 ||@expr1073746660 !@expr1073746661 secondToken@var2305 ) {
211: continue ; }
212:
213: const bool firstIsFunctionReturningBool@var2306 =@expr1073746662 tokenIsFunctionReturningBool (@expr1073746663 firstToken@var2304 ) ;
214: const bool secondIsFunctionReturningBool@var2307 =@expr1073746664 tokenIsFunctionReturningBool (@expr1073746665 secondToken@var2305 ) ;
215: if (@expr1073746666 firstIsFunctionReturningBool@var2306 &&@expr1073746667 secondIsFunctionReturningBool@var2307 ) {
216: comparisonOfTwoFuncsReturningBoolError (@expr1073746668 firstToken@var2304 .@expr4845 next (@expr4846 ) , firstToken@var2304 .@expr4847 str (@expr4848 ) , secondToken@var2305 .@expr4849 str (@expr4850 ) ) ;
217: } else { if (@expr1073746675 firstIsFunctionReturningBool@var2306 ) {
218: comparisonOfFuncReturningBoolError (@expr1073746676 firstToken@var2304 .@expr4845 next (@expr4846 ) , firstToken@var2304 .@expr4847 str (@expr4848 ) ) ;
219: } else { if (@expr1073746681 secondIsFunctionReturningBool@var2307 ) {
220: comparisonOfFuncReturningBoolError (@expr1073746682 secondToken@var2305 .@expr1073746683 previous (@expr1073746684 ) , secondToken@var2305 .@expr4849 str (@expr4850 ) ) ;
221: } } }
222: }
223: }
224: }
225:
226: void CheckBool :: comparisonOfFuncReturningBoolError ( const Token * tok@var2308 , const std :: string & expression@var2309 )
227: {
228: reportError (@expr1073746687 tok@var2308 , Severity ::@expr1073746688 style , "comparisonOfFuncReturningBoolError" ,
229: "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '"
230: +@expr1073746689 expression@var2309 +@expr1073746690 "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
231:
232: , CWE398@var2260 , Certainty ::@expr1073746691 normal ) ;
233: }
234:
235: void CheckBool :: comparisonOfTwoFuncsReturningBoolError ( const Token * tok@var2310 , const std :: string & expression1@var2311 , const std :: string & expression2@var2312 )
236: {
237: reportError (@expr1073746692 tok@var2310 , Severity ::@expr1073746693 style , "comparisonOfTwoFuncsReturningBoolError" ,
238: "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '"
239: +@expr1073746694 expression1@var2311 +@expr1073746695 "' and function '" +@expr1073746696 expression2@var2312 +@expr1073746697 "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
240:
241: , CWE398@var2260 , Certainty ::@expr1073746698 normal ) ;
242: }
243:
|
247:
248: void CheckBool :: checkComparisonOfBoolWithBool ( )
249: {
250: if (@expr1073746699 !@expr1073746700 mSettings@var29 .@expr1073746701 severity@var2395 .@expr1073746702 isEnabled (@expr1073746703 Severity ::@expr1073746704 style ) ) {
251: return ; }
252:
253: if (@expr1073746705 !@expr1073746706 mTokenizer@var28 .@expr1073746707 isCPP (@expr1073746708 ) ) {
254: return ; }
255:
256: const SymbolDatabase * const symbolDatabase@var2313 ; symbolDatabase@var2313 =@expr1073746709 mTokenizer@var28 .@expr1073746710 getSymbolDatabase (@expr1073746711 ) ;
257:
258: for (@expr1073746712 const Scope *@expr4889 scope@var2314 :@expr1073746714 symbolDatabase@var2313 .@expr1073746715 functionScopes@var2315 ) {
259: for (@expr1073746716 const Token *@expr4889 tok@var2316 =@expr1073746718 scope@var2314 .@expr1073746719 bodyStart@var2317 .@expr1073746720 next (@expr1073746721 ) ; tok@var2316 !=@expr1073746722 scope@var2314 .@expr1073746723 bodyEnd@var2318 ; tok@var2316 =@expr1073746724 tok@var2316 .@expr4901 next (@expr4902 ) ) {
260: if (@expr1073746727 !@expr1073746728 tok@var2316 .@expr1073746729 isComparisonOp (@expr1073746730 ) ||@expr1073746731 tok@var2316 .@expr4908 str (@expr4909 ) ==@expr1073746734 "==" ||@expr1073746735 tok@var2316 .@expr4908 str (@expr4909 ) ==@expr1073746738 "!=" ) {
261: continue ; }
262: bool firstTokenBool@var2319 ; firstTokenBool@var2319 =@expr1073746739 false ;
263:
264: const Token * firstToken@var2320 ; firstToken@var2320 =@expr1073746740 tok@var2316 .@expr1073746741 previous (@expr1073746742 ) ;
265: if (@expr1073746743 firstToken@var2320 .@expr1073746744 varId (@expr1073746745 ) ) {
266: if (@expr1073746746 isBool (@expr1073746747 firstToken@var2320 .@expr1073746748 variable (@expr1073746749 ) ) ) {
267: firstTokenBool@var2319 =@expr1073746750 true ;
268: }
269: }
270: if (@expr1073746751 !@expr1073746752 firstTokenBool@var2319 ) {
271: continue ; }
272:
273: bool secondTokenBool@var2321 ; secondTokenBool@var2321 =@expr1073746753 false ;
274: const Token * secondToken@var2322 ; secondToken@var2322 =@expr1073746754 tok@var2316 .@expr4901 next (@expr4902 ) ;
275: if (@expr1073746757 secondToken@var2322 .@expr1073746758 varId (@expr1073746759 ) ) {
276: if (@expr1073746760 isBool (@expr1073746761 secondToken@var2322 .@expr1073746762 variable (@expr1073746763 ) ) ) {
277: secondTokenBool@var2321 =@expr1073746764 true ;
278: }
279: }
280: if (@expr1073746765 secondTokenBool@var2321 ) {
281: comparisonOfBoolWithBoolError (@expr1073746766 firstToken@var2320 .@expr1073746767 next (@expr1073746768 ) , secondToken@var2322 .@expr1073746769 str (@expr1073746770 ) ) ;
282: }
283: }
284: }
285: }
286:
287: void CheckBool :: comparisonOfBoolWithBoolError ( const Token * tok@var2323 , const std :: string & expression@var2324 )
288: {
289: reportError (@expr1073746771 tok@var2323 , Severity ::@expr1073746772 style , "comparisonOfBoolWithBoolError" ,
290: "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.\nThe variable '"
291: +@expr1073746773 expression@var2324 +@expr1073746774 "' is of type 'bool' and comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
292:
293: , CWE398@var2260 , Certainty ::@expr1073746775 normal ) ;
294: }
295:
296:
297: void CheckBool :: checkAssignBoolToPointer ( )
298: {
299: const SymbolDatabase * symbolDatabase@var2325 ; symbolDatabase@var2325 =@expr1073746776 mTokenizer@var28 .@expr1073746777 getSymbolDatabase (@expr1073746778 ) ;
300: for (@expr1073746779 const Scope *@expr4956 scope@var2326 :@expr1073746781 symbolDatabase@var2325 .@expr1073746782 functionScopes@var2327 ) {
301: for (@expr1073746783 const Token *@expr4956 tok@var2328 =@expr1073746785 scope@var2326 .@expr1073746786 bodyStart@var2329 ; tok@var2328 !=@expr1073746787 scope@var2326 .@expr1073746788 bodyEnd@var2330 ; tok@var2328 =@expr1073746789 tok@var2328 .@expr1073746790 next (@expr1073746791 ) ) {
302: if (@expr1073746792 tok@var2328 .@expr1073746793 str (@expr1073746794 ) ==@expr1073746795 "=" &&@expr1073746796 astIsPointer (@expr1073746797 tok@var2328 .@expr1073746798 astOperand1 (@expr1073746799 ) ) &&@expr1073746800 astIsBool (@expr1073746801 tok@var2328 .@expr1073746802 astOperand2 (@expr1073746803 ) ) ) {
303: assignBoolToPointerError (@expr1073746804 tok@var2328 ) ;
304: }
305: }
306: }
307: }
308:
309: void CheckBool :: assignBoolToPointerError ( const Token * tok@var2331 )
310: {
311: reportError (@expr1073746805 tok@var2331 , Severity ::@expr1073746806 error , "assignBoolToPointer" ,
312: "Boolean value assigned to pointer." , CWE587@var2262 , Certainty ::@expr1073746807 normal ) ;
313: }
314:
315:
316:
317: void CheckBool :: checkComparisonOfBoolExpressionWithInt ( )
318: {
319: if (@expr1073746808 !@expr1073746809 mSettings@var29 .@expr1073746810 severity@var2395 .@expr1073746811 isEnabled (@expr1073746812 Severity ::@expr1073746813 warning ) ) {
320: return ; }
321:
322: const SymbolDatabase * symbolDatabase@var2332 ; symbolDatabase@var2332 =@expr1073746814 mTokenizer@var28 .@expr1073746815 getSymbolDatabase (@expr1073746816 ) ;
323:
324: for (@expr1073746817 const Scope *@expr4994 scope@var2333 :@expr1073746819 symbolDatabase@var2332 .@expr1073746820 functionScopes@var2334 ) {
325: for (@expr1073746821 const Token *@expr4994 tok@var2335 =@expr1073746823 scope@var2333 .@expr1073746824 bodyStart@var2336 .@expr1073746825 next (@expr1073746826 ) ; tok@var2335 !=@expr1073746827 scope@var2333 .@expr1073746828 bodyEnd@var2337 ; tok@var2335 =@expr1073746829 tok@var2335 .@expr1073746830 next (@expr1073746831 ) ) {
326: if (@expr1073746832 !@expr1073746833 tok@var2335 .@expr1073746834 isComparisonOp (@expr1073746835 ) ) {
327: continue ; }
328:
329: const Token * numTok@var2338 ; numTok@var2338 =@expr1073746836 nullptr ;
330: const Token * boolExpr@var2339 ; boolExpr@var2339 =@expr1073746837 nullptr ;
331: bool numInRhs@var2340 ;
332: if (@expr1073746838 astIsBool (@expr1073746839 tok@var2335 .@expr5016 astOperand1 (@expr5017 ) ) ) {
333: boolExpr@var2339 =@expr1073746842 tok@var2335 .@expr5016 astOperand1 (@expr5017 ) ;
334: numTok@var2338 =@expr1073746845 tok@var2335 .@expr5022 astOperand2 (@expr5023 ) ;
335: numInRhs@var2340 =@expr1073746848 true ;
336: } else { if (@expr1073746849 astIsBool (@expr1073746850 tok@var2335 .@expr5022 astOperand2 (@expr5023 ) ) ) {
337: boolExpr@var2339 =@expr1073746853 tok@var2335 .@expr5022 astOperand2 (@expr5023 ) ;
338: numTok@var2338 =@expr1073746856 tok@var2335 .@expr5016 astOperand1 (@expr5017 ) ;
339: numInRhs@var2340 =@expr1073746859 false ;
340: } else {
341: continue ;
342: } }
343:
344: if (@expr1073746860 !@expr1073746861 numTok@var2338 ||@expr1073746862 !@expr1073746863 boolExpr@var2339 ) {
345: continue ; }
346:
347: if (@expr1073746864 boolExpr@var2339 .@expr1073746865 isOp (@expr1073746866 ) &&@expr1073746867 numTok@var2338 .@expr1073746868 isName (@expr1073746869 ) &&@expr1073746870 Token ::@expr5047 Match (@expr1073746872 tok@var2335 , "==|!=" ) ) {
348:
349:
350: continue ; }
351:
352: if (@expr1073746873 astIsBool (@expr1073746874 numTok@var2338 ) ) {
353: continue ; }
354:
355: const ValueFlow ::@expr5051 Value * minval@var2341 ; minval@var2341 =@expr1073746876 numTok@var2338 .@expr1073746877 getValueLE (@expr1073746878 0 , mSettings@var29 ) ;
356: if (@expr1073746879 minval@var2341 &&@expr1073746880 minval@var2341 .@expr5057 intvalue@var2342 ==@expr1073746882 0 &&@expr1073746883
357: (@expr1073746884 numInRhs@var2340 ?@expr1073746885 Token ::@expr5047 Match (@expr5063 tok@var2335 , ">|==|!=" )
358: :@expr1073746888 Token ::@expr5047 Match (@expr5066 tok@var2335 , "<|==|!=" ) ) ) {
359: minval@var2341 =@expr1073746891 nullptr ; }
360:
361: const ValueFlow ::@expr5051 Value * maxval@var2343 ; maxval@var2343 =@expr1073746893 numTok@var2338 .@expr1073746894 getValueGE (@expr1073746895 1 , mSettings@var29 ) ;
362: if (@expr1073746896 maxval@var2343 &&@expr1073746897 maxval@var2343 .@expr5074 intvalue@var2344 ==@expr1073746899 1 &&@expr1073746900
363: (@expr1073746901 numInRhs@var2340 ?@expr1073746902 Token ::@expr5047 Match (@expr5066 tok@var2335 , "<|==|!=" )
364: :@expr1073746905 Token ::@expr5047 Match (@expr5063 tok@var2335 , ">|==|!=" ) ) ) {
365: maxval@var2343 =@expr1073746908 nullptr ; }
366:
367: if (@expr1073746909 minval@var2341 ||@expr1073746910 maxval@var2343 ) {
368: bool not0or1@var2345 ; not0or1@var2345 =@expr1073746911 (@expr1073746912 minval@var2341 &&@expr1073746913 minval@var2341 .@expr5057 intvalue@var2342 <@expr1073746915 0 ) ||@expr1073746916 (@expr1073746917 maxval@var2343 &&@expr1073746918 maxval@var2343 .@expr5074 intvalue@var2344 >@expr1073746920 1 ) ;
369: comparisonOfBoolExpressionWithIntError (@expr1073746921 tok@var2335 , not0or1@var2345 ) ;
370: }
371: }
372: }
373: }
374:
375: void CheckBool :: comparisonOfBoolExpressionWithIntError ( const Token * tok@var2346 , bool not0or1@var2347 )
376: {
377: if (@expr1073746922 not0or1@var2347 ) {
378: reportError (@expr1073746923 tok@var2346 , Severity ::@expr5100 warning , "compareBoolExpressionWithInt" ,
379: "Comparison of a boolean expression with an integer other than 0 or 1." , CWE398@var2260 , Certainty ::@expr5101 normal ) ; }
380: else {
381: reportError (@expr1073746926 tok@var2346 , Severity ::@expr5100 warning , "compareBoolExpressionWithInt" ,
382: "Comparison of a boolean expression with an integer." , CWE398@var2260 , Certainty ::@expr5101 normal ) ; }
383: }
384:
385:
386: void CheckBool :: pointerArithBool ( )
387: {
388: const SymbolDatabase * symbolDatabase@var2348 ; symbolDatabase@var2348 =@expr1073746929 mTokenizer@var28 .@expr1073746930 getSymbolDatabase (@expr1073746931 ) ;
389:
390: for (@expr1073746932 const Scope &@expr1073746933 scope@var2349 :@expr1073746934 symbolDatabase@var2348 .@expr1073746935 scopeList@var2350 ) {
391: if (@expr1073746936 scope@var2349 .@expr5113 type@var2351 !=@expr1073746938 Scope ::@expr1073746939 eIf &&@expr1073746940 !@expr1073746941 scope@var2349 .@expr1073746942 isLoopScope (@expr1073746943 ) ) {
392: continue ; }
393: const Token * tok@var2352 ; tok@var2352 =@expr1073746944 scope@var2349 .@expr5121 classDef@var2353 .@expr1073746946 next (@expr1073746947 ) .@expr1073746948 astOperand2 (@expr1073746949 ) ;
394: if (@expr1073746950 scope@var2349 .@expr5113 type@var2351 ==@expr1073746952 Scope ::@expr1073746953 eFor ) {
395: tok@var2352 =@expr1073746954 Token ::@expr1073746955 findsimplematch (@expr1073746956 scope@var2349 .@expr5121 classDef@var2353 .@expr1073746958 tokAt (@expr1073746959 2 ) , ";" ) ;
396: if (@expr5136 tok@var2352 ) {
397: tok@var2352 =@expr1073746961 tok@var2352 .@expr1073746962 astOperand2 (@expr1073746963 ) ; }
398: if (@expr5136 tok@var2352 ) {
399: tok@var2352 =@expr1073746965 tok@var2352 .@expr1073746966 astOperand1 (@expr1073746967 ) ; }
400: } else { if (@expr1073746968 scope@var2349 .@expr5113 type@var2351 ==@expr1073746970 Scope ::@expr1073746971 eDo ) {
401: tok@var2352 =@expr1073746972 (@expr1073746973 scope@var2349 .@expr5150 bodyEnd@var2354 .@expr5151 tokAt (@expr5152 2 ) ) ?@expr1073746977 scope@var2349 .@expr5150 bodyEnd@var2354 .@expr5151 tokAt (@expr5152 2 ) .@expr1073746981 astOperand2 (@expr1073746982 ) :@expr1073746983 nullptr ; } }
402:
403: pointerArithBoolCond (@expr1073746984 tok@var2352 ) ;
404: }
405: }
406:
407: void CheckBool :: pointerArithBoolCond ( const Token * tok@var2355 )
408: {
409: if (@expr1073746985 !@expr1073746986 tok@var2355 ) {
410: return ; }
411: if (@expr1073746987 Token ::@expr1073746988 Match (@expr1073746989 tok@var2355 , "&&|%oror%" ) ) {
412: pointerArithBoolCond (@expr1073746990 tok@var2355 .@expr5167 astOperand1 (@expr5168 ) ) ;
413: pointerArithBoolCond (@expr1073746993 tok@var2355 .@expr5170 astOperand2 (@expr5171 ) ) ;
414: return ;
415: }
416: if (@expr1073746996 tok@var2355 .@expr5173 str (@expr5174 ) !=@expr1073746999 "+" &&@expr1073747000 tok@var2355 .@expr5173 str (@expr5174 ) !=@expr1073747003 "-" ) {
417: return ; }
418:
419: if (@expr1073747004 tok@var2355 .@expr1073747005 isBinaryOp (@expr1073747006 ) &&@expr1073747007
420: tok@var2355 .@expr5167 astOperand1 (@expr5168 ) .@expr1073747010 isName (@expr1073747011 ) &&@expr1073747012
421: tok@var2355 .@expr5167 astOperand1 (@expr5168 ) .@expr5191 variable (@expr5192 ) &&@expr1073747017
422: tok@var2355 .@expr5167 astOperand1 (@expr5168 ) .@expr5191 variable (@expr5192 ) .@expr1073747022 isPointer (@expr1073747023 ) &&@expr1073747024
423: tok@var2355 .@expr5170 astOperand2 (@expr5171 ) .@expr1073747027 isNumber (@expr1073747028 ) ) {
424: pointerArithBoolError (@expr1073747029 tok@var2355 ) ; }
425: }
426:
427: void CheckBool :: pointerArithBoolError ( const Token * tok@var2356 )
428: {
429: reportError (@expr1073747030 tok@var2356 ,
430: Severity ::@expr1073747031 error ,
431: "pointerArithBool" ,
432: "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.\nConverting pointer arithmetic result to bool. The boolean result is always true unless there is pointer arithmetic overflow, and overflow is undefined behaviour. Probably a dereference is forgotten."
433: , CWE571@var2261 , Certainty ::@expr1073747032 normal ) ;
434: }
435:
436: void CheckBool :: checkAssignBoolToFloat ( )
437: {
438: if (@expr1073747033 !@expr1073747034 mTokenizer@var28 .@expr1073747035 isCPP (@expr1073747036 ) ) {
439: return ; }
440: if (@expr1073747037 !@expr1073747038 mSettings@var29 .@expr1073747039 severity@var2395 .@expr1073747040 isEnabled (@expr1073747041 Severity ::@expr1073747042 style ) ) {
441: return ; }
442: const SymbolDatabase * symbolDatabase@var2357 ; symbolDatabase@var2357 =@expr1073747043 mTokenizer@var28 .@expr1073747044 getSymbolDatabase (@expr1073747045 ) ;
443: for (@expr1073747046 const Scope *@expr5223 scope@var2358 :@expr1073747048 symbolDatabase@var2357 .@expr1073747049 functionScopes@var2359 ) {
444: for (@expr1073747050 const Token *@expr5223 tok@var2360 =@expr1073747052 scope@var2358 .@expr1073747053 bodyStart@var2361 ; tok@var2360 !=@expr1073747054 scope@var2358 .@expr1073747055 bodyEnd@var2362 ; tok@var2360 =@expr1073747056 tok@var2360 .@expr1073747057 next (@expr1073747058 ) ) {
445: if (@expr1073747059 tok@var2360 .@expr1073747060 str (@expr1073747061 ) ==@expr1073747062 "=" &&@expr1073747063 astIsFloat (@expr1073747064 tok@var2360 .@expr1073747065 astOperand1 (@expr1073747066 ) , false ) &&@expr1073747067 astIsBool (@expr1073747068 tok@var2360 .@expr1073747069 astOperand2 (@expr1073747070 ) ) ) {
446: assignBoolToFloatError (@expr1073747071 tok@var2360 ) ;
447: }
448: }
449: }
450: }
451:
452: void CheckBool :: assignBoolToFloatError ( const Token * tok@var2363 )
453: {
454: reportError (@expr1073747072 tok@var2363 , Severity ::@expr1073747073 style , "assignBoolToFloat" ,
455: "Boolean value assigned to floating point variable." , CWE704@var2263 , Certainty ::@expr1073747074 normal ) ;
456: }
457:
458: void CheckBool :: returnValueOfFunctionReturningBool ( )
459: {
460: if (@expr1073747075 !@expr1073747076 mSettings@var29 .@expr1073747077 severity@var2395 .@expr1073747078 isEnabled (@expr1073747079 Severity ::@expr1073747080 style ) ) {
461: return ; }
462:
463: const SymbolDatabase * const symbolDatabase@var2364 ; symbolDatabase@var2364 =@expr1073747081 mTokenizer@var28 .@expr1073747082 getSymbolDatabase (@expr1073747083 ) ;
464:
465: for (@expr1073747084 const Scope *@expr5261 scope@var2365 :@expr1073747086 symbolDatabase@var2364 .@expr1073747087 functionScopes@var2366 ) {
466: if (@expr1073747088 !@expr1073747089 (@expr1073747090 scope@var2365 .@expr5267 function@var2367 &&@expr1073747092 Token ::@expr5269 Match (@expr1073747094 scope@var2365 .@expr5267 function@var2367 .@expr1073747096 retDef@var2368 , "bool|_Bool" ) ) ) {
467: continue ; }
468:
469: for (@expr1073747097 const Token *@expr5261 tok@var2369 =@expr1073747099 scope@var2365 .@expr1073747100 bodyStart@var2370 .@expr1073747101 next (@expr1073747102 ) ; tok@var2369 &&@expr1073747103 (@expr1073747104 tok@var2369 !=@expr1073747105 scope@var2365 .@expr1073747106 bodyEnd@var2371 ) ; tok@var2369 =@expr1073747107 tok@var2369 .@expr1073747108 next (@expr1073747109 ) ) {
470:
471: const Token * tok2@var2372 ; tok2@var2372 =@expr1073747110 findLambdaEndToken (@expr1073747111 tok@var2369 ) ;
472: if (@expr1073747112 tok2@var2372 ) {
473: tok@var2369 =@expr1073747113 tok2@var2372 ; }
474: else { if (@expr1073747114 tok@var2369 .@expr5291 scope (@expr5292 ) &&@expr1073747117 tok@var2369 .@expr5291 scope (@expr5292 ) .@expr1073747120 isClassOrStruct (@expr1073747121 ) ) {
475: tok@var2369 =@expr1073747122 tok@var2369 .@expr5291 scope (@expr5292 ) .@expr1073747125 bodyEnd@var2407 ; }
476: else { if (@expr1073747126 Token ::@expr1073747127 simpleMatch (@expr1073747128 tok@var2369 , "return" ) &&@expr1073747129 tok@var2369 .@expr5306 astOperand1 (@expr5307 ) &&@expr1073747132
477: (@expr1073747133 tok@var2369 .@expr5306 astOperand1 (@expr5307 ) .@expr1073747136 getValueGE (@expr1073747137 2 , mSettings@var29 ) ||@expr1073747138 tok@var2369 .@expr5306 astOperand1 (@expr5307 ) .@expr1073747141 getValueLE (@expr1073747142 -1 , mSettings@var29 ) ) &&@expr1073747143
478: !@expr1073747144 (@expr1073747145 tok@var2369 .@expr5306 astOperand1 (@expr5307 ) .@expr1073747148 astOperand1 (@expr1073747149 ) &&@expr1073747150 Token ::@expr5269 Match (@expr1073747152 tok@var2369 .@expr5306 astOperand1 (@expr5307 ) , "&|%or%" ) ) ) {
479: returnValueBoolError (@expr1073747155 tok@var2369 ) ; } } }
480: }
481: }
482: }
483:
484: void CheckBool :: returnValueBoolError ( const Token * tok@var2373 )
485: {
486: reportError (@expr1073747156 tok@var2373 , Severity ::@expr1073747157 style , "returnNonBoolInBooleanFunction" , "Non-boolean value returned from function returning bool" ) ;
487: }

##file cppcheck-2.8/lib/settings.h

12:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2374 ; mFlags@var2374 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2374 ;
54: }
55: void clear ( ) {
56: mFlags@var2374 =@expr1073747158 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2374 =@expr1073747159 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2375 ) {
62: if (@expr1073747160 enabled@var2375 ) {
63: fill (@expr1073747161 ) ; }
64: else {
65: clear (@expr1073747162 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2376 ) const {
68: return (@expr5339 mFlags@var2374 &@expr1073747164 (@expr5339 1U <<@expr1073747166 (@expr1073747167 uint32_t ) flag@var2376 ) ) !=@expr1073747168 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2377 ) {
71: mFlags@var2374 |=@expr1073747169 (@expr1073747170 1U <<@expr1073747171 (@expr1073747172 uint32_t ) flag@var2377 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2378 ) {
74: mFlags@var2374 &=@expr1073747173 ~@expr1073747174 (@expr1073747175 1U <<@expr1073747176 (@expr1073747177 uint32_t ) flag@var2378 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2379 , bool enabled@var2380 ) {
77: if (@expr1073747178 enabled@var2380 ) {
78: enable (@expr1073747179 flag@var2379 ) ; }
79: else {
80: disable (@expr1073747180 flag@var2379 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2381 ; mFlags@var2381 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2381 ;
54: }
55: void clear ( ) {
56: mFlags@var2381 =@expr1073747181 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2381 =@expr1073747182 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2382 ) {
62: if (@expr1073747183 enabled@var2382 ) {
63: fill (@expr1073747184 ) ; }
64: else {
65: clear (@expr1073747185 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2383 ) const {
68: return (@expr5362 mFlags@var2381 &@expr1073747187 (@expr5362 1U <<@expr1073747189 (@expr1073747190 uint32_t ) flag@var2383 ) ) !=@expr1073747191 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2384 ) {
71: mFlags@var2381 |=@expr1073747192 (@expr1073747193 1U <<@expr1073747194 (@expr1073747195 uint32_t ) flag@var2384 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2385 ) {
74: mFlags@var2381 &=@expr1073747196 ~@expr1073747197 (@expr1073747198 1U <<@expr1073747199 (@expr1073747200 uint32_t ) flag@var2385 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2386 , bool enabled@var2387 ) {
77: if (@expr1073747201 enabled@var2387 ) {
78: enable (@expr1073747202 flag@var2386 ) ; }
79: else {
80: disable (@expr1073747203 flag@var2386 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2388 ; mFlags@var2388 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2388 ;
54: }
55: void clear ( ) {
56: mFlags@var2388 =@expr1073747204 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2388 =@expr1073747205 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2389 ) {
62: if (@expr1073747206 enabled@var2389 ) {
63: fill (@expr1073747207 ) ; }
64: else {
65: clear (@expr1073747208 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2390 ) const {
68: return (@expr5385 mFlags@var2388 &@expr1073747210 (@expr5385 1U <<@expr1073747212 (@expr1073747213 uint32_t ) flag@var2390 ) ) !=@expr1073747214 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2391 ) {
71: mFlags@var2388 |=@expr1073747215 (@expr1073747216 1U <<@expr1073747217 (@expr1073747218 uint32_t ) flag@var2391 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2392 ) {
74: mFlags@var2388 &=@expr1073747219 ~@expr1073747220 (@expr1073747221 1U <<@expr1073747222 (@expr1073747223 uint32_t ) flag@var2392 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2393 , bool enabled@var2394 ) {
77: if (@expr1073747224 enabled@var2394 ) {
78: enable (@expr1073747225 flag@var2393 ) ; }
79: else {
80: disable (@expr1073747226 flag@var2393 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  severity possible {3@13,2@140}
  id possible {"returnNonBoolInBooleanFunction"@13,"comparisonOfBoolWithInvalidComparator"@140}
  msg possible "Non-boolean value returned from function returning bool"@13
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible {3@30,1@39,2@66}
  id possible {"assignBoolToFloat"@30,"pointerArithBool"@39,"compareBoolExpressionWithInt"@66,"compareBoolExpressionWithInt"@67,"assignBoolToPointer"@82,"comparisonOfBoolWithBoolError"@89,"comparisonOfTwoFuncsReturningBoolError"@109,"comparisonOfFuncReturningBoolError"@110,"bitwiseOnBoolean"@162,"incrementboolean"@196}
  msg possible {"Boolean value assigned to floating point variable."@30,"Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.\nConverting pointer arithmetic result to bool. The boolean result is always true unless there is pointer arithmetic overflow, and overflow is undefined behaviour. Probably a dereference is forgotten."@39,"Comparison of a boolean expression with an integer other than 0 or 1."@66,"Comparison of a boolean expression with an integer."@67,"Boolean value assigned to pointer."@82,"Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.\nThe operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value 'true' instead."@196}
  certainty possible {0@30,1@162}
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 44
  ( always "Boolean"
Line 48
  ( always "Boolean"
Line 113
  nullptr always 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  nullptr always 0
  "func_name" always "func_name"
Line 118
  nullptr always 0
  "func_name1" always "func_name1"
  "func_name2" always "func_name2"
Line 119
  nullptr always 0
  "var_name" always "var_name"
Line 120
  nullptr always 0
Line 121
  nullptr always 0
  "expression" always "expression"
  "&&" always "&&"
Line 122
  nullptr always 0
  true always 1
Line 123
  nullptr always 0
Line 124
  nullptr always 0
  "expression" always "expression"
Line 125
  nullptr always 0
Line 129
  "Boolean" always "Boolean"
Line 133
  "Boolean type checks\n- using increment on boolean\n- comparison of a boolean expression with an integer other than 0 or 1\n- comparison of a function returning boolean value using relational operator\n- comparison of a boolean value with boolean value using relational operator\n- using bool in bitwise expression\n- pointer addition in condition (either dereference is forgot or pointer overflow is required to make the condition false)\n- Assigning bool value to pointer or float\n- Returning an integer other than 0 or 1 from a function with boolean return value\n" always "Boolean type checks\n- using increment on boolean\n- comparison of a boolean expression with an integer other than 0 or 1\n- comparison of a function returning boolean value using relational operator\n- comparison of a boolean value with boolean value using relational operator\n- using bool in bitwise expression\n- pointer addition in condition (either dereference is forgot or pointer overflow is required to make the condition false)\n- Assigning bool value to pointer or float\n- Returning an integer other than 0 or 1 from a function with boolean return value\n"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@24036,34@24292}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@93,34@94}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@93,""@94,""@95,"U"@96,"U"@97,"u"@98,"u"@99,"u8"@100,"u8"@101}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@225,34@226}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@222,34@224}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@183,128@184,64@185,32@186,16@187,8@188,4@189,2@190,1@191}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@192,128@193,64@194,32@195,16@196,8@197,4@198,2@199,1@200}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@192,4294967167@193,4294967231@194,4294967263@195,4294967279@196,4294967287@197,4294967291@198,4294967293@199,4294967294@200}
  flag {!<=-1,256@192,128@193,64@194,32@195,16@196,8@197,4@198,2@199,1@200}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible {"return"@22,"!"@114}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@82,4@83,0@84}
  t possible {10@82,4@83,0@84}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@82,4@83,0@84}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@82,0@84}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@82,0@84}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@82}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@82}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@82}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@82}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@82}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@90}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  pattern possible ";"@61
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@92,17179869184@103,8589934592@105,34359738368@107,4294967296@109,2147483648@111,1073741824@113,536870912@115,268435456@117}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@179,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@180}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@91,17179869184@102,8589934592@104,34359738368@106,4294967296@108,2147483648@110,1073741824@112,536870912@114,268435456@116}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@91,17179869184@102,8589934592@104,34359738368@106,4294967296@108,2147483648@110,1073741824@112,536870912@114,268435456@116}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@25,4096@28,16384@31,2048@32,1024@33,65536@34,512@35,256@36,128@37}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@246,4194304@248,8388608@249,2097152@251,1048576@252,524288@253,262144@254,131072@255,65536}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@224,2097152@225,1048576@226,524288@227,262144@228,131072@229,65536@230,32768@231,16384@232}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@224,4292870143@225,4293918719@226,4294443007@227,4294705151@228,4294836223@229,4294901759@230,4294934527@231,4294950911@232}
  flag {!<=-1,8388608@224,2097152@225,1048576@226,524288@227,262144@228,131072@229,65536@230,32768@231,16384@232}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 40
  398U always 398
Line 41
  571U always 571
Line 42
  587U always 587
Line 43
  704U always 704
Line 45
  ( always {!<=-1,!>=2}
Line 47
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  var always !0
  "bool|_Bool" always "bool|_Bool"
Line 53
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 57
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 58
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  "++" always "++"
Line 69
  tok possible 0@236
Line 70
  :: always 3
  style always 3
Line 71
  "incrementboolean" always "incrementboolean"
Line 72
  "Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.\nThe operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value 'true' instead." always "Incrementing a variable of type 'bool' with postfix operator++ is deprecated by the C++ Standard. You should assign it the value 'true' instead.\nThe operand of a postfix increment operator may be of type bool but it is deprecated by C++ Standard (Annex D-1) and the operand is always set to true. You should assign it the value 'true' instead."
Line 74
  :: always 0
  normal always 0
Line 78
  ( always {!<=-1,!>=2}
Line 80
  ! always {!<=-1,!>=2}
Line 81
  return always {!<=-1,!>=2}
  false always 0
Line 82
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  "if|while (" always "if|while ("
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 96
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
Line 100
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 101
  != always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "&" always "&"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "|" always "|"
Line 103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 105
  ( possible size=1
  == always {!<=-1,!>=2}
  "|" always "|"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  true always 1
  ( always {!<=-1,!>=2}
Line 109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( possible symbolic=(tok->astOperand2()->variable()->nameToken())
  true always 1
  ( always {!<=-1,!>=2}
Line 111
  ( possible symbolic=(tok->astOperand2()->variable()->nameToken())
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  == always {!<=-1,!>=2}
  "&" always "&"
  "&&" always "&&"
  : always "||"
  "||" always "||"
Line 123
  tok possible 0@237
Line 124
  :: always 3
  style always 3
Line 125
  "bitwiseOnBoolean" always "bitwiseOnBoolean"
Line 126
  "Boolean expression '" always "Boolean expression '"
  expression possible "expression"@237
  "' is used in bitwise operation. Did you mean '" always "' is used in bitwise operation. Did you mean '"
  op possible "&&"@237
  "'?" always "'?"
Line 128
  :: always 1
  inconclusive always 1
Line 137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 141
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 142
  != always {!<=-1,!>=2}
Line 143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 147
  left always symbolic=(tok->astOperand1())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  right always symbolic=(tok->astOperand2())
Line 148
  ( possible size=2
  != always {!<=-1,!>=2}
  "==" always "=="
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  "!=" always "!="
Line 149
  right always symbolic=(tok->astOperand2())
  left always symbolic=(tok->astOperand1())
Line 151
  left always symbolic=(tok->astOperand1())
  && always {!<=-1,!>=2}
  right always symbolic=(tok->astOperand2())
  ( always {!<=-1,!>=2}
Line 152
  ( possible size=2
  != always {!<=-1,!>=2}
  "==" always "=="
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  "!=" always "!="
Line 153
  right always symbolic=(tok->astOperand2())
  left always symbolic=(tok->astOperand1())
Line 162
  tok possible {symbolic=(tok->astOperand2())@154,0@240}
  :: always 2
  warning always 2
  "comparisonOfBoolWithInvalidComparator" always "comparisonOfBoolWithInvalidComparator"
Line 163
  "Comparison of a boolean value using relational operator (<, >, <= or >=).\nThe result of the expression '" always "Comparison of a boolean value using relational operator (<, >, <= or >=).\nThe result of the expression '"
Line 164
  expression possible "expression"@240
  "' is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results." always "' is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
Line 173
  ( always {!<=-1,!>=2}
Line 175
  = possible 0
  ? possible 0
  tok always !0
  : always 0
  nullptr always 0
Line 176
  func {symbolic=(tok?tok->function():nullptr),0}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 177
  func {symbolic=(tok?tok->function():nullptr),!0}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  func {symbolic=(tok?tok->function():nullptr),!0}
  . always !0
  "bool|_Bool" always "bool|_Bool"
Line 178
  return always {!<=-1,!>=2}
  true always 1
Line 181
  return always {!<=-1,!>=2}
  false always 0
Line 186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 194
  ( always {!<=-1,!>=2}
  "!" always "!"
  || always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  tok always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
Line 196
  ( always {!<=-1,!>=2}
Line 199
  tok always !0
Line 200
  nullptr always 0
Line 203
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 204
  != always {!<=-1,!>=2}
Line 205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "==" always "=="
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "!=" always "!="
Line 210
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 213
  firstIsFunctionReturningBool always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  firstToken always !0
Line 214
  secondIsFunctionReturningBool always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  secondToken always !0
Line 215
  firstIsFunctionReturningBool {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  secondIsFunctionReturningBool always {!<=-1,!>=2}
Line 216
  firstToken always !0
  firstToken always !0
  secondToken always !0
Line 217
  firstIsFunctionReturningBool {!<=-1,!>=2,0}
Line 218
  firstToken always !0
  firstToken always !0
Line 219
  secondIsFunctionReturningBool always {!<=-1,!>=2}
Line 220
  secondToken always !0
  secondToken always !0
Line 228
  tok possible 0@233
  :: always 3
  style always 3
  "comparisonOfFuncReturningBoolError" always "comparisonOfFuncReturningBoolError"
Line 229
  "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '" always "Comparison of a function returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '"
Line 230
  expression possible "func_name"@233
  "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results." always "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
Line 232
  :: always 0
  normal always 0
Line 237
  tok possible 0@234
  :: always 3
  style always 3
  "comparisonOfTwoFuncsReturningBoolError" always "comparisonOfTwoFuncsReturningBoolError"
Line 238
  "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '" always "Comparison of two functions returning boolean value using relational (<, >, <= or >=) operator.\nThe return type of function '"
Line 239
  expression1 possible "func_name1"@234
  "' and function '" always "' and function '"
  expression2 possible "func_name2"@234
  "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results." always "' is 'bool' and result is of type 'bool'. Comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
Line 241
  :: always 0
  normal always 0
Line 250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 258
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 259
  != always {!<=-1,!>=2}
Line 260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "==" always "=="
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "!=" always "!="
Line 262
  firstTokenBool {!<=-1,!>=2,0}
  firstTokenBool always {!<=-1,!>=2}
  = always 0
  false always 0
Line 265
  firstToken always symbolic=(tok->previous())
Line 266
  ( always {!<=-1,!>=2}
  firstToken always symbolic=(tok->previous())
Line 267
  firstTokenBool always {!<=-1,!>=2}
  = always 1
  true always 1
Line 270
  ! {!<=-1,!>=2,1,0}
  firstTokenBool {!<=-1,!>=2,0,1}
Line 273
  secondTokenBool {!<=-1,!>=2,0}
  secondTokenBool always {!<=-1,!>=2}
  = always 0
  false always 0
Line 275
  secondToken always symbolic=(tok->next())
Line 276
  ( always {!<=-1,!>=2}
  secondToken always symbolic=(tok->next())
Line 277
  secondTokenBool always {!<=-1,!>=2}
  = always 1
  true always 1
Line 280
  secondTokenBool {!<=-1,!>=2,0,1}
Line 281
  firstToken always symbolic=(tok->previous())
  secondToken always symbolic=(tok->next())
Line 289
  tok possible 0@235
  :: always 3
  style always 3
  "comparisonOfBoolWithBoolError" always "comparisonOfBoolWithBoolError"
Line 290
  "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.\nThe variable '" always "Comparison of a variable having boolean value using relational (<, >, <= or >=) operator.\nThe variable '"
Line 291
  expression possible "var_name"@235
  "' is of type 'bool' and comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results." always "' is of type 'bool' and comparing 'bool' value using relational (<, >, <= or >=) operator could cause unexpected results."
Line 293
  :: always 0
  normal always 0
Line 300
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 301
  != always {!<=-1,!>=2}
Line 302
  == always {!<=-1,!>=2}
  "=" always "="
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 311
  tok possible 0@231
  :: always 1
  error always 1
  "assignBoolToPointer" always "assignBoolToPointer"
Line 312
  "Boolean value assigned to pointer." always "Boolean value assigned to pointer."
  :: always 0
  normal always 0
Line 319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 324
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 325
  != always {!<=-1,!>=2}
Line 326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 329
  = always 0
  nullptr always 0
Line 330
  = always 0
  nullptr always 0
Line 331
  numInRhs {!<=-1,!>=2,0}
Line 332
  ( always {!<=-1,!>=2}
Line 335
  numInRhs always {!<=-1,!>=2}
  = always 1
  true always 1
Line 336
  ( always {!<=-1,!>=2}
Line 339
  numInRhs always {!<=-1,!>=2}
  = always 0
  false always 0
Line 344
  ! always {!<=-1,!>=2}
  numTok possible {symbolic=(tok->astOperand2()),symbolic=(tok->astOperand1())}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 347
  boolExpr always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  numTok always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "==|!=" always "==|!="
Line 352
  ( always {!<=-1,!>=2}
  numTok always !0
Line 355
  0 always 0
Line 356
  && always {!<=-1,!>=2}
  minval always !0
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
Line 357
  numInRhs always {!<=-1,!>=2}
  ? always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ">|==|!=" always ">|==|!="
Line 358
  : always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "<|==|!=" always "<|==|!="
Line 359
  = always 0
  nullptr always 0
Line 361
  1 always 1
Line 362
  && always {!<=-1,!>=2}
  maxval always !0
  == always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
Line 363
  numInRhs always {!<=-1,!>=2}
  ? always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "<|==|!=" always "<|==|!="
Line 364
  : always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ">|==|!=" always ">|==|!="
Line 365
  = always 0
  nullptr always 0
Line 367
  || always {!<=-1,!>=2}
Line 368
  not0or1 always {!<=-1,!>=2}
  not0or1 always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  minval always !0
  < always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  maxval always !0
  > always {!<=-1,!>=2}
  1 always 1
Line 369
  not0or1 {symbolic=((minval&&minval->intvalue<0)||(maxval&&maxval->intvalue>1)),!<=-1,!>=2}
Line 375
  , always {!<=-1,!>=2}
  not0or1 always {!<=-1,!>=2}
Line 377
  not0or1 {!<=-1,!>=2,symbolic=((minval&&minval->intvalue<0)||(maxval&&maxval->intvalue>1))@81,1@238}
Line 378
  tok possible 0@238
  :: always 2
  warning always 2
  "compareBoolExpressionWithInt" always "compareBoolExpressionWithInt"
Line 379
  "Comparison of a boolean expression with an integer other than 0 or 1." always "Comparison of a boolean expression with an integer other than 0 or 1."
  :: always 0
  normal always 0
Line 381
  :: always 2
  warning always 2
  "compareBoolExpressionWithInt" always "compareBoolExpressionWithInt"
Line 382
  "Comparison of a boolean expression with an integer." always "Comparison of a boolean expression with an integer."
  :: always 0
  normal always 0
Line 390
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 391
  . possible {8,10}
  != {!<=-1,!>=2,1}
  :: always 6
  eIf always 6
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 394
  . possible {10,6}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
Line 395
  2 always 2
  ";" always ";"
Line 397
  tok always !0
Line 399
  tok always !0
Line 400
  . {6,!8}
  == {!<=-1,!>=2,0}
  :: always 10
  eDo always 10
Line 401
  2 always 2
  2 always 2
  : always 0
  nullptr always 0
Line 409
  ! always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
  tok always !0
  "&&|%oror%" always "&&|%oror%"
Line 412
  tok always !0
Line 413
  tok always !0
Line 416
  tok always !0
  ( possible size=1
  != always {!<=-1,!>=2}
  "+" always "+"
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
  "-" always "-"
Line 419
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 421
  && always {!<=-1,!>=2}
Line 422
  ( always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 423
  ( always {!<=-1,!>=2}
Line 429
  tok possible 0@239
Line 430
  :: always 1
  error always 1
Line 431
  "pointerArithBool" always "pointerArithBool"
Line 432
  "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.\nConverting pointer arithmetic result to bool. The boolean result is always true unless there is pointer arithmetic overflow, and overflow is undefined behaviour. Probably a dereference is forgotten." always "Converting pointer arithmetic result to bool. The bool is always true unless there is undefined behaviour.\nConverting pointer arithmetic result to bool. The boolean result is always true unless there is pointer arithmetic overflow, and overflow is undefined behaviour. Probably a dereference is forgotten."
Line 433
  :: always 0
  normal always 0
Line 438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 443
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 444
  != always {!<=-1,!>=2}
Line 445
  == always {!<=-1,!>=2}
  "=" always "="
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  false always 0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 454
  tok possible 0@232
  :: always 3
  style always 3
  "assignBoolToFloat" always "assignBoolToFloat"
Line 455
  "Boolean value assigned to floating point variable." always "Boolean value assigned to floating point variable."
  :: always 0
  normal always 0
Line 460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 465
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 466
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  . always !0
  "bool|_Bool" always "bool|_Bool"
Line 469
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
  tok possible symbolic=(tok2)
Line 473
  = always !0
  tok2 always !0
Line 474
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 475
  ( always !0
Line 476
  ( always {!<=-1,!>=2}
  "return" always "return"
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 477
  ( always !0
  2 always 2
  || always {!<=-1,!>=2}
  ( always !0
  -1 always -1
  && always {!<=-1,!>=2}
Line 478
  ! always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  "&|%or%" always "&|%or%"
Line 486
  tok possible 0@241
  :: always 3
  style always 3
  "returnNonBoolInBooleanFunction" always "returnNonBoolInBooleanFunction"
  "Non-boolean value returned from function returning bool" always "Non-boolean value returned from function returning bool"
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,3@14,2@68}
  flag possible {3@14,2@68}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,1@164}
  flag possible 1@164
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
