

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744266 !@expr1073744267 mTokenizer@var28 ) {
69: instances (@expr1073744268 ) .@expr1073744269 remove (@expr1073744270 this@expr1073744271 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744272 string (@expr1073744273 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744274 void ) tokenizer@var21 ;
108: (@expr1073744275 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744276 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744277 void ) ctu@var24 ;
120: (@expr1073744278 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744279 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744280 0U ) , Certainty ::@expr1073744281 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744282 list < const Token *@expr1073744283 > callstack@var41 (@expr1073744284 1 , tok@var35 ) ;
141: reportError (@expr1073744285 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744286 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744287 0U ) , Certainty ::@expr1073744288 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var64 ;
42: double mDoubleValue@var65 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var66 ;
44: bool mIsUnsigned@var67 ;
45:
46: void promote ( const value & v@var68 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var69 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var66 !=@expr1073744289 Type ::@expr1073744290 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var66 ==@expr1073744291 Type ::@expr1073744292 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744293 ) ?@expr1073744294 mDoubleValue@var65 :@expr1073744295 (@expr1073744296 double ) mIntValue@var64 ;
60: }
61:
62: static value calc ( char op@var70 , const value & v1@var71 , const value & v2@var72 ) ;
63: int compare ( const value & v@var73 ) const ;
64: value add ( int v@var74 ) const ;
65: value shiftLeft ( const value & v@var75 ) const ;
66: value shiftRight ( const value & v@var76 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var77 ;
72:
73: static long long toLongNumber ( const std :: string & str@var78 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var79 ) ;
75:
76: template < class T > static std :: string toString ( T value@var80 ) {
77: std ::@expr1073744297 ostringstream result@var81 ;
78: result@var81 <<@expr1073744298 value@var80 ;
79: return result@var81 .@expr1073744299 str (@expr1073744300 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var82 ) ;
82:
83: static bool isInt ( const std :: string & str@var83 ) ;
84: static bool isFloat ( const std :: string & str@var84 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var85 ) ;
86: static bool isNegative ( const std :: string & str@var86 ) ;
87: static bool isPositive ( const std :: string & str@var87 ) ;
88: static bool isDec ( const std :: string & str@var88 ) ;
89: static bool isFloatHex ( const std :: string & str@var89 ) ;
90: static bool isIntHex ( const std :: string & str@var90 ) ;
91: static bool isOct ( const std :: string & str@var91 ) ;
92: static bool isBin ( const std :: string & str@var92 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var93 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var94 , bool supportMicrosoftExtensions@var95 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var96 , const std :: string & second@var97 ) ;
105: static std :: string subtract ( const std :: string & first@var98 , const std :: string & second@var99 ) ;
106: static std :: string multiply ( const std :: string & first@var100 , const std :: string & second@var101 ) ;
107: static std :: string divide ( const std :: string & first@var102 , const std :: string & second@var103 ) ;
108: static std :: string mod ( const std :: string & first@var104 , const std :: string & second@var105 ) ;
109: static std :: string incdec ( const std :: string & var@var106 , const std :: string & op@var107 ) ;
110: static std :: string calculate ( const std :: string & first@var108 , const std :: string & second@var109 , char action@var110 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var111 ) ;
113: static std :: string cos ( const std :: string & tok@var112 ) ;
114: static std :: string tan ( const std :: string & tok@var113 ) ;
115: static std :: string abs ( const std :: string & tok@var114 ) ;
116: static bool isEqual ( const std :: string & first@var115 , const std :: string & second@var116 ) ;
117: static bool isNotEqual ( const std :: string & first@var117 , const std :: string & second@var118 ) ;
118: static bool isGreater ( const std :: string & first@var119 , const std :: string & second@var120 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var121 , const std :: string & second@var122 ) ;
120: static bool isLess ( const std :: string & first@var123 , const std :: string & second@var124 ) ;
121: static bool isLessEqual ( const std :: string & first@var125 , const std :: string & second@var126 ) ;
122: static bool isNullValue ( const std :: string & str@var127 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var128 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var129 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var130 , std :: string :: size_type iPos@var131 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var132 , const MathLib :: value & v2@var133 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var134 , const MathLib :: value & v2@var135 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var136 , const MathLib :: value & v2@var137 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var138 , const MathLib :: value & v2@var139 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var140 , const MathLib :: value & v2@var141 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var142 , const MathLib :: value & v2@var143 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var144 , const MathLib :: value & v2@var145 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var146 , const MathLib :: value & v2@var147 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var148 , const MathLib :: value & v2@var149 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var150 , const MathLib :: value & v2@var151 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var152 ) ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var153 ) const {
35: return p@var153 .@expr1073744301 first@var154 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var155 ) const {
42: return p@var155 .@expr1073744302 second@var156 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var157 , const T & x@var158 )
48: {
49: return std ::@expr1073744303 find (@expr1073744304 r@var157 .@expr1073744305 begin (@expr1073744306 ) , r@var157 .@expr2483 end (@expr2484 ) , x@var158 ) !=@expr1073744309 r@var157 .@expr2483 end (@expr2484 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var159 , const T & x@var160 )
54: {
55: return std ::@expr1073744312 find (@expr1073744313 r@var159 .@expr1073744314 begin (@expr1073744315 ) , r@var159 .@expr2492 end (@expr2493 ) , x@var160 ) !=@expr1073744318 r@var159 .@expr2492 end (@expr2493 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var161 , const U & x@var162 )
60: {
61: return std ::@expr1073744321 find (@expr1073744322 r@var161 .@expr1073744323 begin (@expr1073744324 ) , r@var161 .@expr2501 end (@expr2502 ) , x@var162 ) !=@expr1073744327 r@var161 .@expr2501 end (@expr2502 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var163 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744330 t@var163 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var164 , char c@var165 )
74: {
75: return !@expr1073744331 str@var164 .@expr1073744332 empty (@expr1073744333 ) &&@expr1073744334 str@var164 .@expr1073744335 back (@expr1073744336 ) ==@expr1073744337 c@var165 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var166 , const char end@var167 [ ] , unsigned long endlen@var168 )
79: {
80: return (@expr2514 str@var166 .@expr2515 size (@expr2516 ) >=@expr1073744341 endlen@var168 ) &&@expr1073744342 (@expr2514 str@var166 .@expr1073744344 compare (@expr1073744345 str@var166 .@expr2515 size (@expr2516 ) -@expr1073744348 endlen@var168 , endlen@var168 , end@var167 ) ==@expr1073744349 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var169 , const char ( & end@var170 ) [ N ] )
85: {
86: return endsWith (@expr1073744351 str@var169 , end@var170 , N@expr1073744350 -@expr1073744352 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var171 , char q@var172 , const std :: string & p@var173 )
90: {
91: if (@expr1073744353 !@expr1073744354 endsWith (@expr1073744355 str@var171 , q@var172 ) ) {
92: return false ; }
93: if (@expr1073744356 (@expr1073744357 str@var171 .@expr1073744358 length (@expr1073744359 ) +@expr1073744360 1 ) >@expr1073744361 p@var173 .@expr1073744362 length (@expr1073744363 ) &&@expr1073744364 (@expr1073744365 str@var171 .@expr1073744366 compare (@expr1073744367 0 , p@var173 .@expr1073744368 size (@expr1073744369 ) +@expr1073744370 1 , p@var173 +@expr1073744371 q@var172 ) ==@expr1073744372 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var174 , char q@var175 )
99: {
100: static const std ::@expr2549 vector < std ::@expr2549 string > suffixes@var176 {@expr1073744375 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744376 const std ::@expr2549 string &@expr1073744378 p@var177 :@expr1073744379 suffixes@var176 ) {
102: if (@expr1073744380 isPrefixStringCharLiteral (@expr1073744381 str@var174 , q@var175 , p@var177 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var178 )
109: {
110: return isStringCharLiteral (@expr1073744382 str@var178 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var179 )
114: {
115: return isStringCharLiteral (@expr1073744383 str@var179 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var180 , char q@var181 )
119: {
120: const unsigned long quotePos@var182 =@expr1073744384 str@var180 .@expr1073744385 find (@expr1073744386 q@var181 ) ;
121: return str@var180 .@expr1073744387 substr (@expr1073744388 quotePos@var182 +@expr1073744389 1U , str@var180 .@expr1073744390 size (@expr1073744391 ) -@expr1073744392 quotePos@var182 -@expr1073744393 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var183 )
125: {
126: if (@expr1073744394 isStringLiteral (@expr1073744395 str@var183 ) ) {
127: return getStringCharLiteral (@expr1073744396 str@var183 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var184 )
132: {
133: if (@expr1073744397 isCharLiteral (@expr1073744398 str@var184 ) ) {
134: return getStringCharLiteral (@expr1073744399 str@var184 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var185 )
139: {
140: if (@expr1073744400 i@var185 ==@expr1073744401 1 ) {
141: return "st" ; }
142: if (@expr1073744402 i@var185 ==@expr1073744403 2 ) {
143: return "nd" ; }
144: if (@expr1073744404 i@var185 ==@expr1073744405 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var186 , const std :: string & rhs@var187 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var188 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var189 , const std :: string & name@var190 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var191 , const std :: string & name@var192 ) ;
156:
157: void strTolower ( std :: string & str@var193 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var194 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var195 ;
42:
43:
44: std :: string stdValue@var196 ;
45:
46:
47: Standards ( ) : c@var194 ( CLatest ) , cpp@var195 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var197 ) {
50: stdValue@var196 =@expr1073744406 str@var197 ;
51: if (@expr1073744407 str@var197 ==@expr1073744408 "c89" ||@expr1073744409 str@var197 ==@expr1073744410 "C89" ) {
52: c@var194 =@expr1073744411 C89 ;
53: return true ;
54: }
55: if (@expr1073744412 str@var197 ==@expr1073744413 "c99" ||@expr1073744414 str@var197 ==@expr1073744415 "C99" ) {
56: c@var194 =@expr1073744416 C99 ;
57: return true ;
58: }
59: if (@expr1073744417 str@var197 ==@expr1073744418 "c11" ||@expr1073744419 str@var197 ==@expr1073744420 "C11" ) {
60: c@var194 =@expr1073744421 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744422 c@var194 ) {
67: case C89 :@expr2599 ;
68: return "c89" ;
69: case C99 :@expr2599 ;
70: return "c99" ;
71: case C11 :@expr2599 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var198 ) {
77: if (@expr1073744426 std@var198 ==@expr1073744427 "c89" ) {
78: return Standards ::@expr1073744428 C89 ;
79: }
80: if (@expr1073744429 std@var198 ==@expr1073744430 "c99" ) {
81: return Standards ::@expr1073744431 C99 ;
82: }
83: if (@expr1073744432 std@var198 ==@expr1073744433 "c11" ) {
84: return Standards ::@expr1073744434 C11 ;
85: }
86: return Standards ::@expr1073744435 CLatest ;
87: }
88: bool setCPP ( std :: string str@var199 ) {
89: stdValue@var196 =@expr1073744436 str@var199 ;
90: strTolower (@expr1073744437 str@var199 ) ;
91: cpp@var195 =@expr1073744438 getCPP (@expr1073744439 str@var199 ) ;
92: return !@expr1073744440 stdValue@var196 .@expr1073744441 empty (@expr1073744442 ) &&@expr1073744443 str@var199 ==@expr1073744444 getCPP (@expr1073744445 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744446 cpp@var195 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var200 ) {
98: switch (@expr1073744447 std@var200 ) {
99: case CPP03 :@expr2624 ;
100: return "c++03" ;
101: case CPP11 :@expr2624 ;
102: return "c++11" ;
103: case CPP14 :@expr2624 ;
104: return "c++14" ;
105: case CPP17 :@expr2624 ;
106: return "c++17" ;
107: case CPP20 :@expr2624 ;
108: return "c++20" ;
109: case CPP23 :@expr2624 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var201 ) {
115: if (@expr1073744454 std@var201 ==@expr1073744455 "c++03" ) {
116: return Standards ::@expr1073744456 CPP03 ;
117: }
118: if (@expr1073744457 std@var201 ==@expr1073744458 "c++11" ) {
119: return Standards ::@expr1073744459 CPP11 ;
120: }
121: if (@expr1073744460 std@var201 ==@expr1073744461 "c++14" ) {
122: return Standards ::@expr1073744462 CPP14 ;
123: }
124: if (@expr1073744463 std@var201 ==@expr1073744464 "c++17" ) {
125: return Standards ::@expr1073744465 CPP17 ;
126: }
127: if (@expr1073744466 std@var201 ==@expr1073744467 "c++20" ) {
128: return Standards ::@expr1073744468 CPP20 ;
129: }
130: if (@expr1073744469 std@var201 ==@expr1073744470 "c++23" ) {
131: return Standards ::@expr1073744471 CPP23 ;
132: }
133: return Standards ::@expr1073744472 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var205 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var202 ) : errorcode@var205 ( e@var202 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var203 , T && r@var204 ) : errorcode@var205 ( e@var203 ) , reason@var206 ( r@var204 ) { }
66: ErrorCode errorcode@var205 ;
67: std :: string reason@var206 ;
68: } ;
69:
70: Error load ( const char exename@var207 [ ] , const char path@var208 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var209 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var210 [ ] , unsigned long len@var211 ) ;
75:
76: struct AllocFunc {
77: int groupId@var212 ;
78: int arg@var213 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var214 ;
81: int bufferSizeArg1@var215 ;
82: int bufferSizeArg2@var216 ;
83: int reallocArg@var217 ;
84: bool initData@var218 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var219 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var220 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var221 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var222 , int arg@var223 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var224 , int arg@var225 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var226 , int arg@var227 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var228 [ ] ) const {
107: return getAllocDealloc (@expr1073744473 mAlloc@var494 , name@var228 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var229 [ ] ) const {
112: return getAllocDealloc (@expr1073744474 mDealloc@var495 , name@var229 ) ;
113: }
114:
115:
116: int allocId ( const char name@var230 [ ] ) const {
117: const AllocFunc * af@var231 ; af@var231 =@expr1073744475 getAllocDealloc (@expr1073744476 mAlloc@var494 , name@var230 ) ;
118: return af@var231 ?@expr1073744477 af@var231 .@expr1073744478 groupId@var232 :@expr1073744479 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var233 [ ] ) const {
123: const AllocFunc * af@var234 ; af@var234 =@expr1073744480 getAllocDealloc (@expr1073744481 mDealloc@var495 , name@var233 ) ;
124: return af@var234 ?@expr1073744482 af@var234 .@expr1073744483 groupId@var235 :@expr1073744484 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var236 , int id@var237 , int arg@var238 ) {
129: mAlloc@var494 [@expr2661 functionname@var236 ] .@expr1073744486 groupId@var2450 =@expr1073744487 id@var237 ;
130: mAlloc@var494 [@expr2661 functionname@var236 ] .@expr1073744489 arg@var2451 =@expr1073744490 arg@var238 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var239 , int id@var240 , int arg@var241 ) {
134: mDealloc@var495 [@expr2667 functionname@var239 ] .@expr1073744492 groupId@var2452 =@expr1073744493 id@var240 ;
135: mDealloc@var495 [@expr2667 functionname@var239 ] .@expr1073744495 arg@var2453 =@expr1073744496 arg@var241 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var242 , int id@var243 , int arg@var244 , int reallocArg@var245 = 1 ) {
139: mRealloc@var496 [@expr2673 functionname@var242 ] .@expr1073744498 groupId@var2454 =@expr1073744499 id@var243 ;
140: mRealloc@var496 [@expr2673 functionname@var242 ] .@expr1073744501 arg@var2455 =@expr1073744502 arg@var244 ;
141: mRealloc@var496 [@expr2673 functionname@var242 ] .@expr1073744504 reallocArg@var2456 =@expr1073744505 reallocArg@var245 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var246 , bool noreturn@var247 ) {
146: mNoReturn@var497 [@expr1073744506 funcname@var246 ] =@expr1073744507 noreturn@var247 ?@expr1073744508 FalseTrueMaybe ::@expr1073744509 True :@expr1073744510 FalseTrueMaybe ::@expr1073744511 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var248 ) ;
150:
151:
152: static bool ismemory ( const int id@var249 ) {
153: return (@expr2688 (@expr2688 id@var249 >@expr1073744514 0 ) &&@expr1073744515 (@expr2688 (@expr2688 id@var249 &@expr1073744518 1 ) ==@expr1073744519 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var250 ) {
156: return (@expr2696 (@expr2696 func@var250 .@expr2698 groupId@var251 >@expr1073744523 0 ) &&@expr1073744524 (@expr2696 (@expr2696 func@var250 .@expr2698 groupId@var251 &@expr1073744528 1 ) ==@expr1073744529 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var252 ) {
161: return (@expr2706 (@expr2706 id@var252 >@expr1073744532 0 ) &&@expr1073744533 (@expr2706 (@expr2706 id@var252 &@expr1073744536 1 ) ==@expr1073744537 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var253 ) {
164: return (@expr2714 (@expr2714 func@var253 .@expr2716 groupId@var254 >@expr1073744541 0 ) &&@expr1073744542 (@expr2714 (@expr2714 func@var253 .@expr2716 groupId@var254 &@expr1073744546 1 ) ==@expr1073744547 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var255 ) const ;
168: int formatstr_argno ( const Token * ftok@var256 ) const ;
169: bool formatstr_scan ( const Token * ftok@var257 ) const ;
170: bool formatstr_secure ( const Token * ftok@var258 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var259 ;
174: int ptr2Arg@var260 ;
175: int sizeArg@var261 ;
176: int strlenArg@var262 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var263 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var264 ;
182: Standards standards@var265 ;
183: Severity :: SeverityType severity@var266 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var267 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var268 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var269 ) const ;
191: bool matchArguments ( const Token * ftok@var270 , const std :: string & functionName@var271 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var272 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var273 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var274 ) const ;
198: int returnValueContainer ( const Token * ftok@var275 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var276 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var277 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var278 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var279 , std :: string * unknownFunc@var280 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var290 ( -1 ) ,
210: size_templateArgNo@var292 ( -1 ) ,
211: arrayLike_indexOp@var293 ( false ) ,
212: stdStringLike@var294 ( false ) ,
213: stdAssociativeLike@var295 ( false ) ,
214: opLessAllowed@var296 ( true ) ,
215: hasInitializerListConstructor@var297 ( false ) ,
216: unstableErase@var298 ( false ) ,
217: unstableInsert@var299 ( false ) ,
218: view@var300 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var281 ;
248: Yield yield@var282 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var283 ;
252: int templateParameter@var284 ;
253: } ;
254: std :: string startPattern@var285 ; std :: string startPattern2@var286 ; std :: string endPattern@var287 ; std :: string itEndPattern@var288 ;
255: std :: map < std :: string , Function > functions@var289 ;
256: int type_templateArgNo@var290 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var291 ;
258: int size_templateArgNo@var292 ;
259: bool arrayLike_indexOp@var293 ;
260: bool stdStringLike@var294 ;
261: bool stdAssociativeLike@var295 ;
262: bool opLessAllowed@var296 ;
263: bool hasInitializerListConstructor@var297 ;
264: bool unstableErase@var298 ;
265: bool unstableInsert@var299 ;
266: bool view@var300 ;
267:
268: Action getAction ( const std :: string & function@var301 ) const {
269: const std ::@expr1073744548 map < std ::@expr1073744549 string , Function > ::@expr1073744550 const_iterator i@var302 =@expr1073744551 functions@var289 .@expr1073744552 find (@expr1073744553 function@var301 ) ;
270: if (@expr1073744554 i@var302 !=@expr1073744555 functions@var289 .@expr1073744556 end (@expr1073744557 ) ) {
271: return i@var302 .@expr1073744558 second@var303 .@expr1073744559 action@var304 ; }
272: return Action ::@expr1073744560 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var305 ) const {
276: const std ::@expr1073744561 map < std ::@expr1073744562 string , Function > ::@expr1073744563 const_iterator i@var306 =@expr1073744564 functions@var289 .@expr1073744565 find (@expr1073744566 function@var305 ) ;
277: if (@expr1073744567 i@var306 !=@expr1073744568 functions@var289 .@expr1073744569 end (@expr1073744570 ) ) {
278: return i@var306 .@expr1073744571 second@var307 .@expr1073744572 yield@var308 ; }
279: return Yield ::@expr1073744573 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var309 ) ;
283: static Action actionFrom ( const std :: string & actionName@var310 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var311 ;
286: const Container * detectContainer ( const Token * typeStart@var312 , bool iterator@var313 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var314 , bool * isIterator@var315 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var316 ( false ) ,
293: notnull@var317 ( false ) ,
294: notuninit@var318 ( -1 ) ,
295: formatstr@var319 ( false ) ,
296: strz@var320 ( false ) ,
297: optional@var321 ( false ) ,
298: variadic@var322 ( false ) ,
299: iteratorInfo@var328 ( ) ,
300: direction@var336 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var316 ;
303: bool notnull@var317 ;
304: int notuninit@var318 ;
305: bool formatstr@var319 ;
306: bool strz@var320 ;
307: bool optional@var321 ;
308: bool variadic@var322 ;
309: std :: string valid@var323 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var324 ( 0 ) , it@var325 ( false ) , first@var326 ( false ) , last@var327 ( false ) { }
314:
315: int container@var324 ;
316: bool it@var325 ;
317: bool first@var326 ;
318: bool last@var327 ;
319: } ;
320: IteratorInfo iteratorInfo@var328 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var329 , int a@var330 ) : type@var331 ( t@var329 ) , arg@var332 ( a@var330 ) , arg2@var333 ( 0 ) , value@var334 ( 0 ) { }
326: Type type@var331 ;
327: int arg@var332 ;
328: int arg2@var333 ;
329: long long value@var334 ;
330: } ;
331: std :: vector < MinSize > minsizes@var335 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var336 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var337 ;
344: bool use@var338 ;
345: bool leakignore@var339 ;
346: bool isconst@var340 ;
347: bool ispure@var341 ;
348: UseRetValType useretval@var342 ;
349: bool ignore@var343 ;
350: bool formatstr@var344 ;
351: bool formatstr_scan@var345 ;
352: bool formatstr_secure@var346 ;
353: Container :: Action containerAction@var347 ;
354: Container :: Yield containerYield@var348 ;
355: Function ( )
356: : use@var338 ( false ) ,
357: leakignore@var339 ( false ) ,
358: isconst@var340 ( false ) ,
359: ispure@var341 ( false ) ,
360: useretval@var342 ( UseRetValType :: NONE ) ,
361: ignore@var343 ( false ) ,
362: formatstr@var344 ( false ) ,
363: formatstr_scan@var345 ( false ) ,
364: formatstr_secure@var346 ( false ) ,
365: containerAction@var347 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var348 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var349 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var350 ;
372: bool isUse ( const std :: string & functionName@var351 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var352 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var353 , bool pure@var354 ) const ;
375: bool isFunctionConst ( const Token * ftok@var355 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var356 , int argnr@var357 ) const {
378: const ArgumentChecks * arg@var358 ; arg@var358 =@expr1073744574 getarg (@expr1073744575 ftok@var356 , argnr@var357 ) ;
379: return arg@var358 &&@expr1073744576 arg@var358 .@expr1073744577 notbool@var359 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var360 , int argnr@var361 ) const ;
383: bool isuninitargbad ( const Token * ftok@var362 , int argnr@var363 , int indirect@var364 = 0 , bool * hasIndirect@var365 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var366 , int argnr@var367 ) const {
386: const ArgumentChecks * arg@var368 ; arg@var368 =@expr1073744578 getarg (@expr1073744579 ftok@var366 , argnr@var367 ) ;
387: return arg@var368 &&@expr1073744580 arg@var368 .@expr1073744581 formatstr@var369 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var370 , int argnr@var371 ) const {
391: const ArgumentChecks * arg@var372 ; arg@var372 =@expr1073744582 getarg (@expr1073744583 ftok@var370 , argnr@var371 ) ;
392: return arg@var372 &&@expr1073744584 arg@var372 .@expr1073744585 strz@var373 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var374 , int argnr@var375 , const long long argvalue@var376 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var377 , int argnr@var378 , double argvalue@var379 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var380 , int argnr@var381 ) const {
399: const ArgumentChecks * arg@var382 ; arg@var382 =@expr1073744586 getarg (@expr1073744587 ftok@var380 , argnr@var381 ) ;
400: return arg@var382 ?@expr1073744588 arg@var382 .@expr1073744589 valid@var383 :@expr1073744590 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var384 ;
405: std :: string op1@var385 ;
406: std :: string op2@var386 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744591 isInt (@expr1073744592 op1@var385 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var387 , int argnr@var388 ) const {
413: const ArgumentChecks * arg@var389 ; arg@var389 =@expr1073744593 getarg (@expr1073744594 ftok@var387 , argnr@var388 ) ;
414: return arg@var389 &&@expr1073744595 arg@var389 .@expr2772 iteratorInfo@var390 .@expr1073744597 it@var391 ?@expr1073744598 &@expr1073744599 arg@var389 .@expr2772 iteratorInfo@var390 :@expr1073744601 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var392 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var393 , int argnr@var394 ) const {
420: const ArgumentChecks * arg@var395 ; arg@var395 =@expr1073744602 getarg (@expr1073744603 ftok@var393 , argnr@var394 ) ;
421: return arg@var395 ?@expr1073744604 &@expr1073744605 arg@var395 .@expr1073744606 minsizes@var396 :@expr1073744607 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var397 , int argnr@var398 ) const ;
425:
426: bool markupFile ( const std :: string & path@var399 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var400 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var504 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var401 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var402 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var403 , const std :: string & token@var404 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var405 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var406 ) const ;
443: const std :: string & blockend ( const std :: string & file@var407 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var408 , const std :: string & keyword@var409 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var410 ) const {
448: return mExporters@var507 .@expr1073744608 find (@expr1073744609 prefix@var410 ) !=@expr1073744610 mExporters@var507 .@expr1073744611 end (@expr1073744612 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var411 , const std :: string & token@var412 ) const {
452: const std ::@expr1073744613 map < std ::@expr1073744614 string , ExportedFunctions > ::@expr1073744615 const_iterator it@var413 =@expr1073744616 mExporters@var507 .@expr1073744617 find (@expr1073744618 prefix@var411 ) ;
453: return (@expr1073744619 it@var413 !=@expr1073744620 mExporters@var507 .@expr1073744621 end (@expr1073744622 ) &&@expr1073744623 it@var413 .@expr1073744624 second@var414 .@expr1073744625 isPrefix (@expr1073744626 token@var412 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var415 , const std :: string & token@var416 ) const {
457: const std ::@expr1073744627 map < std ::@expr1073744628 string , ExportedFunctions > ::@expr1073744629 const_iterator it@var417 =@expr1073744630 mExporters@var507 .@expr1073744631 find (@expr1073744632 prefix@var415 ) ;
458: return (@expr1073744633 it@var417 !=@expr1073744634 mExporters@var507 .@expr1073744635 end (@expr1073744636 ) &&@expr1073744637 it@var417 .@expr1073744638 second@var418 .@expr1073744639 isSuffix (@expr1073744640 token@var416 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var419 , const std :: string & importer@var420 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var421 , Container :: Yield yield@var422 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var423 , Container :: Action action@var424 ) const ;
465:
466: bool isreflection ( const std :: string & token@var425 ) const {
467: return mReflection@var509 .@expr1073744641 find (@expr1073744642 token@var425 ) !=@expr1073744643 mReflection@var509 .@expr1073744644 end (@expr1073744645 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var426 ) const {
471: const std ::@expr1073744646 map < std ::@expr1073744647 string , int > ::@expr1073744648 const_iterator it@var427 =@expr1073744649 mReflection@var509 .@expr1073744650 find (@expr1073744651 token@var426 ) ;
472: if (@expr1073744652 it@var427 !=@expr1073744653 mReflection@var509 .@expr1073744654 end (@expr1073744655 ) ) {
473: return it@var427 .@expr1073744656 second@var428 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var429 ;
478:
479: struct SmartPointer {
480: std :: string name@var430 ; name@var430 = "" ;
481: bool unique@var431 ; unique@var431 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var432 ;
485: bool isSmartPointer ( const Token * tok@var433 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var434 ) const ;
487:
488: struct PodType {
489: unsigned int size@var435 ;
490: char sign@var436 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var437 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var438 ) const {
494: const std ::@expr1073744657 unordered_map < std ::@expr1073744658 string , PodType > ::@expr1073744659 const_iterator it@var439 =@expr1073744660 mPodTypes@var510 .@expr1073744661 find (@expr1073744662 name@var438 ) ;
495: return (@expr2839 it@var439 !=@expr1073744664 mPodTypes@var510 .@expr1073744665 end (@expr1073744666 ) ) ?@expr1073744667 &@expr1073744668 (@expr2839 it@var439 .@expr1073744670 second@var440 ) :@expr1073744671 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var451 ( false )
501: , mUnsigned@var452 ( false )
502: , mLong@var453 ( false )
503: , mPointer@var454 ( false )
504: , mPtrPtr@var455 ( false )
505: , mConstPtr@var456 ( false ) { }
506: bool operator== ( const PlatformType & type@var441 ) const {
507: return (@expr1073744672 mSigned@var451 ==@expr1073744673 type@var441 .@expr1073744674 mSigned@var442 &&@expr1073744675
508: mUnsigned@var452 ==@expr1073744676 type@var441 .@expr1073744677 mUnsigned@var443 &&@expr1073744678
509: mLong@var453 ==@expr1073744679 type@var441 .@expr1073744680 mLong@var444 &&@expr1073744681
510: mPointer@var454 ==@expr1073744682 type@var441 .@expr1073744683 mPointer@var445 &&@expr1073744684
511: mPtrPtr@var455 ==@expr1073744685 type@var441 .@expr1073744686 mPtrPtr@var446 &&@expr1073744687
512: mConstPtr@var456 ==@expr1073744688 type@var441 .@expr1073744689 mConstPtr@var447 &&@expr1073744690
513: mType@var450 ==@expr1073744691 type@var441 .@expr1073744692 mType@var448 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var449 ) const {
516: return !@expr1073744693 (@expr1073744694 *@expr1073744695 this@expr1073744696 ==@expr1073744697 type@var449 ) ;
517: }
518: std :: string mType@var450 ;
519: bool mSigned@var451 ;
520: bool mUnsigned@var452 ;
521: bool mLong@var453 ;
522: bool mPointer@var454 ;
523: bool mPtrPtr@var455 ;
524: bool mConstPtr@var456 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var457 ) const {
529: const std ::@expr1073744698 map < std ::@expr1073744699 string , PlatformType > ::@expr1073744700 const_iterator it@var458 =@expr1073744701 mPlatformTypes@var460 .@expr1073744702 find (@expr1073744703 name@var457 ) ;
530: return (@expr2880 it@var458 !=@expr1073744705 mPlatformTypes@var460 .@expr1073744706 end (@expr1073744707 ) ) ?@expr1073744708 &@expr1073744709 (@expr2880 it@var458 .@expr1073744711 second@var459 ) :@expr1073744712 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var460 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var461 , const std :: string & platform@var462 ) const {
536: const std ::@expr1073744713 map < std ::@expr2890 string , Platform > ::@expr1073744715 const_iterator it@var463 =@expr1073744716 mPlatforms@var512 .@expr1073744717 find (@expr1073744718 platform@var462 ) ;
537: if (@expr1073744719 it@var463 !=@expr1073744720 mPlatforms@var512 .@expr1073744721 end (@expr1073744722 ) ) {
538: const PlatformType * const type@var464 ; type@var464 =@expr1073744723 it@var463 .@expr1073744724 second@var465 .@expr1073744725 platform_type (@expr1073744726 name@var461 ) ;
539: if (@expr1073744727 type@var464 ) {
540: return type@var464 ; }
541: }
542:
543: const std ::@expr1073744728 map < std ::@expr2890 string , PlatformType > ::@expr1073744730 const_iterator it2@var466 =@expr1073744731 mPlatformTypes@var511 .@expr1073744732 find (@expr1073744733 name@var461 ) ;
544: return (@expr2910 it2@var466 !=@expr1073744735 mPlatformTypes@var511 .@expr1073744736 end (@expr1073744737 ) ) ?@expr1073744738 &@expr1073744739 (@expr2910 it2@var466 .@expr1073744741 second@var467 ) :@expr1073744742 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var468 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var469 , Library :: Container :: Yield y@var470 , const std :: string & fallback@var471 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var472 , const std :: string & typeName@var473 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var474 , const std :: string & name@var475 , std :: set < std :: string > & unknown_elements@var476 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var477 ) {
565: mPrefixes@var481 .@expr1073744743 insert (@expr1073744744 prefix@var477 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var478 ) {
568: mSuffixes@var482 .@expr1073744745 insert (@expr1073744746 suffix@var478 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var479 ) const {
571: return (@expr1073744747 mPrefixes@var481 .@expr1073744748 find (@expr1073744749 prefix@var479 ) !=@expr1073744750 mPrefixes@var481 .@expr1073744751 end (@expr1073744752 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var480 ) const {
574: return (@expr1073744753 mSuffixes@var482 .@expr1073744754 find (@expr1073744755 suffix@var480 ) !=@expr1073744756 mSuffixes@var482 .@expr1073744757 end (@expr1073744758 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var481 ;
579: std :: set < std :: string > mSuffixes@var482 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var490 ( 0 ) { }
584:
585: void setStart ( const char * s@var483 ) {
586: mStart@var488 =@expr1073744759 s@var483 ;
587: }
588: void setEnd ( const char * e@var484 ) {
589: mEnd@var489 =@expr1073744760 e@var484 ;
590: }
591: void setOffset ( const int o@var485 ) {
592: mOffset@var490 =@expr1073744761 o@var485 ;
593: }
594: void addBlock ( const char * blockName@var486 ) {
595: mBlocks@var491 .@expr1073744762 insert (@expr1073744763 blockName@var486 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var488 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var489 ;
602: }
603: int offset ( ) const {
604: return mOffset@var490 ;
605: }
606: bool isBlock ( const std :: string & blockName@var487 ) const {
607: return mBlocks@var491 .@expr1073744764 find (@expr1073744765 blockName@var487 ) !=@expr1073744766 mBlocks@var491 .@expr1073744767 end (@expr1073744768 ) ;
608: }
609:
610: private:
611: std :: string mStart@var488 ;
612: std :: string mEnd@var489 ;
613: int mOffset@var490 ;
614: std :: set < std :: string > mBlocks@var491 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var492 ;
618: std :: set < std :: string > mFiles@var493 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var494 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var495 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var496 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var497 ;
623: std :: map < std :: string , std :: string > mReturnValue@var498 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var499 ;
625: std :: map < std :: string , int > mReturnValueContainer@var500 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var501 ;
627: std :: map < std :: string , bool > mReportErrors@var502 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var503 ;
629: std :: set < std :: string > mMarkupExtensions@var504 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var505 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var506 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var507 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var508 ;
634: std :: map < std :: string , int > mReflection@var509 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var510 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var511 ;
637: std :: map < std :: string , Platform > mPlatforms@var512 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var513 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var514 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var515 , int argnr@var516 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var517 , bool * error@var518 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var519 , const std :: string & name@var520 ) {
646: const std ::@expr1073744769 map < std ::@expr1073744770 string , AllocFunc > ::@expr1073744771 const_iterator it@var521 =@expr1073744772 data@var519 .@expr1073744773 find (@expr1073744774 name@var520 ) ;
647: return (@expr1073744775 it@var521 ==@expr1073744776 data@var519 .@expr1073744777 end (@expr1073744778 ) ) ?@expr1073744779 nullptr :@expr1073744780 &@expr1073744781 it@var521 .@expr1073744782 second@var522 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var523 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var524 ,
654: const Settings * settings@var525 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var526 = nullptr ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var527 ) {
44: if (@expr1073744783 bit@var527 >=@expr1073744784 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073744785 (@expr1073744786 1LL <<@expr1073744787 (@expr1073744788 bit@var527 -@expr1073744789 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var528 ) {
50: if (@expr1073744790 bit@var528 >=@expr1073744791 64 ) {
51: return (@expr2968 ~@expr1073744793 0ULL ) >>@expr1073744794 1 ; }
52: return (@expr2968 1LL <<@expr1073744796 (@expr2968 bit@var528 -@expr1073744798 1 ) ) -@expr1073744799 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var529 ) const {
59: return value@var529 >=@expr1073744800 min_value (@expr1073744801 int_bit@var539 ) &&@expr1073744802 value@var529 <=@expr1073744803 max_value (@expr1073744804 int_bit@var539 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var530 ) const {
63: unsigned long long intMax@var531 ; intMax@var531 =@expr1073744805 max_value (@expr1073744806 int_bit@var539 ) ;
64: return value@var530 <=@expr1073744807 intMax@var531 ;
65: }
66:
67: bool isLongValue ( long long value@var532 ) const {
68: return value@var532 >=@expr1073744808 min_value (@expr1073744809 long_bit@var540 ) &&@expr1073744810 value@var532 <=@expr1073744811 max_value (@expr1073744812 long_bit@var540 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var533 ) const {
72: unsigned long long longMax@var534 ; longMax@var534 =@expr1073744813 max_value (@expr1073744814 long_bit@var540 ) ;
73: return value@var533 <=@expr1073744815 longMax@var534 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var535 ) const {
77: unsigned long long longLongMax@var536 ; longLongMax@var536 =@expr1073744816 max_value (@expr1073744817 long_long_bit@var541 ) ;
78: return value@var535 <=@expr1073744818 longLongMax@var536 ;
79: }
80:
81: int char_bit@var537 ;
82: int short_bit@var538 ;
83: int int_bit@var539 ;
84: int long_bit@var540 ;
85: int long_long_bit@var541 ;
86:
87:
88: int sizeof_bool@var542 ;
89: int sizeof_short@var543 ;
90: int sizeof_int@var544 ;
91: int sizeof_long@var545 ;
92: int sizeof_long_long@var546 ;
93: int sizeof_float@var547 ;
94: int sizeof_double@var548 ;
95: int sizeof_long_double@var549 ;
96: int sizeof_wchar_t@var550 ;
97: int sizeof_size_t@var551 ;
98: int sizeof_pointer@var552 ;
99:
100: char defaultSign@var553 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var554 ;
115:
116:
117: bool platform ( PlatformType type@var555 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var556 [ ] , const std :: string & filename@var557 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var558 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var554 ==@expr1073744819 Win32A ||@expr1073744820
136: platformType@var554 ==@expr1073744821 Win32W ||@expr1073744822
137: platformType@var554 ==@expr1073744823 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073744824 platformType@var554 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var559 ) {
145: switch (@expr1073744825 pt@var559 ) {
146: case Unspecified :@expr3002 ;
147: return "Unspecified" ;
148: case Native :@expr3002 ;
149: return "Native" ;
150: case Win32A :@expr3002 ;
151: return "win32A" ;
152: case Win32W :@expr3002 ;
153: return "win32W" ;
154: case Win64 :@expr3002 ;
155: return "win64" ;
156: case Unix32 :@expr3002 ;
157: return "unix32" ;
158: case Unix64 :@expr3002 ;
159: return "unix64" ;
160: case PlatformFile :@expr3002 ;
161: return "platformFile" ;
162: default :@expr3002 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073744835 char_bit@var537 +@expr1073744836 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073744837 char_bit@var537 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073744838 char_bit@var537 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var560 , const std :: string & rhs@var561 ) const {
41: return caseInsensitiveStringCompare (@expr1073744839 lhs@var560 , rhs@var561 ) <@expr1073744840 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var569 ( cppcheck :: Platform :: Unspecified ) , msc@var570 ( false ) , useMfc@var571 ( false ) { }
67: std :: string cfg@var562 ;
68: std :: string filename@var563 ;
69: std :: string defines@var564 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var564 +@expr1073744841 (@expr1073744842 msc@var570 ?@expr1073744843 ";_MSC_VER=1900" :@expr1073744844 "" ) +@expr1073744845 (@expr1073744846 useMfc@var571 ?@expr1073744847 ";__AFXWIN_H__=1" :@expr1073744848 "" ) ;
72: }
73: std :: set < std :: string > undefs@var565 ;
74: std :: list < std :: string > includePaths@var566 ;
75: std :: list < std :: string > systemIncludePaths@var567 ;
76: std :: string standard@var568 ;
77: cppcheck :: Platform :: PlatformType platformType@var569 ;
78: bool msc@var570 ;
79: bool useMfc@var571 ;
80:
81: void parseCommand ( std :: string command@var572 ) ;
82: void setDefines ( std :: string defs@var573 ) ;
83: void setIncludePaths ( const std :: string & basepath@var574 , const std :: list < std :: string > & in@var575 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var576 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var577 ;
86: Type projectType@var578 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var579 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous0 {
96: std :: string analyzeAllVsConfigs@var580 ;
97: std :: vector < std :: string > pathNames@var581 ;
98: std :: list < std :: string > libraries@var582 ;
99: std :: list < std :: string > excludedPaths@var583 ;
100: std :: list < std :: string > checkVsConfigs@var584 ;
101: std :: string projectFile@var585 ;
102: std :: string platform@var586 ;
103: } ; struct Anonymous0 guiProject@var587 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var588 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var589 ) ;
107:
108: Type import ( const std :: string & filename@var590 , Settings * settings@var591 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var592 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var593 , Settings * settings@var594 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var595 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var596 , const std :: string & path@var597 , const std :: vector < std :: string > & fileFilters@var598 ) ;
115: bool importVcxproj ( const std :: string & filename@var599 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var600 , const std :: string & additionalIncludeDirectories@var601 , const std :: vector < std :: string > & fileFilters@var602 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var603 ) ;
117:
118: static void printError ( const std :: string & message@var604 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var605 ) ;
121:
122: std :: string mPath@var606 ;
123: std :: set < std :: string > mAllVSConfigs@var607 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var608 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var609 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var610 [ 2 ] = "1" ;
131: const char BuildDirElementName@var611 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var612 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var613 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var614 [ 7 ] = "parser" ;
135: const char BugHunting@var615 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var616 [ 11 ] = "includedir" ;
137: const char DirElementName@var617 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var618 [ 5 ] = "name" ;
139: const char DefinesElementName@var619 [ 8 ] = "defines" ;
140: const char DefineName@var620 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var621 [ 5 ] = "name" ;
142: const char UndefinesElementName@var622 [ 10 ] = "undefines" ;
143: const char UndefineName@var623 [ 9 ] = "undefine" ;
144: const char PathsElementName@var624 [ 6 ] = "paths" ;
145: const char PathName@var625 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var626 [ 5 ] = "name" ;
147: const char RootPathName@var627 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var628 [ 5 ] = "name" ;
149: const char IgnoreElementName@var629 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var630 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var631 [ 5 ] = "name" ;
152: const char ExcludeElementName@var632 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var633 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var634 [ 5 ] = "name" ;
155: const char FunctionContracts@var635 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var636 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var637 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var638 [ 8 ] = "library" ;
159: const char PlatformElementName@var639 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var640 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var641 [ 12 ] = "suppression" ;
162: const char AddonElementName@var642 [ 6 ] = "addon" ;
163: const char AddonsElementName@var643 [ 7 ] = "addons" ;
164: const char ToolElementName@var644 [ 5 ] = "tool" ;
165: const char ToolsElementName@var645 [ 6 ] = "tools" ;
166: const char TagsElementName@var646 [ 5 ] = "tags" ;
167: const char TagElementName@var647 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var648 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var649 [ 4 ] = "tag" ;
170: const char WarningElementName@var650 [ 8 ] = "warning" ;
171: const char HashAttributeName@var651 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var652 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var653 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var654 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var655 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var656 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var657 [ 11 ] = "clang-tidy" ;
178: const char Name@var658 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var659 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var660 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var661 ;
43: std :: string errorId@var662 ;
44: void setFileName ( const std :: string & s@var663 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var667 ;
47: }
48: int lineNumber@var664 ;
49: Certainty :: CertaintyLevel certainty@var665 ;
50: std :: string symbolNames@var666 ;
51: private:
52: std :: string mFileName@var667 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var701 ( NO_LINE ) , hash@var703 ( 0 ) , thisAndNextLine@var704 ( false ) , matched@var705 ( false ) , checked@var706 ( false ) { }
57: Suppression ( const Suppression & other@var668 ) {
58: *@expr1073744849 this@expr1073744850 =@expr1073744851 other@var668 ;
59: }
60: Suppression ( const std :: string & id@var669 , const std :: string & file@var670 , int line@var671 = NO_LINE ) : errorId@var699 ( id@var669 ) , fileName@var700 ( file@var670 ) , lineNumber@var701 ( line@var671 ) , hash@var703 ( 0 ) , thisAndNextLine@var704 ( false ) , matched@var705 ( false ) , checked@var706 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var672 ) {
63: errorId@var699 =@expr1073744852 other@var672 .@expr1073744853 errorId@var673 ;
64: fileName@var700 =@expr1073744854 other@var672 .@expr1073744855 fileName@var674 ;
65: lineNumber@var701 =@expr1073744856 other@var672 .@expr1073744857 lineNumber@var675 ;
66: symbolName@var702 =@expr1073744858 other@var672 .@expr1073744859 symbolName@var676 ;
67: hash@var703 =@expr1073744860 other@var672 .@expr1073744861 hash@var677 ;
68: thisAndNextLine@var704 =@expr1073744862 other@var672 .@expr1073744863 thisAndNextLine@var678 ;
69: matched@var705 =@expr1073744864 other@var672 .@expr1073744865 matched@var679 ;
70: checked@var706 =@expr1073744866 other@var672 .@expr1073744867 checked@var680 ;
71: return *@expr1073744868 this@expr1073744869 ;
72: }
73:
74: bool operator< ( const Suppression & other@var681 ) const {
75: if (@expr1073744870 errorId@var699 !=@expr1073744871 other@var681 .@expr3048 errorId@var682 ) {
76: return errorId@var699 <@expr1073744873 other@var681 .@expr3048 errorId@var682 ; }
77: if (@expr1073744875 lineNumber@var701 <@expr1073744876 other@var681 .@expr1073744877 lineNumber@var683 ) {
78: return true ; }
79: if (@expr1073744878 fileName@var700 !=@expr1073744879 other@var681 .@expr3056 fileName@var684 ) {
80: return fileName@var700 <@expr1073744881 other@var681 .@expr3056 fileName@var684 ; }
81: if (@expr1073744883 symbolName@var702 !=@expr1073744884 other@var681 .@expr3061 symbolName@var685 ) {
82: return symbolName@var702 <@expr1073744886 other@var681 .@expr3061 symbolName@var685 ; }
83: if (@expr1073744888 hash@var703 !=@expr1073744889 other@var681 .@expr3066 hash@var686 ) {
84: return hash@var703 <@expr1073744891 other@var681 .@expr3066 hash@var686 ; }
85: if (@expr1073744893 thisAndNextLine@var704 !=@expr1073744894 other@var681 .@expr1073744895 thisAndNextLine@var687 ) {
86: return thisAndNextLine@var704 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var688 , std :: string * errorMessage@var689 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var690 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var691 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744897 fileName@var700 .@expr1073744898 empty (@expr1073744899 ) &&@expr1073744900 fileName@var700 .@expr1073744901 find_first_of (@expr1073744902 "?*" ) ==@expr1073744903 std ::@expr1073744904 string ::@expr1073744905 npos@expr1073744896 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var692 ) const {
109: return errorId@var699 ==@expr1073744906 other@var692 .@expr1073744907 errorId@var693 &&@expr1073744908
110: fileName@var700 ==@expr1073744909 other@var692 .@expr1073744910 fileName@var694 &&@expr1073744911
111: lineNumber@var701 ==@expr1073744912 other@var692 .@expr1073744913 lineNumber@var695 &&@expr1073744914
112: symbolName@var702 ==@expr1073744915 other@var692 .@expr1073744916 symbolName@var696 &&@expr1073744917
113: hash@var703 ==@expr1073744918 other@var692 .@expr1073744919 hash@var697 &&@expr1073744920
114: thisAndNextLine@var704 ==@expr1073744921 other@var692 .@expr1073744922 thisAndNextLine@var698 ;
115: }
116:
117: std :: string errorId@var699 ;
118: std :: string fileName@var700 ;
119: int lineNumber@var701 ;
120: std :: string symbolName@var702 ;
121: unsigned long hash@var703 ;
122: bool thisAndNextLine@var704 ;
123: bool matched@var705 ;
124: bool checked@var706 ;
125:
126: enum Anonymous1 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var707 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var708 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var709 , std :: string * errorMessage@var710 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var711 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var712 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var713 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var714 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var715 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var716 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var717 , const bool unusedFunctionChecking@var718 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var719 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var720 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var721 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var722 , std :: clock_t clocks@var723 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var724 ;
45: long mNumberOfResults@var725 ;
46:
47: TimerResultsData ( )
48: : mClocks@var724 ( 0 )
49: , mNumberOfResults@var725 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var726 =@expr1073744924 (@expr1073744925 double ) (@expr1073744926 (@expr1073744927 unsigned long ) mClocks@var724 ) /@expr1073744928 (@expr1073744929 double ) CLOCKS_PER_SEC@expr1073744923 ;
53: return ret@var726 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var727 ) const ;
62: void addResults ( const std :: string & str@var728 , std :: clock_t clocks@var729 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var730 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var731 , SHOWTIME_MODES showtimeMode@var732 , TimerResultsIntf * timerResults@var733 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var734 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var735 ;
79: TimerResultsIntf * mTimerResults@var736 ;
80: std :: clock_t mStart@var737 ;
81: const SHOWTIME_MODES mShowTimeMode@var738 ;
82: bool mStopped@var739 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var740 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var741 ;
103:
104:
105: std :: string addonPython@var742 ;
106:
107:
108: std :: vector < std :: string > basePaths@var743 ;
109:
110:
111: std :: string buildDir@var744 ;
112:
113:
114: bool checkAllConfigurations@var745 ;
115:
116:
117: bool checkConfiguration@var746 ;
118:
|
121:
122: bool checkHeaders@var747 ;
123:
124:
125: bool checkLibrary@var748 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var749 ;
129:
130:
131: bool checkUnusedTemplates@var750 ;
132:
133:
134: bool clang@var751 ;
135:
136:
137: std :: string clangExecutable@var752 ;
138:
139:
140: bool clangTidy@var753 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var754 ;
144:
145:
146: std :: string cppcheckCfgProductName@var755 ;
147:
148:
149: std :: string cppcheckCfgAbout@var756 ;
150:
151:
152: bool daca@var757 ;
153:
154:
155: bool debugnormal@var758 ;
156:
157:
158: bool debugSimplified@var759 ;
159:
160:
161: bool debugtemplate@var760 ;
162:
163:
164: bool debugwarnings@var761 ;
165:
166:
167: bool dump@var762 ;
168: std :: string dumpFile@var763 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var764 ;
176:
177:
178: bool exceptionHandling@var765 ;
179:
180:
181: std :: string exename@var766 ;
182:
183:
184:
185: int exitCode@var767 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var768 ;
189:
190:
191: bool force@var769 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var770 ;
196:
197:
198: bool inlineSuppressions@var771 ;
199:
200:
201:
202: unsigned int jobs@var772 ;
203:
|
206:
207: bool jointSuppressionReport@var773 ;
208:
209:
210: std :: list < std :: string > libraries@var774 ;
211:
212:
213: Library library@var775 ;
214:
215:
216:
217: int loadAverage@var776 ;
218:
|
221:
222: int maxConfigs@var777 ;
223:
224:
225: int maxCtuDepth@var778 ;
226:
227:
228: int maxTemplateRecursion@var779 ;
229:
230:
231: Suppressions nofail@var780 ;
232:
233:
234: Suppressions nomsg@var781 ;
235:
236:
237: std :: string outputFile@var782 ;
238:
239:
240: std :: string plistOutput@var783 ;
241:
242:
243: bool preprocessOnly@var784 ;
244:
245: ImportProject project@var785 ;
246:
247:
248: bool quiet@var786 ;
249:
250:
251: bool relativePaths@var787 ;
252:
253:
254: bool reportProgress@var788 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var789 ( "simple" )
261: , id@var791 ( "rule" )
262: , severity@var793 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var789 ;
266: std :: string pattern@var790 ;
267: std :: string id@var791 ;
268: std :: string summary@var792 ;
269: Severity :: SeverityType severity@var793 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var794 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var800 ( false ) , externalFunctions@var801 ( false ) , internalFunctions@var802 ( false ) , externalVariables@var803 ( false ) { }
281:
282: static const char XmlRootName@var795 [ ] ;
283: static const char XmlClasses@var796 [ ] ;
284: static const char XmlExternalFunctions@var797 [ ] ;
285: static const char XmlInternalFunctions@var798 [ ] ;
286: static const char XmlExternalVariables@var799 [ ] ;
287:
288: void clear ( ) {
289: classes@var800 =@expr1073744930 externalFunctions@var801 =@expr1073744931 internalFunctions@var802 =@expr1073744932 externalVariables@var803 =@expr1073744933 false ;
290: }
291:
|
297:
298: bool classes@var800 ;
299:
|
304:
305: bool externalFunctions@var801 ;
306:
|
310:
311: bool internalFunctions@var802 ;
312:
|
316:
317: bool externalVariables@var803 ;
318: } ;
319:
320: SafeChecks safeChecks@var804 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var805 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var806 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var807 ;
325:
326:
327: SHOWTIME_MODES showtime@var808 ;
328:
329:
330: Standards standards@var809 ;
331:
332:
333:
334: std :: string templateFormat@var810 ;
335:
336:
337:
338: std :: string templateLocation@var811 ;
339:
340:
341: std :: string userDefines@var812 ;
342:
343:
344: std :: set < std :: string > userUndefs@var813 ;
345:
346:
347: std :: list < std :: string > userIncludes@var814 ;
348:
349:
350: bool verbose@var815 ;
351:
352:
353: bool xml@var816 ;
354:
355:
356: int xml_version@var817 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var818 ) const {
363: for (@expr1073744934 const std ::@expr1073744935 string &@expr1073744936 configExcludePath@var819 :@expr1073744937 configExcludePaths@var754 ) {
364: if (@expr1073744938 file@var818 .@expr1073744939 length (@expr1073744940 ) >=@expr1073744941 configExcludePath@var819 .@expr3118 length (@expr3119 ) &&@expr1073744944 file@var818 .@expr1073744945 compare (@expr1073744946 0 , configExcludePath@var819 .@expr3118 length (@expr3119 ) , configExcludePath@var819 ) ==@expr1073744949 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var820 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var821 , bool inconclusiveCheck@var822 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744950 find (@expr1073744951 libraries@var774 .@expr1073744952 begin (@expr1073744953 ) , libraries@var774 .@expr3130 end (@expr3131 ) , "posix" ) !=@expr1073744956 libraries@var774 .@expr3130 end (@expr3131 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var823 = true ) {
392: Settings ::@expr1073744959 mTerminated@var740 =@expr1073744960 t@var823 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744961 mTerminated@var740 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var824 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/checkfunctions.h

1:
|
34:
35: class Token ;
36: class Tokenizer ;
37: class ErrorLogger ;
38:
39: namespace ValueFlow {
40: class Value ;
41: }
42:
|
50:
51: class CheckFunctions : public Check {
52: public:
53:
54: CheckFunctions ( ) : Check ( myName ( ) ) { }
55:
56:
57: CheckFunctions ( const Tokenizer * tokenizer@var825 , const Settings * settings@var826 , ErrorLogger * errorLogger@var827 )
58: : Check ( myName ( ) , tokenizer@var825 , settings@var826 , errorLogger@var827 ) { }
59:
60:
61: void runChecks ( const Tokenizer * tokenizer@var828 , const Settings * settings@var829 , ErrorLogger * errorLogger@var830 ) override {
62: CheckFunctions checkFunctions@var831 (@expr1073744962 tokenizer@var828 , settings@var829 , errorLogger@var830 ) ;
63:
64: checkFunctions@var831 .@expr1073744963 checkIgnoredReturnValue (@expr1073744964 ) ;
65: checkFunctions@var831 .@expr1073744965 checkMissingReturn (@expr1073744966 ) ;
66:
67:
68: checkFunctions@var831 .@expr1073744967 checkLibraryMatchFunctions (@expr1073744968 ) ;
69:
70: checkFunctions@var831 .@expr1073744969 checkProhibitedFunctions (@expr1073744970 ) ;
71: checkFunctions@var831 .@expr1073744971 invalidFunctionUsage (@expr1073744972 ) ;
72: checkFunctions@var831 .@expr1073744973 checkMathFunctions (@expr1073744974 ) ;
73: checkFunctions@var831 .@expr1073744975 memsetZeroBytes (@expr1073744976 ) ;
74: checkFunctions@var831 .@expr1073744977 memsetInvalid2ndParam (@expr1073744978 ) ;
75: checkFunctions@var831 .@expr1073744979 returnLocalStdMove (@expr1073744980 ) ;
76: }
77:
78:
79: void checkProhibitedFunctions ( ) ;
80:
|
88:
89: void invalidFunctionUsage ( ) ;
90:
91:
92: void checkIgnoredReturnValue ( ) ;
93:
94:
95: void checkMathFunctions ( ) ;
96:
97:
98: void memsetZeroBytes ( ) ;
99:
100:
101: void memsetInvalid2ndParam ( ) ;
102:
103:
104: void returnLocalStdMove ( ) ;
105:
106:
107: void checkLibraryMatchFunctions ( ) ;
108:
109: private:
110:
111: void checkMissingReturn ( ) ;
112:
113: void invalidFunctionArgError ( const Token * tok@var832 , const std :: string & functionName@var833 , int argnr@var834 , const ValueFlow :: Value * invalidValue@var835 , const std :: string & validstr@var836 ) ;
114: void invalidFunctionArgBoolError ( const Token * tok@var837 , const std :: string & functionName@var838 , int argnr@var839 ) ;
115: void invalidFunctionArgStrError ( const Token * tok@var840 , const std :: string & functionName@var841 , int argnr@var842 ) ;
116: void ignoredReturnValueError ( const Token * tok@var843 , const std :: string & function@var844 ) ;
117: void ignoredReturnErrorCode ( const Token * tok@var845 , const std :: string & function@var846 ) ;
118: void mathfunctionCallWarning ( const Token * tok@var847 , const int numParam@var848 = 1 ) ;
119: void mathfunctionCallWarning ( const Token * tok@var849 , const std :: string & oldexp@var850 , const std :: string & newexp@var851 ) ;
120: void memsetZeroBytesError ( const Token * tok@var852 ) ;
121: void memsetFloatError ( const Token * tok@var853 , const std :: string & var_value@var854 ) ;
122: void memsetValueOutOfRangeError ( const Token * tok@var855 , const std :: string & value@var856 ) ;
123: void missingReturnError ( const Token * tok@var857 ) ;
124: void copyElisionError ( const Token * tok@var858 ) ;
125:
126: void getErrorMessages ( ErrorLogger * errorLogger@var859 , const Settings * settings@var860 ) const override {
127: CheckFunctions c@var861 (@expr1073744981 nullptr , settings@var860 , errorLogger@var859 ) ;
128:
129: for (@expr1073744982 std ::@expr3159 map < std ::@expr3159 string , Library ::@expr3159 WarnInfo > ::@expr3159 const_iterator i@var862 =@expr1073744987 settings@var860 .@expr3164 library@var863 .@expr3165 functionwarn@var864 .@expr1073744990 cbegin (@expr1073744991 ) ; i@var862 !=@expr1073744992 settings@var860 .@expr3164 library@var863 .@expr3165 functionwarn@var864 .@expr1073744995 cend (@expr1073744996 ) ; ++@expr1073744997 i@var862 ) {
130: c@var861 .@expr1073744998 reportError (@expr1073744999 nullptr , Severity ::@expr1073745000 style , i@var862 .@expr1073745001 first@var865 +@expr1073745002 "Called" , i@var862 .@expr1073745003 second@var866 .@expr1073745004 message@var867 ) ;
131: }
132:
133: c@var861 .@expr1073745005 invalidFunctionArgError (@expr1073745006 nullptr , "func_name" , 1 , nullptr , "1:4" ) ;
134: c@var861 .@expr1073745007 invalidFunctionArgBoolError (@expr1073745008 nullptr , "func_name" , 1 ) ;
135: c@var861 .@expr1073745009 invalidFunctionArgStrError (@expr1073745010 nullptr , "func_name" , 1 ) ;
136: c@var861 .@expr1073745011 ignoredReturnValueError (@expr1073745012 nullptr , "malloc" ) ;
137: c@var861 .@expr3189 mathfunctionCallWarning (@expr1073745014 nullptr ) ;
138: c@var861 .@expr3189 mathfunctionCallWarning (@expr1073745016 nullptr , "1 - erf(x)" , "erfc(x)" ) ;
139: c@var861 .@expr1073745017 memsetZeroBytesError (@expr1073745018 nullptr ) ;
140: c@var861 .@expr1073745019 memsetFloatError (@expr1073745020 nullptr , "varname" ) ;
141: c@var861 .@expr1073745021 memsetValueOutOfRangeError (@expr1073745022 nullptr , "varname" ) ;
142: c@var861 .@expr1073745023 missingReturnError (@expr1073745024 nullptr ) ;
143: c@var861 .@expr1073745025 copyElisionError (@expr1073745026 nullptr ) ;
144: }
145:
146: static std :: string myName ( ) {
147: return "Check function usage" ;
148: }
149:
150: std :: string classInfo ( ) const override {
151: return "Check function usage:\n- missing 'return' in non-void function\n- return value of certain functions not used\n- invalid input values for functions\n- Warn if a function is called whose usage is discouraged\n- memset() third argument is zero\n- memset() with a value out of range as the 2nd parameter\n- memset() with a float as the 2nd parameter\n- copy elision optimization for returning value affected by std::move\n"
152:
|
158:
159: ;
160: }
161: } ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var868 ) const {
54: x@var868 ++@expr1073745027 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var869 ) const {
60: x@var869 --@expr1073745028 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var870 , const U & y@var871 ) const {
67: return x@var870 <@expr1073745029 y@var871 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var872 , const U & y@var873 ) const {
74: return std ::@expr1073745030 abs (@expr1073745031 x@var872 -@expr1073745032 y@var873 ) ==@expr1073745033 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var874 , T x@var875 , U y@var876 ) const {
81: result@var874 =@expr1073745034 !@expr1073745035 (@expr1073745036 x@var875 >@expr1073745037 y@var876 ||@expr1073745038 x@var875 <@expr1073745039 y@var876 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var877 = 0 , Bound b@var878 = Bound :: Point )
91: : valueType@var918 ( ValueType :: INT ) ,
92: bound@var919 ( b@var878 ) ,
93: intvalue@var920 ( val@var877 ) ,
94: tokvalue@var921 ( nullptr ) ,
95: floatValue@var922 ( 0.0 ) ,
96: moveKind@var923 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var924 ( val@var877 ) ,
98: condition@var925 ( nullptr ) ,
99: varId@var927 ( 0U ) ,
100: safe@var928 ( false ) ,
101: conditional@var929 ( false ) ,
102: macro@var930 ( false ) ,
103: defaultArg@var931 ( false ) ,
104: indirect@var932 ( 0 ) ,
105: path@var933 ( 0 ) ,
106: wideintvalue@var934 ( val@var877 ) ,
107: subexpressions@var935 ( ) ,
108: capturetok@var936 ( nullptr ) ,
109: lifetimeKind@var937 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var938 ( LifetimeScope :: Local ) ,
111: valueKind@var943 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var879 , long long val@var880 , Bound b@var881 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var882 ) const {
118: if (@expr1073745040 valueType@var918 !=@expr1073745041 rhs@var882 .@expr1073745042 valueType@var883 ) {
119: return false ; }
120: switch (@expr1073745043 valueType@var918 ) {
121: case ValueType ::@expr1073745044 INT :@expr3221
122: case ValueType ::@expr1073745046 CONTAINER_SIZE :@expr3221
123: case ValueType ::@expr1073745048 BUFFER_SIZE :@expr3221
124: case ValueType ::@expr1073745050 ITERATOR_START :@expr3221
125: case ValueType ::@expr1073745052 ITERATOR_END :@expr3221 ;
126: if (@expr3230 intvalue@var920 !=@expr3231 rhs@var882 .@expr3232 intvalue@var884 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073745057 TOK :@expr3221 ;
130: if (@expr3235 tokvalue@var921 !=@expr3236 rhs@var882 .@expr3237 tokvalue@var885 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073745062 FLOAT :@expr3221 ;
134:
135: if (@expr1073745064 floatValue@var922 >@expr1073745065 rhs@var882 .@expr3242 floatValue@var886 ||@expr1073745067 floatValue@var922 <@expr1073745068 rhs@var882 .@expr3242 floatValue@var886 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073745070 MOVED :@expr3221 ;
139: if (@expr1073745072 moveKind@var923 !=@expr1073745073 rhs@var882 .@expr1073745074 moveKind@var887 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073745075 UNINIT :@expr3221 ;
143: break ;
144: case ValueType ::@expr1073745077 LIFETIME :@expr3221 ;
145: if (@expr3235 tokvalue@var921 !=@expr3236 rhs@var882 .@expr3237 tokvalue@var885 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073745082 SYMBOLIC :@expr3221 ;
149: if (@expr1073745084 !@expr1073745085 sameToken (@expr1073745086 tokvalue@var921 , rhs@var882 .@expr3237 tokvalue@var885 ) ) {
150: return false ; }
151: if (@expr3230 intvalue@var920 !=@expr3231 rhs@var882 .@expr3232 intvalue@var884 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var888 , F f@var889 ) {
160: switch (@expr1073745091 self@var888 .@expr1073745092 valueType@var890 ) {
161: case ValueType ::@expr1073745093 INT :@expr3270
162: case ValueType ::@expr1073745095 SYMBOLIC :@expr3270
163: case ValueType ::@expr1073745097 BUFFER_SIZE :@expr3270
164: case ValueType ::@expr1073745099 CONTAINER_SIZE :@expr3270
165: case ValueType ::@expr1073745101 ITERATOR_START :@expr3270
166: case ValueType ::@expr1073745103 ITERATOR_END :@expr3270 ; {
167: f@var889 (@expr1073745105 self@var888 .@expr1073745106 intvalue@var891 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073745107 FLOAT :@expr3270 ; {
171: f@var889 (@expr1073745109 self@var888 .@expr1073745110 floatValue@var892 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073745111 UNINIT :@expr3270
175: case ValueType ::@expr1073745113 TOK :@expr3270
176: case ValueType ::@expr1073745115 LIFETIME :@expr3270
177: case ValueType ::@expr1073745117 MOVED :@expr3270 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var893 , Compare compare@var894 , T x@var895 , U y@var896 ) const {
186: result@var893 =@expr1073745119 compare@var894 (@expr1073745120 x@var895 , y@var896 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var897 , const Value & rhs@var898 , Compare compare@var899 , T x@var900 ) const {
191: visitValue (@expr1073745122 rhs@var898 ,
192: std ::@expr1073745123 bind (@expr1073745124 innerVisitor {@expr1073745125 } , std ::@expr1073745126 ref (@expr1073745127 result@var897 ) , std ::@expr1073745128 move (@expr1073745129 compare@var899 ) , x@var900 , std ::@expr1073745130 placeholders ::@expr1073745131 _1@expr1073745121 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var901 , Compare compare@var902 ) const {
198: assert (@expr1073745133 (@expr1073745134 !@expr1073745135 this@expr3312 .@expr1073745137 isSymbolicValue (@expr1073745138 ) &&@expr1073745139 !@expr1073745140 rhs@var901 .@expr1073745141 isSymbolicValue (@expr1073745142 ) ) ||@expr1073745143
199: (@expr1073745144 this@expr3312 .@expr1073745145 valueType@var918 ==@expr1073745146 rhs@var901 .@expr1073745147 valueType@var903 &&@expr1073745148 sameToken (@expr1073745149 this@expr3312 .@expr1073745150 tokvalue@var921 , rhs@var901 .@expr1073745151 tokvalue@var904 ) ) ) ;
200: bool result@var905 ; result@var905 =@expr1073745152 false ;
201: visitValue (@expr1073745153
202: *@expr1073745154 this@expr3312 ,
203: std ::@expr1073745155 bind (@expr1073745156 compareVisitor {@expr1073745157 } , std ::@expr3334 ref (@expr1073745159 result@var905 ) , std ::@expr3334 ref (@expr1073745161 rhs@var901 ) , std ::@expr1073745162 move (@expr1073745163 compare@var902 ) , std ::@expr1073745164 placeholders ::@expr1073745165 _1@expr1073745132 ) ) ;
204: return result@var905 ;
205: }
206:
207: bool operator== ( const Value & rhs@var906 ) const {
208: if (@expr1073745166 !@expr1073745167 equalValue (@expr1073745168 rhs@var906 ) ) {
209: return false ; }
210:
211: return varvalue@var924 ==@expr1073745169 rhs@var906 .@expr1073745170 varvalue@var907 &&@expr1073745171
212: condition@var925 ==@expr1073745172 rhs@var906 .@expr1073745173 condition@var908 &&@expr1073745174
213: varId@var927 ==@expr1073745175 rhs@var906 .@expr1073745176 varId@var909 &&@expr1073745177
214: conditional@var929 ==@expr1073745178 rhs@var906 .@expr1073745179 conditional@var910 &&@expr1073745180
215: defaultArg@var931 ==@expr1073745181 rhs@var906 .@expr1073745182 defaultArg@var911 &&@expr1073745183
216: indirect@var932 ==@expr1073745184 rhs@var906 .@expr1073745185 indirect@var912 &&@expr1073745186
217: valueKind@var943 ==@expr1073745187 rhs@var906 .@expr1073745188 valueKind@var913 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var914 ) const {
221: return !@expr1073745189 (@expr1073745190 *@expr1073745191 this@expr1073745192 ==@expr1073745193 rhs@var914 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var915 ) const {
226: bool result@var916 ; result@var916 =@expr1073745195 false ;
227: visitValue (@expr1073745196 *@expr1073745197 this@expr1073745198 , std ::@expr1073745199 bind (@expr1073745200 equalVisitor {@expr1073745201 } , std ::@expr1073745202 ref (@expr1073745203 result@var916 ) , x@var915 , std ::@expr1073745204 placeholders ::@expr1073745205 _1@expr1073745194 ) ) ;
228: return result@var916 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073745206 bound@var919 ==@expr1073745207 Bound ::@expr1073745208 Lower ) {
233: visitValue (@expr1073745209 *@expr3386 this@expr3387 , increment {@expr1073745212 } ) ; }
234: else { if (@expr1073745213 bound@var919 ==@expr1073745214 Bound ::@expr1073745215 Upper ) {
235: visitValue (@expr1073745216 *@expr3386 this@expr3387 , decrement {@expr1073745218 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073745219 bound@var919 ==@expr1073745220 Bound ::@expr3397 Lower ) {
240: bound@var919 =@expr1073745222 Bound ::@expr3399 Upper ; }
241: else { if (@expr1073745224 bound@var919 ==@expr1073745225 Bound ::@expr3399 Upper ) {
242: bound@var919 =@expr1073745227 Bound ::@expr3397 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073745229 ) ;
247: decreaseRange (@expr1073745230 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var917 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var918 ;
267: bool isIntValue ( ) const {
268: return valueType@var918 ==@expr1073745231 ValueType ::@expr1073745232 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var918 ==@expr1073745233 ValueType ::@expr1073745234 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var918 ==@expr1073745235 ValueType ::@expr1073745236 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var918 ==@expr1073745237 ValueType ::@expr1073745238 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var918 ==@expr1073745239 ValueType ::@expr1073745240 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var918 ==@expr1073745241 ValueType ::@expr1073745242 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var918 ==@expr1073745243 ValueType ::@expr1073745244 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var918 ==@expr1073745245 ValueType ::@expr1073745246 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var918 ==@expr1073745247 ValueType ::@expr1073745248 ITERATOR_START ||@expr1073745249 valueType@var918 ==@expr1073745250 ValueType ::@expr1073745251 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var918 ==@expr1073745252 ValueType ::@expr1073745253 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var918 ==@expr1073745254 ValueType ::@expr1073745255 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var918 ==@expr1073745256 ValueType ::@expr1073745257 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var918 ==@expr1073745259 ValueType ::@expr1073745260 LIFETIME &&@expr1073745261 lifetimeScope@var938 ==@expr1073745262 LifetimeScope ::@expr1073745263 Local@expr1073745258 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var918 ==@expr1073745264 ValueType ::@expr1073745265 LIFETIME &&@expr1073745266 lifetimeScope@var938 ==@expr1073745267 LifetimeScope ::@expr1073745268 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var918 ==@expr1073745269 ValueType ::@expr1073745270 LIFETIME &&@expr1073745271 lifetimeScope@var938 ==@expr1073745272 LifetimeScope ::@expr1073745273 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073745274 ) ||@expr1073745275 isUninitValue (@expr1073745276 ) ||@expr1073745277 isLifetimeValue (@expr1073745278 ) ;
318: }
319:
320:
321: Bound bound@var919 ;
322:
323:
324: long long intvalue@var920 ;
325:
326:
327: const Token * tokvalue@var921 ;
328:
329:
330: double floatValue@var922 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var923 ;
334:
335:
336: long long varvalue@var924 ;
337:
338:
339: const Token * condition@var925 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var926 ;
342:
343:
344: int varId@var927 ;
345:
346:
347: bool safe@var928 ;
348:
349:
350: bool conditional@var929 ;
351:
352:
353: bool macro@var930 ;
354:
355:
356: bool defaultArg@var931 ;
357:
358: int indirect@var932 ;
359:
360:
361: long long path@var933 ;
362:
363:
364: long long wideintvalue@var934 ;
365:
366: std :: vector < std :: string > subexpressions@var935 ;
367:
368:
369: const Token * capturetok@var936 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var937 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var938 ;
385:
386: static const char * toString ( MoveKind moveKind@var939 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var940 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var941 ) ;
389: static const char * toString ( Bound bound@var942 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var943 ;
402:
403: void setKnown ( ) {
404: valueKind@var943 =@expr1073745279 ValueKind ::@expr1073745280 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var943 ==@expr1073745281 ValueKind ::@expr1073745282 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var943 =@expr1073745284 ValueKind ::@expr1073745285 Possible@expr1073745283 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var943 ==@expr1073745287 ValueKind ::@expr1073745288 Possible@expr1073745286 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var943 ==@expr1073745289 ValueKind ::@expr1073745290 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var943 =@expr1073745291 ValueKind ::@expr1073745292 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var944 = true ) {
428: if (@expr1073745293 inconclusive@var944 ) {
429: valueKind@var943 =@expr1073745294 ValueKind ::@expr1073745295 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var943 ==@expr1073745296 ValueKind ::@expr1073745297 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073745299 isKnown (@expr1073745300 ) ) {
438: valueKind@var943 =@expr1073745301 ValueKind ::@expr1073745302 Possible@expr1073745298 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073745303 condition@var925 &&@expr1073745304 !@expr1073745305 defaultArg@var931 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var945 , const Token * tok2@var946 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var947 , const Settings * settings@var948 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var949 , SymbolDatabase * symboldatabase@var950 , ErrorLogger * errorLogger@var951 , const Settings * settings@var952 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var953 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var954 , const Settings * settings@var955 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var956 ,
459: const Settings * settings@var957 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var958 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var959 , const Token * indexTok@var960 , bool possible@var961 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var962 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var963 , const Settings * settings@var964 = nullptr , int depth@var965 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var966 ;
471: bool addressOf@var967 ;
472: std :: list < std :: pair < const Token * , std :: string > > errorPath@var968 ;
473: bool inconclusive@var969 ;
474:
475: LifetimeToken ( ) : token@var966 ( nullptr ) , addressOf@var967 ( false ) , errorPath@var968 ( ) , inconclusive@var969 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var970 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var971 )
478: : token@var966 ( token@var970 ) , addressOf@var967 ( false ) , errorPath@var968 ( std :: move ( errorPath@var971 ) ) , inconclusive@var969 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var972 , bool addressOf@var973 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var974 )
482: : token@var966 ( token@var972 ) , addressOf@var967 ( addressOf@var973 ) , errorPath@var968 ( std :: move ( errorPath@var974 ) ) , inconclusive@var969 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var975 , bool b@var976 ) {
486: for (@expr1073745306 LifetimeToken &@expr1073745307 x@var977 :@expr1073745308 v@var975 ) {
487: x@var977 .@expr1073745309 addressOf@var978 =@expr1073745310 b@var976 ; }
488: return v@var975 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var979 , bool b@var980 ) {
492: for (@expr1073745311 LifetimeToken &@expr1073745312 x@var981 :@expr1073745313 v@var979 ) {
493: x@var981 .@expr1073745314 inconclusive@var982 =@expr1073745315 b@var980 ; }
494: return v@var979 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var983 , ValueFlow :: Value & true_value@var984 , ValueFlow :: Value & false_value@var985 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var986 ) ;
499: const Token * parseCompareInt ( const Token * tok@var987 , ValueFlow :: Value & true_value@var988 , ValueFlow :: Value & false_value@var989 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var990 , long long val@var991 , const Token * varTok@var992 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var993 , const Token * varTok@var994 , long long val@var995 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var996 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var997 ,
508: ValueFlow :: Value & value@var998 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var999 ,
511: bool escape@var1000 = false ,
512: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1001 = std :: list < std :: pair < const Token * , std :: string > > { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var1002 , const Token * lifetime@var1003 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var1004 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1005 , bool * addressOf@var1006 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var1007 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var1008 , const Settings * settings@var1009 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var1010 , const ValueFlow :: Value * val@var1011 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var1012 , const ValueFlow :: Value * val@var1013 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1014 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var1015 , bool inconclusive@var1016 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var1017 ,
529: bool inconclusive@var1018 = false ,
530: long long path@var1019 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var1020 , const Scope * defaultScope@var1021 = nullptr , bool smallest@var1022 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var1023 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var1024 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var1025 ;
69: std :: string mScope@var1026 ;
70: std :: string mName@var1027 ;
71: std :: string mFullName@var1028 ;
72: const Token * mNameToken@var1029 ;
73: const Token * mParamEnd@var1030 ;
74: unsigned int mFlags@var1031 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var1032 ) {
90: setFlag (@expr1073745316 fIsClass , state@var1032 ) ;
91: }
92: void isFunction ( bool state@var1033 ) {
93: setFlag (@expr1073745317 fIsFunction , state@var1033 ) ;
94: }
95: void isVariable ( bool state@var1034 ) {
96: setFlag (@expr1073745318 fIsVariable , state@var1034 ) ;
97: }
98: void isAlias ( bool state@var1035 ) {
99: setFlag (@expr1073745319 fIsAlias , state@var1035 ) ;
100: }
101: void isSpecialization ( bool state@var1036 ) {
102: setFlag (@expr1073745320 fIsSpecialization , state@var1036 ) ;
103: }
104: void isPartialSpecialization ( bool state@var1037 ) {
105: setFlag (@expr1073745321 fIsPartialSpecialization , state@var1037 ) ;
106: }
107: void isForwardDeclaration ( bool state@var1038 ) {
108: setFlag (@expr1073745322 fIsForwardDeclaration , state@var1038 ) ;
109: }
110: void isVariadic ( bool state@var1039 ) {
111: setFlag (@expr1073745323 fIsVariadic , state@var1039 ) ;
112: }
113: void isFriend ( bool state@var1040 ) {
114: setFlag (@expr1073745324 fIsFriend , state@var1040 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var1041 ) const {
123: return (@expr3501 (@expr3501 mFlags@var1031 &@expr1073745327 flag@var1041 ) !=@expr1073745328 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var1042 , bool state@var1043 ) {
132: mFlags@var1031 =@expr1073745329 state@var1043 ?@expr1073745330 mFlags@var1031 |@expr1073745331 flag@var1042 :@expr1073745332 mFlags@var1031 &@expr1073745333 ~@expr1073745334 flag@var1042 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var1044 , const std :: string & scope@var1045 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var1046 , const std :: string & scope@var1047 , const Token * nameToken@var1048 , const Token * paramEnd@var1049 ) ;
150: TokenAndName ( const TokenAndName & other@var1050 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var1051 ) const {
154: return mToken@var1025 ==@expr1073745335 rhs@var1051 .@expr1073745336 mToken@var1052 &&@expr1073745337 mScope@var1026 ==@expr1073745338 rhs@var1051 .@expr1073745339 mScope@var1053 &&@expr1073745340 mName@var1027 ==@expr1073745341 rhs@var1051 .@expr1073745342 mName@var1054 &&@expr1073745343 mFullName@var1028 ==@expr1073745344 rhs@var1051 .@expr1073745345 mFullName@var1055 &&@expr1073745346
155: mNameToken@var1029 ==@expr1073745347 rhs@var1051 .@expr1073745348 mNameToken@var1056 &&@expr1073745349 mParamEnd@var1030 ==@expr1073745350 rhs@var1051 .@expr1073745351 mParamEnd@var1057 &&@expr1073745352 mFlags@var1031 ==@expr1073745353 rhs@var1051 .@expr1073745354 mFlags@var1058 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var1025 ;
160: }
161: void token ( Token * token@var1059 ) {
162: mToken@var1025 =@expr1073745355 token@var1059 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var1026 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var1027 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var1028 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var1029 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var1030 ;
178: }
179: void paramEnd ( const Token * end@var1060 ) {
180: mParamEnd@var1030 =@expr1073745356 end@var1060 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745357 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745358 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745359 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745360 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745361 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745362 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745363 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745364 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745365 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var1061 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var1062 ) const {
243:
244:
245: return (@expr3542 (@expr3542 mFlags@var1031 &@expr1073745368 fFamilyMask ) &@expr1073745369 (@expr3542 decl@var1062 .@expr1073745371 mFlags@var1063 &@expr1073745372 fFamilyMask ) ) !=@expr1073745373 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var1064 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var1065 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var1066 , const unsigned long numberOfArguments@var1067 , bool variadic@var1068 , const char patternAfter@var1069 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var1070 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var1071 , int & namepos@var1072 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1073 , int & namepos@var1074 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1075 , int & namepos@var1076 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1077 ,
306: bool & codeWithTemplates@var1078 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1079 , bool isTemplate@var1080 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1081 = nullptr , Token * backToken@var1082 = nullptr , bool isTemplate@var1083 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1084 , Token * end@var1085 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1086 , const std :: string & scope@var1087 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1088 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1089 ,
393: const std :: list < const Token * > & specializations@var1090 ,
394: const std :: time_t maxtime@var1091 ,
395: std :: set < std :: string > & expandedtemplates@var1092 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1093 , const Token * tok@var1094 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1095 , const Token * tok@var1096 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1097 ,
422: const TokenAndName & templateInstantiation@var1098 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1099 ,
424: const std :: string & newName@var1100 ,
425: bool copy@var1101 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1102 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1103 ,
435: const std :: string & newName@var1104 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1105 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1106 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1107 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1108 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1109 ,
458: const Token * templateInstantiationNameToken@var1110 ,
459: const std :: list < const Token * > & specializations@var1111 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1112 , const Token * end@var1113 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1114 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1115 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1116 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1117 ,
487: const std :: string & indent@var1118 = "    " ) const ;
488: void printOut ( const std :: string & text@var1119 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1120 ;
491: TokenList & mTokenList@var1121 ;
492: const Settings * mSettings@var1122 ;
493: ErrorLogger * mErrorLogger@var1123 ;
494: bool mChanged@var1124 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1125 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1126 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1127 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1128 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1129 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1130 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1131 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1132 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1133 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1134 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1135 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1136 ;
57: Token * back@var1137 ;
58: const TokenList * list@var1138 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1139 , const Token * bodyEnd_@var1140 , const std :: set < std :: string > & usingNamespaces_@var1141 = std :: set < std :: string > ( ) ) : name@var1142 ( name_@var1139 ) , bodyEnd@var1143 ( bodyEnd_@var1140 ) , usingNamespaces@var1144 ( usingNamespaces_@var1141 ) { }
63: std :: string name@var1142 ;
64: const Token * const bodyEnd@var1143 ;
65: std :: set < std :: string > usingNamespaces@var1144 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1145 ;
70: int mFileIndex@var1146 ;
71: int mLineNumber@var1147 ;
72: int mColumn@var1148 ;
73: int mExprId@var1149 ;
74:
75:
76: Token * mAstOperand1@var1150 ;
77: Token * mAstOperand2@var1151 ;
78: Token * mAstParent@var1152 ;
79:
80:
81: const Scope * mScope@var1153 ;
82: union {
83: const Function * mFunction@var1154 ;
84: const Variable * mVariable@var1155 ;
85: const :: Type * mType@var1156 ;
86: const Enumerator * mEnumerator@var1157 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1158 ;
94:
|
97:
98: int mIndex@var1159 ;
99:
100:
101: std :: string * mOriginalName@var1160 ;
102:
103:
104: ValueType * mValueType@var1161 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1162 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1163 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1164 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1165 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1166 ;
119: long long value@var1167 ;
120: struct CppcheckAttributes * next@var1168 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1169 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1170 ;
126:
127:
128: unsigned char mBits@var1171 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1172 , long long value@var1173 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1174 , long long * value@var1175 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1145 ( 0 )
135: , mFileIndex@var1146 ( 0 )
136: , mLineNumber@var1147 ( 0 )
137: , mColumn@var1148 ( 0 )
138: , mExprId@var1149 ( 0 )
139: , mAstOperand1@var1150 ( nullptr )
140: , mAstOperand2@var1151 ( nullptr )
141: , mAstParent@var1152 ( nullptr )
142: , mScope@var1153 ( nullptr )
143: , mFunction@var1154 ( nullptr )
144: , mProgressValue@var1158 ( 0 )
145: , mIndex@var1159 ( 0 )
146: , mOriginalName@var1160 ( nullptr )
147: , mValueType@var1161 ( nullptr )
148: , mValues@var1162 ( nullptr )
149: , mTemplateSimplifierPointers@var1164 ( nullptr )
150: , mScopeInfo@var1165 ( nullptr )
151: , mCppcheckAttributes@var1169 ( nullptr )
152: , mCpp11init@var1170 ( Cpp11init :: UNKNOWN )
153: , mBits@var1171 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1176 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1177 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1178 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1179 ) {
199: mStr@var1391 =@expr1073745374 s@var1179 ;
200: mImpl@var1397 .@expr1073745375 mVarId@var1428 =@expr1073745376 0 ;
201:
202: update_property_info (@expr1073745377 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1180 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1391 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1181 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1182 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1183 ) const ;
236: Token * tokAt ( int index@var1184 ) {
237: return const_cast < Token *@expr3554 > (@expr1073745379 const_cast < const Token *@expr3554 > (@expr1073745381 this@expr1073745382 ) .@expr1073745383 tokAt (@expr1073745384 index@var1184 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1185 ) const ;
245: Token * linkAt ( int index@var1186 ) {
246: return const_cast < Token *@expr3561 > (@expr1073745386 const_cast < const Token *@expr3561 > (@expr1073745388 this@expr1073745389 ) .@expr1073745390 linkAt (@expr1073745391 index@var1186 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1187 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1188 , const char ( & pattern@var1189 ) [ count ] ) {
276: return simpleMatch (@expr1073745393 tok@var1188 , pattern@var1189 , count@expr1073745392 -@expr1073745394 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1190 , const char pattern@var1191 [ ] , unsigned long pattern_len@var1192 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1193 , const char pattern@var1194 [ ] , int varid@var1195 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1196 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1197 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1198 , const Settings * const settings@var1199 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1200 , long long index@var1201 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1397 .@expr1073745395 mValueType@var1429 ;
366: }
367: void setValueType ( ValueType * vt@var1202 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1203 ; top@var1203 =@expr1073745396 this@expr1073745397 ;
371: while (@expr1073745398 top@var1203 &&@expr1073745399 !@expr1073745400 Token ::@expr1073745401 Match (@expr1073745402 top@var1203 .@expr3579 astParent (@expr3580 ) , ",|(" ) ) {
372: top@var1203 =@expr1073745405 top@var1203 .@expr3579 astParent (@expr3580 ) ; }
373: return top@var1203 ?@expr1073745408 top@var1203 .@expr1073745409 mImpl@var1204 .@expr1073745410 mValueType@var1205 :@expr1073745411 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1395 ;
378: }
379: void tokType ( Token :: Type t@var1206 ) {
380: mTokType@var1395 =@expr1073745412 t@var1206 ;
381:
382: const bool memoizedIsName@var1207 =@expr1073745413 mTokType@var1395 ==@expr1073745414 eName ||@expr1073745415 mTokType@var1395 ==@expr1073745416 eType ||@expr1073745417 mTokType@var1395 ==@expr1073745418 eVariable ||@expr1073745419
383: mTokType@var1395 ==@expr1073745420 eFunction ||@expr1073745421 mTokType@var1395 ==@expr1073745422 eKeyword ||@expr1073745423 mTokType@var1395 ==@expr3600 eBoolean ||@expr1073745425
384: mTokType@var1395 ==@expr3602 eEnumerator ;
385: setFlag (@expr1073745427 fIsName , memoizedIsName@var1207 ) ;
386:
387: const bool memoizedIsLiteral@var1208 =@expr1073745428 mTokType@var1395 ==@expr1073745429 eNumber ||@expr1073745430 mTokType@var1395 ==@expr1073745431 eString ||@expr1073745432 mTokType@var1395 ==@expr1073745433 eChar ||@expr1073745434
388: mTokType@var1395 ==@expr3600 eBoolean ||@expr1073745436 mTokType@var1395 ==@expr1073745437 eLiteral ||@expr1073745438 mTokType@var1395 ==@expr3602 eEnumerator ;
389: setFlag (@expr1073745440 fIsLiteral , memoizedIsLiteral@var1208 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1395 ==@expr1073745441 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745442 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1396 ==@expr1073745443 fIsName &&@expr1073745444 mTokType@var1395 ==@expr1073745445 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745446 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1395 ==@expr1073745447 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1395 ==@expr1073745448 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745449 isConstOp (@expr1073745450 ) ||@expr1073745451
412: isAssignmentOp (@expr1073745452 ) ||@expr1073745453
413: mTokType@var1395 ==@expr1073745454 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745455 isArithmeticalOp (@expr1073745456 ) ||@expr1073745457
417: mTokType@var1395 ==@expr1073745458 eLogicalOp ||@expr1073745459
418: mTokType@var1395 ==@expr1073745460 eComparisonOp ||@expr1073745461
419: mTokType@var1395 ==@expr1073745462 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745463 ) ||@expr1073745464
423: mTokType@var1395 ==@expr1073745465 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1395 ==@expr1073745466 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1395 ==@expr1073745467 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1395 ==@expr1073745468 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1395 ==@expr1073745469 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1395 ==@expr1073745470 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745471 ) !=@expr1073745472 nullptr &&@expr1073745473 astOperand2 (@expr1073745474 ) !=@expr1073745475 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1209 ) const {
444: return s@var1209 ==@expr1073745476 mStr@var1391 &&@expr1073745477 astOperand1 (@expr1073745478 ) !=@expr1073745479 nullptr &&@expr1073745480 astOperand2 (@expr1073745481 ) ==@expr1073745482 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1396 ;
450: }
451: void flags ( const unsigned int flags_@var1210 ) {
452: mFlags@var1396 =@expr1073745483 flags_@var1210 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745484 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1211 ) {
458: setFlag (@expr1073745485 fIsUnsigned , sign@var1211 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745486 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1212 ) {
464: setFlag (@expr1073745487 fIsSigned , sign@var1212 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745488 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1213 ) {
470: setFlag (@expr1073745489 fIsPointerCompare , b@var1213 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745490 fIsLong ) ;
474: }
475: void isLong ( bool size@var1214 ) {
476: setFlag (@expr1073745491 fIsLong , size@var1214 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745492 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1215 ) {
482: setFlag (@expr1073745493 fIsStandardType , b@var1215 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745494 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1216 ) {
488: setFlag (@expr1073745495 fIsExpandedMacro , m@var1216 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745496 fIsCast ) ;
492: }
493: void isCast ( bool c@var1217 ) {
494: setFlag (@expr1073745497 fIsCast , c@var1217 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745498 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1218 ) {
500: setFlag (@expr1073745499 fIsAttributeConstructor , ac@var1218 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745500 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1219 ) {
506: setFlag (@expr1073745501 fIsAttributeDestructor , value@var1219 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745502 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1220 ) {
512: setFlag (@expr1073745503 fIsAttributeUnused , unused@var1220 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745504 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1221 ) {
518: setFlag (@expr1073745505 fIsAttributeUsed , unused@var1221 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745506 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1222 ) {
524: setFlag (@expr1073745507 fIsAttributePure , value@var1222 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745508 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1223 ) {
530: setFlag (@expr1073745509 fIsAttributeConst , value@var1223 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745510 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1224 ) {
536: setFlag (@expr1073745511 fIsAttributeNoreturn , value@var1224 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745512 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1225 ) {
542: setFlag (@expr1073745513 fIsAttributeNothrow , value@var1225 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745514 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1226 ) {
548: setFlag (@expr1073745515 fIsAttributePacked , value@var1226 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745516 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1227 ) {
554: setFlag (@expr1073745517 fIsAttributeNodiscard , value@var1227 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745518 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1228 ) {
560: setFlag (@expr1073745519 fIsAttributeMaybeUnused , value@var1228 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1229 , long long value@var1230 ) {
563: mImpl@var1397 .@expr1073745520 setCppcheckAttribute (@expr1073745521 type@var1229 , value@var1230 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1231 , long long * value@var1232 ) const {
566: return mImpl@var1397 .@expr1073745522 getCppcheckAttribute (@expr1073745523 type@var1231 , value@var1232 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745524 mImpl@var1397 .@expr1073745525 mCppcheckAttributes@var1430 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745526 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745527 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1233 ) {
578: setFlag (@expr1073745528 fIsOperatorKeyword , value@var1233 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745529 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1234 ) {
584: setFlag (@expr1073745530 fIsComplex , value@var1234 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745531 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1235 ) {
590: setFlag (@expr1073745532 fIsEnumType , value@var1235 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745533 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1236 ) {
596: setFlag (@expr1073745534 fAtAddress , b@var1236 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745535 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1237 ) {
602: setFlag (@expr1073745536 fIncompleteVar , b@var1237 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745537 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1238 ) {
609: setFlag (@expr1073745538 fIsIncompleteConstant , b@var1238 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745539 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1239 ) {
616: setFlag (@expr1073745540 fConstexpr , b@var1239 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745541 fExternC ) ;
621: }
622: void isExternC ( bool b@var1240 ) {
623: setFlag (@expr1073745542 fExternC , b@var1240 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745543 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1241 ) {
630: setFlag (@expr1073745544 fIsSplitVarDeclComma , b@var1241 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745545 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1242 ) {
637: setFlag (@expr1073745546 fIsSplitVarDeclEq , b@var1242 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745547 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1243 ) {
644: setFlag (@expr1073745548 fIsImplicitInt , b@var1243 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745549 fIsInline ) ;
649: }
650: void isInline ( bool b@var1244 ) {
651: setFlag (@expr1073745550 fIsInline , b@var1244 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745551 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1245 ) {
658: setFlag (@expr1073745552 fIsRemovedVoidParameter , b@var1245 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745553 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1246 ) {
665: setFlag (@expr1073745554 fIsTemplate , b@var1246 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745555 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1247 ) {
672: setFlag (@expr1073745556 fIsSimplifedScope , b@var1247 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1397 .@expr1073745557 mBits@var1431 >@expr1073745558 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1397 .@expr1073745559 mBits@var1431 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1397 .@expr1073745560 mTemplateSimplifierPointers@var1432 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1248 ) {
685: if (@expr1073745561 !@expr1073745562 mImpl@var1397 .@expr3739 mTemplateSimplifierPointers@var1432 ) {
686: mImpl@var1397 .@expr3739 mTemplateSimplifierPointers@var1432 =@expr1073745565 new std ::@expr1073745566 set < TemplateSimplifier ::@expr1073745567 TokenAndName *@expr1073745568 > ; }
687: mImpl@var1397 .@expr3739 mTemplateSimplifierPointers@var1432 .@expr1073745570 insert (@expr1073745571 tokenAndName@var1248 ) ;
688: }
689: void setBits ( const unsigned char b@var1249 ) {
690: mImpl@var1397 .@expr1073745572 mBits@var1431 =@expr1073745573 b@var1249 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3750 (@expr3750 (@expr3750 mTokType@var1395 ==@expr1073745577 eString ) &&@expr1073745578 isPrefixStringCharLiteral (@expr1073745579 mStr@var1391 , '"' , "u8" ) ) ||@expr1073745580
695: (@expr3750 (@expr3750 mTokType@var1395 ==@expr1073745583 eChar ) &&@expr1073745584 isPrefixStringCharLiteral (@expr1073745585 mStr@var1391 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3762 (@expr3762 (@expr3762 mTokType@var1395 ==@expr1073745589 eString ) &&@expr1073745590 isPrefixStringCharLiteral (@expr1073745591 mStr@var1391 , '"' , "u" ) ) ||@expr1073745592
700: (@expr3762 (@expr3762 mTokType@var1395 ==@expr1073745595 eChar ) &&@expr1073745596 isPrefixStringCharLiteral (@expr1073745597 mStr@var1391 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3774 (@expr3774 (@expr3774 mTokType@var1395 ==@expr1073745601 eString ) &&@expr1073745602 isPrefixStringCharLiteral (@expr1073745603 mStr@var1391 , '"' , "U" ) ) ||@expr1073745604
705: (@expr3774 (@expr3774 mTokType@var1395 ==@expr1073745607 eChar ) &&@expr1073745608 isPrefixStringCharLiteral (@expr1073745609 mStr@var1391 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3786 (@expr3786 (@expr3786 mTokType@var1395 ==@expr1073745613 eString ) &&@expr1073745614 isPrefixStringCharLiteral (@expr1073745615 mStr@var1391 , '"' , "" ) ) ||@expr1073745616
710: (@expr3786 (@expr3786 mTokType@var1395 ==@expr1073745619 eChar ) &&@expr1073745620 isPrefixStringCharLiteral (@expr1073745621 mStr@var1391 , '\'' , "" ) &&@expr1073745622 mStr@var1391 .@expr1073745623 length (@expr1073745624 ) ==@expr1073745625 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3802 (@expr3802 (@expr3802 mTokType@var1395 ==@expr1073745629 eChar ) &&@expr1073745630 isPrefixStringCharLiteral (@expr1073745631 mStr@var1391 , '\'' , "" ) ) &&@expr1073745632
715: (@expr3802 mStr@var1391 .@expr1073745634 length (@expr1073745635 ) >@expr1073745636 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745637 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1250 ) {
738: setFlag (@expr1073745638 fIsTemplateArg , value@var1250 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1251 , const char ( & pattern@var1252 ) [ count ] ) {
743: return findsimplematch (@expr1073745640 startTok@var1251 , pattern@var1252 , count@expr1073745639 -@expr1073745641 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1253 , const char pattern@var1254 [ ] , unsigned long pattern_len@var1255 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1256 , const char ( & pattern@var1257 ) [ count ] , const Token * const end@var1258 ) {
749: return findsimplematch (@expr1073745643 startTok@var1256 , pattern@var1257 , count@expr1073745642 -@expr1073745644 1 , end@var1258 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1259 , const char pattern@var1260 [ ] , unsigned long pattern_len@var1261 , const Token * const end@var1262 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1263 , const char pattern@var1264 [ ] , const int varId@var1265 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1266 , const char pattern@var1267 [ ] , const Token * const end@var1268 , const int varId@var1269 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1270 , const char ( & pattern@var1271 ) [ count ] ) {
758: return findsimplematch (@expr1073745646 startTok@var1270 , pattern@var1271 , count@expr1073745645 -@expr1073745647 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1272 , const char pattern@var1273 [ ] , unsigned long pattern_len@var1274 ) {
761: return const_cast < Token *@expr3824 > (@expr1073745649 findsimplematch (@expr1073745650 const_cast < const Token *@expr3824 > (@expr1073745652 startTok@var1272 ) , pattern@var1273 , pattern_len@var1274 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1275 , const char ( & pattern@var1276 ) [ count ] , const Token * const end@var1277 ) {
765: return findsimplematch (@expr1073745654 startTok@var1275 , pattern@var1276 , count@expr1073745653 -@expr1073745655 1 , end@var1277 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1278 , const char pattern@var1279 [ ] , unsigned long pattern_len@var1280 , const Token * const end@var1281 ) {
768: return const_cast < Token *@expr3832 > (@expr1073745657 findsimplematch (@expr1073745658 const_cast < const Token *@expr3832 > (@expr1073745660 startTok@var1278 ) , pattern@var1279 , pattern_len@var1280 , end@var1281 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1282 , const char pattern@var1283 [ ] , const int varId@var1284 = 0 ) {
772: return const_cast < Token *@expr3837 > (@expr1073745662 findmatch (@expr1073745663 const_cast < const Token *@expr3837 > (@expr1073745665 startTok@var1282 ) , pattern@var1283 , varId@var1284 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1285 , const char pattern@var1286 [ ] , const Token * const end@var1287 , const int varId@var1288 = 0 ) {
775: return const_cast < Token *@expr3842 > (@expr1073745667 findmatch (@expr1073745668 const_cast < const Token *@expr3842 > (@expr1073745670 startTok@var1285 ) , pattern@var1286 , end@var1287 , varId@var1288 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1289 , const char * haystack@var1290 , int varid@var1291 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1397 .@expr1073745671 mFileIndex@var1433 ;
796: }
797: void fileIndex ( int indexOfFile@var1292 ) {
798: mImpl@var1397 .@expr1073745672 mFileIndex@var1433 =@expr1073745673 indexOfFile@var1292 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1397 .@expr1073745674 mLineNumber@var1434 ;
803: }
804: void linenr ( int lineNumber@var1293 ) {
805: mImpl@var1397 .@expr1073745675 mLineNumber@var1434 =@expr1073745676 lineNumber@var1293 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1397 .@expr1073745677 mColumn@var1435 ;
810: }
811: void column ( int c@var1294 ) {
812: mImpl@var1397 .@expr1073745678 mColumn@var1435 =@expr1073745679 c@var1294 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1392 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1295 , const Token * end@var1296 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1297 , const std :: string & originalNameStr@var1298 = emptyString@var1 , bool prepend@var1299 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1300 , const std :: string & originalNameStr@var1301 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745680 tokenStr@var1300 , originalNameStr@var1301 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1393 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1397 .@expr1073745681 mVarId@var1428 ;
851: }
852: void varId ( int id@var1302 ) {
853: mImpl@var1397 .@expr1073745682 mVarId@var1428 =@expr1073745683 id@var1302 ;
854: if (@expr1073745684 id@var1302 !=@expr1073745685 0 ) {
855: tokType (@expr1073745686 eVariable ) ;
856: isStandardType (@expr1073745687 false ) ;
857: } else {
858: update_property_info (@expr1073745688 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745689 mImpl@var1397 .@expr3866 mExprId@var1436 ) {
864: return mImpl@var1397 .@expr3866 mExprId@var1436 ; }
865: return mImpl@var1397 .@expr1073745692 mVarId@var1428 ;
866: }
867: void exprId ( int id@var1303 ) {
868: mImpl@var1397 .@expr1073745693 mExprId@var1436 =@expr1073745694 id@var1303 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1304 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1305 , const std :: vector < std :: string > & fileNames@var1306 ) const ;
888:
|
891:
892: void printLines ( int lines@var1307 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1308 , Token * start@var1309 , Token * end@var1310 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1311 ; varid@var1311 = false ;
905: bool exprid@var1312 ; exprid@var1312 = false ;
906: bool idtype@var1313 ; idtype@var1313 = false ;
907: bool attributes@var1314 ; attributes@var1314 = false ;
908: bool macro@var1315 ; macro@var1315 = false ;
909: bool linenumbers@var1316 ; linenumbers@var1316 = false ;
910: bool linebreaks@var1317 ; linebreaks@var1317 = false ;
911: bool files@var1318 ; files@var1318 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1319 ;
914: options@var1319 .@expr1073745695 attributes@var1320 =@expr1073745696 true ;
915: options@var1319 .@expr1073745697 macro@var1321 =@expr1073745698 true ;
916: options@var1319 .@expr1073745699 linenumbers@var1322 =@expr1073745700 true ;
917: options@var1319 .@expr1073745701 linebreaks@var1323 =@expr1073745702 true ;
918: options@var1319 .@expr1073745703 files@var1324 =@expr1073745704 true ;
919: return options@var1319 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1325 ; options@var1325 =@expr1073745705 forDebug (@expr1073745706 ) ;
923: options@var1325 .@expr1073745707 varid@var1326 =@expr1073745708 true ;
924: return options@var1325 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1327 ; options@var1327 =@expr1073745709 forDebug (@expr1073745710 ) ;
928: options@var1327 .@expr1073745711 exprid@var1328 =@expr1073745712 true ;
929: return options@var1327 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1329 ; options@var1329 =@expr1073745713 forDebug (@expr1073745714 ) ;
933: options@var1329 .@expr1073745715 exprid@var1330 =@expr1073745716 true ;
934: options@var1329 .@expr1073745717 varid@var1331 =@expr1073745718 true ;
935: options@var1329 .@expr1073745719 idtype@var1332 =@expr1073745720 true ;
936: return options@var1329 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1333 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1334 , bool attributes@var1335 , bool macro@var1336 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1337 , const std :: vector < std :: string > * fileNames@var1338 = nullptr , const Token * end@var1339 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1340 , bool attributes@var1341 = true ) const ;
952: std :: string stringifyList ( bool varid@var1342 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1343 , bool attributes@var1344 , bool linenumbers@var1345 , bool linebreaks@var1346 , bool files@var1347 , const std :: vector < std :: string > * fileNames@var1348 = nullptr , const Token * end@var1349 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1350 ) {
983: mLink@var1394 =@expr1073745721 linkToToken@var1350 ;
984: if (@expr1073745722 mStr@var1391 ==@expr1073745723 "<" ||@expr1073745724 mStr@var1391 ==@expr1073745725 ">" ) {
985: update_property_info (@expr1073745726 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1394 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1351 ) {
1006: mImpl@var1397 .@expr1073745727 mScope@var1437 =@expr1073745728 s@var1351 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1397 .@expr1073745729 mScope@var1437 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1352 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1395 ==@expr1073745730 eFunction ||@expr1073745731 mTokType@var1395 ==@expr1073745732 eLambda ?@expr1073745733 mImpl@var1397 .@expr1073745734 mFunction@var1438 :@expr1073745735 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1353 ) {
1034: mImpl@var1397 .@expr1073745736 mVariable@var1439 =@expr1073745737 v@var1353 ;
1035: if (@expr1073745738 v@var1353 ||@expr1073745739 mImpl@var1397 .@expr1073745740 mVarId@var1428 ) {
1036: tokType (@expr1073745741 eVariable ) ; }
1037: else { if (@expr1073745742 mTokType@var1395 ==@expr1073745743 eVariable ) {
1038: tokType (@expr1073745744 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1395 ==@expr1073745745 eVariable ?@expr1073745746 mImpl@var1397 .@expr1073745747 mVariable@var1439 :@expr1073745748 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1354 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1395 ==@expr1073745749 eType ?@expr1073745750 mImpl@var1397 .@expr1073745751 mType@var1440 :@expr1073745752 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1355 , const Token * * typeTok@var1356 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1357 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1358 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1395 ==@expr1073745753 eEnumerator ?@expr1073745754 mImpl@var1397 .@expr1073745755 mEnumerator@var1441 :@expr1073745756 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1359 ) {
1079: mImpl@var1397 .@expr1073745757 mEnumerator@var1441 =@expr1073745758 e@var1359 ;
1080: if (@expr1073745759 e@var1359 ) {
1081: tokType (@expr1073745760 eEnumerator ) ; }
1082: else { if (@expr1073745761 mTokType@var1395 ==@expr1073745762 eEnumerator ) {
1083: tokType (@expr1073745763 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1360 , Token * end@var1361 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1362 , Token * srcEnd@var1363 , Token * newLocation@var1364 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1397 .@expr1073745764 mProgressValue@var1442 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1365 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1397 .@expr3941 mOriginalName@var1443 ?@expr1073745766 *@expr1073745767 mImpl@var1397 .@expr3941 mOriginalName@var1443 :@expr1073745769 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1397 .@expr3946 mValues@var1416 ?@expr1073745771 *@expr1073745772 mImpl@var1397 .@expr3946 mValues@var1416 :@expr1073745774 TokenImpl ::@expr1073745775 mEmptyValueList@var1163 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1366 ) {
1164: if (@expr1073745776 !@expr1073745777 mImpl@var1397 .@expr3954 mOriginalName@var1443 ) {
1165: mImpl@var1397 .@expr3954 mOriginalName@var1443 =@expr1073745780 new std ::@expr1073745781 string (@expr1073745782 name@var1366 ) ; }
1166: else {
1167: *@expr1073745783 mImpl@var1397 .@expr3954 mOriginalName@var1443 =@expr1073745785 name@var1366 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1367 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1368 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1369 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1397 .@expr1073745787 mValues@var1416 .@expr1073745788 front (@expr1073745789 ) .@expr1073745790 intvalue@expr1073745786 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1370 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1371 , long long path@var1372 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1373 , const Settings * settings@var1374 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1375 , const Settings * settings@var1376 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1377 , int argnr@var1378 , const Settings * settings@var1379 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1380 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1381 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1382 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1383 ) {
1200: if (@expr1073745791 mImpl@var1397 .@expr3968 mValues@var1416 ) {
1201: mImpl@var1397 .@expr3968 mValues@var1416 .@expr1073745794 remove_if (@expr1073745795 pred@var1383 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1397 .@expr1073745796 mIndex@var1444 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1384 ) {
1213: mNext@var1392 =@expr1073745797 nextToken@var1384 ;
1214: }
1215: void previous ( Token * previousToken@var1385 ) {
1216: mPrevious@var1393 =@expr1073745798 previousToken@var1385 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1386 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1387 , const char * word@var1388 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1389 , char c@var1390 ) ;
1235:
1236: std :: string mStr@var1391 ;
1237:
1238: Token * mNext@var1392 ;
1239: Token * mPrevious@var1393 ;
1240: Token * mLink@var1394 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1395 ;
1283:
1284: uint64_t mFlags@var1396 ;
1285:
1286: TokenImpl * mImpl@var1397 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1398 ) const {
1294: return (@expr3975 (@expr3975 mFlags@var1396 &@expr1073745801 flag_@var1398 ) !=@expr1073745802 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1399 , bool state_@var1400 ) {
1303: mFlags@var1396 =@expr1073745803 state_@var1400 ?@expr1073745804 mFlags@var1396 |@expr1073745805 flag_@var1399 :@expr1073745806 mFlags@var1396 &@expr1073745807 ~@expr1073745808 flag_@var1399 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1401 , const int indent1@var1402 = 0 , const int indent2@var1403 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1404 ) ;
1321: void astOperand2 ( Token * tok@var1405 ) ;
1322: void astParent ( Token * tok@var1406 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1397 .@expr1073745809 mAstOperand1@var1407 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1397 .@expr1073745810 mAstOperand1@var1407 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1397 .@expr1073745811 mAstOperand2@var1408 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1397 .@expr1073745812 mAstOperand2@var1408 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1397 .@expr1073745813 mAstParent@var1409 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1397 .@expr1073745814 mAstParent@var1409 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745815 !@expr1073745816 astParent (@expr3993 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745818 this@expr3995 ==@expr1073745820 astParent (@expr3993 ) .@expr3998 astOperand1 (@expr3999 ) ) {
1346: return astParent (@expr3993 ) .@expr4001 astOperand2 (@expr4002 ) ; }
1347: else { if (@expr1073745827 this@expr3995 ==@expr1073745828 astParent (@expr3993 ) .@expr4001 astOperand2 (@expr4002 ) ) {
1348: return astParent (@expr3993 ) .@expr3998 astOperand1 (@expr3999 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745835 !@expr1073745836 astParent (@expr4013 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745838 this@expr4015 ==@expr1073745840 astParent (@expr4013 ) .@expr4018 astOperand1 (@expr4019 ) ) {
1356: return astParent (@expr4013 ) .@expr4021 astOperand2 (@expr4022 ) ; }
1357: else { if (@expr1073745847 this@expr4015 ==@expr1073745848 astParent (@expr4013 ) .@expr4021 astOperand2 (@expr4022 ) ) {
1358: return astParent (@expr4013 ) .@expr4018 astOperand1 (@expr4019 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1410 ; ret@var1410 =@expr1073745855 this@expr1073745856 ;
1364: while (@expr1073745857 ret@var1410 .@expr4034 mImpl@var1411 .@expr4035 mAstParent@var1412 ) {
1365: ret@var1410 =@expr1073745860 ret@var1410 .@expr4034 mImpl@var1411 .@expr4035 mAstParent@var1412 ; }
1366: return ret@var1410 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1413 ; ret@var1413 =@expr1073745863 this@expr1073745864 ;
1371: while (@expr1073745865 ret@var1413 .@expr4042 mImpl@var1414 .@expr4043 mAstParent@var1415 ) {
1372: ret@var1413 =@expr1073745868 ret@var1413 .@expr4042 mImpl@var1414 .@expr4043 mAstParent@var1415 ; }
1373: return ret@var1413 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1397 .@expr1073745871 mAstOperand1@var1407 =@expr1073745872 mImpl@var1397 .@expr1073745873 mAstOperand2@var1408 =@expr1073745874 mImpl@var1397 .@expr1073745875 mAstParent@var1409 =@expr1073745876 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1397 .@expr4053 mValues@var1416 ;
1393: mImpl@var1397 .@expr4053 mValues@var1416 =@expr1073745879 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1417 = "" ) const {
1397: std ::@expr1073745880 string ret@var1418 ;
1398: if (@expr1073745881 mImpl@var1397 .@expr4058 mAstOperand1@var1407 ) {
1399: ret@var1418 =@expr1073745883 mImpl@var1397 .@expr4058 mAstOperand1@var1407 .@expr1073745885 astString (@expr1073745886 sep@var1417 ) ; }
1400: if (@expr1073745887 mImpl@var1397 .@expr4064 mAstOperand2@var1408 ) {
1401: ret@var1418 +=@expr1073745889 mImpl@var1397 .@expr4064 mAstOperand2@var1408 .@expr1073745891 astString (@expr1073745892 sep@var1417 ) ; }
1402: return ret@var1418 +@expr1073745893 sep@var1417 +@expr1073745894 mStr@var1391 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1419 , bool xml@var1420 , const std :: vector < std :: string > & fileNames@var1421 , std :: ostream & out@var1422 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1423 , std :: ostream & out@var1424 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1425 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1426 ) const {
1419: mImpl@var1397 .@expr1073745895 mCpp11init@var1427 =@expr1073745896 cpp11init@var1426 ?@expr1073745897 TokenImpl ::@expr4074 Cpp11init ::@expr1073745899 CPP11INIT :@expr1073745900 TokenImpl ::@expr4074 Cpp11init ::@expr1073745902 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1397 .@expr1073745903 mCpp11init@var1427 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1445 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1446 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1447 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1448 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1449 ( nullptr ) , num@var1450 ( 0 ) , known@var1451 ( true ) { }
62:
63: const Token * tok@var1449 ;
64: long long num@var1450 ;
65: bool known@var1451 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1452 ;
72: const Scope * classScope@var1453 ;
73: const Scope * enclosingScope@var1454 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1455 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1457 ( nullptr ) , nameTok@var1458 ( nullptr ) , access@var1459 ( AccessControl :: Public ) , isVirtual@var1460 ( false ) { }
82:
83: std :: string name@var1456 ;
84: const Type * type@var1457 ;
85: const Token * nameTok@var1458 ;
86: AccessControl access@var1459 ;
87: bool isVirtual@var1460 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1461 ) const {
90: return this@expr1073745904 .@expr1073745905 type@var1457 <@expr1073745906 rhs@var1461 .@expr1073745907 type@var1462 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1463 ( nullptr ) , nameEnd@var1464 ( nullptr ) , type@var1465 ( nullptr ) { }
97:
98: const Token * nameStart@var1463 ;
99: const Token * nameEnd@var1464 ;
100: const Type * type@var1465 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1466 ;
104: std :: vector < FriendInfo > friendList@var1467 ;
105:
106: const Token * typeStart@var1468 ;
107: const Token * typeEnd@var1469 ;
108: long long sizeOf@var1470 ;
109:
110: Type ( const Token * classDef_@var1471 = nullptr , const Scope * classScope_@var1472 = nullptr , const Scope * enclosingScope_@var1473 = nullptr ) :
111: classDef@var1452 ( classDef_@var1471 ) ,
112: classScope@var1453 ( classScope_@var1472 ) ,
113: enclosingScope@var1454 ( enclosingScope_@var1473 ) ,
114: needInitialization@var1455 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1468 ( nullptr ) ,
116: typeEnd@var1469 ( nullptr ) ,
117: sizeOf@var1470 ( 0 ) {
118: if (@expr1073745908 classDef_@var1471 &&@expr1073745909 classDef_@var1471 .@expr4086 str (@expr4087 ) ==@expr1073745912 "enum" ) {
119: needInitialization@var1455 =@expr1073745913 NeedInitialization ::@expr1073745914 True ; }
120: else { if (@expr1073745915 classDef_@var1471 &&@expr1073745916 classDef_@var1471 .@expr4086 str (@expr4087 ) ==@expr1073745919 "using" ) {
121: typeStart@var1468 =@expr1073745920 classDef@var1452 .@expr1073745921 tokAt (@expr1073745922 3 ) ;
122: typeEnd@var1469 =@expr1073745923 typeStart@var1468 ;
123: while (@expr1073745924 typeEnd@var1469 .@expr4101 next (@expr4102 ) &&@expr1073745927 typeEnd@var1469 .@expr4101 next (@expr4102 ) .@expr1073745930 str (@expr1073745931 ) !=@expr1073745932 ";" ) {
124: typeEnd@var1469 =@expr1073745933 typeEnd@var1469 .@expr4101 next (@expr4102 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1452 ?@expr1073745936 classDef@var1452 .@expr1073745937 str (@expr1073745938 ) :@expr1073745939 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1452 &&@expr1073745940 classDef@var1452 .@expr1073745941 str (@expr1073745942 ) ==@expr1073745943 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1474 , const Token * tok1@var1475 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1476 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1477 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1478 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1479 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1480 ) : scope@var1481 ( scope_@var1480 ) , name@var1482 ( nullptr ) , value@var1483 ( 0 ) , start@var1484 ( nullptr ) , end@var1485 ( nullptr ) , value_known@var1486 ( false ) { }
167: const Scope * scope@var1481 ;
168: const Token * name@var1482 ;
169: long long value@var1483 ;
170: const Token * start@var1484 ;
171: const Token * end@var1485 ;
172: bool value_known@var1486 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous4 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1487 ) const {
204: return (@expr4120 (@expr4120 mFlags@var1523 &@expr1073745946 flag_@var1487 ) !=@expr1073745947 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1488 , bool state_@var1489 ) {
213: mFlags@var1523 =@expr1073745948 state_@var1489 ?@expr1073745949 mFlags@var1523 |@expr1073745950 flag_@var1488 :@expr1073745951 mFlags@var1523 &@expr1073745952 ~@expr1073745953 flag_@var1488 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1490 , bool * isContainer@var1491 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1492 , const Token * start_@var1493 , const Token * end_@var1494 ,
226: int index_@var1495 , AccessControl access_@var1496 , const Type * type_@var1497 ,
227: const Scope * scope_@var1498 , const Settings * settings@var1499 )
228: : mNameToken@var1518 ( name_@var1492 ) ,
229: mTypeStartToken@var1519 ( start_@var1493 ) ,
230: mTypeEndToken@var1520 ( end_@var1494 ) ,
231: mIndex@var1521 ( index_@var1495 ) ,
232: mAccess@var1522 ( access_@var1496 ) ,
233: mFlags@var1523 ( 0 ) ,
234: mType@var1524 ( type_@var1497 ) ,
235: mScope@var1525 ( scope_@var1498 ) ,
236: mValueType@var1526 ( nullptr ) {
237: evaluate (@expr1073745954 settings@var1499 ) ;
238: }
239:
240: Variable ( const Token * name_@var1500 , const std :: string & clangType@var1501 , const Token * typeStart@var1502 ,
241: const Token * typeEnd@var1503 , int index_@var1504 , AccessControl access_@var1505 ,
242: const Type * type_@var1506 , const Scope * scope_@var1507 ) ;
243:
244: Variable ( const Variable & var@var1508 , const Scope * scope@var1509 ) ;
245:
246: Variable ( const Variable & var@var1510 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1511 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1518 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1519 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1520 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745955 mNameToken@var1518 ) {
300: return mNameToken@var1518 .@expr1073745956 str (@expr1073745957 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745958 mNameToken@var1518 ) {
312: return mNameToken@var1518 .@expr1073745959 varId (@expr1073745960 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1521 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1522 ==@expr1073745961 AccessControl ::@expr1073745962 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1522 ==@expr1073745963 AccessControl ::@expr1073745964 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1522 ==@expr1073745965 AccessControl ::@expr1073745966 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1522 ==@expr1073745967 AccessControl ::@expr1073745968 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1522 ==@expr1073745969 AccessControl ::@expr1073745970 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1522 ==@expr1073745971 AccessControl ::@expr1073745972 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745974 mAccess@var1522 ==@expr1073745975 AccessControl ::@expr1073745976 Local@expr1073745973 ) &&@expr1073745977 !@expr1073745978 isExtern (@expr1073745979 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745980 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745981 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745982 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745983 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745984 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1522 ==@expr1073745985 AccessControl ::@expr1073745986 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745987 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745988 fIsArray ) &&@expr1073745989 !@expr1073745990 getFlag (@expr1073745991 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745992 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745993 ) &&@expr1073745994 getFlag (@expr1073745995 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745996 fIsArray ) ||@expr1073745997 getFlag (@expr1073745998 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745999 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073746000 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073746001 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073746002 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1524 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1524 ?@expr1073746003 mType@var1524 .@expr1073746004 classScope@var1529 :@expr1073746005 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1525 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1527 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1512 ) const {
550: return mDimensions@var1527 [@expr1073746006 index_@var1512 ] .@expr1073746007 num@var2457 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1513 ) const {
558: return mDimensions@var1527 [@expr1073746008 index_@var1513 ] .@expr1073746009 known@var2458 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073746010 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073746011 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073746012 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1514 ) const {
602: return isStlType (@expr1073746013 ) &&@expr1073746014 stlType@var1514 ==@expr1073746015 mTypeStartToken@var1519 .@expr1073746016 strAt (@expr1073746017 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1515 ) const {
616: return isStlType (@expr1073746018 ) &&@expr1073746019 stlTypes@var1515 .@expr1073746020 find (@expr1073746021 mTypeStartToken@var1519 .@expr1073746022 strAt (@expr1073746023 2 ) ) !=@expr1073746024 stlTypes@var1515 .@expr1073746025 end (@expr1073746026 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073746027 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr4204 ) &&@expr1073746029 type (@expr4204 ) .@expr1073746031 isEnumType (@expr1073746032 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073746033 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1526 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1516 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1522 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1517 ) {
660: mType@var1524 =@expr1073746034 t@var1517 ;
661: }
662:
663:
664: const Token * mNameToken@var1518 ;
665:
666:
667: const Token * mTypeStartToken@var1519 ;
668:
669:
670: const Token * mTypeEndToken@var1520 ;
671:
672:
673: int mIndex@var1521 ;
674:
675:
676: AccessControl mAccess@var1522 ;
677:
678:
679: unsigned int mFlags@var1523 ;
680:
681:
682: const Type * mType@var1524 ;
683:
684:
685: const Scope * mScope@var1525 ;
686:
687: ValueType * mValueType@var1526 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1527 ;
691:
692:
693: void evaluate ( const Settings * settings@var1528 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous5 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1530 ) const {
735: return (@expr4211 (@expr4211 mFlags@var1579 &@expr1073746037 flag@var1530 ) !=@expr1073746038 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1531 , bool state@var1532 ) {
744: mFlags@var1579 =@expr1073746039 state@var1532 ?@expr1073746040 mFlags@var1579 |@expr1073746041 flag@var1531 :@expr1073746042 mFlags@var1579 &@expr1073746043 ~@expr1073746044 flag@var1531 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1533 , const Token * tok@var1534 , const Scope * scope@var1535 , const Token * tokDef@var1536 , const Token * tokArgDef@var1537 ) ;
751: Function ( const Token * tokenDef@var1538 , const std :: string & clangType@var1539 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1549 .@expr1073746045 str (@expr1073746046 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1557 .@expr1073746047 size (@expr1073746048 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1557 .@expr1073746049 size (@expr1073746050 ) -@expr1073746051 initArgCount@var1558 ;
764: }
765: const Variable * getArgumentVar ( int num@var1540 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1558 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1541 , const Scope * scope@var1542 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1543 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1544 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1559 ==@expr1073746052 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1559 ==@expr1073746053 eConstructor ||@expr1073746054
785: type@var1559 ==@expr1073746055 eCopyConstructor ||@expr1073746056
786: type@var1559 ==@expr1073746057 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1559 ==@expr1073746058 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1549 .@expr1073746059 isAttributeConstructor (@expr1073746060 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1549 .@expr1073746061 isAttributeDestructor (@expr1073746062 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1549 .@expr1073746063 isAttributePure (@expr1073746064 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1549 .@expr1073746065 isAttributeConst (@expr1073746066 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1549 .@expr1073746067 isAttributeNoreturn (@expr1073746068 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1549 .@expr1073746069 isAttributeNothrow (@expr1073746070 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1549 .@expr1073746071 isAttributeNodiscard (@expr1073746072 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073746073 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073746074 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073746075 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073746076 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073746077 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073746078 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073746079 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073746080 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073746081 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073746082 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073746083 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073746084 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073746085 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073746086 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073746087 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073746088 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073746089 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073746090 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073746091 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073746092 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073746093 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073746094 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1545 ) {
881: setFlag (@expr1073746095 fHasBody , state@var1545 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073746096 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073746097 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1546 ) {
891: setFlag (@expr1073746098 fIsEscapeFunction , state@var1546 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073746099 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1547 ) {
898: setFlag (@expr1073746100 fIsConstexpr , state@var1547 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1548 ) const ;
901:
902: const Token * tokenDef@var1549 ;
903: const Token * argDef@var1550 ;
904: const Token * token@var1551 ;
905: const Token * arg@var1552 ;
906: const Token * retDef@var1553 ;
907: const :: Type * retType@var1554 ;
908: const Scope * functionScope@var1555 ;
909: const Scope * nestedIn@var1556 ;
910: std :: list < Variable > argumentList@var1557 ;
911: int initArgCount@var1558 ;
912: Type type@var1559 ;
913: AccessControl access@var1560 ;
914: const Token * noexceptArg@var1561 ;
915: const Token * throwArg@var1562 ;
916: const Token * templateDef@var1563 ;
917: const Token * functionPointerUsage@var1564 ;
918:
919: bool argsMatch ( const Scope * scope@var1565 , const Token * first@var1566 , const Token * second@var1567 , const std :: string & path@var1568 , int path_length@var1569 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1570 , bool unknown@var1571 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1572 , bool unknown@var1573 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1574 , bool unknown@var1575 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1576 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073746101 this@expr1073746102 .@expr1073746103 hasTrailingReturnType (@expr1073746104 ) ) {
931: return Token ::@expr1073746105 findmatch (@expr1073746106 retDef@var1553 , "{|;" ) ;
932: } else {
933: return tokenDef@var1549 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1577 , bool * foundAllBaseClasses@var1578 ) const ;
946:
947: unsigned int mFlags@var1579 ;
948:
949: void isInline ( bool state@var1580 ) {
950: setFlag (@expr1073746107 fIsInline , state@var1580 ) ;
951: }
952: void isConst ( bool state@var1581 ) {
953: setFlag (@expr1073746108 fIsConst , state@var1581 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1582 ) {
956: setFlag (@expr1073746109 fHasVirtualSpecifier , state@var1582 ) ;
957: }
958: void isPure ( bool state@var1583 ) {
959: setFlag (@expr1073746110 fIsPure , state@var1583 ) ;
960: }
961: void isStatic ( bool state@var1584 ) {
962: setFlag (@expr1073746111 fIsStatic , state@var1584 ) ;
963: }
964: void isStaticLocal ( bool state@var1585 ) {
965: setFlag (@expr1073746112 fIsStaticLocal , state@var1585 ) ;
966: }
967: void isExtern ( bool state@var1586 ) {
968: setFlag (@expr1073746113 fIsExtern , state@var1586 ) ;
969: }
970: void isFriend ( bool state@var1587 ) {
971: setFlag (@expr1073746114 fIsFriend , state@var1587 ) ;
972: }
973: void isExplicit ( bool state@var1588 ) {
974: setFlag (@expr1073746115 fIsExplicit , state@var1588 ) ;
975: }
976: void isDefault ( bool state@var1589 ) {
977: setFlag (@expr1073746116 fIsDefault , state@var1589 ) ;
978: }
979: void isDelete ( bool state@var1590 ) {
980: setFlag (@expr1073746117 fIsDelete , state@var1590 ) ;
981: }
982: void isNoExcept ( bool state@var1591 ) {
983: setFlag (@expr1073746118 fIsNoExcept , state@var1591 ) ;
984: }
985: void isThrow ( bool state@var1592 ) {
986: setFlag (@expr1073746119 fIsThrow , state@var1592 ) ;
987: }
988: void isOperator ( bool state@var1593 ) {
989: setFlag (@expr1073746120 fIsOperator , state@var1593 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1594 ) {
992: setFlag (@expr1073746121 fHasLvalRefQual , state@var1594 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1595 ) {
995: setFlag (@expr1073746122 fHasRvalRefQual , state@var1595 ) ;
996: }
997: void isVariadic ( bool state@var1596 ) {
998: setFlag (@expr1073746123 fIsVariadic , state@var1596 ) ;
999: }
1000: void isVolatile ( bool state@var1597 ) {
1001: setFlag (@expr1073746124 fIsVolatile , state@var1597 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1598 ) {
1004: return setFlag (@expr1073746125 fHasTrailingReturnType , state@var1598 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1599 ) {
1007: setFlag (@expr1073746126 fIsInlineKeyword , state@var1599 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1600 , const Scope * scope@var1601 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1602 ;
1019: const Scope * scope@var1603 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1604 , const Token * classDef_@var1605 , const Scope * nestedIn_@var1606 ) ;
1025: Scope ( const SymbolDatabase * check_@var1607 , const Token * classDef_@var1608 , const Scope * nestedIn_@var1609 , ScopeType type_@var1610 , const Token * start_@var1611 ) ;
1026:
1027: const SymbolDatabase * check@var1612 ;
1028: std :: string className@var1613 ;
1029: const Token * classDef@var1614 ;
1030: const Token * bodyStart@var1615 ;
1031: const Token * bodyEnd@var1616 ;
1032: std :: list < Function > functionList@var1617 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1618 ;
1034: std :: list < Variable > varlist@var1619 ;
1035: const Scope * nestedIn@var1620 ;
1036: std :: list < Scope * > nestedList@var1621 ;
1037: int numConstructors@var1622 ;
1038: int numCopyOrMoveConstructors@var1623 ;
1039: std :: list < UsingInfo > usingList@var1624 ;
1040: ScopeType type@var1625 ;
1041: Type * definedType@var1626 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1627 ;
1043: std :: vector < const Token * > bodyStartList@var1628 ;
1044:
1045:
1046: const Scope * functionOf@var1629 ;
1047: Function * function@var1630 ;
1048:
1049:
1050: const Token * enumType@var1631 ;
1051: bool enumClass@var1632 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1633 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1634 ) {
1056: bodyStart@var1615 =@expr1073746127 start@var1634 ;
1057: bodyEnd@var1616 =@expr1073746128 start@var1634 ?@expr1073746129 start@var1634 .@expr1073746130 link (@expr1073746131 ) :@expr1073746132 nullptr ;
1058: if (@expr1073746133 start@var1634 ) {
1059: bodyStartList@var1628 .@expr1073746134 push_back (@expr1073746135 start@var1634 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1613 .@expr1073746136 size (@expr1073746137 ) >@expr1073746138 9 &&@expr1073746139 className@var1613 .@expr1073746140 compare (@expr1073746141 0 , 9 , "Anonymous" ) ==@expr1073746142 0 &&@expr1073746143 std ::@expr1073746144 isdigit (@expr1073746145 className@var1613 [@expr1073746146 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1635 ) const {
1068: for (@expr1073746147 const Enumerator &@expr1073746148 i@var1636 :@expr1073746149 enumeratorList@var1633 ) {
1069: if (@expr1073746150 i@var1636 .@expr1073746151 name@var1637 .@expr1073746152 str (@expr1073746153 ) ==@expr1073746154 name@var1635 ) {
1070: return &@expr1073746155 i@var1636 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1638 ) const {
1076: if (@expr1073746156 !@expr1073746157 outer@var1638 ) {
1077: return false ; }
1078: if (@expr1073746158 outer@var1638 ==@expr1073746159 this@expr1073746160 ) {
1079: return true ; }
1080: const Scope * parent@var1639 ; parent@var1639 =@expr1073746161 nestedIn@var1620 ;
1081: while (@expr1073746162 outer@var1638 !=@expr1073746163 parent@var1639 &&@expr1073746164 parent@var1639 ) {
1082: parent@var1639 =@expr1073746165 parent@var1639 .@expr1073746166 nestedIn@var1640 ; }
1083: if (@expr1073746167 parent@var1639 &&@expr1073746168 parent@var1639 ==@expr1073746169 outer@var1638 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1641 ) {
1089: while (@expr1073746170 scope@var1641 ) {
1090: if (@expr1073746171 scope@var1641 .@expr1073746172 type@var1642 ==@expr1073746173 Scope ::@expr1073746174 eFunction ) {
1091: break ; }
1092: scope@var1641 =@expr1073746175 scope@var1641 .@expr1073746176 nestedIn@var1643 ;
1093: }
1094: if (@expr1073746177 !@expr1073746178 scope@var1641 ) {
1095: return nullptr ; }
1096: return scope@var1641 .@expr1073746179 function@var1644 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073746180 type@var1625 ==@expr1073746181 eClass ||@expr1073746182 type@var1625 ==@expr1073746183 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073746184 type@var1625 ==@expr1073746185 eClass ||@expr1073746186 type@var1625 ==@expr1073746187 eStruct ||@expr1073746188 type@var1625 ==@expr1073746189 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1625 !=@expr1073746190 eClass &&@expr1073746191 type@var1625 !=@expr1073746192 eStruct &&@expr1073746193 type@var1625 !=@expr1073746194 eUnion &&@expr1073746195 type@var1625 !=@expr1073746196 eGlobal &&@expr1073746197 type@var1625 !=@expr1073746198 eNamespace &&@expr1073746199 type@var1625 !=@expr1073746200 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1625 ==@expr1073746201 Scope ::@expr4378 ScopeType ::@expr1073746203 eFor ||@expr1073746204 type@var1625 ==@expr1073746205 Scope ::@expr4378 ScopeType ::@expr1073746207 eWhile ||@expr1073746208 type@var1625 ==@expr1073746209 Scope ::@expr4378 ScopeType ::@expr1073746211 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073746212 type@var1625 ==@expr1073746213 eIf ||@expr1073746214 type@var1625 ==@expr1073746215 eElse ||@expr1073746216
1117: type@var1625 ==@expr1073746217 eFor ||@expr1073746218 type@var1625 ==@expr1073746219 eWhile ||@expr1073746220 type@var1625 ==@expr1073746221 eDo ||@expr1073746222
1118: type@var1625 ==@expr1073746223 eSwitch ||@expr1073746224 type@var1625 ==@expr1073746225 eUnconditional ||@expr1073746226
1119: type@var1625 ==@expr1073746227 eTry ||@expr1073746228 type@var1625 ==@expr1073746229 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1645 , bool requireConst@var1646 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1647 , bool isC@var1648 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1649 ) {
1135: return const_cast < Scope *@expr4406 > (@expr1073746231 const_cast < const Scope *@expr4406 > (@expr1073746233 this@expr1073746234 ) .@expr1073746235 findRecordInNestedList (@expr1073746236 name@var1649 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1650 ) const ;
1139: Type * findType ( const std :: string & name@var1651 ) {
1140: return const_cast < Type *@expr4413 > (@expr1073746238 const_cast < const Scope *@expr4413 > (@expr1073746240 this@expr1073746241 ) .@expr1073746242 findType (@expr1073746243 name@var1651 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1652 ) ;
1148:
1149: void addVariable ( const Token * token_@var1653 , const Token * start_@var1654 ,
1150: const Token * end_@var1655 , AccessControl access_@var1656 , const Type * type_@var1657 ,
1151: const Scope * scope_@var1658 , const Settings * settings@var1659 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1660 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1661 ) {
1159: functionList@var1617 .@expr1073746244 push_back (@expr1073746245 func@var1661 ) ;
1160:
1161: const Function * back@var1662 ; back@var1662 =@expr1073746246 &@expr1073746247 functionList@var1617 .@expr1073746248 back (@expr1073746249 ) ;
1162:
1163: functionMap@var1618 .@expr1073746250 insert (@expr1073746251 make_pair (@expr1073746252 back@var1662 .@expr1073746253 tokenDef@var1663 .@expr1073746254 str (@expr1073746255 ) , back@var1662 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1664 , AccessControl varaccess@var1665 , const Settings * settings@var1666 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1667 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1668 , bool isCpp@var1669 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1670 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1671 , const Token * & vartok@var1672 , const Token * & typetok@var1673 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1674 , int args@var1675 , std :: vector < const Function * > & matches@var1676 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1677 , const Token * start@var1678 , const Token * end@var1679 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1680 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1681 ;
1239: int bits@var1682 ;
1240: int pointer@var1683 ;
1241: int constness@var1684 ;
1242: Reference reference@var1685 ; reference@var1685 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1686 ;
1245: const :: Type * smartPointerType@var1687 ;
1246: const Token * smartPointerTypeToken@var1688 ;
1247: const Library :: SmartPointer * smartPointer@var1689 ;
1248: const Library :: Container * container@var1690 ;
1249:
1250: const Token * containerTypeToken@var1691 ;
1251:
1252: std :: string originalTypeName@var1692 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1680 ( UNKNOWN_SIGN ) ,
1257: type@var1681 ( UNKNOWN_TYPE ) ,
1258: bits@var1682 ( 0 ) ,
1259: pointer@var1683 ( 0U ) ,
1260: constness@var1684 ( 0U ) ,
1261: typeScope@var1686 ( nullptr ) ,
1262: smartPointerType@var1687 ( nullptr ) ,
1263: smartPointerTypeToken@var1688 ( nullptr ) ,
1264: smartPointer@var1689 ( nullptr ) ,
1265: container@var1690 ( nullptr ) ,
1266: containerTypeToken@var1691 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1693 , enum Type t@var1694 , int p@var1695 )
1269: : sign@var1680 ( s@var1693 ) ,
1270: type@var1681 ( t@var1694 ) ,
1271: bits@var1682 ( 0 ) ,
1272: pointer@var1683 ( p@var1695 ) ,
1273: constness@var1684 ( 0U ) ,
1274: typeScope@var1686 ( nullptr ) ,
1275: smartPointerType@var1687 ( nullptr ) ,
1276: smartPointerTypeToken@var1688 ( nullptr ) ,
1277: smartPointer@var1689 ( nullptr ) ,
1278: container@var1690 ( nullptr ) ,
1279: containerTypeToken@var1691 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1696 , enum Type t@var1697 , int p@var1698 , int c@var1699 )
1282: : sign@var1680 ( s@var1696 ) ,
1283: type@var1681 ( t@var1697 ) ,
1284: bits@var1682 ( 0 ) ,
1285: pointer@var1683 ( p@var1698 ) ,
1286: constness@var1684 ( c@var1699 ) ,
1287: typeScope@var1686 ( nullptr ) ,
1288: smartPointerType@var1687 ( nullptr ) ,
1289: smartPointerTypeToken@var1688 ( nullptr ) ,
1290: smartPointer@var1689 ( nullptr ) ,
1291: container@var1690 ( nullptr ) ,
1292: containerTypeToken@var1691 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1700 , enum Type t@var1701 , int p@var1702 , int c@var1703 , const std :: string & otn@var1704 )
1295: : sign@var1680 ( s@var1700 ) ,
1296: type@var1681 ( t@var1701 ) ,
1297: bits@var1682 ( 0 ) ,
1298: pointer@var1683 ( p@var1702 ) ,
1299: constness@var1684 ( c@var1703 ) ,
1300: typeScope@var1686 ( nullptr ) ,
1301: smartPointerType@var1687 ( nullptr ) ,
1302: smartPointerTypeToken@var1688 ( nullptr ) ,
1303: smartPointer@var1689 ( nullptr ) ,
1304: container@var1690 ( nullptr ) ,
1305: containerTypeToken@var1691 ( nullptr ) ,
1306: originalTypeName@var1692 ( otn@var1704 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1705 , const Settings * settings@var1706 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1707 , bool longType@var1708 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1709 , const ValueType * func@var1710 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1711 , const Variable * callVar@var1712 , const Variable * funcVar@var1713 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746256 type@var1681 >=@expr1073746257 ValueType ::@expr1073746258 Type ::@expr1073746259 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746260 type@var1681 >=@expr1073746261 ValueType ::@expr4438 Type ::@expr1073746263 BOOL &&@expr1073746264 type@var1681 <=@expr1073746265 ValueType ::@expr4438 Type ::@expr1073746267 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746268 type@var1681 >=@expr1073746269 ValueType ::@expr4446 Type ::@expr1073746271 FLOAT &&@expr1073746272 type@var1681 <=@expr1073746273 ValueType ::@expr4446 Type ::@expr1073746275 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1714 , const Settings * settings@var1715 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1686 &&@expr1073746276 typeScope@var1686 .@expr1073746277 type@var1716 ==@expr1073746278 Scope ::@expr1073746279 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1717 , bool p@var1718 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1719 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1720 , const Settings * settings@var1721 , ErrorLogger * errorLogger@var1722 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1723 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1724 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1725 ;
1359:
1360:
1361: std :: list < Type > typeList@var1726 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1727 , const Token * typeTok@var1728 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1729 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1730 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1731 , const Scope * startScope@var1732 , bool lookOutside@var1733 = false ) const ;
1382: Type * findType ( const Token * startTok@var1734 , Scope * startScope@var1735 , bool lookOutside@var1736 = false ) const {
1383: return const_cast < Type *@expr4456 > (@expr1073746281 this@expr1073746282 .@expr1073746283 findType (@expr1073746284 startTok@var1734 , const_cast < const Scope *@expr4456 > (@expr1073746286 startScope@var1735 ) , lookOutside@var1736 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1737 , const Scope * startScope@var1738 ) const ;
1387: Scope * findScope ( const Token * tok@var1739 , Scope * startScope@var1740 ) const {
1388: return const_cast < Scope *@expr4463 > (@expr1073746288 this@expr1073746289 .@expr1073746290 findScope (@expr1073746291 tok@var1739 , const_cast < const Scope *@expr4463 > (@expr1073746293 startScope@var1740 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1741 ) const {
1392: return varid@var1741 <@expr1073746294 mVariableList@var1798 .@expr1073746295 size (@expr1073746296 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1742 ) const {
1396: return mVariableList@var1798 .@expr1073746297 at (@expr1073746298 varId@var1742 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1798 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1743 , const std :: string & type@var1744 , const std :: string & msg@var1745 ) const ;
1407:
1408: void printOut ( const char * title@var1746 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1747 , const char * indent@var1748 ) const ;
1410: void printXml ( std :: ostream & out@var1749 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1750 , Token * tokens@var1751 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1752 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1753 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1754 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1755 , const Token * * tok@var1756 , const Token * argStart@var1757 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1758 , const Token * tok@var1759 , const Token * argStart@var1760 , const Token * funcStart@var1761 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1762 , const Token * & tok@var1763 , const Token * argStart@var1764 , const Token * funcStart@var1765 ) ;
1469: void addNewFunction ( Scope * * scope@var1766 , const Token * * tok@var1767 ) ;
1470: bool isFunction ( const Token * tok@var1768 , const Scope * outerScope@var1769 , const Token * * funcStart@var1770 , const Token * * argStart@var1771 , const Token * * declEnd@var1772 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1773 , const Scope * startScope@var1774 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1775 , const Scope * scope@var1776 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1777 , const Scope * ns@var1778 , const std :: string & path@var1779 , int path_length@var1780 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1781 , const Token * typeTok@var1782 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1783 , const Token * vartok@var1784 , Token * membertok@var1785 , const Variable * membervar@var1786 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1787 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1788 ) const ;
1485:
1486: void setValueType ( Token * tok@var1789 , const ValueType & valuetype@var1790 ) ;
1487: void setValueType ( Token * tok@var1791 , const Variable & var@var1792 ) ;
1488: void setValueType ( Token * tok@var1793 , const Enumerator & enumerator@var1794 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1795 ;
1491: const Settings * mSettings@var1796 ;
1492: ErrorLogger * mErrorLogger@var1797 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1798 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1799 ;
1499:
1500: bool mIsCpp@var1800 ;
1501: ValueType :: Sign mDefaultSignedness@var1801 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1802 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1803 , const TFunc & visitor@var1804 )
52: {
53: if (@expr1073746299 !@expr1073746300 ast@var1803 ) {
54: return ; }
55:
56: std ::@expr1073746301 stack < T *@expr4478 , std ::@expr1073746303 vector < T *@expr4478 > > tokens@var1805 ;
57: T * tok@var1806 ; tok@var1806 =@expr1073746305 ast@var1803 ;
58: do {
59: ChildrenToVisit c@var1807 ; c@var1807 =@expr1073746306 visitor@var1804 (@expr1073746307 tok@var1806 ) ;
60:
61: if (@expr1073746308 c@var1807 ==@expr1073746309 ChildrenToVisit ::@expr1073746310 done ) {
62: break ; }
63: if (@expr1073746311 c@var1807 ==@expr1073746312 ChildrenToVisit ::@expr1073746313 op2 ||@expr1073746314 c@var1807 ==@expr4491 ChildrenToVisit ::@expr4492 op1_and_op2 ) {
64: T * t2@var1808 ; t2@var1808 =@expr1073746317 tok@var1806 .@expr1073746318 astOperand2 (@expr1073746319 ) ;
65: if (@expr1073746320 t2@var1808 ) {
66: tokens@var1805 .@expr4497 push (@expr1073746322 t2@var1808 ) ; }
67: }
68: if (@expr1073746323 c@var1807 ==@expr1073746324 ChildrenToVisit ::@expr1073746325 op1 ||@expr1073746326 c@var1807 ==@expr4491 ChildrenToVisit ::@expr4492 op1_and_op2 ) {
69: T * t1@var1809 ; t1@var1809 =@expr1073746329 tok@var1806 .@expr1073746330 astOperand1 (@expr1073746331 ) ;
70: if (@expr1073746332 t1@var1809 ) {
71: tokens@var1805 .@expr4497 push (@expr1073746334 t1@var1809 ) ; }
72: }
73:
74: if (@expr1073746335 tokens@var1805 .@expr1073746336 empty (@expr1073746337 ) ) {
75: break ; }
76:
77: tok@var1806 =@expr1073746338 tokens@var1805 .@expr1073746339 top (@expr1073746340 ) ;
78: tokens@var1805 .@expr1073746341 pop (@expr1073746342 ) ;
79: } while (@expr1073746343 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1810 , const std :: function < bool ( const Token * ) > & pred@var1811 ) ;
83: const Token * findExpression ( const int exprid@var1812 ,
84: const Token * start@var1813 ,
85: const Token * end@var1814 ,
86: const std :: function < bool ( const Token * ) > & pred@var1815 ) ;
87: const Token * findExpression ( const Token * start@var1816 , const int exprid@var1817 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1818 , const char * op@var1819 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1820 , const char * op@var1821 ) ;
91:
92: int astCount ( const Token * tok@var1822 , const char * op@var1823 , int depth@var1824 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1825 , const Token * tok@var1826 ) ;
95:
96: bool astHasVar ( const Token * tok@var1827 , int varid@var1828 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1829 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1830 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1831 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1832 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1833 , bool unknown@var1834 ) ;
107: bool astIsUnsigned ( const Token * tok@var1835 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1836 , bool unknown@var1837 ) ;
110:
111: bool astIsBool ( const Token * tok@var1838 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1839 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1840 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1841 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1842 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1843 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1844 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1845 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1846 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1847 , const std :: string & comp@var1848 , const std :: string & rhs@var1849 , const Token * * vartok@var1850 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1851 ) ;
140:
141: bool isTemporary ( bool cpp@var1852 , const Token * tok@var1853 , const Library * library@var1854 , bool unknown@var1855 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1856 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1857 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1858 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1859 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1860 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1861 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1862 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1863 ) ;
155: const Token * getParentLifetime ( bool cpp@var1864 , const Token * tok@var1865 , const Library * library@var1866 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1867 ) ;
158: bool astIsRHS ( const Token * tok@var1868 ) ;
159:
160: Token * getCondTok ( Token * tok@var1869 ) ;
161: const Token * getCondTok ( const Token * tok@var1870 ) ;
162:
163: Token * getInitTok ( Token * tok@var1871 ) ;
164: const Token * getInitTok ( const Token * tok@var1872 ) ;
165:
166: Token * getStepTok ( Token * tok@var1873 ) ;
167: const Token * getStepTok ( const Token * tok@var1874 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1875 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1876 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1877 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1878 ,
180: int * const varid@var1879 ,
181: bool * const knownInitValue@var1880 ,
182: long long * const initValue@var1881 ,
183: bool * const partialCond@var1882 ,
184: long long * const stepValue@var1883 ,
185: long long * const lastValue@var1884 ) ;
186:
187: bool precedes ( const Token * tok1@var1885 , const Token * tok2@var1886 ) ;
188: bool succeeds ( const Token * tok1@var1887 , const Token * tok2@var1888 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1889 , bool onVar@var1890 = true , int depth@var1891 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1892 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1893 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1894 ,
198: bool temporary@var1895 = true ,
199: bool inconclusive@var1896 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1897 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1898 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1899 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1900 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1901 , bool macro@var1902 , const Token * tok1@var1903 , const Token * tok2@var1904 , const Library & library@var1905 , bool pure@var1906 , bool followVar@var1907 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1908 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1909 , const Token * const tok2@var1910 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1911 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1912 , bool cpp@var1913 , const Token * const cond1@var1914 , const Token * const cond2@var1915 , const Library & library@var1916 , bool pure@var1917 , bool followVar@var1918 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1919 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1920 , const Token * const tok1@var1921 , const Token * const tok2@var1922 , const Library & library@var1923 , bool pure@var1924 , bool followVar@var1925 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1926 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1927 , const Library & library@var1928 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1929 , const Library & library@var1930 , bool pure@var1931 , bool cpp@var1932 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1933 , const Token * tok@var1934 , bool checkArrayAccess@var1935 = false , bool checkReference@var1936 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1937 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1938 , const Library * library@var1939 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1940 ,
238: const Library * library@var1941 = nullptr ,
239: const Token * * unknownFunc@var1942 = nullptr ,
240: bool functionScope@var1943 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1944 ,
244: const Variable * var@var1945 ,
245: Scope :: ScopeType type@var1946 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1947 , int & argn@var1948 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1949 , int & argn@var1950 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1951 , int argnr@var1952 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1953 , int indirect@var1954 , int varid@var1955 , const Settings * settings@var1956 , bool * inconclusive@var1957 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1958 , int indirect@var1959 , const Settings * settings@var1960 , bool * inconclusive@var1961 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1962 , const Token * end@var1963 , const int exprid@var1964 , bool globalvar@var1965 , const Settings * settings@var1966 , bool cpp@var1967 , int depth@var1968 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1969 , const Token * end@var1970 , int indirect@var1971 , const int exprid@var1972 , bool globalvar@var1973 , const Settings * settings@var1974 , bool cpp@var1975 , int depth@var1976 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1977 , int indirect@var1978 , const Settings * settings@var1979 , bool cpp@var1980 , int depth@var1981 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1982 , const Settings * settings@var1983 , bool cpp@var1984 , int depth@var1985 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1986 ,
283: const Token * end@var1987 ,
284: int indirect@var1988 ,
285: std :: vector < const Variable * > vars@var1989 ,
286: const Settings * settings@var1990 ,
287: bool cpp@var1991 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1992 , int indirect@var1993 , const Settings * settings@var1994 , bool cpp@var1995 ) ;
290: bool isThisChanged ( const Token * start@var1996 , const Token * end@var1997 , int indirect@var1998 , const Settings * settings@var1999 , bool cpp@var2000 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var2001 , const Token * end@var2002 , int indirect@var2003 , const int exprid@var2004 , bool globalvar@var2005 , const Settings * settings@var2006 , bool cpp@var2007 , int depth@var2008 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var2009 , const Token * end@var2010 , int indirect@var2011 , const int exprid@var2012 , bool globalvar@var2013 , const Settings * settings@var2014 , bool cpp@var2015 , int depth@var2016 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var2017 ,
296: const Token * start@var2018 ,
297: const Token * end@var2019 ,
298: const Settings * settings@var2020 ,
299: bool cpp@var2021 ,
300: int depth@var2022 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var2023 ,
303: const Token * tok@var2024 ,
304: int indirect@var2025 ,
305: bool globalvar@var2026 ,
306: const Settings * settings@var2027 ,
307: bool cpp@var2028 ,
308: int depth@var2029 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var2030 , int varid@var2031 , bool * inconclusive@var2032 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var2033 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var2034 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var2035 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var2036 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var2037 ) ;
330:
331: int getArgumentPos ( const Variable * var@var2038 , const Function * f@var2039 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var2040 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var2041 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var2042 ) ;
346: Token * findLambdaEndToken ( Token * first@var2043 ) ;
347:
348: bool isLikelyStream ( bool cpp@var2044 , const Token * stream@var2045 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var2046 , const Token * op@var2047 ) ;
356:
357: bool isCPPCast ( const Token * tok@var2048 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var2049 , const char * skipMatch@var2050 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var2051 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var2052 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var2053 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var2054 , const Library & library@var2055 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var2056 ) ;
371:
372: bool isNullOperand ( const Token * expr@var2057 ) ;
373:
374: bool isGlobalData ( const Token * expr@var2058 , bool cpp@var2059 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var2060 , const Library & library@var2061 ) : mCpp@var2094 ( cpp@var2060 ) , mLibrary@var2095 ( library@var2061 ) , mWhat@var2096 ( What :: Reassign ) , mValueFlowKnown@var2098 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var2062 , const Token * lhs@var2063 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var2064 , const Token * startToken@var2065 , const Token * endToken@var2066 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var2067 , const Token * startToken@var2068 , const Token * endToken@var2069 ) ;
404:
405: struct KnownAndToken {
406: bool known@var2070 ;
407: const Token * token@var2071 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var2072 , const Token * startToken@var2073 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var2074 , bool * localOut@var2075 = nullptr , bool * unknownVarIdOut@var2076 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var2077 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var2078 ;
420: explicit Result ( Type type@var2079 ) : type@var2078 ( type@var2079 ) , token@var2082 ( nullptr ) { }
421: Result ( Type type@var2080 , const Token * token@var2081 ) : type@var2078 ( type@var2080 ) , token@var2082 ( token@var2081 ) { }
422: const Token * token@var2082 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var2083 , const Token * startToken@var2084 , const Token * endToken@var2085 ) ;
426: struct Result checkRecursive ( const Token * expr@var2086 , const Token * startToken@var2087 , const Token * endToken@var2088 , const std :: set < int > & exprVarIds@var2089 , bool local@var2090 , bool inInnerClass@var2091 , int depth@var2092 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var2093 ) const ;
430:
431: const bool mCpp@var2094 ;
432: const Library & mLibrary@var2095 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var2096 ;
434: std :: vector < KnownAndToken > mValueFlow@var2097 ;
435: bool mValueFlowKnown@var2098 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var2099 ) ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var2100 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var2101 ) {
47: mSettings@var2136 =@expr1073746344 settings@var2101 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var2136 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var2138 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var2139 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var2102 ) ;
72:
73: void addtoken ( const std :: string & str@var2103 , const int lineno@var2104 , const int column@var2105 , const int fileno@var2106 , bool split@var2107 = false ) ;
74: void addtoken ( const std :: string & str@var2108 , const Token * locationTok@var2109 ) ;
75:
76: void addtoken ( const Token * tok@var2110 , const int lineno@var2111 , const int column@var2112 , const int fileno@var2113 ) ;
77: void addtoken ( const Token * tok@var2114 , const Token * locationTok@var2115 ) ;
78: void addtoken ( const Token * tok@var2116 ) ;
79:
80: static void insertTokens ( Token * dest@var2117 , const Token * src@var2118 , int n@var2119 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var2120 , const Token * first@var2121 , const Token * last@var2122 , bool one_line@var2123 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var2124 , const std :: string & file0@var2125 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var2126 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var2127 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var2133 .@expr1073746345 front@var2140 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var2133 .@expr1073746346 front@var2140 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var2133 .@expr1073746347 back@var2141 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var2133 .@expr1073746348 back@var2141 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var2134 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var2128 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var2129 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var2130 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var2131 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var2132 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var2133 ;
206:
207:
208: std :: vector < std :: string > mFiles@var2134 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var2135 ;
212:
213:
214: const Settings * mSettings@var2136 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var2137 ;
217:
218:
219: bool mIsC@var2138 ;
220: bool mIsCpp@var2139 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var2142 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var2143 ;
67: mutable int mVarId@var2144 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var2145 ) ;
73: bool hasVariable ( const std :: string & varname@var2146 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var2147 ) const {
75: return mVariableId@var2142 .@expr1073746349 find (@expr1073746350 varname@var2147 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var2142 .@expr1073746351 end (@expr1073746352 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var2142 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073746353 mVarId@var2144 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var2148 , ErrorLogger * errorLogger@var2149 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var2150 ) {
95: mTimerResults@var2270 =@expr1073746354 tr@var2150 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var2248 .@expr1073746355 isC (@expr1073746356 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var2248 .@expr1073746357 isCPP (@expr1073746358 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var2151 , bool * unknown@var2152 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var2153 , const std :: string & FileName@var2154 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var2155 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var2156 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var2157 ,
142: const char FileName@var2158 [ ] ,
143: const std :: string & configuration@var2159 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var2160 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var2161 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var2162 , const Token * end@var2163 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var2164 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var2165 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var2166 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var2167 , const Token * const tokEnd@var2168 , const bool only_k_r_fpar@var2169 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var2170 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var2171 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var2172 , bool commandWithCondition@var2173 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var2174 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var2175 , Token * * _tok2@var2176 , Token * * _tok3@var2177 , std :: string & value@var2178 , int & valueVarId@var2179 , bool & valueIsPointer@var2180 , bool floatvar@var2181 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var2182 , Token * tok3@var2183 , int varid@var2184 , const std :: string & structname@var2185 , std :: string & value@var2186 , int valueVarId@var2187 , bool valueIsPointer@var2188 , const Token * const valueToken@var2189 , int indentlevel@var2190 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var2191 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var2192 , const std :: string & endsWith@var2193 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var2194 , const std :: string & endsWith@var2195 , bool cpp@var2196 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var2197 ) {
585: mPreprocessor@var2271 =@expr1073746359 preprocessor@var2197 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var2271 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var2198 , const Token * end@var2199 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var2200 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var2201 , const std :: string & code@var2202 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var2203 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var2204 , const std :: string & what@var2205 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var2206 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var2207 , const std :: string & msg@var2208 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var2209 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var2210 , const std :: string & macroName@var2211 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var2212 , const Token * end@var2213 , bool allowSemicolon@var2214 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var2215 , const Severity :: SeverityType severity@var2216 , const std :: string & id@var2217 , const std :: string & msg@var2218 , bool inconclusive@var2219 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var2220 , Severity :: SeverityType severity@var2221 , const std :: string & id@var2222 , const std :: string & msg@var2223 , bool inconclusive@var2224 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var2225 , const Token * name@var2226 , const Token * typeDef@var2227 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var2228 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var2229 ,
821: const VariableMap & variableMap@var2230 ,
822: const int scopeStartVarId@var2231 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var2232 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var2233 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var2234 ,
827: int * varId@var2235 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var2236 ,
830: Token * const startToken@var2237 ,
831: const Token * const endToken@var2238 ,
832: const std :: map < std :: string , int > & varlist@var2239 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var2240 ,
834: int * varId_@var2241 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var2242 ) ;
849:
850: bool operatorEnd ( const Token * tok@var2243 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var2269 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var2244 ) {
861: mSettings@var2255 =@expr1073746360 settings@var2244 ;
862: list@var2248 .@expr1073746361 setSettings (@expr1073746362 settings@var2244 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var2257 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var2245 ) const ;
877:
878: void dump ( std :: ostream & out@var2246 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var2247 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var2267 ;
888: }
889:
|
892:
893: TokenList list@var2248 ;
894:
895: const Token * tokens ( ) const {
896: return list@var2248 .@expr1073746363 front (@expr1073746364 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var2249 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var2250 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var2251 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var2252 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var2255 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var2253 , bool inOperator@var2254 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073746365 mVarId@var2267 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var2255 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var2256 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var2257 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var2258 ;
973:
974:
975:
976: std :: string mConfiguration@var2259 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var2260 ;
980:
981: struct TypedefInfo {
982: std :: string name@var2261 ;
983: std :: string filename@var2262 ;
984: int lineNumber@var2263 ;
985: int column@var2264 ;
986: bool used@var2265 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var2266 ;
989:
990:
991: int mVarId@var2267 ;
992:
993:
994: int mUnnamedCount@var2268 ;
995:
|
999:
1000: bool mCodeWithTemplates@var2269 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var2270 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var2271 ;
1013: } ;

##file cppcheck-2.8/lib/checkfunctions.cpp

1:
|
41:
42: namespace {
43: CheckFunctions instance@var2272 ;
44: }
45:
46: static const CWE CWE252@var2273 ( 252U ) ;
47: static const CWE CWE477@var2274 ( 477U ) ;
48: static const CWE CWE758@var2275 ( 758U ) ;
49: static const CWE CWE628@var2276 ( 628U ) ;
50: static const CWE CWE686@var2277 ( 686U ) ;
51: static const CWE CWE687@var2278 ( 687U ) ;
52: static const CWE CWE688@var2279 ( 688U ) ;
53:
54: void CheckFunctions :: checkProhibitedFunctions ( )
55: {
56: const bool checkAlloca@var2280 =@expr1073746366 mSettings@var29 .@expr4543 severity@var2442 .@expr4544 isEnabled (@expr1073746369 Severity ::@expr4546 warning ) &&@expr1073746371 (@expr1073746372 (@expr1073746373 mSettings@var29 .@expr4550 standards@var2443 .@expr4551 c@var2444 >=@expr1073746376 Standards ::@expr1073746377 C99 &&@expr1073746378 mTokenizer@var28 .@expr4555 isC (@expr4556 ) ) ||@expr1073746381 mSettings@var29 .@expr4550 standards@var2443 .@expr4559 cpp@var2445 >=@expr1073746384 Standards ::@expr1073746385 CPP11 ) ;
57:
58: const SymbolDatabase * symbolDatabase@var2281 ; symbolDatabase@var2281 =@expr1073746386 mTokenizer@var28 .@expr1073746387 getSymbolDatabase (@expr1073746388 ) ;
59: for (@expr1073746389 const Scope *@expr4566 scope@var2282 :@expr1073746391 symbolDatabase@var2281 .@expr1073746392 functionScopes@var2283 ) {
60: for (@expr1073746393 const Token *@expr4566 tok@var2284 =@expr1073746395 scope@var2282 .@expr1073746396 bodyStart@var2285 ; tok@var2284 !=@expr1073746397 scope@var2282 .@expr1073746398 bodyEnd@var2286 ; tok@var2284 =@expr1073746399 tok@var2284 .@expr1073746400 next (@expr1073746401 ) ) {
61: if (@expr1073746402 !@expr1073746403 Token ::@expr1073746404 Match (@expr1073746405 tok@var2284 , "%name% (" ) &&@expr1073746406 tok@var2284 .@expr1073746407 varId (@expr1073746408 ) ==@expr1073746409 0 ) {
62: continue ; }
63:
64: if (@expr1073746410 checkAlloca@var2280 &&@expr1073746411 Token ::@expr1073746412 simpleMatch (@expr1073746413 tok@var2284 , "alloca (" ) &&@expr1073746414 (@expr1073746415 !@expr1073746416 tok@var2284 .@expr4593 function (@expr4594 ) ||@expr1073746419 tok@var2284 .@expr4593 function (@expr4594 ) .@expr1073746422 nestedIn@var2459 .@expr1073746423 type@var2460 ==@expr1073746424 Scope ::@expr1073746425 eGlobal ) ) {
65: if (@expr1073746426 mTokenizer@var28 .@expr4555 isC (@expr4556 ) ) {
66: if (@expr1073746429 mSettings@var29 .@expr4550 standards@var2443 .@expr4551 c@var2444 >@expr1073746432 Standards ::@expr1073746433 C89 ) {
67: reportError (@expr1073746434 tok@var2284 , Severity ::@expr4546 warning , "allocaCalled" ,
68: "$symbol:alloca\nObsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\nThe obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."
69:
70:
71:
72: ) ; }
73: } else {
74: reportError (@expr1073746436 tok@var2284 , Severity ::@expr4546 warning , "allocaCalled" ,
75: "$symbol:alloca\nObsolete function 'alloca' called.\nThe obsolete function 'alloca' is called. In C++11 and later it is recommended to use std::array<> or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."
76:
77:
78:
79: ) ; }
80: } else {
81: if (@expr1073746438 tok@var2284 .@expr4593 function (@expr4594 ) &&@expr1073746441 tok@var2284 .@expr4593 function (@expr4594 ) .@expr1073746444 hasBody (@expr1073746445 ) ) {
82: continue ; }
83:
84: const Library ::@expr1073746446 WarnInfo * wi@var2287 ; wi@var2287 =@expr1073746447 mSettings@var29 .@expr1073746448 library@var2446 .@expr1073746449 getWarnInfo (@expr1073746450 tok@var2284 ) ;
85: if (@expr1073746451 wi@var2287 ) {
86: if (@expr1073746452 mSettings@var29 .@expr4543 severity@var2442 .@expr4544 isEnabled (@expr1073746455 wi@var2287 .@expr4632 severity@var2288 ) &&@expr1073746457 mSettings@var29 .@expr4550 standards@var2443 .@expr4551 c@var2444 >=@expr1073746460 wi@var2287 .@expr4637 standards@var2289 .@expr1073746462 c@var2290 &&@expr1073746463 mSettings@var29 .@expr4550 standards@var2443 .@expr4559 cpp@var2445 >=@expr1073746466 wi@var2287 .@expr4637 standards@var2289 .@expr1073746468 cpp@var2291 ) {
87: const std ::@expr1073746469 string daca@var2292 =@expr1073746470 mSettings@var29 .@expr1073746471 daca@var2447 ?@expr1073746472 "prohibited" :@expr1073746473 "" ;
88: reportError (@expr1073746474 tok@var2284 , wi@var2287 .@expr4632 severity@var2288 , daca@var2292 +@expr1073746476 tok@var2284 .@expr1073746477 str (@expr1073746478 ) +@expr1073746479 "Called" , wi@var2287 .@expr1073746480 message@var2293 , CWE477@var2274 , Certainty ::@expr1073746481 normal ) ;
89: }
90: }
91: }
92: }
93: }
94: }
95:
|
98:
99: void CheckFunctions :: invalidFunctionUsage ( )
100: {
101: const SymbolDatabase * symbolDatabase@var2294 ; symbolDatabase@var2294 =@expr1073746482 mTokenizer@var28 .@expr1073746483 getSymbolDatabase (@expr1073746484 ) ;
102: for (@expr1073746485 const Scope *@expr4662 scope@var2295 :@expr1073746487 symbolDatabase@var2294 .@expr1073746488 functionScopes@var2296 ) {
103: for (@expr1073746489 const Token *@expr4662 tok@var2297 =@expr1073746491 scope@var2295 .@expr1073746492 bodyStart@var2298 .@expr1073746493 next (@expr1073746494 ) ; tok@var2297 !=@expr1073746495 scope@var2295 .@expr1073746496 bodyEnd@var2299 ; tok@var2297 =@expr1073746497 tok@var2297 .@expr1073746498 next (@expr1073746499 ) ) {
104: if (@expr1073746500 !@expr1073746501 Token ::@expr4678 Match (@expr1073746503 tok@var2297 , "%name% ( !!)" ) ) {
105: continue ; }
106: const Token * const functionToken@var2300 ; functionToken@var2300 =@expr1073746504 tok@var2297 ;
107: const std ::@expr1073746505 vector < const Token *@expr4662 > arguments@var2301 =@expr1073746507 getArguments (@expr1073746508 tok@var2297 ) ;
108: for (@expr1073746509 int argnr@var2302 =@expr1073746510 1 ; argnr@var2302 <=@expr1073746511 arguments@var2301 .@expr1073746512 size (@expr1073746513 ) ; ++@expr1073746514 argnr@var2302 ) {
109: const Token * const argtok@var2303 ; argtok@var2303 =@expr1073746515 arguments@var2301 [@expr1073746516 argnr@var2302 -@expr1073746517 1 ] ;
110:
111:
112: const ValueFlow ::@expr1073746518 Value * invalidValue@var2304 ; invalidValue@var2304 =@expr1073746519 argtok@var2303 .@expr1073746520 getInvalidValue (@expr1073746521 functionToken@var2300 , argnr@var2302 , mSettings@var29 ) ;
113: if (@expr1073746522 invalidValue@var2304 ) {
114: invalidFunctionArgError (@expr1073746523 argtok@var2303 , functionToken@var2300 .@expr1073746524 next (@expr1073746525 ) .@expr1073746526 astOperand1 (@expr1073746527 ) .@expr1073746528 expressionString (@expr1073746529 ) , argnr@var2302 , invalidValue@var2304 , mSettings@var29 .@expr4706 library@var2446 .@expr4707 validarg (@expr4708 functionToken@var2300 , argnr@var2302 ) ) ;
115: }
116:
117: if (@expr1073746533 astIsBool (@expr1073746534 argtok@var2303 ) ) {
118:
119: if (@expr1073746535 mSettings@var29 .@expr4706 library@var2446 .@expr1073746537 isboolargbad (@expr1073746538 functionToken@var2300 , argnr@var2302 ) ) {
120: invalidFunctionArgBoolError (@expr1073746539 argtok@var2303 , functionToken@var2300 .@expr4716 str (@expr4717 ) , argnr@var2302 ) ; }
121:
122:
123: else { if (@expr1073746542 !@expr1073746543 mSettings@var29 .@expr4706 library@var2446 .@expr4721 isIntArgValid (@expr1073746546 functionToken@var2300 , argnr@var2302 , 0 ) ) {
124: invalidFunctionArgError (@expr4723 argtok@var2303 , functionToken@var2300 .@expr4716 str (@expr4717 ) , argnr@var2302 , nullptr , mSettings@var29 .@expr4706 library@var2446 .@expr4707 validarg (@expr4708 functionToken@var2300 , argnr@var2302 ) ) ; }
125: else { if (@expr1073746553 !@expr1073746554 mSettings@var29 .@expr4706 library@var2446 .@expr4721 isIntArgValid (@expr1073746557 functionToken@var2300 , argnr@var2302 , 1 ) ) {
126: invalidFunctionArgError (@expr4723 argtok@var2303 , functionToken@var2300 .@expr4716 str (@expr4717 ) , argnr@var2302 , nullptr , mSettings@var29 .@expr4706 library@var2446 .@expr4707 validarg (@expr4708 functionToken@var2300 , argnr@var2302 ) ) ; } } }
127: }
128:
129: if (@expr1073746564 mSettings@var29 .@expr4706 library@var2446 .@expr1073746566 isargstrz (@expr1073746567 functionToken@var2300 , argnr@var2302 ) ) {
130: if (@expr1073746568 Token ::@expr4678 Match (@expr1073746570 argtok@var2303 , "& %var% !![" ) &&@expr1073746571 argtok@var2303 .@expr4748 next (@expr4749 ) &&@expr1073746574 argtok@var2303 .@expr4748 next (@expr4749 ) .@expr4753 valueType (@expr4754 ) ) {
131: const ValueType * valueType@var2305 ; valueType@var2305 =@expr1073746579 argtok@var2303 .@expr4748 next (@expr4749 ) .@expr4753 valueType (@expr4754 ) ;
132: const Variable * variable@var2306 ; variable@var2306 =@expr1073746584 argtok@var2303 .@expr4748 next (@expr4749 ) .@expr1073746587 variable (@expr1073746588 ) ;
133: if (@expr1073746589 valueType@var2305 .@expr1073746590 type@var2307 ==@expr1073746591 ValueType ::@expr1073746592 Type ::@expr1073746593 CHAR &&@expr1073746594 !@expr1073746595 variable@var2306 .@expr1073746596 isArray (@expr1073746597 ) &&@expr1073746598 !@expr1073746599 variable@var2306 .@expr1073746600 isGlobal (@expr1073746601 ) &&@expr1073746602
134: (@expr1073746603 !@expr1073746604 argtok@var2303 .@expr4748 next (@expr4749 ) .@expr1073746607 hasKnownValue (@expr1073746608 ) ||@expr1073746609 argtok@var2303 .@expr4748 next (@expr4749 ) .@expr1073746612 getValue (@expr1073746613 0 ) ==@expr1073746614 nullptr ) ) {
135: invalidFunctionArgStrError (@expr1073746615 argtok@var2303 , functionToken@var2300 .@expr4716 str (@expr4717 ) , argnr@var2302 ) ;
136: }
137: }
138: }
139: }
140: }
141: }
142: }
143:
144: void CheckFunctions :: invalidFunctionArgError ( const Token * tok@var2308 , const std :: string & functionName@var2309 , int argnr@var2310 , const ValueFlow :: Value * invalidValue@var2311 , const std :: string & validstr@var2312 )
145: {
146: std ::@expr1073746618 ostringstream errmsg@var2313 ;
147: errmsg@var2313 <<@expr1073746619 "$symbol:" <<@expr1073746620 functionName@var2309 <<@expr1073746621 '\n' ;
148: if (@expr1073746622 invalidValue@var2311 &&@expr1073746623 invalidValue@var2311 .@expr4800 condition@var2314 ) {
149: errmsg@var2313 <<@expr1073746625 ValueFlow ::@expr1073746626 eitherTheConditionIsRedundant (@expr1073746627 invalidValue@var2311 .@expr4800 condition@var2314 )
150: <<@expr1073746629 " or $symbol() argument nr " <<@expr1073746630 argnr@var2310 <<@expr1073746631 " can have invalid value." ; }
151: else {
152: errmsg@var2313 <<@expr1073746632 "Invalid $symbol() argument nr " <<@expr1073746633 argnr@var2310 <<@expr1073746634 '.' ; }
153: if (@expr4811 invalidValue@var2311 ) {
154: errmsg@var2313 <<@expr1073746636 " The value is " <<@expr1073746637 std ::@expr1073746638 setprecision (@expr1073746639 10 ) <<@expr1073746640 (@expr1073746641 invalidValue@var2311 .@expr1073746642 isIntValue (@expr1073746643 ) ?@expr1073746644 invalidValue@var2311 .@expr1073746645 intvalue@var2315 :@expr1073746646 invalidValue@var2311 .@expr1073746647 floatValue@var2316 ) <<@expr1073746648 " but the valid values are '" <<@expr1073746649 validstr@var2312 <<@expr1073746650 "'." ; }
155: else {
156: errmsg@var2313 <<@expr1073746651 " The value is 0 or 1 (boolean) but the valid values are '" <<@expr1073746652 validstr@var2312 <<@expr1073746653 "'." ; }
157: if (@expr4811 invalidValue@var2311 ) {
158: reportError (@expr1073746655 getErrorPath (@expr1073746656 tok@var2308 , invalidValue@var2311 , "Invalid argument" ) ,
159: invalidValue@var2311 .@expr1073746657 errorSeverity (@expr1073746658 ) &&@expr1073746659 invalidValue@var2311 .@expr1073746660 isKnown (@expr1073746661 ) ?@expr1073746662 Severity ::@expr4839 error :@expr1073746664 Severity ::@expr1073746665 warning ,
160: "invalidFunctionArg" ,
161: errmsg@var2313 .@expr4842 str (@expr4843 ) ,
162: CWE628@var2276 ,
163: invalidValue@var2311 .@expr1073746668 isInconclusive (@expr1073746669 ) ?@expr1073746670 Certainty ::@expr1073746671 inconclusive :@expr1073746672 Certainty ::@expr4849 normal ) ; }
164: else {
165: reportError (@expr1073746674 tok@var2308 ,
166: Severity ::@expr4839 error ,
167: "invalidFunctionArg" ,
168: errmsg@var2313 .@expr4842 str (@expr4843 ) ,
169: CWE628@var2276 ,
170: Certainty ::@expr4849 normal ) ; }
171: }
172:
173: void CheckFunctions :: invalidFunctionArgBoolError ( const Token * tok@var2317 , const std :: string & functionName@var2318 , int argnr@var2319 )
174: {
175: std ::@expr1073746679 ostringstream errmsg@var2320 ;
176: errmsg@var2320 <<@expr1073746680 "$symbol:" <<@expr1073746681 functionName@var2318 <<@expr1073746682 '\n' ;
177: errmsg@var2320 <<@expr1073746683 "Invalid $symbol() argument nr " <<@expr1073746684 argnr@var2319 <<@expr1073746685 ". A non-boolean value is required." ;
178: reportError (@expr1073746686 tok@var2317 , Severity ::@expr1073746687 error , "invalidFunctionArgBool" , errmsg@var2320 .@expr1073746688 str (@expr1073746689 ) , CWE628@var2276 , Certainty ::@expr1073746690 normal ) ;
179: }
180:
181: void CheckFunctions :: invalidFunctionArgStrError ( const Token * tok@var2321 , const std :: string & functionName@var2322 , int argnr@var2323 )
182: {
183: std ::@expr1073746691 ostringstream errmsg@var2324 ;
184: errmsg@var2324 <<@expr1073746692 "$symbol:" <<@expr1073746693 functionName@var2322 <<@expr1073746694 '\n' ;
185: errmsg@var2324 <<@expr1073746695 "Invalid $symbol() argument nr " <<@expr1073746696 argnr@var2323 <<@expr1073746697 ". A nul-terminated string is required." ;
186: reportError (@expr1073746698 tok@var2321 , Severity ::@expr1073746699 error , "invalidFunctionArgStr" , errmsg@var2324 .@expr1073746700 str (@expr1073746701 ) , CWE628@var2276 , Certainty ::@expr1073746702 normal ) ;
187: }
188:
|
191:
192: void CheckFunctions :: checkIgnoredReturnValue ( )
193: {
194: if (@expr1073746703 !@expr1073746704 mSettings@var29 .@expr4881 severity@var2442 .@expr4882 isEnabled (@expr4883 Severity ::@expr4884 warning ) &&@expr1073746709 !@expr1073746710 mSettings@var29 .@expr4881 severity@var2442 .@expr4882 isEnabled (@expr4889 Severity ::@expr4890 style ) ) {
195: return ; }
196:
197: const SymbolDatabase * symbolDatabase@var2325 ; symbolDatabase@var2325 =@expr1073746715 mTokenizer@var28 .@expr1073746716 getSymbolDatabase (@expr1073746717 ) ;
198: for (@expr1073746718 const Scope *@expr4895 scope@var2326 :@expr1073746720 symbolDatabase@var2325 .@expr1073746721 functionScopes@var2327 ) {
199: for (@expr1073746722 const Token *@expr4895 tok@var2328 =@expr1073746724 scope@var2326 .@expr1073746725 bodyStart@var2329 .@expr1073746726 next (@expr1073746727 ) ; tok@var2328 !=@expr1073746728 scope@var2326 .@expr1073746729 bodyEnd@var2330 ; tok@var2328 =@expr1073746730 tok@var2328 .@expr4907 next (@expr4908 ) ) {
200:
201: if (@expr1073746733 Token ::@expr4910 Match (@expr1073746735 tok@var2328 , "%var%|(|,|return {" ) ) {
202: tok@var2328 =@expr1073746736 tok@var2328 .@expr1073746737 linkAt (@expr1073746738 1 ) ; }
203: else { if (@expr1073746739 Token ::@expr4910 Match (@expr1073746741 tok@var2328 , "[(<]" ) &&@expr1073746742 tok@var2328 .@expr4919 link (@expr4920 ) ) {
204: tok@var2328 =@expr1073746745 tok@var2328 .@expr4919 link (@expr4920 ) ; } }
205:
206: if (@expr1073746748 tok@var2328 .@expr1073746749 varId (@expr1073746750 ) ||@expr1073746751 !@expr1073746752 Token ::@expr4910 Match (@expr1073746754 tok@var2328 , "%name% (" ) ||@expr1073746755 tok@var2328 .@expr1073746756 isKeyword (@expr1073746757 ) ) {
207: continue ; }
208:
209: const Token * parent@var2331 ; parent@var2331 =@expr1073746758 tok@var2328 .@expr4907 next (@expr4908 ) .@expr1073746761 astParent (@expr1073746762 ) ;
210: while (@expr1073746763 Token ::@expr4910 Match (@expr1073746765 parent@var2331 , "%cop%" ) ) {
211: if (@expr1073746766 Token ::@expr4910 Match (@expr1073746768 parent@var2331 , "<<|>>" ) &&@expr1073746769 !@expr1073746770 parent@var2331 .@expr4947 astParent (@expr4948 ) ) {
212: break ; }
213: parent@var2331 =@expr1073746773 parent@var2331 .@expr4947 astParent (@expr4948 ) ;
214: }
215: if (@expr1073746776 parent@var2331 ) {
216: continue ; }
217:
218: if (@expr1073746777 !@expr1073746778 tok@var2328 .@expr4955 scope (@expr4956 ) .@expr1073746781 isExecutable (@expr1073746782 ) ) {
219: tok@var2328 =@expr1073746783 tok@var2328 .@expr4955 scope (@expr4956 ) .@expr1073746786 bodyEnd@var2461 ;
220: continue ;
221: }
222:
223: if (@expr1073746787 (@expr1073746788 !@expr1073746789 tok@var2328 .@expr4966 function (@expr4967 ) ||@expr1073746792 !@expr1073746793 Token ::@expr4910 Match (@expr1073746795 tok@var2328 .@expr4966 function (@expr4967 ) .@expr1073746798 retDef@var2462 , "void %name%" ) ) &&@expr1073746799
224: !@expr1073746800 $(@expr1073746801 $(@expr1073746802 !@expr1073746803 tok@var2328 .@expr4907 next (@expr4908 ) .@expr4982 astOperand1 (@expr4983 ) $) $&&@expr1073746808 $wrongData $(@expr1073746809 tok@var2328 $, "!tok->next()->astOperand1()" $) $) ) {
225: const Library ::@expr1073746810 UseRetValType retvalTy@var2332 =@expr1073746811 mSettings@var29 .@expr1073746812 library@var2446 .@expr1073746813 getUseRetValType (@expr1073746814 tok@var2328 ) ;
226: if (@expr1073746815 mSettings@var29 .@expr4881 severity@var2442 .@expr4882 isEnabled (@expr4883 Severity ::@expr4884 warning ) &&@expr1073746820
227: (@expr1073746821 (@expr1073746822 retvalTy@var2332 ==@expr1073746823 Library ::@expr5000 UseRetValType ::@expr1073746825 DEFAULT ) ||@expr1073746826
228: (@expr1073746827 tok@var2328 .@expr4966 function (@expr4967 ) &&@expr1073746830 tok@var2328 .@expr4966 function (@expr4967 ) .@expr1073746833 isAttributeNodiscard (@expr1073746834 ) ) ) ) {
229: ignoredReturnValueError (@expr1073746835 tok@var2328 , tok@var2328 .@expr4907 next (@expr4908 ) .@expr4982 astOperand1 (@expr4983 ) .@expr5016 expressionString (@expr5017 ) ) ; }
230: else { if (@expr1073746842 mSettings@var29 .@expr4881 severity@var2442 .@expr4882 isEnabled (@expr4889 Severity ::@expr4890 style ) &&@expr1073746847
231: retvalTy@var2332 ==@expr1073746848 Library ::@expr5000 UseRetValType ::@expr1073746850 ERROR_CODE ) {
232: ignoredReturnErrorCode (@expr1073746851 tok@var2328 , tok@var2328 .@expr4907 next (@expr4908 ) .@expr4982 astOperand1 (@expr4983 ) .@expr5016 expressionString (@expr5017 ) ) ; } }
233: }
234: }
235: }
236: }
237:
238: void CheckFunctions :: ignoredReturnValueError ( const Token * tok@var2333 , const std :: string & function@var2334 )
239: {
240: reportError (@expr1073746858 tok@var2333 , Severity ::@expr1073746859 warning , "ignoredReturnValue" ,
241: "$symbol:" +@expr1073746860 function@var2334 +@expr1073746861 "\nReturn value of function $symbol() is not used." , CWE252@var2273 , Certainty ::@expr1073746862 normal ) ;
242: }
243:
244: void CheckFunctions :: ignoredReturnErrorCode ( const Token * tok@var2335 , const std :: string & function@var2336 )
245: {
246: reportError (@expr1073746863 tok@var2335 , Severity ::@expr1073746864 style , "ignoredReturnErrorCode" ,
247: "$symbol:" +@expr1073746865 function@var2336 +@expr1073746866 "\nError code from the return value of function $symbol() is not used." , CWE252@var2273 , Certainty ::@expr1073746867 normal ) ;
248: }
249:
|
252:
253: static const Token * checkMissingReturnScope ( const Token * tok@var2337 , const Library & library@var2338 ) ;
254:
255: void CheckFunctions :: checkMissingReturn ( )
256: {
257: const SymbolDatabase * symbolDatabase@var2339 ; symbolDatabase@var2339 =@expr1073746868 mTokenizer@var28 .@expr1073746869 getSymbolDatabase (@expr1073746870 ) ;
258: for (@expr1073746871 const Scope *@expr1073746872 scope@var2340 :@expr1073746873 symbolDatabase@var2339 .@expr1073746874 functionScopes@var2341 ) {
259: const Function * function@var2342 ; function@var2342 =@expr1073746875 scope@var2340 .@expr1073746876 function@var2343 ;
260: if (@expr1073746877 !@expr1073746878 function@var2342 ||@expr1073746879 !@expr1073746880 function@var2342 .@expr1073746881 hasBody (@expr1073746882 ) ) {
261: continue ; }
262: if (@expr1073746883 function@var2342 .@expr1073746884 name (@expr1073746885 ) ==@expr1073746886 "main" &&@expr1073746887 !@expr1073746888 (@expr1073746889 mSettings@var29 .@expr1073746890 standards@var2443 .@expr1073746891 c@var2444 <@expr1073746892 Standards ::@expr1073746893 C99 &&@expr1073746894 mTokenizer@var28 .@expr1073746895 isC (@expr1073746896 ) ) ) {
263: continue ; }
264: if (@expr1073746897 function@var2342 .@expr5074 type@var2344 !=@expr1073746899 Function ::@expr5076 Type ::@expr1073746901 eFunction &&@expr1073746902 function@var2342 .@expr5074 type@var2344 !=@expr1073746904 Function ::@expr5076 Type ::@expr1073746906 eOperatorEqual ) {
265: continue ; }
266: if (@expr1073746907 Token ::@expr1073746908 Match (@expr1073746909 function@var2342 .@expr5086 retDef@var2345 , "%name% (" ) &&@expr1073746911 function@var2342 .@expr5086 retDef@var2345 .@expr1073746913 isUpperCaseName (@expr1073746914 ) ) {
267: continue ; }
268: if (@expr1073746915 Function ::@expr1073746916 returnsVoid (@expr1073746917 function@var2342 , true ) ) {
269: continue ; }
270: const Token * errorToken@var2346 ; errorToken@var2346 =@expr1073746918 checkMissingReturnScope (@expr1073746919 scope@var2340 .@expr1073746920 bodyEnd@var2347 , mSettings@var29 .@expr1073746921 library@var2446 ) ;
271: if (@expr1073746922 errorToken@var2346 ) {
272: missingReturnError (@expr1073746923 errorToken@var2346 ) ; }
273: }
274: }
275:
276: static bool isForwardJump ( const Token * gotoToken@var2348 )
277: {
278: if (@expr1073746924 !@expr1073746925 Token ::@expr5102 Match (@expr1073746927 gotoToken@var2348 , "goto %name% ;" ) ) {
279: return false ; }
280: for (@expr1073746928 const Token *@expr1073746929 prev@var2349 =@expr1073746930 gotoToken@var2348 ; gotoToken@var2348 ; gotoToken@var2348 =@expr1073746931 gotoToken@var2348 .@expr1073746932 previous (@expr1073746933 ) ) {
281: if (@expr1073746934 Token ::@expr5102 Match (@expr1073746936 prev@var2349 , "%name% :" ) &&@expr1073746937 prev@var2349 .@expr5114 str (@expr5115 ) ==@expr1073746940 gotoToken@var2348 .@expr1073746941 next (@expr1073746942 ) .@expr1073746943 str (@expr1073746944 ) ) {
282: return true ; }
283: if (@expr1073746945 prev@var2349 .@expr5114 str (@expr5115 ) ==@expr1073746948 "{" &&@expr1073746949 prev@var2349 .@expr1073746950 scope (@expr1073746951 ) .@expr1073746952 type@var2463 ==@expr1073746953 Scope ::@expr1073746954 eFunction ) {
284: return false ; }
285: }
286: return false ;
287: }
288:
289: static const Token * checkMissingReturnScope ( const Token * tok@var2350 , const Library & library@var2351 )
290: {
291: const Token * lastStatement@var2352 ; lastStatement@var2352 =@expr1073746955 nullptr ;
292: while (@expr1073746956 (@expr1073746957 tok@var2350 =@expr1073746958 tok@var2350 .@expr1073746959 previous (@expr1073746960 ) ) !=@expr1073746961 nullptr ) {
293: if (@expr1073746962 tok@var2350 .@expr5139 str (@expr5140 ) ==@expr1073746965 ")" ) {
294: tok@var2350 =@expr1073746966 tok@var2350 .@expr5143 link (@expr5144 ) ; }
295: if (@expr1073746969 tok@var2350 .@expr5139 str (@expr5140 ) ==@expr1073746972 "{" ) {
296: return lastStatement@var2352 ?@expr1073746973 lastStatement@var2352 :@expr1073746974 tok@var2350 .@expr5151 next (@expr5152 ) ; }
297: if (@expr1073746977 tok@var2350 .@expr5139 str (@expr5140 ) ==@expr1073746980 "}" ) {
298: for (@expr1073746981 const Token *@expr5158 prev@var2353 =@expr1073746983 tok@var2350 .@expr5143 link (@expr5144 ) .@expr1073746986 previous (@expr1073746987 ) ; prev@var2353 &&@expr1073746988 prev@var2353 .@expr1073746989 scope (@expr1073746990 ) ==@expr1073746991 tok@var2350 .@expr5168 scope (@expr5169 ) &&@expr1073746994 !@expr1073746995 Token ::@expr5172 Match (@expr1073746997 prev@var2353 , "[;{}]" ) ; prev@var2353 =@expr1073746998 prev@var2353 .@expr1073746999 previous (@expr1073747000 ) ) {
299: if (@expr1073747001 prev@var2353 .@expr1073747002 isKeyword (@expr1073747003 ) &&@expr1073747004 Token ::@expr5172 Match (@expr1073747006 prev@var2353 , "return|throw" ) ) {
300: return nullptr ; }
301: if (@expr1073747007 prev@var2353 .@expr1073747008 str (@expr1073747009 ) ==@expr1073747010 "goto" &&@expr1073747011 !@expr1073747012 isForwardJump (@expr1073747013 prev@var2353 ) ) {
302: return nullptr ; }
303: }
304: if (@expr1073747014 tok@var2350 .@expr5168 scope (@expr5169 ) .@expr5193 type@var2463 ==@expr1073747018 Scope ::@expr5195 ScopeType ::@expr5196 eSwitch ) {
305:
306: bool hasDefault@var2354 ; hasDefault@var2354 =@expr1073747021 false ;
307: bool reachable@var2355 ; reachable@var2355 =@expr1073747022 false ;
308: for (@expr1073747023 const Token *@expr5158 switchToken@var2356 =@expr1073747025 tok@var2350 .@expr5143 link (@expr5144 ) .@expr1073747028 next (@expr1073747029 ) ; switchToken@var2356 !=@expr1073747030 tok@var2350 ; switchToken@var2356 =@expr1073747031 switchToken@var2356 .@expr1073747032 next (@expr1073747033 ) ) {
309: if (@expr1073747034 reachable@var2355 &&@expr1073747035 Token ::@expr5212 simpleMatch (@expr1073747037 switchToken@var2356 , "break ;" ) ) {
310: if (@expr1073747038 Token ::@expr5212 simpleMatch (@expr1073747040 switchToken@var2356 .@expr5217 previous (@expr5218 ) , "}" ) &&@expr1073747043 !@expr1073747044 checkMissingReturnScope (@expr1073747045 switchToken@var2356 .@expr5217 previous (@expr5218 ) , library@var2351 ) ) {
311: reachable@var2355 =@expr1073747048 false ; }
312: else {
313: return switchToken@var2356 ; }
314: }
315: if (@expr1073747049 switchToken@var2356 .@expr1073747050 isKeyword (@expr1073747051 ) &&@expr1073747052 Token ::@expr5172 Match (@expr1073747054 switchToken@var2356 , "return|throw" ) ) {
316: reachable@var2355 =@expr1073747055 false ; }
317: if (@expr1073747056 Token ::@expr5172 Match (@expr1073747058 switchToken@var2356 , "%name% (" ) &&@expr1073747059 library@var2351 .@expr1073747060 isnoreturn (@expr1073747061 switchToken@var2356 ) ) {
318: reachable@var2355 =@expr1073747062 false ; }
319: if (@expr1073747063 Token ::@expr5172 Match (@expr1073747065 switchToken@var2356 , "case|default" ) ) {
320: reachable@var2355 =@expr1073747066 true ; }
321: if (@expr1073747067 Token ::@expr5212 simpleMatch (@expr1073747069 switchToken@var2356 , "default :" ) ) {
322: hasDefault@var2354 =@expr1073747070 true ; }
323: else { if (@expr1073747071 switchToken@var2356 .@expr1073747072 str (@expr1073747073 ) ==@expr1073747074 "{" &&@expr1073747075 (@expr1073747076 switchToken@var2356 .@expr5253 scope (@expr5254 ) .@expr1073747079 isLoopScope (@expr1073747080 ) ||@expr1073747081 switchToken@var2356 .@expr5253 scope (@expr5254 ) .@expr1073747084 type@var2463 ==@expr1073747085 Scope ::@expr5195 ScopeType ::@expr5196 eSwitch ) ) {
324: switchToken@var2356 =@expr1073747088 switchToken@var2356 .@expr1073747089 link (@expr1073747090 ) ; } }
325: }
326: if (@expr1073747091 !@expr1073747092 hasDefault@var2354 ) {
327: return tok@var2350 .@expr5143 link (@expr5144 ) ; }
328: } else { if (@expr1073747095 tok@var2350 .@expr5168 scope (@expr5169 ) .@expr5193 type@var2463 ==@expr1073747099 Scope ::@expr5195 ScopeType ::@expr1073747101 eIf ) {
329: const Token * condition@var2357 ; condition@var2357 =@expr1073747102 tok@var2350 .@expr5168 scope (@expr5169 ) .@expr1073747105 classDef@var2464 .@expr1073747106 next (@expr1073747107 ) .@expr1073747108 astOperand2 (@expr1073747109 ) ;
330: if (@expr1073747110 condition@var2357 &&@expr1073747111 condition@var2357 .@expr1073747112 hasKnownIntValue (@expr1073747113 ) &&@expr1073747114 condition@var2357 .@expr1073747115 getKnownIntValue (@expr1073747116 ) ==@expr1073747117 1 ) {
331: return checkMissingReturnScope (@expr5294 tok@var2350 , library@var2351 ) ; }
332: return tok@var2350 ;
333: } else { if (@expr1073747119 tok@var2350 .@expr5168 scope (@expr5169 ) .@expr5193 type@var2463 ==@expr1073747123 Scope ::@expr5195 ScopeType ::@expr1073747125 eElse ) {
334: const Token * errorToken@var2358 ; errorToken@var2358 =@expr1073747126 checkMissingReturnScope (@expr5294 tok@var2350 , library@var2351 ) ;
335: if (@expr1073747128 errorToken@var2358 ) {
336: return errorToken@var2358 ; }
337: tok@var2350 =@expr1073747129 tok@var2350 .@expr5143 link (@expr5144 ) ;
338: if (@expr1073747132 Token ::@expr5212 simpleMatch (@expr1073747134 tok@var2350 .@expr5311 tokAt (@expr5312 -2 ) , "} else {" ) ) {
339: return checkMissingReturnScope (@expr1073747137 tok@var2350 .@expr5311 tokAt (@expr5312 -2 ) , library@var2351 ) ; }
340: return tok@var2350 ;
341: } } }
342:
343: return nullptr ;
344: }
345: if (@expr1073747140 tok@var2350 .@expr1073747141 isKeyword (@expr1073747142 ) &&@expr1073747143 Token ::@expr5172 Match (@expr1073747145 tok@var2350 , "return|throw" ) ) {
346: return nullptr ; }
347: if (@expr1073747146 tok@var2350 .@expr5139 str (@expr5140 ) ==@expr1073747149 "goto" &&@expr1073747150 !@expr1073747151 isForwardJump (@expr1073747152 tok@var2350 ) ) {
348: return nullptr ; }
349: if (@expr1073747153 Token ::@expr5172 Match (@expr1073747155 tok@var2350 , "%name% (" ) &&@expr1073747156 !@expr1073747157 library@var2351 .@expr1073747158 isnotnoreturn (@expr1073747159 tok@var2350 ) ) {
350: const Token * start@var2359 ; start@var2359 =@expr1073747160 tok@var2350 ;
351: while (@expr1073747161 Token ::@expr5172 Match (@expr1073747163 start@var2359 .@expr5340 tokAt (@expr5341 -2 ) , "%name% :: %name%" ) ) {
352: start@var2359 =@expr1073747166 start@var2359 .@expr5340 tokAt (@expr5341 -2 ) ; }
353: if (@expr1073747169 Token ::@expr5172 Match (@expr1073747171 start@var2359 .@expr1073747172 previous (@expr1073747173 ) , "[;{}] %name% ::|(" ) ) {
354: return nullptr ; }
355: }
356: if (@expr1073747174 Token ::@expr5172 Match (@expr1073747176 tok@var2350 , "[;{}] %name% :" ) ) {
357: return tok@var2350 ; }
358: if (@expr1073747177 Token ::@expr5172 Match (@expr1073747179 tok@var2350 , "; !!}" ) &&@expr1073747180 !@expr1073747181 lastStatement@var2352 ) {
359: lastStatement@var2352 =@expr1073747182 tok@var2350 .@expr5151 next (@expr5152 ) ; }
360: }
361: return nullptr ;
362: }
363:
364: void CheckFunctions :: missingReturnError ( const Token * tok@var2360 )
365: {
366: reportError (@expr1073747185 tok@var2360 , Severity ::@expr1073747186 error , "missingReturn" ,
367: "Found a exit path from function with non-void return type that has missing return statement" , CWE758@var2275 , Certainty ::@expr1073747187 normal ) ;
368: }
369:
370:
371:
372: void CheckFunctions :: checkMathFunctions ( )
373: {
374: const bool styleC99@var2361 =@expr1073747188 mSettings@var29 .@expr5365 severity@var2442 .@expr5366 isEnabled (@expr1073747191 Severity ::@expr1073747192 style ) &&@expr1073747193 mSettings@var29 .@expr5370 standards@var2443 .@expr1073747195 c@var2444 !=@expr1073747196 Standards ::@expr1073747197 C89 &&@expr1073747198 mSettings@var29 .@expr5370 standards@var2443 .@expr1073747200 cpp@var2445 !=@expr1073747201 Standards ::@expr1073747202 CPP03 ;
375: const bool printWarnings@var2362 =@expr1073747203 mSettings@var29 .@expr5365 severity@var2442 .@expr5366 isEnabled (@expr1073747206 Severity ::@expr1073747207 warning ) ;
376:
377: const SymbolDatabase * symbolDatabase@var2363 ; symbolDatabase@var2363 =@expr1073747208 mTokenizer@var28 .@expr1073747209 getSymbolDatabase (@expr1073747210 ) ;
378: for (@expr1073747211 const Scope *@expr5388 scope@var2364 :@expr1073747213 symbolDatabase@var2363 .@expr1073747214 functionScopes@var2365 ) {
379: for (@expr1073747215 const Token *@expr5388 tok@var2366 =@expr1073747217 scope@var2364 .@expr1073747218 bodyStart@var2367 .@expr1073747219 next (@expr1073747220 ) ; tok@var2366 !=@expr1073747221 scope@var2364 .@expr1073747222 bodyEnd@var2368 ; tok@var2366 =@expr1073747223 tok@var2366 .@expr5400 next (@expr5401 ) ) {
380: if (@expr1073747226 tok@var2366 .@expr1073747227 varId (@expr1073747228 ) ) {
381: continue ; }
382: if (@expr1073747229 printWarnings@var2362 &&@expr1073747230 Token ::@expr5407 Match (@expr1073747232 tok@var2366 , "%name% ( !!)" ) ) {
383: if (@expr1073747233 tok@var2366 .@expr5410 strAt (@expr1073747235 -1 ) !=@expr1073747236 "."
384: &&@expr1073747237 Token ::@expr5407 Match (@expr1073747239 tok@var2366 , "log|logf|logl|log10|log10f|log10l|log2|log2f|log2l ( %num% )" ) ) {
385: const std ::@expr5416 string &@expr5417 number@var2369 =@expr1073747242 tok@var2366 .@expr5410 strAt (@expr5420 2 ) ;
386: if (@expr1073747245 (@expr1073747246 MathLib ::@expr5423 isInt (@expr1073747248 number@var2369 ) &&@expr1073747249 MathLib ::@expr5426 toLongNumber (@expr1073747251 number@var2369 ) <=@expr1073747252 0 ) ||@expr1073747253
387: (@expr1073747254 MathLib ::@expr5431 isFloat (@expr1073747256 number@var2369 ) &&@expr1073747257 MathLib ::@expr5434 toDoubleNumber (@expr1073747259 number@var2369 ) <=@expr1073747260 0. ) ) {
388: mathfunctionCallWarning (@expr5437 tok@var2366 ) ; }
389: } else { if (@expr1073747262 Token ::@expr5407 Match (@expr1073747264 tok@var2366 , "log1p|log1pf|log1pl ( %num% )" ) ) {
390: const std ::@expr5416 string &@expr5417 number@var2370 =@expr1073747267 tok@var2366 .@expr5410 strAt (@expr5420 2 ) ;
391: if (@expr1073747270 (@expr1073747271 MathLib ::@expr5423 isInt (@expr1073747273 number@var2370 ) &&@expr1073747274 MathLib ::@expr5426 toLongNumber (@expr1073747276 number@var2370 ) <=@expr1073747277 -1 ) ||@expr1073747278
392: (@expr1073747279 MathLib ::@expr5431 isFloat (@expr1073747281 number@var2370 ) &&@expr1073747282 MathLib ::@expr5434 toDoubleNumber (@expr1073747284 number@var2370 ) <=@expr1073747285 -1. ) ) {
393: mathfunctionCallWarning (@expr5437 tok@var2366 ) ; }
394: }
395:
396: else { if (@expr1073747287 Token ::@expr5407 Match (@expr1073747289 tok@var2366 , "atan2|atan2f|atan2l ( %num% , %num% )" ) ) {
397: if (@expr1073747290 MathLib ::@expr5467 isNullValue (@expr5468 tok@var2366 .@expr5410 strAt (@expr5420 2 ) ) &&@expr1073747295 MathLib ::@expr5467 isNullValue (@expr1073747297 tok@var2366 .@expr5410 strAt (@expr5475 4 ) ) ) {
398: mathfunctionCallWarning (@expr5476 tok@var2366 , 2 ) ; }
399: }
400:
401: else { if (@expr1073747301 Token ::@expr5407 Match (@expr1073747303 tok@var2366 , "fmod|fmodf|fmodl (" ) ) {
402: const Token * nextArg@var2371 ; nextArg@var2371 =@expr1073747304 tok@var2366 .@expr5481 tokAt (@expr1073747306 2 ) .@expr1073747307 nextArgument (@expr1073747308 ) ;
403: if (@expr1073747309 nextArg@var2371 &&@expr1073747310 MathLib ::@expr5467 isNullValue (@expr1073747312 nextArg@var2371 .@expr1073747313 str (@expr1073747314 ) ) ) {
404: mathfunctionCallWarning (@expr5476 tok@var2366 , 2 ) ; }
405: }
406:
407: else { if (@expr1073747316 Token ::@expr5407 Match (@expr1073747318 tok@var2366 , "pow|powf|powl ( %num% , %num% )" ) ) {
408: if (@expr1073747319 MathLib ::@expr5467 isNullValue (@expr5468 tok@var2366 .@expr5410 strAt (@expr5420 2 ) ) &&@expr1073747324 MathLib ::@expr1073747325 isNegative (@expr1073747326 tok@var2366 .@expr5410 strAt (@expr5475 4 ) ) ) {
409: mathfunctionCallWarning (@expr5476 tok@var2366 , 2 ) ; }
410: } } } } }
411: }
412:
413: if (@expr1073747330 styleC99@var2361 ) {
414: if (@expr1073747331 Token ::@expr5407 Match (@expr1073747333 tok@var2366 , "%num% - erf (" ) &&@expr1073747334 Tokenizer ::@expr5511 isOneNumber (@expr1073747336 tok@var2366 .@expr1073747337 str (@expr1073747338 ) ) &&@expr1073747339 tok@var2366 .@expr5400 next (@expr5401 ) .@expr5518 astOperand2 (@expr5519 ) ==@expr1073747344 tok@var2366 .@expr5481 tokAt (@expr1073747346 3 ) ) {
415: mathfunctionCallWarning (@expr1073747347 tok@var2366 , "1 - erf(x)" , "erfc(x)" ) ;
416: } else { if (@expr1073747348 Token ::@expr5525 simpleMatch (@expr1073747350 tok@var2366 , "exp (" ) &&@expr1073747351 Token ::@expr5407 Match (@expr1073747353 tok@var2366 .@expr5530 linkAt (@expr5531 1 ) , ") - %num%" ) &&@expr1073747356 Tokenizer ::@expr5511 isOneNumber (@expr1073747358 tok@var2366 .@expr5530 linkAt (@expr5531 1 ) .@expr1073747361 strAt (@expr1073747362 2 ) ) &&@expr1073747363 tok@var2366 .@expr5530 linkAt (@expr5531 1 ) .@expr1073747366 next (@expr1073747367 ) .@expr1073747368 astOperand1 (@expr1073747369 ) ==@expr1073747370 tok@var2366 .@expr5400 next (@expr5401 ) ) {
417: mathfunctionCallWarning (@expr1073747373 tok@var2366 , "exp(x) - 1" , "expm1(x)" ) ;
418: } else { if (@expr1073747374 Token ::@expr5525 simpleMatch (@expr1073747376 tok@var2366 , "log (" ) &&@expr1073747377 tok@var2366 .@expr5400 next (@expr5401 ) .@expr5518 astOperand2 (@expr5519 ) ) {
419: const Token * plus@var2372 ; plus@var2372 =@expr1073747382 tok@var2366 .@expr5400 next (@expr5401 ) .@expr5518 astOperand2 (@expr5519 ) ;
420: if (@expr1073747387 plus@var2372 .@expr1073747388 str (@expr1073747389 ) ==@expr1073747390 "+" &&@expr1073747391 (@expr1073747392 (@expr1073747393 plus@var2372 .@expr5570 astOperand1 (@expr5571 ) &&@expr1073747396 Tokenizer ::@expr5511 isOneNumber (@expr1073747398 plus@var2372 .@expr5570 astOperand1 (@expr5571 ) .@expr1073747401 str (@expr1073747402 ) ) ) ||@expr1073747403 (@expr1073747404 plus@var2372 .@expr5581 astOperand2 (@expr5582 ) &&@expr1073747407 Tokenizer ::@expr5511 isOneNumber (@expr1073747409 plus@var2372 .@expr5581 astOperand2 (@expr5582 ) .@expr1073747412 str (@expr1073747413 ) ) ) ) ) {
421: mathfunctionCallWarning (@expr1073747414 tok@var2366 , "log(1 + x)" , "log1p(x)" ) ; }
422: } } }
423: }
424: }
425: }
426: }
427:
428: void CheckFunctions :: mathfunctionCallWarning ( const Token * tok@var2373 , const int numParam@var2374 )
429: {
430: if (@expr1073747415 tok@var2373 ) {
431: if (@expr1073747416 numParam@var2374 ==@expr1073747417 1 ) {
432: reportError (@expr1073747418 tok@var2373 , Severity ::@expr5595 warning , "wrongmathcall" , "$symbol:" +@expr5596 tok@var2373 .@expr5597 str (@expr5598 ) +@expr1073747423 "\nPassing value " +@expr1073747424 tok@var2373 .@expr5601 strAt (@expr5602 2 ) +@expr1073747427 " to $symbol() leads to implementation-defined result." , CWE758@var2275 , Certainty ::@expr5604 normal ) ; }
433: else { if (@expr1073747429 numParam@var2374 ==@expr1073747430 2 ) {
434: reportError (@expr1073747431 tok@var2373 , Severity ::@expr5595 warning , "wrongmathcall" , "$symbol:" +@expr5596 tok@var2373 .@expr5597 str (@expr5598 ) +@expr1073747436 "\nPassing values " +@expr1073747437 tok@var2373 .@expr5601 strAt (@expr5602 2 ) +@expr1073747440 " and " +@expr1073747441 tok@var2373 .@expr5601 strAt (@expr1073747443 4 ) +@expr1073747444 " to $symbol() leads to implementation-defined result." , CWE758@var2275 , Certainty ::@expr5604 normal ) ; } }
435: } else {
436: reportError (@expr1073747446 tok@var2373 , Severity ::@expr5595 warning , "wrongmathcall" , "Passing value '#' to #() leads to implementation-defined result." , CWE758@var2275 , Certainty ::@expr5604 normal ) ; }
437: }
438:
439: void CheckFunctions :: mathfunctionCallWarning ( const Token * tok@var2375 , const std :: string & oldexp@var2376 , const std :: string & newexp@var2377 )
440: {
441: reportError (@expr1073747449 tok@var2375 , Severity ::@expr1073747450 style , "unpreciseMathCall" , "Expression '" +@expr1073747451 oldexp@var2376 +@expr1073747452 "' can be replaced by '" +@expr1073747453 newexp@var2377 +@expr1073747454 "' to avoid loss of precision." , CWE758@var2275 , Certainty ::@expr1073747455 normal ) ;
442: }
443:
|
446:
447: void CheckFunctions :: memsetZeroBytes ( )
448: {
449:
|
455:
456: if (@expr1073747456 !@expr1073747457 mSettings@var29 .@expr1073747458 severity@var2442 .@expr1073747459 isEnabled (@expr1073747460 Severity ::@expr1073747461 warning ) ) {
457: return ; }
458:
459: const SymbolDatabase * symbolDatabase@var2378 ; symbolDatabase@var2378 =@expr1073747462 mTokenizer@var28 .@expr1073747463 getSymbolDatabase (@expr1073747464 ) ;
460: for (@expr1073747465 const Scope *@expr5642 scope@var2379 :@expr1073747467 symbolDatabase@var2378 .@expr1073747468 functionScopes@var2380 ) {
461: for (@expr1073747469 const Token *@expr5642 tok@var2381 =@expr1073747471 scope@var2379 .@expr1073747472 bodyStart@var2382 .@expr1073747473 next (@expr1073747474 ) ; tok@var2381 !=@expr1073747475 scope@var2379 .@expr1073747476 bodyEnd@var2383 ; tok@var2381 =@expr1073747477 tok@var2381 .@expr1073747478 next (@expr1073747479 ) ) {
462: if (@expr1073747480 Token ::@expr1073747481 Match (@expr1073747482 tok@var2381 , "memset|wmemset (" ) &&@expr1073747483 (@expr1073747484 numberOfArguments (@expr1073747485 tok@var2381 ) ==@expr1073747486 3 ) ) {
463: const std ::@expr1073747487 vector < const Token *@expr5642 > & arguments@var2384 =@expr1073747489 getArguments (@expr1073747490 tok@var2381 ) ;
464: if (@expr1073747491 $(@expr1073747492 arguments@var2384 .@expr1073747493 size (@expr1073747494 ) !=@expr1073747495 3U $) $&&@expr1073747496 $wrongData $(@expr1073747497 tok@var2381 $, "arguments.size()!=3U" $) ) {
465: continue ; }
466: const Token * lastParamTok@var2385 ; lastParamTok@var2385 =@expr1073747498 arguments@var2384 [@expr1073747499 2 ] ;
467: if (@expr1073747500 MathLib ::@expr1073747501 isNullValue (@expr1073747502 lastParamTok@var2385 .@expr1073747503 str (@expr1073747504 ) ) ) {
468: memsetZeroBytesError (@expr1073747505 tok@var2381 ) ; }
469: }
470: }
471: }
472: }
473:
474: void CheckFunctions :: memsetZeroBytesError ( const Token * tok@var2386 )
475: {
476: const std ::@expr1073747506 string summary@var2387 (@expr1073747507 "memset() called to fill 0 bytes." ) ;
477: const std ::@expr1073747508 string verbose@var2388 (@expr1073747509 summary@var2387 +@expr1073747510 " The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value."
478:
479: ) ;
480: reportError (@expr1073747511 tok@var2386 , Severity ::@expr1073747512 warning , "memsetZeroBytes" , summary@var2387 +@expr1073747513 "\n" +@expr1073747514 verbose@var2388 , CWE687@var2278 , Certainty ::@expr1073747515 normal ) ;
481: }
482:
483: void CheckFunctions :: memsetInvalid2ndParam ( )
484: {
485:
|
492:
493: const bool printPortability@var2389 =@expr1073747516 mSettings@var29 .@expr5693 severity@var2442 .@expr5694 isEnabled (@expr1073747519 Severity ::@expr1073747520 portability ) ;
494: const bool printWarning@var2390 =@expr1073747521 mSettings@var29 .@expr5693 severity@var2442 .@expr5694 isEnabled (@expr1073747524 Severity ::@expr1073747525 warning ) ;
495: if (@expr1073747526 !@expr1073747527 printWarning@var2390 &&@expr1073747528 !@expr1073747529 printPortability@var2389 ) {
496: return ; }
497:
498: const SymbolDatabase * symbolDatabase@var2391 ; symbolDatabase@var2391 =@expr1073747530 mTokenizer@var28 .@expr1073747531 getSymbolDatabase (@expr1073747532 ) ;
499: for (@expr1073747533 const Scope *@expr5710 scope@var2392 :@expr1073747535 symbolDatabase@var2391 .@expr1073747536 functionScopes@var2393 ) {
500: for (@expr1073747537 const Token *@expr5710 tok@var2394 =@expr1073747539 scope@var2392 .@expr1073747540 bodyStart@var2395 .@expr1073747541 next (@expr1073747542 ) ; tok@var2394 &&@expr1073747543 (@expr1073747544 tok@var2394 !=@expr1073747545 scope@var2392 .@expr1073747546 bodyEnd@var2396 ) ; tok@var2394 =@expr1073747547 tok@var2394 .@expr1073747548 next (@expr1073747549 ) ) {
501: if (@expr1073747550 !@expr1073747551 Token ::@expr1073747552 simpleMatch (@expr1073747553 tok@var2394 , "memset (" ) ) {
502: continue ; }
503:
504: const std ::@expr1073747554 vector < const Token *@expr5710 > args@var2397 =@expr1073747556 getArguments (@expr1073747557 tok@var2394 ) ;
505: if (@expr1073747558 args@var2397 .@expr1073747559 size (@expr1073747560 ) !=@expr1073747561 3 ) {
506: continue ; }
507:
508:
509: const Token * const secondParamTok@var2398 ; secondParamTok@var2398 =@expr1073747562 args@var2397 [@expr1073747563 1 ] ;
510: if (@expr1073747564 Token ::@expr1073747565 Match (@expr1073747566 secondParamTok@var2398 , "%num% ," ) &&@expr1073747567 MathLib ::@expr1073747568 isNullValue (@expr1073747569 secondParamTok@var2398 .@expr5746 str (@expr5747 ) ) ) {
511: continue ; }
512:
513:
514: if (@expr1073747572 printPortability@var2389 &&@expr1073747573 astIsFloat (@expr1073747574 secondParamTok@var2398 , false ) ) {
515: memsetFloatError (@expr1073747575 secondParamTok@var2398 , secondParamTok@var2398 .@expr1073747576 expressionString (@expr1073747577 ) ) ;
516: }
517:
518: if (@expr1073747578 printWarning@var2390 &&@expr1073747579 secondParamTok@var2398 .@expr1073747580 isNumber (@expr1073747581 ) ) {
519: const long long value@var2399 =@expr1073747582 MathLib ::@expr1073747583 toLongNumber (@expr1073747584 secondParamTok@var2398 .@expr5746 str (@expr5747 ) ) ;
520: const long long sCharMin@var2400 =@expr1073747587 mSettings@var29 .@expr1073747588 signedCharMin (@expr1073747589 ) ;
521: const long long uCharMax@var2401 =@expr1073747590 mSettings@var29 .@expr1073747591 unsignedCharMax (@expr1073747592 ) ;
522: if (@expr1073747593 value@var2399 <@expr1073747594 sCharMin@var2400 ||@expr1073747595 value@var2399 >@expr1073747596 uCharMax@var2401 ) {
523: memsetValueOutOfRangeError (@expr1073747597 secondParamTok@var2398 , secondParamTok@var2398 .@expr5746 str (@expr5747 ) ) ; }
524: }
525: }
526: }
527: }
528:
529: void CheckFunctions :: memsetFloatError ( const Token * tok@var2402 , const std :: string & var_value@var2403 )
530: {
531: const std ::@expr1073747600 string message@var2404 (@expr1073747601 "The 2nd memset() argument '" +@expr1073747602 var_value@var2403 +@expr1073747603
532: "' is a float, its representation is implementation defined." ) ;
533: const std ::@expr1073747604 string verbose@var2405 (@expr1073747605 message@var2404 +@expr1073747606 " memset() is used to set each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined."
534: ) ;
535: reportError (@expr1073747607 tok@var2402 , Severity ::@expr1073747608 portability , "memsetFloat" , message@var2404 +@expr1073747609 "\n" +@expr1073747610 verbose@var2405 , CWE688@var2279 , Certainty ::@expr1073747611 normal ) ;
536: }
537:
538: void CheckFunctions :: memsetValueOutOfRangeError ( const Token * tok@var2406 , const std :: string & value@var2407 )
539: {
540: const std ::@expr1073747612 string message@var2408 (@expr1073747613 "The 2nd memset() argument '" +@expr1073747614 value@var2407 +@expr1073747615 "' doesn't fit into an 'unsigned char'." ) ;
541: const std ::@expr1073747616 string verbose@var2409 (@expr1073747617 message@var2408 +@expr1073747618 " The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value." ) ;
542: reportError (@expr1073747619 tok@var2406 , Severity ::@expr1073747620 warning , "memsetValueOutOfRange" , message@var2408 +@expr1073747621 "\n" +@expr1073747622 verbose@var2409 , CWE686@var2277 , Certainty ::@expr1073747623 normal ) ;
543: }
544:
|
548:
549: void CheckFunctions :: checkLibraryMatchFunctions ( )
550: {
551: if (@expr1073747624 !@expr1073747625 mSettings@var29 .@expr1073747626 checkLibrary@var2448 ||@expr1073747627 !@expr1073747628 mSettings@var29 .@expr1073747629 severity@var2442 .@expr1073747630 isEnabled (@expr1073747631 Severity ::@expr5808 information ) ) {
552: return ; }
553:
554: bool insideNew@var2410 ; insideNew@var2410 =@expr1073747633 false ;
555: for (@expr1073747634 const Token *@expr1073747635 tok@var2411 =@expr1073747636 mTokenizer@var28 .@expr1073747637 tokens (@expr1073747638 ) ; tok@var2411 ; tok@var2411 =@expr1073747639 tok@var2411 .@expr1073747640 next (@expr1073747641 ) ) {
556: if (@expr1073747642 !@expr1073747643 tok@var2411 .@expr5820 scope (@expr5821 ) ||@expr1073747646 !@expr1073747647 tok@var2411 .@expr5820 scope (@expr5821 ) .@expr1073747650 isExecutable (@expr1073747651 ) ) {
557: continue ; }
558:
559: if (@expr1073747652 tok@var2411 .@expr5829 str (@expr5830 ) ==@expr1073747655 "new" ) {
560: insideNew@var2410 =@expr1073747656 true ; }
561: else { if (@expr1073747657 tok@var2411 .@expr5829 str (@expr5830 ) ==@expr1073747660 ";" ) {
562: insideNew@var2410 =@expr1073747661 false ; }
563: else { if (@expr1073747662 insideNew@var2410 ) {
564: continue ; } } }
565:
566: if (@expr1073747663 !@expr1073747664 Token ::@expr5841 Match (@expr1073747666 tok@var2411 , "%name% (" ) ||@expr1073747667 Token ::@expr5841 Match (@expr1073747669 tok@var2411 , "asm|sizeof|catch" ) ) {
567: continue ; }
568:
569: if (@expr1073747670 tok@var2411 .@expr1073747671 varId (@expr1073747672 ) !=@expr1073747673 0 ||@expr1073747674 tok@var2411 .@expr1073747675 type (@expr1073747676 ) ||@expr1073747677 tok@var2411 .@expr1073747678 isStandardType (@expr1073747679 ) ||@expr1073747680 tok@var2411 .@expr1073747681 isControlFlowKeyword (@expr1073747682 ) ) {
570: continue ; }
571:
572: if (@expr1073747683 tok@var2411 .@expr1073747684 linkAt (@expr1073747685 1 ) .@expr1073747686 strAt (@expr1073747687 1 ) ==@expr1073747688 "(" ) {
573: continue ; }
574:
575: if (@expr1073747689 tok@var2411 .@expr1073747690 function (@expr1073747691 ) ) {
576: continue ; }
577:
578: if (@expr1073747692 !@expr1073747693 mSettings@var29 .@expr5870 library@var2446 .@expr1073747695 isNotLibraryFunction (@expr1073747696 tok@var2411 ) ) {
579: continue ; }
580:
581: const std ::@expr1073747697 string &@expr1073747698 functionName@var2412 =@expr1073747699 mSettings@var29 .@expr5870 library@var2446 .@expr1073747701 getFunctionName (@expr1073747702 tok@var2411 ) ;
582: if (@expr1073747703 functionName@var2412 .@expr1073747704 empty (@expr1073747705 ) ||@expr1073747706 mSettings@var29 .@expr5870 library@var2446 .@expr5884 functions@var2449 .@expr1073747709 find (@expr1073747710 functionName@var2412 ) !=@expr1073747711 mSettings@var29 .@expr5870 library@var2446 .@expr5884 functions@var2449 .@expr1073747714 end (@expr1073747715 ) ) {
583: continue ; }
584:
585: reportError (@expr1073747716 tok@var2411 ,
586: Severity ::@expr5808 information ,
587: "checkLibraryFunction" ,
588: "--check-library: There is no matching configuration for function " +@expr1073747718 functionName@var2412 +@expr1073747719 "()" ) ;
589: }
590: }
591:
|
594:
595: void CheckFunctions :: returnLocalStdMove ( )
596: {
597: if (@expr1073747720 !@expr1073747721 mTokenizer@var28 .@expr1073747722 isCPP (@expr1073747723 ) ||@expr1073747724 mSettings@var29 .@expr1073747725 standards@var2443 .@expr1073747726 cpp@var2445 <@expr1073747727 Standards ::@expr1073747728 CPP11 ) {
598: return ; }
599:
600: if (@expr1073747729 !@expr1073747730 mSettings@var29 .@expr1073747731 severity@var2442 .@expr1073747732 isEnabled (@expr1073747733 Severity ::@expr1073747734 performance ) ) {
601: return ; }
602:
603: const SymbolDatabase * symbolDatabase@var2413 ; symbolDatabase@var2413 =@expr1073747735 mTokenizer@var28 .@expr1073747736 getSymbolDatabase (@expr1073747737 ) ;
604: for (@expr1073747738 const Scope *@expr5915 scope@var2414 :@expr1073747740 symbolDatabase@var2413 .@expr1073747741 functionScopes@var2415 ) {
605:
606: if (@expr1073747742 Function ::@expr1073747743 returnsReference (@expr1073747744 scope@var2414 .@expr5921 function@var2416 , true ) ) {
607: continue ; }
608: const auto rets@var2417 =@expr1073747746 Function ::@expr1073747747 findReturns (@expr1073747748 scope@var2414 .@expr5921 function@var2416 ) ;
609: for (@expr1073747750 const Token *@expr5915 ret@var2418 :@expr1073747752 rets@var2417 ) {
610: if (@expr1073747753 !@expr1073747754 Token ::@expr1073747755 simpleMatch (@expr1073747756 ret@var2418 .@expr1073747757 tokAt (@expr1073747758 -3 ) , "std :: move (" ) ) {
611: continue ; }
612: const Token * retval@var2419 ; retval@var2419 =@expr1073747759 ret@var2418 .@expr1073747760 astOperand2 (@expr1073747761 ) ;
613:
614: if (@expr1073747762 retval@var2419 .@expr5939 variable (@expr5940 ) &&@expr1073747765 retval@var2419 .@expr5939 variable (@expr5940 ) .@expr1073747768 isLocal (@expr1073747769 ) &&@expr1073747770 !@expr1073747771 retval@var2419 .@expr5939 variable (@expr5940 ) .@expr1073747774 isVolatile (@expr1073747775 ) ) {
615: copyElisionError (@expr5952 retval@var2419 ) ; }
616:
617: if (@expr1073747777 Token ::@expr1073747778 Match (@expr1073747779 retval@var2419 , "(|{" ) &&@expr1073747780 !@expr1073747781 retval@var2419 .@expr1073747782 isCast (@expr1073747783 ) ) {
618: copyElisionError (@expr5952 retval@var2419 ) ; }
619: }
620: }
621: }
622:
623: void CheckFunctions :: copyElisionError ( const Token * tok@var2420 )
624: {
625: reportError (@expr1073747785 tok@var2420 ,
626: Severity ::@expr1073747786 performance ,
627: "returnStdMoveLocal" ,
628: "Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local"
629: ) ;
630: }

##file cppcheck-2.8/lib/settings.h

2:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2421 ; mFlags@var2421 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2421 ;
54: }
55: void clear ( ) {
56: mFlags@var2421 =@expr1073747787 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2421 =@expr1073747788 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2422 ) {
62: if (@expr1073747789 enabled@var2422 ) {
63: fill (@expr1073747790 ) ; }
64: else {
65: clear (@expr1073747791 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2423 ) const {
68: return (@expr5968 mFlags@var2421 &@expr1073747793 (@expr5968 1U <<@expr1073747795 (@expr1073747796 uint32_t ) flag@var2423 ) ) !=@expr1073747797 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2424 ) {
71: mFlags@var2421 |=@expr1073747798 (@expr1073747799 1U <<@expr1073747800 (@expr1073747801 uint32_t ) flag@var2424 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2425 ) {
74: mFlags@var2421 &=@expr1073747802 ~@expr1073747803 (@expr1073747804 1U <<@expr1073747805 (@expr1073747806 uint32_t ) flag@var2425 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2426 , bool enabled@var2427 ) {
77: if (@expr1073747807 enabled@var2427 ) {
78: enable (@expr1073747808 flag@var2426 ) ; }
79: else {
80: disable (@expr1073747809 flag@var2426 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2428 ; mFlags@var2428 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2428 ;
54: }
55: void clear ( ) {
56: mFlags@var2428 =@expr1073747810 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2428 =@expr1073747811 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2429 ) {
62: if (@expr1073747812 enabled@var2429 ) {
63: fill (@expr1073747813 ) ; }
64: else {
65: clear (@expr1073747814 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2430 ) const {
68: return (@expr5991 mFlags@var2428 &@expr1073747816 (@expr5991 1U <<@expr1073747818 (@expr1073747819 uint32_t ) flag@var2430 ) ) !=@expr1073747820 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2431 ) {
71: mFlags@var2428 |=@expr1073747821 (@expr1073747822 1U <<@expr1073747823 (@expr1073747824 uint32_t ) flag@var2431 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2432 ) {
74: mFlags@var2428 &=@expr1073747825 ~@expr1073747826 (@expr1073747827 1U <<@expr1073747828 (@expr1073747829 uint32_t ) flag@var2432 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2433 , bool enabled@var2434 ) {
77: if (@expr1073747830 enabled@var2434 ) {
78: enable (@expr1073747831 flag@var2433 ) ; }
79: else {
80: disable (@expr1073747832 flag@var2433 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2435 ; mFlags@var2435 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2435 ;
54: }
55: void clear ( ) {
56: mFlags@var2435 =@expr1073747833 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2435 =@expr1073747834 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2436 ) {
62: if (@expr1073747835 enabled@var2436 ) {
63: fill (@expr1073747836 ) ; }
64: else {
65: clear (@expr1073747837 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2437 ) const {
68: return (@expr6014 mFlags@var2435 &@expr1073747839 (@expr6014 1U <<@expr1073747841 (@expr1073747842 uint32_t ) flag@var2437 ) ) !=@expr1073747843 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2438 ) {
71: mFlags@var2435 |=@expr1073747844 (@expr1073747845 1U <<@expr1073747846 (@expr1073747847 uint32_t ) flag@var2438 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2439 ) {
74: mFlags@var2435 &=@expr1073747848 ~@expr1073747849 (@expr1073747850 1U <<@expr1073747851 (@expr1073747852 uint32_t ) flag@var2439 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2440 , bool enabled@var2441 ) {
77: if (@expr1073747853 enabled@var2441 ) {
78: enable (@expr1073747854 flag@var2440 ) ; }
79: else {
80: disable (@expr1073747855 flag@var2440 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  severity possible {4@13,6@40,2@243}
  id possible {"returnStdMoveLocal"@13,"checkLibraryFunction"@40,"allocaCalled"@243,"allocaCalled"@244}
  msg possible {"Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local"@13,"$symbol:alloca\nObsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\nThe obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."@243,"$symbol:alloca\nObsolete function 'alloca' called.\nThe obsolete function 'alloca' is called. In C++11 and later it is recommended to use std::array<> or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."@244}
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
  tok possible 0@69
Line 141
  callstack always size=1
  severity possible {2@41,5@42,3@64,1@104}
  id {"memsetValueOutOfRange"@41,"memsetFloat"@42,"memsetZeroBytes"@57,"unpreciseMathCall"@64,"wrongmathcall"@65,"wrongmathcall"@67,"wrongmathcall"@69,"missingReturn"@104,"ignoredReturnErrorCode"@164,"ignoredReturnValue"@165}
  msg {"Passing value '#' to #() leads to implementation-defined result."@69,"Found a exit path from function with non-void return type that has missing return statement"@104}
  certainty possible 0@41
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@32549,34@32805}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@127,34@128}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@127,""@128,""@129,"U"@130,"U"@131,"u"@132,"u"@133,"u8"@134,"u8"@135}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@34,34@35}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@31,34@33}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 378
  ftok possible symbolic=(tok)@211
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 391
  ftok possible symbolic=(tok)@220
  argnr possible 1@220
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 399
  ftok possible symbolic=(tok)@210
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 54
  ( always "Check function usage"
Line 58
  ( always "Check function usage"
Line 118
  , always 1
  = always 1
  1 always 1
Line 127
  nullptr always 0
Line 129
  = {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn),start=0}
  ( {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn),start=0}
  i possible {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn),end=0}
Line 130
  nullptr always 0
  :: always 3
  style always 3
  i possible {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn)}
  "Called" always "Called"
  i possible {lifetime[Iterator]=(settings->library.functionwarn),lifetime[Object]=(functionwarn)}
Line 133
  nullptr always 0
  "func_name" always "func_name"
  1 always 1
  nullptr always 0
  "1:4" always "1:4"
Line 134
  nullptr always 0
  "func_name" always "func_name"
  1 always 1
Line 135
  nullptr always 0
  "func_name" always "func_name"
  1 always 1
Line 136
  nullptr always 0
  "malloc" always "malloc"
Line 137
  nullptr always 0
Line 138
  nullptr always 0
  "1 - erf(x)" always "1 - erf(x)"
  "erfc(x)" always "erfc(x)"
Line 139
  nullptr always 0
Line 140
  nullptr always 0
  "varname" always "varname"
Line 141
  nullptr always 0
  "varname" always "varname"
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 147
  "Check function usage" always "Check function usage"
Line 151
  "Check function usage:\n- missing 'return' in non-void function\n- return value of certain functions not used\n- invalid input values for functions\n- Warn if a function is called whose usage is discouraged\n- memset() third argument is zero\n- memset() with a value out of range as the 2nd parameter\n- memset() with a float as the 2nd parameter\n- copy elision optimization for returning value affected by std::move\n" always "Check function usage:\n- missing 'return' in non-void function\n- return value of certain functions not used\n- invalid input values for functions\n- Warn if a function is called whose usage is discouraged\n- memset() third argument is zero\n- memset() with a value out of range as the 2nd parameter\n- memset() with a float as the 2nd parameter\n- copy elision optimization for returning value affected by std::move\n"
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@217,128@218,64@219,32@220,16@221,8@222,4@223,2@224,1@225}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@226,128@227,64@228,32@229,16@230,8@231,4@232,2@233,1@234}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@226,4294967167@227,4294967231@228,4294967263@229,4294967279@230,4294967287@231,4294967291@232,4294967293@233,4294967294@234}
  flag {!<=-1,256@226,128@227,64@228,32@229,16@230,8@231,4@232,2@233,1@234}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible {"std :: move ("@17,"memset ("@48,"exp ("@86,"log ("@91,"break ;"@123,"}"@124,"default :"@129,"} else {"@145,"alloca ("@239}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@116,4@117,0@118}
  t possible {10@116,4@117,0@118}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@116,4@117,0@118}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@116,0@118}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@116,0@118}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@116}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@116}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@116}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@116}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@116}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@124}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@126,17179869184@137,8589934592@139,34359738368@141,4294967296@143,2147483648@145,1073741824@147,536870912@149,268435456@151}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@213,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@214}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@125,17179869184@136,8589934592@138,34359738368@140,4294967296@142,2147483648@144,1073741824@146,536870912@148,268435456@150}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@125,17179869184@136,8589934592@138,34359738368@140,4294967296@142,2147483648@144,1073741824@146,536870912@148,268435456@150}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@59,4096@62,16384@65,2048@66,1024@67,65536@68,512@69,256@70,128@71}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@24,4194304@26,8388608@27,2097152@29,1048576@30,524288@31,262144@32,131072@33,65536@34}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@2,2097152@3,1048576@4,524288@5,262144@6,131072@7,65536@8,32768@9,16384@10}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@2,4292870143@3,4293918719@4,4294443007@5,4294705151@6,4294836223@7,4294901759@8,4294934527@9,4294950911@10}
  flag {!<=-1,8388608@2,2097152@3,1048576@4,524288@5,262144@6,131072@7,65536@8,32768@9,16384@10}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 46
  252U always 252
Line 47
  477U always 477
Line 48
  758U always 758
Line 49
  628U always 628
Line 50
  686U always 686
Line 51
  687U always 687
Line 52
  688U always 688
Line 56
  checkAlloca always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
  && always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 1
  C99 always 1
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 1
  CPP11 always 1
Line 59
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 60
  != always {!<=-1,!>=2}
Line 61
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  0 always 0
Line 64
  checkAlloca always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "alloca (" always "alloca ("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  :: always 0
  eGlobal always 0
Line 65
  ( always {!<=-1,!>=2}
Line 66
  > always {!<=-1,!>=2}
  :: always 0
  C89 always 0
Line 67
  :: always 2
  warning always 2
  "allocaCalled" always "allocaCalled"
Line 68
  "$symbol:alloca\nObsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\nThe obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." always "$symbol:alloca\nObsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\nThe obsolete function 'alloca' is called. In C99 and later it is recommended to use a variable length array or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."
Line 74
  :: always 2
  warning always 2
  "allocaCalled" always "allocaCalled"
Line 75
  "$symbol:alloca\nObsolete function 'alloca' called.\nThe obsolete function 'alloca' is called. In C++11 and later it is recommended to use std::array<> or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)." always "$symbol:alloca\nObsolete function 'alloca' called.\nThe obsolete function 'alloca' is called. In C++11 and later it is recommended to use std::array<> or a dynamically allocated array instead. The function 'alloca' is dangerous for many reasons (http://stackoverflow.com/questions/1018853/why-is-alloca-not-considered-good-practice and http://linux.die.net/man/3/alloca)."
Line 81
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
  wi always !0
  && always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  wi always !0
  && always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  wi always !0
Line 87
  . always {!<=-1,!>=2}
  daca always {!<=-1,!>=2}
  "prohibited" always "prohibited"
  : always ""
  "" always ""
Line 88
  wi always !0
  "Called" always "Called"
  wi always !0
  :: always 0
  normal always 0
Line 102
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 103
  != always {!<=-1,!>=2}
Line 104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% ( !!)" always "%name% ( !!)"
Line 107
  tok always symbolic=(functionToken)
Line 108
  = always 1
  1 always 1
  argnr possible 1
  <= always {!<=-1,!>=2}
  ( always !<=-1
Line 109
  argnr {<=symbolic=(arguments.size()),!>=symbolic=(arguments.size()+1),1}
  - possible 0
  1 always 1
Line 112
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr {<=symbolic=(arguments.size()),!>=symbolic=(arguments.size()+1),1}
Line 114
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
  invalidValue always !0
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 117
  ( always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
Line 119
  ( always {!<=-1,!>=2}
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 120
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
  0 always 0
Line 124
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
  nullptr always 0
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
  1 always 1
Line 126
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
  nullptr always 0
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 129
  ( always {!<=-1,!>=2}
  functionToken always symbolic=(tok)
  argnr {!>=symbolic=(arguments.size()+1),1}
Line 130
  ( always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
  "& %var% !![" always "& %var% !!["
  && always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
  && always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
  ( always !0
Line 131
  = always !0
  argtok always symbolic=(arguments[argnr-1])
  ( always !0
  ( always !0
Line 132
  argtok always symbolic=(arguments[argnr-1])
  ( always !0
Line 133
  valueType {symbolic=(argtok->next()->valueType()),!0}
  == always {!<=-1,!>=2}
  :: always 9
  CHAR always 9
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  variable always symbolic=(argtok->next()->variable())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  variable always symbolic=(argtok->next()->variable())
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 134
  ! always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
  ( always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  argtok always symbolic=(arguments[argnr-1])
  ( always !0
  0 always 0
  == always {!<=-1,!>=2}
  nullptr always 0
Line 135
  argtok always symbolic=(arguments[argnr-1])
  functionToken always symbolic=(tok)
  argnr always !>=symbolic=(arguments.size()+1)
Line 147
  "$symbol:" always "$symbol:"
  functionName possible "func_name"@249
  '\n' always 10
Line 148
  invalidValue possible 0@214
  && always {!<=-1,!>=2}
  invalidValue always !0
Line 149
  invalidValue always !0
  . always !0
Line 150
  " or $symbol() argument nr " always " or $symbol() argument nr "
  " can have invalid value." always " can have invalid value."
Line 152
  "Invalid $symbol() argument nr " always "Invalid $symbol() argument nr "
  argnr possible 1@249
  '.' always 46
Line 153
  invalidValue possible 0
Line 154
  " The value is " always " The value is "
  10 always 10
  invalidValue always !0
  ( always {!<=-1,!>=2}
  invalidValue always !0
  invalidValue always !0
  " but the valid values are '" always " but the valid values are '"
  "'." always "'."
Line 156
  " The value is 0 or 1 (boolean) but the valid values are '" always " The value is 0 or 1 (boolean) but the valid values are '"
  validstr possible "1:4"@249
  "'." always "'."
Line 157
  invalidValue possible 0
Line 158
  invalidValue always !0
  "Invalid argument" always "Invalid argument"
Line 159
  invalidValue always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  invalidValue always !0
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
Line 160
  "invalidFunctionArg" always "invalidFunctionArg"
Line 163
  invalidValue always !0
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 165
  tok possible {symbolic=(arguments[argnr-1])@214,0@249}
Line 166
  :: always 1
  error always 1
Line 167
  "invalidFunctionArg" always "invalidFunctionArg"
Line 170
  :: always 0
  normal always 0
Line 176
  "$symbol:" always "$symbol:"
  functionName possible "func_name"@250
  '\n' always 10
Line 177
  "Invalid $symbol() argument nr " always "Invalid $symbol() argument nr "
  argnr possible 1@250
  ". A non-boolean value is required." always ". A non-boolean value is required."
Line 178
  tok possible {symbolic=(arguments[argnr-1])@212,0@250}
  :: always 1
  error always 1
  "invalidFunctionArgBool" always "invalidFunctionArgBool"
  :: always 0
  normal always 0
Line 184
  "$symbol:" always "$symbol:"
  functionName possible "func_name"@251
  '\n' always 10
Line 185
  "Invalid $symbol() argument nr " always "Invalid $symbol() argument nr "
  argnr possible 1@251
  ". A nul-terminated string is required." always ". A nul-terminated string is required."
Line 186
  tok possible {symbolic=(arguments[argnr-1])@232,0@251}
  :: always 1
  error always 1
  "invalidFunctionArgStr" always "invalidFunctionArgStr"
  :: always 0
  normal always 0
Line 194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 198
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 199
  != always {!<=-1,!>=2}
Line 201
  ( always {!<=-1,!>=2}
  "%var%|(|,|return {" always "%var%|(|,|return {"
Line 202
  1 always 1
Line 203
  ( always {!<=-1,!>=2}
  "[(<]" always "[(<]"
  && always {!<=-1,!>=2}
Line 204
  = always !0
  ( always !0
Line 206
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 210
  ( always {!<=-1,!>=2}
  parent possible symbolic=(tok->next()->astParent())
  "%cop%" always "%cop%"
Line 211
  ( always {!<=-1,!>=2}
  "<<|>>" always "<<|>>"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 215
  parent possible symbolic=(tok->next()->astParent())
Line 218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 223
  ! {!<=-1,!>=2,1}
  ( possible 0
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  "void %name%" always "void %name%"
  && always {!<=-1,!>=2}
Line 224
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "!tok->next()->astOperand1()" always "!tok->next()->astOperand1()"
Line 226
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
  && always {!<=-1,!>=2}
Line 227
  == always {!<=-1,!>=2}
  :: always 1
  DEFAULT always 1
  || always {!<=-1,!>=2}
Line 228
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
  && always {!<=-1,!>=2}
Line 231
  == always {!<=-1,!>=2}
  :: always 2
  ERROR_CODE always 2
Line 240
  tok possible 0@252
  :: always 2
  warning always 2
  "ignoredReturnValue" always "ignoredReturnValue"
Line 241
  "$symbol:" always "$symbol:"
  function possible "malloc"@252
  "\nReturn value of function $symbol() is not used." always "\nReturn value of function $symbol() is not used."
  :: always 0
  normal always 0
Line 246
  :: always 3
  style always 3
  "ignoredReturnErrorCode" always "ignoredReturnErrorCode"
Line 247
  "$symbol:" always "$symbol:"
  "\nError code from the return value of function $symbol() is not used." always "\nError code from the return value of function $symbol() is not used."
  :: always 0
  normal always 0
Line 258
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 260
  ! always {!<=-1,!>=2}
  function always symbolic=(scope->function)
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  function {symbolic=(scope->function),!0}
  ( always {!<=-1,!>=2}
Line 262
  function {symbolic=(scope->function),!0}
  == always {!<=-1,!>=2}
  "main" always "main"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  :: always 1
  C99 always 1
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 264
  function always !0
  . possible 3
  != {!<=-1,!>=2,1}
  :: always 5
  eFunction always 5
  && always {!<=-1,!>=2}
  function always !0
  . always !5
  != always {!<=-1,!>=2}
  :: always 3
  eOperatorEqual always 3
Line 266
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 268
  ( always {!<=-1,!>=2}
  true always 1
Line 272
  errorToken always !0
Line 276
  ( always {!<=-1,!>=2}
Line 278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "goto %name% ;" always "goto %name% ;"
Line 279
  return always {!<=-1,!>=2}
  false always 0
Line 281
  ( always {!<=-1,!>=2}
  "%name% :" always "%name% :"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 282
  return always {!<=-1,!>=2}
  true always 1
Line 283
  == always {!<=-1,!>=2}
  "{" always "{"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 284
  return always {!<=-1,!>=2}
  false always 0
Line 286
  return always {!<=-1,!>=2}
  false always 0
Line 291
  = always 0
  nullptr always 0
Line 292
  != always {!<=-1,!>=2}
  nullptr always 0
Line 293
  tok always !0
  == always {!<=-1,!>=2}
  ")" always ")"
Line 294
  tok always !0
Line 295
  ( possible size=1
  == always {!<=-1,!>=2}
  "{" always "{"
Line 296
  ? possible 1
  lastStatement always !0
  : always 1
Line 297
  == always {!<=-1,!>=2}
  "}" always "}"
Line 298
  && always {!<=-1,!>=2}
  prev always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  prev always !0
  "[;{}]" always "[;{}]"
Line 299
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return|throw" always "return|throw"
Line 300
  nullptr always 0
Line 301
  == always {!<=-1,!>=2}
  "goto" always "goto"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 302
  nullptr always 0
Line 304
  . possible {6,7}
  == {!<=-1,!>=2,0}
  :: always 11
  eSwitch always 11
Line 306
  hasDefault always {!<=-1,!>=2}
  hasDefault always {!<=-1,!>=2}
  = always 0
  false always 0
Line 307
  reachable always {!<=-1,!>=2}
  reachable always {!<=-1,!>=2}
  = always 0
  false always 0
Line 308
  != always {!<=-1,!>=2}
Line 309
  reachable always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "break ;" always "break ;"
Line 310
  ( always {!<=-1,!>=2}
  "}" always "}"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 311
  reachable always {!<=-1,!>=2}
  = always 0
  false always 0
Line 315
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return|throw" always "return|throw"
Line 316
  reachable always {!<=-1,!>=2}
  = always 0
  false always 0
Line 317
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 318
  reachable always {!<=-1,!>=2}
  = always 0
  false always 0
Line 319
  ( always {!<=-1,!>=2}
  "case|default" always "case|default"
Line 320
  reachable always {!<=-1,!>=2}
  = always 1
  true always 1
Line 321
  ( always {!<=-1,!>=2}
  "default :" always "default :"
Line 322
  hasDefault always {!<=-1,!>=2}
  = always 1
  true always 1
Line 323
  == always {!<=-1,!>=2}
  "{" always "{"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 11
  eSwitch always 11
Line 326
  ! {!<=-1,!>=2,1}
  hasDefault {!<=-1,!>=2,0}
Line 328
  . {7,!11}
  == {!<=-1,!>=2,0}
  :: always 6
  eIf always 6
Line 330
  condition always symbolic=(tok->scope()->classDef->next()->astOperand2())
  && always {!<=-1,!>=2}
  condition {symbolic=(tok->scope()->classDef->next()->astOperand2()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  condition {symbolic=(tok->scope()->classDef->next()->astOperand2()),!0}
  == always {!<=-1,!>=2}
  1 always 1
Line 333
  . always {!11,!6}
  == always {!<=-1,!>=2}
  :: always 7
  eElse always 7
Line 336
  errorToken always !0
Line 338
  ( always {!<=-1,!>=2}
  -2 always -2
  "} else {" always "} else {"
Line 339
  -2 always -2
Line 343
  nullptr always 0
Line 345
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return|throw" always "return|throw"
Line 346
  nullptr always 0
Line 347
  == always {!<=-1,!>=2}
  "goto" always "goto"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 348
  nullptr always 0
Line 349
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
  start possible symbolic=(tok)
  -2 always -2
  "%name% :: %name%" always "%name% :: %name%"
Line 352
  -2 always -2
Line 353
  ( always {!<=-1,!>=2}
  start possible symbolic=(tok)
  "[;{}] %name% ::|(" always "[;{}] %name% ::|("
Line 354
  nullptr always 0
Line 356
  ( always {!<=-1,!>=2}
  "[;{}] %name% :" always "[;{}] %name% :"
Line 358
  ( always {!<=-1,!>=2}
  "; !!}" always "; !!}"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 361
  nullptr always 0
Line 366
  tok possible 0@2
  :: always 1
  error always 1
  "missingReturn" always "missingReturn"
Line 367
  "Found a exit path from function with non-void return type that has missing return statement" always "Found a exit path from function with non-void return type that has missing return statement"
  :: always 0
  normal always 0
Line 374
  styleC99 always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 0
  C89 always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 0
  CPP03 always 0
Line 375
  printWarnings always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 378
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 379
  != always {!<=-1,!>=2}
Line 382
  printWarnings always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% ( !!)" always "%name% ( !!)"
Line 383
  -1 always -1
  != always {!<=-1,!>=2}
  "." always "."
Line 384
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "log|logf|logl|log10|log10f|log10l|log2|log2f|log2l ( %num% )" always "log|logf|logl|log10|log10f|log10l|log2|log2f|log2l ( %num% )"
Line 385
  2 always 2
Line 386
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
Line 387
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  0. always 0
Line 389
  ( always {!<=-1,!>=2}
  "log1p|log1pf|log1pl ( %num% )" always "log1p|log1pf|log1pl ( %num% )"
Line 390
  2 always 2
Line 391
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  -1 always -1
  || always {!<=-1,!>=2}
Line 392
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  -1. always -1
Line 396
  ( always {!<=-1,!>=2}
  "atan2|atan2f|atan2l ( %num% , %num% )" always "atan2|atan2f|atan2l ( %num% , %num% )"
Line 397
  ( always {!<=-1,!>=2}
  2 always 2
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  4 always 4
Line 398
  2 always 2
Line 401
  ( always {!<=-1,!>=2}
  "fmod|fmodf|fmodl (" always "fmod|fmodf|fmodl ("
Line 402
  2 always 2
Line 403
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  nextArg always !0
Line 404
  2 always 2
Line 407
  ( always {!<=-1,!>=2}
  "pow|powf|powl ( %num% , %num% )" always "pow|powf|powl ( %num% , %num% )"
Line 408
  ( always {!<=-1,!>=2}
  2 always 2
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  4 always 4
Line 409
  2 always 2
Line 413
  styleC99 always {!<=-1,!>=2}
Line 414
  ( always {!<=-1,!>=2}
  "%num% - erf (" always "%num% - erf ("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  3 always 3
Line 415
  "1 - erf(x)" always "1 - erf(x)"
  "erfc(x)" always "erfc(x)"
Line 416
  ( always {!<=-1,!>=2}
  "exp (" always "exp ("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
  ") - %num%" always ") - %num%"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
  2 always 2
  && always {!<=-1,!>=2}
  1 always 1
  == always {!<=-1,!>=2}
Line 417
  "exp(x) - 1" always "exp(x) - 1"
  "expm1(x)" always "expm1(x)"
Line 418
  ( always {!<=-1,!>=2}
  "log (" always "log ("
  && always {!<=-1,!>=2}
Line 419
  = always !0
  ( always !0
Line 420
  plus {symbolic=(tok->next()->astOperand2()),!0}
  == always {!<=-1,!>=2}
  "+" always "+"
  && always {!<=-1,!>=2}
  plus {symbolic=(tok->next()->astOperand2()),!0}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  plus {symbolic=(tok->next()->astOperand2()),!0}
  ( always !0
  || always {!<=-1,!>=2}
  plus {symbolic=(tok->next()->astOperand2()),!0}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  plus {symbolic=(tok->next()->astOperand2()),!0}
  ( always !0
Line 421
  "log(1 + x)" always "log(1 + x)"
  "log1p(x)" always "log1p(x)"
Line 430
  tok possible 0@253
Line 431
  numParam possible 2
  == {!<=-1,!>=2,0}
  1 always 1
Line 432
  tok always !0
  :: always 2
  warning always 2
  "wrongmathcall" always "wrongmathcall"
  "$symbol:" always "$symbol:"
  tok always !0
  "\nPassing value " always "\nPassing value "
  tok always !0
  2 always 2
  " to $symbol() leads to implementation-defined result." always " to $symbol() leads to implementation-defined result."
  :: always 0
  normal always 0
Line 433
  numParam {!1,2@78}
  == always {!<=-1,!>=2}
  2 always 2
Line 434
  tok always !0
  :: always 2
  warning always 2
  "wrongmathcall" always "wrongmathcall"
  "$symbol:" always "$symbol:"
  tok always !0
  "\nPassing values " always "\nPassing values "
  tok always !0
  2 always 2
  " and " always " and "
  tok always !0
  4 always 4
  " to $symbol() leads to implementation-defined result." always " to $symbol() leads to implementation-defined result."
  :: always 0
  normal always 0
Line 436
  tok always 0
  :: always 2
  warning always 2
  "wrongmathcall" always "wrongmathcall"
  "Passing value '#' to #() leads to implementation-defined result." always "Passing value '#' to #() leads to implementation-defined result."
  :: always 0
  normal always 0
Line 441
  tok possible 0@254
  :: always 3
  style always 3
  "unpreciseMathCall" always "unpreciseMathCall"
  "Expression '" always "Expression '"
  oldexp possible {"1 - erf(x)"@85,"exp(x) - 1"@90,"log(1 + x)"@103,"1 - erf(x)"@254}
  "' can be replaced by '" always "' can be replaced by '"
  newexp possible {"erfc(x)"@85,"expm1(x)"@90,"log1p(x)"@103,"erfc(x)"@254}
  "' to avoid loss of precision." always "' to avoid loss of precision."
  :: always 0
  normal always 0
Line 456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 460
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 461
  != always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
  "memset|wmemset (" always "memset|wmemset ("
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  3 always 3
Line 463
  arguments possible size=3
Line 464
  ( always !<=-1
  != always {!<=-1,!>=2}
  3U always 3
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "arguments.size()!=3U" always "arguments.size()!=3U"
Line 466
  2 always 2
Line 467
  ( always {!<=-1,!>=2}
  lastParamTok always symbolic=(arguments[2])
Line 476
  "memset() called to fill 0 bytes." always "memset() called to fill 0 bytes."
Line 477
  " The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value." always " The second and third arguments might be inverted. The function memset ( void * ptr, int value, size_t num ) sets the first num bytes of the block of memory pointed by ptr to the specified value."
Line 480
  tok possible 0@255
  :: always 2
  warning always 2
  "memsetZeroBytes" always "memsetZeroBytes"
  "\n" always "\n"
  :: always 0
  normal always 0
Line 493
  printPortability always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 5
  portability always 5
Line 494
  printWarning always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 495
  ! {!<=-1,!>=2,1}
  printWarning {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  printPortability always {!<=-1,!>=2}
Line 499
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 500
  && always {!<=-1,!>=2}
  tok always !0
  != always {!<=-1,!>=2}
Line 501
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "memset (" always "memset ("
Line 504
  args possible size=3
Line 505
  ( always !<=-1
  != always {!<=-1,!>=2}
  3 always 3
Line 509
  args always size=3
  1 always 1
Line 510
  ( always {!<=-1,!>=2}
  secondParamTok always symbolic=(args[1])
  "%num% ," always "%num% ,"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  secondParamTok always symbolic=(args[1])
Line 514
  printPortability always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  secondParamTok always symbolic=(args[1])
  false always 0
Line 515
  secondParamTok always symbolic=(args[1])
  secondParamTok always symbolic=(args[1])
Line 518
  printWarning always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  secondParamTok always symbolic=(args[1])
  ( always {!<=-1,!>=2}
Line 519
  secondParamTok always symbolic=(args[1])
Line 522
  value always symbolic=(MathLib::toLongNumber(secondParamTok->str()))
  < always {!<=-1,!>=2}
  sCharMin always symbolic=(mSettings->signedCharMin())
  || always {!<=-1,!>=2}
  value {symbolic=(MathLib::toLongNumber(secondParamTok->str())),!<=symbolic=(sCharMin-1),>=symbolic=(sCharMin)}
  > always {!<=-1,!>=2}
  uCharMax always symbolic=(mSettings->unsignedCharMax())
Line 523
  secondParamTok always symbolic=(args[1])
  secondParamTok always symbolic=(args[1])
Line 531
  "The 2nd memset() argument '" always "The 2nd memset() argument '"
  var_value possible "varname"
Line 532
  "' is a float, its representation is implementation defined." always "' is a float, its representation is implementation defined."
Line 533
  " memset() is used to set each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined." always " memset() is used to set each byte of a block of memory to a specific value and the actual representation of a floating-point value is implementation defined."
Line 535
  tok possible {symbolic=(args[1])@50,0}
  :: always 5
  portability always 5
  "memsetFloat" always "memsetFloat"
  "\n" always "\n"
  :: always 0
  normal always 0
Line 540
  "The 2nd memset() argument '" always "The 2nd memset() argument '"
  value possible "varname"@1
  "' doesn't fit into an 'unsigned char'." always "' doesn't fit into an 'unsigned char'."
Line 541
  " The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value." always " The 2nd parameter is passed as an 'int', but the function fills the block of memory using the 'unsigned char' conversion of this value."
Line 542
  tok possible {symbolic=(args[1])@55,0@1}
  :: always 2
  warning always 2
  "memsetValueOutOfRange" always "memsetValueOutOfRange"
  "\n" always "\n"
  :: always 0
  normal always 0
Line 551
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checkLibrary always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
Line 554
  insideNew always {!<=-1,!>=2}
  insideNew always {!<=-1,!>=2}
  = always 0
  false always 0
Line 556
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 559
  ( possible size=1
  == {!<=-1,!>=2,0}
  "new" always "new"
Line 560
  insideNew always {!<=-1,!>=2}
  = always 1
  true always 1
Line 561
  == always {!<=-1,!>=2}
  ";" always ";"
Line 562
  insideNew always {!<=-1,!>=2}
  = always 0
  false always 0
Line 563
  insideNew always {!<=-1,!>=2}
Line 566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "asm|sizeof|catch" always "asm|sizeof|catch"
Line 569
  != always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 572
  1 always 1
  1 always 1
  == always {!<=-1,!>=2}
  "(" always "("
Line 578
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 582
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( possible {lifetime[Iterator]=(mSettings->library.functions),lifetime[Object]=(functions)}
  functionName always !size=0
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSettings->library.functions),lifetime[Object]=(functions),end=0}
Line 586
  :: always 6
  information always 6
Line 587
  "checkLibraryFunction" always "checkLibraryFunction"
Line 588
  "--check-library: There is no matching configuration for function " always "--check-library: There is no matching configuration for function "
  "()" always "()"
Line 597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  :: always 1
  CPP11 always 1
Line 600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 4
  performance always 4
Line 604
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 606
  ( always {!<=-1,!>=2}
  true always 1
Line 610
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  -3 always -3
  "std :: move (" always "std :: move ("
Line 614
  retval always symbolic=(ret->astOperand2())
  && always {!<=-1,!>=2}
  retval always symbolic=(ret->astOperand2())
  ( always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  retval always symbolic=(ret->astOperand2())
  ( always !0
  ( always {!<=-1,!>=2}
Line 615
  retval always symbolic=(ret->astOperand2())
Line 617
  ( always {!<=-1,!>=2}
  retval always symbolic=(ret->astOperand2())
  "(|{" always "(|{"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  retval always symbolic=(ret->astOperand2())
  ( always {!<=-1,!>=2}
Line 618
  retval always symbolic=(ret->astOperand2())
Line 625
  tok possible {symbolic=(ret->astOperand2())@24,0@3}
Line 626
  :: always 4
  performance always 4
Line 627
  "returnStdMoveLocal" always "returnStdMoveLocal"
Line 628
  "Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local" always "Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local"
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,4@15,6@27,5@43,2@44,3@70}
  flag possible {4@15,6@27,5@43,2@44,3@70}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
