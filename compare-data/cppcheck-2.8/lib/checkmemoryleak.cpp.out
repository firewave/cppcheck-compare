

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744512 !@expr1073744513 mTokenizer@var28 ) {
69: instances (@expr1073744514 ) .@expr1073744515 remove (@expr1073744516 this@expr1073744517 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744518 string (@expr1073744519 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744520 void ) tokenizer@var21 ;
108: (@expr1073744521 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744522 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744523 void ) ctu@var24 ;
120: (@expr1073744524 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744525 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744526 0U ) , Certainty ::@expr1073744527 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744528 list < const Token *@expr1073744529 > callstack@var41 (@expr1073744530 1 , tok@var35 ) ;
141: reportError (@expr1073744531 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744532 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744533 0U ) , Certainty ::@expr1073744534 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var64 ;
42: double mDoubleValue@var65 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var66 ;
44: bool mIsUnsigned@var67 ;
45:
46: void promote ( const value & v@var68 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var69 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var66 !=@expr1073744535 Type ::@expr1073744536 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var66 ==@expr1073744537 Type ::@expr1073744538 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744539 ) ?@expr1073744540 mDoubleValue@var65 :@expr1073744541 (@expr1073744542 double ) mIntValue@var64 ;
60: }
61:
62: static value calc ( char op@var70 , const value & v1@var71 , const value & v2@var72 ) ;
63: int compare ( const value & v@var73 ) const ;
64: value add ( int v@var74 ) const ;
65: value shiftLeft ( const value & v@var75 ) const ;
66: value shiftRight ( const value & v@var76 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var77 ;
72:
73: static long long toLongNumber ( const std :: string & str@var78 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var79 ) ;
75:
76: template < class T > static std :: string toString ( T value@var80 ) {
77: std ::@expr1073744543 ostringstream result@var81 ;
78: result@var81 <<@expr1073744544 value@var80 ;
79: return result@var81 .@expr1073744545 str (@expr1073744546 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var82 ) ;
82:
83: static bool isInt ( const std :: string & str@var83 ) ;
84: static bool isFloat ( const std :: string & str@var84 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var85 ) ;
86: static bool isNegative ( const std :: string & str@var86 ) ;
87: static bool isPositive ( const std :: string & str@var87 ) ;
88: static bool isDec ( const std :: string & str@var88 ) ;
89: static bool isFloatHex ( const std :: string & str@var89 ) ;
90: static bool isIntHex ( const std :: string & str@var90 ) ;
91: static bool isOct ( const std :: string & str@var91 ) ;
92: static bool isBin ( const std :: string & str@var92 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var93 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var94 , bool supportMicrosoftExtensions@var95 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var96 , const std :: string & second@var97 ) ;
105: static std :: string subtract ( const std :: string & first@var98 , const std :: string & second@var99 ) ;
106: static std :: string multiply ( const std :: string & first@var100 , const std :: string & second@var101 ) ;
107: static std :: string divide ( const std :: string & first@var102 , const std :: string & second@var103 ) ;
108: static std :: string mod ( const std :: string & first@var104 , const std :: string & second@var105 ) ;
109: static std :: string incdec ( const std :: string & var@var106 , const std :: string & op@var107 ) ;
110: static std :: string calculate ( const std :: string & first@var108 , const std :: string & second@var109 , char action@var110 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var111 ) ;
113: static std :: string cos ( const std :: string & tok@var112 ) ;
114: static std :: string tan ( const std :: string & tok@var113 ) ;
115: static std :: string abs ( const std :: string & tok@var114 ) ;
116: static bool isEqual ( const std :: string & first@var115 , const std :: string & second@var116 ) ;
117: static bool isNotEqual ( const std :: string & first@var117 , const std :: string & second@var118 ) ;
118: static bool isGreater ( const std :: string & first@var119 , const std :: string & second@var120 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var121 , const std :: string & second@var122 ) ;
120: static bool isLess ( const std :: string & first@var123 , const std :: string & second@var124 ) ;
121: static bool isLessEqual ( const std :: string & first@var125 , const std :: string & second@var126 ) ;
122: static bool isNullValue ( const std :: string & str@var127 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var128 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var129 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var130 , std :: string :: size_type iPos@var131 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var132 , const MathLib :: value & v2@var133 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var134 , const MathLib :: value & v2@var135 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var136 , const MathLib :: value & v2@var137 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var138 , const MathLib :: value & v2@var139 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var140 , const MathLib :: value & v2@var141 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var142 , const MathLib :: value & v2@var143 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var144 , const MathLib :: value & v2@var145 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var146 , const MathLib :: value & v2@var147 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var148 , const MathLib :: value & v2@var149 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var150 , const MathLib :: value & v2@var151 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var152 ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var153 ) const {
54: x@var153 ++@expr1073744547 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var154 ) const {
60: x@var154 --@expr1073744548 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var155 , const U & y@var156 ) const {
67: return x@var155 <@expr1073744549 y@var156 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var157 , const U & y@var158 ) const {
74: return std ::@expr1073744550 abs (@expr1073744551 x@var157 -@expr1073744552 y@var158 ) ==@expr1073744553 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var159 , T x@var160 , U y@var161 ) const {
81: result@var159 =@expr1073744554 !@expr1073744555 (@expr1073744556 x@var160 >@expr1073744557 y@var161 ||@expr1073744558 x@var160 <@expr1073744559 y@var161 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var162 = 0 , Bound b@var163 = Bound :: Point )
91: : valueType@var203 ( ValueType :: INT ) ,
92: bound@var204 ( b@var163 ) ,
93: intvalue@var205 ( val@var162 ) ,
94: tokvalue@var206 ( nullptr ) ,
95: floatValue@var207 ( 0.0 ) ,
96: moveKind@var208 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var209 ( val@var162 ) ,
98: condition@var210 ( nullptr ) ,
99: varId@var212 ( 0U ) ,
100: safe@var213 ( false ) ,
101: conditional@var214 ( false ) ,
102: macro@var215 ( false ) ,
103: defaultArg@var216 ( false ) ,
104: indirect@var217 ( 0 ) ,
105: path@var218 ( 0 ) ,
106: wideintvalue@var219 ( val@var162 ) ,
107: subexpressions@var220 ( ) ,
108: capturetok@var221 ( nullptr ) ,
109: lifetimeKind@var222 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var223 ( LifetimeScope :: Local ) ,
111: valueKind@var228 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var164 , long long val@var165 , Bound b@var166 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var167 ) const {
118: if (@expr1073744560 valueType@var203 !=@expr1073744561 rhs@var167 .@expr1073744562 valueType@var168 ) {
119: return false ; }
120: switch (@expr1073744563 valueType@var203 ) {
121: case ValueType ::@expr1073744564 INT :@expr2741
122: case ValueType ::@expr1073744566 CONTAINER_SIZE :@expr2741
123: case ValueType ::@expr1073744568 BUFFER_SIZE :@expr2741
124: case ValueType ::@expr1073744570 ITERATOR_START :@expr2741
125: case ValueType ::@expr1073744572 ITERATOR_END :@expr2741 ;
126: if (@expr2750 intvalue@var205 !=@expr2751 rhs@var167 .@expr2752 intvalue@var169 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744577 TOK :@expr2741 ;
130: if (@expr2755 tokvalue@var206 !=@expr2756 rhs@var167 .@expr2757 tokvalue@var170 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744582 FLOAT :@expr2741 ;
134:
135: if (@expr1073744584 floatValue@var207 >@expr1073744585 rhs@var167 .@expr2762 floatValue@var171 ||@expr1073744587 floatValue@var207 <@expr1073744588 rhs@var167 .@expr2762 floatValue@var171 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744590 MOVED :@expr2741 ;
139: if (@expr1073744592 moveKind@var208 !=@expr1073744593 rhs@var167 .@expr1073744594 moveKind@var172 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744595 UNINIT :@expr2741 ;
143: break ;
144: case ValueType ::@expr1073744597 LIFETIME :@expr2741 ;
145: if (@expr2755 tokvalue@var206 !=@expr2756 rhs@var167 .@expr2757 tokvalue@var170 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744602 SYMBOLIC :@expr2741 ;
149: if (@expr1073744604 !@expr1073744605 sameToken (@expr1073744606 tokvalue@var206 , rhs@var167 .@expr2757 tokvalue@var170 ) ) {
150: return false ; }
151: if (@expr2750 intvalue@var205 !=@expr2751 rhs@var167 .@expr2752 intvalue@var169 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var173 , F f@var174 ) {
160: switch (@expr1073744611 self@var173 .@expr1073744612 valueType@var175 ) {
161: case ValueType ::@expr1073744613 INT :@expr2790
162: case ValueType ::@expr1073744615 SYMBOLIC :@expr2790
163: case ValueType ::@expr1073744617 BUFFER_SIZE :@expr2790
164: case ValueType ::@expr1073744619 CONTAINER_SIZE :@expr2790
165: case ValueType ::@expr1073744621 ITERATOR_START :@expr2790
166: case ValueType ::@expr1073744623 ITERATOR_END :@expr2790 ; {
167: f@var174 (@expr1073744625 self@var173 .@expr1073744626 intvalue@var176 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744627 FLOAT :@expr2790 ; {
171: f@var174 (@expr1073744629 self@var173 .@expr1073744630 floatValue@var177 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744631 UNINIT :@expr2790
175: case ValueType ::@expr1073744633 TOK :@expr2790
176: case ValueType ::@expr1073744635 LIFETIME :@expr2790
177: case ValueType ::@expr1073744637 MOVED :@expr2790 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var178 , Compare compare@var179 , T x@var180 , U y@var181 ) const {
186: result@var178 =@expr1073744639 compare@var179 (@expr1073744640 x@var180 , y@var181 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var182 , const Value & rhs@var183 , Compare compare@var184 , T x@var185 ) const {
191: visitValue (@expr1073744642 rhs@var183 ,
192: std ::@expr1073744643 bind (@expr1073744644 innerVisitor {@expr1073744645 } , std ::@expr1073744646 ref (@expr1073744647 result@var182 ) , std ::@expr1073744648 move (@expr1073744649 compare@var184 ) , x@var185 , std ::@expr1073744650 placeholders ::@expr1073744651 _1@expr1073744641 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var186 , Compare compare@var187 ) const {
198: assert (@expr1073744653 (@expr1073744654 !@expr1073744655 this@expr2832 .@expr1073744657 isSymbolicValue (@expr1073744658 ) &&@expr1073744659 !@expr1073744660 rhs@var186 .@expr1073744661 isSymbolicValue (@expr1073744662 ) ) ||@expr1073744663
199: (@expr1073744664 this@expr2832 .@expr1073744665 valueType@var203 ==@expr1073744666 rhs@var186 .@expr1073744667 valueType@var188 &&@expr1073744668 sameToken (@expr1073744669 this@expr2832 .@expr1073744670 tokvalue@var206 , rhs@var186 .@expr1073744671 tokvalue@var189 ) ) ) ;
200: bool result@var190 ; result@var190 =@expr1073744672 false ;
201: visitValue (@expr1073744673
202: *@expr1073744674 this@expr2832 ,
203: std ::@expr1073744675 bind (@expr1073744676 compareVisitor {@expr1073744677 } , std ::@expr2854 ref (@expr1073744679 result@var190 ) , std ::@expr2854 ref (@expr1073744681 rhs@var186 ) , std ::@expr1073744682 move (@expr1073744683 compare@var187 ) , std ::@expr1073744684 placeholders ::@expr1073744685 _1@expr1073744652 ) ) ;
204: return result@var190 ;
205: }
206:
207: bool operator== ( const Value & rhs@var191 ) const {
208: if (@expr1073744686 !@expr1073744687 equalValue (@expr1073744688 rhs@var191 ) ) {
209: return false ; }
210:
211: return varvalue@var209 ==@expr1073744689 rhs@var191 .@expr1073744690 varvalue@var192 &&@expr1073744691
212: condition@var210 ==@expr1073744692 rhs@var191 .@expr1073744693 condition@var193 &&@expr1073744694
213: varId@var212 ==@expr1073744695 rhs@var191 .@expr1073744696 varId@var194 &&@expr1073744697
214: conditional@var214 ==@expr1073744698 rhs@var191 .@expr1073744699 conditional@var195 &&@expr1073744700
215: defaultArg@var216 ==@expr1073744701 rhs@var191 .@expr1073744702 defaultArg@var196 &&@expr1073744703
216: indirect@var217 ==@expr1073744704 rhs@var191 .@expr1073744705 indirect@var197 &&@expr1073744706
217: valueKind@var228 ==@expr1073744707 rhs@var191 .@expr1073744708 valueKind@var198 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var199 ) const {
221: return !@expr1073744709 (@expr1073744710 *@expr1073744711 this@expr1073744712 ==@expr1073744713 rhs@var199 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var200 ) const {
226: bool result@var201 ; result@var201 =@expr1073744715 false ;
227: visitValue (@expr1073744716 *@expr1073744717 this@expr1073744718 , std ::@expr1073744719 bind (@expr1073744720 equalVisitor {@expr1073744721 } , std ::@expr1073744722 ref (@expr1073744723 result@var201 ) , x@var200 , std ::@expr1073744724 placeholders ::@expr1073744725 _1@expr1073744714 ) ) ;
228: return result@var201 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744726 bound@var204 ==@expr1073744727 Bound ::@expr1073744728 Lower ) {
233: visitValue (@expr1073744729 *@expr2906 this@expr2907 , increment {@expr1073744732 } ) ; }
234: else { if (@expr1073744733 bound@var204 ==@expr1073744734 Bound ::@expr1073744735 Upper ) {
235: visitValue (@expr1073744736 *@expr2906 this@expr2907 , decrement {@expr1073744738 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744739 bound@var204 ==@expr1073744740 Bound ::@expr2917 Lower ) {
240: bound@var204 =@expr1073744742 Bound ::@expr2919 Upper ; }
241: else { if (@expr1073744744 bound@var204 ==@expr1073744745 Bound ::@expr2919 Upper ) {
242: bound@var204 =@expr1073744747 Bound ::@expr2917 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744749 ) ;
247: decreaseRange (@expr1073744750 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var202 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var203 ;
267: bool isIntValue ( ) const {
268: return valueType@var203 ==@expr1073744751 ValueType ::@expr1073744752 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var203 ==@expr1073744753 ValueType ::@expr1073744754 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var203 ==@expr1073744755 ValueType ::@expr1073744756 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var203 ==@expr1073744757 ValueType ::@expr1073744758 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var203 ==@expr1073744759 ValueType ::@expr1073744760 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var203 ==@expr1073744761 ValueType ::@expr1073744762 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var203 ==@expr1073744763 ValueType ::@expr1073744764 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var203 ==@expr1073744765 ValueType ::@expr1073744766 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var203 ==@expr1073744767 ValueType ::@expr1073744768 ITERATOR_START ||@expr1073744769 valueType@var203 ==@expr1073744770 ValueType ::@expr1073744771 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var203 ==@expr1073744772 ValueType ::@expr1073744773 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var203 ==@expr1073744774 ValueType ::@expr1073744775 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var203 ==@expr1073744776 ValueType ::@expr1073744777 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var203 ==@expr1073744779 ValueType ::@expr1073744780 LIFETIME &&@expr1073744781 lifetimeScope@var223 ==@expr1073744782 LifetimeScope ::@expr1073744783 Local@expr1073744778 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var203 ==@expr1073744784 ValueType ::@expr1073744785 LIFETIME &&@expr1073744786 lifetimeScope@var223 ==@expr1073744787 LifetimeScope ::@expr1073744788 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var203 ==@expr1073744789 ValueType ::@expr1073744790 LIFETIME &&@expr1073744791 lifetimeScope@var223 ==@expr1073744792 LifetimeScope ::@expr1073744793 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744794 ) ||@expr1073744795 isUninitValue (@expr1073744796 ) ||@expr1073744797 isLifetimeValue (@expr1073744798 ) ;
318: }
319:
320:
321: Bound bound@var204 ;
322:
323:
324: long long intvalue@var205 ;
325:
326:
327: const Token * tokvalue@var206 ;
328:
329:
330: double floatValue@var207 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var208 ;
334:
335:
336: long long varvalue@var209 ;
337:
338:
339: const Token * condition@var210 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var211 ;
342:
343:
344: int varId@var212 ;
345:
346:
347: bool safe@var213 ;
348:
349:
350: bool conditional@var214 ;
351:
352:
353: bool macro@var215 ;
354:
355:
356: bool defaultArg@var216 ;
357:
358: int indirect@var217 ;
359:
360:
361: long long path@var218 ;
362:
363:
364: long long wideintvalue@var219 ;
365:
366: std :: vector < std :: string > subexpressions@var220 ;
367:
368:
369: const Token * capturetok@var221 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var222 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var223 ;
385:
386: static const char * toString ( MoveKind moveKind@var224 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var225 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var226 ) ;
389: static const char * toString ( Bound bound@var227 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var228 ;
402:
403: void setKnown ( ) {
404: valueKind@var228 =@expr1073744799 ValueKind ::@expr1073744800 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var228 ==@expr1073744801 ValueKind ::@expr1073744802 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var228 =@expr1073744804 ValueKind ::@expr1073744805 Possible@expr1073744803 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var228 ==@expr1073744807 ValueKind ::@expr1073744808 Possible@expr1073744806 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var228 ==@expr1073744809 ValueKind ::@expr1073744810 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var228 =@expr1073744811 ValueKind ::@expr1073744812 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var229 = true ) {
428: if (@expr1073744813 inconclusive@var229 ) {
429: valueKind@var228 =@expr1073744814 ValueKind ::@expr1073744815 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var228 ==@expr1073744816 ValueKind ::@expr1073744817 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744819 isKnown (@expr1073744820 ) ) {
438: valueKind@var228 =@expr1073744821 ValueKind ::@expr1073744822 Possible@expr1073744818 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744823 condition@var210 &&@expr1073744824 !@expr1073744825 defaultArg@var216 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var230 , const Token * tok2@var231 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var232 , const Settings * settings@var233 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var234 , SymbolDatabase * symboldatabase@var235 , ErrorLogger * errorLogger@var236 , const Settings * settings@var237 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var238 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var239 , const Settings * settings@var240 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var241 ,
459: const Settings * settings@var242 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var243 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var244 , const Token * indexTok@var245 , bool possible@var246 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var247 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var248 , const Settings * settings@var249 = nullptr , int depth@var250 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var251 ;
471: bool addressOf@var252 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var253 ;
473: bool inconclusive@var254 ;
474:
475: LifetimeToken ( ) : token@var251 ( nullptr ) , addressOf@var252 ( false ) , errorPath@var253 ( ) , inconclusive@var254 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var255 , ValueFlow :: Value :: ErrorPath errorPath@var256 )
478: : token@var251 ( token@var255 ) , addressOf@var252 ( false ) , errorPath@var253 ( std :: move ( errorPath@var256 ) ) , inconclusive@var254 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var257 , bool addressOf@var258 , ValueFlow :: Value :: ErrorPath errorPath@var259 )
482: : token@var251 ( token@var257 ) , addressOf@var252 ( addressOf@var258 ) , errorPath@var253 ( std :: move ( errorPath@var259 ) ) , inconclusive@var254 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var260 , bool b@var261 ) {
486: for (@expr1073744826 LifetimeToken &@expr1073744827 x@var262 :@expr1073744828 v@var260 ) {
487: x@var262 .@expr1073744829 addressOf@var263 =@expr1073744830 b@var261 ; }
488: return v@var260 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var264 , bool b@var265 ) {
492: for (@expr1073744831 LifetimeToken &@expr1073744832 x@var266 :@expr1073744833 v@var264 ) {
493: x@var266 .@expr1073744834 inconclusive@var267 =@expr1073744835 b@var265 ; }
494: return v@var264 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var268 , ValueFlow :: Value & true_value@var269 , ValueFlow :: Value & false_value@var270 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var271 ) ;
499: const Token * parseCompareInt ( const Token * tok@var272 , ValueFlow :: Value & true_value@var273 , ValueFlow :: Value & false_value@var274 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var275 , long long val@var276 , const Token * varTok@var277 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var278 , const Token * varTok@var279 , long long val@var280 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var281 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var282 ,
508: ValueFlow :: Value & value@var283 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var284 ,
511: bool escape@var285 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var286 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var287 , const Token * lifetime@var288 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var289 , ValueFlow :: Value :: ErrorPath & errorPath@var290 , bool * addressOf@var291 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var292 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var293 , const Settings * settings@var294 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var295 , const ValueFlow :: Value * val@var296 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var297 , const ValueFlow :: Value * val@var298 , ValueFlow :: Value :: ErrorPath & errorPath@var299 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var300 , bool inconclusive@var301 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var302 ,
529: bool inconclusive@var303 = false ,
530: long long path@var304 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var305 , const Scope * defaultScope@var306 = nullptr , bool smallest@var307 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var308 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var309 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var310 ;
69: std :: string mScope@var311 ;
70: std :: string mName@var312 ;
71: std :: string mFullName@var313 ;
72: const Token * mNameToken@var314 ;
73: const Token * mParamEnd@var315 ;
74: unsigned int mFlags@var316 ;
75:
76: enum Anonymous0 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var317 ) {
90: setFlag (@expr1073744836 fIsClass , state@var317 ) ;
91: }
92: void isFunction ( bool state@var318 ) {
93: setFlag (@expr1073744837 fIsFunction , state@var318 ) ;
94: }
95: void isVariable ( bool state@var319 ) {
96: setFlag (@expr1073744838 fIsVariable , state@var319 ) ;
97: }
98: void isAlias ( bool state@var320 ) {
99: setFlag (@expr1073744839 fIsAlias , state@var320 ) ;
100: }
101: void isSpecialization ( bool state@var321 ) {
102: setFlag (@expr1073744840 fIsSpecialization , state@var321 ) ;
103: }
104: void isPartialSpecialization ( bool state@var322 ) {
105: setFlag (@expr1073744841 fIsPartialSpecialization , state@var322 ) ;
106: }
107: void isForwardDeclaration ( bool state@var323 ) {
108: setFlag (@expr1073744842 fIsForwardDeclaration , state@var323 ) ;
109: }
110: void isVariadic ( bool state@var324 ) {
111: setFlag (@expr1073744843 fIsVariadic , state@var324 ) ;
112: }
113: void isFriend ( bool state@var325 ) {
114: setFlag (@expr1073744844 fIsFriend , state@var325 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var326 ) const {
123: return (@expr3021 (@expr3021 mFlags@var316 &@expr1073744847 flag@var326 ) !=@expr1073744848 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var327 , bool state@var328 ) {
132: mFlags@var316 =@expr1073744849 state@var328 ?@expr1073744850 mFlags@var316 |@expr1073744851 flag@var327 :@expr1073744852 mFlags@var316 &@expr1073744853 ~@expr1073744854 flag@var327 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var329 , const std :: string & scope@var330 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var331 , const std :: string & scope@var332 , const Token * nameToken@var333 , const Token * paramEnd@var334 ) ;
150: TokenAndName ( const TokenAndName & other@var335 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var336 ) const {
154: return mToken@var310 ==@expr1073744855 rhs@var336 .@expr1073744856 mToken@var337 &&@expr1073744857 mScope@var311 ==@expr1073744858 rhs@var336 .@expr1073744859 mScope@var338 &&@expr1073744860 mName@var312 ==@expr1073744861 rhs@var336 .@expr1073744862 mName@var339 &&@expr1073744863 mFullName@var313 ==@expr1073744864 rhs@var336 .@expr1073744865 mFullName@var340 &&@expr1073744866
155: mNameToken@var314 ==@expr1073744867 rhs@var336 .@expr1073744868 mNameToken@var341 &&@expr1073744869 mParamEnd@var315 ==@expr1073744870 rhs@var336 .@expr1073744871 mParamEnd@var342 &&@expr1073744872 mFlags@var316 ==@expr1073744873 rhs@var336 .@expr1073744874 mFlags@var343 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var310 ;
160: }
161: void token ( Token * token@var344 ) {
162: mToken@var310 =@expr1073744875 token@var344 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var311 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var312 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var313 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var314 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var315 ;
178: }
179: void paramEnd ( const Token * end@var345 ) {
180: mParamEnd@var315 =@expr1073744876 end@var345 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744877 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744878 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744879 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744880 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744881 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744882 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744883 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744884 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744885 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var346 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var347 ) const {
243:
244:
245: return (@expr3062 (@expr3062 mFlags@var316 &@expr1073744888 fFamilyMask ) &@expr1073744889 (@expr3062 decl@var347 .@expr1073744891 mFlags@var348 &@expr1073744892 fFamilyMask ) ) !=@expr1073744893 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var349 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var350 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var351 , const unsigned long numberOfArguments@var352 , bool variadic@var353 , const char patternAfter@var354 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var355 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var356 , int & namepos@var357 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var358 , int & namepos@var359 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var360 , int & namepos@var361 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var362 ,
306: bool & codeWithTemplates@var363 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var364 , bool isTemplate@var365 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var366 = nullptr , Token * backToken@var367 = nullptr , bool isTemplate@var368 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var369 , Token * end@var370 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var371 , const std :: string & scope@var372 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var373 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var374 ,
393: const std :: list < const Token * > & specializations@var375 ,
394: const std :: time_t maxtime@var376 ,
395: std :: set < std :: string > & expandedtemplates@var377 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var378 , const Token * tok@var379 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var380 , const Token * tok@var381 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var382 ,
422: const TokenAndName & templateInstantiation@var383 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var384 ,
424: const std :: string & newName@var385 ,
425: bool copy@var386 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var387 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var388 ,
435: const std :: string & newName@var389 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var390 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var391 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var392 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var393 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var394 ,
458: const Token * templateInstantiationNameToken@var395 ,
459: const std :: list < const Token * > & specializations@var396 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var397 , const Token * end@var398 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var399 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var400 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var401 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var402 ,
487: const std :: string & indent@var403 = "    " ) const ;
488: void printOut ( const std :: string & text@var404 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var405 ;
491: TokenList & mTokenList@var406 ;
492: const Settings * mSettings@var407 ;
493: ErrorLogger * mErrorLogger@var408 ;
494: bool mChanged@var409 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var410 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var411 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var412 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var413 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var414 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var415 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var416 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var417 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var418 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var419 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var420 ;
507: } ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var421 ) const {
35: return p@var421 .@expr1073744894 first@var422 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var423 ) const {
42: return p@var423 .@expr1073744895 second@var424 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var425 , const T & x@var426 )
48: {
49: return std ::@expr1073744896 find (@expr1073744897 r@var425 .@expr1073744898 begin (@expr1073744899 ) , r@var425 .@expr3076 end (@expr3077 ) , x@var426 ) !=@expr1073744902 r@var425 .@expr3076 end (@expr3077 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var427 , const T & x@var428 )
54: {
55: return std ::@expr1073744905 find (@expr1073744906 r@var427 .@expr1073744907 begin (@expr1073744908 ) , r@var427 .@expr3085 end (@expr3086 ) , x@var428 ) !=@expr1073744911 r@var427 .@expr3085 end (@expr3086 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var429 , const U & x@var430 )
60: {
61: return std ::@expr1073744914 find (@expr1073744915 r@var429 .@expr1073744916 begin (@expr1073744917 ) , r@var429 .@expr3094 end (@expr3095 ) , x@var430 ) !=@expr1073744920 r@var429 .@expr3094 end (@expr3095 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var431 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744923 t@var431 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var432 , char c@var433 )
74: {
75: return !@expr1073744924 str@var432 .@expr1073744925 empty (@expr1073744926 ) &&@expr1073744927 str@var432 .@expr1073744928 back (@expr1073744929 ) ==@expr1073744930 c@var433 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var434 , const char end@var435 [ ] , unsigned long endlen@var436 )
79: {
80: return (@expr3107 str@var434 .@expr3108 size (@expr3109 ) >=@expr1073744934 endlen@var436 ) &&@expr1073744935 (@expr3107 str@var434 .@expr1073744937 compare (@expr1073744938 str@var434 .@expr3108 size (@expr3109 ) -@expr1073744941 endlen@var436 , endlen@var436 , end@var435 ) ==@expr1073744942 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var437 , const char ( & end@var438 ) [ N ] )
85: {
86: return endsWith (@expr1073744944 str@var437 , end@var438 , N@expr1073744943 -@expr1073744945 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var439 , char q@var440 , const std :: string & p@var441 )
90: {
91: if (@expr1073744946 !@expr1073744947 endsWith (@expr1073744948 str@var439 , q@var440 ) ) {
92: return false ; }
93: if (@expr1073744949 (@expr1073744950 str@var439 .@expr1073744951 length (@expr1073744952 ) +@expr1073744953 1 ) >@expr1073744954 p@var441 .@expr1073744955 length (@expr1073744956 ) &&@expr1073744957 (@expr1073744958 str@var439 .@expr1073744959 compare (@expr1073744960 0 , p@var441 .@expr1073744961 size (@expr1073744962 ) +@expr1073744963 1 , p@var441 +@expr1073744964 q@var440 ) ==@expr1073744965 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var442 , char q@var443 )
99: {
100: static const std ::@expr3142 vector < std ::@expr3142 string > suffixes@var444 {@expr1073744968 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744969 const std ::@expr3142 string &@expr1073744971 p@var445 :@expr1073744972 suffixes@var444 ) {
102: if (@expr1073744973 isPrefixStringCharLiteral (@expr1073744974 str@var442 , q@var443 , p@var445 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var446 )
109: {
110: return isStringCharLiteral (@expr1073744975 str@var446 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var447 )
114: {
115: return isStringCharLiteral (@expr1073744976 str@var447 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var448 , char q@var449 )
119: {
120: const unsigned long quotePos@var450 =@expr1073744977 str@var448 .@expr1073744978 find (@expr1073744979 q@var449 ) ;
121: return str@var448 .@expr1073744980 substr (@expr1073744981 quotePos@var450 +@expr1073744982 1U , str@var448 .@expr1073744983 size (@expr1073744984 ) -@expr1073744985 quotePos@var450 -@expr1073744986 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var451 )
125: {
126: if (@expr1073744987 isStringLiteral (@expr1073744988 str@var451 ) ) {
127: return getStringCharLiteral (@expr1073744989 str@var451 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var452 )
132: {
133: if (@expr1073744990 isCharLiteral (@expr1073744991 str@var452 ) ) {
134: return getStringCharLiteral (@expr1073744992 str@var452 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var453 )
139: {
140: if (@expr1073744993 i@var453 ==@expr1073744994 1 ) {
141: return "st" ; }
142: if (@expr1073744995 i@var453 ==@expr1073744996 2 ) {
143: return "nd" ; }
144: if (@expr1073744997 i@var453 ==@expr1073744998 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var454 , const std :: string & rhs@var455 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var456 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var457 , const std :: string & name@var458 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var459 , const std :: string & name@var460 ) ;
156:
157: void strTolower ( std :: string & str@var461 ) ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var462 ;
57: Token * back@var463 ;
58: const TokenList * list@var464 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var465 , const Token * bodyEnd_@var466 , const std :: set < std :: string > & usingNamespaces_@var467 = std :: set < std :: string > ( ) ) : name@var468 ( name_@var465 ) , bodyEnd@var469 ( bodyEnd_@var466 ) , usingNamespaces@var470 ( usingNamespaces_@var467 ) { }
63: std :: string name@var468 ;
64: const Token * const bodyEnd@var469 ;
65: std :: set < std :: string > usingNamespaces@var470 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var471 ;
70: int mFileIndex@var472 ;
71: int mLineNumber@var473 ;
72: int mColumn@var474 ;
73: int mExprId@var475 ;
74:
75:
76: Token * mAstOperand1@var476 ;
77: Token * mAstOperand2@var477 ;
78: Token * mAstParent@var478 ;
79:
80:
81: const Scope * mScope@var479 ;
82: union {
83: const Function * mFunction@var480 ;
84: const Variable * mVariable@var481 ;
85: const :: Type * mType@var482 ;
86: const Enumerator * mEnumerator@var483 ;
87: } ;
88:
|
92:
93: int mProgressValue@var484 ;
94:
|
97:
98: int mIndex@var485 ;
99:
100:
101: std :: string * mOriginalName@var486 ;
102:
103:
104: ValueType * mValueType@var487 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var488 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var489 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var490 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var491 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var492 ;
119: long long value@var493 ;
120: struct CppcheckAttributes * next@var494 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var495 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var496 ;
126:
127:
128: unsigned char mBits@var497 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var498 , long long value@var499 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var500 , long long * value@var501 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var471 ( 0 )
135: , mFileIndex@var472 ( 0 )
136: , mLineNumber@var473 ( 0 )
137: , mColumn@var474 ( 0 )
138: , mExprId@var475 ( 0 )
139: , mAstOperand1@var476 ( nullptr )
140: , mAstOperand2@var477 ( nullptr )
141: , mAstParent@var478 ( nullptr )
142: , mScope@var479 ( nullptr )
143: , mFunction@var480 ( nullptr )
144: , mProgressValue@var484 ( 0 )
145: , mIndex@var485 ( 0 )
146: , mOriginalName@var486 ( nullptr )
147: , mValueType@var487 ( nullptr )
148: , mValues@var488 ( nullptr )
149: , mTemplateSimplifierPointers@var490 ( nullptr )
150: , mScopeInfo@var491 ( nullptr )
151: , mCppcheckAttributes@var495 ( nullptr )
152: , mCpp11init@var496 ( Cpp11init :: UNKNOWN )
153: , mBits@var497 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var502 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var503 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var504 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var505 ) {
199: mStr@var717 =@expr1073744999 s@var505 ;
200: mImpl@var723 .@expr1073745000 mVarId@var754 =@expr1073745001 0 ;
201:
202: update_property_info (@expr1073745002 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var506 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var717 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var507 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var508 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var509 ) const ;
236: Token * tokAt ( int index@var510 ) {
237: return const_cast < Token *@expr3179 > (@expr1073745004 const_cast < const Token *@expr3179 > (@expr1073745006 this@expr1073745007 ) .@expr1073745008 tokAt (@expr1073745009 index@var510 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var511 ) const ;
245: Token * linkAt ( int index@var512 ) {
246: return const_cast < Token *@expr3186 > (@expr1073745011 const_cast < const Token *@expr3186 > (@expr1073745013 this@expr1073745014 ) .@expr1073745015 linkAt (@expr1073745016 index@var512 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var513 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var514 , const char ( & pattern@var515 ) [ count ] ) {
276: return simpleMatch (@expr1073745018 tok@var514 , pattern@var515 , count@expr1073745017 -@expr1073745019 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var516 , const char pattern@var517 [ ] , unsigned long pattern_len@var518 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var519 , const char pattern@var520 [ ] , int varid@var521 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var522 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var523 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var524 , const Settings * const settings@var525 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var526 , long long index@var527 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var723 .@expr1073745020 mValueType@var755 ;
366: }
367: void setValueType ( ValueType * vt@var528 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var529 ; top@var529 =@expr1073745021 this@expr1073745022 ;
371: while (@expr1073745023 top@var529 &&@expr1073745024 !@expr1073745025 Token ::@expr1073745026 Match (@expr1073745027 top@var529 .@expr3204 astParent (@expr3205 ) , ",|(" ) ) {
372: top@var529 =@expr1073745030 top@var529 .@expr3204 astParent (@expr3205 ) ; }
373: return top@var529 ?@expr1073745033 top@var529 .@expr1073745034 mImpl@var530 .@expr1073745035 mValueType@var531 :@expr1073745036 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var721 ;
378: }
379: void tokType ( Token :: Type t@var532 ) {
380: mTokType@var721 =@expr1073745037 t@var532 ;
381:
382: const bool memoizedIsName@var533 =@expr1073745038 mTokType@var721 ==@expr1073745039 eName ||@expr1073745040 mTokType@var721 ==@expr1073745041 eType ||@expr1073745042 mTokType@var721 ==@expr1073745043 eVariable ||@expr1073745044
383: mTokType@var721 ==@expr1073745045 eFunction ||@expr1073745046 mTokType@var721 ==@expr1073745047 eKeyword ||@expr1073745048 mTokType@var721 ==@expr3225 eBoolean ||@expr1073745050
384: mTokType@var721 ==@expr3227 eEnumerator ;
385: setFlag (@expr1073745052 fIsName , memoizedIsName@var533 ) ;
386:
387: const bool memoizedIsLiteral@var534 =@expr1073745053 mTokType@var721 ==@expr1073745054 eNumber ||@expr1073745055 mTokType@var721 ==@expr1073745056 eString ||@expr1073745057 mTokType@var721 ==@expr1073745058 eChar ||@expr1073745059
388: mTokType@var721 ==@expr3225 eBoolean ||@expr1073745061 mTokType@var721 ==@expr1073745062 eLiteral ||@expr1073745063 mTokType@var721 ==@expr3227 eEnumerator ;
389: setFlag (@expr1073745065 fIsLiteral , memoizedIsLiteral@var534 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var721 ==@expr1073745066 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745067 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var722 ==@expr1073745068 fIsName &&@expr1073745069 mTokType@var721 ==@expr1073745070 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745071 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var721 ==@expr1073745072 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var721 ==@expr1073745073 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745074 isConstOp (@expr1073745075 ) ||@expr1073745076
412: isAssignmentOp (@expr1073745077 ) ||@expr1073745078
413: mTokType@var721 ==@expr1073745079 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745080 isArithmeticalOp (@expr1073745081 ) ||@expr1073745082
417: mTokType@var721 ==@expr1073745083 eLogicalOp ||@expr1073745084
418: mTokType@var721 ==@expr1073745085 eComparisonOp ||@expr1073745086
419: mTokType@var721 ==@expr1073745087 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745088 ) ||@expr1073745089
423: mTokType@var721 ==@expr1073745090 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var721 ==@expr1073745091 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var721 ==@expr1073745092 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var721 ==@expr1073745093 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var721 ==@expr1073745094 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var721 ==@expr1073745095 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745096 ) !=@expr1073745097 nullptr &&@expr1073745098 astOperand2 (@expr1073745099 ) !=@expr1073745100 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var535 ) const {
444: return s@var535 ==@expr1073745101 mStr@var717 &&@expr1073745102 astOperand1 (@expr1073745103 ) !=@expr1073745104 nullptr &&@expr1073745105 astOperand2 (@expr1073745106 ) ==@expr1073745107 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var722 ;
450: }
451: void flags ( const unsigned int flags_@var536 ) {
452: mFlags@var722 =@expr1073745108 flags_@var536 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745109 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var537 ) {
458: setFlag (@expr1073745110 fIsUnsigned , sign@var537 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745111 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var538 ) {
464: setFlag (@expr1073745112 fIsSigned , sign@var538 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745113 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var539 ) {
470: setFlag (@expr1073745114 fIsPointerCompare , b@var539 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745115 fIsLong ) ;
474: }
475: void isLong ( bool size@var540 ) {
476: setFlag (@expr1073745116 fIsLong , size@var540 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745117 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var541 ) {
482: setFlag (@expr1073745118 fIsStandardType , b@var541 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745119 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var542 ) {
488: setFlag (@expr1073745120 fIsExpandedMacro , m@var542 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745121 fIsCast ) ;
492: }
493: void isCast ( bool c@var543 ) {
494: setFlag (@expr1073745122 fIsCast , c@var543 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745123 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var544 ) {
500: setFlag (@expr1073745124 fIsAttributeConstructor , ac@var544 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745125 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var545 ) {
506: setFlag (@expr1073745126 fIsAttributeDestructor , value@var545 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745127 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var546 ) {
512: setFlag (@expr1073745128 fIsAttributeUnused , unused@var546 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745129 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var547 ) {
518: setFlag (@expr1073745130 fIsAttributeUsed , unused@var547 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745131 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var548 ) {
524: setFlag (@expr1073745132 fIsAttributePure , value@var548 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745133 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var549 ) {
530: setFlag (@expr1073745134 fIsAttributeConst , value@var549 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745135 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var550 ) {
536: setFlag (@expr1073745136 fIsAttributeNoreturn , value@var550 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745137 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var551 ) {
542: setFlag (@expr1073745138 fIsAttributeNothrow , value@var551 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745139 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var552 ) {
548: setFlag (@expr1073745140 fIsAttributePacked , value@var552 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745141 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var553 ) {
554: setFlag (@expr1073745142 fIsAttributeNodiscard , value@var553 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745143 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var554 ) {
560: setFlag (@expr1073745144 fIsAttributeMaybeUnused , value@var554 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var555 , long long value@var556 ) {
563: mImpl@var723 .@expr1073745145 setCppcheckAttribute (@expr1073745146 type@var555 , value@var556 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var557 , long long * value@var558 ) const {
566: return mImpl@var723 .@expr1073745147 getCppcheckAttribute (@expr1073745148 type@var557 , value@var558 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745149 mImpl@var723 .@expr1073745150 mCppcheckAttributes@var756 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745151 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745152 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var559 ) {
578: setFlag (@expr1073745153 fIsOperatorKeyword , value@var559 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745154 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var560 ) {
584: setFlag (@expr1073745155 fIsComplex , value@var560 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745156 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var561 ) {
590: setFlag (@expr1073745157 fIsEnumType , value@var561 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745158 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var562 ) {
596: setFlag (@expr1073745159 fAtAddress , b@var562 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745160 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var563 ) {
602: setFlag (@expr1073745161 fIncompleteVar , b@var563 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745162 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var564 ) {
609: setFlag (@expr1073745163 fIsIncompleteConstant , b@var564 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745164 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var565 ) {
616: setFlag (@expr1073745165 fConstexpr , b@var565 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745166 fExternC ) ;
621: }
622: void isExternC ( bool b@var566 ) {
623: setFlag (@expr1073745167 fExternC , b@var566 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745168 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var567 ) {
630: setFlag (@expr1073745169 fIsSplitVarDeclComma , b@var567 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745170 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var568 ) {
637: setFlag (@expr1073745171 fIsSplitVarDeclEq , b@var568 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745172 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var569 ) {
644: setFlag (@expr1073745173 fIsImplicitInt , b@var569 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745174 fIsInline ) ;
649: }
650: void isInline ( bool b@var570 ) {
651: setFlag (@expr1073745175 fIsInline , b@var570 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745176 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var571 ) {
658: setFlag (@expr1073745177 fIsRemovedVoidParameter , b@var571 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745178 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var572 ) {
665: setFlag (@expr1073745179 fIsTemplate , b@var572 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745180 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var573 ) {
672: setFlag (@expr1073745181 fIsSimplifedScope , b@var573 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var723 .@expr1073745182 mBits@var757 >@expr1073745183 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var723 .@expr1073745184 mBits@var757 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var723 .@expr1073745185 mTemplateSimplifierPointers@var758 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var574 ) {
685: if (@expr1073745186 !@expr1073745187 mImpl@var723 .@expr3364 mTemplateSimplifierPointers@var758 ) {
686: mImpl@var723 .@expr3364 mTemplateSimplifierPointers@var758 =@expr1073745190 new std ::@expr1073745191 set < TemplateSimplifier ::@expr1073745192 TokenAndName *@expr1073745193 > ; }
687: mImpl@var723 .@expr3364 mTemplateSimplifierPointers@var758 .@expr1073745195 insert (@expr1073745196 tokenAndName@var574 ) ;
688: }
689: void setBits ( const unsigned char b@var575 ) {
690: mImpl@var723 .@expr1073745197 mBits@var757 =@expr1073745198 b@var575 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3375 (@expr3375 (@expr3375 mTokType@var721 ==@expr1073745202 eString ) &&@expr1073745203 isPrefixStringCharLiteral (@expr1073745204 mStr@var717 , '"' , "u8" ) ) ||@expr1073745205
695: (@expr3375 (@expr3375 mTokType@var721 ==@expr1073745208 eChar ) &&@expr1073745209 isPrefixStringCharLiteral (@expr1073745210 mStr@var717 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3387 (@expr3387 (@expr3387 mTokType@var721 ==@expr1073745214 eString ) &&@expr1073745215 isPrefixStringCharLiteral (@expr1073745216 mStr@var717 , '"' , "u" ) ) ||@expr1073745217
700: (@expr3387 (@expr3387 mTokType@var721 ==@expr1073745220 eChar ) &&@expr1073745221 isPrefixStringCharLiteral (@expr1073745222 mStr@var717 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3399 (@expr3399 (@expr3399 mTokType@var721 ==@expr1073745226 eString ) &&@expr1073745227 isPrefixStringCharLiteral (@expr1073745228 mStr@var717 , '"' , "U" ) ) ||@expr1073745229
705: (@expr3399 (@expr3399 mTokType@var721 ==@expr1073745232 eChar ) &&@expr1073745233 isPrefixStringCharLiteral (@expr1073745234 mStr@var717 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3411 (@expr3411 (@expr3411 mTokType@var721 ==@expr1073745238 eString ) &&@expr1073745239 isPrefixStringCharLiteral (@expr1073745240 mStr@var717 , '"' , "" ) ) ||@expr1073745241
710: (@expr3411 (@expr3411 mTokType@var721 ==@expr1073745244 eChar ) &&@expr1073745245 isPrefixStringCharLiteral (@expr1073745246 mStr@var717 , '\'' , "" ) &&@expr1073745247 mStr@var717 .@expr1073745248 length (@expr1073745249 ) ==@expr1073745250 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3427 (@expr3427 (@expr3427 mTokType@var721 ==@expr1073745254 eChar ) &&@expr1073745255 isPrefixStringCharLiteral (@expr1073745256 mStr@var717 , '\'' , "" ) ) &&@expr1073745257
715: (@expr3427 mStr@var717 .@expr1073745259 length (@expr1073745260 ) >@expr1073745261 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745262 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var576 ) {
738: setFlag (@expr1073745263 fIsTemplateArg , value@var576 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var577 , const char ( & pattern@var578 ) [ count ] ) {
743: return findsimplematch (@expr1073745265 startTok@var577 , pattern@var578 , count@expr1073745264 -@expr1073745266 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var579 , const char pattern@var580 [ ] , unsigned long pattern_len@var581 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var582 , const char ( & pattern@var583 ) [ count ] , const Token * const end@var584 ) {
749: return findsimplematch (@expr1073745268 startTok@var582 , pattern@var583 , count@expr1073745267 -@expr1073745269 1 , end@var584 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var585 , const char pattern@var586 [ ] , unsigned long pattern_len@var587 , const Token * const end@var588 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var589 , const char pattern@var590 [ ] , const int varId@var591 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var592 , const char pattern@var593 [ ] , const Token * const end@var594 , const int varId@var595 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var596 , const char ( & pattern@var597 ) [ count ] ) {
758: return findsimplematch (@expr1073745271 startTok@var596 , pattern@var597 , count@expr1073745270 -@expr1073745272 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var598 , const char pattern@var599 [ ] , unsigned long pattern_len@var600 ) {
761: return const_cast < Token *@expr3449 > (@expr1073745274 findsimplematch (@expr1073745275 const_cast < const Token *@expr3449 > (@expr1073745277 startTok@var598 ) , pattern@var599 , pattern_len@var600 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var601 , const char ( & pattern@var602 ) [ count ] , const Token * const end@var603 ) {
765: return findsimplematch (@expr1073745279 startTok@var601 , pattern@var602 , count@expr1073745278 -@expr1073745280 1 , end@var603 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var604 , const char pattern@var605 [ ] , unsigned long pattern_len@var606 , const Token * const end@var607 ) {
768: return const_cast < Token *@expr3457 > (@expr1073745282 findsimplematch (@expr1073745283 const_cast < const Token *@expr3457 > (@expr1073745285 startTok@var604 ) , pattern@var605 , pattern_len@var606 , end@var607 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var608 , const char pattern@var609 [ ] , const int varId@var610 = 0 ) {
772: return const_cast < Token *@expr3462 > (@expr1073745287 findmatch (@expr1073745288 const_cast < const Token *@expr3462 > (@expr1073745290 startTok@var608 ) , pattern@var609 , varId@var610 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var611 , const char pattern@var612 [ ] , const Token * const end@var613 , const int varId@var614 = 0 ) {
775: return const_cast < Token *@expr3467 > (@expr1073745292 findmatch (@expr1073745293 const_cast < const Token *@expr3467 > (@expr1073745295 startTok@var611 ) , pattern@var612 , end@var613 , varId@var614 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var615 , const char * haystack@var616 , int varid@var617 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var723 .@expr1073745296 mFileIndex@var759 ;
796: }
797: void fileIndex ( int indexOfFile@var618 ) {
798: mImpl@var723 .@expr1073745297 mFileIndex@var759 =@expr1073745298 indexOfFile@var618 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var723 .@expr1073745299 mLineNumber@var760 ;
803: }
804: void linenr ( int lineNumber@var619 ) {
805: mImpl@var723 .@expr1073745300 mLineNumber@var760 =@expr1073745301 lineNumber@var619 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var723 .@expr1073745302 mColumn@var761 ;
810: }
811: void column ( int c@var620 ) {
812: mImpl@var723 .@expr1073745303 mColumn@var761 =@expr1073745304 c@var620 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var718 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var621 , const Token * end@var622 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var623 , const std :: string & originalNameStr@var624 = emptyString@var1 , bool prepend@var625 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var626 , const std :: string & originalNameStr@var627 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745305 tokenStr@var626 , originalNameStr@var627 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var719 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var723 .@expr1073745306 mVarId@var754 ;
851: }
852: void varId ( int id@var628 ) {
853: mImpl@var723 .@expr1073745307 mVarId@var754 =@expr1073745308 id@var628 ;
854: if (@expr1073745309 id@var628 !=@expr1073745310 0 ) {
855: tokType (@expr1073745311 eVariable ) ;
856: isStandardType (@expr1073745312 false ) ;
857: } else {
858: update_property_info (@expr1073745313 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745314 mImpl@var723 .@expr3491 mExprId@var762 ) {
864: return mImpl@var723 .@expr3491 mExprId@var762 ; }
865: return mImpl@var723 .@expr1073745317 mVarId@var754 ;
866: }
867: void exprId ( int id@var629 ) {
868: mImpl@var723 .@expr1073745318 mExprId@var762 =@expr1073745319 id@var629 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var630 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var631 , const std :: vector < std :: string > & fileNames@var632 ) const ;
888:
|
891:
892: void printLines ( int lines@var633 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var634 , Token * start@var635 , Token * end@var636 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var637 ; varid@var637 = false ;
905: bool exprid@var638 ; exprid@var638 = false ;
906: bool idtype@var639 ; idtype@var639 = false ;
907: bool attributes@var640 ; attributes@var640 = false ;
908: bool macro@var641 ; macro@var641 = false ;
909: bool linenumbers@var642 ; linenumbers@var642 = false ;
910: bool linebreaks@var643 ; linebreaks@var643 = false ;
911: bool files@var644 ; files@var644 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var645 ;
914: options@var645 .@expr1073745320 attributes@var646 =@expr1073745321 true ;
915: options@var645 .@expr1073745322 macro@var647 =@expr1073745323 true ;
916: options@var645 .@expr1073745324 linenumbers@var648 =@expr1073745325 true ;
917: options@var645 .@expr1073745326 linebreaks@var649 =@expr1073745327 true ;
918: options@var645 .@expr1073745328 files@var650 =@expr1073745329 true ;
919: return options@var645 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var651 ; options@var651 =@expr1073745330 forDebug (@expr1073745331 ) ;
923: options@var651 .@expr1073745332 varid@var652 =@expr1073745333 true ;
924: return options@var651 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var653 ; options@var653 =@expr1073745334 forDebug (@expr1073745335 ) ;
928: options@var653 .@expr1073745336 exprid@var654 =@expr1073745337 true ;
929: return options@var653 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var655 ; options@var655 =@expr1073745338 forDebug (@expr1073745339 ) ;
933: options@var655 .@expr1073745340 exprid@var656 =@expr1073745341 true ;
934: options@var655 .@expr1073745342 varid@var657 =@expr1073745343 true ;
935: options@var655 .@expr1073745344 idtype@var658 =@expr1073745345 true ;
936: return options@var655 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var659 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var660 , bool attributes@var661 , bool macro@var662 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var663 , const std :: vector < std :: string > * fileNames@var664 = nullptr , const Token * end@var665 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var666 , bool attributes@var667 = true ) const ;
952: std :: string stringifyList ( bool varid@var668 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var669 , bool attributes@var670 , bool linenumbers@var671 , bool linebreaks@var672 , bool files@var673 , const std :: vector < std :: string > * fileNames@var674 = nullptr , const Token * end@var675 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var676 ) {
983: mLink@var720 =@expr1073745346 linkToToken@var676 ;
984: if (@expr1073745347 mStr@var717 ==@expr1073745348 "<" ||@expr1073745349 mStr@var717 ==@expr1073745350 ">" ) {
985: update_property_info (@expr1073745351 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var720 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var677 ) {
1006: mImpl@var723 .@expr1073745352 mScope@var763 =@expr1073745353 s@var677 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var723 .@expr1073745354 mScope@var763 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var678 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var721 ==@expr1073745355 eFunction ||@expr1073745356 mTokType@var721 ==@expr1073745357 eLambda ?@expr1073745358 mImpl@var723 .@expr1073745359 mFunction@var764 :@expr1073745360 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var679 ) {
1034: mImpl@var723 .@expr1073745361 mVariable@var765 =@expr1073745362 v@var679 ;
1035: if (@expr1073745363 v@var679 ||@expr1073745364 mImpl@var723 .@expr1073745365 mVarId@var754 ) {
1036: tokType (@expr1073745366 eVariable ) ; }
1037: else { if (@expr1073745367 mTokType@var721 ==@expr1073745368 eVariable ) {
1038: tokType (@expr1073745369 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var721 ==@expr1073745370 eVariable ?@expr1073745371 mImpl@var723 .@expr1073745372 mVariable@var765 :@expr1073745373 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var680 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var721 ==@expr1073745374 eType ?@expr1073745375 mImpl@var723 .@expr1073745376 mType@var766 :@expr1073745377 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var681 , const Token * * typeTok@var682 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var683 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var684 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var721 ==@expr1073745378 eEnumerator ?@expr1073745379 mImpl@var723 .@expr1073745380 mEnumerator@var767 :@expr1073745381 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var685 ) {
1079: mImpl@var723 .@expr1073745382 mEnumerator@var767 =@expr1073745383 e@var685 ;
1080: if (@expr1073745384 e@var685 ) {
1081: tokType (@expr1073745385 eEnumerator ) ; }
1082: else { if (@expr1073745386 mTokType@var721 ==@expr1073745387 eEnumerator ) {
1083: tokType (@expr1073745388 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var686 , Token * end@var687 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var688 , Token * srcEnd@var689 , Token * newLocation@var690 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var723 .@expr1073745389 mProgressValue@var768 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var691 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var723 .@expr3566 mOriginalName@var769 ?@expr1073745391 *@expr1073745392 mImpl@var723 .@expr3566 mOriginalName@var769 :@expr1073745394 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var723 .@expr3571 mValues@var742 ?@expr1073745396 *@expr1073745397 mImpl@var723 .@expr3571 mValues@var742 :@expr1073745399 TokenImpl ::@expr1073745400 mEmptyValueList@var489 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var692 ) {
1164: if (@expr1073745401 !@expr1073745402 mImpl@var723 .@expr3579 mOriginalName@var769 ) {
1165: mImpl@var723 .@expr3579 mOriginalName@var769 =@expr1073745405 new std ::@expr1073745406 string (@expr1073745407 name@var692 ) ; }
1166: else {
1167: *@expr1073745408 mImpl@var723 .@expr3579 mOriginalName@var769 =@expr1073745410 name@var692 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var693 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var694 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var695 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var723 .@expr1073745412 mValues@var742 .@expr1073745413 front (@expr1073745414 ) .@expr1073745415 intvalue@expr1073745411 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var696 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var697 , long long path@var698 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var699 , const Settings * settings@var700 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var701 , const Settings * settings@var702 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var703 , int argnr@var704 , const Settings * settings@var705 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var706 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var707 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var708 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var709 ) {
1200: if (@expr1073745416 mImpl@var723 .@expr3593 mValues@var742 ) {
1201: mImpl@var723 .@expr3593 mValues@var742 .@expr1073745419 remove_if (@expr1073745420 pred@var709 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var723 .@expr1073745421 mIndex@var770 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var710 ) {
1213: mNext@var718 =@expr1073745422 nextToken@var710 ;
1214: }
1215: void previous ( Token * previousToken@var711 ) {
1216: mPrevious@var719 =@expr1073745423 previousToken@var711 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var712 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var713 , const char * word@var714 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var715 , char c@var716 ) ;
1235:
1236: std :: string mStr@var717 ;
1237:
1238: Token * mNext@var718 ;
1239: Token * mPrevious@var719 ;
1240: Token * mLink@var720 ;
1241:
1242: enum Anonymous1 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var721 ;
1283:
1284: uint64_t mFlags@var722 ;
1285:
1286: TokenImpl * mImpl@var723 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var724 ) const {
1294: return (@expr3600 (@expr3600 mFlags@var722 &@expr1073745426 flag_@var724 ) !=@expr1073745427 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var725 , bool state_@var726 ) {
1303: mFlags@var722 =@expr1073745428 state_@var726 ?@expr1073745429 mFlags@var722 |@expr1073745430 flag_@var725 :@expr1073745431 mFlags@var722 &@expr1073745432 ~@expr1073745433 flag_@var725 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var727 , const int indent1@var728 = 0 , const int indent2@var729 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var730 ) ;
1321: void astOperand2 ( Token * tok@var731 ) ;
1322: void astParent ( Token * tok@var732 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var723 .@expr1073745434 mAstOperand1@var733 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var723 .@expr1073745435 mAstOperand1@var733 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var723 .@expr1073745436 mAstOperand2@var734 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var723 .@expr1073745437 mAstOperand2@var734 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var723 .@expr1073745438 mAstParent@var735 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var723 .@expr1073745439 mAstParent@var735 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745440 !@expr1073745441 astParent (@expr3618 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745443 this@expr3620 ==@expr1073745445 astParent (@expr3618 ) .@expr3623 astOperand1 (@expr3624 ) ) {
1346: return astParent (@expr3618 ) .@expr3626 astOperand2 (@expr3627 ) ; }
1347: else { if (@expr1073745452 this@expr3620 ==@expr1073745453 astParent (@expr3618 ) .@expr3626 astOperand2 (@expr3627 ) ) {
1348: return astParent (@expr3618 ) .@expr3623 astOperand1 (@expr3624 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745460 !@expr1073745461 astParent (@expr3638 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745463 this@expr3640 ==@expr1073745465 astParent (@expr3638 ) .@expr3643 astOperand1 (@expr3644 ) ) {
1356: return astParent (@expr3638 ) .@expr3646 astOperand2 (@expr3647 ) ; }
1357: else { if (@expr1073745472 this@expr3640 ==@expr1073745473 astParent (@expr3638 ) .@expr3646 astOperand2 (@expr3647 ) ) {
1358: return astParent (@expr3638 ) .@expr3643 astOperand1 (@expr3644 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var736 ; ret@var736 =@expr1073745480 this@expr1073745481 ;
1364: while (@expr1073745482 ret@var736 .@expr3659 mImpl@var737 .@expr3660 mAstParent@var738 ) {
1365: ret@var736 =@expr1073745485 ret@var736 .@expr3659 mImpl@var737 .@expr3660 mAstParent@var738 ; }
1366: return ret@var736 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var739 ; ret@var739 =@expr1073745488 this@expr1073745489 ;
1371: while (@expr1073745490 ret@var739 .@expr3667 mImpl@var740 .@expr3668 mAstParent@var741 ) {
1372: ret@var739 =@expr1073745493 ret@var739 .@expr3667 mImpl@var740 .@expr3668 mAstParent@var741 ; }
1373: return ret@var739 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var723 .@expr1073745496 mAstOperand1@var733 =@expr1073745497 mImpl@var723 .@expr1073745498 mAstOperand2@var734 =@expr1073745499 mImpl@var723 .@expr1073745500 mAstParent@var735 =@expr1073745501 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var723 .@expr3678 mValues@var742 ;
1393: mImpl@var723 .@expr3678 mValues@var742 =@expr1073745504 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var743 = "" ) const {
1397: std ::@expr1073745505 string ret@var744 ;
1398: if (@expr1073745506 mImpl@var723 .@expr3683 mAstOperand1@var733 ) {
1399: ret@var744 =@expr1073745508 mImpl@var723 .@expr3683 mAstOperand1@var733 .@expr1073745510 astString (@expr1073745511 sep@var743 ) ; }
1400: if (@expr1073745512 mImpl@var723 .@expr3689 mAstOperand2@var734 ) {
1401: ret@var744 +=@expr1073745514 mImpl@var723 .@expr3689 mAstOperand2@var734 .@expr1073745516 astString (@expr1073745517 sep@var743 ) ; }
1402: return ret@var744 +@expr1073745518 sep@var743 +@expr1073745519 mStr@var717 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var745 , bool xml@var746 , const std :: vector < std :: string > & fileNames@var747 , std :: ostream & out@var748 ) const ;
1412:
1413: void printValueFlow ( bool xml@var749 , std :: ostream & out@var750 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var751 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var752 ) const {
1419: mImpl@var723 .@expr1073745520 mCpp11init@var753 =@expr1073745521 cpp11init@var752 ?@expr1073745522 TokenImpl ::@expr3699 Cpp11init ::@expr1073745524 CPP11INIT :@expr1073745525 TokenImpl ::@expr3699 Cpp11init ::@expr1073745527 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var723 .@expr1073745528 mCpp11init@var753 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var771 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var772 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var773 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var774 ) ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var775 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var776 ) {
47: mSettings@var811 =@expr1073745529 settings@var776 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var811 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var813 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var814 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var777 ) ;
72:
73: void addtoken ( const std :: string & str@var778 , const int lineno@var779 , const int column@var780 , const int fileno@var781 , bool split@var782 = false ) ;
74: void addtoken ( const std :: string & str@var783 , const Token * locationTok@var784 ) ;
75:
76: void addtoken ( const Token * tok@var785 , const int lineno@var786 , const int column@var787 , const int fileno@var788 ) ;
77: void addtoken ( const Token * tok@var789 , const Token * locationTok@var790 ) ;
78: void addtoken ( const Token * tok@var791 ) ;
79:
80: static void insertTokens ( Token * dest@var792 , const Token * src@var793 , int n@var794 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var795 , const Token * first@var796 , const Token * last@var797 , bool one_line@var798 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var799 , const std :: string & file0@var800 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var801 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var802 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var808 .@expr1073745530 front@var815 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var808 .@expr1073745531 front@var815 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var808 .@expr1073745532 back@var816 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var808 .@expr1073745533 back@var816 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var809 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var803 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var804 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var805 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var806 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var807 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var808 ;
206:
207:
208: std :: vector < std :: string > mFiles@var809 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var810 ;
212:
213:
214: const Settings * mSettings@var811 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var812 ;
217:
218:
219: bool mIsC@var813 ;
220: bool mIsCpp@var814 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var817 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var818 ;
67: mutable int mVarId@var819 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var820 ) ;
73: bool hasVariable ( const std :: string & varname@var821 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var822 ) const {
75: return mVariableId@var817 .@expr1073745534 find (@expr1073745535 varname@var822 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var817 .@expr1073745536 end (@expr1073745537 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var817 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745538 mVarId@var819 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var823 , ErrorLogger * errorLogger@var824 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var825 ) {
95: mTimerResults@var945 =@expr1073745539 tr@var825 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var923 .@expr1073745540 isC (@expr1073745541 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var923 .@expr1073745542 isCPP (@expr1073745543 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var826 , bool * unknown@var827 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var828 , const std :: string & FileName@var829 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var830 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var831 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var832 ,
142: const char FileName@var833 [ ] ,
143: const std :: string & configuration@var834 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var835 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var836 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var837 , const Token * end@var838 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var839 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var840 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var841 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var842 , const Token * const tokEnd@var843 , const bool only_k_r_fpar@var844 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var845 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var846 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var847 , bool commandWithCondition@var848 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var849 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var850 , Token * * _tok2@var851 , Token * * _tok3@var852 , std :: string & value@var853 , int & valueVarId@var854 , bool & valueIsPointer@var855 , bool floatvar@var856 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var857 , Token * tok3@var858 , int varid@var859 , const std :: string & structname@var860 , std :: string & value@var861 , int valueVarId@var862 , bool valueIsPointer@var863 , const Token * const valueToken@var864 , int indentlevel@var865 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var866 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var867 , const std :: string & endsWith@var868 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var869 , const std :: string & endsWith@var870 , bool cpp@var871 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var872 ) {
585: mPreprocessor@var946 =@expr1073745544 preprocessor@var872 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var946 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var873 , const Token * end@var874 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var875 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var876 , const std :: string & code@var877 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var878 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var879 , const std :: string & what@var880 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var881 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var882 , const std :: string & msg@var883 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var884 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var885 , const std :: string & macroName@var886 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var887 , const Token * end@var888 , bool allowSemicolon@var889 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var890 , const Severity :: SeverityType severity@var891 , const std :: string & id@var892 , const std :: string & msg@var893 , bool inconclusive@var894 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var895 , Severity :: SeverityType severity@var896 , const std :: string & id@var897 , const std :: string & msg@var898 , bool inconclusive@var899 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var900 , const Token * name@var901 , const Token * typeDef@var902 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var903 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var904 ,
821: const VariableMap & variableMap@var905 ,
822: const int scopeStartVarId@var906 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var907 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var908 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var909 ,
827: int * varId@var910 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var911 ,
830: Token * const startToken@var912 ,
831: const Token * const endToken@var913 ,
832: const std :: map < std :: string , int > & varlist@var914 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var915 ,
834: int * varId_@var916 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var917 ) ;
849:
850: bool operatorEnd ( const Token * tok@var918 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var944 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var919 ) {
861: mSettings@var930 =@expr1073745545 settings@var919 ;
862: list@var923 .@expr1073745546 setSettings (@expr1073745547 settings@var919 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var932 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var920 ) const ;
877:
878: void dump ( std :: ostream & out@var921 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var922 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var942 ;
888: }
889:
|
892:
893: TokenList list@var923 ;
894:
895: const Token * tokens ( ) const {
896: return list@var923 .@expr1073745548 front (@expr1073745549 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var924 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var925 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var926 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var927 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var930 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var928 , bool inOperator@var929 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745550 mVarId@var942 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var930 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var931 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var932 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var933 ;
973:
974:
975:
976: std :: string mConfiguration@var934 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var935 ;
980:
981: struct TypedefInfo {
982: std :: string name@var936 ;
983: std :: string filename@var937 ;
984: int lineNumber@var938 ;
985: int column@var939 ;
986: bool used@var940 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var941 ;
989:
990:
991: int mVarId@var942 ;
992:
993:
994: int mUnnamedCount@var943 ;
995:
|
999:
1000: bool mCodeWithTemplates@var944 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var945 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var946 ;
1013: } ;

##file cppcheck-2.8/lib/checkmemoryleak.h

1:
|
42:
43: class Function ;
44: class Scope ;
45: class Settings ;
46: class Token ;
47: class Variable ;
48: class ErrorLogger ;
49:
|
53:
54: class CheckMemoryLeak {
55: private:
56:
57: const Tokenizer * const mTokenizer_@var947 ;
58:
59:
60: ErrorLogger * const mErrorLogger_@var948 ;
61:
62:
63: const Settings * const mSettings_@var949 ;
64:
|
72:
73: void reportErr ( const Token * tok@var950 , Severity :: SeverityType severity@var951 , const std :: string & id@var952 , const std :: string & msg@var953 , const CWE & cwe@var954 ) const ;
74:
|
82:
83: void reportErr ( const std :: list < const Token * > & callstack@var955 , Severity :: SeverityType severity@var956 , const std :: string & id@var957 , const std :: string & msg@var958 , const CWE & cwe@var959 ) const ;
84:
85: public:
86: CheckMemoryLeak ( ) = delete ;
87: CheckMemoryLeak ( const CheckMemoryLeak & ) = delete ;
88: void operator= ( const CheckMemoryLeak & ) = delete ;
89:
90: CheckMemoryLeak ( const Tokenizer * t@var960 , ErrorLogger * e@var961 , const Settings * s@var962 )
91: : mTokenizer_@var947 ( t@var960 ) , mErrorLogger_@var948 ( e@var961 ) , mSettings_@var949 ( s@var962 ) { }
92:
93:
94: enum AllocType { No , Malloc , New , NewArray , File , Fd , Pipe , OtherMem , OtherRes , Many } ;
95:
96: void memoryLeak ( const Token * tok@var963 , const std :: string & varname@var964 , AllocType alloctype@var965 ) const ;
97:
|
103:
104: AllocType getDeallocationType ( const Token * tok@var966 , int varid@var967 ) const ;
105:
|
108:
109: AllocType getAllocationType ( const Token * tok2@var968 , int varid@var969 , std :: list < const Function * > * callstack@var970 = nullptr ) const ;
110:
|
113:
114: AllocType getReallocationType ( const Token * tok2@var971 , int varid@var972 ) const ;
115:
|
119:
120: bool isReopenStandardStream ( const Token * tok@var973 ) const ;
121:
|
125:
126: void memleakError ( const Token * tok@var974 , const std :: string & varname@var975 ) const ;
127:
|
132:
133: void resourceLeakError ( const Token * tok@var976 , const std :: string & varname@var977 ) const ;
134:
|
139:
140: void deallocDeallocError ( const Token * tok@var978 , const std :: string & varname@var979 ) const ;
141: void deallocuseError ( const Token * tok@var980 , const std :: string & varname@var981 ) const ;
142: void mismatchSizeError ( const Token * tok@var982 , const std :: string & sz@var983 ) const ;
143: void mismatchAllocDealloc ( const std :: list < const Token * > & callstack@var984 , const std :: string & varname@var985 ) const ;
144: void memleakUponReallocFailureError ( const Token * tok@var986 , const std :: string & reallocfunction@var987 , const std :: string & varname@var988 ) const ;
145:
146:
147: AllocType functionReturnType ( const Function * func@var989 , std :: list < const Function * > * callstack@var990 = nullptr ) const ;
148: } ;
149:
|
167:
168: class CheckMemoryLeakInFunction : private Check , public CheckMemoryLeak {
169: public:
170:
171: CheckMemoryLeakInFunction ( ) : Check ( myName ( ) ) , CheckMemoryLeak ( nullptr , nullptr , nullptr ) { }
172:
173:
174: CheckMemoryLeakInFunction ( const Tokenizer * tokenizer@var991 , const Settings * settings@var992 , ErrorLogger * errorLogger@var993 )
175: : Check ( myName ( ) , tokenizer@var991 , settings@var992 , errorLogger@var993 ) , CheckMemoryLeak ( tokenizer@var991 , errorLogger@var993 , settings@var992 ) { }
176:
177: void runChecks ( const Tokenizer * tokenizer@var994 , const Settings * settings@var995 , ErrorLogger * errorLogger@var996 ) override {
178: CheckMemoryLeakInFunction checkMemoryLeak@var997 (@expr1073745551 tokenizer@var994 , settings@var995 , errorLogger@var996 ) ;
179: checkMemoryLeak@var997 .@expr1073745552 checkReallocUsage (@expr1073745553 ) ;
180: }
181:
182:
183: static bool test_white_list ( const std :: string & funcname@var998 , const Settings * settings@var999 , bool cpp@var1000 ) ;
184:
|
187:
188: void checkReallocUsage ( ) ;
189:
190: private:
191:
192: void getErrorMessages ( ErrorLogger * e@var1001 , const Settings * settings@var1002 ) const override {
193: CheckMemoryLeakInFunction c@var1003 (@expr1073745554 nullptr , settings@var1002 , e@var1001 ) ;
194:
195: c@var1003 .@expr1073745555 memleakError (@expr1073745556 nullptr , "varname" ) ;
196: c@var1003 .@expr1073745557 resourceLeakError (@expr1073745558 nullptr , "varname" ) ;
197:
198: c@var1003 .@expr1073745559 deallocDeallocError (@expr1073745560 nullptr , "varname" ) ;
199: c@var1003 .@expr1073745561 deallocuseError (@expr1073745562 nullptr , "varname" ) ;
200: c@var1003 .@expr1073745563 mismatchSizeError (@expr1073745564 nullptr , "sz" ) ;
201: const std ::@expr1073745565 list < const Token *@expr1073745566 > callstack@var1004 ;
202: c@var1003 .@expr1073745567 mismatchAllocDealloc (@expr1073745568 callstack@var1004 , "varname" ) ;
203: c@var1003 .@expr1073745569 memleakUponReallocFailureError (@expr1073745570 nullptr , "realloc" , "varname" ) ;
204: }
205:
|
209:
210: static std :: string myName ( ) {
211: return "Memory leaks (function variables)" ;
212: }
213:
|
217:
218: std :: string classInfo ( ) const override {
219: return "Is there any allocated memory when a function goes out of scope\n" ;
220: }
221: } ;
222:
|
228:
229: class CheckMemoryLeakInClass : private Check , private CheckMemoryLeak {
230: public:
231: CheckMemoryLeakInClass ( ) : Check ( myName ( ) ) , CheckMemoryLeak ( nullptr , nullptr , nullptr ) { }
232:
233: CheckMemoryLeakInClass ( const Tokenizer * tokenizer@var1005 , const Settings * settings@var1006 , ErrorLogger * errorLogger@var1007 )
234: : Check ( myName ( ) , tokenizer@var1005 , settings@var1006 , errorLogger@var1007 ) , CheckMemoryLeak ( tokenizer@var1005 , errorLogger@var1007 , settings@var1006 ) { }
235:
236: void runChecks ( const Tokenizer * tokenizr@var1008 , const Settings * settings@var1009 , ErrorLogger * errLog@var1010 ) override {
237: if (@expr1073745571 !@expr1073745572 tokenizr@var1008 .@expr1073745573 isCPP (@expr1073745574 ) ) {
238: return ; }
239:
240: CheckMemoryLeakInClass checkMemoryLeak@var1011 (@expr1073745575 tokenizr@var1008 , settings@var1009 , errLog@var1010 ) ;
241: checkMemoryLeak@var1011 .@expr1073745576 check (@expr1073745577 ) ;
242: }
243:
244: void check ( ) ;
245:
246: private:
247: void variable ( const Scope * scope@var1012 , const Token * tokVarname@var1013 ) ;
248:
249:
250: void checkPublicFunctions ( const Scope * scope@var1014 , const Token * classtok@var1015 ) ;
251: void publicAllocationError ( const Token * tok@var1016 , const std :: string & varname@var1017 ) ;
252:
253: void unsafeClassError ( const Token * tok@var1018 , const std :: string & classname@var1019 , const std :: string & varname@var1020 ) ;
254:
255: void getErrorMessages ( ErrorLogger * e@var1021 , const Settings * settings@var1022 ) const override {
256: CheckMemoryLeakInClass c@var1023 (@expr1073745578 nullptr , settings@var1022 , e@var1021 ) ;
257: c@var1023 .@expr1073745579 publicAllocationError (@expr1073745580 nullptr , "varname" ) ;
258: c@var1023 .@expr1073745581 unsafeClassError (@expr1073745582 nullptr , "class" , "class::varname" ) ;
259: }
260:
261: static std :: string myName ( ) {
262: return "Memory leaks (class variables)" ;
263: }
264:
265: std :: string classInfo ( ) const override {
266: return "If the constructor allocate memory then the destructor must deallocate it.\n" ;
267: }
268: } ;
269:
|
273:
274: class CheckMemoryLeakStructMember : private Check , private CheckMemoryLeak {
275: public:
276: CheckMemoryLeakStructMember ( ) : Check ( myName ( ) ) , CheckMemoryLeak ( nullptr , nullptr , nullptr ) { }
277:
278: CheckMemoryLeakStructMember ( const Tokenizer * tokenizer@var1024 , const Settings * settings@var1025 , ErrorLogger * errorLogger@var1026 )
279: : Check ( myName ( ) , tokenizer@var1024 , settings@var1025 , errorLogger@var1026 ) , CheckMemoryLeak ( tokenizer@var1024 , errorLogger@var1026 , settings@var1025 ) { }
280:
281: void runChecks ( const Tokenizer * tokenizer@var1027 , const Settings * settings@var1028 , ErrorLogger * errorLogger@var1029 ) override {
282: CheckMemoryLeakStructMember checkMemoryLeak@var1030 (@expr1073745583 tokenizer@var1027 , settings@var1028 , errorLogger@var1029 ) ;
283: checkMemoryLeak@var1030 .@expr1073745584 check (@expr1073745585 ) ;
284: }
285:
286: void check ( ) ;
287:
288: private:
289:
290:
291: static bool isMalloc ( const Variable * variable@var1031 ) ;
292:
293: void checkStructVariable ( const Variable * const variable@var1032 ) ;
294:
295: void getErrorMessages ( ErrorLogger * , const Settings * ) const override { }
296:
297: static std :: string myName ( ) {
298: return "Memory leaks (struct members)" ;
299: }
300:
301: std :: string classInfo ( ) const override {
302: return "Don't forget to deallocate struct members\n" ;
303: }
304: } ;
305:
|
309:
310: class CheckMemoryLeakNoVar : private Check , private CheckMemoryLeak {
311: public:
312: CheckMemoryLeakNoVar ( ) : Check ( myName ( ) ) , CheckMemoryLeak ( nullptr , nullptr , nullptr ) { }
313:
314: CheckMemoryLeakNoVar ( const Tokenizer * tokenizer@var1033 , const Settings * settings@var1034 , ErrorLogger * errorLogger@var1035 )
315: : Check ( myName ( ) , tokenizer@var1033 , settings@var1034 , errorLogger@var1035 ) , CheckMemoryLeak ( tokenizer@var1033 , errorLogger@var1035 , settings@var1034 ) { }
316:
317: void runChecks ( const Tokenizer * tokenizer@var1036 , const Settings * settings@var1037 , ErrorLogger * errorLogger@var1038 ) override {
318: CheckMemoryLeakNoVar checkMemoryLeak@var1039 (@expr1073745586 tokenizer@var1036 , settings@var1037 , errorLogger@var1038 ) ;
319: checkMemoryLeak@var1039 .@expr1073745587 check (@expr1073745588 ) ;
320: }
321:
322: void check ( ) ;
323:
324: private:
325:
|
329:
330: void checkForUnreleasedInputArgument ( const Scope * scope@var1040 ) ;
331:
|
335:
336: void checkForUnusedReturnValue ( const Scope * scope@var1041 ) ;
337:
|
341:
342: void checkForUnsafeArgAlloc ( const Scope * scope@var1042 ) ;
343:
344: void functionCallLeak ( const Token * loc@var1043 , const std :: string & alloc@var1044 , const std :: string & functionCall@var1045 ) ;
345: void returnValueNotUsedError ( const Token * tok@var1046 , const std :: string & alloc@var1047 ) ;
346: void unsafeArgAllocError ( const Token * tok@var1048 , const std :: string & funcName@var1049 , const std :: string & ptrType@var1050 , const std :: string & objType@var1051 ) ;
347:
348: void getErrorMessages ( ErrorLogger * e@var1052 , const Settings * settings@var1053 ) const override {
349: CheckMemoryLeakNoVar c@var1054 (@expr1073745589 nullptr , settings@var1053 , e@var1052 ) ;
350:
351: c@var1054 .@expr1073745590 functionCallLeak (@expr1073745591 nullptr , "funcName" , "funcName" ) ;
352: c@var1054 .@expr1073745592 returnValueNotUsedError (@expr1073745593 nullptr , "funcName" ) ;
353: c@var1054 .@expr1073745594 unsafeArgAllocError (@expr1073745595 nullptr , "funcName" , "shared_ptr" , "int" ) ;
354: }
355:
356: static std :: string myName ( ) {
357: return "Memory leaks (address not taken)" ;
358: }
359:
360: std :: string classInfo ( ) const override {
361: return "Not taking the address to allocated memory\n" ;
362: }
363: } ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var1055 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var1056 ;
42:
43:
44: std :: string stdValue@var1057 ;
45:
46:
47: Standards ( ) : c@var1055 ( CLatest ) , cpp@var1056 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var1058 ) {
50: stdValue@var1057 =@expr1073745596 str@var1058 ;
51: if (@expr1073745597 str@var1058 ==@expr1073745598 "c89" ||@expr1073745599 str@var1058 ==@expr1073745600 "C89" ) {
52: c@var1055 =@expr1073745601 C89 ;
53: return true ;
54: }
55: if (@expr1073745602 str@var1058 ==@expr1073745603 "c99" ||@expr1073745604 str@var1058 ==@expr1073745605 "C99" ) {
56: c@var1055 =@expr1073745606 C99 ;
57: return true ;
58: }
59: if (@expr1073745607 str@var1058 ==@expr1073745608 "c11" ||@expr1073745609 str@var1058 ==@expr1073745610 "C11" ) {
60: c@var1055 =@expr1073745611 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073745612 c@var1055 ) {
67: case C89 :@expr3789 ;
68: return "c89" ;
69: case C99 :@expr3789 ;
70: return "c99" ;
71: case C11 :@expr3789 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var1059 ) {
77: if (@expr1073745616 std@var1059 ==@expr1073745617 "c89" ) {
78: return Standards ::@expr1073745618 C89 ;
79: }
80: if (@expr1073745619 std@var1059 ==@expr1073745620 "c99" ) {
81: return Standards ::@expr1073745621 C99 ;
82: }
83: if (@expr1073745622 std@var1059 ==@expr1073745623 "c11" ) {
84: return Standards ::@expr1073745624 C11 ;
85: }
86: return Standards ::@expr1073745625 CLatest ;
87: }
88: bool setCPP ( std :: string str@var1060 ) {
89: stdValue@var1057 =@expr1073745626 str@var1060 ;
90: strTolower (@expr1073745627 str@var1060 ) ;
91: cpp@var1056 =@expr1073745628 getCPP (@expr1073745629 str@var1060 ) ;
92: return !@expr1073745630 stdValue@var1057 .@expr1073745631 empty (@expr1073745632 ) &&@expr1073745633 str@var1060 ==@expr1073745634 getCPP (@expr1073745635 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073745636 cpp@var1056 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var1061 ) {
98: switch (@expr1073745637 std@var1061 ) {
99: case CPP03 :@expr3814 ;
100: return "c++03" ;
101: case CPP11 :@expr3814 ;
102: return "c++11" ;
103: case CPP14 :@expr3814 ;
104: return "c++14" ;
105: case CPP17 :@expr3814 ;
106: return "c++17" ;
107: case CPP20 :@expr3814 ;
108: return "c++20" ;
109: case CPP23 :@expr3814 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var1062 ) {
115: if (@expr1073745644 std@var1062 ==@expr1073745645 "c++03" ) {
116: return Standards ::@expr1073745646 CPP03 ;
117: }
118: if (@expr1073745647 std@var1062 ==@expr1073745648 "c++11" ) {
119: return Standards ::@expr1073745649 CPP11 ;
120: }
121: if (@expr1073745650 std@var1062 ==@expr1073745651 "c++14" ) {
122: return Standards ::@expr1073745652 CPP14 ;
123: }
124: if (@expr1073745653 std@var1062 ==@expr1073745654 "c++17" ) {
125: return Standards ::@expr1073745655 CPP17 ;
126: }
127: if (@expr1073745656 std@var1062 ==@expr1073745657 "c++20" ) {
128: return Standards ::@expr1073745658 CPP20 ;
129: }
130: if (@expr1073745659 std@var1062 ==@expr1073745660 "c++23" ) {
131: return Standards ::@expr1073745661 CPP23 ;
132: }
133: return Standards ::@expr1073745662 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var1066 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var1063 ) : errorcode@var1066 ( e@var1063 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var1064 , T && r@var1065 ) : errorcode@var1066 ( e@var1064 ) , reason@var1067 ( r@var1065 ) { }
66: ErrorCode errorcode@var1066 ;
67: std :: string reason@var1067 ;
68: } ;
69:
70: Error load ( const char exename@var1068 [ ] , const char path@var1069 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var1070 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var1071 [ ] , unsigned long len@var1072 ) ;
75:
76: struct AllocFunc {
77: int groupId@var1073 ;
78: int arg@var1074 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var1075 ;
81: int bufferSizeArg1@var1076 ;
82: int bufferSizeArg2@var1077 ;
83: int reallocArg@var1078 ;
84: bool initData@var1079 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var1080 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var1081 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var1082 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var1083 , int arg@var1084 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var1085 , int arg@var1086 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var1087 , int arg@var1088 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var1089 [ ] ) const {
107: return getAllocDealloc (@expr1073745663 mAlloc@var1355 , name@var1089 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var1090 [ ] ) const {
112: return getAllocDealloc (@expr1073745664 mDealloc@var1356 , name@var1090 ) ;
113: }
114:
115:
116: int allocId ( const char name@var1091 [ ] ) const {
117: const AllocFunc * af@var1092 ; af@var1092 =@expr1073745665 getAllocDealloc (@expr1073745666 mAlloc@var1355 , name@var1091 ) ;
118: return af@var1092 ?@expr1073745667 af@var1092 .@expr1073745668 groupId@var1093 :@expr1073745669 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var1094 [ ] ) const {
123: const AllocFunc * af@var1095 ; af@var1095 =@expr1073745670 getAllocDealloc (@expr1073745671 mDealloc@var1356 , name@var1094 ) ;
124: return af@var1095 ?@expr1073745672 af@var1095 .@expr1073745673 groupId@var1096 :@expr1073745674 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var1097 , int id@var1098 , int arg@var1099 ) {
129: mAlloc@var1355 [@expr3851 functionname@var1097 ] .@expr1073745676 groupId@var2694 =@expr1073745677 id@var1098 ;
130: mAlloc@var1355 [@expr3851 functionname@var1097 ] .@expr1073745679 arg@var2695 =@expr1073745680 arg@var1099 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var1100 , int id@var1101 , int arg@var1102 ) {
134: mDealloc@var1356 [@expr3857 functionname@var1100 ] .@expr1073745682 groupId@var2696 =@expr1073745683 id@var1101 ;
135: mDealloc@var1356 [@expr3857 functionname@var1100 ] .@expr1073745685 arg@var2697 =@expr1073745686 arg@var1102 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var1103 , int id@var1104 , int arg@var1105 , int reallocArg@var1106 = 1 ) {
139: mRealloc@var1357 [@expr3863 functionname@var1103 ] .@expr1073745688 groupId@var2698 =@expr1073745689 id@var1104 ;
140: mRealloc@var1357 [@expr3863 functionname@var1103 ] .@expr1073745691 arg@var2699 =@expr1073745692 arg@var1105 ;
141: mRealloc@var1357 [@expr3863 functionname@var1103 ] .@expr1073745694 reallocArg@var2700 =@expr1073745695 reallocArg@var1106 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var1107 , bool noreturn@var1108 ) {
146: mNoReturn@var1358 [@expr1073745696 funcname@var1107 ] =@expr1073745697 noreturn@var1108 ?@expr1073745698 FalseTrueMaybe ::@expr1073745699 True :@expr1073745700 FalseTrueMaybe ::@expr1073745701 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var1109 ) ;
150:
151:
152: static bool ismemory ( const int id@var1110 ) {
153: return (@expr3878 (@expr3878 id@var1110 >@expr1073745704 0 ) &&@expr1073745705 (@expr3878 (@expr3878 id@var1110 &@expr1073745708 1 ) ==@expr1073745709 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var1111 ) {
156: return (@expr3886 (@expr3886 func@var1111 .@expr3888 groupId@var1112 >@expr1073745713 0 ) &&@expr1073745714 (@expr3886 (@expr3886 func@var1111 .@expr3888 groupId@var1112 &@expr1073745718 1 ) ==@expr1073745719 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var1113 ) {
161: return (@expr3896 (@expr3896 id@var1113 >@expr1073745722 0 ) &&@expr1073745723 (@expr3896 (@expr3896 id@var1113 &@expr1073745726 1 ) ==@expr1073745727 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var1114 ) {
164: return (@expr3904 (@expr3904 func@var1114 .@expr3906 groupId@var1115 >@expr1073745731 0 ) &&@expr1073745732 (@expr3904 (@expr3904 func@var1114 .@expr3906 groupId@var1115 &@expr1073745736 1 ) ==@expr1073745737 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var1116 ) const ;
168: int formatstr_argno ( const Token * ftok@var1117 ) const ;
169: bool formatstr_scan ( const Token * ftok@var1118 ) const ;
170: bool formatstr_secure ( const Token * ftok@var1119 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var1120 ;
174: int ptr2Arg@var1121 ;
175: int sizeArg@var1122 ;
176: int strlenArg@var1123 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var1124 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var1125 ;
182: Standards standards@var1126 ;
183: Severity :: SeverityType severity@var1127 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var1128 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var1129 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var1130 ) const ;
191: bool matchArguments ( const Token * ftok@var1131 , const std :: string & functionName@var1132 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var1133 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var1134 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var1135 ) const ;
198: int returnValueContainer ( const Token * ftok@var1136 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var1137 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var1138 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var1139 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var1140 , std :: string * unknownFunc@var1141 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var1151 ( -1 ) ,
210: size_templateArgNo@var1153 ( -1 ) ,
211: arrayLike_indexOp@var1154 ( false ) ,
212: stdStringLike@var1155 ( false ) ,
213: stdAssociativeLike@var1156 ( false ) ,
214: opLessAllowed@var1157 ( true ) ,
215: hasInitializerListConstructor@var1158 ( false ) ,
216: unstableErase@var1159 ( false ) ,
217: unstableInsert@var1160 ( false ) ,
218: view@var1161 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var1142 ;
248: Yield yield@var1143 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var1144 ;
252: int templateParameter@var1145 ;
253: } ;
254: std :: string startPattern@var1146 ; std :: string startPattern2@var1147 ; std :: string endPattern@var1148 ; std :: string itEndPattern@var1149 ;
255: std :: map < std :: string , Function > functions@var1150 ;
256: int type_templateArgNo@var1151 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var1152 ;
258: int size_templateArgNo@var1153 ;
259: bool arrayLike_indexOp@var1154 ;
260: bool stdStringLike@var1155 ;
261: bool stdAssociativeLike@var1156 ;
262: bool opLessAllowed@var1157 ;
263: bool hasInitializerListConstructor@var1158 ;
264: bool unstableErase@var1159 ;
265: bool unstableInsert@var1160 ;
266: bool view@var1161 ;
267:
268: Action getAction ( const std :: string & function@var1162 ) const {
269: const std ::@expr1073745738 map < std ::@expr1073745739 string , Function > ::@expr1073745740 const_iterator i@var1163 =@expr1073745741 functions@var1150 .@expr1073745742 find (@expr1073745743 function@var1162 ) ;
270: if (@expr1073745744 i@var1163 !=@expr1073745745 functions@var1150 .@expr1073745746 end (@expr1073745747 ) ) {
271: return i@var1163 .@expr1073745748 second@var1164 .@expr1073745749 action@var1165 ; }
272: return Action ::@expr1073745750 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var1166 ) const {
276: const std ::@expr1073745751 map < std ::@expr1073745752 string , Function > ::@expr1073745753 const_iterator i@var1167 =@expr1073745754 functions@var1150 .@expr1073745755 find (@expr1073745756 function@var1166 ) ;
277: if (@expr1073745757 i@var1167 !=@expr1073745758 functions@var1150 .@expr1073745759 end (@expr1073745760 ) ) {
278: return i@var1167 .@expr1073745761 second@var1168 .@expr1073745762 yield@var1169 ; }
279: return Yield ::@expr1073745763 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var1170 ) ;
283: static Action actionFrom ( const std :: string & actionName@var1171 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var1172 ;
286: const Container * detectContainer ( const Token * typeStart@var1173 , bool iterator@var1174 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var1175 , bool * isIterator@var1176 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var1177 ( false ) ,
293: notnull@var1178 ( false ) ,
294: notuninit@var1179 ( -1 ) ,
295: formatstr@var1180 ( false ) ,
296: strz@var1181 ( false ) ,
297: optional@var1182 ( false ) ,
298: variadic@var1183 ( false ) ,
299: iteratorInfo@var1189 ( ) ,
300: direction@var1197 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var1177 ;
303: bool notnull@var1178 ;
304: int notuninit@var1179 ;
305: bool formatstr@var1180 ;
306: bool strz@var1181 ;
307: bool optional@var1182 ;
308: bool variadic@var1183 ;
309: std :: string valid@var1184 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var1185 ( 0 ) , it@var1186 ( false ) , first@var1187 ( false ) , last@var1188 ( false ) { }
314:
315: int container@var1185 ;
316: bool it@var1186 ;
317: bool first@var1187 ;
318: bool last@var1188 ;
319: } ;
320: IteratorInfo iteratorInfo@var1189 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var1190 , int a@var1191 ) : type@var1192 ( t@var1190 ) , arg@var1193 ( a@var1191 ) , arg2@var1194 ( 0 ) , value@var1195 ( 0 ) { }
326: Type type@var1192 ;
327: int arg@var1193 ;
328: int arg2@var1194 ;
329: long long value@var1195 ;
330: } ;
331: std :: vector < MinSize > minsizes@var1196 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var1197 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var1198 ;
344: bool use@var1199 ;
345: bool leakignore@var1200 ;
346: bool isconst@var1201 ;
347: bool ispure@var1202 ;
348: UseRetValType useretval@var1203 ;
349: bool ignore@var1204 ;
350: bool formatstr@var1205 ;
351: bool formatstr_scan@var1206 ;
352: bool formatstr_secure@var1207 ;
353: Container :: Action containerAction@var1208 ;
354: Container :: Yield containerYield@var1209 ;
355: Function ( )
356: : use@var1199 ( false ) ,
357: leakignore@var1200 ( false ) ,
358: isconst@var1201 ( false ) ,
359: ispure@var1202 ( false ) ,
360: useretval@var1203 ( UseRetValType :: NONE ) ,
361: ignore@var1204 ( false ) ,
362: formatstr@var1205 ( false ) ,
363: formatstr_scan@var1206 ( false ) ,
364: formatstr_secure@var1207 ( false ) ,
365: containerAction@var1208 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var1209 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var1210 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var1211 ;
372: bool isUse ( const std :: string & functionName@var1212 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var1213 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var1214 , bool pure@var1215 ) const ;
375: bool isFunctionConst ( const Token * ftok@var1216 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var1217 , int argnr@var1218 ) const {
378: const ArgumentChecks * arg@var1219 ; arg@var1219 =@expr1073745764 getarg (@expr1073745765 ftok@var1217 , argnr@var1218 ) ;
379: return arg@var1219 &&@expr1073745766 arg@var1219 .@expr1073745767 notbool@var1220 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var1221 , int argnr@var1222 ) const ;
383: bool isuninitargbad ( const Token * ftok@var1223 , int argnr@var1224 , int indirect@var1225 = 0 , bool * hasIndirect@var1226 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var1227 , int argnr@var1228 ) const {
386: const ArgumentChecks * arg@var1229 ; arg@var1229 =@expr1073745768 getarg (@expr1073745769 ftok@var1227 , argnr@var1228 ) ;
387: return arg@var1229 &&@expr1073745770 arg@var1229 .@expr1073745771 formatstr@var1230 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var1231 , int argnr@var1232 ) const {
391: const ArgumentChecks * arg@var1233 ; arg@var1233 =@expr1073745772 getarg (@expr1073745773 ftok@var1231 , argnr@var1232 ) ;
392: return arg@var1233 &&@expr1073745774 arg@var1233 .@expr1073745775 strz@var1234 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var1235 , int argnr@var1236 , const long long argvalue@var1237 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var1238 , int argnr@var1239 , double argvalue@var1240 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var1241 , int argnr@var1242 ) const {
399: const ArgumentChecks * arg@var1243 ; arg@var1243 =@expr1073745776 getarg (@expr1073745777 ftok@var1241 , argnr@var1242 ) ;
400: return arg@var1243 ?@expr1073745778 arg@var1243 .@expr1073745779 valid@var1244 :@expr1073745780 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var1245 ;
405: std :: string op1@var1246 ;
406: std :: string op2@var1247 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073745781 isInt (@expr1073745782 op1@var1246 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var1248 , int argnr@var1249 ) const {
413: const ArgumentChecks * arg@var1250 ; arg@var1250 =@expr1073745783 getarg (@expr1073745784 ftok@var1248 , argnr@var1249 ) ;
414: return arg@var1250 &&@expr1073745785 arg@var1250 .@expr3962 iteratorInfo@var1251 .@expr1073745787 it@var1252 ?@expr1073745788 &@expr1073745789 arg@var1250 .@expr3962 iteratorInfo@var1251 :@expr1073745791 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var1253 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var1254 , int argnr@var1255 ) const {
420: const ArgumentChecks * arg@var1256 ; arg@var1256 =@expr1073745792 getarg (@expr1073745793 ftok@var1254 , argnr@var1255 ) ;
421: return arg@var1256 ?@expr1073745794 &@expr1073745795 arg@var1256 .@expr1073745796 minsizes@var1257 :@expr1073745797 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var1258 , int argnr@var1259 ) const ;
425:
426: bool markupFile ( const std :: string & path@var1260 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var1261 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var1365 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var1262 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var1263 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var1264 , const std :: string & token@var1265 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var1266 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var1267 ) const ;
443: const std :: string & blockend ( const std :: string & file@var1268 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var1269 , const std :: string & keyword@var1270 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var1271 ) const {
448: return mExporters@var1368 .@expr1073745798 find (@expr1073745799 prefix@var1271 ) !=@expr1073745800 mExporters@var1368 .@expr1073745801 end (@expr1073745802 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var1272 , const std :: string & token@var1273 ) const {
452: const std ::@expr1073745803 map < std ::@expr1073745804 string , ExportedFunctions > ::@expr1073745805 const_iterator it@var1274 =@expr1073745806 mExporters@var1368 .@expr1073745807 find (@expr1073745808 prefix@var1272 ) ;
453: return (@expr1073745809 it@var1274 !=@expr1073745810 mExporters@var1368 .@expr1073745811 end (@expr1073745812 ) &&@expr1073745813 it@var1274 .@expr1073745814 second@var1275 .@expr1073745815 isPrefix (@expr1073745816 token@var1273 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var1276 , const std :: string & token@var1277 ) const {
457: const std ::@expr1073745817 map < std ::@expr1073745818 string , ExportedFunctions > ::@expr1073745819 const_iterator it@var1278 =@expr1073745820 mExporters@var1368 .@expr1073745821 find (@expr1073745822 prefix@var1276 ) ;
458: return (@expr1073745823 it@var1278 !=@expr1073745824 mExporters@var1368 .@expr1073745825 end (@expr1073745826 ) &&@expr1073745827 it@var1278 .@expr1073745828 second@var1279 .@expr1073745829 isSuffix (@expr1073745830 token@var1277 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var1280 , const std :: string & importer@var1281 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var1282 , Container :: Yield yield@var1283 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var1284 , Container :: Action action@var1285 ) const ;
465:
466: bool isreflection ( const std :: string & token@var1286 ) const {
467: return mReflection@var1370 .@expr1073745831 find (@expr1073745832 token@var1286 ) !=@expr1073745833 mReflection@var1370 .@expr1073745834 end (@expr1073745835 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var1287 ) const {
471: const std ::@expr1073745836 map < std ::@expr1073745837 string , int > ::@expr1073745838 const_iterator it@var1288 =@expr1073745839 mReflection@var1370 .@expr1073745840 find (@expr1073745841 token@var1287 ) ;
472: if (@expr1073745842 it@var1288 !=@expr1073745843 mReflection@var1370 .@expr1073745844 end (@expr1073745845 ) ) {
473: return it@var1288 .@expr1073745846 second@var1289 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var1290 ;
478:
479: struct SmartPointer {
480: std :: string name@var1291 ; name@var1291 = "" ;
481: bool unique@var1292 ; unique@var1292 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var1293 ;
485: bool isSmartPointer ( const Token * tok@var1294 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var1295 ) const ;
487:
488: struct PodType {
489: unsigned int size@var1296 ;
490: char sign@var1297 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var1298 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var1299 ) const {
494: const std ::@expr1073745847 unordered_map < std ::@expr1073745848 string , PodType > ::@expr1073745849 const_iterator it@var1300 =@expr1073745850 mPodTypes@var1371 .@expr1073745851 find (@expr1073745852 name@var1299 ) ;
495: return (@expr4029 it@var1300 !=@expr1073745854 mPodTypes@var1371 .@expr1073745855 end (@expr1073745856 ) ) ?@expr1073745857 &@expr1073745858 (@expr4029 it@var1300 .@expr1073745860 second@var1301 ) :@expr1073745861 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var1312 ( false )
501: , mUnsigned@var1313 ( false )
502: , mLong@var1314 ( false )
503: , mPointer@var1315 ( false )
504: , mPtrPtr@var1316 ( false )
505: , mConstPtr@var1317 ( false ) { }
506: bool operator== ( const PlatformType & type@var1302 ) const {
507: return (@expr1073745862 mSigned@var1312 ==@expr1073745863 type@var1302 .@expr1073745864 mSigned@var1303 &&@expr1073745865
508: mUnsigned@var1313 ==@expr1073745866 type@var1302 .@expr1073745867 mUnsigned@var1304 &&@expr1073745868
509: mLong@var1314 ==@expr1073745869 type@var1302 .@expr1073745870 mLong@var1305 &&@expr1073745871
510: mPointer@var1315 ==@expr1073745872 type@var1302 .@expr1073745873 mPointer@var1306 &&@expr1073745874
511: mPtrPtr@var1316 ==@expr1073745875 type@var1302 .@expr1073745876 mPtrPtr@var1307 &&@expr1073745877
512: mConstPtr@var1317 ==@expr1073745878 type@var1302 .@expr1073745879 mConstPtr@var1308 &&@expr1073745880
513: mType@var1311 ==@expr1073745881 type@var1302 .@expr1073745882 mType@var1309 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var1310 ) const {
516: return !@expr1073745883 (@expr1073745884 *@expr1073745885 this@expr1073745886 ==@expr1073745887 type@var1310 ) ;
517: }
518: std :: string mType@var1311 ;
519: bool mSigned@var1312 ;
520: bool mUnsigned@var1313 ;
521: bool mLong@var1314 ;
522: bool mPointer@var1315 ;
523: bool mPtrPtr@var1316 ;
524: bool mConstPtr@var1317 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var1318 ) const {
529: const std ::@expr1073745888 map < std ::@expr1073745889 string , PlatformType > ::@expr1073745890 const_iterator it@var1319 =@expr1073745891 mPlatformTypes@var1321 .@expr1073745892 find (@expr1073745893 name@var1318 ) ;
530: return (@expr4070 it@var1319 !=@expr1073745895 mPlatformTypes@var1321 .@expr1073745896 end (@expr1073745897 ) ) ?@expr1073745898 &@expr1073745899 (@expr4070 it@var1319 .@expr1073745901 second@var1320 ) :@expr1073745902 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var1321 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var1322 , const std :: string & platform@var1323 ) const {
536: const std ::@expr1073745903 map < std ::@expr4080 string , Platform > ::@expr1073745905 const_iterator it@var1324 =@expr1073745906 mPlatforms@var1373 .@expr1073745907 find (@expr1073745908 platform@var1323 ) ;
537: if (@expr1073745909 it@var1324 !=@expr1073745910 mPlatforms@var1373 .@expr1073745911 end (@expr1073745912 ) ) {
538: const PlatformType * const type@var1325 ; type@var1325 =@expr1073745913 it@var1324 .@expr1073745914 second@var1326 .@expr1073745915 platform_type (@expr1073745916 name@var1322 ) ;
539: if (@expr1073745917 type@var1325 ) {
540: return type@var1325 ; }
541: }
542:
543: const std ::@expr1073745918 map < std ::@expr4080 string , PlatformType > ::@expr1073745920 const_iterator it2@var1327 =@expr1073745921 mPlatformTypes@var1372 .@expr1073745922 find (@expr1073745923 name@var1322 ) ;
544: return (@expr4100 it2@var1327 !=@expr1073745925 mPlatformTypes@var1372 .@expr1073745926 end (@expr1073745927 ) ) ?@expr1073745928 &@expr1073745929 (@expr4100 it2@var1327 .@expr1073745931 second@var1328 ) :@expr1073745932 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var1329 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var1330 , Library :: Container :: Yield y@var1331 , const std :: string & fallback@var1332 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var1333 , const std :: string & typeName@var1334 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var1335 , const std :: string & name@var1336 , std :: set < std :: string > & unknown_elements@var1337 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var1338 ) {
565: mPrefixes@var1342 .@expr1073745933 insert (@expr1073745934 prefix@var1338 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var1339 ) {
568: mSuffixes@var1343 .@expr1073745935 insert (@expr1073745936 suffix@var1339 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var1340 ) const {
571: return (@expr1073745937 mPrefixes@var1342 .@expr1073745938 find (@expr1073745939 prefix@var1340 ) !=@expr1073745940 mPrefixes@var1342 .@expr1073745941 end (@expr1073745942 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var1341 ) const {
574: return (@expr1073745943 mSuffixes@var1343 .@expr1073745944 find (@expr1073745945 suffix@var1341 ) !=@expr1073745946 mSuffixes@var1343 .@expr1073745947 end (@expr1073745948 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var1342 ;
579: std :: set < std :: string > mSuffixes@var1343 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var1351 ( 0 ) { }
584:
585: void setStart ( const char * s@var1344 ) {
586: mStart@var1349 =@expr1073745949 s@var1344 ;
587: }
588: void setEnd ( const char * e@var1345 ) {
589: mEnd@var1350 =@expr1073745950 e@var1345 ;
590: }
591: void setOffset ( const int o@var1346 ) {
592: mOffset@var1351 =@expr1073745951 o@var1346 ;
593: }
594: void addBlock ( const char * blockName@var1347 ) {
595: mBlocks@var1352 .@expr1073745952 insert (@expr1073745953 blockName@var1347 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var1349 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var1350 ;
602: }
603: int offset ( ) const {
604: return mOffset@var1351 ;
605: }
606: bool isBlock ( const std :: string & blockName@var1348 ) const {
607: return mBlocks@var1352 .@expr1073745954 find (@expr1073745955 blockName@var1348 ) !=@expr1073745956 mBlocks@var1352 .@expr1073745957 end (@expr1073745958 ) ;
608: }
609:
610: private:
611: std :: string mStart@var1349 ;
612: std :: string mEnd@var1350 ;
613: int mOffset@var1351 ;
614: std :: set < std :: string > mBlocks@var1352 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var1353 ;
618: std :: set < std :: string > mFiles@var1354 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var1355 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var1356 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var1357 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var1358 ;
623: std :: map < std :: string , std :: string > mReturnValue@var1359 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var1360 ;
625: std :: map < std :: string , int > mReturnValueContainer@var1361 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var1362 ;
627: std :: map < std :: string , bool > mReportErrors@var1363 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var1364 ;
629: std :: set < std :: string > mMarkupExtensions@var1365 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var1366 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var1367 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var1368 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var1369 ;
634: std :: map < std :: string , int > mReflection@var1370 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var1371 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var1372 ;
637: std :: map < std :: string , Platform > mPlatforms@var1373 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var1374 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var1375 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var1376 , int argnr@var1377 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var1378 , bool * error@var1379 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var1380 , const std :: string & name@var1381 ) {
646: const std ::@expr1073745959 map < std ::@expr1073745960 string , AllocFunc > ::@expr1073745961 const_iterator it@var1382 =@expr1073745962 data@var1380 .@expr1073745963 find (@expr1073745964 name@var1381 ) ;
647: return (@expr1073745965 it@var1382 ==@expr1073745966 data@var1380 .@expr1073745967 end (@expr1073745968 ) ) ?@expr1073745969 nullptr :@expr1073745970 &@expr1073745971 it@var1382 .@expr1073745972 second@var1383 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var1384 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var1385 ,
654: const Settings * settings@var1386 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var1387 = nullptr ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1388 ( nullptr ) , num@var1389 ( 0 ) , known@var1390 ( true ) { }
62:
63: const Token * tok@var1388 ;
64: long long num@var1389 ;
65: bool known@var1390 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1391 ;
72: const Scope * classScope@var1392 ;
73: const Scope * enclosingScope@var1393 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1394 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1396 ( nullptr ) , nameTok@var1397 ( nullptr ) , access@var1398 ( AccessControl :: Public ) , isVirtual@var1399 ( false ) { }
82:
83: std :: string name@var1395 ;
84: const Type * type@var1396 ;
85: const Token * nameTok@var1397 ;
86: AccessControl access@var1398 ;
87: bool isVirtual@var1399 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1400 ) const {
90: return this@expr1073745973 .@expr1073745974 type@var1396 <@expr1073745975 rhs@var1400 .@expr1073745976 type@var1401 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1402 ( nullptr ) , nameEnd@var1403 ( nullptr ) , type@var1404 ( nullptr ) { }
97:
98: const Token * nameStart@var1402 ;
99: const Token * nameEnd@var1403 ;
100: const Type * type@var1404 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1405 ;
104: std :: vector < FriendInfo > friendList@var1406 ;
105:
106: const Token * typeStart@var1407 ;
107: const Token * typeEnd@var1408 ;
108: long long sizeOf@var1409 ;
109:
110: Type ( const Token * classDef_@var1410 = nullptr , const Scope * classScope_@var1411 = nullptr , const Scope * enclosingScope_@var1412 = nullptr ) :
111: classDef@var1391 ( classDef_@var1410 ) ,
112: classScope@var1392 ( classScope_@var1411 ) ,
113: enclosingScope@var1393 ( enclosingScope_@var1412 ) ,
114: needInitialization@var1394 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1407 ( nullptr ) ,
116: typeEnd@var1408 ( nullptr ) ,
117: sizeOf@var1409 ( 0 ) {
118: if (@expr1073745977 classDef_@var1410 &&@expr1073745978 classDef_@var1410 .@expr4155 str (@expr4156 ) ==@expr1073745981 "enum" ) {
119: needInitialization@var1394 =@expr1073745982 NeedInitialization ::@expr1073745983 True ; }
120: else { if (@expr1073745984 classDef_@var1410 &&@expr1073745985 classDef_@var1410 .@expr4155 str (@expr4156 ) ==@expr1073745988 "using" ) {
121: typeStart@var1407 =@expr1073745989 classDef@var1391 .@expr1073745990 tokAt (@expr1073745991 3 ) ;
122: typeEnd@var1408 =@expr1073745992 typeStart@var1407 ;
123: while (@expr1073745993 typeEnd@var1408 .@expr4170 next (@expr4171 ) &&@expr1073745996 typeEnd@var1408 .@expr4170 next (@expr4171 ) .@expr1073745999 str (@expr1073746000 ) !=@expr1073746001 ";" ) {
124: typeEnd@var1408 =@expr1073746002 typeEnd@var1408 .@expr4170 next (@expr4171 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1391 ?@expr1073746005 classDef@var1391 .@expr1073746006 str (@expr1073746007 ) :@expr1073746008 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1391 &&@expr1073746009 classDef@var1391 .@expr1073746010 str (@expr1073746011 ) ==@expr1073746012 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1413 , const Token * tok1@var1414 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1415 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1416 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1417 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1418 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1419 ) : scope@var1420 ( scope_@var1419 ) , name@var1421 ( nullptr ) , value@var1422 ( 0 ) , start@var1423 ( nullptr ) , end@var1424 ( nullptr ) , value_known@var1425 ( false ) { }
167: const Scope * scope@var1420 ;
168: const Token * name@var1421 ;
169: long long value@var1422 ;
170: const Token * start@var1423 ;
171: const Token * end@var1424 ;
172: bool value_known@var1425 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous2 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1426 ) const {
204: return (@expr4189 (@expr4189 mFlags@var1462 &@expr1073746015 flag_@var1426 ) !=@expr1073746016 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1427 , bool state_@var1428 ) {
213: mFlags@var1462 =@expr1073746017 state_@var1428 ?@expr1073746018 mFlags@var1462 |@expr1073746019 flag_@var1427 :@expr1073746020 mFlags@var1462 &@expr1073746021 ~@expr1073746022 flag_@var1427 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1429 , bool * isContainer@var1430 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1431 , const Token * start_@var1432 , const Token * end_@var1433 ,
226: int index_@var1434 , AccessControl access_@var1435 , const Type * type_@var1436 ,
227: const Scope * scope_@var1437 , const Settings * settings@var1438 )
228: : mNameToken@var1457 ( name_@var1431 ) ,
229: mTypeStartToken@var1458 ( start_@var1432 ) ,
230: mTypeEndToken@var1459 ( end_@var1433 ) ,
231: mIndex@var1460 ( index_@var1434 ) ,
232: mAccess@var1461 ( access_@var1435 ) ,
233: mFlags@var1462 ( 0 ) ,
234: mType@var1463 ( type_@var1436 ) ,
235: mScope@var1464 ( scope_@var1437 ) ,
236: mValueType@var1465 ( nullptr ) {
237: evaluate (@expr1073746023 settings@var1438 ) ;
238: }
239:
240: Variable ( const Token * name_@var1439 , const std :: string & clangType@var1440 , const Token * typeStart@var1441 ,
241: const Token * typeEnd@var1442 , int index_@var1443 , AccessControl access_@var1444 ,
242: const Type * type_@var1445 , const Scope * scope_@var1446 ) ;
243:
244: Variable ( const Variable & var@var1447 , const Scope * scope@var1448 ) ;
245:
246: Variable ( const Variable & var@var1449 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1450 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1457 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1458 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1459 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073746024 mNameToken@var1457 ) {
300: return mNameToken@var1457 .@expr1073746025 str (@expr1073746026 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073746027 mNameToken@var1457 ) {
312: return mNameToken@var1457 .@expr1073746028 varId (@expr1073746029 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1460 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1461 ==@expr1073746030 AccessControl ::@expr1073746031 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1461 ==@expr1073746032 AccessControl ::@expr1073746033 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1461 ==@expr1073746034 AccessControl ::@expr1073746035 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1461 ==@expr1073746036 AccessControl ::@expr1073746037 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1461 ==@expr1073746038 AccessControl ::@expr1073746039 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1461 ==@expr1073746040 AccessControl ::@expr1073746041 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073746043 mAccess@var1461 ==@expr1073746044 AccessControl ::@expr1073746045 Local@expr1073746042 ) &&@expr1073746046 !@expr1073746047 isExtern (@expr1073746048 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073746049 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073746050 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073746051 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073746052 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073746053 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1461 ==@expr1073746054 AccessControl ::@expr1073746055 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073746056 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073746057 fIsArray ) &&@expr1073746058 !@expr1073746059 getFlag (@expr1073746060 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073746061 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073746062 ) &&@expr1073746063 getFlag (@expr1073746064 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073746065 fIsArray ) ||@expr1073746066 getFlag (@expr1073746067 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073746068 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073746069 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073746070 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073746071 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1463 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1463 ?@expr1073746072 mType@var1463 .@expr1073746073 classScope@var1468 :@expr1073746074 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1464 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1466 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1451 ) const {
550: return mDimensions@var1466 [@expr1073746075 index_@var1451 ] .@expr1073746076 num@var2701 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1452 ) const {
558: return mDimensions@var1466 [@expr1073746077 index_@var1452 ] .@expr1073746078 known@var2702 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073746079 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073746080 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073746081 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1453 ) const {
602: return isStlType (@expr1073746082 ) &&@expr1073746083 stlType@var1453 ==@expr1073746084 mTypeStartToken@var1458 .@expr1073746085 strAt (@expr1073746086 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1454 ) const {
616: return isStlType (@expr1073746087 ) &&@expr1073746088 stlTypes@var1454 .@expr1073746089 find (@expr1073746090 mTypeStartToken@var1458 .@expr1073746091 strAt (@expr1073746092 2 ) ) !=@expr1073746093 stlTypes@var1454 .@expr1073746094 end (@expr1073746095 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073746096 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr4273 ) &&@expr1073746098 type (@expr4273 ) .@expr1073746100 isEnumType (@expr1073746101 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073746102 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1465 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1455 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1461 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1456 ) {
660: mType@var1463 =@expr1073746103 t@var1456 ;
661: }
662:
663:
664: const Token * mNameToken@var1457 ;
665:
666:
667: const Token * mTypeStartToken@var1458 ;
668:
669:
670: const Token * mTypeEndToken@var1459 ;
671:
672:
673: int mIndex@var1460 ;
674:
675:
676: AccessControl mAccess@var1461 ;
677:
678:
679: unsigned int mFlags@var1462 ;
680:
681:
682: const Type * mType@var1463 ;
683:
684:
685: const Scope * mScope@var1464 ;
686:
687: ValueType * mValueType@var1465 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1466 ;
691:
692:
693: void evaluate ( const Settings * settings@var1467 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous3 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1469 ) const {
735: return (@expr4280 (@expr4280 mFlags@var1518 &@expr1073746106 flag@var1469 ) !=@expr1073746107 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1470 , bool state@var1471 ) {
744: mFlags@var1518 =@expr1073746108 state@var1471 ?@expr1073746109 mFlags@var1518 |@expr1073746110 flag@var1470 :@expr1073746111 mFlags@var1518 &@expr1073746112 ~@expr1073746113 flag@var1470 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1472 , const Token * tok@var1473 , const Scope * scope@var1474 , const Token * tokDef@var1475 , const Token * tokArgDef@var1476 ) ;
751: Function ( const Token * tokenDef@var1477 , const std :: string & clangType@var1478 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1488 .@expr1073746114 str (@expr1073746115 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1496 .@expr1073746116 size (@expr1073746117 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1496 .@expr1073746118 size (@expr1073746119 ) -@expr1073746120 initArgCount@var1497 ;
764: }
765: const Variable * getArgumentVar ( int num@var1479 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1497 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1480 , const Scope * scope@var1481 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1482 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1483 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1498 ==@expr1073746121 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1498 ==@expr1073746122 eConstructor ||@expr1073746123
785: type@var1498 ==@expr1073746124 eCopyConstructor ||@expr1073746125
786: type@var1498 ==@expr1073746126 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1498 ==@expr1073746127 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1488 .@expr1073746128 isAttributeConstructor (@expr1073746129 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1488 .@expr1073746130 isAttributeDestructor (@expr1073746131 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1488 .@expr1073746132 isAttributePure (@expr1073746133 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1488 .@expr1073746134 isAttributeConst (@expr1073746135 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1488 .@expr1073746136 isAttributeNoreturn (@expr1073746137 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1488 .@expr1073746138 isAttributeNothrow (@expr1073746139 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1488 .@expr1073746140 isAttributeNodiscard (@expr1073746141 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073746142 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073746143 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073746144 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073746145 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073746146 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073746147 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073746148 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073746149 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073746150 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073746151 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073746152 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073746153 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073746154 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073746155 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073746156 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073746157 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073746158 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073746159 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073746160 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073746161 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073746162 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073746163 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1484 ) {
881: setFlag (@expr1073746164 fHasBody , state@var1484 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073746165 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073746166 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1485 ) {
891: setFlag (@expr1073746167 fIsEscapeFunction , state@var1485 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073746168 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1486 ) {
898: setFlag (@expr1073746169 fIsConstexpr , state@var1486 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1487 ) const ;
901:
902: const Token * tokenDef@var1488 ;
903: const Token * argDef@var1489 ;
904: const Token * token@var1490 ;
905: const Token * arg@var1491 ;
906: const Token * retDef@var1492 ;
907: const :: Type * retType@var1493 ;
908: const Scope * functionScope@var1494 ;
909: const Scope * nestedIn@var1495 ;
910: std :: list < Variable > argumentList@var1496 ;
911: int initArgCount@var1497 ;
912: Type type@var1498 ;
913: AccessControl access@var1499 ;
914: const Token * noexceptArg@var1500 ;
915: const Token * throwArg@var1501 ;
916: const Token * templateDef@var1502 ;
917: const Token * functionPointerUsage@var1503 ;
918:
919: bool argsMatch ( const Scope * scope@var1504 , const Token * first@var1505 , const Token * second@var1506 , const std :: string & path@var1507 , int path_length@var1508 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1509 , bool unknown@var1510 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1511 , bool unknown@var1512 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1513 , bool unknown@var1514 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1515 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073746170 this@expr1073746171 .@expr1073746172 hasTrailingReturnType (@expr1073746173 ) ) {
931: return Token ::@expr1073746174 findmatch (@expr1073746175 retDef@var1492 , "{|;" ) ;
932: } else {
933: return tokenDef@var1488 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1516 , bool * foundAllBaseClasses@var1517 ) const ;
946:
947: unsigned int mFlags@var1518 ;
948:
949: void isInline ( bool state@var1519 ) {
950: setFlag (@expr1073746176 fIsInline , state@var1519 ) ;
951: }
952: void isConst ( bool state@var1520 ) {
953: setFlag (@expr1073746177 fIsConst , state@var1520 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1521 ) {
956: setFlag (@expr1073746178 fHasVirtualSpecifier , state@var1521 ) ;
957: }
958: void isPure ( bool state@var1522 ) {
959: setFlag (@expr1073746179 fIsPure , state@var1522 ) ;
960: }
961: void isStatic ( bool state@var1523 ) {
962: setFlag (@expr1073746180 fIsStatic , state@var1523 ) ;
963: }
964: void isStaticLocal ( bool state@var1524 ) {
965: setFlag (@expr1073746181 fIsStaticLocal , state@var1524 ) ;
966: }
967: void isExtern ( bool state@var1525 ) {
968: setFlag (@expr1073746182 fIsExtern , state@var1525 ) ;
969: }
970: void isFriend ( bool state@var1526 ) {
971: setFlag (@expr1073746183 fIsFriend , state@var1526 ) ;
972: }
973: void isExplicit ( bool state@var1527 ) {
974: setFlag (@expr1073746184 fIsExplicit , state@var1527 ) ;
975: }
976: void isDefault ( bool state@var1528 ) {
977: setFlag (@expr1073746185 fIsDefault , state@var1528 ) ;
978: }
979: void isDelete ( bool state@var1529 ) {
980: setFlag (@expr1073746186 fIsDelete , state@var1529 ) ;
981: }
982: void isNoExcept ( bool state@var1530 ) {
983: setFlag (@expr1073746187 fIsNoExcept , state@var1530 ) ;
984: }
985: void isThrow ( bool state@var1531 ) {
986: setFlag (@expr1073746188 fIsThrow , state@var1531 ) ;
987: }
988: void isOperator ( bool state@var1532 ) {
989: setFlag (@expr1073746189 fIsOperator , state@var1532 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1533 ) {
992: setFlag (@expr1073746190 fHasLvalRefQual , state@var1533 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1534 ) {
995: setFlag (@expr1073746191 fHasRvalRefQual , state@var1534 ) ;
996: }
997: void isVariadic ( bool state@var1535 ) {
998: setFlag (@expr1073746192 fIsVariadic , state@var1535 ) ;
999: }
1000: void isVolatile ( bool state@var1536 ) {
1001: setFlag (@expr1073746193 fIsVolatile , state@var1536 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1537 ) {
1004: return setFlag (@expr1073746194 fHasTrailingReturnType , state@var1537 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1538 ) {
1007: setFlag (@expr1073746195 fIsInlineKeyword , state@var1538 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1539 , const Scope * scope@var1540 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1541 ;
1019: const Scope * scope@var1542 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1543 , const Token * classDef_@var1544 , const Scope * nestedIn_@var1545 ) ;
1025: Scope ( const SymbolDatabase * check_@var1546 , const Token * classDef_@var1547 , const Scope * nestedIn_@var1548 , ScopeType type_@var1549 , const Token * start_@var1550 ) ;
1026:
1027: const SymbolDatabase * check@var1551 ;
1028: std :: string className@var1552 ;
1029: const Token * classDef@var1553 ;
1030: const Token * bodyStart@var1554 ;
1031: const Token * bodyEnd@var1555 ;
1032: std :: list < Function > functionList@var1556 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1557 ;
1034: std :: list < Variable > varlist@var1558 ;
1035: const Scope * nestedIn@var1559 ;
1036: std :: list < Scope * > nestedList@var1560 ;
1037: int numConstructors@var1561 ;
1038: int numCopyOrMoveConstructors@var1562 ;
1039: std :: list < UsingInfo > usingList@var1563 ;
1040: ScopeType type@var1564 ;
1041: Type * definedType@var1565 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1566 ;
1043: std :: vector < const Token * > bodyStartList@var1567 ;
1044:
1045:
1046: const Scope * functionOf@var1568 ;
1047: Function * function@var1569 ;
1048:
1049:
1050: const Token * enumType@var1570 ;
1051: bool enumClass@var1571 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1572 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1573 ) {
1056: bodyStart@var1554 =@expr1073746196 start@var1573 ;
1057: bodyEnd@var1555 =@expr1073746197 start@var1573 ?@expr1073746198 start@var1573 .@expr1073746199 link (@expr1073746200 ) :@expr1073746201 nullptr ;
1058: if (@expr1073746202 start@var1573 ) {
1059: bodyStartList@var1567 .@expr1073746203 push_back (@expr1073746204 start@var1573 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1552 .@expr1073746205 size (@expr1073746206 ) >@expr1073746207 9 &&@expr1073746208 className@var1552 .@expr1073746209 compare (@expr1073746210 0 , 9 , "Anonymous" ) ==@expr1073746211 0 &&@expr1073746212 std ::@expr1073746213 isdigit (@expr1073746214 className@var1552 [@expr1073746215 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1574 ) const {
1068: for (@expr1073746216 const Enumerator &@expr1073746217 i@var1575 :@expr1073746218 enumeratorList@var1572 ) {
1069: if (@expr1073746219 i@var1575 .@expr1073746220 name@var1576 .@expr1073746221 str (@expr1073746222 ) ==@expr1073746223 name@var1574 ) {
1070: return &@expr1073746224 i@var1575 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1577 ) const {
1076: if (@expr1073746225 !@expr1073746226 outer@var1577 ) {
1077: return false ; }
1078: if (@expr1073746227 outer@var1577 ==@expr1073746228 this@expr1073746229 ) {
1079: return true ; }
1080: const Scope * parent@var1578 ; parent@var1578 =@expr1073746230 nestedIn@var1559 ;
1081: while (@expr1073746231 outer@var1577 !=@expr1073746232 parent@var1578 &&@expr1073746233 parent@var1578 ) {
1082: parent@var1578 =@expr1073746234 parent@var1578 .@expr1073746235 nestedIn@var1579 ; }
1083: if (@expr1073746236 parent@var1578 &&@expr1073746237 parent@var1578 ==@expr1073746238 outer@var1577 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1580 ) {
1089: while (@expr1073746239 scope@var1580 ) {
1090: if (@expr1073746240 scope@var1580 .@expr1073746241 type@var1581 ==@expr1073746242 Scope ::@expr1073746243 eFunction ) {
1091: break ; }
1092: scope@var1580 =@expr1073746244 scope@var1580 .@expr1073746245 nestedIn@var1582 ;
1093: }
1094: if (@expr1073746246 !@expr1073746247 scope@var1580 ) {
1095: return nullptr ; }
1096: return scope@var1580 .@expr1073746248 function@var1583 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073746249 type@var1564 ==@expr1073746250 eClass ||@expr1073746251 type@var1564 ==@expr1073746252 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073746253 type@var1564 ==@expr1073746254 eClass ||@expr1073746255 type@var1564 ==@expr1073746256 eStruct ||@expr1073746257 type@var1564 ==@expr1073746258 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1564 !=@expr1073746259 eClass &&@expr1073746260 type@var1564 !=@expr1073746261 eStruct &&@expr1073746262 type@var1564 !=@expr1073746263 eUnion &&@expr1073746264 type@var1564 !=@expr1073746265 eGlobal &&@expr1073746266 type@var1564 !=@expr1073746267 eNamespace &&@expr1073746268 type@var1564 !=@expr1073746269 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1564 ==@expr1073746270 Scope ::@expr4447 ScopeType ::@expr1073746272 eFor ||@expr1073746273 type@var1564 ==@expr1073746274 Scope ::@expr4447 ScopeType ::@expr1073746276 eWhile ||@expr1073746277 type@var1564 ==@expr1073746278 Scope ::@expr4447 ScopeType ::@expr1073746280 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073746281 type@var1564 ==@expr1073746282 eIf ||@expr1073746283 type@var1564 ==@expr1073746284 eElse ||@expr1073746285
1117: type@var1564 ==@expr1073746286 eFor ||@expr1073746287 type@var1564 ==@expr1073746288 eWhile ||@expr1073746289 type@var1564 ==@expr1073746290 eDo ||@expr1073746291
1118: type@var1564 ==@expr1073746292 eSwitch ||@expr1073746293 type@var1564 ==@expr1073746294 eUnconditional ||@expr1073746295
1119: type@var1564 ==@expr1073746296 eTry ||@expr1073746297 type@var1564 ==@expr1073746298 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1584 , bool requireConst@var1585 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1586 , bool isC@var1587 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1588 ) {
1135: return const_cast < Scope *@expr4475 > (@expr1073746300 const_cast < const Scope *@expr4475 > (@expr1073746302 this@expr1073746303 ) .@expr1073746304 findRecordInNestedList (@expr1073746305 name@var1588 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1589 ) const ;
1139: Type * findType ( const std :: string & name@var1590 ) {
1140: return const_cast < Type *@expr4482 > (@expr1073746307 const_cast < const Scope *@expr4482 > (@expr1073746309 this@expr1073746310 ) .@expr1073746311 findType (@expr1073746312 name@var1590 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1591 ) ;
1148:
1149: void addVariable ( const Token * token_@var1592 , const Token * start_@var1593 ,
1150: const Token * end_@var1594 , AccessControl access_@var1595 , const Type * type_@var1596 ,
1151: const Scope * scope_@var1597 , const Settings * settings@var1598 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1599 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1600 ) {
1159: functionList@var1556 .@expr1073746313 push_back (@expr1073746314 func@var1600 ) ;
1160:
1161: const Function * back@var1601 ; back@var1601 =@expr1073746315 &@expr1073746316 functionList@var1556 .@expr1073746317 back (@expr1073746318 ) ;
1162:
1163: functionMap@var1557 .@expr1073746319 insert (@expr1073746320 make_pair (@expr1073746321 back@var1601 .@expr1073746322 tokenDef@var1602 .@expr1073746323 str (@expr1073746324 ) , back@var1601 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1603 , AccessControl varaccess@var1604 , const Settings * settings@var1605 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1606 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1607 , bool isCpp@var1608 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1609 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1610 , const Token * & vartok@var1611 , const Token * & typetok@var1612 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1613 , int args@var1614 , std :: vector < const Function * > & matches@var1615 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1616 , const Token * start@var1617 , const Token * end@var1618 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1619 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1620 ;
1239: int bits@var1621 ;
1240: int pointer@var1622 ;
1241: int constness@var1623 ;
1242: Reference reference@var1624 ; reference@var1624 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1625 ;
1245: const :: Type * smartPointerType@var1626 ;
1246: const Token * smartPointerTypeToken@var1627 ;
1247: const Library :: SmartPointer * smartPointer@var1628 ;
1248: const Library :: Container * container@var1629 ;
1249:
1250: const Token * containerTypeToken@var1630 ;
1251:
1252: std :: string originalTypeName@var1631 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1619 ( UNKNOWN_SIGN ) ,
1257: type@var1620 ( UNKNOWN_TYPE ) ,
1258: bits@var1621 ( 0 ) ,
1259: pointer@var1622 ( 0U ) ,
1260: constness@var1623 ( 0U ) ,
1261: typeScope@var1625 ( nullptr ) ,
1262: smartPointerType@var1626 ( nullptr ) ,
1263: smartPointerTypeToken@var1627 ( nullptr ) ,
1264: smartPointer@var1628 ( nullptr ) ,
1265: container@var1629 ( nullptr ) ,
1266: containerTypeToken@var1630 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1632 , enum Type t@var1633 , int p@var1634 )
1269: : sign@var1619 ( s@var1632 ) ,
1270: type@var1620 ( t@var1633 ) ,
1271: bits@var1621 ( 0 ) ,
1272: pointer@var1622 ( p@var1634 ) ,
1273: constness@var1623 ( 0U ) ,
1274: typeScope@var1625 ( nullptr ) ,
1275: smartPointerType@var1626 ( nullptr ) ,
1276: smartPointerTypeToken@var1627 ( nullptr ) ,
1277: smartPointer@var1628 ( nullptr ) ,
1278: container@var1629 ( nullptr ) ,
1279: containerTypeToken@var1630 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1635 , enum Type t@var1636 , int p@var1637 , int c@var1638 )
1282: : sign@var1619 ( s@var1635 ) ,
1283: type@var1620 ( t@var1636 ) ,
1284: bits@var1621 ( 0 ) ,
1285: pointer@var1622 ( p@var1637 ) ,
1286: constness@var1623 ( c@var1638 ) ,
1287: typeScope@var1625 ( nullptr ) ,
1288: smartPointerType@var1626 ( nullptr ) ,
1289: smartPointerTypeToken@var1627 ( nullptr ) ,
1290: smartPointer@var1628 ( nullptr ) ,
1291: container@var1629 ( nullptr ) ,
1292: containerTypeToken@var1630 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1639 , enum Type t@var1640 , int p@var1641 , int c@var1642 , const std :: string & otn@var1643 )
1295: : sign@var1619 ( s@var1639 ) ,
1296: type@var1620 ( t@var1640 ) ,
1297: bits@var1621 ( 0 ) ,
1298: pointer@var1622 ( p@var1641 ) ,
1299: constness@var1623 ( c@var1642 ) ,
1300: typeScope@var1625 ( nullptr ) ,
1301: smartPointerType@var1626 ( nullptr ) ,
1302: smartPointerTypeToken@var1627 ( nullptr ) ,
1303: smartPointer@var1628 ( nullptr ) ,
1304: container@var1629 ( nullptr ) ,
1305: containerTypeToken@var1630 ( nullptr ) ,
1306: originalTypeName@var1631 ( otn@var1643 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1644 , const Settings * settings@var1645 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1646 , bool longType@var1647 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1648 , const ValueType * func@var1649 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1650 , const Variable * callVar@var1651 , const Variable * funcVar@var1652 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746325 type@var1620 >=@expr1073746326 ValueType ::@expr1073746327 Type ::@expr1073746328 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746329 type@var1620 >=@expr1073746330 ValueType ::@expr4507 Type ::@expr1073746332 BOOL &&@expr1073746333 type@var1620 <=@expr1073746334 ValueType ::@expr4507 Type ::@expr1073746336 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746337 type@var1620 >=@expr1073746338 ValueType ::@expr4515 Type ::@expr1073746340 FLOAT &&@expr1073746341 type@var1620 <=@expr1073746342 ValueType ::@expr4515 Type ::@expr1073746344 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1653 , const Settings * settings@var1654 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1625 &&@expr1073746345 typeScope@var1625 .@expr1073746346 type@var1655 ==@expr1073746347 Scope ::@expr1073746348 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1656 , bool p@var1657 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1658 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1659 , const Settings * settings@var1660 , ErrorLogger * errorLogger@var1661 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1662 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1663 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1664 ;
1359:
1360:
1361: std :: list < Type > typeList@var1665 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1666 , const Token * typeTok@var1667 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1668 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1669 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1670 , const Scope * startScope@var1671 , bool lookOutside@var1672 = false ) const ;
1382: Type * findType ( const Token * startTok@var1673 , Scope * startScope@var1674 , bool lookOutside@var1675 = false ) const {
1383: return const_cast < Type *@expr4525 > (@expr1073746350 this@expr1073746351 .@expr1073746352 findType (@expr1073746353 startTok@var1673 , const_cast < const Scope *@expr4525 > (@expr1073746355 startScope@var1674 ) , lookOutside@var1675 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1676 , const Scope * startScope@var1677 ) const ;
1387: Scope * findScope ( const Token * tok@var1678 , Scope * startScope@var1679 ) const {
1388: return const_cast < Scope *@expr4532 > (@expr1073746357 this@expr1073746358 .@expr1073746359 findScope (@expr1073746360 tok@var1678 , const_cast < const Scope *@expr4532 > (@expr1073746362 startScope@var1679 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1680 ) const {
1392: return varid@var1680 <@expr1073746363 mVariableList@var1737 .@expr1073746364 size (@expr1073746365 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1681 ) const {
1396: return mVariableList@var1737 .@expr1073746366 at (@expr1073746367 varId@var1681 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1737 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1682 , const std :: string & type@var1683 , const std :: string & msg@var1684 ) const ;
1407:
1408: void printOut ( const char * title@var1685 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1686 , const char * indent@var1687 ) const ;
1410: void printXml ( std :: ostream & out@var1688 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1689 , Token * tokens@var1690 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1691 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1692 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1693 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1694 , const Token * * tok@var1695 , const Token * argStart@var1696 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1697 , const Token * tok@var1698 , const Token * argStart@var1699 , const Token * funcStart@var1700 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1701 , const Token * & tok@var1702 , const Token * argStart@var1703 , const Token * funcStart@var1704 ) ;
1469: void addNewFunction ( Scope * * scope@var1705 , const Token * * tok@var1706 ) ;
1470: bool isFunction ( const Token * tok@var1707 , const Scope * outerScope@var1708 , const Token * * funcStart@var1709 , const Token * * argStart@var1710 , const Token * * declEnd@var1711 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1712 , const Scope * startScope@var1713 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1714 , const Scope * scope@var1715 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1716 , const Scope * ns@var1717 , const std :: string & path@var1718 , int path_length@var1719 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1720 , const Token * typeTok@var1721 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1722 , const Token * vartok@var1723 , Token * membertok@var1724 , const Variable * membervar@var1725 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1726 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1727 ) const ;
1485:
1486: void setValueType ( Token * tok@var1728 , const ValueType & valuetype@var1729 ) ;
1487: void setValueType ( Token * tok@var1730 , const Variable & var@var1731 ) ;
1488: void setValueType ( Token * tok@var1732 , const Enumerator & enumerator@var1733 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1734 ;
1491: const Settings * mSettings@var1735 ;
1492: ErrorLogger * mErrorLogger@var1736 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1737 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1738 ;
1499:
1500: bool mIsCpp@var1739 ;
1501: ValueType :: Sign mDefaultSignedness@var1740 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1741 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1742 , const TFunc & visitor@var1743 )
52: {
53: if (@expr1073746368 !@expr1073746369 ast@var1742 ) {
54: return ; }
55:
56: std ::@expr1073746370 stack < T *@expr4547 , std ::@expr1073746372 vector < T *@expr4547 > > tokens@var1744 ;
57: T * tok@var1745 ; tok@var1745 =@expr1073746374 ast@var1742 ;
58: do {
59: ChildrenToVisit c@var1746 ; c@var1746 =@expr1073746375 visitor@var1743 (@expr1073746376 tok@var1745 ) ;
60:
61: if (@expr1073746377 c@var1746 ==@expr1073746378 ChildrenToVisit ::@expr1073746379 done ) {
62: break ; }
63: if (@expr1073746380 c@var1746 ==@expr1073746381 ChildrenToVisit ::@expr1073746382 op2 ||@expr1073746383 c@var1746 ==@expr4560 ChildrenToVisit ::@expr4561 op1_and_op2 ) {
64: T * t2@var1747 ; t2@var1747 =@expr1073746386 tok@var1745 .@expr1073746387 astOperand2 (@expr1073746388 ) ;
65: if (@expr1073746389 t2@var1747 ) {
66: tokens@var1744 .@expr4566 push (@expr1073746391 t2@var1747 ) ; }
67: }
68: if (@expr1073746392 c@var1746 ==@expr1073746393 ChildrenToVisit ::@expr1073746394 op1 ||@expr1073746395 c@var1746 ==@expr4560 ChildrenToVisit ::@expr4561 op1_and_op2 ) {
69: T * t1@var1748 ; t1@var1748 =@expr1073746398 tok@var1745 .@expr1073746399 astOperand1 (@expr1073746400 ) ;
70: if (@expr1073746401 t1@var1748 ) {
71: tokens@var1744 .@expr4566 push (@expr1073746403 t1@var1748 ) ; }
72: }
73:
74: if (@expr1073746404 tokens@var1744 .@expr1073746405 empty (@expr1073746406 ) ) {
75: break ; }
76:
77: tok@var1745 =@expr1073746407 tokens@var1744 .@expr1073746408 top (@expr1073746409 ) ;
78: tokens@var1744 .@expr1073746410 pop (@expr1073746411 ) ;
79: } while (@expr1073746412 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1749 , const std :: function < bool ( const Token * ) > & pred@var1750 ) ;
83: const Token * findExpression ( const int exprid@var1751 ,
84: const Token * start@var1752 ,
85: const Token * end@var1753 ,
86: const std :: function < bool ( const Token * ) > & pred@var1754 ) ;
87: const Token * findExpression ( const Token * start@var1755 , const int exprid@var1756 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1757 , const char * op@var1758 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1759 , const char * op@var1760 ) ;
91:
92: int astCount ( const Token * tok@var1761 , const char * op@var1762 , int depth@var1763 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1764 , const Token * tok@var1765 ) ;
95:
96: bool astHasVar ( const Token * tok@var1766 , int varid@var1767 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1768 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1769 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1770 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1771 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1772 , bool unknown@var1773 ) ;
107: bool astIsUnsigned ( const Token * tok@var1774 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1775 , bool unknown@var1776 ) ;
110:
111: bool astIsBool ( const Token * tok@var1777 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1778 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1779 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1780 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1781 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1782 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1783 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1784 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1785 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1786 , const std :: string & comp@var1787 , const std :: string & rhs@var1788 , const Token * * vartok@var1789 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1790 ) ;
140:
141: bool isTemporary ( bool cpp@var1791 , const Token * tok@var1792 , const Library * library@var1793 , bool unknown@var1794 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1795 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1796 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1797 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1798 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1799 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1800 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1801 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1802 ) ;
155: const Token * getParentLifetime ( bool cpp@var1803 , const Token * tok@var1804 , const Library * library@var1805 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1806 ) ;
158: bool astIsRHS ( const Token * tok@var1807 ) ;
159:
160: Token * getCondTok ( Token * tok@var1808 ) ;
161: const Token * getCondTok ( const Token * tok@var1809 ) ;
162:
163: Token * getInitTok ( Token * tok@var1810 ) ;
164: const Token * getInitTok ( const Token * tok@var1811 ) ;
165:
166: Token * getStepTok ( Token * tok@var1812 ) ;
167: const Token * getStepTok ( const Token * tok@var1813 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1814 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1815 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1816 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1817 ,
180: int * const varid@var1818 ,
181: bool * const knownInitValue@var1819 ,
182: long long * const initValue@var1820 ,
183: bool * const partialCond@var1821 ,
184: long long * const stepValue@var1822 ,
185: long long * const lastValue@var1823 ) ;
186:
187: bool precedes ( const Token * tok1@var1824 , const Token * tok2@var1825 ) ;
188: bool succeeds ( const Token * tok1@var1826 , const Token * tok2@var1827 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1828 , bool onVar@var1829 = true , int depth@var1830 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1831 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1832 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1833 ,
198: bool temporary@var1834 = true ,
199: bool inconclusive@var1835 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1836 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1837 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1838 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1839 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1840 , bool macro@var1841 , const Token * tok1@var1842 , const Token * tok2@var1843 , const Library & library@var1844 , bool pure@var1845 , bool followVar@var1846 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1847 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1848 , const Token * const tok2@var1849 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1850 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1851 , bool cpp@var1852 , const Token * const cond1@var1853 , const Token * const cond2@var1854 , const Library & library@var1855 , bool pure@var1856 , bool followVar@var1857 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1858 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1859 , const Token * const tok1@var1860 , const Token * const tok2@var1861 , const Library & library@var1862 , bool pure@var1863 , bool followVar@var1864 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1865 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1866 , const Library & library@var1867 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1868 , const Library & library@var1869 , bool pure@var1870 , bool cpp@var1871 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1872 , const Token * tok@var1873 , bool checkArrayAccess@var1874 = false , bool checkReference@var1875 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1876 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1877 , const Library * library@var1878 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1879 ,
238: const Library * library@var1880 = nullptr ,
239: const Token * * unknownFunc@var1881 = nullptr ,
240: bool functionScope@var1882 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1883 ,
244: const Variable * var@var1884 ,
245: Scope :: ScopeType type@var1885 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1886 , int & argn@var1887 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1888 , int & argn@var1889 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1890 , int argnr@var1891 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1892 , int indirect@var1893 , int varid@var1894 , const Settings * settings@var1895 , bool * inconclusive@var1896 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1897 , int indirect@var1898 , const Settings * settings@var1899 , bool * inconclusive@var1900 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1901 , const Token * end@var1902 , const int exprid@var1903 , bool globalvar@var1904 , const Settings * settings@var1905 , bool cpp@var1906 , int depth@var1907 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1908 , const Token * end@var1909 , int indirect@var1910 , const int exprid@var1911 , bool globalvar@var1912 , const Settings * settings@var1913 , bool cpp@var1914 , int depth@var1915 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1916 , int indirect@var1917 , const Settings * settings@var1918 , bool cpp@var1919 , int depth@var1920 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1921 , const Settings * settings@var1922 , bool cpp@var1923 , int depth@var1924 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1925 ,
283: const Token * end@var1926 ,
284: int indirect@var1927 ,
285: std :: vector < const Variable * > vars@var1928 ,
286: const Settings * settings@var1929 ,
287: bool cpp@var1930 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1931 , int indirect@var1932 , const Settings * settings@var1933 , bool cpp@var1934 ) ;
290: bool isThisChanged ( const Token * start@var1935 , const Token * end@var1936 , int indirect@var1937 , const Settings * settings@var1938 , bool cpp@var1939 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var1940 , const Token * end@var1941 , int indirect@var1942 , const int exprid@var1943 , bool globalvar@var1944 , const Settings * settings@var1945 , bool cpp@var1946 , int depth@var1947 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var1948 , const Token * end@var1949 , int indirect@var1950 , const int exprid@var1951 , bool globalvar@var1952 , const Settings * settings@var1953 , bool cpp@var1954 , int depth@var1955 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var1956 ,
296: const Token * start@var1957 ,
297: const Token * end@var1958 ,
298: const Settings * settings@var1959 ,
299: bool cpp@var1960 ,
300: int depth@var1961 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var1962 ,
303: const Token * tok@var1963 ,
304: int indirect@var1964 ,
305: bool globalvar@var1965 ,
306: const Settings * settings@var1966 ,
307: bool cpp@var1967 ,
308: int depth@var1968 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var1969 , int varid@var1970 , bool * inconclusive@var1971 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var1972 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var1973 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var1974 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var1975 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var1976 ) ;
330:
331: int getArgumentPos ( const Variable * var@var1977 , const Function * f@var1978 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var1979 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var1980 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var1981 ) ;
346: Token * findLambdaEndToken ( Token * first@var1982 ) ;
347:
348: bool isLikelyStream ( bool cpp@var1983 , const Token * stream@var1984 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var1985 , const Token * op@var1986 ) ;
356:
357: bool isCPPCast ( const Token * tok@var1987 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var1988 , const char * skipMatch@var1989 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var1990 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var1991 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var1992 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var1993 , const Library & library@var1994 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var1995 ) ;
371:
372: bool isNullOperand ( const Token * expr@var1996 ) ;
373:
374: bool isGlobalData ( const Token * expr@var1997 , bool cpp@var1998 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var1999 , const Library & library@var2000 ) : mCpp@var2033 ( cpp@var1999 ) , mLibrary@var2034 ( library@var2000 ) , mWhat@var2035 ( What :: Reassign ) , mValueFlowKnown@var2037 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var2001 , const Token * lhs@var2002 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var2003 , const Token * startToken@var2004 , const Token * endToken@var2005 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var2006 , const Token * startToken@var2007 , const Token * endToken@var2008 ) ;
404:
405: struct KnownAndToken {
406: bool known@var2009 ;
407: const Token * token@var2010 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var2011 , const Token * startToken@var2012 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var2013 , bool * localOut@var2014 = nullptr , bool * unknownVarIdOut@var2015 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var2016 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var2017 ;
420: explicit Result ( Type type@var2018 ) : type@var2017 ( type@var2018 ) , token@var2021 ( nullptr ) { }
421: Result ( Type type@var2019 , const Token * token@var2020 ) : type@var2017 ( type@var2019 ) , token@var2021 ( token@var2020 ) { }
422: const Token * token@var2021 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var2022 , const Token * startToken@var2023 , const Token * endToken@var2024 ) ;
426: struct Result checkRecursive ( const Token * expr@var2025 , const Token * startToken@var2026 , const Token * endToken@var2027 , const std :: set < int > & exprVarIds@var2028 , bool local@var2029 , bool inInnerClass@var2030 , int depth@var2031 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var2032 ) const ;
430:
431: const bool mCpp@var2033 ;
432: const Library & mLibrary@var2034 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var2035 ;
434: std :: vector < KnownAndToken > mValueFlow@var2036 ;
435: bool mValueFlowKnown@var2037 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var2038 ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var2039 ;
43: std :: string errorId@var2040 ;
44: void setFileName ( const std :: string & s@var2041 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var2045 ;
47: }
48: int lineNumber@var2042 ;
49: Certainty :: CertaintyLevel certainty@var2043 ;
50: std :: string symbolNames@var2044 ;
51: private:
52: std :: string mFileName@var2045 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var2079 ( NO_LINE ) , hash@var2081 ( 0 ) , thisAndNextLine@var2082 ( false ) , matched@var2083 ( false ) , checked@var2084 ( false ) { }
57: Suppression ( const Suppression & other@var2046 ) {
58: *@expr1073746413 this@expr1073746414 =@expr1073746415 other@var2046 ;
59: }
60: Suppression ( const std :: string & id@var2047 , const std :: string & file@var2048 , int line@var2049 = NO_LINE ) : errorId@var2077 ( id@var2047 ) , fileName@var2078 ( file@var2048 ) , lineNumber@var2079 ( line@var2049 ) , hash@var2081 ( 0 ) , thisAndNextLine@var2082 ( false ) , matched@var2083 ( false ) , checked@var2084 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var2050 ) {
63: errorId@var2077 =@expr1073746416 other@var2050 .@expr1073746417 errorId@var2051 ;
64: fileName@var2078 =@expr1073746418 other@var2050 .@expr1073746419 fileName@var2052 ;
65: lineNumber@var2079 =@expr1073746420 other@var2050 .@expr1073746421 lineNumber@var2053 ;
66: symbolName@var2080 =@expr1073746422 other@var2050 .@expr1073746423 symbolName@var2054 ;
67: hash@var2081 =@expr1073746424 other@var2050 .@expr1073746425 hash@var2055 ;
68: thisAndNextLine@var2082 =@expr1073746426 other@var2050 .@expr1073746427 thisAndNextLine@var2056 ;
69: matched@var2083 =@expr1073746428 other@var2050 .@expr1073746429 matched@var2057 ;
70: checked@var2084 =@expr1073746430 other@var2050 .@expr1073746431 checked@var2058 ;
71: return *@expr1073746432 this@expr1073746433 ;
72: }
73:
74: bool operator< ( const Suppression & other@var2059 ) const {
75: if (@expr1073746434 errorId@var2077 !=@expr1073746435 other@var2059 .@expr4612 errorId@var2060 ) {
76: return errorId@var2077 <@expr1073746437 other@var2059 .@expr4612 errorId@var2060 ; }
77: if (@expr1073746439 lineNumber@var2079 <@expr1073746440 other@var2059 .@expr1073746441 lineNumber@var2061 ) {
78: return true ; }
79: if (@expr1073746442 fileName@var2078 !=@expr1073746443 other@var2059 .@expr4620 fileName@var2062 ) {
80: return fileName@var2078 <@expr1073746445 other@var2059 .@expr4620 fileName@var2062 ; }
81: if (@expr1073746447 symbolName@var2080 !=@expr1073746448 other@var2059 .@expr4625 symbolName@var2063 ) {
82: return symbolName@var2080 <@expr1073746450 other@var2059 .@expr4625 symbolName@var2063 ; }
83: if (@expr1073746452 hash@var2081 !=@expr1073746453 other@var2059 .@expr4630 hash@var2064 ) {
84: return hash@var2081 <@expr1073746455 other@var2059 .@expr4630 hash@var2064 ; }
85: if (@expr1073746457 thisAndNextLine@var2082 !=@expr1073746458 other@var2059 .@expr1073746459 thisAndNextLine@var2065 ) {
86: return thisAndNextLine@var2082 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var2066 , std :: string * errorMessage@var2067 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var2068 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var2069 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073746461 fileName@var2078 .@expr1073746462 empty (@expr1073746463 ) &&@expr1073746464 fileName@var2078 .@expr1073746465 find_first_of (@expr1073746466 "?*" ) ==@expr1073746467 std ::@expr1073746468 string ::@expr1073746469 npos@expr1073746460 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var2070 ) const {
109: return errorId@var2077 ==@expr1073746470 other@var2070 .@expr1073746471 errorId@var2071 &&@expr1073746472
110: fileName@var2078 ==@expr1073746473 other@var2070 .@expr1073746474 fileName@var2072 &&@expr1073746475
111: lineNumber@var2079 ==@expr1073746476 other@var2070 .@expr1073746477 lineNumber@var2073 &&@expr1073746478
112: symbolName@var2080 ==@expr1073746479 other@var2070 .@expr1073746480 symbolName@var2074 &&@expr1073746481
113: hash@var2081 ==@expr1073746482 other@var2070 .@expr1073746483 hash@var2075 &&@expr1073746484
114: thisAndNextLine@var2082 ==@expr1073746485 other@var2070 .@expr1073746486 thisAndNextLine@var2076 ;
115: }
116:
117: std :: string errorId@var2077 ;
118: std :: string fileName@var2078 ;
119: int lineNumber@var2079 ;
120: std :: string symbolName@var2080 ;
121: unsigned long hash@var2081 ;
122: bool thisAndNextLine@var2082 ;
123: bool matched@var2083 ;
124: bool checked@var2084 ;
125:
126: enum Anonymous4 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var2085 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var2086 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var2087 , std :: string * errorMessage@var2088 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var2089 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var2090 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var2091 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var2092 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var2093 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var2094 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var2095 , const bool unusedFunctionChecking@var2096 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var2097 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var2098 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var2099 ;
219: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var2100 , const Color & c@var2101 ) ;
42:
43: std :: string toString ( const Color & c@var2102 ) ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var2103 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var2104 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var2105 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var2106 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var2107 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var2123 ( 0 ) , line@var2124 ( 0 ) , column@var2125 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var2108 , int line@var2109 , unsigned int column@var2110 )
73: : fileIndex@var2123 ( 0 ) , line@var2124 ( line@var2109 ) , column@var2125 ( column@var2110 ) , mOrigFileName@var2127 ( file@var2108 ) , mFileName@var2128 ( file@var2108 ) { }
74:
75: FileLocation ( const std :: string & file@var2111 , const std :: string & info@var2112 , int line@var2113 , unsigned int column@var2114 )
76: : fileIndex@var2123 ( 0 ) , line@var2124 ( line@var2113 ) , column@var2125 ( column@var2114 ) , mOrigFileName@var2127 ( file@var2111 ) , mFileName@var2128 ( file@var2111 ) , mInfo@var2129 ( info@var2112 ) { }
77:
78: FileLocation ( const Token * tok@var2115 , const TokenList * tokenList@var2116 ) ;
79: FileLocation ( const Token * tok@var2117 , const std :: string & info@var2118 , const TokenList * tokenList@var2119 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var2120 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var2121 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var2122 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var2123 ;
107: int line@var2124 ;
108: unsigned int column@var2125 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var2129 ;
112: }
113: void setinfo ( const std :: string & i@var2126 ) {
114: mInfo@var2129 =@expr1073746487 i@var2126 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var2127 ;
119: std :: string mFileName@var2128 ;
120: std :: string mInfo@var2129 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var2130 ,
124: const std :: string & file1@var2131 ,
125: Severity :: SeverityType severity@var2132 ,
126: const std :: string & msg@var2133 ,
127: const std :: string & id@var2134 , Certainty :: CertaintyLevel certainty@var2135 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var2136 ,
129: const std :: string & file1@var2137 ,
130: Severity :: SeverityType severity@var2138 ,
131: const std :: string & msg@var2139 ,
132: const std :: string & id@var2140 ,
133: const CWE & cwe@var2141 ,
134: Certainty :: CertaintyLevel certainty@var2142 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var2143 ,
136: const TokenList * list@var2144 ,
137: Severity :: SeverityType severity@var2145 ,
138: const std :: string & id@var2146 ,
139: const std :: string & msg@var2147 ,
140: Certainty :: CertaintyLevel certainty@var2148 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var2149 ,
142: const TokenList * list@var2150 ,
143: Severity :: SeverityType severity@var2151 ,
144: const std :: string & id@var2152 ,
145: const std :: string & msg@var2153 ,
146: const CWE & cwe@var2154 ,
147: Certainty :: CertaintyLevel certainty@var2155 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var2156 ,
149: const TokenList * tokenList@var2157 ,
150: Severity :: SeverityType severity@var2158 ,
151: const char id@var2159 [ ] ,
152: const std :: string & msg@var2160 ,
153: const CWE & cwe@var2161 ,
154: Certainty :: CertaintyLevel certainty@var2162 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var2163 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var2164 ,
176: const std :: string & templateFormat@var2165 = emptyString@var1 ,
177: const std :: string & templateLocation@var2166 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var2167 ) ;
181:
182: std :: list < FileLocation > callStack@var2168 ;
183: std :: string id@var2169 ;
184:
185:
186: std :: string file0@var2170 ;
187:
188: std :: string function@var2171 ;
189:
190: bool incomplete@var2172 ;
191:
192: Severity :: SeverityType severity@var2173 ;
193: CWE cwe@var2174 ;
194: Certainty :: CertaintyLevel certainty@var2175 ;
195:
196:
197: unsigned long hash@var2176 ;
198:
199:
200: void setmsg ( const std :: string & msg@var2177 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var2179 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var2180 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var2181 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var2178 ) ;
221:
222:
223: std :: string mShortMessage@var2179 ;
224:
225:
226: std :: string mVerboseMessage@var2180 ;
227:
228:
229: std :: string mSymbolNames@var2181 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var2182 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073746488 plistFile@var2182 .@expr1073746489 is_open (@expr1073746490 ) ) {
243: plistFile@var2182 <<@expr1073746491 ErrorLogger ::@expr1073746492 plistFooter (@expr1073746493 ) ;
244: plistFile@var2182 .@expr1073746494 close (@expr1073746495 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var2183 , Color c@var2184 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var2185 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var2186 , const char stage@var2187 [ ] , const unsigned long value@var2188 ) {
271: (@expr1073746496 void ) filename@var2186 ;
272: (@expr1073746497 void ) stage@var2187 ;
273: (@expr1073746498 void ) value@var2188 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var2189 ) {
281: reportErr (@expr1073746499 msg@var2189 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var2190 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var2191 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var2192 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var2193 , const std :: vector < std :: string > & files@var2194 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var2195 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var2196 , const std :: string & from@var2197 , const std :: string & to@var2198 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var2199 ) {
44: if (@expr1073746500 bit@var2199 >=@expr1073746501 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073746502 (@expr1073746503 1LL <<@expr1073746504 (@expr1073746505 bit@var2199 -@expr1073746506 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var2200 ) {
50: if (@expr1073746507 bit@var2200 >=@expr1073746508 64 ) {
51: return (@expr4685 ~@expr1073746510 0ULL ) >>@expr1073746511 1 ; }
52: return (@expr4685 1LL <<@expr1073746513 (@expr4685 bit@var2200 -@expr1073746515 1 ) ) -@expr1073746516 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var2201 ) const {
59: return value@var2201 >=@expr1073746517 min_value (@expr1073746518 int_bit@var2211 ) &&@expr1073746519 value@var2201 <=@expr1073746520 max_value (@expr1073746521 int_bit@var2211 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var2202 ) const {
63: unsigned long long intMax@var2203 ; intMax@var2203 =@expr1073746522 max_value (@expr1073746523 int_bit@var2211 ) ;
64: return value@var2202 <=@expr1073746524 intMax@var2203 ;
65: }
66:
67: bool isLongValue ( long long value@var2204 ) const {
68: return value@var2204 >=@expr1073746525 min_value (@expr1073746526 long_bit@var2212 ) &&@expr1073746527 value@var2204 <=@expr1073746528 max_value (@expr1073746529 long_bit@var2212 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var2205 ) const {
72: unsigned long long longMax@var2206 ; longMax@var2206 =@expr1073746530 max_value (@expr1073746531 long_bit@var2212 ) ;
73: return value@var2205 <=@expr1073746532 longMax@var2206 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var2207 ) const {
77: unsigned long long longLongMax@var2208 ; longLongMax@var2208 =@expr1073746533 max_value (@expr1073746534 long_long_bit@var2213 ) ;
78: return value@var2207 <=@expr1073746535 longLongMax@var2208 ;
79: }
80:
81: int char_bit@var2209 ;
82: int short_bit@var2210 ;
83: int int_bit@var2211 ;
84: int long_bit@var2212 ;
85: int long_long_bit@var2213 ;
86:
87:
88: int sizeof_bool@var2214 ;
89: int sizeof_short@var2215 ;
90: int sizeof_int@var2216 ;
91: int sizeof_long@var2217 ;
92: int sizeof_long_long@var2218 ;
93: int sizeof_float@var2219 ;
94: int sizeof_double@var2220 ;
95: int sizeof_long_double@var2221 ;
96: int sizeof_wchar_t@var2222 ;
97: int sizeof_size_t@var2223 ;
98: int sizeof_pointer@var2224 ;
99:
100: char defaultSign@var2225 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var2226 ;
115:
116:
117: bool platform ( PlatformType type@var2227 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var2228 [ ] , const std :: string & filename@var2229 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var2230 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var2226 ==@expr1073746536 Win32A ||@expr1073746537
136: platformType@var2226 ==@expr1073746538 Win32W ||@expr1073746539
137: platformType@var2226 ==@expr1073746540 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073746541 platformType@var2226 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var2231 ) {
145: switch (@expr1073746542 pt@var2231 ) {
146: case Unspecified :@expr4719 ;
147: return "Unspecified" ;
148: case Native :@expr4719 ;
149: return "Native" ;
150: case Win32A :@expr4719 ;
151: return "win32A" ;
152: case Win32W :@expr4719 ;
153: return "win32W" ;
154: case Win64 :@expr4719 ;
155: return "win64" ;
156: case Unix32 :@expr4719 ;
157: return "unix32" ;
158: case Unix64 :@expr4719 ;
159: return "unix64" ;
160: case PlatformFile :@expr4719 ;
161: return "platformFile" ;
162: default :@expr4719 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073746552 char_bit@var2209 +@expr1073746553 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073746554 char_bit@var2209 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073746555 char_bit@var2209 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var2232 , const std :: string & rhs@var2233 ) const {
41: return caseInsensitiveStringCompare (@expr1073746556 lhs@var2232 , rhs@var2233 ) <@expr1073746557 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var2241 ( cppcheck :: Platform :: Unspecified ) , msc@var2242 ( false ) , useMfc@var2243 ( false ) { }
67: std :: string cfg@var2234 ;
68: std :: string filename@var2235 ;
69: std :: string defines@var2236 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var2236 +@expr1073746558 (@expr1073746559 msc@var2242 ?@expr1073746560 ";_MSC_VER=1900" :@expr1073746561 "" ) +@expr1073746562 (@expr1073746563 useMfc@var2243 ?@expr1073746564 ";__AFXWIN_H__=1" :@expr1073746565 "" ) ;
72: }
73: std :: set < std :: string > undefs@var2237 ;
74: std :: list < std :: string > includePaths@var2238 ;
75: std :: list < std :: string > systemIncludePaths@var2239 ;
76: std :: string standard@var2240 ;
77: cppcheck :: Platform :: PlatformType platformType@var2241 ;
78: bool msc@var2242 ;
79: bool useMfc@var2243 ;
80:
81: void parseCommand ( std :: string command@var2244 ) ;
82: void setDefines ( std :: string defs@var2245 ) ;
83: void setIncludePaths ( const std :: string & basepath@var2246 , const std :: list < std :: string > & in@var2247 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2248 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var2249 ;
86: Type projectType@var2250 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var2251 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous5 {
96: std :: string analyzeAllVsConfigs@var2252 ;
97: std :: vector < std :: string > pathNames@var2253 ;
98: std :: list < std :: string > libraries@var2254 ;
99: std :: list < std :: string > excludedPaths@var2255 ;
100: std :: list < std :: string > checkVsConfigs@var2256 ;
101: std :: string projectFile@var2257 ;
102: std :: string platform@var2258 ;
103: } ; struct Anonymous5 guiProject@var2259 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var2260 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var2261 ) ;
107:
108: Type import ( const std :: string & filename@var2262 , Settings * settings@var2263 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var2264 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var2265 , Settings * settings@var2266 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var2267 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var2268 , const std :: string & path@var2269 , const std :: vector < std :: string > & fileFilters@var2270 ) ;
115: bool importVcxproj ( const std :: string & filename@var2271 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2272 , const std :: string & additionalIncludeDirectories@var2273 , const std :: vector < std :: string > & fileFilters@var2274 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var2275 ) ;
117:
118: static void printError ( const std :: string & message@var2276 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var2277 ) ;
121:
122: std :: string mPath@var2278 ;
123: std :: set < std :: string > mAllVSConfigs@var2279 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var2280 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var2281 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var2282 [ 2 ] = "1" ;
131: const char BuildDirElementName@var2283 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var2284 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var2285 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var2286 [ 7 ] = "parser" ;
135: const char BugHunting@var2287 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var2288 [ 11 ] = "includedir" ;
137: const char DirElementName@var2289 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var2290 [ 5 ] = "name" ;
139: const char DefinesElementName@var2291 [ 8 ] = "defines" ;
140: const char DefineName@var2292 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var2293 [ 5 ] = "name" ;
142: const char UndefinesElementName@var2294 [ 10 ] = "undefines" ;
143: const char UndefineName@var2295 [ 9 ] = "undefine" ;
144: const char PathsElementName@var2296 [ 6 ] = "paths" ;
145: const char PathName@var2297 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var2298 [ 5 ] = "name" ;
147: const char RootPathName@var2299 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var2300 [ 5 ] = "name" ;
149: const char IgnoreElementName@var2301 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var2302 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var2303 [ 5 ] = "name" ;
152: const char ExcludeElementName@var2304 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var2305 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var2306 [ 5 ] = "name" ;
155: const char FunctionContracts@var2307 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var2308 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var2309 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var2310 [ 8 ] = "library" ;
159: const char PlatformElementName@var2311 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var2312 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var2313 [ 12 ] = "suppression" ;
162: const char AddonElementName@var2314 [ 6 ] = "addon" ;
163: const char AddonsElementName@var2315 [ 7 ] = "addons" ;
164: const char ToolElementName@var2316 [ 5 ] = "tool" ;
165: const char ToolsElementName@var2317 [ 6 ] = "tools" ;
166: const char TagsElementName@var2318 [ 5 ] = "tags" ;
167: const char TagElementName@var2319 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var2320 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var2321 [ 4 ] = "tag" ;
170: const char WarningElementName@var2322 [ 8 ] = "warning" ;
171: const char HashAttributeName@var2323 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var2324 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var2325 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var2326 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var2327 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var2328 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var2329 [ 11 ] = "clang-tidy" ;
178: const char Name@var2330 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var2331 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var2332 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var2333 , std :: clock_t clocks@var2334 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var2335 ;
45: long mNumberOfResults@var2336 ;
46:
47: TimerResultsData ( )
48: : mClocks@var2335 ( 0 )
49: , mNumberOfResults@var2336 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var2337 =@expr1073746567 (@expr1073746568 double ) (@expr1073746569 (@expr1073746570 unsigned long ) mClocks@var2335 ) /@expr1073746571 (@expr1073746572 double ) CLOCKS_PER_SEC@expr1073746566 ;
53: return ret@var2337 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var2338 ) const ;
62: void addResults ( const std :: string & str@var2339 , std :: clock_t clocks@var2340 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var2341 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var2342 , SHOWTIME_MODES showtimeMode@var2343 , TimerResultsIntf * timerResults@var2344 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var2345 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var2346 ;
79: TimerResultsIntf * mTimerResults@var2347 ;
80: std :: clock_t mStart@var2348 ;
81: const SHOWTIME_MODES mShowTimeMode@var2349 ;
82: bool mStopped@var2350 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var2351 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var2352 ;
103:
104:
105: std :: string addonPython@var2353 ;
106:
107:
108: std :: vector < std :: string > basePaths@var2354 ;
109:
110:
111: std :: string buildDir@var2355 ;
112:
113:
114: bool checkAllConfigurations@var2356 ;
115:
116:
117: bool checkConfiguration@var2357 ;
118:
|
121:
122: bool checkHeaders@var2358 ;
123:
124:
125: bool checkLibrary@var2359 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var2360 ;
129:
130:
131: bool checkUnusedTemplates@var2361 ;
132:
133:
134: bool clang@var2362 ;
135:
136:
137: std :: string clangExecutable@var2363 ;
138:
139:
140: bool clangTidy@var2364 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var2365 ;
144:
145:
146: std :: string cppcheckCfgProductName@var2366 ;
147:
148:
149: std :: string cppcheckCfgAbout@var2367 ;
150:
151:
152: bool daca@var2368 ;
153:
154:
155: bool debugnormal@var2369 ;
156:
157:
158: bool debugSimplified@var2370 ;
159:
160:
161: bool debugtemplate@var2371 ;
162:
163:
164: bool debugwarnings@var2372 ;
165:
166:
167: bool dump@var2373 ;
168: std :: string dumpFile@var2374 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var2375 ;
176:
177:
178: bool exceptionHandling@var2376 ;
179:
180:
181: std :: string exename@var2377 ;
182:
183:
184:
185: int exitCode@var2378 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var2379 ;
189:
190:
191: bool force@var2380 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var2381 ;
196:
197:
198: bool inlineSuppressions@var2382 ;
199:
200:
201:
202: unsigned int jobs@var2383 ;
203:
|
206:
207: bool jointSuppressionReport@var2384 ;
208:
209:
210: std :: list < std :: string > libraries@var2385 ;
211:
212:
213: Library library@var2386 ;
214:
215:
216:
217: int loadAverage@var2387 ;
218:
|
221:
222: int maxConfigs@var2388 ;
223:
224:
225: int maxCtuDepth@var2389 ;
226:
227:
228: int maxTemplateRecursion@var2390 ;
229:
230:
231: Suppressions nofail@var2391 ;
232:
233:
234: Suppressions nomsg@var2392 ;
235:
236:
237: std :: string outputFile@var2393 ;
238:
239:
240: std :: string plistOutput@var2394 ;
241:
242:
243: bool preprocessOnly@var2395 ;
244:
245: ImportProject project@var2396 ;
246:
247:
248: bool quiet@var2397 ;
249:
250:
251: bool relativePaths@var2398 ;
252:
253:
254: bool reportProgress@var2399 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var2400 ( "simple" )
261: , id@var2402 ( "rule" )
262: , severity@var2404 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var2400 ;
266: std :: string pattern@var2401 ;
267: std :: string id@var2402 ;
268: std :: string summary@var2403 ;
269: Severity :: SeverityType severity@var2404 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var2405 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var2411 ( false ) , externalFunctions@var2412 ( false ) , internalFunctions@var2413 ( false ) , externalVariables@var2414 ( false ) { }
281:
282: static const char XmlRootName@var2406 [ ] ;
283: static const char XmlClasses@var2407 [ ] ;
284: static const char XmlExternalFunctions@var2408 [ ] ;
285: static const char XmlInternalFunctions@var2409 [ ] ;
286: static const char XmlExternalVariables@var2410 [ ] ;
287:
288: void clear ( ) {
289: classes@var2411 =@expr1073746573 externalFunctions@var2412 =@expr1073746574 internalFunctions@var2413 =@expr1073746575 externalVariables@var2414 =@expr1073746576 false ;
290: }
291:
|
297:
298: bool classes@var2411 ;
299:
|
304:
305: bool externalFunctions@var2412 ;
306:
|
310:
311: bool internalFunctions@var2413 ;
312:
|
316:
317: bool externalVariables@var2414 ;
318: } ;
319:
320: SafeChecks safeChecks@var2415 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var2416 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var2417 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var2418 ;
325:
326:
327: SHOWTIME_MODES showtime@var2419 ;
328:
329:
330: Standards standards@var2420 ;
331:
332:
333:
334: std :: string templateFormat@var2421 ;
335:
336:
337:
338: std :: string templateLocation@var2422 ;
339:
340:
341: std :: string userDefines@var2423 ;
342:
343:
344: std :: set < std :: string > userUndefs@var2424 ;
345:
346:
347: std :: list < std :: string > userIncludes@var2425 ;
348:
349:
350: bool verbose@var2426 ;
351:
352:
353: bool xml@var2427 ;
354:
355:
356: int xml_version@var2428 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var2429 ) const {
363: for (@expr1073746577 const std ::@expr1073746578 string &@expr1073746579 configExcludePath@var2430 :@expr1073746580 configExcludePaths@var2365 ) {
364: if (@expr1073746581 file@var2429 .@expr1073746582 length (@expr1073746583 ) >=@expr1073746584 configExcludePath@var2430 .@expr4761 length (@expr4762 ) &&@expr1073746587 file@var2429 .@expr1073746588 compare (@expr1073746589 0 , configExcludePath@var2430 .@expr4761 length (@expr4762 ) , configExcludePath@var2430 ) ==@expr1073746592 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var2431 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var2432 , bool inconclusiveCheck@var2433 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073746593 find (@expr1073746594 libraries@var2385 .@expr1073746595 begin (@expr1073746596 ) , libraries@var2385 .@expr4773 end (@expr4774 ) , "posix" ) !=@expr1073746599 libraries@var2385 .@expr4773 end (@expr4774 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var2434 = true ) {
392: Settings ::@expr1073746602 mTerminated@var2351 =@expr1073746603 t@var2434 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073746604 mTerminated@var2351 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var2435 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/checkmemoryleak.cpp

1:
|
36:
37: namespace {
38: CheckMemoryLeakInFunction instance1@var2436 ;
39: CheckMemoryLeakInClass instance2@var2437 ;
40: CheckMemoryLeakStructMember instance3@var2438 ;
41: CheckMemoryLeakNoVar instance4@var2439 ;
42: }
43:
44:
45: static const CWE CWE398@var2440 ( 398U ) ;
46: static const CWE CWE401@var2441 ( 401U ) ;
47: static const CWE CWE771@var2442 ( 771U ) ;
48: static const CWE CWE772@var2443 ( 772U ) ;
49:
|
55:
56: static const std :: unordered_set < std :: string > call_func_white_list@var2444 = {
57: "_open" , "_wopen" , "access" , "adjtime" , "asctime_r" , "asprintf" , "chdir" , "chmod" , "chown"
58: , "creat" , "ctime_r" , "execl" , "execle" , "execlp" , "execv" , "execve" , "fchmod" , "fcntl"
59: , "fdatasync" , "fclose" , "flock" , "fmemopen" , "fnmatch" , "fopen" , "fopencookie" , "for" , "free"
60: , "freopen" , "fseeko" , "fstat" , "fsync" , "ftello" , "ftruncate" , "getgrnam" , "gethostbyaddr" , "gethostbyname"
61: , "getnetbyname" , "getopt" , "getopt_long" , "getprotobyname" , "getpwnam" , "getservbyname" , "getservbyport"
62: , "glob" , "gmtime" , "gmtime_r" , "if" , "index" , "inet_addr" , "inet_aton" , "inet_network" , "initgroups"
63: , "ioctl" , "link" , "localtime_r" , "lockf" , "lseek" , "lstat" , "mkdir" , "mkfifo" , "mknod" , "mkstemp"
64: , "obstack_printf" , "obstack_vprintf" , "open" , "opendir" , "parse_printf_format" , "pathconf"
65: , "perror" , "popen" , "posix_fadvise" , "posix_fallocate" , "pread" , "psignal" , "pwrite" , "read" , "readahead"
66: , "readdir" , "readdir_r" , "readlink" , "readv" , "realloc" , "regcomp" , "return" , "rewinddir" , "rindex"
67: , "rmdir" , "scandir" , "seekdir" , "setbuffer" , "sethostname" , "setlinebuf" , "sizeof" , "strdup"
68: , "stat" , "stpcpy" , "strcasecmp" , "stricmp" , "strncasecmp" , "switch"
69: , "symlink" , "sync_file_range" , "telldir" , "tempnam" , "time" , "typeid" , "unlink"
70: , "utime" , "utimes" , "vasprintf" , "while" , "wordexp" , "write" , "writev"
71: } ;
72:
73:
74:
75: CheckMemoryLeak :: AllocType CheckMemoryLeak :: getAllocationType ( const Token * tok2@var2445 , int varid@var2446 , std :: list < const Function * > * callstack@var2447 ) const
76: {
77:
|
81:
82: if (@expr1073746605 tok2@var2445 &&@expr1073746606 tok2@var2445 .@expr4783 str (@expr4784 ) ==@expr1073746609 "(" ) {
83: tok2@var2445 =@expr1073746610 tok2@var2445 .@expr1073746611 link (@expr1073746612 ) ;
84: tok2@var2445 =@expr1073746613 tok2@var2445 ?@expr1073746614 tok2@var2445 .@expr4791 next (@expr4792 ) :@expr1073746617 nullptr ;
85: }
86: if (@expr1073746618 !@expr1073746619 tok2@var2445 ) {
87: return No ; }
88: if (@expr1073746620 tok2@var2445 .@expr4783 str (@expr4784 ) ==@expr1073746623 "::" ) {
89: tok2@var2445 =@expr1073746624 tok2@var2445 .@expr4791 next (@expr4792 ) ; }
90: if (@expr1073746627 !@expr1073746628 tok2@var2445 .@expr1073746629 isName (@expr1073746630 ) ) {
91: return No ; }
92:
93: if (@expr1073746631 !@expr1073746632 Token ::@expr4809 Match (@expr4810 tok2@var2445 , "%name% ::|. %type%" ) ) {
94:
95: AllocType reallocType@var2448 ; reallocType@var2448 =@expr1073746635 getReallocationType (@expr1073746636 tok2@var2445 , varid@var2446 ) ;
96: if (@expr1073746637 reallocType@var2448 !=@expr1073746638 No ) {
97: return reallocType@var2448 ; }
98:
99: if (@expr1073746639 mTokenizer_@var947 .@expr1073746640 isCPP (@expr1073746641 ) &&@expr1073746642 tok2@var2445 .@expr4783 str (@expr4784 ) ==@expr1073746645 "new" ) {
100: if (@expr1073746646 tok2@var2445 .@expr1073746647 strAt (@expr1073746648 1 ) ==@expr1073746649 "(" &&@expr1073746650 !@expr1073746651 Token ::@expr4809 Match (@expr1073746653 tok2@var2445 .@expr4791 next (@expr4792 ) , "( std| ::| nothrow )" ) ) {
101: return No ; }
102: if (@expr1073746656 tok2@var2445 .@expr4833 astOperand1 (@expr4834 ) &&@expr1073746659 (@expr1073746660 tok2@var2445 .@expr4833 astOperand1 (@expr4834 ) .@expr1073746663 str (@expr1073746664 ) ==@expr1073746665 "[" ||@expr1073746666 (@expr1073746667 tok2@var2445 .@expr4833 astOperand1 (@expr4834 ) .@expr4846 astOperand1 (@expr4847 ) &&@expr1073746672 tok2@var2445 .@expr4833 astOperand1 (@expr4834 ) .@expr4846 astOperand1 (@expr4847 ) .@expr1073746677 str (@expr1073746678 ) ==@expr1073746679 "[" ) ) ) {
103: return NewArray ; }
104: const Token * typeTok@var2449 ; typeTok@var2449 =@expr1073746680 tok2@var2445 .@expr4791 next (@expr4792 ) ;
105: while (@expr1073746683 Token ::@expr4809 Match (@expr1073746685 typeTok@var2449 , "%name% :: %name%" ) ) {
106: typeTok@var2449 =@expr1073746686 typeTok@var2449 .@expr1073746687 tokAt (@expr1073746688 2 ) ; }
107: const Scope * classScope@var2450 ; classScope@var2450 =@expr1073746689 nullptr ;
108: if (@expr1073746690 typeTok@var2449 .@expr4867 type (@expr4868 ) &&@expr1073746693 typeTok@var2449 .@expr4867 type (@expr4868 ) .@expr1073746696 isClassType (@expr1073746697 ) ) {
109: classScope@var2450 =@expr1073746698 typeTok@var2449 .@expr4867 type (@expr4868 ) .@expr1073746701 classScope@var2703 ;
110: } else { if (@expr1073746702 typeTok@var2449 .@expr4879 function (@expr4880 ) &&@expr1073746705 typeTok@var2449 .@expr4879 function (@expr4880 ) .@expr1073746708 isConstructor (@expr1073746709 ) ) {
111: classScope@var2450 =@expr1073746710 typeTok@var2449 .@expr4879 function (@expr4880 ) .@expr1073746713 nestedIn@var2704 ;
112: } }
113: if (@expr1073746714 classScope@var2450 &&@expr1073746715 classScope@var2450 .@expr1073746716 numConstructors@var2451 >@expr1073746717 0 ) {
114: return No ; }
115: return New ;
116: }
117:
118: if (@expr1073746718 mSettings_@var949 .@expr1073746719 posix (@expr1073746720 ) ) {
119: if (@expr1073746721 Token ::@expr4809 Match (@expr1073746723 tok2@var2445 , "open|openat|creat|mkstemp|mkostemp|socket (" ) ) {
120:
121:
122: const int num@var2452 =@expr1073746724 numberOfArguments (@expr1073746725 tok2@var2445 ) ;
123: if (@expr1073746726 tok2@var2445 .@expr4783 str (@expr4784 ) ==@expr1073746729 "open" &&@expr1073746730 num@var2452 !=@expr1073746731 2 &&@expr1073746732 num@var2452 !=@expr1073746733 3 ) {
124: return No ; }
125:
126:
127: if (@expr1073746734 tok2@var2445 .@expr4911 function (@expr4912 ) ) {
128: return No ; }
129: return Fd ;
130: }
131:
132: if (@expr1073746737 Token ::@expr1073746738 simpleMatch (@expr1073746739 tok2@var2445 , "popen (" ) ) {
133: return Pipe ; }
134: }
135:
136:
137: const int alloctype@var2453 =@expr1073746740 mSettings_@var949 .@expr4917 library@var2688 .@expr1073746742 getAllocId (@expr1073746743 tok2@var2445 , -1 ) ;
138: if (@expr1073746744 alloctype@var2453 >@expr1073746745 0 ) {
139: if (@expr1073746746 alloctype@var2453 ==@expr1073746747 mSettings_@var949 .@expr4917 library@var2688 .@expr4925 deallocId (@expr1073746750 "free" ) ) {
140: return Malloc ; }
141: if (@expr1073746751 alloctype@var2453 ==@expr1073746752 mSettings_@var949 .@expr4917 library@var2688 .@expr4925 deallocId (@expr1073746755 "fclose" ) ) {
142: return File ; }
143: return Library ::@expr1073746756 ismemory (@expr1073746757 alloctype@var2453 ) ?@expr1073746758 OtherMem :@expr1073746759 OtherRes ;
144: }
145: }
146:
147: while (@expr1073746760 Token ::@expr4809 Match (@expr4810 tok2@var2445 , "%name% ::|. %type%" ) ) {
148: tok2@var2445 =@expr1073746763 tok2@var2445 .@expr1073746764 tokAt (@expr1073746765 2 ) ; }
149:
150:
151: const Function * func@var2454 ; func@var2454 =@expr1073746766 tok2@var2445 .@expr4911 function (@expr4912 ) ;
152: if (@expr1073746769 func@var2454 ==@expr1073746770 nullptr ) {
153: return No ; }
154:
155:
156: if (@expr1073746771 callstack@var2447 &&@expr1073746772 std ::@expr1073746773 find (@expr1073746774 callstack@var2447 .@expr1073746775 begin (@expr1073746776 ) , callstack@var2447 .@expr4953 end (@expr4954 ) , func@var2454 ) !=@expr1073746779 callstack@var2447 .@expr4953 end (@expr4954 ) ) {
157: return No ; }
158:
159: std ::@expr1073746782 list < const Function *@expr1073746783 > cs@var2455 ;
160: if (@expr1073746784 !@expr1073746785 callstack@var2447 ) {
161: callstack@var2447 =@expr1073746786 &@expr1073746787 cs@var2455 ; }
162:
163: callstack@var2447 .@expr1073746788 push_back (@expr1073746789 func@var2454 ) ;
164: return functionReturnType (@expr1073746790 func@var2454 , callstack@var2447 ) ;
165: }
166:
167:
168: CheckMemoryLeak :: AllocType CheckMemoryLeak :: getReallocationType ( const Token * tok2@var2456 , int varid@var2457 ) const
169: {
170:
171:
172: if (@expr1073746791 tok2@var2456 &&@expr1073746792 tok2@var2456 .@expr1073746793 str (@expr1073746794 ) ==@expr1073746795 "(" ) {
173: tok2@var2456 =@expr1073746796 tok2@var2456 .@expr1073746797 link (@expr1073746798 ) ;
174: tok2@var2456 =@expr1073746799 tok2@var2456 ?@expr1073746800 tok2@var2456 .@expr1073746801 next (@expr1073746802 ) :@expr1073746803 nullptr ;
175: }
176: if (@expr1073746804 !@expr1073746805 tok2@var2456 ) {
177: return No ; }
178:
179: if (@expr1073746806 !@expr1073746807 Token ::@expr4984 Match (@expr1073746809 tok2@var2456 , "%name% (" ) ) {
180: return No ; }
181:
182: const Library ::@expr1073746810 AllocFunc * f@var2458 ; f@var2458 =@expr1073746811 mSettings_@var949 .@expr4988 library@var2688 .@expr1073746813 getReallocFuncInfo (@expr1073746814 tok2@var2456 ) ;
183: if (@expr1073746815 !@expr1073746816 (@expr1073746817 f@var2458 &&@expr1073746818 f@var2458 .@expr4995 reallocArg@var2459 >@expr1073746820 0 &&@expr1073746821 f@var2458 .@expr4995 reallocArg@var2459 <=@expr1073746823 numberOfArguments (@expr1073746824 tok2@var2456 ) ) ) {
184: return No ; }
185: const auto args@var2460 =@expr1073746825 getArguments (@expr1073746826 tok2@var2456 ) ;
186: if (@expr1073746827 args@var2460 .@expr1073746828 size (@expr1073746829 ) <@expr1073746830 (@expr1073746831 f@var2458 .@expr4995 reallocArg@var2459 ) ) {
187: return No ; }
188: const Token * arg@var2461 ; arg@var2461 =@expr1073746833 args@var2460 .@expr1073746834 at (@expr1073746835 f@var2458 .@expr4995 reallocArg@var2459 -@expr1073746837 1 ) ;
189: while (@expr1073746838 arg@var2461 &&@expr1073746839 arg@var2461 .@expr1073746840 isCast (@expr1073746841 ) ) {
190: arg@var2461 =@expr1073746842 arg@var2461 .@expr5019 astOperand1 (@expr5020 ) ; }
191: while (@expr1073746845 arg@var2461 &&@expr1073746846 arg@var2461 .@expr1073746847 isUnaryOp (@expr1073746848 "*" ) ) {
192: arg@var2461 =@expr1073746849 arg@var2461 .@expr5019 astOperand1 (@expr5020 ) ; }
193: if (@expr1073746852 varid@var2457 >@expr1073746853 0 &&@expr1073746854 !@expr1073746855 Token ::@expr4984 Match (@expr1073746857 arg@var2461 , "%varid% [,)]" , varid@var2457 ) ) {
194: return No ; }
195:
196: const int realloctype@var2462 =@expr1073746858 mSettings_@var949 .@expr4988 library@var2688 .@expr1073746860 getReallocId (@expr1073746861 tok2@var2456 , -1 ) ;
197: if (@expr1073746862 realloctype@var2462 >@expr1073746863 0 ) {
198: if (@expr1073746864 realloctype@var2462 ==@expr1073746865 mSettings_@var949 .@expr4988 library@var2688 .@expr5043 deallocId (@expr1073746868 "free" ) ) {
199: return Malloc ; }
200: if (@expr1073746869 realloctype@var2462 ==@expr1073746870 mSettings_@var949 .@expr4988 library@var2688 .@expr5043 deallocId (@expr1073746873 "fclose" ) ) {
201: return File ; }
202: return Library ::@expr1073746874 ismemory (@expr1073746875 realloctype@var2462 ) ?@expr1073746876 OtherMem :@expr1073746877 OtherRes ;
203: }
204: return No ;
205: }
206:
207:
208: CheckMemoryLeak :: AllocType CheckMemoryLeak :: getDeallocationType ( const Token * tok@var2463 , int varid@var2464 ) const
209: {
210: if (@expr1073746878 mTokenizer_@var947 .@expr1073746879 isCPP (@expr1073746880 ) &&@expr1073746881 tok@var2463 .@expr5058 str (@expr5059 ) ==@expr1073746884 "delete" &&@expr1073746885 tok@var2463 .@expr5062 astOperand1 (@expr5063 ) ) {
211: const Token * vartok@var2465 ; vartok@var2465 =@expr1073746888 tok@var2463 .@expr5062 astOperand1 (@expr5063 ) ;
212: if (@expr1073746891 Token ::@expr5068 Match (@expr1073746893 vartok@var2465 , ".|::" ) ) {
213: vartok@var2465 =@expr1073746894 vartok@var2465 .@expr1073746895 astOperand2 (@expr1073746896 ) ; }
214:
215: if (@expr1073746897 vartok@var2465 &&@expr1073746898 vartok@var2465 .@expr1073746899 varId (@expr1073746900 ) ==@expr1073746901 varid@var2464 ) {
216: if (@expr1073746902 tok@var2463 .@expr1073746903 strAt (@expr1073746904 1 ) ==@expr1073746905 "[" ) {
217: return NewArray ; }
218: return New ;
219: }
220: }
221:
222: if (@expr1073746906 tok@var2463 .@expr5058 str (@expr5059 ) ==@expr1073746909 "::" ) {
223: tok@var2463 =@expr1073746910 tok@var2463 .@expr1073746911 next (@expr1073746912 ) ; }
224:
225: if (@expr1073746913 Token ::@expr5068 Match (@expr1073746915 tok@var2463 , "%name% (" ) ) {
226: if (@expr1073746916 Token ::@expr5093 simpleMatch (@expr1073746918 tok@var2463 , "fcloseall ( )" ) ) {
227: return File ; }
228:
229: int argNr@var2466 ; argNr@var2466 =@expr1073746919 1 ;
230: for (@expr1073746920 const Token *@expr1073746921 tok2@var2467 =@expr1073746922 tok@var2463 .@expr1073746923 tokAt (@expr1073746924 2 ) ; tok2@var2467 ; tok2@var2467 =@expr1073746925 tok2@var2467 .@expr1073746926 nextArgument (@expr1073746927 ) ) {
231: const Token * vartok@var2468 ; vartok@var2468 =@expr1073746928 tok2@var2467 ;
232: while (@expr1073746929 Token ::@expr5068 Match (@expr1073746931 vartok@var2468 , "%name% .|::" ) ) {
233: vartok@var2468 =@expr1073746932 vartok@var2468 .@expr1073746933 tokAt (@expr1073746934 2 ) ; }
234:
235: if (@expr1073746935 Token ::@expr5068 Match (@expr1073746937 vartok@var2468 , "%varid% )|,|-" , varid@var2464 ) ) {
236: if (@expr1073746938 tok@var2463 .@expr5058 str (@expr5059 ) ==@expr1073746941 "realloc" &&@expr1073746942 Token ::@expr5093 simpleMatch (@expr1073746944 vartok@var2468 .@expr1073746945 next (@expr1073746946 ) , ", 0 )" ) ) {
237: return Malloc ; }
238:
239: if (@expr1073746947 mSettings_@var949 .@expr1073746948 posix (@expr1073746949 ) ) {
240: if (@expr1073746950 tok@var2463 .@expr5058 str (@expr5059 ) ==@expr1073746953 "close" ) {
241: return Fd ; }
242: if (@expr1073746954 tok@var2463 .@expr5058 str (@expr5059 ) ==@expr1073746957 "pclose" ) {
243: return Pipe ; }
244: }
245:
246:
247: const int dealloctype@var2469 =@expr1073746958 mSettings_@var949 .@expr5135 library@var2688 .@expr1073746960 getDeallocId (@expr1073746961 tok@var2463 , argNr@var2466 ) ;
248: if (@expr1073746962 dealloctype@var2469 >@expr1073746963 0 ) {
249: if (@expr1073746964 dealloctype@var2469 ==@expr1073746965 mSettings_@var949 .@expr5135 library@var2688 .@expr5143 deallocId (@expr1073746968 "free" ) ) {
250: return Malloc ; }
251: if (@expr1073746969 dealloctype@var2469 ==@expr1073746970 mSettings_@var949 .@expr5135 library@var2688 .@expr5143 deallocId (@expr1073746973 "fclose" ) ) {
252: return File ; }
253: return Library ::@expr1073746974 ismemory (@expr1073746975 dealloctype@var2469 ) ?@expr1073746976 OtherMem :@expr1073746977 OtherRes ;
254: }
255: }
256: argNr@var2466 ++@expr1073746978 ;
257: }
258: }
259:
260: return No ;
261: }
262:
263: bool CheckMemoryLeak :: isReopenStandardStream ( const Token * tok@var2470 ) const
264: {
265: if (@expr1073746979 getReallocationType (@expr1073746980 tok@var2470 , 0 ) ==@expr1073746981 File ) {
266: const Library ::@expr1073746982 AllocFunc * f@var2471 ; f@var2471 =@expr1073746983 mSettings_@var949 .@expr1073746984 library@var2688 .@expr1073746985 getReallocFuncInfo (@expr1073746986 tok@var2470 ) ;
267: if (@expr1073746987 f@var2471 &&@expr1073746988 f@var2471 .@expr5165 reallocArg@var2472 >@expr1073746990 0 &&@expr1073746991 f@var2471 .@expr5165 reallocArg@var2472 <=@expr1073746993 numberOfArguments (@expr1073746994 tok@var2470 ) ) {
268: const Token * arg@var2473 ; arg@var2473 =@expr1073746995 getArguments (@expr1073746996 tok@var2470 ) .@expr1073746997 at (@expr1073746998 f@var2471 .@expr5165 reallocArg@var2472 -@expr1073747000 1 ) ;
269: if (@expr1073747001 Token ::@expr1073747002 Match (@expr1073747003 arg@var2473 , "stdin|stdout|stderr" ) ) {
270: return true ; }
271: }
272: }
273: return false ;
274: }
275:
|
280:
281: void CheckMemoryLeak :: memoryLeak ( const Token * tok@var2474 , const std :: string & varname@var2475 , AllocType alloctype@var2476 ) const
282: {
283: if (@expr1073747004 alloctype@var2476 ==@expr1073747005 CheckMemoryLeak ::@expr1073747006 File ||@expr1073747007
284: alloctype@var2476 ==@expr1073747008 CheckMemoryLeak ::@expr1073747009 Pipe ||@expr1073747010
285: alloctype@var2476 ==@expr1073747011 CheckMemoryLeak ::@expr1073747012 Fd ||@expr1073747013
286: alloctype@var2476 ==@expr1073747014 CheckMemoryLeak ::@expr1073747015 OtherRes ) {
287: resourceLeakError (@expr1073747016 tok@var2474 , varname@var2475 ) ; }
288: else {
289: memleakError (@expr1073747017 tok@var2474 , varname@var2475 ) ; }
290: }
291:
292:
293: void CheckMemoryLeak :: reportErr ( const Token * tok@var2477 , Severity :: SeverityType severity@var2478 , const std :: string & id@var2479 , const std :: string & msg@var2480 , const CWE & cwe@var2481 ) const
294: {
295: std ::@expr1073747018 list < const Token *@expr1073747019 > callstack@var2482 ;
296:
297: if (@expr1073747020 tok@var2477 ) {
298: callstack@var2482 .@expr1073747021 push_back (@expr1073747022 tok@var2477 ) ; }
299:
300: reportErr (@expr1073747023 callstack@var2482 , severity@var2478 , id@var2479 , msg@var2480 , cwe@var2481 ) ;
301: }
302:
303: void CheckMemoryLeak :: reportErr ( const std :: list < const Token * > & callstack@var2483 , Severity :: SeverityType severity@var2484 , const std :: string & id@var2485 , const std :: string & msg@var2486 , const CWE & cwe@var2487 ) const
304: {
305: const ErrorMessage errmsg@var2488 (@expr1073747024 callstack@var2483 , mTokenizer_@var947 ?@expr1073747025 &@expr1073747026 mTokenizer_@var947 .@expr1073747027 list@var2689 :@expr1073747028 nullptr , severity@var2484 , id@var2485 , msg@var2486 , cwe@var2487 , Certainty ::@expr1073747029 normal ) ;
306: if (@expr1073747030 mErrorLogger_@var948 ) {
307: mErrorLogger_@var948 .@expr1073747031 reportErr (@expr1073747032 errmsg@var2488 ) ; }
308: else {
309: Check ::@expr1073747033 reportError (@expr1073747034 errmsg@var2488 ) ; }
310: }
311:
312: void CheckMemoryLeak :: memleakError ( const Token * tok@var2489 , const std :: string & varname@var2490 ) const
313: {
314: reportErr (@expr1073747035 tok@var2489 , Severity ::@expr1073747036 error , "memleak" , "$symbol:" +@expr1073747037 varname@var2490 +@expr1073747038 "\nMemory leak: $symbol" , CWE (@expr1073747039 401U ) ) ;
315: }
316:
317: void CheckMemoryLeak :: memleakUponReallocFailureError ( const Token * tok@var2491 , const std :: string & reallocfunction@var2492 , const std :: string & varname@var2493 ) const
318: {
319: reportErr (@expr1073747040 tok@var2491 , Severity ::@expr1073747041 error , "memleakOnRealloc" , "$symbol:" +@expr1073747042 varname@var2493 +@expr1073747043 "\nCommon " +@expr1073747044 reallocfunction@var2492 +@expr1073747045 " mistake: \'$symbol\' nulled but not freed upon failure" , CWE (@expr1073747046 401U ) ) ;
320: }
321:
322: void CheckMemoryLeak :: resourceLeakError ( const Token * tok@var2494 , const std :: string & varname@var2495 ) const
323: {
324: std ::@expr1073747047 string errmsg@var2496 (@expr1073747048 "Resource leak" ) ;
325: if (@expr1073747049 !@expr1073747050 varname@var2495 .@expr1073747051 empty (@expr1073747052 ) ) {
326: errmsg@var2496 =@expr1073747053 "$symbol:" +@expr1073747054 varname@var2495 +@expr1073747055 '\n' +@expr1073747056 errmsg@var2496 +@expr1073747057 ": $symbol" ; }
327: reportErr (@expr1073747058 tok@var2494 , Severity ::@expr1073747059 error , "resourceLeak" , errmsg@var2496 , CWE (@expr1073747060 775U ) ) ;
328: }
329:
330: void CheckMemoryLeak :: deallocDeallocError ( const Token * tok@var2497 , const std :: string & varname@var2498 ) const
331: {
332: reportErr (@expr1073747061 tok@var2497 , Severity ::@expr1073747062 error , "deallocDealloc" , "$symbol:" +@expr1073747063 varname@var2498 +@expr1073747064 "\nDeallocating a deallocated pointer: $symbol" , CWE (@expr1073747065 415U ) ) ;
333: }
334:
335: void CheckMemoryLeak :: deallocuseError ( const Token * tok@var2499 , const std :: string & varname@var2500 ) const
336: {
337: reportErr (@expr1073747066 tok@var2499 , Severity ::@expr1073747067 error , "deallocuse" , "$symbol:" +@expr1073747068 varname@var2500 +@expr1073747069 "\nDereferencing '$symbol' after it is deallocated / released" , CWE (@expr1073747070 416U ) ) ;
338: }
339:
340: void CheckMemoryLeak :: mismatchSizeError ( const Token * tok@var2501 , const std :: string & sz@var2502 ) const
341: {
342: reportErr (@expr1073747071 tok@var2501 , Severity ::@expr1073747072 error , "mismatchSize" , "The allocated size " +@expr1073747073 sz@var2502 +@expr1073747074 " is not a multiple of the underlying type's size." , CWE (@expr1073747075 131U ) ) ;
343: }
344:
345: void CheckMemoryLeak :: mismatchAllocDealloc ( const std :: list < const Token * > & callstack@var2503 , const std :: string & varname@var2504 ) const
346: {
347: reportErr (@expr1073747076 callstack@var2503 , Severity ::@expr1073747077 error , "mismatchAllocDealloc" , "$symbol:" +@expr1073747078 varname@var2504 +@expr1073747079 "\nMismatching allocation and deallocation: $symbol" , CWE (@expr1073747080 762U ) ) ;
348: }
349:
350: CheckMemoryLeak :: AllocType CheckMemoryLeak :: functionReturnType ( const Function * func@var2505 , std :: list < const Function * > * callstack@var2506 ) const
351: {
352: if (@expr1073747081 !@expr1073747082 func@var2505 ||@expr1073747083 !@expr1073747084 func@var2505 .@expr1073747085 hasBody (@expr1073747086 ) ||@expr1073747087 !@expr1073747088 func@var2505 .@expr5265 functionScope@var2507 ) {
353: return No ; }
354:
355:
356: int varid@var2508 ; varid@var2508 =@expr1073747090 0 ;
357: for (@expr1073747091 const Token *@expr5268 tok2@var2509 =@expr1073747093 func@var2505 .@expr5265 functionScope@var2507 .@expr5271 bodyStart@var2510 ; tok2@var2509 !=@expr1073747096 func@var2505 .@expr5265 functionScope@var2507 .@expr5274 bodyEnd@var2511 ; tok2@var2509 =@expr1073747099 tok2@var2509 .@expr5276 next (@expr5277 ) ) {
358: if (@expr1073747102 const Token *@expr5268 endOfLambda@var2512 =@expr1073747104 findLambdaEndToken (@expr1073747105 tok2@var2509 ) ) {
359: tok2@var2509 =@expr1073747106 endOfLambda@var2512 ; }
360: if (@expr1073747107 tok2@var2509 .@expr5284 str (@expr5285 ) ==@expr1073747110 "{" &&@expr1073747111 !@expr1073747112 tok2@var2509 .@expr5289 scope (@expr5290 ) .@expr1073747115 isExecutable (@expr1073747116 ) ) {
361: tok2@var2509 =@expr1073747117 tok2@var2509 .@expr1073747118 link (@expr1073747119 ) ; }
362: if (@expr1073747120 tok2@var2509 .@expr5284 str (@expr5285 ) ==@expr1073747123 "return" ) {
363: const AllocType allocType@var2513 =@expr1073747124 getAllocationType (@expr1073747125 tok2@var2509 .@expr5276 next (@expr5277 ) , 0 , callstack@var2506 ) ;
364: if (@expr1073747128 allocType@var2513 !=@expr1073747129 No ) {
365: return allocType@var2513 ; }
366:
367: if (@expr1073747130 tok2@var2509 .@expr5289 scope (@expr5290 ) !=@expr1073747133 func@var2505 .@expr5265 functionScope@var2507 ||@expr1073747135 !@expr1073747136 tok2@var2509 .@expr5313 astOperand1 (@expr5314 ) ) {
368: return No ; }
369: const Token * tok@var2514 ; tok@var2514 =@expr1073747139 tok2@var2509 .@expr5313 astOperand1 (@expr5314 ) ;
370: if (@expr1073747142 Token ::@expr5319 Match (@expr1073747144 tok@var2514 , ".|::" ) ) {
371: tok@var2514 =@expr1073747145 tok@var2514 .@expr5322 astOperand2 (@expr5323 ) ?@expr1073747148 tok@var2514 .@expr5322 astOperand2 (@expr5323 ) :@expr1073747151 tok@var2514 .@expr1073747152 astOperand1 (@expr1073747153 ) ; }
372: if (@expr1073747154 tok@var2514 ) {
373: varid@var2508 =@expr1073747155 tok@var2514 .@expr1073747156 varId (@expr1073747157 ) ; }
374: break ;
375: }
376: }
377:
378:
379: if (@expr1073747158 varid@var2508 ==@expr1073747159 0 ) {
380: return No ; }
381:
|
384:
385: const Variable * var@var2515 ; var@var2515 =@expr1073747160 mTokenizer_@var947 .@expr1073747161 getSymbolDatabase (@expr1073747162 ) .@expr1073747163 getVariableFromVarId (@expr1073747164 varid@var2508 ) ;
386: if (@expr1073747165 !@expr1073747166 var@var2515 ||@expr1073747167 !@expr1073747168 var@var2515 .@expr1073747169 isLocal (@expr1073747170 ) ||@expr1073747171 var@var2515 .@expr1073747172 isStatic (@expr1073747173 ) ) {
387: return No ; }
388:
389:
390: AllocType allocType@var2516 ; allocType@var2516 =@expr1073747174 No ;
391: for (@expr1073747175 const Token *@expr5268 tok@var2517 =@expr1073747177 func@var2505 .@expr5265 functionScope@var2507 .@expr5271 bodyStart@var2510 ; tok@var2517 !=@expr1073747180 func@var2505 .@expr5265 functionScope@var2507 .@expr5274 bodyEnd@var2511 ; tok@var2517 =@expr1073747183 tok@var2517 .@expr1073747184 next (@expr1073747185 ) ) {
392: if (@expr1073747186 Token ::@expr5319 Match (@expr1073747188 tok@var2517 , "%varid% =" , varid@var2508 ) ) {
393: allocType@var2516 =@expr1073747189 getAllocationType (@expr1073747190 tok@var2517 .@expr1073747191 tokAt (@expr1073747192 2 ) , varid@var2508 , callstack@var2506 ) ;
394: }
395: if (@expr1073747193 Token ::@expr5319 Match (@expr1073747195 tok@var2517 , "= %varid% ;" , varid@var2508 ) ) {
396: return No ;
397: }
398: if (@expr1073747196 !@expr1073747197 mTokenizer_@var947 .@expr1073747198 isC (@expr1073747199 ) &&@expr1073747200 Token ::@expr5319 Match (@expr1073747202 tok@var2517 , "[(,] %varid% [,)]" , varid@var2508 ) ) {
399: return No ;
400: }
401: if (@expr1073747203 Token ::@expr5319 Match (@expr1073747205 tok@var2517 , "[(,] & %varid% [.,)]" , varid@var2508 ) ) {
402: return No ;
403: }
404: if (@expr1073747206 Token ::@expr5319 Match (@expr1073747208 tok@var2517 , "[;{}] %varid% ." , varid@var2508 ) ) {
405: return No ;
406: }
407: if (@expr1073747209 allocType@var2516 ==@expr1073747210 No &&@expr1073747211 tok@var2517 .@expr1073747212 str (@expr1073747213 ) ==@expr1073747214 "return" ) {
408: return No ; }
409: }
410:
411: return allocType@var2516 ;
412: }
413:
414:
415: static bool notvar ( const Token * tok@var2518 , int varid@var2519 )
416: {
417: if (@expr1073747215 !@expr1073747216 tok@var2518 ) {
418: return false ; }
419: if (@expr1073747217 Token ::@expr5394 Match (@expr1073747219 tok@var2518 , "&&|;" ) ) {
420: return notvar (@expr1073747220 tok@var2518 .@expr5397 astOperand1 (@expr5398 ) , varid@var2519 ) ||@expr1073747223 notvar (@expr5400 tok@var2518 .@expr5401 astOperand2 (@expr5402 ) , varid@var2519 ) ; }
421: if (@expr1073747227 tok@var2518 .@expr1073747228 str (@expr1073747229 ) ==@expr1073747230 "(" &&@expr1073747231 Token ::@expr5394 Match (@expr1073747233 tok@var2518 .@expr5397 astOperand1 (@expr5398 ) , "UNLIKELY|LIKELY" ) ) {
422: return notvar (@expr5400 tok@var2518 .@expr5401 astOperand2 (@expr5402 ) , varid@var2519 ) ; }
423: const Token * vartok@var2520 ; vartok@var2520 =@expr1073747239 astIsVariableComparison (@expr1073747240 tok@var2518 , "==" , "0" ) ;
424: return vartok@var2520 &&@expr1073747241 (@expr1073747242 vartok@var2520 .@expr1073747243 varId (@expr1073747244 ) ==@expr1073747245 varid@var2519 ) ;
425: }
426:
427: static bool ifvar ( const Token * tok@var2521 , int varid@var2522 , const std :: string & comp@var2523 , const std :: string & rhs@var2524 )
428: {
429: if (@expr1073747246 !@expr1073747247 Token ::@expr1073747248 simpleMatch (@expr1073747249 tok@var2521 , "if (" ) ) {
430: return false ; }
431: const Token * condition@var2525 ; condition@var2525 =@expr1073747250 tok@var2521 .@expr1073747251 next (@expr1073747252 ) .@expr1073747253 astOperand2 (@expr1073747254 ) ;
432: if (@expr1073747255 condition@var2525 &&@expr1073747256 condition@var2525 .@expr5433 str (@expr5434 ) ==@expr1073747259 "(" &&@expr1073747260 Token ::@expr1073747261 Match (@expr1073747262 condition@var2525 .@expr1073747263 astOperand1 (@expr1073747264 ) , "UNLIKELY|LIKELY" ) ) {
433: condition@var2525 =@expr1073747265 condition@var2525 .@expr1073747266 astOperand2 (@expr1073747267 ) ; }
434: if (@expr1073747268 !@expr1073747269 condition@var2525 ||@expr1073747270 condition@var2525 .@expr5433 str (@expr5434 ) ==@expr1073747273 "&&" ) {
435: return false ; }
436:
437: const Token * vartok@var2526 ; vartok@var2526 =@expr1073747274 astIsVariableComparison (@expr1073747275 condition@var2525 , comp@var2523 , rhs@var2524 ) ;
438: return (@expr1073747276 vartok@var2526 &&@expr1073747277 vartok@var2526 .@expr1073747278 varId (@expr1073747279 ) ==@expr1073747280 varid@var2522 ) ;
439: }
440:
441: bool CheckMemoryLeakInFunction :: test_white_list ( const std :: string & funcname@var2527 , const Settings * settings@var2528 , bool cpp@var2529 )
442: {
443: return (@expr5457 (@expr5457 call_func_white_list@var2444 .@expr1073747283 find (@expr1073747284 funcname@var2527 ) !=@expr1073747285 call_func_white_list@var2444 .@expr1073747286 end (@expr1073747287 ) ) ||@expr1073747288 settings@var2528 .@expr1073747289 library@var2530 .@expr1073747290 isLeakIgnore (@expr1073747291 funcname@var2527 ) ||@expr1073747292 (@expr5457 cpp@var2529 &&@expr1073747294 funcname@var2527 ==@expr1073747295 "delete" ) ) ;
444: }
445:
|
453:
454: static bool isNoArgument ( const SymbolDatabase * symbolDatabase@var2531 , int varid@var2532 )
455: {
456: const Variable * var@var2533 ; var@var2533 =@expr1073747296 symbolDatabase@var2531 .@expr1073747297 getVariableFromVarId (@expr1073747298 varid@var2532 ) ;
457: return var@var2533 &&@expr1073747299 !@expr1073747300 var@var2533 .@expr1073747301 isArgument (@expr1073747302 ) ;
458: }
459:
460: void CheckMemoryLeakInFunction :: checkReallocUsage ( )
461: {
462:
463: const SymbolDatabase * symbolDatabase@var2534 ; symbolDatabase@var2534 =@expr1073747305 mTokenizer@var28 .@expr1073747306 getSymbolDatabase (@expr1073747307 ) ;
464: for (@expr1073747308 const Scope *@expr5485 scope@var2535 :@expr1073747310 symbolDatabase@var2534 .@expr1073747311 functionScopes@var2536 ) {
465:
466:
467: for (@expr1073747312 const Token *@expr5485 tok@var2537 =@expr1073747314 scope@var2535 .@expr5491 bodyStart@var2538 .@expr1073747316 next (@expr1073747317 ) ; tok@var2537 !=@expr1073747318 scope@var2535 .@expr1073747319 bodyEnd@var2539 ; tok@var2537 =@expr1073747320 tok@var2537 .@expr5497 next (@expr5498 ) ) {
468: if (@expr1073747323 tok@var2537 .@expr5500 varId (@expr5501 ) >@expr1073747326 0 &&@expr1073747327 Token ::@expr1073747328 Match (@expr1073747329 tok@var2537 , "%name% =" ) ) {
469:
470: const Token * parTok@var2540 ; parTok@var2540 =@expr1073747330 tok@var2537 .@expr5497 next (@expr5498 ) .@expr1073747333 astOperand2 (@expr1073747334 ) ;
471:
472: while (@expr1073747335 parTok@var2540 &&@expr1073747336 parTok@var2540 .@expr1073747337 isCast (@expr1073747338 ) ) {
473: parTok@var2540 =@expr1073747339 parTok@var2540 .@expr5516 astOperand1 (@expr5517 ) ; }
474: if (@expr1073747342 !@expr1073747343 parTok@var2540 ) {
475: continue ; }
476:
477: const Token * const reallocTok@var2541 ; reallocTok@var2541 =@expr1073747344 parTok@var2540 .@expr5516 astOperand1 (@expr5517 ) ;
478: if (@expr1073747347 !@expr1073747348 reallocTok@var2541 ) {
479: continue ; }
480: const Library ::@expr1073747349 AllocFunc * f@var2542 ; f@var2542 =@expr1073747350 mSettings@var29 .@expr5527 library@var2690 .@expr1073747352 getReallocFuncInfo (@expr1073747353 reallocTok@var2541 ) ;
481: if (@expr1073747354 !@expr1073747355 (@expr1073747356 f@var2542 &&@expr1073747357 f@var2542 .@expr1073747358 arg@var2543 ==@expr1073747359 -1 &&@expr1073747360 mSettings@var29 .@expr5527 library@var2690 .@expr1073747362 isnotnoreturn (@expr1073747363 reallocTok@var2541 ) ) ) {
482: continue ; }
483:
484: const AllocType allocType@var2544 =@expr1073747364 getReallocationType (@expr1073747365 reallocTok@var2541 , tok@var2537 .@expr5500 varId (@expr5501 ) ) ;
485: if (@expr1073747368 !@expr1073747369 (@expr1073747370 allocType@var2544 ==@expr1073747371 Malloc@expr1073747303 ||@expr1073747372 allocType@var2544 ==@expr1073747373 OtherMem@expr1073747304 ) ) {
486: continue ; }
487: const Token * arg@var2545 ; arg@var2545 =@expr1073747374 getArguments (@expr1073747375 reallocTok@var2541 ) .@expr1073747376 at (@expr1073747377 f@var2542 .@expr1073747378 reallocArg@var2546 -@expr1073747379 1 ) ;
488: while (@expr1073747380 arg@var2545 &&@expr1073747381 arg@var2545 .@expr1073747382 isCast (@expr1073747383 ) ) {
489: arg@var2545 =@expr1073747384 arg@var2545 .@expr5561 astOperand1 (@expr5562 ) ; }
490: const Token * tok2@var2547 ; tok2@var2547 =@expr1073747387 tok@var2537 ;
491: while (@expr1073747388 arg@var2545 &&@expr1073747389 arg@var2545 .@expr1073747390 isUnaryOp (@expr1073747391 "*" ) &&@expr1073747392 tok2@var2547 &&@expr1073747393 tok2@var2547 .@expr5570 astParent (@expr5571 ) &&@expr1073747396 tok2@var2547 .@expr5570 astParent (@expr5571 ) .@expr1073747399 isUnaryOp (@expr1073747400 "*" ) ) {
492: arg@var2545 =@expr1073747401 arg@var2545 .@expr5561 astOperand1 (@expr5562 ) ;
493: tok2@var2547 =@expr1073747404 tok2@var2547 .@expr5570 astParent (@expr5571 ) ;
494: }
495:
496: if (@expr1073747407 !@expr1073747408 arg@var2545 ||@expr1073747409 !@expr1073747410 tok2@var2547 ) {
497: continue ; }
498:
499: if (@expr1073747411 !@expr1073747412 (@expr1073747413 (@expr1073747414 tok@var2537 .@expr5500 varId (@expr5501 ) ==@expr1073747417 arg@var2545 .@expr1073747418 varId (@expr1073747419 ) ) &&@expr1073747420 isNoArgument (@expr1073747421 symbolDatabase@var2534 , tok@var2537 .@expr5500 varId (@expr5501 ) ) ) ) {
500: continue ; }
501:
502:
503: if (@expr1073747424 Token ::@expr5601 findmatch (@expr1073747426 scope@var2535 .@expr5491 bodyStart@var2538 , "%name% = %varid% ;" , tok@var2537 , tok@var2537 .@expr5500 varId (@expr5501 ) ) ||@expr1073747430
504: Token ::@expr5601 findmatch (@expr1073747432 scope@var2535 .@expr5491 bodyStart@var2538 , "[{};] %varid% = *| %var% .| %var%| [;=]" , tok@var2537 , tok@var2537 .@expr5500 varId (@expr5501 ) ) ) {
505: continue ; }
506:
507:
508: if (@expr1073747436 arg@var2545 .@expr1073747437 hasKnownIntValue (@expr1073747438 ) &&@expr1073747439 arg@var2545 .@expr1073747440 getKnownIntValue (@expr1073747441 ) ==@expr1073747442 0 ) {
509: continue ;
510: }
511:
512: const Token * tokEndRealloc@var2548 ; tokEndRealloc@var2548 =@expr1073747443 reallocTok@var2541 .@expr1073747444 linkAt (@expr1073747445 1 ) ;
513:
514: if (@expr1073747446 Token ::@expr1073747447 simpleMatch (@expr1073747448 tokEndRealloc@var2548 .@expr1073747449 next (@expr1073747450 ) , "; if (" ) &&@expr1073747451
515: notvar (@expr1073747452 tokEndRealloc@var2548 .@expr1073747453 tokAt (@expr1073747454 3 ) .@expr1073747455 astOperand2 (@expr1073747456 ) , tok@var2537 .@expr5500 varId (@expr5501 ) ) ) {
516: const Token * tokEndBrace@var2549 ; tokEndBrace@var2549 =@expr1073747459 tokEndRealloc@var2548 .@expr1073747460 linkAt (@expr1073747461 3 ) .@expr1073747462 linkAt (@expr1073747463 1 ) ;
517: if (@expr1073747464 tokEndBrace@var2549 &&@expr1073747465 mTokenizer@var28 .@expr1073747466 isScopeNoReturn (@expr1073747467 tokEndBrace@var2549 ) ) {
518: continue ; }
519: }
520:
521: memleakUponReallocFailureError (@expr1073747468 tok@var2537 , reallocTok@var2541 .@expr1073747469 str (@expr1073747470 ) , tok@var2537 .@expr1073747471 str (@expr1073747472 ) ) ;
522: }
523: }
524: }
525: }
526:
|
533:
534: void CheckMemoryLeakInClass :: check ( )
535: {
536: const SymbolDatabase * symbolDatabase@var2550 ; symbolDatabase@var2550 =@expr1073747473 mTokenizer@var28 .@expr1073747474 getSymbolDatabase (@expr1073747475 ) ;
537:
538:
539: for (@expr1073747476 const Scope *@expr1073747477 scope@var2551 :@expr1073747478 symbolDatabase@var2550 .@expr1073747479 classAndStructScopes@var2552 ) {
540: for (@expr1073747480 const Variable &@expr1073747481 var@var2553 :@expr1073747482 scope@var2551 .@expr1073747483 varlist@var2554 ) {
541: if (@expr1073747484 !@expr1073747485 var@var2553 .@expr1073747486 isStatic (@expr1073747487 ) &&@expr1073747488 (@expr1073747489 var@var2553 .@expr1073747490 isPointer (@expr1073747491 ) ||@expr1073747492 var@var2553 .@expr1073747493 isPointerArray (@expr1073747494 ) ) ) {
542:
543: const Token * tok@var2555 ; tok@var2555 =@expr1073747495 var@var2553 .@expr1073747496 typeStartToken (@expr1073747497 ) ;
544:
545: if (@expr1073747498 tok@var2555 .@expr1073747499 isStandardType (@expr1073747500 ) ||@expr1073747501 (@expr1073747502 var@var2553 .@expr5679 type (@expr5680 ) &&@expr1073747505 var@var2553 .@expr5679 type (@expr5680 ) .@expr1073747508 derivedFrom@var2705 .@expr1073747509 empty (@expr1073747510 ) ) ) {
546: if (@expr1073747511 var@var2553 .@expr1073747512 isPrivate (@expr1073747513 ) ) {
547: checkPublicFunctions (@expr1073747514 scope@var2551 , var@var2553 .@expr5691 nameToken (@expr5692 ) ) ; }
548:
549: variable (@expr1073747517 scope@var2551 , var@var2553 .@expr5691 nameToken (@expr5692 ) ) ;
550: }
551: }
552: }
553: }
554: }
555:
556:
557: void CheckMemoryLeakInClass :: variable ( const Scope * scope@var2556 , const Token * tokVarname@var2557 )
558: {
559: const std ::@expr5697 string &@expr5698 varname@var2558 =@expr1073747523 tokVarname@var2557 .@expr1073747524 str (@expr1073747525 ) ;
560: const int varid@var2559 =@expr1073747526 tokVarname@var2557 .@expr1073747527 varId (@expr1073747528 ) ;
561: const std ::@expr5697 string &@expr5698 classname@var2560 =@expr1073747531 scope@var2556 .@expr5708 className@var2561 ;
562:
563:
564: CheckMemoryLeak ::@expr1073747533 AllocType memberAlloc@var2562 ; memberAlloc@var2562 =@expr1073747534 CheckMemoryLeak ::@expr5711 No ;
565: CheckMemoryLeak ::@expr1073747536 AllocType memberDealloc@var2563 ; memberDealloc@var2563 =@expr1073747537 CheckMemoryLeak ::@expr5711 No ;
566:
567: bool allocInConstructor@var2564 ; allocInConstructor@var2564 =@expr1073747539 false ;
568: bool deallocInDestructor@var2565 ; deallocInDestructor@var2565 =@expr1073747540 false ;
569:
570:
571: for (@expr1073747541 const Function &@expr5698 func@var2566 :@expr1073747543 scope@var2556 .@expr1073747544 functionList@var2567 ) {
572: const bool constructor@var2568 =@expr1073747545 func@var2566 .@expr1073747546 isConstructor (@expr1073747547 ) ;
573: const bool destructor@var2569 =@expr1073747548 func@var2566 .@expr1073747549 isDestructor (@expr1073747550 ) ;
574: if (@expr1073747551 !@expr1073747552 func@var2566 .@expr1073747553 hasBody (@expr1073747554 ) ) {
575: if (@expr5731 destructor@var2569 ) {
576: deallocInDestructor@var2565 =@expr1073747556 true ;
577: memberDealloc@var2563 =@expr1073747557 CheckMemoryLeak ::@expr5734 Many ;
578: }
579: continue ;
580: }
581: if (@expr1073747559 !@expr1073747560 func@var2566 .@expr5737 functionScope@var2570 ) {
582: continue ; }
583: bool body@var2571 ; body@var2571 =@expr1073747562 false ;
584: const Token * end@var2572 ; end@var2572 =@expr1073747563 func@var2566 .@expr5737 functionScope@var2570 .@expr1073747565 bodyEnd@var2573 ;
585: for (@expr1073747566 const Token *@expr5743 tok@var2574 =@expr1073747568 func@var2566 .@expr1073747569 arg@var2575 .@expr1073747570 link (@expr1073747571 ) ; tok@var2574 !=@expr1073747572 end@var2572 ; tok@var2574 =@expr1073747573 tok@var2574 .@expr1073747574 next (@expr1073747575 ) ) {
586: if (@expr1073747576 tok@var2574 ==@expr1073747577 func@var2566 .@expr5737 functionScope@var2570 .@expr1073747579 bodyStart@var2576 ) {
587: body@var2571 =@expr1073747580 true ; }
588: else {
589: if (@expr5757 !@expr5758 body@var2571 ) {
590: if (@expr1073747583 !@expr1073747584 Token ::@expr5761 Match (@expr1073747586 tok@var2574 , ":|, %varid% (" , varid@var2559 ) ) {
591: continue ; }
592: }
593:
594:
595: if (@expr1073747587 !@expr5758 body@var2571 ||@expr1073747589 Token ::@expr5761 Match (@expr1073747591 tok@var2574 , "%varid% =|[" , varid@var2559 ) ) {
596:
597:
598: if (@expr1073747592 tok@var2574 .@expr5769 strAt (@expr5770 -1 ) ==@expr1073747595 "=" ) {
599: return ; }
600:
601:
602:
603: if (@expr1073747596 tok@var2574 .@expr5769 strAt (@expr5770 -1 ) ==@expr1073747599 "::" &&@expr1073747600
604: tok@var2574 .@expr5769 strAt (@expr1073747602 -2 ) !=@expr1073747603 scope@var2556 .@expr5708 className@var2561 ) {
605: return ; }
606:
607: const Token * allocTok@var2577 ; allocTok@var2577 =@expr1073747605 tok@var2574 .@expr1073747606 tokAt (@expr1073747607 body@var2571 ?@expr1073747608 2 :@expr1073747609 3 ) ;
608: if (@expr1073747610 tok@var2574 .@expr5787 astParent (@expr5788 ) &&@expr1073747613 tok@var2574 .@expr5787 astParent (@expr5788 ) .@expr1073747616 str (@expr1073747617 ) ==@expr1073747618 "[" &&@expr1073747619 tok@var2574 .@expr5787 astParent (@expr5788 ) .@expr5798 astParent (@expr5799 ) ) {
609: allocTok@var2577 =@expr1073747624 tok@var2574 .@expr5787 astParent (@expr5788 ) .@expr5798 astParent (@expr5799 ) .@expr1073747629 astOperand2 (@expr1073747630 ) ; }
610:
611: AllocType alloc@var2578 ; alloc@var2578 =@expr1073747631 getAllocationType (@expr1073747632 allocTok@var2577 , 0 ) ;
612: if (@expr1073747633 alloc@var2578 !=@expr1073747634 CheckMemoryLeak ::@expr5711 No ) {
613: if (@expr1073747636 constructor@var2568 ) {
614: allocInConstructor@var2564 =@expr1073747637 true ; }
615:
616: if (@expr1073747638 memberAlloc@var2562 !=@expr1073747639 No &&@expr1073747640 memberAlloc@var2562 !=@expr1073747641 alloc@var2578 ) {
617: alloc@var2578 =@expr1073747642 CheckMemoryLeak ::@expr5734 Many ; }
618:
619: if (@expr1073747644 alloc@var2578 !=@expr1073747645 CheckMemoryLeak ::@expr5734 Many &&@expr1073747647 memberDealloc@var2563 !=@expr5824 CheckMemoryLeak ::@expr5711 No &&@expr1073747650 memberDealloc@var2563 !=@expr1073747651 CheckMemoryLeak ::@expr5734 Many &&@expr1073747653 memberDealloc@var2563 !=@expr1073747654 alloc@var2578 ) {
620: std ::@expr1073747655 list < const Token *@expr5743 > callstack@var2579 ;
621: callstack@var2579 .@expr1073747657 push_back (@expr1073747658 tok@var2574 ) ;
622: mismatchAllocDealloc (@expr1073747659 callstack@var2579 , classname@var2560 +@expr5836 "::" +@expr5837 varname@var2558 ) ;
623: }
624:
625: memberAlloc@var2562 =@expr1073747662 alloc@var2578 ;
626: }
627: }
628:
629: if (@expr5757 !@expr5758 body@var2571 ) {
630: continue ; }
631:
632:
633: AllocType dealloc@var2580 ; dealloc@var2580 =@expr1073747665 getDeallocationType (@expr1073747666 tok@var2574 , varid@var2559 ) ;
634:
635:
636: if (@expr1073747667 destructor@var2569 &&@expr1073747668 tok@var2574 .@expr5845 str (@expr5846 ) ==@expr1073747671 varname@var2558 ) {
637: dealloc@var2580 =@expr1073747672 CheckMemoryLeak ::@expr5734 Many ; }
638: if (@expr1073747674 dealloc@var2580 !=@expr1073747675 CheckMemoryLeak ::@expr5711 No@expr5696 ) {
639: if (@expr5731 destructor@var2569 ) {
640: deallocInDestructor@var2565 =@expr1073747678 true ; }
641:
642:
643: if (@expr1073747679 memberDealloc@var2563 !=@expr5824 CheckMemoryLeak ::@expr5711 No &&@expr1073747682 memberDealloc@var2563 !=@expr1073747683 dealloc@var2580 ) {
644: dealloc@var2580 =@expr1073747684 CheckMemoryLeak ::@expr5734 Many ; }
645:
646: if (@expr1073747686 dealloc@var2580 !=@expr1073747687 CheckMemoryLeak ::@expr5734 Many &&@expr1073747689 memberAlloc@var2562 !=@expr5866 CheckMemoryLeak ::@expr5711 No &&@expr1073747692 memberAlloc@var2562 !=@expr1073747693 Many &&@expr1073747694 memberAlloc@var2562 !=@expr1073747695 dealloc@var2580 ) {
647: std ::@expr1073747696 list < const Token *@expr5743 > callstack@var2581 ;
648: callstack@var2581 .@expr1073747698 push_back (@expr1073747699 tok@var2574 ) ;
649: mismatchAllocDealloc (@expr1073747700 callstack@var2581 , classname@var2560 +@expr5836 "::" +@expr5837 varname@var2558 ) ;
650: }
651:
652: memberDealloc@var2563 =@expr1073747703 dealloc@var2580 ;
653: }
654:
655:
656: else { if (@expr1073747704 Token ::@expr5761 Match (@expr1073747706 tok@var2574 .@expr1073747707 previous (@expr1073747708 ) , "[{};] %name% (" ) ) {
657: if (@expr1073747709 !@expr1073747710 CheckMemoryLeakInFunction ::@expr1073747711 test_white_list (@expr1073747712 tok@var2574 .@expr5845 str (@expr5846 ) , mSettings@var29 , mTokenizer@var28 .@expr1073747715 isCPP (@expr1073747716 ) ) ) {
658: return ;
659: }
660: } }
661: }
662: }
663: }
664:
665: if (@expr1073747717 allocInConstructor@var2564 &&@expr1073747718 !@expr1073747719 deallocInDestructor@var2565 ) {
666: unsafeClassError (@expr5896 tokVarname@var2557 , classname@var2560 , classname@var2560 +@expr5836 "::" +@expr5837 varname@var2558 ) ;
667: } else { if (@expr1073747723 memberAlloc@var2562 !=@expr5866 CheckMemoryLeak ::@expr5711 No &&@expr1073747726 memberDealloc@var2563 ==@expr1073747727 CheckMemoryLeak ::@expr5711 No@expr5696 ) {
668: unsafeClassError (@expr5896 tokVarname@var2557 , classname@var2560 , classname@var2560 +@expr5836 "::" +@expr5837 varname@var2558 ) ;
669: } }
670: }
671:
672: void CheckMemoryLeakInClass :: unsafeClassError ( const Token * tok@var2582 , const std :: string & classname@var2583 , const std :: string & varname@var2584 )
673: {
674: if (@expr1073747732 !@expr1073747733 mSettings@var29 .@expr1073747734 severity@var2691 .@expr1073747735 isEnabled (@expr1073747736 Severity ::@expr5913 style ) ) {
675: return ; }
676:
677: reportError (@expr1073747738 tok@var2582 , Severity ::@expr5913 style , "unsafeClassCanLeak" ,
678: "$symbol:" +@expr1073747740 classname@var2583 +@expr1073747741 "\n$symbol:"
679: +@expr1073747742 varname@var2584 +@expr1073747743 "\nClass '"
680: +@expr1073747744 classname@var2583 +@expr1073747745 "' is unsafe, '" +@expr1073747746 varname@var2584 +@expr1073747747 "' can leak by wrong usage.\nThe class '"
681: +@expr1073747748 classname@var2583 +@expr1073747749 "' is unsafe, wrong usage can cause memory/resource leaks for '" +@expr1073747750 varname@var2584 +@expr1073747751 "'. This can for instance be fixed by adding proper cleanup in the destructor." , CWE398@var2440 , Certainty ::@expr1073747752 normal ) ;
682: }
683:
684:
685: void CheckMemoryLeakInClass :: checkPublicFunctions ( const Scope * scope@var2585 , const Token * classtok@var2586 )
686: {
687:
688:
689:
690: if (@expr1073747754 !@expr1073747755 mSettings@var29 .@expr1073747756 severity@var2691 .@expr1073747757 isEnabled (@expr1073747758 Severity ::@expr1073747759 warning ) ) {
691: return ; }
692:
693: const int varid@var2587 =@expr1073747760 classtok@var2586 .@expr1073747761 varId (@expr1073747762 ) ;
694:
695:
696:
697: for (@expr1073747763 const Function &@expr1073747764 func@var2588 :@expr1073747765 scope@var2585 .@expr1073747766 functionList@var2589 ) {
698: if (@expr1073747767 (@expr1073747768 func@var2588 .@expr5945 type@var2590 ==@expr1073747770 Function ::@expr1073747771 eFunction ||@expr1073747772 func@var2588 .@expr5945 type@var2590 ==@expr1073747774 Function ::@expr1073747775 eOperatorEqual ) &&@expr1073747776
699: func@var2588 .@expr1073747777 access@var2591 ==@expr1073747778 AccessControl ::@expr1073747779 Public &&@expr1073747780 func@var2588 .@expr1073747781 hasBody (@expr1073747782 ) ) {
700: const Token * tok2@var2592 ; tok2@var2592 =@expr1073747783 func@var2588 .@expr1073747784 functionScope@var2593 .@expr1073747785 bodyStart@var2594 .@expr1073747786 next (@expr1073747787 ) ;
701: if (@expr1073747788 Token ::@expr5965 Match (@expr1073747790 tok2@var2592 , "%varid% =" , varid@var2587 ) ) {
702: const CheckMemoryLeak ::@expr5967 AllocType alloc@var2595 =@expr1073747792 getAllocationType (@expr1073747793 tok2@var2592 .@expr5970 tokAt (@expr1073747795 2 ) , varid@var2587 ) ;
703: if (@expr1073747796 alloc@var2595 !=@expr1073747797 CheckMemoryLeak ::@expr5974 No@expr5929 ) {
704: publicAllocationError (@expr1073747799 tok2@var2592 , tok2@var2592 .@expr5976 str (@expr5977 ) ) ; }
705: } else { if (@expr1073747802 Token ::@expr5965 Match (@expr1073747804 tok2@var2592 , "%type% :: %varid% =" , varid@var2587 ) &&@expr1073747805
706: tok2@var2592 .@expr5976 str (@expr5977 ) ==@expr1073747808 scope@var2585 .@expr1073747809 className@var2596 ) {
707: const CheckMemoryLeak ::@expr5967 AllocType alloc@var2597 =@expr1073747811 getAllocationType (@expr1073747812 tok2@var2592 .@expr5970 tokAt (@expr1073747814 4 ) , varid@var2587 ) ;
708: if (@expr1073747815 alloc@var2597 !=@expr1073747816 CheckMemoryLeak ::@expr5974 No@expr5929 ) {
709: publicAllocationError (@expr1073747818 tok2@var2592 , tok2@var2592 .@expr1073747819 strAt (@expr1073747820 2 ) ) ; }
710: } }
711: }
712: }
713: }
714:
715: void CheckMemoryLeakInClass :: publicAllocationError ( const Token * tok@var2598 , const std :: string & varname@var2599 )
716: {
717: reportError (@expr1073747821 tok@var2598 , Severity ::@expr1073747822 warning , "publicAllocationError" , "$symbol:" +@expr1073747823 varname@var2599 +@expr1073747824 "\nPossible leak in public function. The pointer '$symbol' is not deallocated before it is allocated." , CWE398@var2440 , Certainty ::@expr1073747825 normal ) ;
718: }
719:
720:
721: void CheckMemoryLeakStructMember :: check ( )
722: {
723: if (@expr1073747826 mSettings@var29 .@expr1073747827 clang@var2692 ) {
724: return ; }
725:
726: const SymbolDatabase * symbolDatabase@var2600 ; symbolDatabase@var2600 =@expr1073747828 mTokenizer@var28 .@expr1073747829 getSymbolDatabase (@expr1073747830 ) ;
727: for (@expr1073747831 const Variable *@expr1073747832 var@var2601 :@expr1073747833 symbolDatabase@var2600 .@expr1073747834 variableList (@expr1073747835 ) ) {
728: if (@expr1073747836 !@expr1073747837 var@var2601 ||@expr1073747838 !@expr1073747839 var@var2601 .@expr1073747840 isLocal (@expr1073747841 ) ||@expr1073747842 var@var2601 .@expr1073747843 isStatic (@expr1073747844 ) ||@expr1073747845 var@var2601 .@expr1073747846 isReference (@expr1073747847 ) ) {
729: continue ; }
730: if (@expr1073747848 var@var2601 .@expr1073747849 typeEndToken (@expr1073747850 ) .@expr1073747851 isStandardType (@expr1073747852 ) ) {
731: continue ; }
732: if (@expr1073747853 var@var2601 .@expr1073747854 scope (@expr1073747855 ) .@expr1073747856 hasInlineOrLambdaFunction (@expr1073747857 ) ) {
733: continue ; }
734: checkStructVariable (@expr1073747858 var@var2601 ) ;
735: }
736: }
737:
738: bool CheckMemoryLeakStructMember :: isMalloc ( const Variable * variable@var2602 )
739: {
740: const int declarationId@var2603 (@expr1073747859 variable@var2602 .@expr1073747860 declarationId (@expr1073747861 ) ) ;
741: bool alloc@var2604 ; alloc@var2604 =@expr1073747862 false ;
742: for (@expr1073747863 const Token *@expr1073747864 tok2@var2605 =@expr1073747865 variable@var2602 .@expr1073747866 nameToken (@expr1073747867 ) ; tok2@var2605 &&@expr1073747868 tok2@var2605 !=@expr1073747869 variable@var2602 .@expr1073747870 scope (@expr1073747871 ) .@expr1073747872 bodyEnd@var2706 ; tok2@var2605 =@expr1073747873 tok2@var2605 .@expr1073747874 next (@expr1073747875 ) ) {
743: if (@expr1073747876 Token ::@expr6053 Match (@expr1073747878 tok2@var2605 , "= %varid% [;=]" , declarationId@var2603 ) ) {
744: return false ;
745: } else { if (@expr1073747879 Token ::@expr6053 Match (@expr1073747881 tok2@var2605 , "%varid% = malloc|kmalloc (" , declarationId@var2603 ) ) {
746: alloc@var2604 =@expr1073747882 true ;
747: } }
748: }
749: return alloc@var2604 ;
750: }
751:
752: void CheckMemoryLeakStructMember :: checkStructVariable ( const Variable * const variable@var2606 )
753: {
754:
755: if (@expr1073747884 variable@var2606 .@expr1073747885 isPointer (@expr1073747886 ) ) {
756:
757: if (@expr1073747887 !@expr1073747888 isMalloc (@expr1073747889 variable@var2606 ) ) {
758: return ; }
759: } else { if (@expr1073747890 !@expr1073747891 mTokenizer@var28 .@expr1073747892 isC (@expr1073747893 ) &&@expr1073747894 (@expr1073747895 !@expr1073747896 variable@var2606 .@expr6073 typeScope (@expr6074 ) ||@expr1073747899 variable@var2606 .@expr6073 typeScope (@expr6074 ) .@expr1073747902 getDestructor (@expr1073747903 ) ) ) {
760:
761: return ;
762: } }
763:
764:
765: int indentlevel2@var2607 ; indentlevel2@var2607 =@expr1073747904 0 ;
766:
767: auto deallocInFunction@var2608 ; deallocInFunction@var2608 =@expr1073747905 [@expr1073747906 this@expr1073747907 ] (@expr1073747908 const Token *@expr6085 tok@var2609 , int structid@var2610 ) .@expr1073747910 bool {
768:
769: if (@expr1073747911 CheckMemoryLeakInFunction ::@expr1073747912 test_white_list (@expr1073747913 tok@var2609 .@expr1073747914 str (@expr1073747915 ) , mSettings@var29 , mTokenizer@var28 .@expr1073747916 isCPP (@expr1073747917 ) ) ) {
770: return false ; }
771:
772:
773: bool deallocated@var2611 ; deallocated@var2611 =@expr1073747918 false ;
774: const Token * const end@var2612 ; end@var2612 =@expr1073747919 tok@var2609 .@expr1073747920 linkAt (@expr1073747921 1 ) ;
775: for (@expr1073747922 const Token *@expr6085 tok2@var2613 =@expr1073747924 tok@var2609 ; tok2@var2613 !=@expr1073747925 end@var2612 ; tok2@var2613 =@expr1073747926 tok2@var2613 .@expr1073747927 next (@expr1073747928 ) ) {
776: if (@expr1073747929 Token ::@expr6106 Match (@expr1073747931 tok2@var2613 , "[(,] &| %varid% [,)]" , structid@var2610 ) ) {
777:
778: deallocated@var2611 =@expr1073747932 true ;
779: break ;
780: }
781:
782: if (@expr1073747933 Token ::@expr6106 Match (@expr1073747935 tok2@var2613 , "[(,] &| %varid% . %name% [,)]" , structid@var2610 ) ) {
783:
784: deallocated@var2611 =@expr1073747936 true ;
785: break ;
786: }
787: } ;
788:
789: return deallocated@var2611 ;
790: } ;
791:
792: for (@expr1073747937 const Token *@expr6085 tok2@var2614 =@expr1073747939 variable@var2606 .@expr1073747940 nameToken (@expr1073747941 ) ; tok2@var2614 &&@expr1073747942 tok2@var2614 !=@expr1073747943 variable@var2606 .@expr1073747944 scope (@expr1073747945 ) .@expr1073747946 bodyEnd@var2706 ; tok2@var2614 =@expr1073747947 tok2@var2614 .@expr1073747948 next (@expr1073747949 ) ) {
793: if (@expr1073747950 tok2@var2614 .@expr6127 str (@expr6128 ) ==@expr1073747953 "{" ) {
794: ++@expr1073747954 indentlevel2@var2607 ; }
795:
796: else { if (@expr1073747955 tok2@var2614 .@expr6127 str (@expr6128 ) ==@expr1073747958 "}" ) {
797: if (@expr6135 indentlevel2@var2607 ==@expr6136 0 ) {
798: break ; }
799: --@expr1073747961 indentlevel2@var2607 ;
800: }
801:
802:
803:
804: else { if (@expr1073747962 Token ::@expr6106 Match (@expr1073747964 tok2@var2614 , "[(,] %varid% [,)]" , variable@var2606 .@expr6141 declarationId (@expr6142 ) ) ) {
805: break ; }
806:
807:
808: else { if (@expr1073747967 Token ::@expr6106 Match (@expr1073747969 tok2@var2614 .@expr1073747970 previous (@expr1073747971 ) , "[;{}] %varid% . %var% =" , variable@var2606 .@expr6141 declarationId (@expr6142 ) ) ) {
809: if (@expr1073747974 getAllocationType (@expr1073747975 tok2@var2614 .@expr6152 tokAt (@expr1073747977 4 ) , tok2@var2614 .@expr6152 tokAt (@expr6155 2 ) .@expr6156 varId (@expr6157 ) ) ==@expr1073747982 AllocType ::@expr6159 No@expr6059 ) {
810: continue ; }
811:
812: const int structid@var2615 (@expr1073747984 variable@var2606 .@expr6141 declarationId (@expr6142 ) ) ;
813: const int structmemberid@var2616 (@expr1073747987 tok2@var2614 .@expr6152 tokAt (@expr6155 2 ) .@expr6156 varId (@expr6157 ) ) ;
814:
815:
816: int indentlevel3@var2617 ; indentlevel3@var2617 =@expr1073747992 indentlevel2@var2607 ;
817: for (@expr1073747993 const Token *@expr6085 tok3@var2618 =@expr1073747995 tok2@var2614 ; tok3@var2618 ; tok3@var2618 =@expr1073747996 tok3@var2618 .@expr6173 next (@expr6174 ) ) {
818: if (@expr1073747999 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6178 "{" ) {
819: ++@expr1073748003 indentlevel3@var2617 ; }
820:
821: else { if (@expr1073748004 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6183 "}" ) {
822: if (@expr6184 indentlevel3@var2617 ==@expr6185 0 ) {
823: memoryLeak (@expr6186 tok3@var2618 , variable@var2606 .@expr6187 name (@expr6188 ) +@expr6189 "." +@expr6190 tok2@var2614 .@expr6191 strAt (@expr6192 2 ) , Malloc ) ;
824: break ;
825: }
826: --@expr1073748017 indentlevel3@var2617 ;
827: }
828:
829:
830: else { if (@expr1073748018 getDeallocationType (@expr1073748019 tok3@var2618 , structmemberid@var2616 ) !=@expr1073748020 AllocType ::@expr6159 No@expr6059 ) {
831:
832: if (@expr6184 indentlevel3@var2617 ==@expr6185 0 ) {
833: break ; }
834:
835:
836:
837: bool ret@var2619 ; ret@var2619 =@expr1073748024 false ;
838: while (@expr1073748025 tok3@var2618 ) {
839: if (@expr6202 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6205 "return" ) {
840: ret@var2619 =@expr1073748030 true ; }
841: else { if (@expr1073748031 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6178 "{" ||@expr1073748035 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6183 "}" ) {
842: break ; } }
843: tok3@var2618 =@expr1073748039 tok3@var2618 .@expr6173 next (@expr6174 ) ;
844: }
845: if (@expr1073748042 !@expr1073748043 ret@var2619 ||@expr1073748044 !@expr1073748045 tok3@var2618 ||@expr1073748046 tok3@var2618 .@expr6176 str (@expr6177 ) !=@expr1073748049 "}" ) {
846: break ; }
847: --@expr1073748050 indentlevel3@var2617 ;
848: continue ;
849: }
850:
851:
852: else { if (@expr1073748051 Token ::@expr6106 Match (@expr1073748053 tok3@var2618 , "free|kfree ( %varid% )" , structid@var2615 ) ) {
853: if (@expr6135 indentlevel2@var2607 ==@expr6136 0 ) {
854: memoryLeak (@expr6186 tok3@var2618 , variable@var2606 .@expr6187 name (@expr6188 ) +@expr6189 "." +@expr6190 tok2@var2614 .@expr6191 strAt (@expr6192 2 ) , Malloc ) ; }
855: break ;
856: }
857:
858:
859: else { if (@expr1073748063 Token ::@expr6240 simpleMatch (@expr1073748065 tok3@var2618 , "if (" ) &&@expr1073748066
860: notvar (@expr1073748067 tok3@var2618 .@expr6173 next (@expr6174 ) .@expr1073748070 astOperand2 (@expr1073748071 ) , structmemberid@var2616 ) ) {
861:
862: tok3@var2618 =@expr1073748072 tok3@var2618 .@expr6173 next (@expr6174 ) .@expr6251 link (@expr6252 ) ;
863:
864:
865: if (@expr1073748077 !@expr1073748078 Token ::@expr6240 simpleMatch (@expr1073748080 tok3@var2618 , ") {" ) ) {
866: break ; }
867:
868:
869: tok3@var2618 =@expr1073748081 tok3@var2618 .@expr6173 next (@expr6174 ) .@expr6251 link (@expr6252 ) ;
870: }
871:
872:
873: else { if (@expr1073748086 ifvar (@expr1073748087 tok3@var2618 , structmemberid@var2616 , "!=" , "0" ) ) {
874:
875: tok3@var2618 =@expr1073748088 tok3@var2618 .@expr6173 next (@expr6174 ) .@expr6251 link (@expr6252 ) ;
876:
877:
878: int indentlevel4@var2620 ; indentlevel4@var2620 =@expr1073748093 0 ;
879: for (@expr1073748094 const Token *@expr6085 tok4@var2621 =@expr1073748096 tok3@var2618 ; tok4@var2621 ; tok4@var2621 =@expr1073748097 tok4@var2621 .@expr1073748098 next (@expr1073748099 ) ) {
880: if (@expr1073748100 tok4@var2621 .@expr6277 str (@expr6278 ) ==@expr1073748103 "{" ) {
881: ++@expr1073748104 indentlevel4@var2620 ; }
882: else { if (@expr1073748105 tok4@var2621 .@expr6277 str (@expr6278 ) ==@expr1073748108 "}" ) {
883: --@expr1073748109 indentlevel4@var2620 ;
884: if (@expr1073748110 indentlevel4@var2620 ==@expr1073748111 0 ) {
885: break ; }
886: } else { if (@expr1073748112 Token ::@expr6106 Match (@expr1073748114 tok4@var2621 , "free|kfree ( %var% . %varid% )" , structmemberid@var2616 ) ) {
887: break ;
888: } } }
889: }
890:
891:
892: if (@expr1073748115 indentlevel4@var2620 >@expr1073748116 0 ) {
893: break ; }
894: }
895:
896:
897: else { if (@expr6202 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr6205 "return" ) {
898:
899: if (@expr1073748121 !@expr1073748122 Token ::@expr6106 Match (@expr1073748124 tok3@var2618 , "return %varid% ;" , structid@var2615 ) &&@expr1073748125
900: !@expr1073748126 Token ::@expr6106 Match (@expr1073748128 tok3@var2618 , "return & %varid%" , structid@var2615 ) &&@expr1073748129
901: !@expr1073748130 (@expr1073748131 Token ::@expr6106 Match (@expr1073748133 tok3@var2618 , "return %varid% . %var%" , structid@var2615 ) &&@expr1073748134 tok3@var2618 .@expr1073748135 tokAt (@expr1073748136 3 ) .@expr1073748137 varId (@expr1073748138 ) ==@expr1073748139 structmemberid@var2616 ) &&@expr1073748140
902: !@expr1073748141 (@expr1073748142 Token ::@expr6106 Match (@expr1073748144 tok3@var2618 , "return %name% (" ) &&@expr1073748145 tok3@var2618 .@expr6322 astOperand1 (@expr6323 ) &&@expr1073748148 deallocInFunction@var2608 (@expr1073748149 tok3@var2618 .@expr6322 astOperand1 (@expr6323 ) , structid@var2615 ) ) ) {
903: memoryLeak (@expr6186 tok3@var2618 , variable@var2606 .@expr6187 name (@expr6188 ) +@expr6189 "." +@expr6190 tok2@var2614 .@expr6191 strAt (@expr6192 2 ) , Malloc ) ;
904: }
905: break ;
906: }
907:
908:
909: else { if (@expr1073748159 Token ::@expr6106 Match (@expr1073748161 tok3@var2618 , "= %varid% ;" , structid@var2615 ) ) {
910: break ;
911: } else { if (@expr1073748162 Token ::@expr6106 Match (@expr1073748164 tok3@var2618 , "= %var% . %varid% ;" , structmemberid@var2616 ) ) {
912: break ;
913: }
914:
915:
916: else { if (@expr1073748165 tok3@var2618 .@expr6176 str (@expr6177 ) ==@expr1073748168 "goto" ) {
917: break ; }
918:
919:
920: else { if (@expr1073748169 Token ::@expr6106 Match (@expr1073748171 tok3@var2618 , "%name% (" ) ) {
921: if (@expr1073748172 deallocInFunction@var2608 (@expr1073748173 tok3@var2618 , structid@var2615 ) ) {
922: break ; }
923: } } } } } } } } } } }
924: }
925: } } } }
926: }
927: }
928:
929:
930:
931: void CheckMemoryLeakNoVar :: check ( )
932: {
933: const SymbolDatabase * symbolDatabase@var2622 ; symbolDatabase@var2622 =@expr1073748174 mTokenizer@var28 .@expr1073748175 getSymbolDatabase (@expr1073748176 ) ;
934:
935:
936: for (@expr1073748177 const Scope *@expr1073748178 scope@var2623 :@expr1073748179 symbolDatabase@var2622 .@expr1073748180 functionScopes@var2624 ) {
937:
938:
939: checkForUnusedReturnValue (@expr1073748181 scope@var2623 ) ;
940:
941:
942:
943: checkForUnsafeArgAlloc (@expr1073748182 scope@var2623 ) ;
944:
945:
946:
947: checkForUnreleasedInputArgument (@expr1073748183 scope@var2623 ) ;
948: }
949: }
950:
|
954:
955: void CheckMemoryLeakNoVar :: checkForUnreleasedInputArgument ( const Scope * scope@var2625 )
956: {
957:
958: for (@expr1073748185 const Token *@expr6362 tok@var2626 =@expr1073748187 scope@var2625 .@expr1073748188 bodyStart@var2627 ; tok@var2626 !=@expr1073748189 scope@var2625 .@expr1073748190 bodyEnd@var2628 ; tok@var2626 =@expr1073748191 tok@var2626 .@expr6368 next (@expr6369 ) ) {
959:
960: if (@expr1073748194 !@expr1073748195 Token ::@expr6372 Match (@expr1073748197 tok@var2626 , "%name% (" ) ) {
961: continue ; }
962:
963:
964: const Token * tok2@var2629 ; tok2@var2629 =@expr1073748198 tok@var2626 .@expr6368 next (@expr6369 ) .@expr1073748201 astParent (@expr1073748202 ) ;
965: while (@expr1073748203 tok2@var2629 &&@expr1073748204 tok2@var2629 .@expr1073748205 isCast (@expr1073748206 ) ) {
966: tok2@var2629 =@expr1073748207 tok2@var2629 .@expr1073748208 astParent (@expr1073748209 ) ; }
967: if (@expr1073748210 Token ::@expr6372 Match (@expr1073748212 tok2@var2629 , "%assign%|return" ) ) {
968: continue ; }
969:
970: const std ::@expr1073748213 string &@expr1073748214 functionName@var2630 =@expr1073748215 tok@var2626 .@expr1073748216 str (@expr1073748217 ) ;
971: if (@expr1073748218 (@expr1073748219 mTokenizer@var28 .@expr6396 isCPP (@expr6397 ) &&@expr1073748222 functionName@var2630 ==@expr1073748223 "delete" ) ||@expr1073748224
972: functionName@var2630 ==@expr1073748225 "free" ||@expr1073748226
973: functionName@var2630 ==@expr1073748227 "fclose" ||@expr1073748228
974: functionName@var2630 ==@expr1073748229 "realloc" ||@expr1073748230
975: functionName@var2630 ==@expr1073748231 "return" ) {
976: continue ; }
977:
978: if (@expr1073748232 !@expr1073748233 CheckMemoryLeakInFunction ::@expr1073748234 test_white_list (@expr1073748235 functionName@var2630 , mSettings@var29 , mTokenizer@var28 .@expr6396 isCPP (@expr6397 ) ) ) {
979: continue ; }
980:
981: const std ::@expr1073748238 vector < const Token *@expr6362 > args@var2631 =@expr1073748240 getArguments (@expr1073748241 tok@var2626 ) ;
982: for (@expr1073748242 const Token *@expr6362 arg@var2632 :@expr1073748244 args@var2631 ) {
983: if (@expr1073748245 arg@var2632 .@expr1073748246 isOp (@expr1073748247 ) ) {
984: continue ; }
985: while (@expr1073748248 arg@var2632 .@expr6425 astOperand1 (@expr6426 ) ) {
986: arg@var2632 =@expr1073748251 arg@var2632 .@expr6425 astOperand1 (@expr6426 ) ; }
987: if (@expr1073748254 getAllocationType (@expr1073748255 arg@var2632 , 0 ) ==@expr1073748256 No@expr1073748184 ) {
988: continue ; }
989: if (@expr1073748257 isReopenStandardStream (@expr1073748258 arg@var2632 ) ) {
990: continue ; }
991: functionCallLeak (@expr1073748259 arg@var2632 , arg@var2632 .@expr1073748260 str (@expr1073748261 ) , functionName@var2630 ) ;
992: }
993:
994: }
995: }
996:
|
999:
1000: void CheckMemoryLeakNoVar :: checkForUnusedReturnValue ( const Scope * scope@var2633 )
1001: {
1002: for (@expr1073748263 const Token *@expr1073748264 tok@var2634 =@expr1073748265 scope@var2633 .@expr1073748266 bodyStart@var2635 ; tok@var2634 !=@expr1073748267 scope@var2633 .@expr1073748268 bodyEnd@var2636 ; tok@var2634 =@expr1073748269 tok@var2634 .@expr6446 next (@expr6447 ) ) {
1003: const bool isNew@var2637 =@expr1073748272 mTokenizer@var28 .@expr1073748273 isCPP (@expr1073748274 ) &&@expr1073748275 tok@var2634 .@expr6452 str (@expr6453 ) ==@expr1073748278 "new" ;
1004: if (@expr1073748279 !@expr6456 isNew@var2637 &&@expr1073748281 !@expr1073748282 Token ::@expr6459 Match (@expr1073748284 tok@var2634 , "%name% (" ) ) {
1005: continue ; }
1006:
1007: if (@expr1073748285 tok@var2634 .@expr1073748286 varId (@expr1073748287 ) ) {
1008: continue ; }
1009:
1010: const AllocType allocType@var2638 =@expr1073748288 getAllocationType (@expr1073748289 tok@var2634 , 0 ) ;
1011: if (@expr1073748290 allocType@var2638 ==@expr1073748291 No@expr1073748262 ) {
1012: continue ; }
1013:
1014: if (@expr1073748292 tok@var2634 !=@expr1073748293 tok@var2634 .@expr6446 next (@expr6447 ) .@expr1073748296 astOperand1 (@expr1073748297 ) &&@expr1073748298 !@expr6456 isNew@var2637 ) {
1015: continue ; }
1016:
1017: if (@expr1073748300 isReopenStandardStream (@expr1073748301 tok@var2634 ) ) {
1018: continue ; }
1019:
1020:
1021: const Token * parent@var2639 ; parent@var2639 =@expr1073748302 isNew@var2637 ?@expr1073748303 tok@var2634 .@expr1073748304 astParent (@expr1073748305 ) :@expr1073748306 tok@var2634 .@expr6446 next (@expr6447 ) .@expr1073748309 astParent (@expr1073748310 ) ;
1022: while (@expr1073748311 parent@var2639 &&@expr1073748312 parent@var2639 .@expr1073748313 str (@expr1073748314 ) ==@expr1073748315 "(" &&@expr1073748316 !@expr1073748317 parent@var2639 .@expr1073748318 astOperand2 (@expr1073748319 ) ) {
1023: parent@var2639 =@expr1073748320 parent@var2639 .@expr1073748321 astParent (@expr1073748322 ) ; }
1024:
1025: bool warn@var2640 ; warn@var2640 =@expr1073748323 true ;
1026: if (@expr1073748324 isNew@var2637 ) {
1027: const Token * typeTok@var2641 ; typeTok@var2641 =@expr1073748325 tok@var2634 .@expr6446 next (@expr6447 ) ;
1028: warn@var2640 =@expr1073748328 typeTok@var2641 &&@expr1073748329 (@expr1073748330 typeTok@var2641 .@expr1073748331 isStandardType (@expr1073748332 ) ||@expr1073748333 mSettings@var29 .@expr1073748334 library@var2690 .@expr1073748335 detectContainer (@expr1073748336 typeTok@var2641 ) ) ;
1029: }
1030:
1031: if (@expr1073748337 !@expr1073748338 parent@var2639 &&@expr1073748339 warn@var2640 ) {
1032:
1033: const Token * closingBrace@var2642 ; closingBrace@var2642 =@expr1073748340 Token ::@expr1073748341 findmatch (@expr1073748342 tok@var2634 , "}|;" ) ;
1034: if (@expr1073748343 closingBrace@var2642 .@expr1073748344 str (@expr1073748345 ) ==@expr1073748346 "}" &&@expr1073748347 Token ::@expr6459 Match (@expr1073748349 closingBrace@var2642 .@expr6526 link (@expr6527 ) .@expr1073748352 tokAt (@expr1073748353 -1 ) , "%name%" ) &&@expr1073748354 (@expr1073748355 !@expr6456 isNew@var2637 &&@expr1073748357 precedes (@expr1073748358 tok@var2634 , closingBrace@var2642 .@expr6526 link (@expr6527 ) ) ) ) {
1035: continue ; }
1036: returnValueNotUsedError (@expr6537 tok@var2634 , tok@var2634 .@expr6452 str (@expr6453 ) ) ;
1037: } else { if (@expr1073748364 Token ::@expr6459 Match (@expr1073748366 parent@var2639 , "%comp%|!" ) ) {
1038: returnValueNotUsedError (@expr6537 tok@var2634 , tok@var2634 .@expr6452 str (@expr6453 ) ) ;
1039: } }
1040: }
1041: }
1042:
|
1053:
1054: void CheckMemoryLeakNoVar :: checkForUnsafeArgAlloc ( const Scope * scope@var2643 )
1055: {
1056:
1057: if (@expr1073748370 !@expr1073748371 mTokenizer@var28 .@expr1073748372 isCPP (@expr1073748373 ) ||@expr1073748374 !@expr1073748375 mSettings@var29 .@expr1073748376 certainty@var2693 .@expr1073748377 isEnabled (@expr1073748378 Certainty ::@expr1073748379 inconclusive ) ||@expr1073748380 !@expr1073748381 mSettings@var29 .@expr1073748382 severity@var2691 .@expr1073748383 isEnabled (@expr1073748384 Severity ::@expr1073748385 warning ) ) {
1058: return ; }
1059:
1060: for (@expr1073748386 const Token *@expr6563 tok@var2644 =@expr1073748388 scope@var2643 .@expr1073748389 bodyStart@var2645 ; tok@var2644 !=@expr1073748390 scope@var2643 .@expr1073748391 bodyEnd@var2646 ; tok@var2644 =@expr1073748392 tok@var2644 .@expr6569 next (@expr6570 ) ) {
1061: if (@expr1073748395 Token ::@expr6572 Match (@expr1073748397 tok@var2644 , "%name% (" ) ) {
1062: const Token * endParamToken@var2647 ; endParamToken@var2647 =@expr1073748398 tok@var2644 .@expr6569 next (@expr6570 ) .@expr1073748401 link (@expr1073748402 ) ;
1063: const Token * pointerType@var2648 ; pointerType@var2648 =@expr1073748403 nullptr ;
1064: const Token * functionCalled@var2649 ; functionCalled@var2649 =@expr1073748404 nullptr ;
1065:
1066:
1067: for (@expr1073748405 const Token *@expr6563 tok2@var2650 =@expr1073748407 tok@var2644 .@expr1073748408 tokAt (@expr1073748409 2 ) ; tok2@var2650 &&@expr1073748410 tok2@var2650 !=@expr1073748411 endParamToken@var2647 ; tok2@var2650 =@expr1073748412 tok2@var2650 .@expr1073748413 nextArgument (@expr1073748414 ) ) {
1068: const Function * func@var2651 ; func@var2651 =@expr1073748415 tok2@var2650 .@expr1073748416 function (@expr1073748417 ) ;
1069: const bool isNothrow@var2652 =@expr1073748418 func@var2651 &&@expr1073748419 (@expr1073748420 func@var2651 .@expr1073748421 isAttributeNothrow (@expr1073748422 ) ||@expr1073748423 func@var2651 .@expr1073748424 isThrow (@expr1073748425 ) ) ;
1070:
1071: if (@expr1073748426 Token ::@expr6572 Match (@expr1073748428 tok2@var2650 , "shared_ptr|unique_ptr <" ) &&@expr1073748429 Token ::@expr6572 Match (@expr1073748431 tok2@var2650 .@expr6608 next (@expr6609 ) .@expr6610 link (@expr6611 ) , "> ( new %name%" ) ) {
1072: pointerType@var2648 =@expr1073748436 tok2@var2650 ;
1073: } else { if (@expr1073748437 !@expr1073748438 isNothrow@var2652 ) {
1074: if (@expr1073748439 Token ::@expr6572 Match (@expr1073748441 tok2@var2650 , "%name% (" ) ) {
1075: functionCalled@var2649 =@expr1073748442 tok2@var2650 ; }
1076: else { if (@expr1073748443 tok2@var2650 .@expr1073748444 isName (@expr1073748445 ) &&@expr1073748446 Token ::@expr1073748447 simpleMatch (@expr1073748448 tok2@var2650 .@expr6608 next (@expr6609 ) .@expr6610 link (@expr6611 ) , "> (" ) ) {
1077: functionCalled@var2649 =@expr1073748453 tok2@var2650 ; } }
1078: } }
1079: }
1080:
1081: if (@expr1073748454 pointerType@var2648 &&@expr1073748455 functionCalled@var2649 ) {
1082: std ::@expr1073748456 string functionName@var2653 ; functionName@var2653 =@expr1073748457 functionCalled@var2649 .@expr1073748458 str (@expr1073748459 ) ;
1083: if (@expr1073748460 functionCalled@var2649 .@expr1073748461 strAt (@expr1073748462 1 ) ==@expr1073748463 "<" ) {
1084: functionName@var2653 +=@expr1073748464 '<' ;
1085: for (@expr1073748465 const Token *@expr6563 tok2@var2654 =@expr1073748467 functionCalled@var2649 .@expr1073748468 tokAt (@expr1073748469 2 ) ; tok2@var2654 !=@expr1073748470 functionCalled@var2649 .@expr1073748471 next (@expr1073748472 ) .@expr1073748473 link (@expr1073748474 ) ; tok2@var2654 =@expr1073748475 tok2@var2654 .@expr1073748476 next (@expr1073748477 ) ) {
1086: functionName@var2653 +=@expr1073748478 tok2@var2654 .@expr1073748479 str (@expr1073748480 ) ; }
1087: functionName@var2653 +=@expr1073748481 '>' ;
1088: }
1089: std ::@expr1073748482 string objectTypeName@var2655 ;
1090: for (@expr1073748483 const Token *@expr6563 tok2@var2656 =@expr1073748485 pointerType@var2648 .@expr1073748486 tokAt (@expr1073748487 2 ) ; tok2@var2656 !=@expr1073748488 pointerType@var2648 .@expr1073748489 next (@expr1073748490 ) .@expr1073748491 link (@expr1073748492 ) ; tok2@var2656 =@expr1073748493 tok2@var2656 .@expr1073748494 next (@expr1073748495 ) ) {
1091: objectTypeName@var2655 +=@expr1073748496 tok2@var2656 .@expr1073748497 str (@expr1073748498 ) ; }
1092:
1093: unsafeArgAllocError (@expr1073748499 tok@var2644 , functionName@var2653 , pointerType@var2648 .@expr1073748500 str (@expr1073748501 ) , objectTypeName@var2655 ) ;
1094: }
1095: }
1096: }
1097: }
1098:
1099: void CheckMemoryLeakNoVar :: functionCallLeak ( const Token * loc@var2657 , const std :: string & alloc@var2658 , const std :: string & functionCall@var2659 )
1100: {
1101: reportError (@expr1073748502 loc@var2657 , Severity ::@expr1073748503 error , "leakNoVarFunctionCall" , "Allocation with " +@expr1073748504 alloc@var2658 +@expr1073748505 ", " +@expr1073748506 functionCall@var2659 +@expr1073748507 " doesn't release it." , CWE772@var2443 , Certainty ::@expr1073748508 normal ) ;
1102: }
1103:
1104: void CheckMemoryLeakNoVar :: returnValueNotUsedError ( const Token * tok@var2660 , const std :: string & alloc@var2661 )
1105: {
1106: reportError (@expr1073748509 tok@var2660 , Severity ::@expr1073748510 error , "leakReturnValNotUsed" , "$symbol:" +@expr1073748511 alloc@var2661 +@expr1073748512 "\nReturn value of allocation function '$symbol' is not stored." , CWE771@var2442 , Certainty ::@expr1073748513 normal ) ;
1107: }
1108:
1109: void CheckMemoryLeakNoVar :: unsafeArgAllocError ( const Token * tok@var2662 , const std :: string & funcName@var2663 , const std :: string & ptrType@var2664 , const std :: string & objType@var2665 )
1110: {
1111: const std ::@expr1073748514 string factoryFunc@var2666 =@expr1073748515 ptrType@var2664 ==@expr1073748516 "shared_ptr" ?@expr1073748517 "make_shared" :@expr1073748518 "make_unique" ;
1112: reportError (@expr1073748519 tok@var2662 , Severity ::@expr1073748520 warning , "leakUnsafeArgAlloc" ,
1113: "$symbol:" +@expr1073748521 funcName@var2663 +@expr1073748522 "\nUnsafe allocation. If $symbol() throws, memory could be leaked. Use "
1114: +@expr1073748523 factoryFunc@var2666 +@expr1073748524 "<" +@expr1073748525 objType@var2665 +@expr1073748526 ">() instead." ,
1115: CWE401@var2441 ,
1116: Certainty ::@expr1073748527 inconclusive ) ;
1117: }

##file cppcheck-2.8/lib/settings.h

1:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2667 ; mFlags@var2667 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2667 ;
54: }
55: void clear ( ) {
56: mFlags@var2667 =@expr1073748528 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2667 =@expr1073748529 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2668 ) {
62: if (@expr1073748530 enabled@var2668 ) {
63: fill (@expr1073748531 ) ; }
64: else {
65: clear (@expr1073748532 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2669 ) const {
68: return (@expr6709 mFlags@var2667 &@expr1073748534 (@expr6709 1U <<@expr1073748536 (@expr1073748537 uint32_t ) flag@var2669 ) ) !=@expr1073748538 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2670 ) {
71: mFlags@var2667 |=@expr1073748539 (@expr1073748540 1U <<@expr1073748541 (@expr1073748542 uint32_t ) flag@var2670 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2671 ) {
74: mFlags@var2667 &=@expr1073748543 ~@expr1073748544 (@expr1073748545 1U <<@expr1073748546 (@expr1073748547 uint32_t ) flag@var2671 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2672 , bool enabled@var2673 ) {
77: if (@expr1073748548 enabled@var2673 ) {
78: enable (@expr1073748549 flag@var2672 ) ; }
79: else {
80: disable (@expr1073748550 flag@var2672 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2674 ; mFlags@var2674 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2674 ;
54: }
55: void clear ( ) {
56: mFlags@var2674 =@expr1073748551 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2674 =@expr1073748552 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2675 ) {
62: if (@expr1073748553 enabled@var2675 ) {
63: fill (@expr1073748554 ) ; }
64: else {
65: clear (@expr1073748555 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2676 ) const {
68: return (@expr6732 mFlags@var2674 &@expr1073748557 (@expr6732 1U <<@expr1073748559 (@expr1073748560 uint32_t ) flag@var2676 ) ) !=@expr1073748561 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2677 ) {
71: mFlags@var2674 |=@expr1073748562 (@expr1073748563 1U <<@expr1073748564 (@expr1073748565 uint32_t ) flag@var2677 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2678 ) {
74: mFlags@var2674 &=@expr1073748566 ~@expr1073748567 (@expr1073748568 1U <<@expr1073748569 (@expr1073748570 uint32_t ) flag@var2678 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2679 , bool enabled@var2680 ) {
77: if (@expr1073748571 enabled@var2680 ) {
78: enable (@expr1073748572 flag@var2679 ) ; }
79: else {
80: disable (@expr1073748573 flag@var2679 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2681 ; mFlags@var2681 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2681 ;
54: }
55: void clear ( ) {
56: mFlags@var2681 =@expr1073748574 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2681 =@expr1073748575 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2682 ) {
62: if (@expr1073748576 enabled@var2682 ) {
63: fill (@expr1073748577 ) ; }
64: else {
65: clear (@expr1073748578 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2683 ) const {
68: return (@expr6755 mFlags@var2681 &@expr1073748580 (@expr6755 1U <<@expr1073748582 (@expr1073748583 uint32_t ) flag@var2683 ) ) !=@expr1073748584 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2684 ) {
71: mFlags@var2681 |=@expr1073748585 (@expr1073748586 1U <<@expr1073748587 (@expr1073748588 uint32_t ) flag@var2684 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2685 ) {
74: mFlags@var2681 &=@expr1073748589 ~@expr1073748590 (@expr1073748591 1U <<@expr1073748592 (@expr1073748593 uint32_t ) flag@var2685 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2686 , bool enabled@var2687 ) {
77: if (@expr1073748594 enabled@var2687 ) {
78: enable (@expr1073748595 flag@var2686 ) ; }
79: else {
80: disable (@expr1073748596 flag@var2686 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 65
  , inconclusive lifetime[SubObject]=(errorLogger)
  ( inconclusive lifetime[SubObject]=(errorLogger)
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible {2@13,1@14,3@167}
  id possible {"leakUnsafeArgAlloc"@13,"leakReturnValNotUsed"@14,"leakNoVarFunctionCall"@15,"publicAllocationError"@155,"unsafeClassCanLeak"@167}
  certainty possible {1@13,0@14}
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@119,128@120,64@121,32@122,16@123,8@124,4@125,2@126,1@127}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@128,128@129,64@130,32@131,16@132,8@133,4@134,2@135,1@136}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@128,4294967167@129,4294967231@130,4294967263@131,4294967279@132,4294967287@133,4294967291@134,4294967293@135,4294967294@136}
  flag {!<=-1,256@128,128@129,64@130,32@131,16@132,8@133,4@134,2@135,1@136}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@5237,34@5493}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@20,34@21}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@20,""@21,""@22,"U"@23,"U"@24,"u"@25,"u"@26,"u8"@27,"u8"@28}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@114,34@115}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@111,34@113}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
  index possible -1@60
Line 246
  ( always !0
  this always !0
  index possible 1@232
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible {"> ("@28,"if ("@120,") {"@126,"; if ("@233,"if ("@243,"fcloseall ( )"@54,", 0 )"@56,"popen ("@103}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@9,4@10,0@11}
  t possible {10@9,4@10,0@11}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@9,4@10,0@11}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@9,0@11}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@9,0@11}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@9}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@9}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@9}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@9}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  s possible {"*"@219,"*"@222,"*"@69}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@17}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@19,17179869184@30,8589934592@32,34359738368@34,4294967296@36,2147483648@38,1073741824@40,536870912@42,268435456@44}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@106,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@107}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@18,17179869184@29,8589934592@31,34359738368@33,4294967296@35,2147483648@37,1073741824@39,536870912@41,268435456@43}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@18,17179869184@29,8589934592@31,34359738368@33,4294967296@35,2147483648@37,1073741824@39,536870912@41,268435456@43}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 91
  , inconclusive lifetime[SubObject]=(e)
  ( inconclusive lifetime[SubObject]=(e)
Line 94
  No always 0
  Malloc always 1
  New always 2
  NewArray always 3
  File always 4
  Fd always 5
  Pipe always 6
  OtherMem always 7
  OtherRes always 8
  Many always 9
Line 109
  , always 0
  = always 0
  nullptr always 0
Line 120
  ( always {!<=-1,!>=2}
Line 147
  , always 0
  = always 0
  nullptr always 0
Line 171
  ( always "Memory leaks (function variables)"
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 175
  ( possible lifetime[SubObject]=(tokenizer)
  ( always "Memory leaks (function variables)"
Line 183
  ( always {!<=-1,!>=2}
Line 193
  nullptr always 0
Line 195
  nullptr always 0
  "varname" always "varname"
Line 196
  nullptr always 0
  "varname" always "varname"
Line 198
  nullptr always 0
  "varname" always "varname"
Line 199
  nullptr always 0
  "varname" always "varname"
Line 200
  nullptr always 0
  "sz" always "sz"
Line 202
  callstack always size=0
  "varname" always "varname"
Line 203
  nullptr always 0
  "realloc" always "realloc"
  "varname" always "varname"
Line 211
  "Memory leaks (function variables)" always "Memory leaks (function variables)"
Line 219
  "Is there any allocated memory when a function goes out of scope\n" always "Is there any allocated memory when a function goes out of scope\n"
Line 231
  ( always "Memory leaks (class variables)"
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 234
  ( possible lifetime[SubObject]=(tokenizer)
  ( always "Memory leaks (class variables)"
Line 237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 256
  nullptr always 0
Line 257
  nullptr always 0
  "varname" always "varname"
Line 258
  nullptr always 0
  "class" always "class"
  "class::varname" always "class::varname"
Line 262
  "Memory leaks (class variables)" always "Memory leaks (class variables)"
Line 266
  "If the constructor allocate memory then the destructor must deallocate it.\n" always "If the constructor allocate memory then the destructor must deallocate it.\n"
Line 276
  ( always "Memory leaks (struct members)"
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 279
  ( possible lifetime[SubObject]=(tokenizer)
  ( always "Memory leaks (struct members)"
Line 291
  ( always {!<=-1,!>=2}
Line 298
  "Memory leaks (struct members)" always "Memory leaks (struct members)"
Line 302
  "Don't forget to deallocate struct members\n" always "Don't forget to deallocate struct members\n"
Line 312
  ( always "Memory leaks (address not taken)"
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 315
  ( possible lifetime[SubObject]=(tokenizer)
  ( always "Memory leaks (address not taken)"
Line 349
  nullptr always 0
Line 351
  nullptr always 0
  "funcName" always "funcName"
  "funcName" always "funcName"
Line 352
  nullptr always 0
  "funcName" always "funcName"
Line 353
  nullptr always 0
  "funcName" always "funcName"
  "shared_ptr" always "shared_ptr"
  "int" always "int"
Line 357
  "Memory leaks (address not taken)" always "Memory leaks (address not taken)"
Line 361
  "Not taking the address to allocated memory\n" always "Not taking the address to allocated memory\n"
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 123
  name possible {"free"@61,"fclose"@62,"free"@71,"fclose"@72,"free"@104,"fclose"@105}
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
  name possible {"free"@15834,"fclose"@16090,"free"@18394,"fclose"@18650}
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@181,4096@184,16384@187,2048@188,1024@189,65536@190,512@191,256@192,128@193}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@146,4194304@148,8388608@149,2097152@151,1048576@152,524288@153,262144@154,131072@155,65536@156}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@124,2097152@125,1048576@126,524288@127,262144@128,131072@129,65536@130,32768@131,16384@132}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@124,4292870143@125,4293918719@126,4294443007@127,4294705151@128,4294836223@129,4294901759@130,4294934527@131,4294950911@132}
  flag {!<=-1,8388608@124,2097152@125,1048576@126,524288@127,262144@128,131072@129,65536@130,32768@131,16384@132}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1396
  varId possible symbolic=(arg->varId())@58353
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 45
  398U always 398
Line 46
  401U always 401
Line 47
  771U always 771
Line 48
  772U always 772
Line 57
  "_open" always "_open"
  "_wopen" always "_wopen"
  "access" always "access"
  "adjtime" always "adjtime"
  "asctime_r" always "asctime_r"
  "asprintf" always "asprintf"
  "chdir" always "chdir"
  "chmod" always "chmod"
  "chown" always "chown"
Line 58
  "creat" always "creat"
  "ctime_r" always "ctime_r"
  "execl" always "execl"
  "execle" always "execle"
  "execlp" always "execlp"
  "execv" always "execv"
  "execve" always "execve"
  "fchmod" always "fchmod"
  "fcntl" always "fcntl"
Line 59
  "fdatasync" always "fdatasync"
  "fclose" always "fclose"
  "flock" always "flock"
  "fmemopen" always "fmemopen"
  "fnmatch" always "fnmatch"
  "fopen" always "fopen"
  "fopencookie" always "fopencookie"
  "for" always "for"
  "free" always "free"
Line 60
  "freopen" always "freopen"
  "fseeko" always "fseeko"
  "fstat" always "fstat"
  "fsync" always "fsync"
  "ftello" always "ftello"
  "ftruncate" always "ftruncate"
  "getgrnam" always "getgrnam"
  "gethostbyaddr" always "gethostbyaddr"
  "gethostbyname" always "gethostbyname"
Line 61
  "getnetbyname" always "getnetbyname"
  "getopt" always "getopt"
  "getopt_long" always "getopt_long"
  "getprotobyname" always "getprotobyname"
  "getpwnam" always "getpwnam"
  "getservbyname" always "getservbyname"
  "getservbyport" always "getservbyport"
Line 62
  "glob" always "glob"
  "gmtime" always "gmtime"
  "gmtime_r" always "gmtime_r"
  "if" always "if"
  "index" always "index"
  "inet_addr" always "inet_addr"
  "inet_aton" always "inet_aton"
  "inet_network" always "inet_network"
  "initgroups" always "initgroups"
Line 63
  "ioctl" always "ioctl"
  "link" always "link"
  "localtime_r" always "localtime_r"
  "lockf" always "lockf"
  "lseek" always "lseek"
  "lstat" always "lstat"
  "mkdir" always "mkdir"
  "mkfifo" always "mkfifo"
  "mknod" always "mknod"
  "mkstemp" always "mkstemp"
Line 64
  "obstack_printf" always "obstack_printf"
  "obstack_vprintf" always "obstack_vprintf"
  "open" always "open"
  "opendir" always "opendir"
  "parse_printf_format" always "parse_printf_format"
  "pathconf" always "pathconf"
Line 65
  "perror" always "perror"
  "popen" always "popen"
  "posix_fadvise" always "posix_fadvise"
  "posix_fallocate" always "posix_fallocate"
  "pread" always "pread"
  "psignal" always "psignal"
  "pwrite" always "pwrite"
  "read" always "read"
  "readahead" always "readahead"
Line 66
  "readdir" always "readdir"
  "readdir_r" always "readdir_r"
  "readlink" always "readlink"
  "readv" always "readv"
  "realloc" always "realloc"
  "regcomp" always "regcomp"
  "return" always "return"
  "rewinddir" always "rewinddir"
  "rindex" always "rindex"
Line 67
  "rmdir" always "rmdir"
  "scandir" always "scandir"
  "seekdir" always "seekdir"
  "setbuffer" always "setbuffer"
  "sethostname" always "sethostname"
  "setlinebuf" always "setlinebuf"
  "sizeof" always "sizeof"
  "strdup" always "strdup"
Line 68
  "stat" always "stat"
  "stpcpy" always "stpcpy"
  "strcasecmp" always "strcasecmp"
  "stricmp" always "stricmp"
  "strncasecmp" always "strncasecmp"
  "switch" always "switch"
Line 69
  "symlink" always "symlink"
  "sync_file_range" always "sync_file_range"
  "telldir" always "telldir"
  "tempnam" always "tempnam"
  "time" always "time"
  "typeid" always "typeid"
  "unlink" always "unlink"
Line 70
  "utime" always "utime"
  "utimes" always "utimes"
  "vasprintf" always "vasprintf"
  "while" always "while"
  "wordexp" always "wordexp"
  "write" always "write"
  "writev" always "writev"
Line 82
  tok2 possible {symbolic=(tok->next()->astOperand1())@46,symbolic=(tok->astParent()->astParent()->astOperand2())@183}
  && always {!<=-1,!>=2}
  tok2 always !0
  == always {!<=-1,!>=2}
  "(" always "("
Line 83
  tok2 always !0
Line 84
  = possible 0
  ? possible 0
  tok2 always !0
  : always 0
  nullptr always 0
Line 86
  ! {!<=-1,!>=2,1}
  tok2 possible 0
Line 87
  No always 0
Line 88
  tok2 always !0
  == always {!<=-1,!>=2}
  "::" always "::"
Line 89
  tok2 always !0
Line 90
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 91
  No always 0
Line 93
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% ::|. %type%" always "%name% ::|. %type%"
Line 96
  != always {!<=-1,!>=2}
  No always 0
Line 97
  reallocType always !0
Line 99
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "new" always "new"
Line 100
  1 always 1
  == always {!<=-1,!>=2}
  "(" always "("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "( std| ::| nothrow )" always "( std| ::| nothrow )"
Line 101
  No always 0
Line 102
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  "[" always "["
  || always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
  ( always !0
  ( always !0
  == always {!<=-1,!>=2}
  "[" always "["
Line 103
  NewArray always 3
Line 105
  ( always {!<=-1,!>=2}
  typeTok possible symbolic=(tok2->next())
  "%name% :: %name%" always "%name% :: %name%"
Line 106
  2 always 2
Line 107
  = always 0
  nullptr always 0
Line 108
  typeTok possible symbolic=(tok2->next())
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 109
  ( always !0
Line 110
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 111
  ( always !0
Line 113
  classScope possible {symbolic=(typeTok->type()->classScope),symbolic=(typeTok->function()->nestedIn)}
  && always {!<=-1,!>=2}
  classScope always !0
  > always {!<=-1,!>=2}
  0 always 0
Line 114
  No always 0
Line 115
  New always 2
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
  "open|openat|creat|mkstemp|mkostemp|socket (" always "open|openat|creat|mkstemp|mkostemp|socket ("
Line 123
  == always {!<=-1,!>=2}
  "open" always "open"
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  2 always 2
  && always {!<=-1,!>=2}
  num always !2
  != always {!<=-1,!>=2}
  3 always 3
Line 124
  No always 0
Line 128
  No always 0
Line 129
  Fd always 5
Line 132
  ( always {!<=-1,!>=2}
  "popen (" always "popen ("
Line 133
  Pipe always 6
Line 137
  -1 always -1
Line 138
  > always {!<=-1,!>=2}
  0 always 0
Line 139
  alloctype {>=1,!<=0}
  == always {!<=-1,!>=2}
  "free" always "free"
Line 140
  Malloc always 1
Line 141
  alloctype always !<=0
  == always {!<=-1,!>=2}
  "fclose" always "fclose"
Line 142
  File always 4
Line 143
  ( always {!<=-1,!>=2}
  OtherMem always 7
  : always 8
  OtherRes always 8
Line 147
  ( always {!<=-1,!>=2}
  "%name% ::|. %type%" always "%name% ::|. %type%"
Line 148
  2 always 2
Line 152
  func {symbolic=(tok2->function()),0}
  == {!<=-1,!>=2,1}
  nullptr always 0
Line 153
  No always 0
Line 156
  callstack possible 0
  && always {!<=-1,!>=2}
  callstack always !0
  ( always start=0
  callstack always !0
  ( always end=0
  func {symbolic=(tok2->function()),!0}
  != always {!<=-1,!>=2}
  callstack always !0
  ( always end=0
Line 157
  No always 0
Line 160
  ! {!<=-1,!>=2,1}
  callstack possible 0
Line 161
  = {&,lifetime[Address]=(cs),!0}
  & {&,lifetime[Address]=(cs),!0}
Line 163
  callstack possible {lifetime[Address]=(cs),symbolic=(&cs),&}
Line 164
  callstack {lifetime[Address]=(cs),symbolic=(&cs),&,!size=0}
Line 172
  && always {!<=-1,!>=2}
  tok2 always !0
  == always {!<=-1,!>=2}
  "(" always "("
Line 173
  tok2 always !0
Line 174
  = possible 0
  ? possible 0
  tok2 always !0
  : always 0
  nullptr always 0
Line 176
  ! {!<=-1,!>=2,1}
  tok2 possible 0
Line 177
  No always 0
Line 179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok2 always !0
  "%name% (" always "%name% ("
Line 180
  No always 0
Line 182
  tok2 always !0
Line 183
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  f always !0
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  f always !0
  . {>=1,!<=0}
  <= always {!<=-1,!>=2}
  tok2 always !0
Line 184
  No always 0
Line 186
  ( always !<=-1
  < always {!<=-1,!>=2}
  f always !0
  . {>=1,!<=0}
Line 187
  No always 0
Line 188
  f always !0
  . {!>=symbolic=(args.size()+1),<=symbolic=(args.size()),!<=0}
  - always !<=-1
  1 always 1
Line 189
  arg possible symbolic=(args.at(f->reallocArg-1))
  && always {!<=-1,!>=2}
  arg {symbolic=(args.at(f->reallocArg-1)),!0}
  ( always {!<=-1,!>=2}
Line 190
  arg always !0
Line 191
  arg possible {symbolic=(args.at(f->reallocArg-1)),0}
  && always {!<=-1,!>=2}
  arg always !0
  ( always {!<=-1,!>=2}
  "*" always "*"
Line 192
  arg always !0
Line 193
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%varid% [,)]" always "%varid% [,)]"
  varid {>=1,!<=0}
Line 194
  No always 0
Line 196
  -1 always -1
Line 197
  > always {!<=-1,!>=2}
  0 always 0
Line 198
  realloctype {>=1,!<=0}
  == always {!<=-1,!>=2}
  "free" always "free"
Line 199
  Malloc always 1
Line 200
  realloctype always !<=0
  == always {!<=-1,!>=2}
  "fclose" always "fclose"
Line 201
  File always 4
Line 202
  ( always {!<=-1,!>=2}
  OtherMem always 7
  : always 8
  OtherRes always 8
Line 204
  No always 0
Line 210
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "delete" always "delete"
  && always {!<=-1,!>=2}
Line 211
  = always !0
  ( always !0
Line 212
  ( always {!<=-1,!>=2}
  vartok {symbolic=(tok->astOperand1()),!0}
  ".|::" always ".|::"
Line 213
  vartok {symbolic=(tok->astOperand1()),!0}
Line 215
  vartok possible symbolic=(tok->astOperand1())
  && always {!<=-1,!>=2}
  vartok always !0
  == always {!<=-1,!>=2}
Line 216
  1 always 1
  == always {!<=-1,!>=2}
  "[" always "["
Line 217
  NewArray always 3
Line 218
  New always 2
Line 222
  ( possible size=6
  == {!<=-1,!>=2,0}
  "::" always "::"
Line 225
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 226
  ( always {!<=-1,!>=2}
  "fcloseall ( )" always "fcloseall ( )"
Line 227
  File always 4
Line 229
  = always 1
  1 always 1
Line 230
  2 always 2
Line 232
  ( always {!<=-1,!>=2}
  vartok possible symbolic=(tok2)
  "%name% .|::" always "%name% .|::"
Line 233
  2 always 2
Line 235
  ( always {!<=-1,!>=2}
  vartok possible symbolic=(tok2)
  "%varid% )|,|-" always "%varid% )|,|-"
Line 236
  ( possible {size=5,size=6}
  == {!<=-1,!>=2,0}
  "realloc" always "realloc"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ", 0 )" always ", 0 )"
Line 237
  Malloc always 1
Line 239
  ( always {!<=-1,!>=2}
Line 240
  ( possible size=6
  == {!<=-1,!>=2,0}
  "close" always "close"
Line 241
  Fd always 5
Line 242
  == always {!<=-1,!>=2}
  "pclose" always "pclose"
Line 243
  Pipe always 6
Line 248
  > always {!<=-1,!>=2}
  0 always 0
Line 249
  dealloctype {>=1,!<=0}
  == always {!<=-1,!>=2}
  "free" always "free"
Line 250
  Malloc always 1
Line 251
  dealloctype always !<=0
  == always {!<=-1,!>=2}
  "fclose" always "fclose"
Line 252
  File always 4
Line 253
  ( always {!<=-1,!>=2}
  OtherMem always 7
  : always 8
  OtherRes always 8
Line 260
  No always 0
Line 263
  ( always {!<=-1,!>=2}
Line 265
  tok possible symbolic=(tok->next()->astOperand1())@49
  0 always 0
  == always {!<=-1,!>=2}
  File always 4
Line 267
  && always {!<=-1,!>=2}
  f always !0
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  f always !0
  . {>=1,!<=0}
  <= always {!<=-1,!>=2}
Line 268
  f always !0
  . {>=1,!<=0}
  - {>=0,!<=-1}
  1 always 1
Line 269
  ( always {!<=-1,!>=2}
  "stdin|stdout|stderr" always "stdin|stdout|stderr"
Line 270
  return always {!<=-1,!>=2}
  true always 1
Line 273
  return always {!<=-1,!>=2}
  false always 0
Line 283
  alloctype possible {6,5,8}
  == {!<=-1,!>=2,0}
  :: always 4
  File always 4
  || always {!<=-1,!>=2}
Line 284
  alloctype {5,8,!4}
  == {!<=-1,!>=2,0}
  :: always 6
  Pipe always 6
  || always {!<=-1,!>=2}
Line 285
  alloctype {8,!4,!6}
  == {!<=-1,!>=2,0}
  :: always 5
  Fd always 5
  || always {!<=-1,!>=2}
Line 286
  alloctype always {!6,!5}
  == always {!<=-1,!>=2}
  :: always 8
  OtherRes always 8
Line 298
  callstack {lifetime[Object]=(tok),size=0}
  tok always !0
Line 300
  callstack possible {lifetime[Object]=(tok),size=0}
  severity possible 1@30
  id possible {"mismatchSize"@30,"deallocuse"@32,"deallocDealloc"@34,"resourceLeak"@36,"memleakOnRealloc"@38,"memleak"@40}
Line 305
  ? possible 0
  & {lifetime[Address]=(mTokenizer_->list),!0}
  mTokenizer_ always !0
  nullptr always 0
  severity possible 1@28
  id possible {"mismatchAllocDealloc"@28,"mismatchSize"@7722}
  :: always 0
  normal always 0
Line 307
  mErrorLogger_ always !0
Line 314
  tok possible 0@233
  :: always 1
  error always 1
  "memleak" always "memleak"
  "$symbol:" always "$symbol:"
  varname possible "varname"@233
  "\nMemory leak: $symbol" always "\nMemory leak: $symbol"
  401U always 401
Line 319
  tok possible 0@239
  :: always 1
  error always 1
  "memleakOnRealloc" always "memleakOnRealloc"
  "$symbol:" always "$symbol:"
  varname possible "varname"@239
  "\nCommon " always "\nCommon "
  reallocfunction possible "realloc"@239
  " mistake: \'$symbol\' nulled but not freed upon failure" always " mistake: \'$symbol\' nulled but not freed upon failure"
  401U always 401
Line 324
  "Resource leak" always "Resource leak"
Line 325
  ! {!<=-1,!>=2,0}
  varname possible {"varname"@234,size=0}
  ( {!<=-1,!>=2,1}
Line 326
  "$symbol:" always "$symbol:"
  varname always !size=0
  '\n' always 10
  ": $symbol" always ": $symbol"
Line 327
  tok possible 0@234
  :: always 1
  error always 1
  "resourceLeak" always "resourceLeak"
  775U always 775
Line 332
  tok possible 0@235
  :: always 1
  error always 1
  "deallocDealloc" always "deallocDealloc"
  "$symbol:" always "$symbol:"
  varname possible "varname"@235
  "\nDeallocating a deallocated pointer: $symbol" always "\nDeallocating a deallocated pointer: $symbol"
  415U always 415
Line 337
  tok possible 0@236
  :: always 1
  error always 1
  "deallocuse" always "deallocuse"
  "$symbol:" always "$symbol:"
  varname possible "varname"@236
  "\nDereferencing '$symbol' after it is deallocated / released" always "\nDereferencing '$symbol' after it is deallocated / released"
  416U always 416
Line 342
  tok possible 0@237
  :: always 1
  error always 1
  "mismatchSize" always "mismatchSize"
  "The allocated size " always "The allocated size "
  sz possible "sz"@237
  " is not a multiple of the underlying type's size." always " is not a multiple of the underlying type's size."
  131U always 131
Line 347
  callstack possible {size=1@184,size=0@238}
  :: always 1
  error always 1
  "mismatchAllocDealloc" always "mismatchAllocDealloc"
  "$symbol:" always "$symbol:"
  varname possible "varname"@238
  "\nMismatching allocation and deallocation: $symbol" always "\nMismatching allocation and deallocation: $symbol"
  762U always 762
Line 352
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  func always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  func always !0
Line 353
  No always 0
Line 356
  = always 0
  0 always 0
Line 357
  func always !0
  . always !0
  != always {!<=-1,!>=2}
  func always !0
  . always !0
Line 359
  = always !0
  endOfLambda always !0
Line 360
  tok2 possible symbolic=(endOfLambda)
  == always {!<=-1,!>=2}
  "{" always "{"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 362
  == always {!<=-1,!>=2}
  "return" always "return"
Line 363
  0 always 0
Line 364
  != always {!<=-1,!>=2}
  No always 0
Line 365
  allocType always !0
Line 367
  != always {!<=-1,!>=2}
  func always !0
  . always !0
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 368
  No always 0
Line 369
  = always !0
  ( always !0
Line 370
  ( always {!<=-1,!>=2}
  tok {symbolic=(tok2->astOperand1()),!0}
  ".|::" always ".|::"
Line 371
  tok {symbolic=(tok2->astOperand1()),!0}
  tok {symbolic=(tok2->astOperand1()),!0}
  ( always !0
  : always 1
  tok {symbolic=(tok2->astOperand1()),!0}
Line 372
  tok possible symbolic=(tok2->astOperand1())
Line 373
  tok always !0
Line 379
  varid possible {symbolic=(tok->varId()),0}
  == {!<=-1,!>=2,1}
  0 always 0
Line 380
  No always 0
Line 385
  varid always !0
Line 386
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 387
  No always 0
Line 390
  = always 0
  No always 0
Line 391
  != always {!<=-1,!>=2}
Line 392
  ( always {!<=-1,!>=2}
  "%varid% =" always "%varid% ="
  varid always !0
Line 393
  2 always 2
  varid always !0
Line 395
  ( always {!<=-1,!>=2}
  "= %varid% ;" always "= %varid% ;"
  varid always !0
Line 396
  No always 0
Line 398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "[(,] %varid% [,)]" always "[(,] %varid% [,)]"
Line 399
  No always 0
Line 401
  ( always {!<=-1,!>=2}
  "[(,] & %varid% [.,)]" always "[(,] & %varid% [.,)]"
Line 402
  No always 0
Line 404
  ( always {!<=-1,!>=2}
  "[;{}] %varid% ." always "[;{}] %varid% ."
Line 405
  No always 0
Line 407
  == always {!<=-1,!>=2}
  No always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "return" always "return"
Line 408
  No always 0
Line 411
  allocType possible 0
Line 415
  ( always {!<=-1,!>=2}
Line 417
  ! always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  false always 0
Line 419
  ( always {!<=-1,!>=2}
  tok always !0
  "&&|;" always "&&|;"
Line 420
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
Line 421
  tok always !0
  == always {!<=-1,!>=2}
  "(" always "("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
  "UNLIKELY|LIKELY" always "UNLIKELY|LIKELY"
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !0
Line 423
  "==" always "=="
  "0" always "0"
Line 424
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  vartok always !0
  == always {!<=-1,!>=2}
Line 427
  ( always {!<=-1,!>=2}
Line 429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "if (" always "if ("
Line 430
  return always {!<=-1,!>=2}
  false always 0
Line 432
  condition always symbolic=(tok->next()->astOperand2())
  && always {!<=-1,!>=2}
  condition {symbolic=(tok->next()->astOperand2()),!0}
  == always {!<=-1,!>=2}
  "(" always "("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  condition {symbolic=(tok->next()->astOperand2()),!0}
  "UNLIKELY|LIKELY" always "UNLIKELY|LIKELY"
Line 433
  condition {symbolic=(tok->next()->astOperand2()),!0}
Line 434
  ! always {!<=-1,!>=2}
  condition possible symbolic=(tok->next()->astOperand2())
  || always {!<=-1,!>=2}
  condition always !0
  == always {!<=-1,!>=2}
  "&&" always "&&"
Line 435
  return always {!<=-1,!>=2}
  false always 0
Line 437
  condition always !0
Line 438
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  vartok always !0
  == always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 443
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(call_func_white_list)
  funcname possible symbolic=(tok->str())@73
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(call_func_white_list),end=0}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "delete" always "delete"
Line 454
  ( always {!<=-1,!>=2}
Line 456
  varid possible symbolic=(arg->varId())@227
Line 457
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 464
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 467
  != always {!<=-1,!>=2}
Line 468
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% =" always "%name% ="
Line 472
  parTok possible {symbolic=(tok->next()->astOperand2()),0}
  && always {!<=-1,!>=2}
  parTok {symbolic=(tok->next()->astOperand2()),!0}
  ( always {!<=-1,!>=2}
Line 473
  parTok always !0
Line 474
  ! {!<=-1,!>=2,1}
  parTok possible {symbolic=(tok->next()->astOperand2()),0}
Line 477
  parTok always !0
Line 478
  ! {!<=-1,!>=2,1}
  reallocTok {symbolic=(parTok->astOperand1()),0}
Line 480
  reallocTok {symbolic=(parTok->astOperand1()),!0}
Line 481
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  f always !0
  == always {!<=-1,!>=2}
  -1 always -1
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  reallocTok {symbolic=(parTok->astOperand1()),!0}
Line 484
  reallocTok always !0
Line 485
  ! always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 487
  f always !0
  1 always 1
Line 488
  && always {!<=-1,!>=2}
  arg always !0
  ( always {!<=-1,!>=2}
Line 489
  arg always !0
Line 491
  arg possible 0
  && always {!<=-1,!>=2}
  arg always !0
  ( always {!<=-1,!>=2}
  "*" always "*"
  && always {!<=-1,!>=2}
  tok2 possible symbolic=(tok)
  && always {!<=-1,!>=2}
  tok2 {symbolic=(tok),!0}
  && always {!<=-1,!>=2}
  tok2 {symbolic=(tok),!0}
  ( always !0
  ( always {!<=-1,!>=2}
  "*" always "*"
Line 492
  arg always !0
Line 493
  = always !0
  tok2 always !0
  ( always !0
Line 496
  ! {!<=-1,!>=2,1}
  arg possible 0
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 499
  ! always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  arg always !0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always symbolic=(arg->varId())
Line 503
  "%name% = %varid% ;" always "%name% = %varid% ;"
  ( always symbolic=(arg->varId())
  || always {!<=-1,!>=2}
Line 504
  "[{};] %varid% = *| %var% .| %var%| [;=]" always "[{};] %varid% = *| %var% .| %var%| [;=]"
  ( always symbolic=(arg->varId())
Line 508
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  0 always 0
Line 512
  1 always 1
Line 514
  ( always {!<=-1,!>=2}
  "; if (" always "; if ("
  && always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
  3 always 3
Line 516
  3 always 3
  1 always 1
Line 517
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tokEndBrace always !0
Line 539
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 545
  tok always symbolic=(var.typeStartToken())
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 546
  ( always {!<=-1,!>=2}
Line 564
  = always 0
  :: always 0
  No always 0
Line 565
  = always 0
  :: always 0
  No always 0
Line 567
  allocInConstructor always {!<=-1,!>=2}
  allocInConstructor always {!<=-1,!>=2}
  = always 0
  false always 0
Line 568
  deallocInDestructor always {!<=-1,!>=2}
  deallocInDestructor always {!<=-1,!>=2}
  = always 0
  false always 0
Line 572
  constructor always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 573
  destructor always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 574
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 575
  destructor {symbolic=(func.isDestructor()),!<=-1,!>=2}
Line 576
  deallocInDestructor always {!<=-1,!>=2}
  = always 1
  true always 1
Line 577
  = always 9
  :: always 9
  Many always 9
Line 581
  ! always {!<=-1,!>=2}
Line 583
  body always {!<=-1,!>=2}
  body always {!<=-1,!>=2}
  = always 0
  false always 0
Line 584
  . always !0
Line 585
  != always {!<=-1,!>=2}
  end possible symbolic=(func.functionScope->bodyEnd)
Line 586
  == always {!<=-1,!>=2}
Line 587
  body always {!<=-1,!>=2}
  = always 1
  true always 1
Line 589
  ! {!<=-1,!>=2,1}
  body {!<=-1,!>=2,0}
Line 590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok always !symbolic=(func.functionScope->bodyStart)
  ":|, %varid% (" always ":|, %varid% ("
Line 595
  ! {!<=-1,!>=2,1}
  body {!<=-1,!>=2,0}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%varid% =|[" always "%varid% =|["
Line 598
  -1 always -1
  == always {!<=-1,!>=2}
  "=" always "="
Line 603
  -1 always -1
  == always {!<=-1,!>=2}
  "::" always "::"
  && always {!<=-1,!>=2}
Line 604
  -2 always -2
  != always {!<=-1,!>=2}
Line 607
  body always {!<=-1,!>=2}
  ? possible {2,3}
  2 always 2
  : always 3
  3 always 3
Line 608
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  "[" always "["
  && always {!<=-1,!>=2}
  ( always !0
Line 609
  ( always !0
  ( always !0
Line 611
  allocTok possible symbolic=(tok->astParent()->astParent()->astOperand2())
  0 always 0
Line 612
  alloc possible symbolic=(memberAlloc)
  != always {!<=-1,!>=2}
  :: {0,symbolic=(memberDealloc)}
  No always 0
Line 613
  constructor always {!<=-1,!>=2}
Line 614
  allocInConstructor always {!<=-1,!>=2}
  = always 1
  true always 1
Line 616
  memberAlloc possible symbolic=(alloc)
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  alloc always !0
Line 617
  = always 9
  :: always 9
  Many always 9
Line 619
  alloc possible {symbolic=(memberDealloc),9}
  != {!<=-1,!>=2,0}
  :: always 9
  Many always 9
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  memberDealloc always !symbolic=(CheckMemoryLeak::No)
  != always {!<=-1,!>=2}
  :: always 9
  Many always 9
  && always {!<=-1,!>=2}
  memberDealloc always {!symbolic=(CheckMemoryLeak::No),!9}
  != always {!<=-1,!>=2}
Line 621
  callstack always size=0
Line 622
  callstack always size=1
  "::" always "::"
Line 625
  = possible {symbolic=(memberDealloc),9}
  alloc possible {symbolic=(memberDealloc),9}
Line 629
  ! {!<=-1,!>=2,1}
  body {!<=-1,!>=2,0}
Line 636
  destructor {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 637
  = always 9
  :: always 9
  Many always 9
Line 638
  dealloc possible {symbolic=(memberDealloc),9}
  != always {!<=-1,!>=2}
  :: possible {symbolic=(memberDealloc),symbolic=(memberAlloc)}
Line 639
  destructor always {!<=-1,!>=2}
Line 640
  deallocInDestructor always {!<=-1,!>=2}
  = always 1
  true always 1
Line 643
  memberDealloc possible symbolic=(dealloc)
  != always {!<=-1,!>=2}
  :: possible symbolic=(memberAlloc)
  && always {!<=-1,!>=2}
  memberDealloc always !symbolic=(CheckMemoryLeak::No)
  != always {!<=-1,!>=2}
Line 644
  = always 9
  :: always 9
  Many always 9
Line 646
  dealloc possible {symbolic=(memberAlloc),9}
  != {!<=-1,!>=2,0}
  :: always 9
  Many always 9
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  memberAlloc always !symbolic=(CheckMemoryLeak::No)
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  memberAlloc always !symbolic=(CheckMemoryLeak::No)
  != always {!<=-1,!>=2}
Line 648
  callstack always size=0
Line 649
  callstack always size=1
  "::" always "::"
Line 652
  = possible {symbolic=(memberAlloc),9}
  dealloc possible {symbolic=(memberAlloc),9}
Line 656
  ( always {!<=-1,!>=2}
  "[{};] %name% (" always "[{};] %name% ("
Line 657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 665
  allocInConstructor always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  deallocInDestructor always {!<=-1,!>=2}
Line 666
  "::" always "::"
Line 667
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always !symbolic=(memberAlloc)
Line 668
  "::" always "::"
Line 674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 677
  tok possible 0@230
  :: always 3
  style always 3
  "unsafeClassCanLeak" always "unsafeClassCanLeak"
Line 678
  "$symbol:" always "$symbol:"
  classname possible "class"@230
  "\n$symbol:" always "\n$symbol:"
Line 679
  varname possible "class::varname"@230
  "\nClass '" always "\nClass '"
Line 680
  classname possible "class"@230
  "' is unsafe, '" always "' is unsafe, '"
  varname possible "class::varname"@230
  "' can leak by wrong usage.\nThe class '" always "' can leak by wrong usage.\nThe class '"
Line 681
  classname possible "class"@230
  "' is unsafe, wrong usage can cause memory/resource leaks for '" always "' is unsafe, wrong usage can cause memory/resource leaks for '"
  varname possible "class::varname"@230
  "'. This can for instance be fixed by adding proper cleanup in the destructor." always "'. This can for instance be fixed by adding proper cleanup in the destructor."
  :: always 0
  normal always 0
Line 690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 698
  . possible 3
  == {!<=-1,!>=2,0}
  :: always 5
  eFunction always 5
  || always {!<=-1,!>=2}
  . always !5
  == always {!<=-1,!>=2}
  :: always 3
  eOperatorEqual always 3
  && always {!<=-1,!>=2}
Line 699
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 701
  ( always {!<=-1,!>=2}
  tok2 always symbolic=(func.functionScope->bodyStart->next())
  "%varid% =" always "%varid% ="
  varid always symbolic=(classtok->varId())
Line 702
  2 always 2
  varid always symbolic=(classtok->varId())
Line 703
  != always {!<=-1,!>=2}
Line 705
  ( always {!<=-1,!>=2}
  "%type% :: %varid% =" always "%type% :: %varid% ="
  varid always symbolic=(classtok->varId())
  && always {!<=-1,!>=2}
Line 706
  == always {!<=-1,!>=2}
Line 707
  4 always 4
  varid always symbolic=(classtok->varId())
Line 708
  != always {!<=-1,!>=2}
Line 709
  2 always 2
Line 717
  tok possible 0@229
  :: always 2
  warning always 2
  "publicAllocationError" always "publicAllocationError"
  "$symbol:" always "$symbol:"
  varname possible "varname"@229
  "\nPossible leak in public function. The pointer '$symbol' is not deallocated before it is allocated." always "\nPossible leak in public function. The pointer '$symbol' is not deallocated before it is allocated."
  :: always 0
  normal always 0
Line 723
  . always {!<=-1,!>=2}
  clang always {!<=-1,!>=2}
Line 727
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 728
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 730
  var always !0
  ( always {!<=-1,!>=2}
Line 732
  var always !0
  ( always {!<=-1,!>=2}
Line 738
  ( always {!<=-1,!>=2}
Line 741
  alloc always {!<=-1,!>=2}
  alloc always {!<=-1,!>=2}
  = always 0
  false always 0
Line 742
  && always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
Line 743
  ( always {!<=-1,!>=2}
  "= %varid% [;=]" always "= %varid% [;=]"
Line 744
  return always {!<=-1,!>=2}
  false always 0
Line 745
  ( always {!<=-1,!>=2}
  "%varid% = malloc|kmalloc (" always "%varid% = malloc|kmalloc ("
Line 746
  alloc always {!<=-1,!>=2}
  = always 1
  true always 1
Line 749
  return always {!<=-1,!>=2}
  alloc {!<=-1,!>=2,0}
Line 755
  ( always {!<=-1,!>=2}
Line 757
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 759
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always !0
Line 765
  = always 0
  0 always 0
Line 767
  = possible lifetime[Lambda]=(this)
  [ possible lifetime[Lambda]=(this)
  this always !0
  ( always {!<=-1,!>=2}
  { always {!<=-1,!>=2}
Line 769
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 770
  false always 0
Line 773
  deallocated always {!<=-1,!>=2}
  deallocated always {!<=-1,!>=2}
  = always 0
  false always 0
Line 774
  1 always 1
Line 775
  != always {!<=-1,!>=2}
Line 776
  ( always {!<=-1,!>=2}
  "[(,] &| %varid% [,)]" always "[(,] &| %varid% [,)]"
Line 778
  deallocated always {!<=-1,!>=2}
  = always 1
  true always 1
Line 782
  ( always {!<=-1,!>=2}
  "[(,] &| %varid% . %name% [,)]" always "[(,] &| %varid% . %name% [,)]"
Line 784
  deallocated always {!<=-1,!>=2}
  = always 1
  true always 1
Line 789
  deallocated {!<=-1,!>=2,0,1}
Line 792
  && always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
Line 793
  ( possible size=1
  == always {!<=-1,!>=2}
  "{" always "{"
Line 796
  == always {!<=-1,!>=2}
  "}" always "}"
Line 797
  == always {!<=-1,!>=2}
  0 always 0
Line 799
  -- always !-1
  indentlevel2 always !0
Line 804
  ( always {!<=-1,!>=2}
  "[(,] %varid% [,)]" always "[(,] %varid% [,)]"
Line 808
  ( always {!<=-1,!>=2}
  "[;{}] %varid% . %var% =" always "[;{}] %varid% . %var% ="
Line 809
  4 always 4
  2 always 2
  == always {!<=-1,!>=2}
Line 813
  2 always 2
Line 816
  = possible 0
  indentlevel2 possible 0
Line 818
  ( possible {size=1,size=6,size=4}
  == {!<=-1,!>=2,0}
  "{" always "{"
Line 821
  ( possible {size=6,size=4}
  == {!<=-1,!>=2,0}
  "}" always "}"
Line 822
  == always {!<=-1,!>=2}
  0 always 0
Line 823
  "." always "."
  2 always 2
Line 826
  -- always !-1
  indentlevel3 always !0
Line 830
  != always {!<=-1,!>=2}
Line 832
  == always {!<=-1,!>=2}
  0 always 0
Line 837
  ret always {!<=-1,!>=2}
  ret always {!<=-1,!>=2}
  = always 0
  false always 0
Line 839
  tok3 always !0
  ( possible size=1
  == {!<=-1,!>=2,0}
  "return" always "return"
Line 840
  ret always {!<=-1,!>=2}
  = always 1
  true always 1
Line 841
  tok3 always !0
  ( possible size=1
  == always {!<=-1,!>=2}
  "{" always "{"
  || always {!<=-1,!>=2}
  tok3 always !0
  == always {!<=-1,!>=2}
  "}" always "}"
Line 843
  tok3 always !0
Line 845
  ! {!<=-1,!>=2,1}
  ret {!<=-1,!>=2,0}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  tok3 always !0
  != always {!<=-1,!>=2}
  "}" always "}"
Line 847
  -- always !-1
  indentlevel3 always !0
Line 852
  ( always {!<=-1,!>=2}
  "free|kfree ( %varid% )" always "free|kfree ( %varid% )"
Line 853
  == always {!<=-1,!>=2}
  0 always 0
Line 854
  "." always "."
  2 always 2
Line 859
  ( always {!<=-1,!>=2}
  "if (" always "if ("
  && always {!<=-1,!>=2}
Line 860
  ( always {!<=-1,!>=2}
Line 865
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ") {" always ") {"
Line 873
  ( always {!<=-1,!>=2}
  "!=" always "!="
  "0" always "0"
Line 878
  = always 0
  0 always 0
Line 880
  ( possible size=1
  == always {!<=-1,!>=2}
  "{" always "{"
Line 882
  == always {!<=-1,!>=2}
  "}" always "}"
Line 883
  -- possible 0
  indentlevel4 possible 1
Line 884
  == always {!<=-1,!>=2}
  0 always 0
Line 886
  ( always {!<=-1,!>=2}
  "free|kfree ( %var% . %varid% )" always "free|kfree ( %var% . %varid% )"
Line 892
  > always {!<=-1,!>=2}
  0 always 0
Line 897
  ( possible size=4
  == {!<=-1,!>=2,0}
  "return" always "return"
Line 899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return %varid% ;" always "return %varid% ;"
  && always {!<=-1,!>=2}
Line 900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return & %varid%" always "return & %varid%"
  && always {!<=-1,!>=2}
Line 901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return %varid% . %var%" always "return %varid% . %var%"
  && always {!<=-1,!>=2}
  3 always 3
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 902
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "return %name% (" always "return %name% ("
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  deallocInFunction possible lifetime[Lambda]=(this)
  ( always {!<=-1,!>=2}
  ( always !0
Line 903
  "." always "."
  2 always 2
Line 909
  ( always {!<=-1,!>=2}
  "= %varid% ;" always "= %varid% ;"
Line 911
  ( always {!<=-1,!>=2}
  "= %var% . %varid% ;" always "= %var% . %varid% ;"
Line 916
  == always {!<=-1,!>=2}
  "goto" always "goto"
Line 920
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 921
  deallocInFunction possible lifetime[Lambda]=(this)
  ( always {!<=-1,!>=2}
Line 936
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 958
  != always {!<=-1,!>=2}
Line 960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 965
  tok2 possible symbolic=(tok->next()->astParent())
  && always {!<=-1,!>=2}
  tok2 {symbolic=(tok->next()->astParent()),!0}
  ( always {!<=-1,!>=2}
Line 966
  tok2 always !0
Line 967
  ( always {!<=-1,!>=2}
  tok2 possible {symbolic=(tok->next()->astParent()),0}
  "%assign%|return" always "%assign%|return"
Line 971
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  functionName always symbolic=(tok->str())
  == always {!<=-1,!>=2}
  "delete" always "delete"
  || always {!<=-1,!>=2}
Line 972
  functionName always symbolic=(tok->str())
  == always {!<=-1,!>=2}
  "free" always "free"
  || always {!<=-1,!>=2}
Line 973
  functionName always symbolic=(tok->str())
  == always {!<=-1,!>=2}
  "fclose" always "fclose"
  || always {!<=-1,!>=2}
Line 974
  functionName always symbolic=(tok->str())
  == always {!<=-1,!>=2}
  "realloc" always "realloc"
  || always {!<=-1,!>=2}
Line 975
  functionName always symbolic=(tok->str())
  == always {!<=-1,!>=2}
  "return" always "return"
Line 978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  functionName always symbolic=(tok->str())
  ( always {!<=-1,!>=2}
Line 983
  ( always {!<=-1,!>=2}
Line 986
  = always !0
  ( always !0
Line 987
  0 always 0
  == always {!<=-1,!>=2}
Line 989
  ( always {!<=-1,!>=2}
Line 1002
  tok possible symbolic=(tok->next()->astOperand1())
  != always {!<=-1,!>=2}
Line 1003
  isNew always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "new" always "new"
Line 1004
  ! {!<=-1,!>=2,1}
  isNew {symbolic=(mTokenizer->isCPP()&&tok->str()=="new"),!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 1007
  tok possible symbolic=(tok->next()->astOperand1())
Line 1010
  tok possible symbolic=(tok->next()->astOperand1())
  0 always 0
Line 1011
  == always {!<=-1,!>=2}
Line 1014
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  isNew always {!<=-1,!>=2}
Line 1017
  ( always {!<=-1,!>=2}
  tok possible symbolic=(tok->next()->astOperand1())
Line 1021
  isNew {!<=-1,!>=2,0}
Line 1022
  parent possible {symbolic=(isNew?tok->astParent():tok->next()->astParent()),0}
  && always {!<=-1,!>=2}
  parent {symbolic=(isNew?tok->astParent():tok->next()->astParent()),!0}
  == always {!<=-1,!>=2}
  "(" always "("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  parent {symbolic=(isNew?tok->astParent():tok->next()->astParent()),!0}
Line 1023
  parent always !0
Line 1025
  warn always {!<=-1,!>=2}
  warn always {!<=-1,!>=2}
  = always 1
  true always 1
Line 1026
  isNew {!<=-1,!>=2,0}
Line 1028
  warn always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  typeTok always symbolic=(tok->next())
  && always {!<=-1,!>=2}
  typeTok {symbolic=(tok->next()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  typeTok {symbolic=(tok->next()),!0}
Line 1031
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  warn always {!<=-1,!>=2}
Line 1033
  "}|;" always "}|;"
Line 1034
  == always {!<=-1,!>=2}
  "}" always "}"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  -1 always -1
  "%name%" always "%name%"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  isNew always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1037
  ( always {!<=-1,!>=2}
  "%comp%|!" always "%comp%|!"
Line 1057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 1060
  != always {!<=-1,!>=2}
Line 1061
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 1063
  = always 0
  nullptr always 0
Line 1064
  = always 0
  nullptr always 0
Line 1067
  2 always 2
  && always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
  endParamToken always symbolic=(tok->next()->link())
  tok2 possible {symbolic=(pointerType),symbolic=(functionCalled)}
Line 1069
  isNothrow always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  func always symbolic=(tok2->function())
  && always {!<=-1,!>=2}
  func {symbolic=(tok2->function()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  func {symbolic=(tok2->function()),!0}
  ( always {!<=-1,!>=2}
Line 1071
  ( always {!<=-1,!>=2}
  "shared_ptr|unique_ptr <" always "shared_ptr|unique_ptr <"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "> ( new %name%" always "> ( new %name%"
Line 1073
  ! always {!<=-1,!>=2}
  isNothrow {symbolic=(func&&(func->isAttributeNothrow()||func->isThrow())),!<=-1,!>=2}
Line 1074
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 1076
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "> (" always "> ("
Line 1081
  pointerType possible 0
  && always {!<=-1,!>=2}
Line 1082
  functionCalled always !0
Line 1083
  functionCalled always !0
  1 always 1
  == always {!<=-1,!>=2}
  "<" always "<"
Line 1084
  functionName always symbolic=(functionCalled->str())
  '<' always 60
Line 1085
  functionCalled always !0
  2 always 2
  != always {!<=-1,!>=2}
  functionCalled always !0
Line 1087
  functionName possible symbolic=(functionCalled->str()+60)
  '>' always 62
Line 1090
  pointerType always !0
  2 always 2
  != always {!<=-1,!>=2}
  pointerType always !0
Line 1093
  pointerType always !0
  objectTypeName possible size=0
Line 1101
  loc possible 0@224
  :: always 1
  error always 1
  "leakNoVarFunctionCall" always "leakNoVarFunctionCall"
  "Allocation with " always "Allocation with "
  alloc possible "funcName"@224
  ", " always ", "
  functionCall possible "funcName"@224
  " doesn't release it." always " doesn't release it."
  :: always 0
  normal always 0
Line 1106
  tok possible 0@225
  :: always 1
  error always 1
  "leakReturnValNotUsed" always "leakReturnValNotUsed"
  "$symbol:" always "$symbol:"
  alloc possible "funcName"@225
  "\nReturn value of allocation function '$symbol' is not stored." always "\nReturn value of allocation function '$symbol' is not stored."
  :: always 0
  normal always 0
Line 1111
  = possible {"make_shared","make_unique"}
  ptrType possible "shared_ptr"@226
  == always {!<=-1,!>=2}
  "shared_ptr" always "shared_ptr"
  ? possible {"make_shared","make_unique"}
  "make_shared" always "make_shared"
  : always "make_unique"
  "make_unique" always "make_unique"
Line 1112
  tok possible 0@226
  :: always 2
  warning always 2
  "leakUnsafeArgAlloc" always "leakUnsafeArgAlloc"
Line 1113
  "$symbol:" always "$symbol:"
  funcName possible "funcName"@226
  "\nUnsafe allocation. If $symbol() throws, memory could be leaked. Use " always "\nUnsafe allocation. If $symbol() throws, memory could be leaked. Use "
Line 1114
  "<" always "<"
  objType possible "int"@226
  ">() instead." always ">() instead."
Line 1116
  :: always 1
  inconclusive always 1
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,2@18,3@166}
  flag possible {2@18,3@166}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,1@17}
  flag possible 1@17
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
