

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744403 !@expr1073744404 mTokenizer@var28 ) {
69: instances (@expr1073744405 ) .@expr1073744406 remove (@expr1073744407 this@expr1073744408 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744409 string (@expr1073744410 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744411 void ) tokenizer@var21 ;
108: (@expr1073744412 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744413 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744414 void ) ctu@var24 ;
120: (@expr1073744415 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744416 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744417 0U ) , Certainty ::@expr1073744418 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744419 list < const Token *@expr1073744420 > callstack@var41 (@expr1073744421 1 , tok@var35 ) ;
141: reportError (@expr1073744422 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744423 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744424 0U ) , Certainty ::@expr1073744425 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var64 ;
43: std :: string errorId@var65 ;
44: void setFileName ( const std :: string & s@var66 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var70 ;
47: }
48: int lineNumber@var67 ;
49: Certainty :: CertaintyLevel certainty@var68 ;
50: std :: string symbolNames@var69 ;
51: private:
52: std :: string mFileName@var70 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var104 ( NO_LINE ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
57: Suppression ( const Suppression & other@var71 ) {
58: *@expr1073744426 this@expr1073744427 =@expr1073744428 other@var71 ;
59: }
60: Suppression ( const std :: string & id@var72 , const std :: string & file@var73 , int line@var74 = NO_LINE ) : errorId@var102 ( id@var72 ) , fileName@var103 ( file@var73 ) , lineNumber@var104 ( line@var74 ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var75 ) {
63: errorId@var102 =@expr1073744429 other@var75 .@expr1073744430 errorId@var76 ;
64: fileName@var103 =@expr1073744431 other@var75 .@expr1073744432 fileName@var77 ;
65: lineNumber@var104 =@expr1073744433 other@var75 .@expr1073744434 lineNumber@var78 ;
66: symbolName@var105 =@expr1073744435 other@var75 .@expr1073744436 symbolName@var79 ;
67: hash@var106 =@expr1073744437 other@var75 .@expr1073744438 hash@var80 ;
68: thisAndNextLine@var107 =@expr1073744439 other@var75 .@expr1073744440 thisAndNextLine@var81 ;
69: matched@var108 =@expr1073744441 other@var75 .@expr1073744442 matched@var82 ;
70: checked@var109 =@expr1073744443 other@var75 .@expr1073744444 checked@var83 ;
71: return *@expr1073744445 this@expr1073744446 ;
72: }
73:
74: bool operator< ( const Suppression & other@var84 ) const {
75: if (@expr1073744447 errorId@var102 !=@expr1073744448 other@var84 .@expr2625 errorId@var85 ) {
76: return errorId@var102 <@expr1073744450 other@var84 .@expr2625 errorId@var85 ; }
77: if (@expr1073744452 lineNumber@var104 <@expr1073744453 other@var84 .@expr1073744454 lineNumber@var86 ) {
78: return true ; }
79: if (@expr1073744455 fileName@var103 !=@expr1073744456 other@var84 .@expr2633 fileName@var87 ) {
80: return fileName@var103 <@expr1073744458 other@var84 .@expr2633 fileName@var87 ; }
81: if (@expr1073744460 symbolName@var105 !=@expr1073744461 other@var84 .@expr2638 symbolName@var88 ) {
82: return symbolName@var105 <@expr1073744463 other@var84 .@expr2638 symbolName@var88 ; }
83: if (@expr1073744465 hash@var106 !=@expr1073744466 other@var84 .@expr2643 hash@var89 ) {
84: return hash@var106 <@expr1073744468 other@var84 .@expr2643 hash@var89 ; }
85: if (@expr1073744470 thisAndNextLine@var107 !=@expr1073744471 other@var84 .@expr1073744472 thisAndNextLine@var90 ) {
86: return thisAndNextLine@var107 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var91 , std :: string * errorMessage@var92 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var93 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var94 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744474 fileName@var103 .@expr1073744475 empty (@expr1073744476 ) &&@expr1073744477 fileName@var103 .@expr1073744478 find_first_of (@expr1073744479 "?*" ) ==@expr1073744480 std ::@expr1073744481 string ::@expr1073744482 npos@expr1073744473 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var95 ) const {
109: return errorId@var102 ==@expr1073744483 other@var95 .@expr1073744484 errorId@var96 &&@expr1073744485
110: fileName@var103 ==@expr1073744486 other@var95 .@expr1073744487 fileName@var97 &&@expr1073744488
111: lineNumber@var104 ==@expr1073744489 other@var95 .@expr1073744490 lineNumber@var98 &&@expr1073744491
112: symbolName@var105 ==@expr1073744492 other@var95 .@expr1073744493 symbolName@var99 &&@expr1073744494
113: hash@var106 ==@expr1073744495 other@var95 .@expr1073744496 hash@var100 &&@expr1073744497
114: thisAndNextLine@var107 ==@expr1073744498 other@var95 .@expr1073744499 thisAndNextLine@var101 ;
115: }
116:
117: std :: string errorId@var102 ;
118: std :: string fileName@var103 ;
119: int lineNumber@var104 ;
120: std :: string symbolName@var105 ;
121: unsigned long hash@var106 ;
122: bool thisAndNextLine@var107 ;
123: bool matched@var108 ;
124: bool checked@var109 ;
125:
126: enum Anonymous0 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var110 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var111 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var112 , std :: string * errorMessage@var113 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var114 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var115 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var116 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var117 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var118 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var119 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var120 , const bool unusedFunctionChecking@var121 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var122 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var123 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var124 ;
219: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var125 , const Color & c@var126 ) ;
42:
43: std :: string toString ( const Color & c@var127 ) ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var128 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var129 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var130 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var131 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var132 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var148 ( 0 ) , line@var149 ( 0 ) , column@var150 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var133 , int line@var134 , unsigned int column@var135 )
73: : fileIndex@var148 ( 0 ) , line@var149 ( line@var134 ) , column@var150 ( column@var135 ) , mOrigFileName@var152 ( file@var133 ) , mFileName@var153 ( file@var133 ) { }
74:
75: FileLocation ( const std :: string & file@var136 , const std :: string & info@var137 , int line@var138 , unsigned int column@var139 )
76: : fileIndex@var148 ( 0 ) , line@var149 ( line@var138 ) , column@var150 ( column@var139 ) , mOrigFileName@var152 ( file@var136 ) , mFileName@var153 ( file@var136 ) , mInfo@var154 ( info@var137 ) { }
77:
78: FileLocation ( const Token * tok@var140 , const TokenList * tokenList@var141 ) ;
79: FileLocation ( const Token * tok@var142 , const std :: string & info@var143 , const TokenList * tokenList@var144 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var145 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var146 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var147 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var148 ;
107: int line@var149 ;
108: unsigned int column@var150 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var154 ;
112: }
113: void setinfo ( const std :: string & i@var151 ) {
114: mInfo@var154 =@expr1073744500 i@var151 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var152 ;
119: std :: string mFileName@var153 ;
120: std :: string mInfo@var154 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var155 ,
124: const std :: string & file1@var156 ,
125: Severity :: SeverityType severity@var157 ,
126: const std :: string & msg@var158 ,
127: const std :: string & id@var159 , Certainty :: CertaintyLevel certainty@var160 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var161 ,
129: const std :: string & file1@var162 ,
130: Severity :: SeverityType severity@var163 ,
131: const std :: string & msg@var164 ,
132: const std :: string & id@var165 ,
133: const CWE & cwe@var166 ,
134: Certainty :: CertaintyLevel certainty@var167 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var168 ,
136: const TokenList * list@var169 ,
137: Severity :: SeverityType severity@var170 ,
138: const std :: string & id@var171 ,
139: const std :: string & msg@var172 ,
140: Certainty :: CertaintyLevel certainty@var173 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var174 ,
142: const TokenList * list@var175 ,
143: Severity :: SeverityType severity@var176 ,
144: const std :: string & id@var177 ,
145: const std :: string & msg@var178 ,
146: const CWE & cwe@var179 ,
147: Certainty :: CertaintyLevel certainty@var180 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var181 ,
149: const TokenList * tokenList@var182 ,
150: Severity :: SeverityType severity@var183 ,
151: const char id@var184 [ ] ,
152: const std :: string & msg@var185 ,
153: const CWE & cwe@var186 ,
154: Certainty :: CertaintyLevel certainty@var187 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var188 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var189 ,
176: const std :: string & templateFormat@var190 = emptyString@var1 ,
177: const std :: string & templateLocation@var191 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var192 ) ;
181:
182: std :: list < FileLocation > callStack@var193 ;
183: std :: string id@var194 ;
184:
185:
186: std :: string file0@var195 ;
187:
188: std :: string function@var196 ;
189:
190: bool incomplete@var197 ;
191:
192: Severity :: SeverityType severity@var198 ;
193: CWE cwe@var199 ;
194: Certainty :: CertaintyLevel certainty@var200 ;
195:
196:
197: unsigned long hash@var201 ;
198:
199:
200: void setmsg ( const std :: string & msg@var202 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var204 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var205 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var206 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var203 ) ;
221:
222:
223: std :: string mShortMessage@var204 ;
224:
225:
226: std :: string mVerboseMessage@var205 ;
227:
228:
229: std :: string mSymbolNames@var206 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var207 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073744501 plistFile@var207 .@expr1073744502 is_open (@expr1073744503 ) ) {
243: plistFile@var207 <<@expr1073744504 ErrorLogger ::@expr1073744505 plistFooter (@expr1073744506 ) ;
244: plistFile@var207 .@expr1073744507 close (@expr1073744508 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var208 , Color c@var209 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var210 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var211 , const char stage@var212 [ ] , const unsigned long value@var213 ) {
271: (@expr1073744509 void ) filename@var211 ;
272: (@expr1073744510 void ) stage@var212 ;
273: (@expr1073744511 void ) value@var213 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var214 ) {
281: reportErr (@expr1073744512 msg@var214 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var215 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var216 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var217 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var218 , const std :: vector < std :: string > & files@var219 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var220 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var221 , const std :: string & from@var222 , const std :: string & to@var223 ) ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var224 ;
42: double mDoubleValue@var225 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var226 ;
44: bool mIsUnsigned@var227 ;
45:
46: void promote ( const value & v@var228 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var229 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var226 !=@expr1073744513 Type ::@expr1073744514 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var226 ==@expr1073744515 Type ::@expr1073744516 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744517 ) ?@expr1073744518 mDoubleValue@var225 :@expr1073744519 (@expr1073744520 double ) mIntValue@var224 ;
60: }
61:
62: static value calc ( char op@var230 , const value & v1@var231 , const value & v2@var232 ) ;
63: int compare ( const value & v@var233 ) const ;
64: value add ( int v@var234 ) const ;
65: value shiftLeft ( const value & v@var235 ) const ;
66: value shiftRight ( const value & v@var236 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var237 ;
72:
73: static long long toLongNumber ( const std :: string & str@var238 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var239 ) ;
75:
76: template < class T > static std :: string toString ( T value@var240 ) {
77: std ::@expr1073744521 ostringstream result@var241 ;
78: result@var241 <<@expr1073744522 value@var240 ;
79: return result@var241 .@expr1073744523 str (@expr1073744524 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var242 ) ;
82:
83: static bool isInt ( const std :: string & str@var243 ) ;
84: static bool isFloat ( const std :: string & str@var244 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var245 ) ;
86: static bool isNegative ( const std :: string & str@var246 ) ;
87: static bool isPositive ( const std :: string & str@var247 ) ;
88: static bool isDec ( const std :: string & str@var248 ) ;
89: static bool isFloatHex ( const std :: string & str@var249 ) ;
90: static bool isIntHex ( const std :: string & str@var250 ) ;
91: static bool isOct ( const std :: string & str@var251 ) ;
92: static bool isBin ( const std :: string & str@var252 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var253 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var254 , bool supportMicrosoftExtensions@var255 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var256 , const std :: string & second@var257 ) ;
105: static std :: string subtract ( const std :: string & first@var258 , const std :: string & second@var259 ) ;
106: static std :: string multiply ( const std :: string & first@var260 , const std :: string & second@var261 ) ;
107: static std :: string divide ( const std :: string & first@var262 , const std :: string & second@var263 ) ;
108: static std :: string mod ( const std :: string & first@var264 , const std :: string & second@var265 ) ;
109: static std :: string incdec ( const std :: string & var@var266 , const std :: string & op@var267 ) ;
110: static std :: string calculate ( const std :: string & first@var268 , const std :: string & second@var269 , char action@var270 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var271 ) ;
113: static std :: string cos ( const std :: string & tok@var272 ) ;
114: static std :: string tan ( const std :: string & tok@var273 ) ;
115: static std :: string abs ( const std :: string & tok@var274 ) ;
116: static bool isEqual ( const std :: string & first@var275 , const std :: string & second@var276 ) ;
117: static bool isNotEqual ( const std :: string & first@var277 , const std :: string & second@var278 ) ;
118: static bool isGreater ( const std :: string & first@var279 , const std :: string & second@var280 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var281 , const std :: string & second@var282 ) ;
120: static bool isLess ( const std :: string & first@var283 , const std :: string & second@var284 ) ;
121: static bool isLessEqual ( const std :: string & first@var285 , const std :: string & second@var286 ) ;
122: static bool isNullValue ( const std :: string & str@var287 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var288 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var289 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var290 , std :: string :: size_type iPos@var291 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var292 , const MathLib :: value & v2@var293 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var294 , const MathLib :: value & v2@var295 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var296 , const MathLib :: value & v2@var297 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var298 , const MathLib :: value & v2@var299 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var300 , const MathLib :: value & v2@var301 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var302 , const MathLib :: value & v2@var303 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var304 , const MathLib :: value & v2@var305 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var306 , const MathLib :: value & v2@var307 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var308 , const MathLib :: value & v2@var309 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var310 , const MathLib :: value & v2@var311 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var312 ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var313 ) const {
54: x@var313 ++@expr1073744525 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var314 ) const {
60: x@var314 --@expr1073744526 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var315 , const U & y@var316 ) const {
67: return x@var315 <@expr1073744527 y@var316 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var317 , const U & y@var318 ) const {
74: return std ::@expr1073744528 abs (@expr1073744529 x@var317 -@expr1073744530 y@var318 ) ==@expr1073744531 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var319 , T x@var320 , U y@var321 ) const {
81: result@var319 =@expr1073744532 !@expr1073744533 (@expr1073744534 x@var320 >@expr1073744535 y@var321 ||@expr1073744536 x@var320 <@expr1073744537 y@var321 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var322 = 0 , Bound b@var323 = Bound :: Point )
91: : valueType@var363 ( ValueType :: INT ) ,
92: bound@var364 ( b@var323 ) ,
93: intvalue@var365 ( val@var322 ) ,
94: tokvalue@var366 ( nullptr ) ,
95: floatValue@var367 ( 0.0 ) ,
96: moveKind@var368 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var369 ( val@var322 ) ,
98: condition@var370 ( nullptr ) ,
99: varId@var372 ( 0U ) ,
100: safe@var373 ( false ) ,
101: conditional@var374 ( false ) ,
102: macro@var375 ( false ) ,
103: defaultArg@var376 ( false ) ,
104: indirect@var377 ( 0 ) ,
105: path@var378 ( 0 ) ,
106: wideintvalue@var379 ( val@var322 ) ,
107: subexpressions@var380 ( ) ,
108: capturetok@var381 ( nullptr ) ,
109: lifetimeKind@var382 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var383 ( LifetimeScope :: Local ) ,
111: valueKind@var388 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var324 , long long val@var325 , Bound b@var326 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var327 ) const {
118: if (@expr1073744538 valueType@var363 !=@expr1073744539 rhs@var327 .@expr1073744540 valueType@var328 ) {
119: return false ; }
120: switch (@expr1073744541 valueType@var363 ) {
121: case ValueType ::@expr1073744542 INT :@expr2719
122: case ValueType ::@expr1073744544 CONTAINER_SIZE :@expr2719
123: case ValueType ::@expr1073744546 BUFFER_SIZE :@expr2719
124: case ValueType ::@expr1073744548 ITERATOR_START :@expr2719
125: case ValueType ::@expr1073744550 ITERATOR_END :@expr2719 ;
126: if (@expr2728 intvalue@var365 !=@expr2729 rhs@var327 .@expr2730 intvalue@var329 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744555 TOK :@expr2719 ;
130: if (@expr2733 tokvalue@var366 !=@expr2734 rhs@var327 .@expr2735 tokvalue@var330 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744560 FLOAT :@expr2719 ;
134:
135: if (@expr1073744562 floatValue@var367 >@expr1073744563 rhs@var327 .@expr2740 floatValue@var331 ||@expr1073744565 floatValue@var367 <@expr1073744566 rhs@var327 .@expr2740 floatValue@var331 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744568 MOVED :@expr2719 ;
139: if (@expr1073744570 moveKind@var368 !=@expr1073744571 rhs@var327 .@expr1073744572 moveKind@var332 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744573 UNINIT :@expr2719 ;
143: break ;
144: case ValueType ::@expr1073744575 LIFETIME :@expr2719 ;
145: if (@expr2733 tokvalue@var366 !=@expr2734 rhs@var327 .@expr2735 tokvalue@var330 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744580 SYMBOLIC :@expr2719 ;
149: if (@expr1073744582 !@expr1073744583 sameToken (@expr1073744584 tokvalue@var366 , rhs@var327 .@expr2735 tokvalue@var330 ) ) {
150: return false ; }
151: if (@expr2728 intvalue@var365 !=@expr2729 rhs@var327 .@expr2730 intvalue@var329 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var333 , F f@var334 ) {
160: switch (@expr1073744589 self@var333 .@expr1073744590 valueType@var335 ) {
161: case ValueType ::@expr1073744591 INT :@expr2768
162: case ValueType ::@expr1073744593 SYMBOLIC :@expr2768
163: case ValueType ::@expr1073744595 BUFFER_SIZE :@expr2768
164: case ValueType ::@expr1073744597 CONTAINER_SIZE :@expr2768
165: case ValueType ::@expr1073744599 ITERATOR_START :@expr2768
166: case ValueType ::@expr1073744601 ITERATOR_END :@expr2768 ; {
167: f@var334 (@expr1073744603 self@var333 .@expr1073744604 intvalue@var336 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744605 FLOAT :@expr2768 ; {
171: f@var334 (@expr1073744607 self@var333 .@expr1073744608 floatValue@var337 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744609 UNINIT :@expr2768
175: case ValueType ::@expr1073744611 TOK :@expr2768
176: case ValueType ::@expr1073744613 LIFETIME :@expr2768
177: case ValueType ::@expr1073744615 MOVED :@expr2768 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var338 , Compare compare@var339 , T x@var340 , U y@var341 ) const {
186: result@var338 =@expr1073744617 compare@var339 (@expr1073744618 x@var340 , y@var341 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var342 , const Value & rhs@var343 , Compare compare@var344 , T x@var345 ) const {
191: visitValue (@expr1073744620 rhs@var343 ,
192: std ::@expr1073744621 bind (@expr1073744622 innerVisitor {@expr1073744623 } , std ::@expr1073744624 ref (@expr1073744625 result@var342 ) , std ::@expr1073744626 move (@expr1073744627 compare@var344 ) , x@var345 , std ::@expr1073744628 placeholders ::@expr1073744629 _1@expr1073744619 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var346 , Compare compare@var347 ) const {
198: assert (@expr1073744631 (@expr1073744632 !@expr1073744633 this@expr2810 .@expr1073744635 isSymbolicValue (@expr1073744636 ) &&@expr1073744637 !@expr1073744638 rhs@var346 .@expr1073744639 isSymbolicValue (@expr1073744640 ) ) ||@expr1073744641
199: (@expr1073744642 this@expr2810 .@expr1073744643 valueType@var363 ==@expr1073744644 rhs@var346 .@expr1073744645 valueType@var348 &&@expr1073744646 sameToken (@expr1073744647 this@expr2810 .@expr1073744648 tokvalue@var366 , rhs@var346 .@expr1073744649 tokvalue@var349 ) ) ) ;
200: bool result@var350 ; result@var350 =@expr1073744650 false ;
201: visitValue (@expr1073744651
202: *@expr1073744652 this@expr2810 ,
203: std ::@expr1073744653 bind (@expr1073744654 compareVisitor {@expr1073744655 } , std ::@expr2832 ref (@expr1073744657 result@var350 ) , std ::@expr2832 ref (@expr1073744659 rhs@var346 ) , std ::@expr1073744660 move (@expr1073744661 compare@var347 ) , std ::@expr1073744662 placeholders ::@expr1073744663 _1@expr1073744630 ) ) ;
204: return result@var350 ;
205: }
206:
207: bool operator== ( const Value & rhs@var351 ) const {
208: if (@expr1073744664 !@expr1073744665 equalValue (@expr1073744666 rhs@var351 ) ) {
209: return false ; }
210:
211: return varvalue@var369 ==@expr1073744667 rhs@var351 .@expr1073744668 varvalue@var352 &&@expr1073744669
212: condition@var370 ==@expr1073744670 rhs@var351 .@expr1073744671 condition@var353 &&@expr1073744672
213: varId@var372 ==@expr1073744673 rhs@var351 .@expr1073744674 varId@var354 &&@expr1073744675
214: conditional@var374 ==@expr1073744676 rhs@var351 .@expr1073744677 conditional@var355 &&@expr1073744678
215: defaultArg@var376 ==@expr1073744679 rhs@var351 .@expr1073744680 defaultArg@var356 &&@expr1073744681
216: indirect@var377 ==@expr1073744682 rhs@var351 .@expr1073744683 indirect@var357 &&@expr1073744684
217: valueKind@var388 ==@expr1073744685 rhs@var351 .@expr1073744686 valueKind@var358 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var359 ) const {
221: return !@expr1073744687 (@expr1073744688 *@expr1073744689 this@expr1073744690 ==@expr1073744691 rhs@var359 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var360 ) const {
226: bool result@var361 ; result@var361 =@expr1073744693 false ;
227: visitValue (@expr1073744694 *@expr1073744695 this@expr1073744696 , std ::@expr1073744697 bind (@expr1073744698 equalVisitor {@expr1073744699 } , std ::@expr1073744700 ref (@expr1073744701 result@var361 ) , x@var360 , std ::@expr1073744702 placeholders ::@expr1073744703 _1@expr1073744692 ) ) ;
228: return result@var361 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744704 bound@var364 ==@expr1073744705 Bound ::@expr1073744706 Lower ) {
233: visitValue (@expr1073744707 *@expr2884 this@expr2885 , increment {@expr1073744710 } ) ; }
234: else { if (@expr1073744711 bound@var364 ==@expr1073744712 Bound ::@expr1073744713 Upper ) {
235: visitValue (@expr1073744714 *@expr2884 this@expr2885 , decrement {@expr1073744716 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744717 bound@var364 ==@expr1073744718 Bound ::@expr2895 Lower ) {
240: bound@var364 =@expr1073744720 Bound ::@expr2897 Upper ; }
241: else { if (@expr1073744722 bound@var364 ==@expr1073744723 Bound ::@expr2897 Upper ) {
242: bound@var364 =@expr1073744725 Bound ::@expr2895 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744727 ) ;
247: decreaseRange (@expr1073744728 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var362 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var363 ;
267: bool isIntValue ( ) const {
268: return valueType@var363 ==@expr1073744729 ValueType ::@expr1073744730 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var363 ==@expr1073744731 ValueType ::@expr1073744732 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var363 ==@expr1073744733 ValueType ::@expr1073744734 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var363 ==@expr1073744735 ValueType ::@expr1073744736 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var363 ==@expr1073744737 ValueType ::@expr1073744738 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var363 ==@expr1073744739 ValueType ::@expr1073744740 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var363 ==@expr1073744741 ValueType ::@expr1073744742 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var363 ==@expr1073744743 ValueType ::@expr1073744744 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var363 ==@expr1073744745 ValueType ::@expr1073744746 ITERATOR_START ||@expr1073744747 valueType@var363 ==@expr1073744748 ValueType ::@expr1073744749 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var363 ==@expr1073744750 ValueType ::@expr1073744751 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var363 ==@expr1073744752 ValueType ::@expr1073744753 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var363 ==@expr1073744754 ValueType ::@expr1073744755 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var363 ==@expr1073744757 ValueType ::@expr1073744758 LIFETIME &&@expr1073744759 lifetimeScope@var383 ==@expr1073744760 LifetimeScope ::@expr1073744761 Local@expr1073744756 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var363 ==@expr1073744762 ValueType ::@expr1073744763 LIFETIME &&@expr1073744764 lifetimeScope@var383 ==@expr1073744765 LifetimeScope ::@expr1073744766 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var363 ==@expr1073744767 ValueType ::@expr1073744768 LIFETIME &&@expr1073744769 lifetimeScope@var383 ==@expr1073744770 LifetimeScope ::@expr1073744771 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744772 ) ||@expr1073744773 isUninitValue (@expr1073744774 ) ||@expr1073744775 isLifetimeValue (@expr1073744776 ) ;
318: }
319:
320:
321: Bound bound@var364 ;
322:
323:
324: long long intvalue@var365 ;
325:
326:
327: const Token * tokvalue@var366 ;
328:
329:
330: double floatValue@var367 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var368 ;
334:
335:
336: long long varvalue@var369 ;
337:
338:
339: const Token * condition@var370 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var371 ;
342:
343:
344: int varId@var372 ;
345:
346:
347: bool safe@var373 ;
348:
349:
350: bool conditional@var374 ;
351:
352:
353: bool macro@var375 ;
354:
355:
356: bool defaultArg@var376 ;
357:
358: int indirect@var377 ;
359:
360:
361: long long path@var378 ;
362:
363:
364: long long wideintvalue@var379 ;
365:
366: std :: vector < std :: string > subexpressions@var380 ;
367:
368:
369: const Token * capturetok@var381 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var382 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var383 ;
385:
386: static const char * toString ( MoveKind moveKind@var384 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var385 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var386 ) ;
389: static const char * toString ( Bound bound@var387 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var388 ;
402:
403: void setKnown ( ) {
404: valueKind@var388 =@expr1073744777 ValueKind ::@expr1073744778 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var388 ==@expr1073744779 ValueKind ::@expr1073744780 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var388 =@expr1073744782 ValueKind ::@expr1073744783 Possible@expr1073744781 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var388 ==@expr1073744785 ValueKind ::@expr1073744786 Possible@expr1073744784 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var388 ==@expr1073744787 ValueKind ::@expr1073744788 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var388 =@expr1073744789 ValueKind ::@expr1073744790 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var389 = true ) {
428: if (@expr1073744791 inconclusive@var389 ) {
429: valueKind@var388 =@expr1073744792 ValueKind ::@expr1073744793 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var388 ==@expr1073744794 ValueKind ::@expr1073744795 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744797 isKnown (@expr1073744798 ) ) {
438: valueKind@var388 =@expr1073744799 ValueKind ::@expr1073744800 Possible@expr1073744796 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744801 condition@var370 &&@expr1073744802 !@expr1073744803 defaultArg@var376 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var390 , const Token * tok2@var391 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var392 , const Settings * settings@var393 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var394 , SymbolDatabase * symboldatabase@var395 , ErrorLogger * errorLogger@var396 , const Settings * settings@var397 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var398 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var399 , const Settings * settings@var400 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var401 ,
459: const Settings * settings@var402 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var403 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var404 , const Token * indexTok@var405 , bool possible@var406 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var407 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var408 , const Settings * settings@var409 = nullptr , int depth@var410 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var411 ;
471: bool addressOf@var412 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var413 ;
473: bool inconclusive@var414 ;
474:
475: LifetimeToken ( ) : token@var411 ( nullptr ) , addressOf@var412 ( false ) , errorPath@var413 ( ) , inconclusive@var414 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var415 , ValueFlow :: Value :: ErrorPath errorPath@var416 )
478: : token@var411 ( token@var415 ) , addressOf@var412 ( false ) , errorPath@var413 ( std :: move ( errorPath@var416 ) ) , inconclusive@var414 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var417 , bool addressOf@var418 , ValueFlow :: Value :: ErrorPath errorPath@var419 )
482: : token@var411 ( token@var417 ) , addressOf@var412 ( addressOf@var418 ) , errorPath@var413 ( std :: move ( errorPath@var419 ) ) , inconclusive@var414 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var420 , bool b@var421 ) {
486: for (@expr1073744804 LifetimeToken &@expr1073744805 x@var422 :@expr1073744806 v@var420 ) {
487: x@var422 .@expr1073744807 addressOf@var423 =@expr1073744808 b@var421 ; }
488: return v@var420 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var424 , bool b@var425 ) {
492: for (@expr1073744809 LifetimeToken &@expr1073744810 x@var426 :@expr1073744811 v@var424 ) {
493: x@var426 .@expr1073744812 inconclusive@var427 =@expr1073744813 b@var425 ; }
494: return v@var424 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var428 , ValueFlow :: Value & true_value@var429 , ValueFlow :: Value & false_value@var430 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var431 ) ;
499: const Token * parseCompareInt ( const Token * tok@var432 , ValueFlow :: Value & true_value@var433 , ValueFlow :: Value & false_value@var434 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var435 , long long val@var436 , const Token * varTok@var437 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var438 , const Token * varTok@var439 , long long val@var440 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var441 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var442 ,
508: ValueFlow :: Value & value@var443 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var444 ,
511: bool escape@var445 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var446 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var447 , const Token * lifetime@var448 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var449 , ValueFlow :: Value :: ErrorPath & errorPath@var450 , bool * addressOf@var451 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var452 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var453 , const Settings * settings@var454 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var455 , const ValueFlow :: Value * val@var456 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var457 , const ValueFlow :: Value * val@var458 , ValueFlow :: Value :: ErrorPath & errorPath@var459 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var460 , bool inconclusive@var461 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var462 ,
529: bool inconclusive@var463 = false ,
530: long long path@var464 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var465 , const Scope * defaultScope@var466 = nullptr , bool smallest@var467 = true ) ;

##file cppcheck-2.8/lib/ctu.h

1:
|
36:
37: class Function ;
38: class Settings ;
39: class Token ;
40: class Tokenizer ;
41:
42: namespace tinyxml2 {
43: class XMLElement ;
44: }
45:
|
50:
51: namespace CTU {
52: class FileInfo : public Check :: FileInfo {
53: public:
54: enum class InvalidValueType { null , uninit , bufferOverflow } ;
55:
56: std :: string toString ( ) const override ;
57:
58: struct Location {
59: Location ( ) = default ;
60: Location ( const Tokenizer * tokenizer@var468 , const Token * tok@var469 ) ;
61: Location ( const std :: string & fileName@var470 , int lineNumber@var471 , int column@var472 ) : fileName@var473 ( fileName@var470 ) , lineNumber@var474 ( lineNumber@var471 ) , column@var475 ( column@var472 ) { }
62: std :: string fileName@var473 ;
63: int lineNumber@var474 { } ;
64: int column@var475 { } ;
65: } ;
66:
67: struct UnsafeUsage {
68: UnsafeUsage ( ) = default ;
69: UnsafeUsage ( const std :: string & myId@var476 , int myArgNr@var477 , const std :: string & myArgumentName@var478 , const Location & location@var479 , long long value@var480 ) : myId@var481 ( myId@var476 ) , myArgNr@var482 ( myArgNr@var477 ) , myArgumentName@var483 ( myArgumentName@var478 ) , location@var484 ( location@var479 ) , value@var485 ( value@var480 ) { }
70: std :: string myId@var481 ;
71: int myArgNr@var482 { } ;
72: std :: string myArgumentName@var483 ;
73: Location location@var484 ;
74: long long value@var485 { } ;
75: std :: string toString ( ) const ;
76: } ;
77:
78: class CallBase {
79: public:
80: CallBase ( ) = default ;
81: CallBase ( const std :: string & callId@var486 , int callArgNr@var487 , const std :: string & callFunctionName@var488 , const Location & loc@var489 )
82: : callId@var492 ( callId@var486 ) , callArgNr@var493 ( callArgNr@var487 ) , callFunctionName@var494 ( callFunctionName@var488 ) , location@var495 ( loc@var489 )
83: { }
84: CallBase ( const Tokenizer * tokenizer@var490 , const Token * callToken@var491 ) ;
85: virtual ~ CallBase ( ) { }
86: std :: string callId@var492 ;
87: int callArgNr@var493 { } ;
88: std :: string callFunctionName@var494 ;
89: Location location@var495 ;
90: protected:
91: std :: string toBaseXmlString ( ) const ;
92: bool loadBaseFromXml ( const tinyxml2 :: XMLElement * xmlElement@var496 ) ;
93: } ;
94:
95: class FunctionCall : public CallBase {
96: public:
97: std :: string callArgumentExpression@var497 ;
98: long long callArgValue@var498 ;
99: ValueFlow :: Value :: ValueType callValueType@var499 ;
100: std :: vector < ErrorMessage :: FileLocation > callValuePath@var500 ;
101: bool warning@var501 ;
102:
103: std :: string toXmlString ( ) const ;
104: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var502 ) ;
105: } ;
106:
107: class NestedCall : public CallBase {
108: public:
109: NestedCall ( ) = default ;
110:
111: NestedCall ( const std :: string & myId@var503 , int myArgNr@var504 , const std :: string & callId@var505 , int callArgnr@var506 , const std :: string & callFunctionName@var507 , const Location & location@var508 )
112: : CallBase ( callId@var505 , callArgnr@var506 , callFunctionName@var507 , location@var508 ) ,
113: myId@var513 ( myId@var503 ) ,
114: myArgNr@var514 ( myArgNr@var504 ) { }
115:
116: NestedCall ( const Tokenizer * tokenizer@var509 , const Function * myFunction@var510 , const Token * callToken@var511 ) ;
117:
118: std :: string toXmlString ( ) const ;
119: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var512 ) ;
120:
121: std :: string myId@var513 ;
122: int myArgNr@var514 { } ;
123: } ;
124:
125: std :: list < FunctionCall > functionCalls@var515 ;
126: std :: list < NestedCall > nestedCalls@var516 ;
127:
128: void loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var517 ) ;
129: std :: map < std :: string , std :: list < const CallBase * > > getCallsMap ( ) const ;
130:
131: static std :: list < ErrorMessage :: FileLocation > getErrorPath ( InvalidValueType invalidValue@var518 ,
132: const UnsafeUsage & unsafeUsage@var519 ,
133: const std :: map < std :: string , std :: list < const CallBase * > > & callsMap@var520 ,
134: const char info@var521 [ ] ,
135: const FunctionCall * * const functionCallPtr@var522 ,
136: bool warning@var523 ) ;
137: } ;
138:
139: extern int maxCtuDepth@var524 ;
140:
141: std :: string toString ( const std :: list < FileInfo :: UnsafeUsage > & unsafeUsage@var525 ) ;
142:
143: std :: string getFunctionId ( const Tokenizer * tokenizer@var526 , const Function * function@var527 ) ;
144:
145:
146: FileInfo * getFileInfo ( const Tokenizer * tokenizer@var528 ) ;
147:
148: std :: list < FileInfo :: UnsafeUsage > getUnsafeUsage ( const Tokenizer * tokenizer@var529 , const Settings * settings@var530 , const Check * check@var531 , bool ( * isUnsafeUsage@var532 ) ( const Check * , const Token * , long long * ) ) ;
149:
150: std :: list < FileInfo :: UnsafeUsage > loadUnsafeUsageListFromXml ( const tinyxml2 :: XMLElement * xmlElement@var533 ) ;
151: }

##file cppcheck-2.8/lib/checknullpointer.h

1:
|
32:
33: class ErrorLogger ;
34: class Library ;
35: class Settings ;
36: class Token ;
37: class Tokenizer ;
38:
39: namespace tinyxml2 {
40: class XMLElement ;
41: }
42:
|
48:
49: class CheckNullPointer : public Check {
50: public:
51:
52: CheckNullPointer ( ) : Check ( myName ( ) ) { }
53:
54:
55: CheckNullPointer ( const Tokenizer * tokenizer@var534 , const Settings * settings@var535 , ErrorLogger * errorLogger@var536 )
56: : Check ( myName ( ) , tokenizer@var534 , settings@var535 , errorLogger@var536 ) { }
57:
58:
59: void runChecks ( const Tokenizer * tokenizer@var537 , const Settings * settings@var538 , ErrorLogger * errorLogger@var539 ) override {
60: CheckNullPointer checkNullPointer@var540 (@expr1073744814 tokenizer@var537 , settings@var538 , errorLogger@var539 ) ;
61: checkNullPointer@var540 .@expr1073744815 nullPointer (@expr1073744816 ) ;
62: checkNullPointer@var540 .@expr1073744817 arithmetic (@expr1073744818 ) ;
63: checkNullPointer@var540 .@expr1073744819 nullConstantDereference (@expr1073744820 ) ;
64: }
65:
|
71:
72: static void parseFunctionCall ( const Token & tok@var541 ,
73: std :: list < const Token * > & var@var542 ,
74: const Library * library@var543 ) ;
75:
|
84:
85: bool isPointerDeRef ( const Token * tok@var544 , bool & unknown@var545 ) const ;
86:
87: static bool isPointerDeRef ( const Token * tok@var546 , bool & unknown@var547 , const Settings * settings@var548 ) ;
88:
89:
90: void nullPointer ( ) ;
91:
92:
93: void nullConstantDereference ( ) ;
94:
95: void nullPointerError ( const Token * tok@var549 ) {
96: ValueFlow ::@expr1073744821 Value v@var550 (@expr1073744822 0 ) ;
97: v@var550 .@expr1073744823 setKnown (@expr1073744824 ) ;
98: nullPointerError (@expr1073744825 tok@var549 , "" , &@expr1073744826 v@var550 , false ) ;
99: }
100: void nullPointerError ( const Token * tok@var551 , const std :: string & varname@var552 , const ValueFlow :: Value * value@var553 , bool inconclusive@var554 ) ;
101:
102:
103: class MyFileInfo : public Check :: FileInfo {
104: public:
105:
106: std :: list < CTU :: FileInfo :: UnsafeUsage > unsafeUsage@var555 ;
107:
108:
109: std :: string toString ( ) const override ;
110: } ;
111:
112:
113: Check :: FileInfo * getFileInfo ( const Tokenizer * tokenizer@var556 , const Settings * settings@var557 ) const override ;
114:
115: Check :: FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var558 ) const override ;
116:
117:
118: bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var559 , const std :: list < Check :: FileInfo * > & fileInfo@var560 , const Settings & settings@var561 , ErrorLogger & errorLogger@var562 ) override ;
119:
120: private:
121:
122: void getErrorMessages ( ErrorLogger * errorLogger@var563 , const Settings * settings@var564 ) const override {
123: CheckNullPointer c@var565 (@expr1073744827 nullptr , settings@var564 , errorLogger@var563 ) ;
124: c@var565 .@expr1073744828 nullPointerError (@expr1073744829 nullptr , "pointer" , nullptr , false ) ;
125: c@var565 .@expr1073744830 pointerArithmeticError (@expr1073744831 nullptr , nullptr , false ) ;
126: c@var565 .@expr1073744832 redundantConditionWarning (@expr1073744833 nullptr , nullptr , nullptr , false ) ;
127: }
128:
129:
130: static std :: string myName ( ) {
131: return "Null pointer" ;
132: }
133:
134:
135: std :: string classInfo ( ) const override {
136: return "Null pointers\n- null pointer dereferencing\n- undefined null pointer arithmetic\n"
137:
138: ;
139: }
140:
|
144:
145: void nullPointerByDeRefAndChec ( ) ;
146:
147:
148: void arithmetic ( ) ;
149: void pointerArithmeticError ( const Token * tok@var566 , const ValueFlow :: Value * value@var567 , bool inconclusive@var568 ) ;
150: void redundantConditionWarning ( const Token * tok@var569 , const ValueFlow :: Value * value@var570 , const Token * condition@var571 , bool inconclusive@var572 ) ;
151: } ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var573 ) const {
35: return p@var573 .@expr1073744834 first@var574 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var575 ) const {
42: return p@var575 .@expr1073744835 second@var576 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var577 , const T & x@var578 )
48: {
49: return std ::@expr1073744836 find (@expr1073744837 r@var577 .@expr1073744838 begin (@expr1073744839 ) , r@var577 .@expr3016 end (@expr3017 ) , x@var578 ) !=@expr1073744842 r@var577 .@expr3016 end (@expr3017 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var579 , const T & x@var580 )
54: {
55: return std ::@expr1073744845 find (@expr1073744846 r@var579 .@expr1073744847 begin (@expr1073744848 ) , r@var579 .@expr3025 end (@expr3026 ) , x@var580 ) !=@expr1073744851 r@var579 .@expr3025 end (@expr3026 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var581 , const U & x@var582 )
60: {
61: return std ::@expr1073744854 find (@expr1073744855 r@var581 .@expr1073744856 begin (@expr1073744857 ) , r@var581 .@expr3034 end (@expr3035 ) , x@var582 ) !=@expr1073744860 r@var581 .@expr3034 end (@expr3035 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var583 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744863 t@var583 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var584 , char c@var585 )
74: {
75: return !@expr1073744864 str@var584 .@expr1073744865 empty (@expr1073744866 ) &&@expr1073744867 str@var584 .@expr1073744868 back (@expr1073744869 ) ==@expr1073744870 c@var585 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var586 , const char end@var587 [ ] , unsigned long endlen@var588 )
79: {
80: return (@expr3047 str@var586 .@expr3048 size (@expr3049 ) >=@expr1073744874 endlen@var588 ) &&@expr1073744875 (@expr3047 str@var586 .@expr1073744877 compare (@expr1073744878 str@var586 .@expr3048 size (@expr3049 ) -@expr1073744881 endlen@var588 , endlen@var588 , end@var587 ) ==@expr1073744882 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var589 , const char ( & end@var590 ) [ N ] )
85: {
86: return endsWith (@expr1073744884 str@var589 , end@var590 , N@expr1073744883 -@expr1073744885 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var591 , char q@var592 , const std :: string & p@var593 )
90: {
91: if (@expr1073744886 !@expr1073744887 endsWith (@expr1073744888 str@var591 , q@var592 ) ) {
92: return false ; }
93: if (@expr1073744889 (@expr1073744890 str@var591 .@expr1073744891 length (@expr1073744892 ) +@expr1073744893 1 ) >@expr1073744894 p@var593 .@expr1073744895 length (@expr1073744896 ) &&@expr1073744897 (@expr1073744898 str@var591 .@expr1073744899 compare (@expr1073744900 0 , p@var593 .@expr1073744901 size (@expr1073744902 ) +@expr1073744903 1 , p@var593 +@expr1073744904 q@var592 ) ==@expr1073744905 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var594 , char q@var595 )
99: {
100: static const std ::@expr3082 vector < std ::@expr3082 string > suffixes@var596 {@expr1073744908 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744909 const std ::@expr3082 string &@expr1073744911 p@var597 :@expr1073744912 suffixes@var596 ) {
102: if (@expr1073744913 isPrefixStringCharLiteral (@expr1073744914 str@var594 , q@var595 , p@var597 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var598 )
109: {
110: return isStringCharLiteral (@expr1073744915 str@var598 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var599 )
114: {
115: return isStringCharLiteral (@expr1073744916 str@var599 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var600 , char q@var601 )
119: {
120: const unsigned long quotePos@var602 =@expr1073744917 str@var600 .@expr1073744918 find (@expr1073744919 q@var601 ) ;
121: return str@var600 .@expr1073744920 substr (@expr1073744921 quotePos@var602 +@expr1073744922 1U , str@var600 .@expr1073744923 size (@expr1073744924 ) -@expr1073744925 quotePos@var602 -@expr1073744926 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var603 )
125: {
126: if (@expr1073744927 isStringLiteral (@expr1073744928 str@var603 ) ) {
127: return getStringCharLiteral (@expr1073744929 str@var603 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var604 )
132: {
133: if (@expr1073744930 isCharLiteral (@expr1073744931 str@var604 ) ) {
134: return getStringCharLiteral (@expr1073744932 str@var604 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var605 )
139: {
140: if (@expr1073744933 i@var605 ==@expr1073744934 1 ) {
141: return "st" ; }
142: if (@expr1073744935 i@var605 ==@expr1073744936 2 ) {
143: return "nd" ; }
144: if (@expr1073744937 i@var605 ==@expr1073744938 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var606 , const std :: string & rhs@var607 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var608 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var609 , const std :: string & name@var610 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var611 , const std :: string & name@var612 ) ;
156:
157: void strTolower ( std :: string & str@var613 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var614 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var615 ;
42:
43:
44: std :: string stdValue@var616 ;
45:
46:
47: Standards ( ) : c@var614 ( CLatest ) , cpp@var615 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var617 ) {
50: stdValue@var616 =@expr1073744939 str@var617 ;
51: if (@expr1073744940 str@var617 ==@expr1073744941 "c89" ||@expr1073744942 str@var617 ==@expr1073744943 "C89" ) {
52: c@var614 =@expr1073744944 C89 ;
53: return true ;
54: }
55: if (@expr1073744945 str@var617 ==@expr1073744946 "c99" ||@expr1073744947 str@var617 ==@expr1073744948 "C99" ) {
56: c@var614 =@expr1073744949 C99 ;
57: return true ;
58: }
59: if (@expr1073744950 str@var617 ==@expr1073744951 "c11" ||@expr1073744952 str@var617 ==@expr1073744953 "C11" ) {
60: c@var614 =@expr1073744954 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744955 c@var614 ) {
67: case C89 :@expr3132 ;
68: return "c89" ;
69: case C99 :@expr3132 ;
70: return "c99" ;
71: case C11 :@expr3132 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var618 ) {
77: if (@expr1073744959 std@var618 ==@expr1073744960 "c89" ) {
78: return Standards ::@expr1073744961 C89 ;
79: }
80: if (@expr1073744962 std@var618 ==@expr1073744963 "c99" ) {
81: return Standards ::@expr1073744964 C99 ;
82: }
83: if (@expr1073744965 std@var618 ==@expr1073744966 "c11" ) {
84: return Standards ::@expr1073744967 C11 ;
85: }
86: return Standards ::@expr1073744968 CLatest ;
87: }
88: bool setCPP ( std :: string str@var619 ) {
89: stdValue@var616 =@expr1073744969 str@var619 ;
90: strTolower (@expr1073744970 str@var619 ) ;
91: cpp@var615 =@expr1073744971 getCPP (@expr1073744972 str@var619 ) ;
92: return !@expr1073744973 stdValue@var616 .@expr1073744974 empty (@expr1073744975 ) &&@expr1073744976 str@var619 ==@expr1073744977 getCPP (@expr1073744978 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744979 cpp@var615 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var620 ) {
98: switch (@expr1073744980 std@var620 ) {
99: case CPP03 :@expr3157 ;
100: return "c++03" ;
101: case CPP11 :@expr3157 ;
102: return "c++11" ;
103: case CPP14 :@expr3157 ;
104: return "c++14" ;
105: case CPP17 :@expr3157 ;
106: return "c++17" ;
107: case CPP20 :@expr3157 ;
108: return "c++20" ;
109: case CPP23 :@expr3157 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var621 ) {
115: if (@expr1073744987 std@var621 ==@expr1073744988 "c++03" ) {
116: return Standards ::@expr1073744989 CPP03 ;
117: }
118: if (@expr1073744990 std@var621 ==@expr1073744991 "c++11" ) {
119: return Standards ::@expr1073744992 CPP11 ;
120: }
121: if (@expr1073744993 std@var621 ==@expr1073744994 "c++14" ) {
122: return Standards ::@expr1073744995 CPP14 ;
123: }
124: if (@expr1073744996 std@var621 ==@expr1073744997 "c++17" ) {
125: return Standards ::@expr1073744998 CPP17 ;
126: }
127: if (@expr1073744999 std@var621 ==@expr1073745000 "c++20" ) {
128: return Standards ::@expr1073745001 CPP20 ;
129: }
130: if (@expr1073745002 std@var621 ==@expr1073745003 "c++23" ) {
131: return Standards ::@expr1073745004 CPP23 ;
132: }
133: return Standards ::@expr1073745005 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var625 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var622 ) : errorcode@var625 ( e@var622 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var623 , T && r@var624 ) : errorcode@var625 ( e@var623 ) , reason@var626 ( r@var624 ) { }
66: ErrorCode errorcode@var625 ;
67: std :: string reason@var626 ;
68: } ;
69:
70: Error load ( const char exename@var627 [ ] , const char path@var628 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var629 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var630 [ ] , unsigned long len@var631 ) ;
75:
76: struct AllocFunc {
77: int groupId@var632 ;
78: int arg@var633 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var634 ;
81: int bufferSizeArg1@var635 ;
82: int bufferSizeArg2@var636 ;
83: int reallocArg@var637 ;
84: bool initData@var638 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var639 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var640 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var641 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var642 , int arg@var643 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var644 , int arg@var645 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var646 , int arg@var647 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var648 [ ] ) const {
107: return getAllocDealloc (@expr1073745006 mAlloc@var914 , name@var648 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var649 [ ] ) const {
112: return getAllocDealloc (@expr1073745007 mDealloc@var915 , name@var649 ) ;
113: }
114:
115:
116: int allocId ( const char name@var650 [ ] ) const {
117: const AllocFunc * af@var651 ; af@var651 =@expr1073745008 getAllocDealloc (@expr1073745009 mAlloc@var914 , name@var650 ) ;
118: return af@var651 ?@expr1073745010 af@var651 .@expr1073745011 groupId@var652 :@expr1073745012 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var653 [ ] ) const {
123: const AllocFunc * af@var654 ; af@var654 =@expr1073745013 getAllocDealloc (@expr1073745014 mDealloc@var915 , name@var653 ) ;
124: return af@var654 ?@expr1073745015 af@var654 .@expr1073745016 groupId@var655 :@expr1073745017 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var656 , int id@var657 , int arg@var658 ) {
129: mAlloc@var914 [@expr3194 functionname@var656 ] .@expr1073745019 groupId@var2582 =@expr1073745020 id@var657 ;
130: mAlloc@var914 [@expr3194 functionname@var656 ] .@expr1073745022 arg@var2583 =@expr1073745023 arg@var658 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var659 , int id@var660 , int arg@var661 ) {
134: mDealloc@var915 [@expr3200 functionname@var659 ] .@expr1073745025 groupId@var2584 =@expr1073745026 id@var660 ;
135: mDealloc@var915 [@expr3200 functionname@var659 ] .@expr1073745028 arg@var2585 =@expr1073745029 arg@var661 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var662 , int id@var663 , int arg@var664 , int reallocArg@var665 = 1 ) {
139: mRealloc@var916 [@expr3206 functionname@var662 ] .@expr1073745031 groupId@var2586 =@expr1073745032 id@var663 ;
140: mRealloc@var916 [@expr3206 functionname@var662 ] .@expr1073745034 arg@var2587 =@expr1073745035 arg@var664 ;
141: mRealloc@var916 [@expr3206 functionname@var662 ] .@expr1073745037 reallocArg@var2588 =@expr1073745038 reallocArg@var665 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var666 , bool noreturn@var667 ) {
146: mNoReturn@var917 [@expr1073745039 funcname@var666 ] =@expr1073745040 noreturn@var667 ?@expr1073745041 FalseTrueMaybe ::@expr1073745042 True :@expr1073745043 FalseTrueMaybe ::@expr1073745044 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var668 ) ;
150:
151:
152: static bool ismemory ( const int id@var669 ) {
153: return (@expr3221 (@expr3221 id@var669 >@expr1073745047 0 ) &&@expr1073745048 (@expr3221 (@expr3221 id@var669 &@expr1073745051 1 ) ==@expr1073745052 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var670 ) {
156: return (@expr3229 (@expr3229 func@var670 .@expr3231 groupId@var671 >@expr1073745056 0 ) &&@expr1073745057 (@expr3229 (@expr3229 func@var670 .@expr3231 groupId@var671 &@expr1073745061 1 ) ==@expr1073745062 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var672 ) {
161: return (@expr3239 (@expr3239 id@var672 >@expr1073745065 0 ) &&@expr1073745066 (@expr3239 (@expr3239 id@var672 &@expr1073745069 1 ) ==@expr1073745070 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var673 ) {
164: return (@expr3247 (@expr3247 func@var673 .@expr3249 groupId@var674 >@expr1073745074 0 ) &&@expr1073745075 (@expr3247 (@expr3247 func@var673 .@expr3249 groupId@var674 &@expr1073745079 1 ) ==@expr1073745080 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var675 ) const ;
168: int formatstr_argno ( const Token * ftok@var676 ) const ;
169: bool formatstr_scan ( const Token * ftok@var677 ) const ;
170: bool formatstr_secure ( const Token * ftok@var678 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var679 ;
174: int ptr2Arg@var680 ;
175: int sizeArg@var681 ;
176: int strlenArg@var682 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var683 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var684 ;
182: Standards standards@var685 ;
183: Severity :: SeverityType severity@var686 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var687 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var688 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var689 ) const ;
191: bool matchArguments ( const Token * ftok@var690 , const std :: string & functionName@var691 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var692 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var693 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var694 ) const ;
198: int returnValueContainer ( const Token * ftok@var695 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var696 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var697 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var698 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var699 , std :: string * unknownFunc@var700 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var710 ( -1 ) ,
210: size_templateArgNo@var712 ( -1 ) ,
211: arrayLike_indexOp@var713 ( false ) ,
212: stdStringLike@var714 ( false ) ,
213: stdAssociativeLike@var715 ( false ) ,
214: opLessAllowed@var716 ( true ) ,
215: hasInitializerListConstructor@var717 ( false ) ,
216: unstableErase@var718 ( false ) ,
217: unstableInsert@var719 ( false ) ,
218: view@var720 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var701 ;
248: Yield yield@var702 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var703 ;
252: int templateParameter@var704 ;
253: } ;
254: std :: string startPattern@var705 ; std :: string startPattern2@var706 ; std :: string endPattern@var707 ; std :: string itEndPattern@var708 ;
255: std :: map < std :: string , Function > functions@var709 ;
256: int type_templateArgNo@var710 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var711 ;
258: int size_templateArgNo@var712 ;
259: bool arrayLike_indexOp@var713 ;
260: bool stdStringLike@var714 ;
261: bool stdAssociativeLike@var715 ;
262: bool opLessAllowed@var716 ;
263: bool hasInitializerListConstructor@var717 ;
264: bool unstableErase@var718 ;
265: bool unstableInsert@var719 ;
266: bool view@var720 ;
267:
268: Action getAction ( const std :: string & function@var721 ) const {
269: const std ::@expr1073745081 map < std ::@expr1073745082 string , Function > ::@expr1073745083 const_iterator i@var722 =@expr1073745084 functions@var709 .@expr1073745085 find (@expr1073745086 function@var721 ) ;
270: if (@expr1073745087 i@var722 !=@expr1073745088 functions@var709 .@expr1073745089 end (@expr1073745090 ) ) {
271: return i@var722 .@expr1073745091 second@var723 .@expr1073745092 action@var724 ; }
272: return Action ::@expr1073745093 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var725 ) const {
276: const std ::@expr1073745094 map < std ::@expr1073745095 string , Function > ::@expr1073745096 const_iterator i@var726 =@expr1073745097 functions@var709 .@expr1073745098 find (@expr1073745099 function@var725 ) ;
277: if (@expr1073745100 i@var726 !=@expr1073745101 functions@var709 .@expr1073745102 end (@expr1073745103 ) ) {
278: return i@var726 .@expr1073745104 second@var727 .@expr1073745105 yield@var728 ; }
279: return Yield ::@expr1073745106 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var729 ) ;
283: static Action actionFrom ( const std :: string & actionName@var730 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var731 ;
286: const Container * detectContainer ( const Token * typeStart@var732 , bool iterator@var733 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var734 , bool * isIterator@var735 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var736 ( false ) ,
293: notnull@var737 ( false ) ,
294: notuninit@var738 ( -1 ) ,
295: formatstr@var739 ( false ) ,
296: strz@var740 ( false ) ,
297: optional@var741 ( false ) ,
298: variadic@var742 ( false ) ,
299: iteratorInfo@var748 ( ) ,
300: direction@var756 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var736 ;
303: bool notnull@var737 ;
304: int notuninit@var738 ;
305: bool formatstr@var739 ;
306: bool strz@var740 ;
307: bool optional@var741 ;
308: bool variadic@var742 ;
309: std :: string valid@var743 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var744 ( 0 ) , it@var745 ( false ) , first@var746 ( false ) , last@var747 ( false ) { }
314:
315: int container@var744 ;
316: bool it@var745 ;
317: bool first@var746 ;
318: bool last@var747 ;
319: } ;
320: IteratorInfo iteratorInfo@var748 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var749 , int a@var750 ) : type@var751 ( t@var749 ) , arg@var752 ( a@var750 ) , arg2@var753 ( 0 ) , value@var754 ( 0 ) { }
326: Type type@var751 ;
327: int arg@var752 ;
328: int arg2@var753 ;
329: long long value@var754 ;
330: } ;
331: std :: vector < MinSize > minsizes@var755 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var756 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var757 ;
344: bool use@var758 ;
345: bool leakignore@var759 ;
346: bool isconst@var760 ;
347: bool ispure@var761 ;
348: UseRetValType useretval@var762 ;
349: bool ignore@var763 ;
350: bool formatstr@var764 ;
351: bool formatstr_scan@var765 ;
352: bool formatstr_secure@var766 ;
353: Container :: Action containerAction@var767 ;
354: Container :: Yield containerYield@var768 ;
355: Function ( )
356: : use@var758 ( false ) ,
357: leakignore@var759 ( false ) ,
358: isconst@var760 ( false ) ,
359: ispure@var761 ( false ) ,
360: useretval@var762 ( UseRetValType :: NONE ) ,
361: ignore@var763 ( false ) ,
362: formatstr@var764 ( false ) ,
363: formatstr_scan@var765 ( false ) ,
364: formatstr_secure@var766 ( false ) ,
365: containerAction@var767 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var768 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var769 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var770 ;
372: bool isUse ( const std :: string & functionName@var771 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var772 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var773 , bool pure@var774 ) const ;
375: bool isFunctionConst ( const Token * ftok@var775 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var776 , int argnr@var777 ) const {
378: const ArgumentChecks * arg@var778 ; arg@var778 =@expr1073745107 getarg (@expr1073745108 ftok@var776 , argnr@var777 ) ;
379: return arg@var778 &&@expr1073745109 arg@var778 .@expr1073745110 notbool@var779 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var780 , int argnr@var781 ) const ;
383: bool isuninitargbad ( const Token * ftok@var782 , int argnr@var783 , int indirect@var784 = 0 , bool * hasIndirect@var785 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var786 , int argnr@var787 ) const {
386: const ArgumentChecks * arg@var788 ; arg@var788 =@expr1073745111 getarg (@expr1073745112 ftok@var786 , argnr@var787 ) ;
387: return arg@var788 &&@expr1073745113 arg@var788 .@expr1073745114 formatstr@var789 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var790 , int argnr@var791 ) const {
391: const ArgumentChecks * arg@var792 ; arg@var792 =@expr1073745115 getarg (@expr1073745116 ftok@var790 , argnr@var791 ) ;
392: return arg@var792 &&@expr1073745117 arg@var792 .@expr1073745118 strz@var793 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var794 , int argnr@var795 , const long long argvalue@var796 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var797 , int argnr@var798 , double argvalue@var799 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var800 , int argnr@var801 ) const {
399: const ArgumentChecks * arg@var802 ; arg@var802 =@expr1073745119 getarg (@expr1073745120 ftok@var800 , argnr@var801 ) ;
400: return arg@var802 ?@expr1073745121 arg@var802 .@expr1073745122 valid@var803 :@expr1073745123 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var804 ;
405: std :: string op1@var805 ;
406: std :: string op2@var806 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073745124 isInt (@expr1073745125 op1@var805 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var807 , int argnr@var808 ) const {
413: const ArgumentChecks * arg@var809 ; arg@var809 =@expr1073745126 getarg (@expr1073745127 ftok@var807 , argnr@var808 ) ;
414: return arg@var809 &&@expr1073745128 arg@var809 .@expr3305 iteratorInfo@var810 .@expr1073745130 it@var811 ?@expr1073745131 &@expr1073745132 arg@var809 .@expr3305 iteratorInfo@var810 :@expr1073745134 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var812 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var813 , int argnr@var814 ) const {
420: const ArgumentChecks * arg@var815 ; arg@var815 =@expr1073745135 getarg (@expr1073745136 ftok@var813 , argnr@var814 ) ;
421: return arg@var815 ?@expr1073745137 &@expr1073745138 arg@var815 .@expr1073745139 minsizes@var816 :@expr1073745140 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var817 , int argnr@var818 ) const ;
425:
426: bool markupFile ( const std :: string & path@var819 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var820 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var924 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var821 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var822 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var823 , const std :: string & token@var824 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var825 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var826 ) const ;
443: const std :: string & blockend ( const std :: string & file@var827 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var828 , const std :: string & keyword@var829 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var830 ) const {
448: return mExporters@var927 .@expr1073745141 find (@expr1073745142 prefix@var830 ) !=@expr1073745143 mExporters@var927 .@expr1073745144 end (@expr1073745145 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var831 , const std :: string & token@var832 ) const {
452: const std ::@expr1073745146 map < std ::@expr1073745147 string , ExportedFunctions > ::@expr1073745148 const_iterator it@var833 =@expr1073745149 mExporters@var927 .@expr1073745150 find (@expr1073745151 prefix@var831 ) ;
453: return (@expr1073745152 it@var833 !=@expr1073745153 mExporters@var927 .@expr1073745154 end (@expr1073745155 ) &&@expr1073745156 it@var833 .@expr1073745157 second@var834 .@expr1073745158 isPrefix (@expr1073745159 token@var832 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var835 , const std :: string & token@var836 ) const {
457: const std ::@expr1073745160 map < std ::@expr1073745161 string , ExportedFunctions > ::@expr1073745162 const_iterator it@var837 =@expr1073745163 mExporters@var927 .@expr1073745164 find (@expr1073745165 prefix@var835 ) ;
458: return (@expr1073745166 it@var837 !=@expr1073745167 mExporters@var927 .@expr1073745168 end (@expr1073745169 ) &&@expr1073745170 it@var837 .@expr1073745171 second@var838 .@expr1073745172 isSuffix (@expr1073745173 token@var836 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var839 , const std :: string & importer@var840 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var841 , Container :: Yield yield@var842 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var843 , Container :: Action action@var844 ) const ;
465:
466: bool isreflection ( const std :: string & token@var845 ) const {
467: return mReflection@var929 .@expr1073745174 find (@expr1073745175 token@var845 ) !=@expr1073745176 mReflection@var929 .@expr1073745177 end (@expr1073745178 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var846 ) const {
471: const std ::@expr1073745179 map < std ::@expr1073745180 string , int > ::@expr1073745181 const_iterator it@var847 =@expr1073745182 mReflection@var929 .@expr1073745183 find (@expr1073745184 token@var846 ) ;
472: if (@expr1073745185 it@var847 !=@expr1073745186 mReflection@var929 .@expr1073745187 end (@expr1073745188 ) ) {
473: return it@var847 .@expr1073745189 second@var848 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var849 ;
478:
479: struct SmartPointer {
480: std :: string name@var850 ; name@var850 = "" ;
481: bool unique@var851 ; unique@var851 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var852 ;
485: bool isSmartPointer ( const Token * tok@var853 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var854 ) const ;
487:
488: struct PodType {
489: unsigned int size@var855 ;
490: char sign@var856 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var857 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var858 ) const {
494: const std ::@expr1073745190 unordered_map < std ::@expr1073745191 string , PodType > ::@expr1073745192 const_iterator it@var859 =@expr1073745193 mPodTypes@var930 .@expr1073745194 find (@expr1073745195 name@var858 ) ;
495: return (@expr3372 it@var859 !=@expr1073745197 mPodTypes@var930 .@expr1073745198 end (@expr1073745199 ) ) ?@expr1073745200 &@expr1073745201 (@expr3372 it@var859 .@expr1073745203 second@var860 ) :@expr1073745204 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var871 ( false )
501: , mUnsigned@var872 ( false )
502: , mLong@var873 ( false )
503: , mPointer@var874 ( false )
504: , mPtrPtr@var875 ( false )
505: , mConstPtr@var876 ( false ) { }
506: bool operator== ( const PlatformType & type@var861 ) const {
507: return (@expr1073745205 mSigned@var871 ==@expr1073745206 type@var861 .@expr1073745207 mSigned@var862 &&@expr1073745208
508: mUnsigned@var872 ==@expr1073745209 type@var861 .@expr1073745210 mUnsigned@var863 &&@expr1073745211
509: mLong@var873 ==@expr1073745212 type@var861 .@expr1073745213 mLong@var864 &&@expr1073745214
510: mPointer@var874 ==@expr1073745215 type@var861 .@expr1073745216 mPointer@var865 &&@expr1073745217
511: mPtrPtr@var875 ==@expr1073745218 type@var861 .@expr1073745219 mPtrPtr@var866 &&@expr1073745220
512: mConstPtr@var876 ==@expr1073745221 type@var861 .@expr1073745222 mConstPtr@var867 &&@expr1073745223
513: mType@var870 ==@expr1073745224 type@var861 .@expr1073745225 mType@var868 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var869 ) const {
516: return !@expr1073745226 (@expr1073745227 *@expr1073745228 this@expr1073745229 ==@expr1073745230 type@var869 ) ;
517: }
518: std :: string mType@var870 ;
519: bool mSigned@var871 ;
520: bool mUnsigned@var872 ;
521: bool mLong@var873 ;
522: bool mPointer@var874 ;
523: bool mPtrPtr@var875 ;
524: bool mConstPtr@var876 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var877 ) const {
529: const std ::@expr1073745231 map < std ::@expr1073745232 string , PlatformType > ::@expr1073745233 const_iterator it@var878 =@expr1073745234 mPlatformTypes@var880 .@expr1073745235 find (@expr1073745236 name@var877 ) ;
530: return (@expr3413 it@var878 !=@expr1073745238 mPlatformTypes@var880 .@expr1073745239 end (@expr1073745240 ) ) ?@expr1073745241 &@expr1073745242 (@expr3413 it@var878 .@expr1073745244 second@var879 ) :@expr1073745245 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var880 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var881 , const std :: string & platform@var882 ) const {
536: const std ::@expr1073745246 map < std ::@expr3423 string , Platform > ::@expr1073745248 const_iterator it@var883 =@expr1073745249 mPlatforms@var932 .@expr1073745250 find (@expr1073745251 platform@var882 ) ;
537: if (@expr1073745252 it@var883 !=@expr1073745253 mPlatforms@var932 .@expr1073745254 end (@expr1073745255 ) ) {
538: const PlatformType * const type@var884 ; type@var884 =@expr1073745256 it@var883 .@expr1073745257 second@var885 .@expr1073745258 platform_type (@expr1073745259 name@var881 ) ;
539: if (@expr1073745260 type@var884 ) {
540: return type@var884 ; }
541: }
542:
543: const std ::@expr1073745261 map < std ::@expr3423 string , PlatformType > ::@expr1073745263 const_iterator it2@var886 =@expr1073745264 mPlatformTypes@var931 .@expr1073745265 find (@expr1073745266 name@var881 ) ;
544: return (@expr3443 it2@var886 !=@expr1073745268 mPlatformTypes@var931 .@expr1073745269 end (@expr1073745270 ) ) ?@expr1073745271 &@expr1073745272 (@expr3443 it2@var886 .@expr1073745274 second@var887 ) :@expr1073745275 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var888 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var889 , Library :: Container :: Yield y@var890 , const std :: string & fallback@var891 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var892 , const std :: string & typeName@var893 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var894 , const std :: string & name@var895 , std :: set < std :: string > & unknown_elements@var896 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var897 ) {
565: mPrefixes@var901 .@expr1073745276 insert (@expr1073745277 prefix@var897 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var898 ) {
568: mSuffixes@var902 .@expr1073745278 insert (@expr1073745279 suffix@var898 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var899 ) const {
571: return (@expr1073745280 mPrefixes@var901 .@expr1073745281 find (@expr1073745282 prefix@var899 ) !=@expr1073745283 mPrefixes@var901 .@expr1073745284 end (@expr1073745285 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var900 ) const {
574: return (@expr1073745286 mSuffixes@var902 .@expr1073745287 find (@expr1073745288 suffix@var900 ) !=@expr1073745289 mSuffixes@var902 .@expr1073745290 end (@expr1073745291 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var901 ;
579: std :: set < std :: string > mSuffixes@var902 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var910 ( 0 ) { }
584:
585: void setStart ( const char * s@var903 ) {
586: mStart@var908 =@expr1073745292 s@var903 ;
587: }
588: void setEnd ( const char * e@var904 ) {
589: mEnd@var909 =@expr1073745293 e@var904 ;
590: }
591: void setOffset ( const int o@var905 ) {
592: mOffset@var910 =@expr1073745294 o@var905 ;
593: }
594: void addBlock ( const char * blockName@var906 ) {
595: mBlocks@var911 .@expr1073745295 insert (@expr1073745296 blockName@var906 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var908 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var909 ;
602: }
603: int offset ( ) const {
604: return mOffset@var910 ;
605: }
606: bool isBlock ( const std :: string & blockName@var907 ) const {
607: return mBlocks@var911 .@expr1073745297 find (@expr1073745298 blockName@var907 ) !=@expr1073745299 mBlocks@var911 .@expr1073745300 end (@expr1073745301 ) ;
608: }
609:
610: private:
611: std :: string mStart@var908 ;
612: std :: string mEnd@var909 ;
613: int mOffset@var910 ;
614: std :: set < std :: string > mBlocks@var911 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var912 ;
618: std :: set < std :: string > mFiles@var913 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var914 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var915 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var916 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var917 ;
623: std :: map < std :: string , std :: string > mReturnValue@var918 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var919 ;
625: std :: map < std :: string , int > mReturnValueContainer@var920 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var921 ;
627: std :: map < std :: string , bool > mReportErrors@var922 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var923 ;
629: std :: set < std :: string > mMarkupExtensions@var924 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var925 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var926 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var927 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var928 ;
634: std :: map < std :: string , int > mReflection@var929 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var930 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var931 ;
637: std :: map < std :: string , Platform > mPlatforms@var932 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var933 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var934 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var935 , int argnr@var936 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var937 , bool * error@var938 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var939 , const std :: string & name@var940 ) {
646: const std ::@expr1073745302 map < std ::@expr1073745303 string , AllocFunc > ::@expr1073745304 const_iterator it@var941 =@expr1073745305 data@var939 .@expr1073745306 find (@expr1073745307 name@var940 ) ;
647: return (@expr1073745308 it@var941 ==@expr1073745309 data@var939 .@expr1073745310 end (@expr1073745311 ) ) ?@expr1073745312 nullptr :@expr1073745313 &@expr1073745314 it@var941 .@expr1073745315 second@var942 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var943 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var944 ,
654: const Settings * settings@var945 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var946 = nullptr ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var947 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var948 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var949 ;
69: std :: string mScope@var950 ;
70: std :: string mName@var951 ;
71: std :: string mFullName@var952 ;
72: const Token * mNameToken@var953 ;
73: const Token * mParamEnd@var954 ;
74: unsigned int mFlags@var955 ;
75:
76: enum Anonymous1 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var956 ) {
90: setFlag (@expr1073745316 fIsClass , state@var956 ) ;
91: }
92: void isFunction ( bool state@var957 ) {
93: setFlag (@expr1073745317 fIsFunction , state@var957 ) ;
94: }
95: void isVariable ( bool state@var958 ) {
96: setFlag (@expr1073745318 fIsVariable , state@var958 ) ;
97: }
98: void isAlias ( bool state@var959 ) {
99: setFlag (@expr1073745319 fIsAlias , state@var959 ) ;
100: }
101: void isSpecialization ( bool state@var960 ) {
102: setFlag (@expr1073745320 fIsSpecialization , state@var960 ) ;
103: }
104: void isPartialSpecialization ( bool state@var961 ) {
105: setFlag (@expr1073745321 fIsPartialSpecialization , state@var961 ) ;
106: }
107: void isForwardDeclaration ( bool state@var962 ) {
108: setFlag (@expr1073745322 fIsForwardDeclaration , state@var962 ) ;
109: }
110: void isVariadic ( bool state@var963 ) {
111: setFlag (@expr1073745323 fIsVariadic , state@var963 ) ;
112: }
113: void isFriend ( bool state@var964 ) {
114: setFlag (@expr1073745324 fIsFriend , state@var964 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var965 ) const {
123: return (@expr3501 (@expr3501 mFlags@var955 &@expr1073745327 flag@var965 ) !=@expr1073745328 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var966 , bool state@var967 ) {
132: mFlags@var955 =@expr1073745329 state@var967 ?@expr1073745330 mFlags@var955 |@expr1073745331 flag@var966 :@expr1073745332 mFlags@var955 &@expr1073745333 ~@expr1073745334 flag@var966 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var968 , const std :: string & scope@var969 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var970 , const std :: string & scope@var971 , const Token * nameToken@var972 , const Token * paramEnd@var973 ) ;
150: TokenAndName ( const TokenAndName & other@var974 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var975 ) const {
154: return mToken@var949 ==@expr1073745335 rhs@var975 .@expr1073745336 mToken@var976 &&@expr1073745337 mScope@var950 ==@expr1073745338 rhs@var975 .@expr1073745339 mScope@var977 &&@expr1073745340 mName@var951 ==@expr1073745341 rhs@var975 .@expr1073745342 mName@var978 &&@expr1073745343 mFullName@var952 ==@expr1073745344 rhs@var975 .@expr1073745345 mFullName@var979 &&@expr1073745346
155: mNameToken@var953 ==@expr1073745347 rhs@var975 .@expr1073745348 mNameToken@var980 &&@expr1073745349 mParamEnd@var954 ==@expr1073745350 rhs@var975 .@expr1073745351 mParamEnd@var981 &&@expr1073745352 mFlags@var955 ==@expr1073745353 rhs@var975 .@expr1073745354 mFlags@var982 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var949 ;
160: }
161: void token ( Token * token@var983 ) {
162: mToken@var949 =@expr1073745355 token@var983 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var950 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var951 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var952 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var953 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var954 ;
178: }
179: void paramEnd ( const Token * end@var984 ) {
180: mParamEnd@var954 =@expr1073745356 end@var984 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745357 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745358 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745359 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745360 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745361 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745362 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745363 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745364 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745365 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var985 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var986 ) const {
243:
244:
245: return (@expr3542 (@expr3542 mFlags@var955 &@expr1073745368 fFamilyMask ) &@expr1073745369 (@expr3542 decl@var986 .@expr1073745371 mFlags@var987 &@expr1073745372 fFamilyMask ) ) !=@expr1073745373 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var988 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var989 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var990 , const unsigned long numberOfArguments@var991 , bool variadic@var992 , const char patternAfter@var993 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var994 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var995 , int & namepos@var996 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var997 , int & namepos@var998 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var999 , int & namepos@var1000 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1001 ,
306: bool & codeWithTemplates@var1002 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1003 , bool isTemplate@var1004 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1005 = nullptr , Token * backToken@var1006 = nullptr , bool isTemplate@var1007 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1008 , Token * end@var1009 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1010 , const std :: string & scope@var1011 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1012 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1013 ,
393: const std :: list < const Token * > & specializations@var1014 ,
394: const std :: time_t maxtime@var1015 ,
395: std :: set < std :: string > & expandedtemplates@var1016 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1017 , const Token * tok@var1018 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1019 , const Token * tok@var1020 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1021 ,
422: const TokenAndName & templateInstantiation@var1022 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1023 ,
424: const std :: string & newName@var1024 ,
425: bool copy@var1025 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1026 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1027 ,
435: const std :: string & newName@var1028 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1029 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1030 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1031 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1032 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1033 ,
458: const Token * templateInstantiationNameToken@var1034 ,
459: const std :: list < const Token * > & specializations@var1035 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1036 , const Token * end@var1037 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1038 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1039 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1040 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1041 ,
487: const std :: string & indent@var1042 = "    " ) const ;
488: void printOut ( const std :: string & text@var1043 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1044 ;
491: TokenList & mTokenList@var1045 ;
492: const Settings * mSettings@var1046 ;
493: ErrorLogger * mErrorLogger@var1047 ;
494: bool mChanged@var1048 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1049 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1050 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1051 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1052 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1053 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1054 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1055 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1056 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1057 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1058 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1059 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1060 ;
57: Token * back@var1061 ;
58: const TokenList * list@var1062 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1063 , const Token * bodyEnd_@var1064 , const std :: set < std :: string > & usingNamespaces_@var1065 = std :: set < std :: string > ( ) ) : name@var1066 ( name_@var1063 ) , bodyEnd@var1067 ( bodyEnd_@var1064 ) , usingNamespaces@var1068 ( usingNamespaces_@var1065 ) { }
63: std :: string name@var1066 ;
64: const Token * const bodyEnd@var1067 ;
65: std :: set < std :: string > usingNamespaces@var1068 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1069 ;
70: int mFileIndex@var1070 ;
71: int mLineNumber@var1071 ;
72: int mColumn@var1072 ;
73: int mExprId@var1073 ;
74:
75:
76: Token * mAstOperand1@var1074 ;
77: Token * mAstOperand2@var1075 ;
78: Token * mAstParent@var1076 ;
79:
80:
81: const Scope * mScope@var1077 ;
82: union {
83: const Function * mFunction@var1078 ;
84: const Variable * mVariable@var1079 ;
85: const :: Type * mType@var1080 ;
86: const Enumerator * mEnumerator@var1081 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1082 ;
94:
|
97:
98: int mIndex@var1083 ;
99:
100:
101: std :: string * mOriginalName@var1084 ;
102:
103:
104: ValueType * mValueType@var1085 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1086 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1087 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1088 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1089 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1090 ;
119: long long value@var1091 ;
120: struct CppcheckAttributes * next@var1092 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1093 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1094 ;
126:
127:
128: unsigned char mBits@var1095 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1096 , long long value@var1097 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1098 , long long * value@var1099 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1069 ( 0 )
135: , mFileIndex@var1070 ( 0 )
136: , mLineNumber@var1071 ( 0 )
137: , mColumn@var1072 ( 0 )
138: , mExprId@var1073 ( 0 )
139: , mAstOperand1@var1074 ( nullptr )
140: , mAstOperand2@var1075 ( nullptr )
141: , mAstParent@var1076 ( nullptr )
142: , mScope@var1077 ( nullptr )
143: , mFunction@var1078 ( nullptr )
144: , mProgressValue@var1082 ( 0 )
145: , mIndex@var1083 ( 0 )
146: , mOriginalName@var1084 ( nullptr )
147: , mValueType@var1085 ( nullptr )
148: , mValues@var1086 ( nullptr )
149: , mTemplateSimplifierPointers@var1088 ( nullptr )
150: , mScopeInfo@var1089 ( nullptr )
151: , mCppcheckAttributes@var1093 ( nullptr )
152: , mCpp11init@var1094 ( Cpp11init :: UNKNOWN )
153: , mBits@var1095 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1100 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1101 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1102 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1103 ) {
199: mStr@var1315 =@expr1073745374 s@var1103 ;
200: mImpl@var1321 .@expr1073745375 mVarId@var1352 =@expr1073745376 0 ;
201:
202: update_property_info (@expr1073745377 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1104 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1315 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1105 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1106 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1107 ) const ;
236: Token * tokAt ( int index@var1108 ) {
237: return const_cast < Token *@expr3554 > (@expr1073745379 const_cast < const Token *@expr3554 > (@expr1073745381 this@expr1073745382 ) .@expr1073745383 tokAt (@expr1073745384 index@var1108 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1109 ) const ;
245: Token * linkAt ( int index@var1110 ) {
246: return const_cast < Token *@expr3561 > (@expr1073745386 const_cast < const Token *@expr3561 > (@expr1073745388 this@expr1073745389 ) .@expr1073745390 linkAt (@expr1073745391 index@var1110 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1111 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1112 , const char ( & pattern@var1113 ) [ count ] ) {
276: return simpleMatch (@expr1073745393 tok@var1112 , pattern@var1113 , count@expr1073745392 -@expr1073745394 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1114 , const char pattern@var1115 [ ] , unsigned long pattern_len@var1116 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1117 , const char pattern@var1118 [ ] , int varid@var1119 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1120 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1121 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1122 , const Settings * const settings@var1123 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1124 , long long index@var1125 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1321 .@expr1073745395 mValueType@var1353 ;
366: }
367: void setValueType ( ValueType * vt@var1126 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1127 ; top@var1127 =@expr1073745396 this@expr1073745397 ;
371: while (@expr1073745398 top@var1127 &&@expr1073745399 !@expr1073745400 Token ::@expr1073745401 Match (@expr1073745402 top@var1127 .@expr3579 astParent (@expr3580 ) , ",|(" ) ) {
372: top@var1127 =@expr1073745405 top@var1127 .@expr3579 astParent (@expr3580 ) ; }
373: return top@var1127 ?@expr1073745408 top@var1127 .@expr1073745409 mImpl@var1128 .@expr1073745410 mValueType@var1129 :@expr1073745411 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1319 ;
378: }
379: void tokType ( Token :: Type t@var1130 ) {
380: mTokType@var1319 =@expr1073745412 t@var1130 ;
381:
382: const bool memoizedIsName@var1131 =@expr1073745413 mTokType@var1319 ==@expr1073745414 eName ||@expr1073745415 mTokType@var1319 ==@expr1073745416 eType ||@expr1073745417 mTokType@var1319 ==@expr1073745418 eVariable ||@expr1073745419
383: mTokType@var1319 ==@expr1073745420 eFunction ||@expr1073745421 mTokType@var1319 ==@expr1073745422 eKeyword ||@expr1073745423 mTokType@var1319 ==@expr3600 eBoolean ||@expr1073745425
384: mTokType@var1319 ==@expr3602 eEnumerator ;
385: setFlag (@expr1073745427 fIsName , memoizedIsName@var1131 ) ;
386:
387: const bool memoizedIsLiteral@var1132 =@expr1073745428 mTokType@var1319 ==@expr1073745429 eNumber ||@expr1073745430 mTokType@var1319 ==@expr1073745431 eString ||@expr1073745432 mTokType@var1319 ==@expr1073745433 eChar ||@expr1073745434
388: mTokType@var1319 ==@expr3600 eBoolean ||@expr1073745436 mTokType@var1319 ==@expr1073745437 eLiteral ||@expr1073745438 mTokType@var1319 ==@expr3602 eEnumerator ;
389: setFlag (@expr1073745440 fIsLiteral , memoizedIsLiteral@var1132 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1319 ==@expr1073745441 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745442 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1320 ==@expr1073745443 fIsName &&@expr1073745444 mTokType@var1319 ==@expr1073745445 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745446 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1319 ==@expr1073745447 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1319 ==@expr1073745448 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745449 isConstOp (@expr1073745450 ) ||@expr1073745451
412: isAssignmentOp (@expr1073745452 ) ||@expr1073745453
413: mTokType@var1319 ==@expr1073745454 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745455 isArithmeticalOp (@expr1073745456 ) ||@expr1073745457
417: mTokType@var1319 ==@expr1073745458 eLogicalOp ||@expr1073745459
418: mTokType@var1319 ==@expr1073745460 eComparisonOp ||@expr1073745461
419: mTokType@var1319 ==@expr1073745462 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745463 ) ||@expr1073745464
423: mTokType@var1319 ==@expr1073745465 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1319 ==@expr1073745466 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1319 ==@expr1073745467 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1319 ==@expr1073745468 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1319 ==@expr1073745469 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1319 ==@expr1073745470 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745471 ) !=@expr1073745472 nullptr &&@expr1073745473 astOperand2 (@expr1073745474 ) !=@expr1073745475 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1133 ) const {
444: return s@var1133 ==@expr1073745476 mStr@var1315 &&@expr1073745477 astOperand1 (@expr1073745478 ) !=@expr1073745479 nullptr &&@expr1073745480 astOperand2 (@expr1073745481 ) ==@expr1073745482 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1320 ;
450: }
451: void flags ( const unsigned int flags_@var1134 ) {
452: mFlags@var1320 =@expr1073745483 flags_@var1134 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745484 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1135 ) {
458: setFlag (@expr1073745485 fIsUnsigned , sign@var1135 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745486 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1136 ) {
464: setFlag (@expr1073745487 fIsSigned , sign@var1136 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745488 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1137 ) {
470: setFlag (@expr1073745489 fIsPointerCompare , b@var1137 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745490 fIsLong ) ;
474: }
475: void isLong ( bool size@var1138 ) {
476: setFlag (@expr1073745491 fIsLong , size@var1138 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745492 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1139 ) {
482: setFlag (@expr1073745493 fIsStandardType , b@var1139 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745494 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1140 ) {
488: setFlag (@expr1073745495 fIsExpandedMacro , m@var1140 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745496 fIsCast ) ;
492: }
493: void isCast ( bool c@var1141 ) {
494: setFlag (@expr1073745497 fIsCast , c@var1141 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745498 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1142 ) {
500: setFlag (@expr1073745499 fIsAttributeConstructor , ac@var1142 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745500 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1143 ) {
506: setFlag (@expr1073745501 fIsAttributeDestructor , value@var1143 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745502 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1144 ) {
512: setFlag (@expr1073745503 fIsAttributeUnused , unused@var1144 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745504 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1145 ) {
518: setFlag (@expr1073745505 fIsAttributeUsed , unused@var1145 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745506 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1146 ) {
524: setFlag (@expr1073745507 fIsAttributePure , value@var1146 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745508 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1147 ) {
530: setFlag (@expr1073745509 fIsAttributeConst , value@var1147 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745510 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1148 ) {
536: setFlag (@expr1073745511 fIsAttributeNoreturn , value@var1148 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745512 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1149 ) {
542: setFlag (@expr1073745513 fIsAttributeNothrow , value@var1149 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745514 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1150 ) {
548: setFlag (@expr1073745515 fIsAttributePacked , value@var1150 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745516 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1151 ) {
554: setFlag (@expr1073745517 fIsAttributeNodiscard , value@var1151 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745518 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1152 ) {
560: setFlag (@expr1073745519 fIsAttributeMaybeUnused , value@var1152 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1153 , long long value@var1154 ) {
563: mImpl@var1321 .@expr1073745520 setCppcheckAttribute (@expr1073745521 type@var1153 , value@var1154 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1155 , long long * value@var1156 ) const {
566: return mImpl@var1321 .@expr1073745522 getCppcheckAttribute (@expr1073745523 type@var1155 , value@var1156 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745524 mImpl@var1321 .@expr1073745525 mCppcheckAttributes@var1354 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745526 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745527 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1157 ) {
578: setFlag (@expr1073745528 fIsOperatorKeyword , value@var1157 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745529 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1158 ) {
584: setFlag (@expr1073745530 fIsComplex , value@var1158 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745531 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1159 ) {
590: setFlag (@expr1073745532 fIsEnumType , value@var1159 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745533 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1160 ) {
596: setFlag (@expr1073745534 fAtAddress , b@var1160 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745535 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1161 ) {
602: setFlag (@expr1073745536 fIncompleteVar , b@var1161 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745537 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1162 ) {
609: setFlag (@expr1073745538 fIsIncompleteConstant , b@var1162 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745539 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1163 ) {
616: setFlag (@expr1073745540 fConstexpr , b@var1163 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745541 fExternC ) ;
621: }
622: void isExternC ( bool b@var1164 ) {
623: setFlag (@expr1073745542 fExternC , b@var1164 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745543 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1165 ) {
630: setFlag (@expr1073745544 fIsSplitVarDeclComma , b@var1165 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745545 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1166 ) {
637: setFlag (@expr1073745546 fIsSplitVarDeclEq , b@var1166 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745547 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1167 ) {
644: setFlag (@expr1073745548 fIsImplicitInt , b@var1167 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745549 fIsInline ) ;
649: }
650: void isInline ( bool b@var1168 ) {
651: setFlag (@expr1073745550 fIsInline , b@var1168 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745551 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1169 ) {
658: setFlag (@expr1073745552 fIsRemovedVoidParameter , b@var1169 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745553 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1170 ) {
665: setFlag (@expr1073745554 fIsTemplate , b@var1170 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745555 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1171 ) {
672: setFlag (@expr1073745556 fIsSimplifedScope , b@var1171 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1321 .@expr1073745557 mBits@var1355 >@expr1073745558 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1321 .@expr1073745559 mBits@var1355 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1321 .@expr1073745560 mTemplateSimplifierPointers@var1356 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1172 ) {
685: if (@expr1073745561 !@expr1073745562 mImpl@var1321 .@expr3739 mTemplateSimplifierPointers@var1356 ) {
686: mImpl@var1321 .@expr3739 mTemplateSimplifierPointers@var1356 =@expr1073745565 new std ::@expr1073745566 set < TemplateSimplifier ::@expr1073745567 TokenAndName *@expr1073745568 > ; }
687: mImpl@var1321 .@expr3739 mTemplateSimplifierPointers@var1356 .@expr1073745570 insert (@expr1073745571 tokenAndName@var1172 ) ;
688: }
689: void setBits ( const unsigned char b@var1173 ) {
690: mImpl@var1321 .@expr1073745572 mBits@var1355 =@expr1073745573 b@var1173 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3750 (@expr3750 (@expr3750 mTokType@var1319 ==@expr1073745577 eString ) &&@expr1073745578 isPrefixStringCharLiteral (@expr1073745579 mStr@var1315 , '"' , "u8" ) ) ||@expr1073745580
695: (@expr3750 (@expr3750 mTokType@var1319 ==@expr1073745583 eChar ) &&@expr1073745584 isPrefixStringCharLiteral (@expr1073745585 mStr@var1315 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3762 (@expr3762 (@expr3762 mTokType@var1319 ==@expr1073745589 eString ) &&@expr1073745590 isPrefixStringCharLiteral (@expr1073745591 mStr@var1315 , '"' , "u" ) ) ||@expr1073745592
700: (@expr3762 (@expr3762 mTokType@var1319 ==@expr1073745595 eChar ) &&@expr1073745596 isPrefixStringCharLiteral (@expr1073745597 mStr@var1315 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3774 (@expr3774 (@expr3774 mTokType@var1319 ==@expr1073745601 eString ) &&@expr1073745602 isPrefixStringCharLiteral (@expr1073745603 mStr@var1315 , '"' , "U" ) ) ||@expr1073745604
705: (@expr3774 (@expr3774 mTokType@var1319 ==@expr1073745607 eChar ) &&@expr1073745608 isPrefixStringCharLiteral (@expr1073745609 mStr@var1315 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3786 (@expr3786 (@expr3786 mTokType@var1319 ==@expr1073745613 eString ) &&@expr1073745614 isPrefixStringCharLiteral (@expr1073745615 mStr@var1315 , '"' , "" ) ) ||@expr1073745616
710: (@expr3786 (@expr3786 mTokType@var1319 ==@expr1073745619 eChar ) &&@expr1073745620 isPrefixStringCharLiteral (@expr1073745621 mStr@var1315 , '\'' , "" ) &&@expr1073745622 mStr@var1315 .@expr1073745623 length (@expr1073745624 ) ==@expr1073745625 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3802 (@expr3802 (@expr3802 mTokType@var1319 ==@expr1073745629 eChar ) &&@expr1073745630 isPrefixStringCharLiteral (@expr1073745631 mStr@var1315 , '\'' , "" ) ) &&@expr1073745632
715: (@expr3802 mStr@var1315 .@expr1073745634 length (@expr1073745635 ) >@expr1073745636 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745637 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1174 ) {
738: setFlag (@expr1073745638 fIsTemplateArg , value@var1174 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1175 , const char ( & pattern@var1176 ) [ count ] ) {
743: return findsimplematch (@expr1073745640 startTok@var1175 , pattern@var1176 , count@expr1073745639 -@expr1073745641 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1177 , const char pattern@var1178 [ ] , unsigned long pattern_len@var1179 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1180 , const char ( & pattern@var1181 ) [ count ] , const Token * const end@var1182 ) {
749: return findsimplematch (@expr1073745643 startTok@var1180 , pattern@var1181 , count@expr1073745642 -@expr1073745644 1 , end@var1182 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1183 , const char pattern@var1184 [ ] , unsigned long pattern_len@var1185 , const Token * const end@var1186 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1187 , const char pattern@var1188 [ ] , const int varId@var1189 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1190 , const char pattern@var1191 [ ] , const Token * const end@var1192 , const int varId@var1193 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1194 , const char ( & pattern@var1195 ) [ count ] ) {
758: return findsimplematch (@expr1073745646 startTok@var1194 , pattern@var1195 , count@expr1073745645 -@expr1073745647 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1196 , const char pattern@var1197 [ ] , unsigned long pattern_len@var1198 ) {
761: return const_cast < Token *@expr3824 > (@expr1073745649 findsimplematch (@expr1073745650 const_cast < const Token *@expr3824 > (@expr1073745652 startTok@var1196 ) , pattern@var1197 , pattern_len@var1198 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1199 , const char ( & pattern@var1200 ) [ count ] , const Token * const end@var1201 ) {
765: return findsimplematch (@expr1073745654 startTok@var1199 , pattern@var1200 , count@expr1073745653 -@expr1073745655 1 , end@var1201 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1202 , const char pattern@var1203 [ ] , unsigned long pattern_len@var1204 , const Token * const end@var1205 ) {
768: return const_cast < Token *@expr3832 > (@expr1073745657 findsimplematch (@expr1073745658 const_cast < const Token *@expr3832 > (@expr1073745660 startTok@var1202 ) , pattern@var1203 , pattern_len@var1204 , end@var1205 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1206 , const char pattern@var1207 [ ] , const int varId@var1208 = 0 ) {
772: return const_cast < Token *@expr3837 > (@expr1073745662 findmatch (@expr1073745663 const_cast < const Token *@expr3837 > (@expr1073745665 startTok@var1206 ) , pattern@var1207 , varId@var1208 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1209 , const char pattern@var1210 [ ] , const Token * const end@var1211 , const int varId@var1212 = 0 ) {
775: return const_cast < Token *@expr3842 > (@expr1073745667 findmatch (@expr1073745668 const_cast < const Token *@expr3842 > (@expr1073745670 startTok@var1209 ) , pattern@var1210 , end@var1211 , varId@var1212 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1213 , const char * haystack@var1214 , int varid@var1215 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1321 .@expr1073745671 mFileIndex@var1357 ;
796: }
797: void fileIndex ( int indexOfFile@var1216 ) {
798: mImpl@var1321 .@expr1073745672 mFileIndex@var1357 =@expr1073745673 indexOfFile@var1216 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1321 .@expr1073745674 mLineNumber@var1358 ;
803: }
804: void linenr ( int lineNumber@var1217 ) {
805: mImpl@var1321 .@expr1073745675 mLineNumber@var1358 =@expr1073745676 lineNumber@var1217 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1321 .@expr1073745677 mColumn@var1359 ;
810: }
811: void column ( int c@var1218 ) {
812: mImpl@var1321 .@expr1073745678 mColumn@var1359 =@expr1073745679 c@var1218 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1316 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1219 , const Token * end@var1220 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1221 , const std :: string & originalNameStr@var1222 = emptyString@var1 , bool prepend@var1223 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1224 , const std :: string & originalNameStr@var1225 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745680 tokenStr@var1224 , originalNameStr@var1225 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1317 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1321 .@expr1073745681 mVarId@var1352 ;
851: }
852: void varId ( int id@var1226 ) {
853: mImpl@var1321 .@expr1073745682 mVarId@var1352 =@expr1073745683 id@var1226 ;
854: if (@expr1073745684 id@var1226 !=@expr1073745685 0 ) {
855: tokType (@expr1073745686 eVariable ) ;
856: isStandardType (@expr1073745687 false ) ;
857: } else {
858: update_property_info (@expr1073745688 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745689 mImpl@var1321 .@expr3866 mExprId@var1360 ) {
864: return mImpl@var1321 .@expr3866 mExprId@var1360 ; }
865: return mImpl@var1321 .@expr1073745692 mVarId@var1352 ;
866: }
867: void exprId ( int id@var1227 ) {
868: mImpl@var1321 .@expr1073745693 mExprId@var1360 =@expr1073745694 id@var1227 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1228 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1229 , const std :: vector < std :: string > & fileNames@var1230 ) const ;
888:
|
891:
892: void printLines ( int lines@var1231 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1232 , Token * start@var1233 , Token * end@var1234 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1235 ; varid@var1235 = false ;
905: bool exprid@var1236 ; exprid@var1236 = false ;
906: bool idtype@var1237 ; idtype@var1237 = false ;
907: bool attributes@var1238 ; attributes@var1238 = false ;
908: bool macro@var1239 ; macro@var1239 = false ;
909: bool linenumbers@var1240 ; linenumbers@var1240 = false ;
910: bool linebreaks@var1241 ; linebreaks@var1241 = false ;
911: bool files@var1242 ; files@var1242 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1243 ;
914: options@var1243 .@expr1073745695 attributes@var1244 =@expr1073745696 true ;
915: options@var1243 .@expr1073745697 macro@var1245 =@expr1073745698 true ;
916: options@var1243 .@expr1073745699 linenumbers@var1246 =@expr1073745700 true ;
917: options@var1243 .@expr1073745701 linebreaks@var1247 =@expr1073745702 true ;
918: options@var1243 .@expr1073745703 files@var1248 =@expr1073745704 true ;
919: return options@var1243 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1249 ; options@var1249 =@expr1073745705 forDebug (@expr1073745706 ) ;
923: options@var1249 .@expr1073745707 varid@var1250 =@expr1073745708 true ;
924: return options@var1249 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1251 ; options@var1251 =@expr1073745709 forDebug (@expr1073745710 ) ;
928: options@var1251 .@expr1073745711 exprid@var1252 =@expr1073745712 true ;
929: return options@var1251 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1253 ; options@var1253 =@expr1073745713 forDebug (@expr1073745714 ) ;
933: options@var1253 .@expr1073745715 exprid@var1254 =@expr1073745716 true ;
934: options@var1253 .@expr1073745717 varid@var1255 =@expr1073745718 true ;
935: options@var1253 .@expr1073745719 idtype@var1256 =@expr1073745720 true ;
936: return options@var1253 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1257 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1258 , bool attributes@var1259 , bool macro@var1260 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1261 , const std :: vector < std :: string > * fileNames@var1262 = nullptr , const Token * end@var1263 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1264 , bool attributes@var1265 = true ) const ;
952: std :: string stringifyList ( bool varid@var1266 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1267 , bool attributes@var1268 , bool linenumbers@var1269 , bool linebreaks@var1270 , bool files@var1271 , const std :: vector < std :: string > * fileNames@var1272 = nullptr , const Token * end@var1273 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1274 ) {
983: mLink@var1318 =@expr1073745721 linkToToken@var1274 ;
984: if (@expr1073745722 mStr@var1315 ==@expr1073745723 "<" ||@expr1073745724 mStr@var1315 ==@expr1073745725 ">" ) {
985: update_property_info (@expr1073745726 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1318 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1275 ) {
1006: mImpl@var1321 .@expr1073745727 mScope@var1361 =@expr1073745728 s@var1275 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1321 .@expr1073745729 mScope@var1361 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1276 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1319 ==@expr1073745730 eFunction ||@expr1073745731 mTokType@var1319 ==@expr1073745732 eLambda ?@expr1073745733 mImpl@var1321 .@expr1073745734 mFunction@var1362 :@expr1073745735 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1277 ) {
1034: mImpl@var1321 .@expr1073745736 mVariable@var1363 =@expr1073745737 v@var1277 ;
1035: if (@expr1073745738 v@var1277 ||@expr1073745739 mImpl@var1321 .@expr1073745740 mVarId@var1352 ) {
1036: tokType (@expr1073745741 eVariable ) ; }
1037: else { if (@expr1073745742 mTokType@var1319 ==@expr1073745743 eVariable ) {
1038: tokType (@expr1073745744 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1319 ==@expr1073745745 eVariable ?@expr1073745746 mImpl@var1321 .@expr1073745747 mVariable@var1363 :@expr1073745748 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1278 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1319 ==@expr1073745749 eType ?@expr1073745750 mImpl@var1321 .@expr1073745751 mType@var1364 :@expr1073745752 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1279 , const Token * * typeTok@var1280 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1281 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1282 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1319 ==@expr1073745753 eEnumerator ?@expr1073745754 mImpl@var1321 .@expr1073745755 mEnumerator@var1365 :@expr1073745756 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1283 ) {
1079: mImpl@var1321 .@expr1073745757 mEnumerator@var1365 =@expr1073745758 e@var1283 ;
1080: if (@expr1073745759 e@var1283 ) {
1081: tokType (@expr1073745760 eEnumerator ) ; }
1082: else { if (@expr1073745761 mTokType@var1319 ==@expr1073745762 eEnumerator ) {
1083: tokType (@expr1073745763 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1284 , Token * end@var1285 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1286 , Token * srcEnd@var1287 , Token * newLocation@var1288 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1321 .@expr1073745764 mProgressValue@var1366 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1289 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1321 .@expr3941 mOriginalName@var1367 ?@expr1073745766 *@expr1073745767 mImpl@var1321 .@expr3941 mOriginalName@var1367 :@expr1073745769 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1321 .@expr3946 mValues@var1340 ?@expr1073745771 *@expr1073745772 mImpl@var1321 .@expr3946 mValues@var1340 :@expr1073745774 TokenImpl ::@expr1073745775 mEmptyValueList@var1087 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1290 ) {
1164: if (@expr1073745776 !@expr1073745777 mImpl@var1321 .@expr3954 mOriginalName@var1367 ) {
1165: mImpl@var1321 .@expr3954 mOriginalName@var1367 =@expr1073745780 new std ::@expr1073745781 string (@expr1073745782 name@var1290 ) ; }
1166: else {
1167: *@expr1073745783 mImpl@var1321 .@expr3954 mOriginalName@var1367 =@expr1073745785 name@var1290 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1291 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1292 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1293 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1321 .@expr1073745787 mValues@var1340 .@expr1073745788 front (@expr1073745789 ) .@expr1073745790 intvalue@expr1073745786 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1294 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1295 , long long path@var1296 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1297 , const Settings * settings@var1298 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1299 , const Settings * settings@var1300 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1301 , int argnr@var1302 , const Settings * settings@var1303 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1304 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1305 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1306 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1307 ) {
1200: if (@expr1073745791 mImpl@var1321 .@expr3968 mValues@var1340 ) {
1201: mImpl@var1321 .@expr3968 mValues@var1340 .@expr1073745794 remove_if (@expr1073745795 pred@var1307 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1321 .@expr1073745796 mIndex@var1368 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1308 ) {
1213: mNext@var1316 =@expr1073745797 nextToken@var1308 ;
1214: }
1215: void previous ( Token * previousToken@var1309 ) {
1216: mPrevious@var1317 =@expr1073745798 previousToken@var1309 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1310 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1311 , const char * word@var1312 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1313 , char c@var1314 ) ;
1235:
1236: std :: string mStr@var1315 ;
1237:
1238: Token * mNext@var1316 ;
1239: Token * mPrevious@var1317 ;
1240: Token * mLink@var1318 ;
1241:
1242: enum Anonymous2 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1319 ;
1283:
1284: uint64_t mFlags@var1320 ;
1285:
1286: TokenImpl * mImpl@var1321 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1322 ) const {
1294: return (@expr3975 (@expr3975 mFlags@var1320 &@expr1073745801 flag_@var1322 ) !=@expr1073745802 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1323 , bool state_@var1324 ) {
1303: mFlags@var1320 =@expr1073745803 state_@var1324 ?@expr1073745804 mFlags@var1320 |@expr1073745805 flag_@var1323 :@expr1073745806 mFlags@var1320 &@expr1073745807 ~@expr1073745808 flag_@var1323 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1325 , const int indent1@var1326 = 0 , const int indent2@var1327 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1328 ) ;
1321: void astOperand2 ( Token * tok@var1329 ) ;
1322: void astParent ( Token * tok@var1330 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1321 .@expr1073745809 mAstOperand1@var1331 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1321 .@expr1073745810 mAstOperand1@var1331 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1321 .@expr1073745811 mAstOperand2@var1332 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1321 .@expr1073745812 mAstOperand2@var1332 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1321 .@expr1073745813 mAstParent@var1333 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1321 .@expr1073745814 mAstParent@var1333 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745815 !@expr1073745816 astParent (@expr3993 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745818 this@expr3995 ==@expr1073745820 astParent (@expr3993 ) .@expr3998 astOperand1 (@expr3999 ) ) {
1346: return astParent (@expr3993 ) .@expr4001 astOperand2 (@expr4002 ) ; }
1347: else { if (@expr1073745827 this@expr3995 ==@expr1073745828 astParent (@expr3993 ) .@expr4001 astOperand2 (@expr4002 ) ) {
1348: return astParent (@expr3993 ) .@expr3998 astOperand1 (@expr3999 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745835 !@expr1073745836 astParent (@expr4013 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745838 this@expr4015 ==@expr1073745840 astParent (@expr4013 ) .@expr4018 astOperand1 (@expr4019 ) ) {
1356: return astParent (@expr4013 ) .@expr4021 astOperand2 (@expr4022 ) ; }
1357: else { if (@expr1073745847 this@expr4015 ==@expr1073745848 astParent (@expr4013 ) .@expr4021 astOperand2 (@expr4022 ) ) {
1358: return astParent (@expr4013 ) .@expr4018 astOperand1 (@expr4019 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1334 ; ret@var1334 =@expr1073745855 this@expr1073745856 ;
1364: while (@expr1073745857 ret@var1334 .@expr4034 mImpl@var1335 .@expr4035 mAstParent@var1336 ) {
1365: ret@var1334 =@expr1073745860 ret@var1334 .@expr4034 mImpl@var1335 .@expr4035 mAstParent@var1336 ; }
1366: return ret@var1334 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1337 ; ret@var1337 =@expr1073745863 this@expr1073745864 ;
1371: while (@expr1073745865 ret@var1337 .@expr4042 mImpl@var1338 .@expr4043 mAstParent@var1339 ) {
1372: ret@var1337 =@expr1073745868 ret@var1337 .@expr4042 mImpl@var1338 .@expr4043 mAstParent@var1339 ; }
1373: return ret@var1337 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1321 .@expr1073745871 mAstOperand1@var1331 =@expr1073745872 mImpl@var1321 .@expr1073745873 mAstOperand2@var1332 =@expr1073745874 mImpl@var1321 .@expr1073745875 mAstParent@var1333 =@expr1073745876 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1321 .@expr4053 mValues@var1340 ;
1393: mImpl@var1321 .@expr4053 mValues@var1340 =@expr1073745879 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1341 = "" ) const {
1397: std ::@expr1073745880 string ret@var1342 ;
1398: if (@expr1073745881 mImpl@var1321 .@expr4058 mAstOperand1@var1331 ) {
1399: ret@var1342 =@expr1073745883 mImpl@var1321 .@expr4058 mAstOperand1@var1331 .@expr1073745885 astString (@expr1073745886 sep@var1341 ) ; }
1400: if (@expr1073745887 mImpl@var1321 .@expr4064 mAstOperand2@var1332 ) {
1401: ret@var1342 +=@expr1073745889 mImpl@var1321 .@expr4064 mAstOperand2@var1332 .@expr1073745891 astString (@expr1073745892 sep@var1341 ) ; }
1402: return ret@var1342 +@expr1073745893 sep@var1341 +@expr1073745894 mStr@var1315 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1343 , bool xml@var1344 , const std :: vector < std :: string > & fileNames@var1345 , std :: ostream & out@var1346 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1347 , std :: ostream & out@var1348 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1349 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1350 ) const {
1419: mImpl@var1321 .@expr1073745895 mCpp11init@var1351 =@expr1073745896 cpp11init@var1350 ?@expr1073745897 TokenImpl ::@expr4074 Cpp11init ::@expr1073745899 CPP11INIT :@expr1073745900 TokenImpl ::@expr4074 Cpp11init ::@expr1073745902 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1321 .@expr1073745903 mCpp11init@var1351 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1369 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1370 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1371 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1372 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1373 ( nullptr ) , num@var1374 ( 0 ) , known@var1375 ( true ) { }
62:
63: const Token * tok@var1373 ;
64: long long num@var1374 ;
65: bool known@var1375 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1376 ;
72: const Scope * classScope@var1377 ;
73: const Scope * enclosingScope@var1378 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1379 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1381 ( nullptr ) , nameTok@var1382 ( nullptr ) , access@var1383 ( AccessControl :: Public ) , isVirtual@var1384 ( false ) { }
82:
83: std :: string name@var1380 ;
84: const Type * type@var1381 ;
85: const Token * nameTok@var1382 ;
86: AccessControl access@var1383 ;
87: bool isVirtual@var1384 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1385 ) const {
90: return this@expr1073745904 .@expr1073745905 type@var1381 <@expr1073745906 rhs@var1385 .@expr1073745907 type@var1386 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1387 ( nullptr ) , nameEnd@var1388 ( nullptr ) , type@var1389 ( nullptr ) { }
97:
98: const Token * nameStart@var1387 ;
99: const Token * nameEnd@var1388 ;
100: const Type * type@var1389 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1390 ;
104: std :: vector < FriendInfo > friendList@var1391 ;
105:
106: const Token * typeStart@var1392 ;
107: const Token * typeEnd@var1393 ;
108: long long sizeOf@var1394 ;
109:
110: Type ( const Token * classDef_@var1395 = nullptr , const Scope * classScope_@var1396 = nullptr , const Scope * enclosingScope_@var1397 = nullptr ) :
111: classDef@var1376 ( classDef_@var1395 ) ,
112: classScope@var1377 ( classScope_@var1396 ) ,
113: enclosingScope@var1378 ( enclosingScope_@var1397 ) ,
114: needInitialization@var1379 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1392 ( nullptr ) ,
116: typeEnd@var1393 ( nullptr ) ,
117: sizeOf@var1394 ( 0 ) {
118: if (@expr1073745908 classDef_@var1395 &&@expr1073745909 classDef_@var1395 .@expr4086 str (@expr4087 ) ==@expr1073745912 "enum" ) {
119: needInitialization@var1379 =@expr1073745913 NeedInitialization ::@expr1073745914 True ; }
120: else { if (@expr1073745915 classDef_@var1395 &&@expr1073745916 classDef_@var1395 .@expr4086 str (@expr4087 ) ==@expr1073745919 "using" ) {
121: typeStart@var1392 =@expr1073745920 classDef@var1376 .@expr1073745921 tokAt (@expr1073745922 3 ) ;
122: typeEnd@var1393 =@expr1073745923 typeStart@var1392 ;
123: while (@expr1073745924 typeEnd@var1393 .@expr4101 next (@expr4102 ) &&@expr1073745927 typeEnd@var1393 .@expr4101 next (@expr4102 ) .@expr1073745930 str (@expr1073745931 ) !=@expr1073745932 ";" ) {
124: typeEnd@var1393 =@expr1073745933 typeEnd@var1393 .@expr4101 next (@expr4102 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1376 ?@expr1073745936 classDef@var1376 .@expr1073745937 str (@expr1073745938 ) :@expr1073745939 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1376 &&@expr1073745940 classDef@var1376 .@expr1073745941 str (@expr1073745942 ) ==@expr1073745943 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1398 , const Token * tok1@var1399 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1400 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1401 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1402 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1403 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1404 ) : scope@var1405 ( scope_@var1404 ) , name@var1406 ( nullptr ) , value@var1407 ( 0 ) , start@var1408 ( nullptr ) , end@var1409 ( nullptr ) , value_known@var1410 ( false ) { }
167: const Scope * scope@var1405 ;
168: const Token * name@var1406 ;
169: long long value@var1407 ;
170: const Token * start@var1408 ;
171: const Token * end@var1409 ;
172: bool value_known@var1410 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous3 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1411 ) const {
204: return (@expr4120 (@expr4120 mFlags@var1447 &@expr1073745946 flag_@var1411 ) !=@expr1073745947 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1412 , bool state_@var1413 ) {
213: mFlags@var1447 =@expr1073745948 state_@var1413 ?@expr1073745949 mFlags@var1447 |@expr1073745950 flag_@var1412 :@expr1073745951 mFlags@var1447 &@expr1073745952 ~@expr1073745953 flag_@var1412 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1414 , bool * isContainer@var1415 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1416 , const Token * start_@var1417 , const Token * end_@var1418 ,
226: int index_@var1419 , AccessControl access_@var1420 , const Type * type_@var1421 ,
227: const Scope * scope_@var1422 , const Settings * settings@var1423 )
228: : mNameToken@var1442 ( name_@var1416 ) ,
229: mTypeStartToken@var1443 ( start_@var1417 ) ,
230: mTypeEndToken@var1444 ( end_@var1418 ) ,
231: mIndex@var1445 ( index_@var1419 ) ,
232: mAccess@var1446 ( access_@var1420 ) ,
233: mFlags@var1447 ( 0 ) ,
234: mType@var1448 ( type_@var1421 ) ,
235: mScope@var1449 ( scope_@var1422 ) ,
236: mValueType@var1450 ( nullptr ) {
237: evaluate (@expr1073745954 settings@var1423 ) ;
238: }
239:
240: Variable ( const Token * name_@var1424 , const std :: string & clangType@var1425 , const Token * typeStart@var1426 ,
241: const Token * typeEnd@var1427 , int index_@var1428 , AccessControl access_@var1429 ,
242: const Type * type_@var1430 , const Scope * scope_@var1431 ) ;
243:
244: Variable ( const Variable & var@var1432 , const Scope * scope@var1433 ) ;
245:
246: Variable ( const Variable & var@var1434 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1435 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1442 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1443 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1444 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745955 mNameToken@var1442 ) {
300: return mNameToken@var1442 .@expr1073745956 str (@expr1073745957 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745958 mNameToken@var1442 ) {
312: return mNameToken@var1442 .@expr1073745959 varId (@expr1073745960 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1445 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1446 ==@expr1073745961 AccessControl ::@expr1073745962 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1446 ==@expr1073745963 AccessControl ::@expr1073745964 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1446 ==@expr1073745965 AccessControl ::@expr1073745966 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1446 ==@expr1073745967 AccessControl ::@expr1073745968 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1446 ==@expr1073745969 AccessControl ::@expr1073745970 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1446 ==@expr1073745971 AccessControl ::@expr1073745972 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745974 mAccess@var1446 ==@expr1073745975 AccessControl ::@expr1073745976 Local@expr1073745973 ) &&@expr1073745977 !@expr1073745978 isExtern (@expr1073745979 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745980 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745981 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745982 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745983 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745984 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1446 ==@expr1073745985 AccessControl ::@expr1073745986 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745987 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745988 fIsArray ) &&@expr1073745989 !@expr1073745990 getFlag (@expr1073745991 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745992 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745993 ) &&@expr1073745994 getFlag (@expr1073745995 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745996 fIsArray ) ||@expr1073745997 getFlag (@expr1073745998 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745999 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073746000 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073746001 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073746002 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1448 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1448 ?@expr1073746003 mType@var1448 .@expr1073746004 classScope@var1453 :@expr1073746005 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1449 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1451 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1436 ) const {
550: return mDimensions@var1451 [@expr1073746006 index_@var1436 ] .@expr1073746007 num@var2589 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1437 ) const {
558: return mDimensions@var1451 [@expr1073746008 index_@var1437 ] .@expr1073746009 known@var2590 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073746010 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073746011 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073746012 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1438 ) const {
602: return isStlType (@expr1073746013 ) &&@expr1073746014 stlType@var1438 ==@expr1073746015 mTypeStartToken@var1443 .@expr1073746016 strAt (@expr1073746017 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1439 ) const {
616: return isStlType (@expr1073746018 ) &&@expr1073746019 stlTypes@var1439 .@expr1073746020 find (@expr1073746021 mTypeStartToken@var1443 .@expr1073746022 strAt (@expr1073746023 2 ) ) !=@expr1073746024 stlTypes@var1439 .@expr1073746025 end (@expr1073746026 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073746027 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr4204 ) &&@expr1073746029 type (@expr4204 ) .@expr1073746031 isEnumType (@expr1073746032 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073746033 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1450 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1440 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1446 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1441 ) {
660: mType@var1448 =@expr1073746034 t@var1441 ;
661: }
662:
663:
664: const Token * mNameToken@var1442 ;
665:
666:
667: const Token * mTypeStartToken@var1443 ;
668:
669:
670: const Token * mTypeEndToken@var1444 ;
671:
672:
673: int mIndex@var1445 ;
674:
675:
676: AccessControl mAccess@var1446 ;
677:
678:
679: unsigned int mFlags@var1447 ;
680:
681:
682: const Type * mType@var1448 ;
683:
684:
685: const Scope * mScope@var1449 ;
686:
687: ValueType * mValueType@var1450 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1451 ;
691:
692:
693: void evaluate ( const Settings * settings@var1452 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous4 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1454 ) const {
735: return (@expr4211 (@expr4211 mFlags@var1503 &@expr1073746037 flag@var1454 ) !=@expr1073746038 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1455 , bool state@var1456 ) {
744: mFlags@var1503 =@expr1073746039 state@var1456 ?@expr1073746040 mFlags@var1503 |@expr1073746041 flag@var1455 :@expr1073746042 mFlags@var1503 &@expr1073746043 ~@expr1073746044 flag@var1455 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1457 , const Token * tok@var1458 , const Scope * scope@var1459 , const Token * tokDef@var1460 , const Token * tokArgDef@var1461 ) ;
751: Function ( const Token * tokenDef@var1462 , const std :: string & clangType@var1463 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1473 .@expr1073746045 str (@expr1073746046 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1481 .@expr1073746047 size (@expr1073746048 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1481 .@expr1073746049 size (@expr1073746050 ) -@expr1073746051 initArgCount@var1482 ;
764: }
765: const Variable * getArgumentVar ( int num@var1464 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1482 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1465 , const Scope * scope@var1466 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1467 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1468 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1483 ==@expr1073746052 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1483 ==@expr1073746053 eConstructor ||@expr1073746054
785: type@var1483 ==@expr1073746055 eCopyConstructor ||@expr1073746056
786: type@var1483 ==@expr1073746057 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1483 ==@expr1073746058 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1473 .@expr1073746059 isAttributeConstructor (@expr1073746060 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1473 .@expr1073746061 isAttributeDestructor (@expr1073746062 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1473 .@expr1073746063 isAttributePure (@expr1073746064 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1473 .@expr1073746065 isAttributeConst (@expr1073746066 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1473 .@expr1073746067 isAttributeNoreturn (@expr1073746068 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1473 .@expr1073746069 isAttributeNothrow (@expr1073746070 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1473 .@expr1073746071 isAttributeNodiscard (@expr1073746072 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073746073 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073746074 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073746075 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073746076 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073746077 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073746078 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073746079 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073746080 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073746081 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073746082 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073746083 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073746084 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073746085 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073746086 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073746087 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073746088 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073746089 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073746090 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073746091 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073746092 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073746093 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073746094 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1469 ) {
881: setFlag (@expr1073746095 fHasBody , state@var1469 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073746096 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073746097 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1470 ) {
891: setFlag (@expr1073746098 fIsEscapeFunction , state@var1470 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073746099 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1471 ) {
898: setFlag (@expr1073746100 fIsConstexpr , state@var1471 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1472 ) const ;
901:
902: const Token * tokenDef@var1473 ;
903: const Token * argDef@var1474 ;
904: const Token * token@var1475 ;
905: const Token * arg@var1476 ;
906: const Token * retDef@var1477 ;
907: const :: Type * retType@var1478 ;
908: const Scope * functionScope@var1479 ;
909: const Scope * nestedIn@var1480 ;
910: std :: list < Variable > argumentList@var1481 ;
911: int initArgCount@var1482 ;
912: Type type@var1483 ;
913: AccessControl access@var1484 ;
914: const Token * noexceptArg@var1485 ;
915: const Token * throwArg@var1486 ;
916: const Token * templateDef@var1487 ;
917: const Token * functionPointerUsage@var1488 ;
918:
919: bool argsMatch ( const Scope * scope@var1489 , const Token * first@var1490 , const Token * second@var1491 , const std :: string & path@var1492 , int path_length@var1493 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1494 , bool unknown@var1495 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1496 , bool unknown@var1497 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1498 , bool unknown@var1499 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1500 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073746101 this@expr1073746102 .@expr1073746103 hasTrailingReturnType (@expr1073746104 ) ) {
931: return Token ::@expr1073746105 findmatch (@expr1073746106 retDef@var1477 , "{|;" ) ;
932: } else {
933: return tokenDef@var1473 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1501 , bool * foundAllBaseClasses@var1502 ) const ;
946:
947: unsigned int mFlags@var1503 ;
948:
949: void isInline ( bool state@var1504 ) {
950: setFlag (@expr1073746107 fIsInline , state@var1504 ) ;
951: }
952: void isConst ( bool state@var1505 ) {
953: setFlag (@expr1073746108 fIsConst , state@var1505 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1506 ) {
956: setFlag (@expr1073746109 fHasVirtualSpecifier , state@var1506 ) ;
957: }
958: void isPure ( bool state@var1507 ) {
959: setFlag (@expr1073746110 fIsPure , state@var1507 ) ;
960: }
961: void isStatic ( bool state@var1508 ) {
962: setFlag (@expr1073746111 fIsStatic , state@var1508 ) ;
963: }
964: void isStaticLocal ( bool state@var1509 ) {
965: setFlag (@expr1073746112 fIsStaticLocal , state@var1509 ) ;
966: }
967: void isExtern ( bool state@var1510 ) {
968: setFlag (@expr1073746113 fIsExtern , state@var1510 ) ;
969: }
970: void isFriend ( bool state@var1511 ) {
971: setFlag (@expr1073746114 fIsFriend , state@var1511 ) ;
972: }
973: void isExplicit ( bool state@var1512 ) {
974: setFlag (@expr1073746115 fIsExplicit , state@var1512 ) ;
975: }
976: void isDefault ( bool state@var1513 ) {
977: setFlag (@expr1073746116 fIsDefault , state@var1513 ) ;
978: }
979: void isDelete ( bool state@var1514 ) {
980: setFlag (@expr1073746117 fIsDelete , state@var1514 ) ;
981: }
982: void isNoExcept ( bool state@var1515 ) {
983: setFlag (@expr1073746118 fIsNoExcept , state@var1515 ) ;
984: }
985: void isThrow ( bool state@var1516 ) {
986: setFlag (@expr1073746119 fIsThrow , state@var1516 ) ;
987: }
988: void isOperator ( bool state@var1517 ) {
989: setFlag (@expr1073746120 fIsOperator , state@var1517 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1518 ) {
992: setFlag (@expr1073746121 fHasLvalRefQual , state@var1518 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1519 ) {
995: setFlag (@expr1073746122 fHasRvalRefQual , state@var1519 ) ;
996: }
997: void isVariadic ( bool state@var1520 ) {
998: setFlag (@expr1073746123 fIsVariadic , state@var1520 ) ;
999: }
1000: void isVolatile ( bool state@var1521 ) {
1001: setFlag (@expr1073746124 fIsVolatile , state@var1521 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1522 ) {
1004: return setFlag (@expr1073746125 fHasTrailingReturnType , state@var1522 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1523 ) {
1007: setFlag (@expr1073746126 fIsInlineKeyword , state@var1523 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1524 , const Scope * scope@var1525 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1526 ;
1019: const Scope * scope@var1527 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1528 , const Token * classDef_@var1529 , const Scope * nestedIn_@var1530 ) ;
1025: Scope ( const SymbolDatabase * check_@var1531 , const Token * classDef_@var1532 , const Scope * nestedIn_@var1533 , ScopeType type_@var1534 , const Token * start_@var1535 ) ;
1026:
1027: const SymbolDatabase * check@var1536 ;
1028: std :: string className@var1537 ;
1029: const Token * classDef@var1538 ;
1030: const Token * bodyStart@var1539 ;
1031: const Token * bodyEnd@var1540 ;
1032: std :: list < Function > functionList@var1541 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1542 ;
1034: std :: list < Variable > varlist@var1543 ;
1035: const Scope * nestedIn@var1544 ;
1036: std :: list < Scope * > nestedList@var1545 ;
1037: int numConstructors@var1546 ;
1038: int numCopyOrMoveConstructors@var1547 ;
1039: std :: list < UsingInfo > usingList@var1548 ;
1040: ScopeType type@var1549 ;
1041: Type * definedType@var1550 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1551 ;
1043: std :: vector < const Token * > bodyStartList@var1552 ;
1044:
1045:
1046: const Scope * functionOf@var1553 ;
1047: Function * function@var1554 ;
1048:
1049:
1050: const Token * enumType@var1555 ;
1051: bool enumClass@var1556 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1557 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1558 ) {
1056: bodyStart@var1539 =@expr1073746127 start@var1558 ;
1057: bodyEnd@var1540 =@expr1073746128 start@var1558 ?@expr1073746129 start@var1558 .@expr1073746130 link (@expr1073746131 ) :@expr1073746132 nullptr ;
1058: if (@expr1073746133 start@var1558 ) {
1059: bodyStartList@var1552 .@expr1073746134 push_back (@expr1073746135 start@var1558 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1537 .@expr1073746136 size (@expr1073746137 ) >@expr1073746138 9 &&@expr1073746139 className@var1537 .@expr1073746140 compare (@expr1073746141 0 , 9 , "Anonymous" ) ==@expr1073746142 0 &&@expr1073746143 std ::@expr1073746144 isdigit (@expr1073746145 className@var1537 [@expr1073746146 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1559 ) const {
1068: for (@expr1073746147 const Enumerator &@expr1073746148 i@var1560 :@expr1073746149 enumeratorList@var1557 ) {
1069: if (@expr1073746150 i@var1560 .@expr1073746151 name@var1561 .@expr1073746152 str (@expr1073746153 ) ==@expr1073746154 name@var1559 ) {
1070: return &@expr1073746155 i@var1560 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1562 ) const {
1076: if (@expr1073746156 !@expr1073746157 outer@var1562 ) {
1077: return false ; }
1078: if (@expr1073746158 outer@var1562 ==@expr1073746159 this@expr1073746160 ) {
1079: return true ; }
1080: const Scope * parent@var1563 ; parent@var1563 =@expr1073746161 nestedIn@var1544 ;
1081: while (@expr1073746162 outer@var1562 !=@expr1073746163 parent@var1563 &&@expr1073746164 parent@var1563 ) {
1082: parent@var1563 =@expr1073746165 parent@var1563 .@expr1073746166 nestedIn@var1564 ; }
1083: if (@expr1073746167 parent@var1563 &&@expr1073746168 parent@var1563 ==@expr1073746169 outer@var1562 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1565 ) {
1089: while (@expr1073746170 scope@var1565 ) {
1090: if (@expr1073746171 scope@var1565 .@expr1073746172 type@var1566 ==@expr1073746173 Scope ::@expr1073746174 eFunction ) {
1091: break ; }
1092: scope@var1565 =@expr1073746175 scope@var1565 .@expr1073746176 nestedIn@var1567 ;
1093: }
1094: if (@expr1073746177 !@expr1073746178 scope@var1565 ) {
1095: return nullptr ; }
1096: return scope@var1565 .@expr1073746179 function@var1568 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073746180 type@var1549 ==@expr1073746181 eClass ||@expr1073746182 type@var1549 ==@expr1073746183 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073746184 type@var1549 ==@expr1073746185 eClass ||@expr1073746186 type@var1549 ==@expr1073746187 eStruct ||@expr1073746188 type@var1549 ==@expr1073746189 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1549 !=@expr1073746190 eClass &&@expr1073746191 type@var1549 !=@expr1073746192 eStruct &&@expr1073746193 type@var1549 !=@expr1073746194 eUnion &&@expr1073746195 type@var1549 !=@expr1073746196 eGlobal &&@expr1073746197 type@var1549 !=@expr1073746198 eNamespace &&@expr1073746199 type@var1549 !=@expr1073746200 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1549 ==@expr1073746201 Scope ::@expr4378 ScopeType ::@expr1073746203 eFor ||@expr1073746204 type@var1549 ==@expr1073746205 Scope ::@expr4378 ScopeType ::@expr1073746207 eWhile ||@expr1073746208 type@var1549 ==@expr1073746209 Scope ::@expr4378 ScopeType ::@expr1073746211 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073746212 type@var1549 ==@expr1073746213 eIf ||@expr1073746214 type@var1549 ==@expr1073746215 eElse ||@expr1073746216
1117: type@var1549 ==@expr1073746217 eFor ||@expr1073746218 type@var1549 ==@expr1073746219 eWhile ||@expr1073746220 type@var1549 ==@expr1073746221 eDo ||@expr1073746222
1118: type@var1549 ==@expr1073746223 eSwitch ||@expr1073746224 type@var1549 ==@expr1073746225 eUnconditional ||@expr1073746226
1119: type@var1549 ==@expr1073746227 eTry ||@expr1073746228 type@var1549 ==@expr1073746229 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1569 , bool requireConst@var1570 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1571 , bool isC@var1572 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1573 ) {
1135: return const_cast < Scope *@expr4406 > (@expr1073746231 const_cast < const Scope *@expr4406 > (@expr1073746233 this@expr1073746234 ) .@expr1073746235 findRecordInNestedList (@expr1073746236 name@var1573 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1574 ) const ;
1139: Type * findType ( const std :: string & name@var1575 ) {
1140: return const_cast < Type *@expr4413 > (@expr1073746238 const_cast < const Scope *@expr4413 > (@expr1073746240 this@expr1073746241 ) .@expr1073746242 findType (@expr1073746243 name@var1575 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1576 ) ;
1148:
1149: void addVariable ( const Token * token_@var1577 , const Token * start_@var1578 ,
1150: const Token * end_@var1579 , AccessControl access_@var1580 , const Type * type_@var1581 ,
1151: const Scope * scope_@var1582 , const Settings * settings@var1583 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1584 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1585 ) {
1159: functionList@var1541 .@expr1073746244 push_back (@expr1073746245 func@var1585 ) ;
1160:
1161: const Function * back@var1586 ; back@var1586 =@expr1073746246 &@expr1073746247 functionList@var1541 .@expr1073746248 back (@expr1073746249 ) ;
1162:
1163: functionMap@var1542 .@expr1073746250 insert (@expr1073746251 make_pair (@expr1073746252 back@var1586 .@expr1073746253 tokenDef@var1587 .@expr1073746254 str (@expr1073746255 ) , back@var1586 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1588 , AccessControl varaccess@var1589 , const Settings * settings@var1590 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1591 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1592 , bool isCpp@var1593 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1594 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1595 , const Token * & vartok@var1596 , const Token * & typetok@var1597 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1598 , int args@var1599 , std :: vector < const Function * > & matches@var1600 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1601 , const Token * start@var1602 , const Token * end@var1603 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1604 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1605 ;
1239: int bits@var1606 ;
1240: int pointer@var1607 ;
1241: int constness@var1608 ;
1242: Reference reference@var1609 ; reference@var1609 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1610 ;
1245: const :: Type * smartPointerType@var1611 ;
1246: const Token * smartPointerTypeToken@var1612 ;
1247: const Library :: SmartPointer * smartPointer@var1613 ;
1248: const Library :: Container * container@var1614 ;
1249:
1250: const Token * containerTypeToken@var1615 ;
1251:
1252: std :: string originalTypeName@var1616 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1604 ( UNKNOWN_SIGN ) ,
1257: type@var1605 ( UNKNOWN_TYPE ) ,
1258: bits@var1606 ( 0 ) ,
1259: pointer@var1607 ( 0U ) ,
1260: constness@var1608 ( 0U ) ,
1261: typeScope@var1610 ( nullptr ) ,
1262: smartPointerType@var1611 ( nullptr ) ,
1263: smartPointerTypeToken@var1612 ( nullptr ) ,
1264: smartPointer@var1613 ( nullptr ) ,
1265: container@var1614 ( nullptr ) ,
1266: containerTypeToken@var1615 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1617 , enum Type t@var1618 , int p@var1619 )
1269: : sign@var1604 ( s@var1617 ) ,
1270: type@var1605 ( t@var1618 ) ,
1271: bits@var1606 ( 0 ) ,
1272: pointer@var1607 ( p@var1619 ) ,
1273: constness@var1608 ( 0U ) ,
1274: typeScope@var1610 ( nullptr ) ,
1275: smartPointerType@var1611 ( nullptr ) ,
1276: smartPointerTypeToken@var1612 ( nullptr ) ,
1277: smartPointer@var1613 ( nullptr ) ,
1278: container@var1614 ( nullptr ) ,
1279: containerTypeToken@var1615 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1620 , enum Type t@var1621 , int p@var1622 , int c@var1623 )
1282: : sign@var1604 ( s@var1620 ) ,
1283: type@var1605 ( t@var1621 ) ,
1284: bits@var1606 ( 0 ) ,
1285: pointer@var1607 ( p@var1622 ) ,
1286: constness@var1608 ( c@var1623 ) ,
1287: typeScope@var1610 ( nullptr ) ,
1288: smartPointerType@var1611 ( nullptr ) ,
1289: smartPointerTypeToken@var1612 ( nullptr ) ,
1290: smartPointer@var1613 ( nullptr ) ,
1291: container@var1614 ( nullptr ) ,
1292: containerTypeToken@var1615 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1624 , enum Type t@var1625 , int p@var1626 , int c@var1627 , const std :: string & otn@var1628 )
1295: : sign@var1604 ( s@var1624 ) ,
1296: type@var1605 ( t@var1625 ) ,
1297: bits@var1606 ( 0 ) ,
1298: pointer@var1607 ( p@var1626 ) ,
1299: constness@var1608 ( c@var1627 ) ,
1300: typeScope@var1610 ( nullptr ) ,
1301: smartPointerType@var1611 ( nullptr ) ,
1302: smartPointerTypeToken@var1612 ( nullptr ) ,
1303: smartPointer@var1613 ( nullptr ) ,
1304: container@var1614 ( nullptr ) ,
1305: containerTypeToken@var1615 ( nullptr ) ,
1306: originalTypeName@var1616 ( otn@var1628 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1629 , const Settings * settings@var1630 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1631 , bool longType@var1632 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1633 , const ValueType * func@var1634 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1635 , const Variable * callVar@var1636 , const Variable * funcVar@var1637 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746256 type@var1605 >=@expr1073746257 ValueType ::@expr1073746258 Type ::@expr1073746259 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746260 type@var1605 >=@expr1073746261 ValueType ::@expr4438 Type ::@expr1073746263 BOOL &&@expr1073746264 type@var1605 <=@expr1073746265 ValueType ::@expr4438 Type ::@expr1073746267 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746268 type@var1605 >=@expr1073746269 ValueType ::@expr4446 Type ::@expr1073746271 FLOAT &&@expr1073746272 type@var1605 <=@expr1073746273 ValueType ::@expr4446 Type ::@expr1073746275 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1638 , const Settings * settings@var1639 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1610 &&@expr1073746276 typeScope@var1610 .@expr1073746277 type@var1640 ==@expr1073746278 Scope ::@expr1073746279 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1641 , bool p@var1642 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1643 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1644 , const Settings * settings@var1645 , ErrorLogger * errorLogger@var1646 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1647 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1648 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1649 ;
1359:
1360:
1361: std :: list < Type > typeList@var1650 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1651 , const Token * typeTok@var1652 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1653 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1654 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1655 , const Scope * startScope@var1656 , bool lookOutside@var1657 = false ) const ;
1382: Type * findType ( const Token * startTok@var1658 , Scope * startScope@var1659 , bool lookOutside@var1660 = false ) const {
1383: return const_cast < Type *@expr4456 > (@expr1073746281 this@expr1073746282 .@expr1073746283 findType (@expr1073746284 startTok@var1658 , const_cast < const Scope *@expr4456 > (@expr1073746286 startScope@var1659 ) , lookOutside@var1660 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1661 , const Scope * startScope@var1662 ) const ;
1387: Scope * findScope ( const Token * tok@var1663 , Scope * startScope@var1664 ) const {
1388: return const_cast < Scope *@expr4463 > (@expr1073746288 this@expr1073746289 .@expr1073746290 findScope (@expr1073746291 tok@var1663 , const_cast < const Scope *@expr4463 > (@expr1073746293 startScope@var1664 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1665 ) const {
1392: return varid@var1665 <@expr1073746294 mVariableList@var1722 .@expr1073746295 size (@expr1073746296 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1666 ) const {
1396: return mVariableList@var1722 .@expr1073746297 at (@expr1073746298 varId@var1666 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1722 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1667 , const std :: string & type@var1668 , const std :: string & msg@var1669 ) const ;
1407:
1408: void printOut ( const char * title@var1670 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1671 , const char * indent@var1672 ) const ;
1410: void printXml ( std :: ostream & out@var1673 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1674 , Token * tokens@var1675 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1676 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1677 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1678 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1679 , const Token * * tok@var1680 , const Token * argStart@var1681 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1682 , const Token * tok@var1683 , const Token * argStart@var1684 , const Token * funcStart@var1685 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1686 , const Token * & tok@var1687 , const Token * argStart@var1688 , const Token * funcStart@var1689 ) ;
1469: void addNewFunction ( Scope * * scope@var1690 , const Token * * tok@var1691 ) ;
1470: bool isFunction ( const Token * tok@var1692 , const Scope * outerScope@var1693 , const Token * * funcStart@var1694 , const Token * * argStart@var1695 , const Token * * declEnd@var1696 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1697 , const Scope * startScope@var1698 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1699 , const Scope * scope@var1700 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1701 , const Scope * ns@var1702 , const std :: string & path@var1703 , int path_length@var1704 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1705 , const Token * typeTok@var1706 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1707 , const Token * vartok@var1708 , Token * membertok@var1709 , const Variable * membervar@var1710 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1711 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1712 ) const ;
1485:
1486: void setValueType ( Token * tok@var1713 , const ValueType & valuetype@var1714 ) ;
1487: void setValueType ( Token * tok@var1715 , const Variable & var@var1716 ) ;
1488: void setValueType ( Token * tok@var1717 , const Enumerator & enumerator@var1718 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1719 ;
1491: const Settings * mSettings@var1720 ;
1492: ErrorLogger * mErrorLogger@var1721 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1722 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1723 ;
1499:
1500: bool mIsCpp@var1724 ;
1501: ValueType :: Sign mDefaultSignedness@var1725 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1726 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1727 , const TFunc & visitor@var1728 )
52: {
53: if (@expr1073746299 !@expr1073746300 ast@var1727 ) {
54: return ; }
55:
56: std ::@expr1073746301 stack < T *@expr4478 , std ::@expr1073746303 vector < T *@expr4478 > > tokens@var1729 ;
57: T * tok@var1730 ; tok@var1730 =@expr1073746305 ast@var1727 ;
58: do {
59: ChildrenToVisit c@var1731 ; c@var1731 =@expr1073746306 visitor@var1728 (@expr1073746307 tok@var1730 ) ;
60:
61: if (@expr1073746308 c@var1731 ==@expr1073746309 ChildrenToVisit ::@expr1073746310 done ) {
62: break ; }
63: if (@expr1073746311 c@var1731 ==@expr1073746312 ChildrenToVisit ::@expr1073746313 op2 ||@expr1073746314 c@var1731 ==@expr4491 ChildrenToVisit ::@expr4492 op1_and_op2 ) {
64: T * t2@var1732 ; t2@var1732 =@expr1073746317 tok@var1730 .@expr1073746318 astOperand2 (@expr1073746319 ) ;
65: if (@expr1073746320 t2@var1732 ) {
66: tokens@var1729 .@expr4497 push (@expr1073746322 t2@var1732 ) ; }
67: }
68: if (@expr1073746323 c@var1731 ==@expr1073746324 ChildrenToVisit ::@expr1073746325 op1 ||@expr1073746326 c@var1731 ==@expr4491 ChildrenToVisit ::@expr4492 op1_and_op2 ) {
69: T * t1@var1733 ; t1@var1733 =@expr1073746329 tok@var1730 .@expr1073746330 astOperand1 (@expr1073746331 ) ;
70: if (@expr1073746332 t1@var1733 ) {
71: tokens@var1729 .@expr4497 push (@expr1073746334 t1@var1733 ) ; }
72: }
73:
74: if (@expr1073746335 tokens@var1729 .@expr1073746336 empty (@expr1073746337 ) ) {
75: break ; }
76:
77: tok@var1730 =@expr1073746338 tokens@var1729 .@expr1073746339 top (@expr1073746340 ) ;
78: tokens@var1729 .@expr1073746341 pop (@expr1073746342 ) ;
79: } while (@expr1073746343 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1734 , const std :: function < bool ( const Token * ) > & pred@var1735 ) ;
83: const Token * findExpression ( const int exprid@var1736 ,
84: const Token * start@var1737 ,
85: const Token * end@var1738 ,
86: const std :: function < bool ( const Token * ) > & pred@var1739 ) ;
87: const Token * findExpression ( const Token * start@var1740 , const int exprid@var1741 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1742 , const char * op@var1743 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1744 , const char * op@var1745 ) ;
91:
92: int astCount ( const Token * tok@var1746 , const char * op@var1747 , int depth@var1748 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1749 , const Token * tok@var1750 ) ;
95:
96: bool astHasVar ( const Token * tok@var1751 , int varid@var1752 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1753 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1754 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1755 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1756 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1757 , bool unknown@var1758 ) ;
107: bool astIsUnsigned ( const Token * tok@var1759 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1760 , bool unknown@var1761 ) ;
110:
111: bool astIsBool ( const Token * tok@var1762 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1763 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1764 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1765 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1766 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1767 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1768 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1769 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1770 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1771 , const std :: string & comp@var1772 , const std :: string & rhs@var1773 , const Token * * vartok@var1774 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1775 ) ;
140:
141: bool isTemporary ( bool cpp@var1776 , const Token * tok@var1777 , const Library * library@var1778 , bool unknown@var1779 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1780 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1781 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1782 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1783 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1784 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1785 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1786 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1787 ) ;
155: const Token * getParentLifetime ( bool cpp@var1788 , const Token * tok@var1789 , const Library * library@var1790 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1791 ) ;
158: bool astIsRHS ( const Token * tok@var1792 ) ;
159:
160: Token * getCondTok ( Token * tok@var1793 ) ;
161: const Token * getCondTok ( const Token * tok@var1794 ) ;
162:
163: Token * getInitTok ( Token * tok@var1795 ) ;
164: const Token * getInitTok ( const Token * tok@var1796 ) ;
165:
166: Token * getStepTok ( Token * tok@var1797 ) ;
167: const Token * getStepTok ( const Token * tok@var1798 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1799 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1800 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1801 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1802 ,
180: int * const varid@var1803 ,
181: bool * const knownInitValue@var1804 ,
182: long long * const initValue@var1805 ,
183: bool * const partialCond@var1806 ,
184: long long * const stepValue@var1807 ,
185: long long * const lastValue@var1808 ) ;
186:
187: bool precedes ( const Token * tok1@var1809 , const Token * tok2@var1810 ) ;
188: bool succeeds ( const Token * tok1@var1811 , const Token * tok2@var1812 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1813 , bool onVar@var1814 = true , int depth@var1815 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1816 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1817 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1818 ,
198: bool temporary@var1819 = true ,
199: bool inconclusive@var1820 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1821 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1822 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1823 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1824 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1825 , bool macro@var1826 , const Token * tok1@var1827 , const Token * tok2@var1828 , const Library & library@var1829 , bool pure@var1830 , bool followVar@var1831 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1832 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1833 , const Token * const tok2@var1834 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1835 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1836 , bool cpp@var1837 , const Token * const cond1@var1838 , const Token * const cond2@var1839 , const Library & library@var1840 , bool pure@var1841 , bool followVar@var1842 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1843 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1844 , const Token * const tok1@var1845 , const Token * const tok2@var1846 , const Library & library@var1847 , bool pure@var1848 , bool followVar@var1849 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1850 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1851 , const Library & library@var1852 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1853 , const Library & library@var1854 , bool pure@var1855 , bool cpp@var1856 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1857 , const Token * tok@var1858 , bool checkArrayAccess@var1859 = false , bool checkReference@var1860 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1861 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1862 , const Library * library@var1863 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1864 ,
238: const Library * library@var1865 = nullptr ,
239: const Token * * unknownFunc@var1866 = nullptr ,
240: bool functionScope@var1867 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1868 ,
244: const Variable * var@var1869 ,
245: Scope :: ScopeType type@var1870 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1871 , int & argn@var1872 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1873 , int & argn@var1874 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1875 , int argnr@var1876 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1877 , int indirect@var1878 , int varid@var1879 , const Settings * settings@var1880 , bool * inconclusive@var1881 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1882 , int indirect@var1883 , const Settings * settings@var1884 , bool * inconclusive@var1885 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1886 , const Token * end@var1887 , const int exprid@var1888 , bool globalvar@var1889 , const Settings * settings@var1890 , bool cpp@var1891 , int depth@var1892 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1893 , const Token * end@var1894 , int indirect@var1895 , const int exprid@var1896 , bool globalvar@var1897 , const Settings * settings@var1898 , bool cpp@var1899 , int depth@var1900 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1901 , int indirect@var1902 , const Settings * settings@var1903 , bool cpp@var1904 , int depth@var1905 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1906 , const Settings * settings@var1907 , bool cpp@var1908 , int depth@var1909 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1910 ,
283: const Token * end@var1911 ,
284: int indirect@var1912 ,
285: std :: vector < const Variable * > vars@var1913 ,
286: const Settings * settings@var1914 ,
287: bool cpp@var1915 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1916 , int indirect@var1917 , const Settings * settings@var1918 , bool cpp@var1919 ) ;
290: bool isThisChanged ( const Token * start@var1920 , const Token * end@var1921 , int indirect@var1922 , const Settings * settings@var1923 , bool cpp@var1924 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var1925 , const Token * end@var1926 , int indirect@var1927 , const int exprid@var1928 , bool globalvar@var1929 , const Settings * settings@var1930 , bool cpp@var1931 , int depth@var1932 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var1933 , const Token * end@var1934 , int indirect@var1935 , const int exprid@var1936 , bool globalvar@var1937 , const Settings * settings@var1938 , bool cpp@var1939 , int depth@var1940 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var1941 ,
296: const Token * start@var1942 ,
297: const Token * end@var1943 ,
298: const Settings * settings@var1944 ,
299: bool cpp@var1945 ,
300: int depth@var1946 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var1947 ,
303: const Token * tok@var1948 ,
304: int indirect@var1949 ,
305: bool globalvar@var1950 ,
306: const Settings * settings@var1951 ,
307: bool cpp@var1952 ,
308: int depth@var1953 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var1954 , int varid@var1955 , bool * inconclusive@var1956 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var1957 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var1958 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var1959 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var1960 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var1961 ) ;
330:
331: int getArgumentPos ( const Variable * var@var1962 , const Function * f@var1963 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var1964 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var1965 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var1966 ) ;
346: Token * findLambdaEndToken ( Token * first@var1967 ) ;
347:
348: bool isLikelyStream ( bool cpp@var1968 , const Token * stream@var1969 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var1970 , const Token * op@var1971 ) ;
356:
357: bool isCPPCast ( const Token * tok@var1972 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var1973 , const char * skipMatch@var1974 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var1975 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var1976 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var1977 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var1978 , const Library & library@var1979 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var1980 ) ;
371:
372: bool isNullOperand ( const Token * expr@var1981 ) ;
373:
374: bool isGlobalData ( const Token * expr@var1982 , bool cpp@var1983 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var1984 , const Library & library@var1985 ) : mCpp@var2018 ( cpp@var1984 ) , mLibrary@var2019 ( library@var1985 ) , mWhat@var2020 ( What :: Reassign ) , mValueFlowKnown@var2022 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var1986 , const Token * lhs@var1987 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var1988 , const Token * startToken@var1989 , const Token * endToken@var1990 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var1991 , const Token * startToken@var1992 , const Token * endToken@var1993 ) ;
404:
405: struct KnownAndToken {
406: bool known@var1994 ;
407: const Token * token@var1995 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var1996 , const Token * startToken@var1997 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var1998 , bool * localOut@var1999 = nullptr , bool * unknownVarIdOut@var2000 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var2001 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var2002 ;
420: explicit Result ( Type type@var2003 ) : type@var2002 ( type@var2003 ) , token@var2006 ( nullptr ) { }
421: Result ( Type type@var2004 , const Token * token@var2005 ) : type@var2002 ( type@var2004 ) , token@var2006 ( token@var2005 ) { }
422: const Token * token@var2006 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var2007 , const Token * startToken@var2008 , const Token * endToken@var2009 ) ;
426: struct Result checkRecursive ( const Token * expr@var2010 , const Token * startToken@var2011 , const Token * endToken@var2012 , const std :: set < int > & exprVarIds@var2013 , bool local@var2014 , bool inInnerClass@var2015 , int depth@var2016 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var2017 ) const ;
430:
431: const bool mCpp@var2018 ;
432: const Library & mLibrary@var2019 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var2020 ;
434: std :: vector < KnownAndToken > mValueFlow@var2021 ;
435: bool mValueFlowKnown@var2022 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var2023 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var2024 ) {
44: if (@expr1073746344 bit@var2024 >=@expr1073746345 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073746346 (@expr1073746347 1LL <<@expr1073746348 (@expr1073746349 bit@var2024 -@expr1073746350 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var2025 ) {
50: if (@expr1073746351 bit@var2025 >=@expr1073746352 64 ) {
51: return (@expr4529 ~@expr1073746354 0ULL ) >>@expr1073746355 1 ; }
52: return (@expr4529 1LL <<@expr1073746357 (@expr4529 bit@var2025 -@expr1073746359 1 ) ) -@expr1073746360 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var2026 ) const {
59: return value@var2026 >=@expr1073746361 min_value (@expr1073746362 int_bit@var2036 ) &&@expr1073746363 value@var2026 <=@expr1073746364 max_value (@expr1073746365 int_bit@var2036 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var2027 ) const {
63: unsigned long long intMax@var2028 ; intMax@var2028 =@expr1073746366 max_value (@expr1073746367 int_bit@var2036 ) ;
64: return value@var2027 <=@expr1073746368 intMax@var2028 ;
65: }
66:
67: bool isLongValue ( long long value@var2029 ) const {
68: return value@var2029 >=@expr1073746369 min_value (@expr1073746370 long_bit@var2037 ) &&@expr1073746371 value@var2029 <=@expr1073746372 max_value (@expr1073746373 long_bit@var2037 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var2030 ) const {
72: unsigned long long longMax@var2031 ; longMax@var2031 =@expr1073746374 max_value (@expr1073746375 long_bit@var2037 ) ;
73: return value@var2030 <=@expr1073746376 longMax@var2031 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var2032 ) const {
77: unsigned long long longLongMax@var2033 ; longLongMax@var2033 =@expr1073746377 max_value (@expr1073746378 long_long_bit@var2038 ) ;
78: return value@var2032 <=@expr1073746379 longLongMax@var2033 ;
79: }
80:
81: int char_bit@var2034 ;
82: int short_bit@var2035 ;
83: int int_bit@var2036 ;
84: int long_bit@var2037 ;
85: int long_long_bit@var2038 ;
86:
87:
88: int sizeof_bool@var2039 ;
89: int sizeof_short@var2040 ;
90: int sizeof_int@var2041 ;
91: int sizeof_long@var2042 ;
92: int sizeof_long_long@var2043 ;
93: int sizeof_float@var2044 ;
94: int sizeof_double@var2045 ;
95: int sizeof_long_double@var2046 ;
96: int sizeof_wchar_t@var2047 ;
97: int sizeof_size_t@var2048 ;
98: int sizeof_pointer@var2049 ;
99:
100: char defaultSign@var2050 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var2051 ;
115:
116:
117: bool platform ( PlatformType type@var2052 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var2053 [ ] , const std :: string & filename@var2054 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var2055 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var2051 ==@expr1073746380 Win32A ||@expr1073746381
136: platformType@var2051 ==@expr1073746382 Win32W ||@expr1073746383
137: platformType@var2051 ==@expr1073746384 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073746385 platformType@var2051 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var2056 ) {
145: switch (@expr1073746386 pt@var2056 ) {
146: case Unspecified :@expr4563 ;
147: return "Unspecified" ;
148: case Native :@expr4563 ;
149: return "Native" ;
150: case Win32A :@expr4563 ;
151: return "win32A" ;
152: case Win32W :@expr4563 ;
153: return "win32W" ;
154: case Win64 :@expr4563 ;
155: return "win64" ;
156: case Unix32 :@expr4563 ;
157: return "unix32" ;
158: case Unix64 :@expr4563 ;
159: return "unix64" ;
160: case PlatformFile :@expr4563 ;
161: return "platformFile" ;
162: default :@expr4563 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073746396 char_bit@var2034 +@expr1073746397 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073746398 char_bit@var2034 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073746399 char_bit@var2034 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var2057 , const std :: string & rhs@var2058 ) const {
41: return caseInsensitiveStringCompare (@expr1073746400 lhs@var2057 , rhs@var2058 ) <@expr1073746401 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var2066 ( cppcheck :: Platform :: Unspecified ) , msc@var2067 ( false ) , useMfc@var2068 ( false ) { }
67: std :: string cfg@var2059 ;
68: std :: string filename@var2060 ;
69: std :: string defines@var2061 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var2061 +@expr1073746402 (@expr1073746403 msc@var2067 ?@expr1073746404 ";_MSC_VER=1900" :@expr1073746405 "" ) +@expr1073746406 (@expr1073746407 useMfc@var2068 ?@expr1073746408 ";__AFXWIN_H__=1" :@expr1073746409 "" ) ;
72: }
73: std :: set < std :: string > undefs@var2062 ;
74: std :: list < std :: string > includePaths@var2063 ;
75: std :: list < std :: string > systemIncludePaths@var2064 ;
76: std :: string standard@var2065 ;
77: cppcheck :: Platform :: PlatformType platformType@var2066 ;
78: bool msc@var2067 ;
79: bool useMfc@var2068 ;
80:
81: void parseCommand ( std :: string command@var2069 ) ;
82: void setDefines ( std :: string defs@var2070 ) ;
83: void setIncludePaths ( const std :: string & basepath@var2071 , const std :: list < std :: string > & in@var2072 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2073 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var2074 ;
86: Type projectType@var2075 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var2076 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous5 {
96: std :: string analyzeAllVsConfigs@var2077 ;
97: std :: vector < std :: string > pathNames@var2078 ;
98: std :: list < std :: string > libraries@var2079 ;
99: std :: list < std :: string > excludedPaths@var2080 ;
100: std :: list < std :: string > checkVsConfigs@var2081 ;
101: std :: string projectFile@var2082 ;
102: std :: string platform@var2083 ;
103: } ; struct Anonymous5 guiProject@var2084 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var2085 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var2086 ) ;
107:
108: Type import ( const std :: string & filename@var2087 , Settings * settings@var2088 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var2089 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var2090 , Settings * settings@var2091 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var2092 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var2093 , const std :: string & path@var2094 , const std :: vector < std :: string > & fileFilters@var2095 ) ;
115: bool importVcxproj ( const std :: string & filename@var2096 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2097 , const std :: string & additionalIncludeDirectories@var2098 , const std :: vector < std :: string > & fileFilters@var2099 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var2100 ) ;
117:
118: static void printError ( const std :: string & message@var2101 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var2102 ) ;
121:
122: std :: string mPath@var2103 ;
123: std :: set < std :: string > mAllVSConfigs@var2104 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var2105 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var2106 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var2107 [ 2 ] = "1" ;
131: const char BuildDirElementName@var2108 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var2109 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var2110 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var2111 [ 7 ] = "parser" ;
135: const char BugHunting@var2112 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var2113 [ 11 ] = "includedir" ;
137: const char DirElementName@var2114 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var2115 [ 5 ] = "name" ;
139: const char DefinesElementName@var2116 [ 8 ] = "defines" ;
140: const char DefineName@var2117 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var2118 [ 5 ] = "name" ;
142: const char UndefinesElementName@var2119 [ 10 ] = "undefines" ;
143: const char UndefineName@var2120 [ 9 ] = "undefine" ;
144: const char PathsElementName@var2121 [ 6 ] = "paths" ;
145: const char PathName@var2122 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var2123 [ 5 ] = "name" ;
147: const char RootPathName@var2124 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var2125 [ 5 ] = "name" ;
149: const char IgnoreElementName@var2126 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var2127 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var2128 [ 5 ] = "name" ;
152: const char ExcludeElementName@var2129 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var2130 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var2131 [ 5 ] = "name" ;
155: const char FunctionContracts@var2132 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var2133 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var2134 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var2135 [ 8 ] = "library" ;
159: const char PlatformElementName@var2136 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var2137 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var2138 [ 12 ] = "suppression" ;
162: const char AddonElementName@var2139 [ 6 ] = "addon" ;
163: const char AddonsElementName@var2140 [ 7 ] = "addons" ;
164: const char ToolElementName@var2141 [ 5 ] = "tool" ;
165: const char ToolsElementName@var2142 [ 6 ] = "tools" ;
166: const char TagsElementName@var2143 [ 5 ] = "tags" ;
167: const char TagElementName@var2144 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var2145 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var2146 [ 4 ] = "tag" ;
170: const char WarningElementName@var2147 [ 8 ] = "warning" ;
171: const char HashAttributeName@var2148 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var2149 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var2150 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var2151 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var2152 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var2153 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var2154 [ 11 ] = "clang-tidy" ;
178: const char Name@var2155 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var2156 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var2157 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var2158 , std :: clock_t clocks@var2159 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var2160 ;
45: long mNumberOfResults@var2161 ;
46:
47: TimerResultsData ( )
48: : mClocks@var2160 ( 0 )
49: , mNumberOfResults@var2161 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var2162 =@expr1073746411 (@expr1073746412 double ) (@expr1073746413 (@expr1073746414 unsigned long ) mClocks@var2160 ) /@expr1073746415 (@expr1073746416 double ) CLOCKS_PER_SEC@expr1073746410 ;
53: return ret@var2162 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var2163 ) const ;
62: void addResults ( const std :: string & str@var2164 , std :: clock_t clocks@var2165 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var2166 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var2167 , SHOWTIME_MODES showtimeMode@var2168 , TimerResultsIntf * timerResults@var2169 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var2170 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var2171 ;
79: TimerResultsIntf * mTimerResults@var2172 ;
80: std :: clock_t mStart@var2173 ;
81: const SHOWTIME_MODES mShowTimeMode@var2174 ;
82: bool mStopped@var2175 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var2176 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var2177 ;
103:
104:
105: std :: string addonPython@var2178 ;
106:
107:
108: std :: vector < std :: string > basePaths@var2179 ;
109:
110:
111: std :: string buildDir@var2180 ;
112:
113:
114: bool checkAllConfigurations@var2181 ;
115:
116:
117: bool checkConfiguration@var2182 ;
118:
|
121:
122: bool checkHeaders@var2183 ;
123:
124:
125: bool checkLibrary@var2184 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var2185 ;
129:
130:
131: bool checkUnusedTemplates@var2186 ;
132:
133:
134: bool clang@var2187 ;
135:
136:
137: std :: string clangExecutable@var2188 ;
138:
139:
140: bool clangTidy@var2189 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var2190 ;
144:
145:
146: std :: string cppcheckCfgProductName@var2191 ;
147:
148:
149: std :: string cppcheckCfgAbout@var2192 ;
150:
151:
152: bool daca@var2193 ;
153:
154:
155: bool debugnormal@var2194 ;
156:
157:
158: bool debugSimplified@var2195 ;
159:
160:
161: bool debugtemplate@var2196 ;
162:
163:
164: bool debugwarnings@var2197 ;
165:
166:
167: bool dump@var2198 ;
168: std :: string dumpFile@var2199 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var2200 ;
176:
177:
178: bool exceptionHandling@var2201 ;
179:
180:
181: std :: string exename@var2202 ;
182:
183:
184:
185: int exitCode@var2203 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var2204 ;
189:
190:
191: bool force@var2205 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var2206 ;
196:
197:
198: bool inlineSuppressions@var2207 ;
199:
200:
201:
202: unsigned int jobs@var2208 ;
203:
|
206:
207: bool jointSuppressionReport@var2209 ;
208:
209:
210: std :: list < std :: string > libraries@var2210 ;
211:
212:
213: Library library@var2211 ;
214:
215:
216:
217: int loadAverage@var2212 ;
218:
|
221:
222: int maxConfigs@var2213 ;
223:
224:
225: int maxCtuDepth@var2214 ;
226:
227:
228: int maxTemplateRecursion@var2215 ;
229:
230:
231: Suppressions nofail@var2216 ;
232:
233:
234: Suppressions nomsg@var2217 ;
235:
236:
237: std :: string outputFile@var2218 ;
238:
239:
240: std :: string plistOutput@var2219 ;
241:
242:
243: bool preprocessOnly@var2220 ;
244:
245: ImportProject project@var2221 ;
246:
247:
248: bool quiet@var2222 ;
249:
250:
251: bool relativePaths@var2223 ;
252:
253:
254: bool reportProgress@var2224 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var2225 ( "simple" )
261: , id@var2227 ( "rule" )
262: , severity@var2229 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var2225 ;
266: std :: string pattern@var2226 ;
267: std :: string id@var2227 ;
268: std :: string summary@var2228 ;
269: Severity :: SeverityType severity@var2229 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var2230 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var2236 ( false ) , externalFunctions@var2237 ( false ) , internalFunctions@var2238 ( false ) , externalVariables@var2239 ( false ) { }
281:
282: static const char XmlRootName@var2231 [ ] ;
283: static const char XmlClasses@var2232 [ ] ;
284: static const char XmlExternalFunctions@var2233 [ ] ;
285: static const char XmlInternalFunctions@var2234 [ ] ;
286: static const char XmlExternalVariables@var2235 [ ] ;
287:
288: void clear ( ) {
289: classes@var2236 =@expr1073746417 externalFunctions@var2237 =@expr1073746418 internalFunctions@var2238 =@expr1073746419 externalVariables@var2239 =@expr1073746420 false ;
290: }
291:
|
297:
298: bool classes@var2236 ;
299:
|
304:
305: bool externalFunctions@var2237 ;
306:
|
310:
311: bool internalFunctions@var2238 ;
312:
|
316:
317: bool externalVariables@var2239 ;
318: } ;
319:
320: SafeChecks safeChecks@var2240 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var2241 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var2242 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var2243 ;
325:
326:
327: SHOWTIME_MODES showtime@var2244 ;
328:
329:
330: Standards standards@var2245 ;
331:
332:
333:
334: std :: string templateFormat@var2246 ;
335:
336:
337:
338: std :: string templateLocation@var2247 ;
339:
340:
341: std :: string userDefines@var2248 ;
342:
343:
344: std :: set < std :: string > userUndefs@var2249 ;
345:
346:
347: std :: list < std :: string > userIncludes@var2250 ;
348:
349:
350: bool verbose@var2251 ;
351:
352:
353: bool xml@var2252 ;
354:
355:
356: int xml_version@var2253 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var2254 ) const {
363: for (@expr1073746421 const std ::@expr1073746422 string &@expr1073746423 configExcludePath@var2255 :@expr1073746424 configExcludePaths@var2190 ) {
364: if (@expr1073746425 file@var2254 .@expr1073746426 length (@expr1073746427 ) >=@expr1073746428 configExcludePath@var2255 .@expr4605 length (@expr4606 ) &&@expr1073746431 file@var2254 .@expr1073746432 compare (@expr1073746433 0 , configExcludePath@var2255 .@expr4605 length (@expr4606 ) , configExcludePath@var2255 ) ==@expr1073746436 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var2256 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var2257 , bool inconclusiveCheck@var2258 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073746437 find (@expr1073746438 libraries@var2210 .@expr1073746439 begin (@expr1073746440 ) , libraries@var2210 .@expr4617 end (@expr4618 ) , "posix" ) !=@expr1073746443 libraries@var2210 .@expr4617 end (@expr4618 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var2259 = true ) {
392: Settings ::@expr1073746446 mTerminated@var2176 =@expr1073746447 t@var2259 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073746448 mTerminated@var2176 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var2260 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var2261 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var2262 ) {
47: mSettings@var2297 =@expr1073746449 settings@var2262 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var2297 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var2299 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var2300 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var2263 ) ;
72:
73: void addtoken ( const std :: string & str@var2264 , const int lineno@var2265 , const int column@var2266 , const int fileno@var2267 , bool split@var2268 = false ) ;
74: void addtoken ( const std :: string & str@var2269 , const Token * locationTok@var2270 ) ;
75:
76: void addtoken ( const Token * tok@var2271 , const int lineno@var2272 , const int column@var2273 , const int fileno@var2274 ) ;
77: void addtoken ( const Token * tok@var2275 , const Token * locationTok@var2276 ) ;
78: void addtoken ( const Token * tok@var2277 ) ;
79:
80: static void insertTokens ( Token * dest@var2278 , const Token * src@var2279 , int n@var2280 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var2281 , const Token * first@var2282 , const Token * last@var2283 , bool one_line@var2284 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var2285 , const std :: string & file0@var2286 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var2287 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var2288 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var2294 .@expr1073746450 front@var2301 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var2294 .@expr1073746451 front@var2301 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var2294 .@expr1073746452 back@var2302 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var2294 .@expr1073746453 back@var2302 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var2295 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var2289 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var2290 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var2291 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var2292 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var2293 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var2294 ;
206:
207:
208: std :: vector < std :: string > mFiles@var2295 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var2296 ;
212:
213:
214: const Settings * mSettings@var2297 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var2298 ;
217:
218:
219: bool mIsC@var2299 ;
220: bool mIsCpp@var2300 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var2303 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var2304 ;
67: mutable int mVarId@var2305 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var2306 ) ;
73: bool hasVariable ( const std :: string & varname@var2307 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var2308 ) const {
75: return mVariableId@var2303 .@expr1073746454 find (@expr1073746455 varname@var2308 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var2303 .@expr1073746456 end (@expr1073746457 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var2303 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073746458 mVarId@var2305 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var2309 , ErrorLogger * errorLogger@var2310 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var2311 ) {
95: mTimerResults@var2431 =@expr1073746459 tr@var2311 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var2409 .@expr1073746460 isC (@expr1073746461 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var2409 .@expr1073746462 isCPP (@expr1073746463 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var2312 , bool * unknown@var2313 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var2314 , const std :: string & FileName@var2315 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var2316 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var2317 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var2318 ,
142: const char FileName@var2319 [ ] ,
143: const std :: string & configuration@var2320 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var2321 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var2322 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var2323 , const Token * end@var2324 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var2325 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var2326 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var2327 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var2328 , const Token * const tokEnd@var2329 , const bool only_k_r_fpar@var2330 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var2331 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var2332 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var2333 , bool commandWithCondition@var2334 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var2335 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var2336 , Token * * _tok2@var2337 , Token * * _tok3@var2338 , std :: string & value@var2339 , int & valueVarId@var2340 , bool & valueIsPointer@var2341 , bool floatvar@var2342 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var2343 , Token * tok3@var2344 , int varid@var2345 , const std :: string & structname@var2346 , std :: string & value@var2347 , int valueVarId@var2348 , bool valueIsPointer@var2349 , const Token * const valueToken@var2350 , int indentlevel@var2351 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var2352 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var2353 , const std :: string & endsWith@var2354 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var2355 , const std :: string & endsWith@var2356 , bool cpp@var2357 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var2358 ) {
585: mPreprocessor@var2432 =@expr1073746464 preprocessor@var2358 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var2432 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var2359 , const Token * end@var2360 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var2361 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var2362 , const std :: string & code@var2363 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var2364 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var2365 , const std :: string & what@var2366 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var2367 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var2368 , const std :: string & msg@var2369 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var2370 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var2371 , const std :: string & macroName@var2372 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var2373 , const Token * end@var2374 , bool allowSemicolon@var2375 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var2376 , const Severity :: SeverityType severity@var2377 , const std :: string & id@var2378 , const std :: string & msg@var2379 , bool inconclusive@var2380 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var2381 , Severity :: SeverityType severity@var2382 , const std :: string & id@var2383 , const std :: string & msg@var2384 , bool inconclusive@var2385 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var2386 , const Token * name@var2387 , const Token * typeDef@var2388 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var2389 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var2390 ,
821: const VariableMap & variableMap@var2391 ,
822: const int scopeStartVarId@var2392 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var2393 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var2394 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var2395 ,
827: int * varId@var2396 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var2397 ,
830: Token * const startToken@var2398 ,
831: const Token * const endToken@var2399 ,
832: const std :: map < std :: string , int > & varlist@var2400 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var2401 ,
834: int * varId_@var2402 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var2403 ) ;
849:
850: bool operatorEnd ( const Token * tok@var2404 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var2430 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var2405 ) {
861: mSettings@var2416 =@expr1073746465 settings@var2405 ;
862: list@var2409 .@expr1073746466 setSettings (@expr1073746467 settings@var2405 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var2418 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var2406 ) const ;
877:
878: void dump ( std :: ostream & out@var2407 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var2408 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var2428 ;
888: }
889:
|
892:
893: TokenList list@var2409 ;
894:
895: const Token * tokens ( ) const {
896: return list@var2409 .@expr1073746468 front (@expr1073746469 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var2410 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var2411 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var2412 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var2413 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var2416 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var2414 , bool inOperator@var2415 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073746470 mVarId@var2428 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var2416 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var2417 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var2418 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var2419 ;
973:
974:
975:
976: std :: string mConfiguration@var2420 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var2421 ;
980:
981: struct TypedefInfo {
982: std :: string name@var2422 ;
983: std :: string filename@var2423 ;
984: int lineNumber@var2424 ;
985: int column@var2425 ;
986: bool used@var2426 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var2427 ;
989:
990:
991: int mVarId@var2428 ;
992:
993:
994: int mUnnamedCount@var2429 ;
995:
|
999:
1000: bool mCodeWithTemplates@var2430 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var2431 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var2432 ;
1013: } ;

##file cppcheck-2.8/lib/checknullpointer.cpp

1:
|
42:
43: namespace {
44: CheckNullPointer instance@var2433 ;
45: }
46:
47:
48:
49: static bool checkNullpointerFunctionCallPlausibility ( const Function * func@var2434 , unsigned int arg@var2435 )
50: {
51: return !@expr1073746471 func@var2434 ||@expr1073746472 (@expr1073746473 func@var2434 .@expr1073746474 argCount (@expr1073746475 ) >=@expr1073746476 arg@var2435 &&@expr1073746477 func@var2434 .@expr4654 getArgumentVar (@expr4655 arg@var2435 -@expr4656 1 ) &&@expr1073746481 func@var2434 .@expr4654 getArgumentVar (@expr4655 arg@var2435 -@expr4656 1 ) .@expr1073746485 isPointer (@expr1073746486 ) ) ;
52: }
53:
|
59:
60: void CheckNullPointer :: parseFunctionCall ( const Token & tok@var2436 , std :: list < const Token * > & var@var2437 , const Library * library@var2438 )
61: {
62: if (@expr1073746487 Token ::@expr4664 Match (@expr1073746489 &@expr4666 tok@var2436 , "%name% ( )" ) ||@expr1073746491 !@expr1073746492 tok@var2436 .@expr1073746493 tokAt (@expr1073746494 2 ) ) {
63: return ; }
64:
65: const std ::@expr1073746495 vector < const Token *@expr1073746496 > args@var2439 =@expr1073746497 getArguments (@expr1073746498 &@expr4666 tok@var2436 ) ;
66:
67: if (@expr1073746500 library@var2438 ||@expr1073746501 tok@var2436 .@expr4678 function (@expr4679 ) !=@expr1073746504 nullptr ) {
68: for (@expr1073746505 int argnr@var2440 =@expr1073746506 1 ; argnr@var2440 <=@expr1073746507 args@var2439 .@expr4684 size (@expr4685 ) ; ++@expr1073746510 argnr@var2440 ) {
69: const Token * param@var2441 ; param@var2441 =@expr1073746511 args@var2439 [@expr1073746512 argnr@var2440 -@expr4689 1 ] ;
70: if (@expr1073746514 library@var2438 &&@expr1073746515 library@var2438 .@expr1073746516 isnullargbad (@expr1073746517 &@expr4666 tok@var2436 , argnr@var2440 ) &&@expr1073746519 checkNullpointerFunctionCallPlausibility (@expr1073746520 tok@var2436 .@expr4678 function (@expr4679 ) , argnr@var2440 ) ) {
71: var@var2437 .@expr4699 push_back (@expr4700 param@var2441 ) ; }
72: else { if (@expr1073746525 tok@var2436 .@expr4678 function (@expr4679 ) ) {
73: const Variable * argVar@var2442 ; argVar@var2442 =@expr1073746528 tok@var2436 .@expr4678 function (@expr4679 ) .@expr1073746531 getArgumentVar (@expr1073746532 argnr@var2440 -@expr4689 1 ) ;
74: if (@expr1073746534 argVar@var2442 &&@expr1073746535 argVar@var2442 .@expr1073746536 isStlStringType (@expr1073746537 ) &&@expr1073746538 !@expr1073746539 argVar@var2442 .@expr1073746540 isArrayOrPointer (@expr1073746541 ) ) {
75: var@var2437 .@expr4699 push_back (@expr4700 param@var2441 ) ; }
76: } }
77: }
78: }
79:
80: if (@expr1073746544 library@var2438 &&@expr1073746545 library@var2438 .@expr1073746546 formatstr_function (@expr1073746547 &@expr4666 tok@var2436 ) ) {
81: const int formatStringArgNr@var2443 =@expr1073746549 library@var2438 .@expr1073746550 formatstr_argno (@expr1073746551 &@expr4666 tok@var2436 ) ;
82: if (@expr1073746553 formatStringArgNr@var2443 <@expr1073746554 0 ||@expr1073746555 formatStringArgNr@var2443 >=@expr1073746556 args@var2439 .@expr4684 size (@expr4685 ) ) {
83: return ; }
84:
85:
86: if (@expr1073746559 Token ::@expr4664 Match (@expr1073746561 &@expr4666 tok@var2436 , "snprintf|vsnprintf|fnprintf|vfnprintf" ) &&@expr1073746563 args@var2439 .@expr4684 size (@expr4685 ) >@expr1073746566 1 &&@expr1073746567 !@expr1073746568 (@expr1073746569 args@var2439 [@expr4746 1 ] &&@expr1073746571 args@var2439 [@expr4746 1 ] .@expr1073746573 hasKnownIntValue (@expr1073746574 ) &&@expr1073746575 args@var2439 [@expr4746 1 ] .@expr1073746577 getKnownIntValue (@expr1073746578 ) ==@expr1073746579 0 ) ) {
87: var@var2437 .@expr4699 push_back (@expr1073746581 args@var2439 [@expr1073746582 0 ] ) ; }
88:
89: if (@expr1073746583 args@var2439 [@expr4760 formatStringArgNr@var2443 ] .@expr1073746585 tokType (@expr1073746586 ) !=@expr1073746587 Token ::@expr1073746588 eString ) {
90: return ; }
91: const std ::@expr4765 string &@expr1073746590 formatString@var2444 =@expr1073746591 args@var2439 [@expr4760 formatStringArgNr@var2443 ] .@expr1073746593 strValue (@expr1073746594 ) ;
92: int argnr@var2445 ; argnr@var2445 =@expr1073746595 formatStringArgNr@var2443 +@expr1073746596 1 ;
93: const bool scan@var2446 =@expr1073746597 library@var2438 .@expr1073746598 formatstr_scan (@expr1073746599 &@expr4666 tok@var2436 ) ;
94:
95: bool percent@var2447 ; percent@var2447 =@expr1073746601 false ;
96: for (@expr1073746602 std ::@expr4765 string ::@expr4765 const_iterator i@var2448 =@expr1073746605 formatString@var2444 .@expr1073746606 begin (@expr1073746607 ) ; i@var2448 !=@expr1073746608 formatString@var2444 .@expr4785 end (@expr4786 ) ; ++@expr1073746611 i@var2448 ) {
97: if (@expr1073746612 *@expr4789 i@var2448 ==@expr1073746614 '%' ) {
98: percent@var2447 =@expr1073746615 !@expr1073746616 percent@var2447 ;
99: } else { if (@expr1073746617 percent@var2447 ) {
100: percent@var2447 =@expr1073746618 false ;
101:
102: bool _continue@var2449 ; _continue@var2449 =@expr1073746619 false ;
103: while (@expr1073746620 !@expr1073746621 std ::@expr1073746622 isalpha (@expr1073746623 (@expr1073746624 unsigned char ) *@expr4789 i@var2448 ) ) {
104: if (@expr1073746626 *@expr4789 i@var2448 ==@expr1073746628 '*' ) {
105: if (@expr1073746629 scan@var2446 ) {
106: _continue@var2449 =@expr1073746630 true ; }
107: else {
108: argnr@var2445 ++@expr1073746631 ; }
109: }
110: ++@expr1073746632 i@var2448 ;
111: if (@expr1073746633 i@var2448 ==@expr1073746634 formatString@var2444 .@expr4785 end (@expr4786 ) ) {
112: return ; }
113: }
114: if (@expr1073746637 _continue@var2449 ) {
115: continue ; }
116:
117: if (@expr1073746638 argnr@var2445 <@expr1073746639 args@var2439 .@expr4684 size (@expr4685 ) &&@expr1073746642 (@expr1073746643 *@expr4789 i@var2448 ==@expr1073746645 'n' ||@expr1073746646 *@expr4789 i@var2448 ==@expr1073746648 's' ||@expr1073746649 scan@var2446 ) ) {
118: var@var2437 .@expr4699 push_back (@expr1073746651 args@var2439 [@expr1073746652 argnr@var2445 ] ) ; }
119:
120: if (@expr1073746653 *@expr4789 i@var2448 !=@expr1073746655 'm' ) {
121: argnr@var2445 ++@expr1073746656 ; }
122: } }
123: }
124: }
125: }
126:
127: namespace {
128: const std :: set < std :: string > stl_stream@var2450 = {
129: "fstream" , "ifstream" , "iostream" , "istream" ,
130: "istringstream" , "ofstream" , "ostream" , "ostringstream" ,
131: "stringstream" , "wistringstream" , "wostringstream" , "wstringstream"
132: } ;
133: }
134:
|
143:
144: bool CheckNullPointer :: isPointerDeRef ( const Token * tok@var2451 , bool & unknown@var2452 ) const
145: {
146: return isPointerDeRef (@expr1073746657 tok@var2451 , unknown@var2452 , mSettings@var29 ) ;
147: }
148:
149: bool CheckNullPointer :: isPointerDeRef ( const Token * tok@var2453 , bool & unknown@var2454 , const Settings * settings@var2455 )
150: {
151: unknown@var2454 =@expr1073746658 false ;
152:
153:
154: if (@expr1073746659 Token ::@expr4836 Match (@expr1073746661 tok@var2453 .@expr4838 previous (@expr4839 ) , "[(,] %name% [,)]" ) &&@expr1073746664 settings@var2455 ) {
155: const Token * ftok@var2456 ; ftok@var2456 =@expr1073746665 tok@var2453 .@expr4838 previous (@expr4839 ) ;
156: while (@expr1073746668 ftok@var2456 &&@expr1073746669 ftok@var2456 .@expr4846 str (@expr4847 ) !=@expr1073746672 "(" ) {
157: if (@expr1073746673 ftok@var2456 .@expr4846 str (@expr4847 ) ==@expr1073746676 ")" ) {
158: ftok@var2456 =@expr1073746677 ftok@var2456 .@expr1073746678 link (@expr1073746679 ) ; }
159: ftok@var2456 =@expr1073746680 ftok@var2456 .@expr4857 previous (@expr4858 ) ;
160: }
161: if (@expr1073746683 ftok@var2456 &&@expr1073746684 ftok@var2456 .@expr4857 previous (@expr4858 ) ) {
162: std ::@expr1073746687 list < const Token *@expr1073746688 > varlist@var2457 ;
163: parseFunctionCall (@expr1073746689 *@expr1073746690 ftok@var2456 .@expr4857 previous (@expr4858 ) , varlist@var2457 , &@expr1073746693 settings@var2455 .@expr1073746694 library@var2458 ) ;
164: if (@expr1073746695 std ::@expr1073746696 find (@expr1073746697 varlist@var2457 .@expr1073746698 begin (@expr1073746699 ) , varlist@var2457 .@expr4876 end (@expr4877 ) , tok@var2453 ) !=@expr1073746702 varlist@var2457 .@expr4876 end (@expr4877 ) ) {
165: return true ;
166: }
167: }
168: }
169:
170: if (@expr1073746705 tok@var2453 .@expr1073746706 str (@expr1073746707 ) ==@expr1073746708 "(" &&@expr1073746709 !@expr1073746710 tok@var2453 .@expr1073746711 scope (@expr1073746712 ) .@expr1073746713 isExecutable (@expr1073746714 ) ) {
171: return false ; }
172:
173: const Token * parent@var2459 ; parent@var2459 =@expr1073746715 tok@var2453 .@expr1073746716 astParent (@expr1073746717 ) ;
174: if (@expr4894 !@expr4895 parent@var2459 ) {
175: return false ; }
176: const bool addressOf@var2460 =@expr1073746720 parent@var2459 .@expr4897 astParent (@expr4898 ) &&@expr1073746723 parent@var2459 .@expr4897 astParent (@expr4898 ) .@expr1073746726 str (@expr1073746727 ) ==@expr1073746728 "&" ;
177: if (@expr1073746729 parent@var2459 .@expr4906 str (@expr4907 ) ==@expr1073746732 "." &&@expr1073746733 astIsRHS (@expr1073746734 tok@var2453 ) ) {
178: return isPointerDeRef (@expr1073746735 parent@var2459 , unknown@var2454 , settings@var2455 ) ; }
179: const bool firstOperand@var2461 =@expr1073746736 parent@var2459 .@expr4913 astOperand1 (@expr4914 ) ==@expr4915 tok@var2453 ;
180: parent@var2459 =@expr1073746740 astParentSkipParens (@expr1073746741 tok@var2453 ) ;
181: if (@expr4894 !@expr4895 parent@var2459 ) {
182: return false ; }
183:
184:
185: if (@expr1073746744 parent@var2459 .@expr1073746745 isUnaryOp (@expr1073746746 "*" ) ) {
186:
187: if (@expr1073746747 tok@var2453 .@expr4924 variable (@expr4925 ) &&@expr1073746750 tok@var2453 .@expr4924 variable (@expr4925 ) .@expr4929 nameToken (@expr4930 ) ==@expr1073746755 tok@var2453 ) {
188: return false ; }
189: if (@expr1073746756 !@expr4933 addressOf@var2460 ) {
190: return true ; }
191: }
192:
193:
194: if (@expr1073746758 firstOperand@var2461 &&@expr1073746759 parent@var2459 .@expr4906 str (@expr4907 ) ==@expr1073746762 "[" &&@expr1073746763 !@expr4933 addressOf@var2460 ) {
195: return true ; }
196:
197:
198: const Token * parent2@var2462 ; parent2@var2462 =@expr1073746765 parent@var2459 ;
199: while (@expr1073746766 Token ::@expr4836 Match (@expr1073746768 parent2@var2462 , "[|." ) ) {
200: parent2@var2462 =@expr1073746769 parent2@var2462 .@expr1073746770 astParent (@expr1073746771 ) ; }
201: if (@expr1073746772 parent2@var2462 !=@expr1073746773 parent@var2459 &&@expr1073746774 parent2@var2462 &&@expr1073746775 parent2@var2462 .@expr1073746776 isUnaryOp (@expr1073746777 "&" ) ) {
202: return false ; }
203:
204:
205: if (@expr1073746778 firstOperand@var2461 &&@expr1073746779 parent@var2459 .@expr1073746780 originalName (@expr1073746781 ) ==@expr1073746782 "->" &&@expr1073746783 !@expr4933 addressOf@var2460 ) {
206: return true ; }
207:
208:
209: if (@expr1073746785 tok@var2453 .@expr4924 variable (@expr4925 ) &&@expr1073746788 tok@var2453 .@expr4924 variable (@expr4925 ) .@expr1073746791 isPointer (@expr1073746792 ) &&@expr1073746793 Token ::@expr4836 Match (@expr1073746795 tok@var2453 .@expr4924 variable (@expr4925 ) .@expr4929 nameToken (@expr4930 ) , "%name% ) (" ) &&@expr1073746800
210: Token ::@expr4836 Match (@expr1073746802 tok@var2453 , "%name% (" ) ) {
211: return true ; }
212:
213: if (@expr1073746803 Token ::@expr4836 Match (@expr1073746805 tok@var2453 , "%var% = %var% ." ) &&@expr1073746806
214: tok@var2453 .@expr1073746807 varId (@expr1073746808 ) ==@expr1073746809 tok@var2453 .@expr4986 tokAt (@expr1073746811 2 ) .@expr1073746812 varId (@expr1073746813 ) ) {
215: return true ; }
216:
217:
218: if (@expr1073746814 Token ::@expr4836 Match (@expr1073746816 parent@var2459 .@expr1073746817 tokAt (@expr1073746818 -3 ) , "std :: string|wstring (|{ %name% )|}" ) ) {
219: return true ; }
220: if (@expr1073746819 Token ::@expr4836 Match (@expr1073746821 parent@var2459 .@expr1073746822 previous (@expr1073746823 ) , "%name% (|{ %name% )|}" ) ) {
221: const Variable * var@var2463 ; var@var2463 =@expr1073746824 tok@var2453 .@expr4986 tokAt (@expr1073746826 -2 ) .@expr1073746827 variable (@expr1073746828 ) ;
222: if (@expr1073746829 var@var2463 &&@expr1073746830 !@expr1073746831 var@var2463 .@expr1073746832 isPointer (@expr1073746833 ) &&@expr1073746834 !@expr1073746835 var@var2463 .@expr1073746836 isArray (@expr1073746837 ) &&@expr1073746838 var@var2463 .@expr1073746839 isStlStringType (@expr1073746840 ) ) {
223: return true ; }
224: }
225:
226:
227: if (@expr1073746841 Token ::@expr4836 Match (@expr1073746843 parent@var2459 , "<<|>>" ) &&@expr1073746844 !@expr5021 firstOperand@var2461 ) {
228: const Variable * var@var2464 ; var@var2464 =@expr1073746846 tok@var2453 .@expr4924 variable (@expr4925 ) ;
229: if (@expr1073746849 var@var2464 &&@expr1073746850 var@var2464 .@expr1073746851 isPointer (@expr1073746852 ) &&@expr1073746853 Token ::@expr4836 Match (@expr1073746855 var@var2464 .@expr1073746856 typeStartToken (@expr1073746857 ) , "char|wchar_t" ) ) {
230: const Token * tok2@var2465 ; tok2@var2465 =@expr1073746858 parent@var2459 ;
231: for (@expr1073746859 ; tok2@var2465 ; tok2@var2465 =@expr1073746860 tok2@var2465 .@expr5037 previous (@expr5038 ) ) {
232: if (@expr1073746863 Token ::@expr4836 Match (@expr1073746865 tok2@var2465 .@expr5037 previous (@expr5038 ) , ";|{|}|:" ) ) {
233: break ; }
234: }
235: if (@expr1073746868 Token ::@expr4836 Match (@expr1073746870 tok2@var2465 , "std :: cout|cin|cerr" ) ) {
236: return true ; }
237: if (@expr1073746871 tok2@var2465 &&@expr1073746872 tok2@var2465 .@expr1073746873 varId (@expr1073746874 ) !=@expr1073746875 0 ) {
238: const Variable * var2@var2466 ; var2@var2466 =@expr1073746876 tok2@var2465 .@expr1073746877 variable (@expr1073746878 ) ;
239: if (@expr1073746879 var2@var2466 &&@expr1073746880 var2@var2466 .@expr1073746881 isStlType (@expr1073746882 stl_stream@var2450 ) ) {
240: return true ; }
241: }
242: }
243: }
244:
245: const Variable * ovar@var2467 ; ovar@var2467 =@expr1073746883 nullptr ;
246: if (@expr1073746884 Token ::@expr4836 Match (@expr1073746886 parent@var2459 , "+|==|!=" ) ||@expr1073746887 (@expr1073746888 parent@var2459 .@expr4906 str (@expr4907 ) ==@expr1073746891 "=" &&@expr1073746892 !@expr5021 firstOperand@var2461 ) ) {
247: if (@expr1073746894 parent@var2459 .@expr4913 astOperand1 (@expr4914 ) ==@expr4915 tok@var2453 &&@expr1073746898 parent@var2459 .@expr5075 astOperand2 (@expr5076 ) ) {
248: ovar@var2467 =@expr1073746901 parent@var2459 .@expr5075 astOperand2 (@expr5076 ) .@expr1073746904 variable (@expr1073746905 ) ; }
249: else { if (@expr1073746906 parent@var2459 .@expr4913 astOperand1 (@expr4914 ) &&@expr1073746909 parent@var2459 .@expr5075 astOperand2 (@expr5076 ) ==@expr1073746912 tok@var2453 ) {
250: ovar@var2467 =@expr1073746913 parent@var2459 .@expr4913 astOperand1 (@expr4914 ) .@expr1073746916 variable (@expr1073746917 ) ; } }
251: }
252: if (@expr1073746918 ovar@var2467 &&@expr1073746919 !@expr1073746920 ovar@var2467 .@expr1073746921 isPointer (@expr1073746922 ) &&@expr1073746923 !@expr1073746924 ovar@var2467 .@expr1073746925 isArray (@expr1073746926 ) &&@expr1073746927 ovar@var2467 .@expr1073746928 isStlStringType (@expr1073746929 ) ) {
253: return true ; }
254:
255:
256: return false ;
257: }
258:
259:
260: static bool isNullablePointer ( const Token * tok@var2468 , const Settings * settings@var2469 )
261: {
262: if (@expr1073746930 !@expr1073746931 tok@var2468 ) {
263: return false ; }
264: if (@expr1073746932 Token ::@expr5109 simpleMatch (@expr1073746934 tok@var2468 , "new" ) &&@expr1073746935 tok@var2468 .@expr1073746936 varId (@expr1073746937 ) ==@expr1073746938 0 ) {
265: return false ; }
266: if (@expr1073746939 astIsPointer (@expr1073746940 tok@var2468 ) ) {
267: return true ; }
268: if (@expr1073746941 astIsSmartPointer (@expr1073746942 tok@var2468 ) ) {
269: return true ; }
270: if (@expr1073746943 Token ::@expr5109 simpleMatch (@expr1073746945 tok@var2468 , "." ) ) {
271: return isNullablePointer (@expr1073746946 tok@var2468 .@expr1073746947 astOperand2 (@expr1073746948 ) , settings@var2469 ) ; }
272: if (@expr1073746949 const Variable *@expr1073746950 var@var2470 =@expr1073746951 tok@var2468 .@expr1073746952 variable (@expr1073746953 ) ) {
273: return (@expr1073746954 var@var2470 .@expr1073746955 isPointer (@expr1073746956 ) ||@expr1073746957 var@var2470 .@expr1073746958 isSmartPointer (@expr1073746959 ) ) ;
274: }
275: return false ;
276: }
277:
278: void CheckNullPointer :: nullPointerByDeRefAndChec ( )
279: {
280: const bool printInconclusive@var2471 =@expr1073746961 mSettings@var29 .@expr1073746962 certainty@var2579 .@expr1073746963 isEnabled (@expr1073746964 Certainty ::@expr1073746965 inconclusive@expr1073746960 ) ;
281:
282: for (@expr1073746966 const Token *@expr1073746967 tok@var2472 =@expr1073746968 mTokenizer@var28 .@expr1073746969 tokens (@expr1073746970 ) ; tok@var2472 ; tok@var2472 =@expr1073746971 tok@var2472 .@expr5148 next (@expr5149 ) ) {
283: if (@expr1073746974 Token ::@expr5151 Match (@expr1073746976 tok@var2472 , "sizeof|decltype|typeid|typeof (" ) ) {
284: tok@var2472 =@expr1073746977 tok@var2472 .@expr5148 next (@expr5149 ) .@expr1073746980 link (@expr1073746981 ) ;
285: continue ;
286: }
287:
288: if (@expr1073746982 Token ::@expr5151 Match (@expr1073746984 tok@var2472 , "%num%|%char%|%str%" ) ) {
289: continue ; }
290:
291: if (@expr1073746985 !@expr1073746986 isNullablePointer (@expr1073746987 tok@var2472 , mSettings@var29 ) ) {
292: continue ; }
293:
294:
295: const ValueFlow ::@expr1073746988 Value * value@var2473 ; value@var2473 =@expr1073746989 tok@var2472 .@expr1073746990 getValue (@expr1073746991 0 ) ;
296: if (@expr1073746992 !@expr1073746993 value@var2473 ) {
297: continue ; }
298:
299: if (@expr1073746994 !@expr1073746995 printInconclusive@var2471 &&@expr1073746996 value@var2473 .@expr5173 isInconclusive (@expr5174 ) ) {
300: continue ; }
301:
302:
303: bool unknown@var2474 ; unknown@var2474 =@expr1073746999 false ;
304: if (@expr1073747000 !@expr1073747001 isPointerDeRef (@expr1073747002 tok@var2472 , unknown@var2474 ) ) {
305: if (@expr1073747003 unknown@var2474 ) {
306: nullPointerError (@expr1073747004 tok@var2472 , tok@var2472 .@expr5181 expressionString (@expr5182 ) , value@var2473 , true ) ; }
307: continue ;
308: }
309:
310: nullPointerError (@expr1073747007 tok@var2472 , tok@var2472 .@expr5181 expressionString (@expr5182 ) , value@var2473 , value@var2473 .@expr5173 isInconclusive (@expr5174 ) ) ;
311: }
312: }
313:
314: void CheckNullPointer :: nullPointer ( )
315: {
316: nullPointerByDeRefAndChec (@expr1073747012 ) ;
317: }
318:
319: namespace {
320: const std :: set < std :: string > stl_istream@var2475 = {
321: "fstream" , "ifstream" , "iostream" , "istream" ,
322: "istringstream" , "stringstream" , "wistringstream" , "wstringstream"
323: } ;
324: }
325:
326:
327: void CheckNullPointer :: nullConstantDereference ( )
328: {
329: const SymbolDatabase * symbolDatabase@var2476 ; symbolDatabase@var2476 =@expr1073747014 mTokenizer@var28 .@expr1073747015 getSymbolDatabase (@expr1073747016 ) ;
330:
331: for (@expr1073747017 const Scope *@expr5194 scope@var2477 :@expr1073747019 symbolDatabase@var2476 .@expr1073747020 functionScopes@var2478 ) {
332: if (@expr1073747021 scope@var2477 .@expr5198 function@var2479 ==@expr1073747023 nullptr ||@expr1073747024 !@expr1073747025 scope@var2477 .@expr5198 function@var2479 .@expr1073747027 hasBody (@expr1073747028 ) ) {
333: continue ; }
334:
335: const Token * tok@var2480 ; tok@var2480 =@expr1073747029 scope@var2477 .@expr1073747030 bodyStart@var2481 ;
336:
337: if (@expr1073747031 scope@var2477 .@expr5198 function@var2479 .@expr1073747033 isConstructor (@expr1073747034 ) ) {
338: tok@var2480 =@expr1073747035 scope@var2477 .@expr5198 function@var2479 .@expr1073747037 token@var2482 ; }
339:
340: for (@expr1073747038 ; tok@var2480 !=@expr1073747039 scope@var2477 .@expr1073747040 bodyEnd@var2483 ; tok@var2480 =@expr1073747041 tok@var2480 .@expr5218 next (@expr5219 ) ) {
341: if (@expr1073747044 Token ::@expr5221 Match (@expr1073747046 tok@var2480 , "sizeof|decltype|typeid|typeof (" ) ) {
342: tok@var2480 =@expr1073747047 tok@var2480 .@expr5218 next (@expr5219 ) .@expr5226 link (@expr5227 ) ; }
343:
344: else { if (@expr1073747052 Token ::@expr5229 simpleMatch (@expr1073747054 tok@var2480 , "* 0" ) ) {
345: if (@expr1073747055 Token ::@expr5221 Match (@expr1073747057 tok@var2480 .@expr5234 previous (@expr5235 ) , "return|throw|;|{|}|:|[|(|," ) ||@expr1073747060 tok@var2480 .@expr5234 previous (@expr5235 ) .@expr1073747063 isOp (@expr1073747064 ) ) {
346: nullPointerError (@expr5241 tok@var2480 ) ;
347: }
348: }
349:
350: else { if (@expr1073747066 Token ::@expr5221 Match (@expr1073747068 tok@var2480 , "0 [" ) &&@expr1073747069 (@expr1073747070 tok@var2480 .@expr5234 previous (@expr5235 ) .@expr5249 str (@expr5250 ) !=@expr1073747075 "&" ||@expr1073747076 !@expr1073747077 Token ::@expr5221 Match (@expr1073747079 tok@var2480 .@expr5218 next (@expr5219 ) .@expr5226 link (@expr5227 ) .@expr1073747084 next (@expr1073747085 ) , "[.(]" ) ) ) {
351: nullPointerError (@expr5241 tok@var2480 ) ; }
352:
353: else { if (@expr1073747087 Token ::@expr5221 Match (@expr1073747089 tok@var2480 .@expr5234 previous (@expr5235 ) , "!!. %name% (|{" ) &&@expr1073747092 (@expr1073747093 tok@var2480 .@expr5234 previous (@expr5235 ) .@expr5249 str (@expr5250 ) !=@expr1073747098 "::" ||@expr1073747099 tok@var2480 .@expr1073747100 strAt (@expr1073747101 -2 ) ==@expr1073747102 "std" ) ) {
354: if (@expr1073747103 Token ::@expr5221 Match (@expr1073747105 tok@var2480 .@expr5282 tokAt (@expr5283 2 ) , "0|NULL|nullptr )|}" ) &&@expr1073747108 tok@var2480 .@expr1073747109 varId (@expr1073747110 ) ) {
355: const Variable * var@var2484 ; var@var2484 =@expr1073747111 tok@var2480 .@expr5288 variable (@expr5289 ) ;
356: if (@expr1073747114 var@var2484 &&@expr1073747115 !@expr1073747116 var@var2484 .@expr1073747117 isPointer (@expr1073747118 ) &&@expr1073747119 !@expr1073747120 var@var2484 .@expr1073747121 isArray (@expr1073747122 ) &&@expr1073747123 var@var2484 .@expr1073747124 isStlStringType (@expr1073747125 ) ) {
357: nullPointerError (@expr5241 tok@var2480 ) ; }
358: } else {
359: std ::@expr1073747127 list < const Token *@expr5194 > var@var2485 ;
360: parseFunctionCall (@expr1073747129 *@expr1073747130 tok@var2480 , var@var2485 , &@expr1073747131 mSettings@var29 .@expr5308 library@var2580 ) ;
361:
362:
363: for (@expr1073747133 const Token *@expr5194 vartok@var2486 :@expr1073747135 var@var2485 ) {
364: if (@expr1073747136 vartok@var2486 .@expr1073747137 hasKnownIntValue (@expr1073747138 ) &&@expr1073747139 vartok@var2486 .@expr1073747140 getKnownIntValue (@expr1073747141 ) ==@expr1073747142 0 ) {
365: nullPointerError (@expr1073747143 vartok@var2486 ) ; }
366: }
367: }
368: } else { if (@expr1073747144 Token ::@expr5221 Match (@expr1073747146 tok@var2480 , "std :: string|wstring ( 0|NULL|nullptr )" ) ) {
369: nullPointerError (@expr5241 tok@var2480 ) ; }
370:
371: else { if (@expr1073747148 Token ::@expr5221 Match (@expr1073747150 tok@var2480 .@expr5234 previous (@expr5235 ) , "::|. %name% (" ) ) {
372: const std ::@expr1073747153 vector < const Token *@expr5194 > & args@var2487 =@expr1073747155 getArguments (@expr1073747156 tok@var2480 ) ;
373: for (@expr1073747157 int argnr@var2488 =@expr1073747158 0 ; argnr@var2488 <@expr1073747159 args@var2487 .@expr1073747160 size (@expr1073747161 ) ; ++@expr1073747162 argnr@var2488 ) {
374: const Token * argtok@var2489 ; argtok@var2489 =@expr1073747163 args@var2487 [@expr1073747164 argnr@var2488 ] ;
375: if (@expr1073747165 !@expr1073747166 argtok@var2489 .@expr1073747167 hasKnownIntValue (@expr1073747168 ) ) {
376: continue ; }
377: if (@expr1073747169 argtok@var2489 .@expr1073747170 values (@expr1073747171 ) .@expr1073747172 front (@expr1073747173 ) .@expr1073747174 intvalue@expr1073747013 !=@expr1073747175 0 ) {
378: continue ; }
379: if (@expr1073747176 mSettings@var29 .@expr5308 library@var2580 .@expr1073747178 isnullargbad (@expr1073747179 tok@var2480 , argnr@var2488 +@expr1073747180 1 ) ) {
380: nullPointerError (@expr1073747181 argtok@var2489 ) ; }
381: }
382: }
383:
384: else { if (@expr1073747182 Token ::@expr5221 Match (@expr1073747184 tok@var2480 .@expr5234 previous (@expr5235 ) , ">> 0|NULL|nullptr" ) ) {
385: const Token * tok2@var2490 ; tok2@var2490 =@expr1073747187 tok@var2480 .@expr5234 previous (@expr5235 ) ;
386: for (@expr1073747190 ; tok2@var2490 ; tok2@var2490 =@expr1073747191 tok2@var2490 .@expr5368 previous (@expr5369 ) ) {
387: if (@expr1073747194 Token ::@expr5221 Match (@expr1073747196 tok2@var2490 .@expr5368 previous (@expr5369 ) , ";|{|}|:|(" ) ) {
388: break ; }
389: }
390: if (@expr1073747199 tok2@var2490 &&@expr1073747200 tok2@var2490 .@expr5368 previous (@expr5369 ) &&@expr1073747203 tok2@var2490 .@expr5368 previous (@expr5369 ) .@expr1073747206 str (@expr1073747207 ) ==@expr1073747208 "(" ) {
391: continue ; }
392: if (@expr1073747209 Token ::@expr5229 simpleMatch (@expr1073747211 tok2@var2490 , "std :: cin" ) ) {
393: nullPointerError (@expr5241 tok@var2480 ) ; }
394: if (@expr1073747213 tok2@var2490 &&@expr1073747214 tok2@var2490 .@expr1073747215 varId (@expr1073747216 ) !=@expr1073747217 0 ) {
395: const Variable * var@var2491 ; var@var2491 =@expr1073747218 tok2@var2490 .@expr1073747219 variable (@expr1073747220 ) ;
396: if (@expr1073747221 var@var2491 &&@expr1073747222 var@var2491 .@expr1073747223 isStlType (@expr1073747224 stl_istream@var2475 ) ) {
397: nullPointerError (@expr5241 tok@var2480 ) ; }
398: }
399: } } } } } } }
400:
401: const Variable * ovar@var2492 ; ovar@var2492 =@expr1073747226 nullptr ;
402: const Token * tokNull@var2493 ; tokNull@var2493 =@expr1073747227 nullptr ;
403: if (@expr1073747228 Token ::@expr5221 Match (@expr1073747230 tok@var2480 , "0|NULL|nullptr ==|!=|>|>=|<|<= %var%" ) ) {
404: if (@expr1073747231 !@expr1073747232 Token ::@expr5221 Match (@expr1073747234 tok@var2480 .@expr5282 tokAt (@expr1073747236 3 ) , ".|[" ) ) {
405: ovar@var2492 =@expr1073747237 tok@var2480 .@expr5282 tokAt (@expr5283 2 ) .@expr1073747240 variable (@expr1073747241 ) ;
406: tokNull@var2493 =@expr1073747242 tok@var2480 ;
407: }
408: } else { if (@expr1073747243 Token ::@expr5221 Match (@expr1073747245 tok@var2480 , "%var% ==|!=|>|>=|<|<= 0|NULL|nullptr" ) ||@expr1073747246
409: Token ::@expr5221 Match (@expr1073747248 tok@var2480 , "%var% =|+ 0|NULL|nullptr )|]|,|;|+" ) ) {
410: ovar@var2492 =@expr1073747249 tok@var2480 .@expr5288 variable (@expr5289 ) ;
411: tokNull@var2493 =@expr1073747252 tok@var2480 .@expr5282 tokAt (@expr5283 2 ) ;
412: } }
413: if (@expr1073747255 ovar@var2492 &&@expr1073747256 !@expr1073747257 ovar@var2492 .@expr1073747258 isPointer (@expr1073747259 ) &&@expr1073747260 !@expr1073747261 ovar@var2492 .@expr1073747262 isArray (@expr1073747263 ) &&@expr1073747264 ovar@var2492 .@expr1073747265 isStlStringType (@expr1073747266 ) &&@expr1073747267 tokNull@var2493 &&@expr1073747268 tokNull@var2493 .@expr1073747269 originalName (@expr1073747270 ) !=@expr1073747271 "'\\0'" ) {
414: nullPointerError (@expr1073747272 tokNull@var2493 ) ; }
415: }
416: }
417: }
418:
419: void CheckNullPointer :: nullPointerError ( const Token * tok@var2494 , const std :: string & varname@var2495 , const ValueFlow :: Value * value@var2496 , bool inconclusive@var2497 )
420: {
421: const std ::@expr1073747273 string errmsgcond@var2498 (@expr1073747274 "$symbol:" +@expr5451 varname@var2495 +@expr5452 '\n' +@expr1073747277 ValueFlow ::@expr1073747278 eitherTheConditionIsRedundant (@expr1073747279 value@var2496 ?@expr1073747280 value@var2496 .@expr5457 condition@var2499 :@expr1073747282 nullptr ) +@expr1073747283 " or there is possible null pointer dereference: $symbol." ) ;
422: const std ::@expr1073747284 string errmsgdefarg@var2500 (@expr1073747285 "$symbol:" +@expr5451 varname@var2495 +@expr1073747287 "\nPossible null pointer dereference if the default parameter value is used: $symbol" ) ;
423:
424: if (@expr1073747288 !@expr1073747289 tok@var2494 ) {
425: reportError (@expr1073747290 tok@var2494 , Severity ::@expr5467 error , "nullPointer" , "Null pointer dereference" , CWE_NULL_POINTER_DEREFERENCE@var129 , Certainty ::@expr5468 normal ) ;
426: reportError (@expr1073747293 tok@var2494 , Severity ::@expr5470 warning , "nullPointerDefaultArg" , errmsgdefarg@var2500 , CWE_NULL_POINTER_DEREFERENCE@var129 , Certainty ::@expr5468 normal ) ;
427: reportError (@expr1073747296 tok@var2494 , Severity ::@expr5470 warning , "nullPointerRedundantCheck" , errmsgcond@var2498 , CWE_NULL_POINTER_DEREFERENCE@var129 , Certainty ::@expr5468 normal ) ;
428: return ;
429: }
430:
431: if (@expr1073747299 !@expr1073747300 value@var2496 ) {
432: reportError (@expr1073747301 tok@var2494 , Severity ::@expr5467 error , "nullPointer" , "Null pointer dereference" , CWE_NULL_POINTER_DEREFERENCE@var129 , inconclusive@var2497 ?@expr1073747303 Certainty ::@expr5480 inconclusive :@expr5481 Certainty ::@expr5468 normal ) ;
433: return ;
434: }
435:
436: if (@expr1073747307 !@expr1073747308 mSettings@var29 .@expr1073747309 isEnabled (@expr1073747310 value@var2496 , inconclusive@var2497 ) ) {
437: return ; }
438:
439: const std ::@expr1073747311 list < std ::@expr5488 pair < const Token *@expr1073747313 , std ::@expr5488 string > > errorPath@var2501 =@expr1073747315 getErrorPath (@expr1073747316 tok@var2494 , value@var2496 , "Null pointer dereference" ) ;
440:
441: if (@expr1073747317 value@var2496 .@expr5457 condition@var2499 ) {
442: reportError (@expr1073747319 errorPath@var2501 , Severity ::@expr5470 warning , "nullPointerRedundantCheck" , errmsgcond@var2498 , CWE_NULL_POINTER_DEREFERENCE@var129 , inconclusive@var2497 ||@expr5497 value@var2496 .@expr5498 isInconclusive (@expr5499 ) ?@expr5500 Certainty ::@expr5480 inconclusive :@expr5481 Certainty ::@expr5468 normal ) ;
443: } else { if (@expr1073747328 value@var2496 .@expr1073747329 defaultArg@var2502 ) {
444: reportError (@expr1073747330 errorPath@var2501 , Severity ::@expr5470 warning , "nullPointerDefaultArg" , errmsgdefarg@var2500 , CWE_NULL_POINTER_DEREFERENCE@var129 , inconclusive@var2497 ||@expr5497 value@var2496 .@expr5498 isInconclusive (@expr5499 ) ?@expr5500 Certainty ::@expr5480 inconclusive :@expr5481 Certainty ::@expr5468 normal ) ;
445: } else {
446: std ::@expr1073747339 string errmsg@var2503 ;
447: errmsg@var2503 =@expr1073747340 std ::@expr1073747341 string (@expr1073747342 value@var2496 .@expr5519 isKnown (@expr5520 ) ?@expr1073747345 "Null" :@expr1073747346 "Possible null" ) +@expr1073747347 " pointer dereference" ;
448: if (@expr1073747348 !@expr1073747349 varname@var2495 .@expr1073747350 empty (@expr1073747351 ) ) {
449: errmsg@var2503 =@expr1073747352 "$symbol:" +@expr5451 varname@var2495 +@expr5452 '\n' +@expr1073747355 errmsg@var2503 +@expr1073747356 ": $symbol" ; }
450:
451: reportError (@expr1073747357 errorPath@var2501 ,
452: value@var2496 .@expr5519 isKnown (@expr5520 ) ?@expr1073747360 Severity ::@expr5467 error :@expr1073747362 Severity ::@expr5470 warning ,
453: "nullPointer" ,
454: errmsg@var2503 ,
455: CWE_NULL_POINTER_DEREFERENCE@var129 , inconclusive@var2497 ||@expr5497 value@var2496 .@expr5498 isInconclusive (@expr5499 ) ?@expr5500 Certainty ::@expr5480 inconclusive :@expr5481 Certainty ::@expr5468 normal ) ;
456: } }
457: }
458:
459: void CheckNullPointer :: arithmetic ( )
460: {
461: const SymbolDatabase * symbolDatabase@var2504 ; symbolDatabase@var2504 =@expr1073747372 mTokenizer@var28 .@expr1073747373 getSymbolDatabase (@expr1073747374 ) ;
462: for (@expr1073747375 const Scope *@expr5552 scope@var2505 :@expr1073747377 symbolDatabase@var2504 .@expr1073747378 functionScopes@var2506 ) {
463: for (@expr1073747379 const Token *@expr5552 tok@var2507 =@expr1073747381 scope@var2505 .@expr1073747382 bodyStart@var2508 .@expr1073747383 next (@expr1073747384 ) ; tok@var2507 !=@expr1073747385 scope@var2505 .@expr1073747386 bodyEnd@var2509 ; tok@var2507 =@expr1073747387 tok@var2507 .@expr1073747388 next (@expr1073747389 ) ) {
464: if (@expr1073747390 !@expr1073747391 Token ::@expr1073747392 Match (@expr1073747393 tok@var2507 , "-|+|+=|-=|++|--" ) ) {
465: continue ; }
466: const Token * pointerOperand@var2510 ;
467: const Token * numericOperand@var2511 ;
468: if (@expr1073747394 tok@var2507 .@expr5571 astOperand1 (@expr5572 ) &&@expr1073747397 tok@var2507 .@expr5571 astOperand1 (@expr5572 ) .@expr5576 valueType (@expr5577 ) &&@expr1073747402 tok@var2507 .@expr5571 astOperand1 (@expr5572 ) .@expr5576 valueType (@expr5577 ) .@expr1073747407 pointer@var2591 !=@expr1073747408 0 ) {
469: pointerOperand@var2510 =@expr1073747409 tok@var2507 .@expr5571 astOperand1 (@expr5572 ) ;
470: numericOperand@var2511 =@expr1073747412 tok@var2507 .@expr5589 astOperand2 (@expr5590 ) ;
471: } else { if (@expr1073747415 tok@var2507 .@expr5589 astOperand2 (@expr5590 ) &&@expr1073747418 tok@var2507 .@expr5589 astOperand2 (@expr5590 ) .@expr5597 valueType (@expr5598 ) &&@expr1073747423 tok@var2507 .@expr5589 astOperand2 (@expr5590 ) .@expr5597 valueType (@expr5598 ) .@expr1073747428 pointer@var2591 !=@expr1073747429 0 ) {
472: pointerOperand@var2510 =@expr1073747430 tok@var2507 .@expr5589 astOperand2 (@expr5590 ) ;
473: numericOperand@var2511 =@expr1073747433 tok@var2507 .@expr5571 astOperand1 (@expr5572 ) ;
474: } else {
475: continue ; } }
476: if (@expr1073747436 numericOperand@var2511 &&@expr1073747437 numericOperand@var2511 .@expr5614 valueType (@expr5615 ) &&@expr1073747440 !@expr1073747441 numericOperand@var2511 .@expr5614 valueType (@expr5615 ) .@expr1073747444 isIntegral (@expr1073747445 ) ) {
477: continue ; }
478: const ValueFlow ::@expr1073747446 Value * value@var2512 ; value@var2512 =@expr1073747447 pointerOperand@var2510 .@expr1073747448 getValue (@expr1073747449 0 ) ;
479: if (@expr1073747450 !@expr1073747451 value@var2512 ) {
480: continue ; }
481: if (@expr1073747452 !@expr1073747453 mSettings@var29 .@expr1073747454 certainty@var2579 .@expr1073747455 isEnabled (@expr1073747456 Certainty ::@expr1073747457 inconclusive@expr1073747371 ) &&@expr1073747458 value@var2512 .@expr5635 isInconclusive (@expr5636 ) ) {
482: continue ; }
483: if (@expr1073747461 value@var2512 .@expr5638 condition@var2513 &&@expr1073747463 !@expr1073747464 mSettings@var29 .@expr1073747465 severity@var2581 .@expr1073747466 isEnabled (@expr1073747467 Severity ::@expr1073747468 warning ) ) {
484: continue ; }
485: if (@expr1073747469 value@var2512 .@expr5638 condition@var2513 ) {
486: redundantConditionWarning (@expr1073747471 tok@var2507 , value@var2512 , value@var2512 .@expr5638 condition@var2513 , value@var2512 .@expr5635 isInconclusive (@expr5636 ) ) ; }
487: else {
488: pointerArithmeticError (@expr1073747475 tok@var2507 , value@var2512 , value@var2512 .@expr5635 isInconclusive (@expr5636 ) ) ; }
489: }
490: }
491: }
492:
493: static std :: string arithmeticTypeString ( const Token * tok@var2514 )
494: {
495: if (@expr1073747478 tok@var2514 &&@expr1073747479 tok@var2514 .@expr5656 str (@expr5657 ) [@expr5658 0 ] ==@expr1073747483 '-' ) {
496: return "subtraction" ; }
497: else { if (@expr1073747484 tok@var2514 &&@expr1073747485 tok@var2514 .@expr5656 str (@expr5657 ) [@expr5658 0 ] ==@expr1073747489 '+' ) {
498: return "addition" ; }
499: else {
500: return "arithmetic" ; } }
501: }
502:
503: void CheckNullPointer :: pointerArithmeticError ( const Token * tok@var2515 , const ValueFlow :: Value * value@var2516 , bool inconclusive@var2517 )
504: {
505: std ::@expr1073747490 string arithmetic@var2518 ; arithmetic@var2518 =@expr1073747491 arithmeticTypeString (@expr1073747492 tok@var2515 ) ;
506: std ::@expr1073747493 string errmsg@var2519 ;
507: if (@expr1073747494 tok@var2515 &&@expr1073747495 tok@var2515 .@expr1073747496 str (@expr1073747497 ) [@expr1073747498 0 ] ==@expr1073747499 '-' ) {
508: errmsg@var2519 =@expr1073747500 "Overflow in pointer arithmetic, NULL pointer is subtracted." ;
509: } else {
510: errmsg@var2519 =@expr1073747501 "Pointer " +@expr1073747502 arithmetic@var2518 +@expr1073747503 " with NULL pointer." ;
511: }
512: const std ::@expr1073747504 list < std ::@expr5681 pair < const Token *@expr1073747506 , std ::@expr5681 string > > errorPath@var2520 =@expr1073747508 getErrorPath (@expr1073747509 tok@var2515 , value@var2516 , "Null pointer " +@expr1073747510 arithmetic@var2518 ) ;
513: reportError (@expr1073747511 errorPath@var2520 ,
514: Severity ::@expr1073747512 error ,
515: "nullPointerArithmetic" ,
516: errmsg@var2519 ,
517: CWE_INCORRECT_CALCULATION@var131 ,
518: inconclusive@var2517 ?@expr1073747513 Certainty ::@expr1073747514 inconclusive :@expr1073747515 Certainty ::@expr1073747516 normal ) ;
519: }
520:
521: void CheckNullPointer :: redundantConditionWarning ( const Token * tok@var2521 , const ValueFlow :: Value * value@var2522 , const Token * condition@var2523 , bool inconclusive@var2524 )
522: {
523: std ::@expr1073747517 string arithmetic@var2525 ; arithmetic@var2525 =@expr1073747518 arithmeticTypeString (@expr1073747519 tok@var2521 ) ;
524: std ::@expr1073747520 string errmsg@var2526 ;
525: if (@expr1073747521 tok@var2521 &&@expr1073747522 tok@var2521 .@expr1073747523 str (@expr1073747524 ) [@expr1073747525 0 ] ==@expr1073747526 '-' ) {
526: errmsg@var2526 =@expr1073747527 ValueFlow ::@expr5704 eitherTheConditionIsRedundant (@expr5705 condition@var2523 ) +@expr1073747530 " or there is overflow in pointer " +@expr1073747531 arithmetic@var2525 +@expr1073747532 "." ;
527: } else {
528: errmsg@var2526 =@expr1073747533 ValueFlow ::@expr5704 eitherTheConditionIsRedundant (@expr5705 condition@var2523 ) +@expr1073747536 " or there is pointer arithmetic with NULL pointer." ;
529: }
530: const std ::@expr1073747537 list < std ::@expr5714 pair < const Token *@expr1073747539 , std ::@expr5714 string > > errorPath@var2527 =@expr1073747541 getErrorPath (@expr1073747542 tok@var2521 , value@var2522 , "Null pointer " +@expr1073747543 arithmetic@var2525 ) ;
531: reportError (@expr1073747544 errorPath@var2527 ,
532: Severity ::@expr1073747545 warning ,
533: "nullPointerArithmeticRedundantCheck" ,
534: errmsg@var2526 ,
535: CWE_INCORRECT_CALCULATION@var131 ,
536: inconclusive@var2524 ?@expr1073747546 Certainty ::@expr1073747547 inconclusive :@expr1073747548 Certainty ::@expr1073747549 normal ) ;
537: }
538:
539: std :: string CheckNullPointer :: MyFileInfo :: toString ( ) const
540: {
541: return CTU ::@expr1073747550 toString (@expr1073747551 unsafeUsage@var555 ) ;
542: }
543:
544: static bool isUnsafeUsage ( const Check * check@var2528 , const Token * vartok@var2529 , long long * value@var2530 )
545: {
546: (@expr1073747552 void ) value@var2530 ;
547: const CheckNullPointer * checkNullPointer@var2531 ; checkNullPointer@var2531 =@expr1073747553 dynamic_cast < const CheckNullPointer *@expr1073747554 > (@expr1073747555 check@var2528 ) ;
548: bool unknown@var2532 ; unknown@var2532 =@expr1073747556 false ;
549: return checkNullPointer@var2531 &&@expr1073747557 checkNullPointer@var2531 .@expr1073747558 isPointerDeRef (@expr1073747559 vartok@var2529 , unknown@var2532 ) ;
550: }
551:
552: Check :: FileInfo * CheckNullPointer :: getFileInfo ( const Tokenizer * tokenizer@var2533 , const Settings * settings@var2534 ) const
553: {
554: CheckNullPointer check@var2535 (@expr1073747560 tokenizer@var2533 , settings@var2534 , nullptr ) ;
555: const std ::@expr1073747561 list < CTU ::@expr5738 FileInfo ::@expr5738 UnsafeUsage > & unsafeUsage@var2536 =@expr1073747564 CTU ::@expr1073747565 getUnsafeUsage (@expr1073747566 tokenizer@var2533 , settings@var2534 , &@expr1073747567 check@var2535 , ::@expr1073747568 isUnsafeUsage ) ;
556: if (@expr1073747569 unsafeUsage@var2536 .@expr1073747570 empty (@expr1073747571 ) ) {
557: return nullptr ; }
558:
559: MyFileInfo * fileInfo@var2537 ; fileInfo@var2537 =@expr1073747572 new MyFileInfo ;
560: fileInfo@var2537 .@expr1073747573 unsafeUsage@var2538 =@expr1073747574 unsafeUsage@var2536 ;
561: return fileInfo@var2537 ;
562: }
563:
564: Check :: FileInfo * CheckNullPointer :: loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2539 ) const
565: {
566: const std ::@expr1073747575 list < CTU ::@expr5752 FileInfo ::@expr5752 UnsafeUsage > & unsafeUsage@var2540 =@expr1073747578 CTU ::@expr1073747579 loadUnsafeUsageListFromXml (@expr1073747580 xmlElement@var2539 ) ;
567: if (@expr1073747581 unsafeUsage@var2540 .@expr1073747582 empty (@expr1073747583 ) ) {
568: return nullptr ; }
569:
570: MyFileInfo * fileInfo@var2541 ; fileInfo@var2541 =@expr1073747584 new MyFileInfo ;
571: fileInfo@var2541 .@expr1073747585 unsafeUsage@var2542 =@expr1073747586 unsafeUsage@var2540 ;
572: return fileInfo@var2541 ;
573: }
574:
575: bool CheckNullPointer :: analyseWholeProgram ( const CTU :: FileInfo * ctu@var2543 , const std :: list < Check :: FileInfo * > & fileInfo@var2544 , const Settings & settings@var2545 , ErrorLogger & errorLogger@var2546 )
576: {
577: if (@expr1073747587 !@expr1073747588 ctu@var2543 ) {
578: return false ; }
579: bool foundErrors@var2547 ; foundErrors@var2547 =@expr1073747589 false ;
580: (@expr1073747590 void ) settings@var2545 ;
581:
582: const std ::@expr1073747591 map < std ::@expr5768 string , std ::@expr5768 list < const CTU ::@expr5768 FileInfo ::@expr5768 CallBase *@expr5772 > > callsMap@var2548 =@expr1073747597 ctu@var2543 .@expr1073747598 getCallsMap (@expr1073747599 ) ;
583:
584: for (@expr1073747600 Check ::@expr5768 FileInfo *@expr5772 fi1@var2549 :@expr1073747603 fileInfo@var2544 ) {
585: const MyFileInfo * fi@var2550 ; fi@var2550 =@expr1073747604 dynamic_cast < MyFileInfo *@expr5772 > (@expr1073747606 fi1@var2549 ) ;
586: if (@expr1073747607 !@expr1073747608 fi@var2550 ) {
587: continue ; }
588: for (@expr1073747609 const CTU ::@expr5768 FileInfo ::@expr5768 UnsafeUsage &@expr1073747612 unsafeUsage@var2551 :@expr1073747613 fi@var2550 .@expr1073747614 unsafeUsage@var2552 ) {
589: for (@expr1073747615 int warning@var2553 =@expr1073747616 0 ; warning@var2553 <=@expr1073747617 1 ; warning@var2553 ++@expr1073747618 ) {
590: if (@expr1073747619 warning@var2553 ==@expr1073747620 1 &&@expr1073747621 !@expr1073747622 settings@var2545 .@expr1073747623 severity@var2554 .@expr1073747624 isEnabled (@expr1073747625 Severity ::@expr5802 warning ) ) {
591: break ; }
592:
593: const std ::@expr1073747627 list < ErrorMessage ::@expr5768 FileLocation > & locationList@var2555 =@expr1073747629
594: CTU ::@expr5806 FileInfo ::@expr1073747631 getErrorPath (@expr1073747632 CTU ::@expr5806 FileInfo ::@expr1073747634 InvalidValueType ::@expr1073747635 null ,
595: unsafeUsage@var2551 ,
596: callsMap@var2548 ,
597: "Dereferencing argument ARG that is null" ,
598: nullptr ,
599: warning@var2553 ) ;
600: if (@expr1073747636 locationList@var2555 .@expr1073747637 empty (@expr1073747638 ) ) {
601: continue ; }
602:
603: const ErrorMessage errmsg@var2556 (@expr1073747639 locationList@var2555 ,
604: emptyString@var1 ,
605: warning@var2553 ?@expr1073747640 Severity ::@expr5802 warning :@expr1073747642 Severity ::@expr1073747643 error ,
606: "Null pointer dereference: " +@expr1073747644 unsafeUsage@var2551 .@expr1073747645 myArgumentName@var2557 ,
607: "ctunullpointer" ,
608: CWE_NULL_POINTER_DEREFERENCE@var129 , Certainty ::@expr1073747646 normal ) ;
609: errorLogger@var2546 .@expr1073747647 reportErr (@expr1073747648 errmsg@var2556 ) ;
610:
611: foundErrors@var2547 =@expr1073747649 true ;
612: break ;
613: }
614: }
615: }
616:
617: return foundErrors@var2547 ;
618: }

##file cppcheck-2.8/lib/settings.h

13:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2558 ; mFlags@var2558 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2558 ;
54: }
55: void clear ( ) {
56: mFlags@var2558 =@expr1073747650 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2558 =@expr1073747651 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2559 ) {
62: if (@expr1073747652 enabled@var2559 ) {
63: fill (@expr1073747653 ) ; }
64: else {
65: clear (@expr1073747654 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2560 ) const {
68: return (@expr5831 mFlags@var2558 &@expr1073747656 (@expr5831 1U <<@expr1073747658 (@expr1073747659 uint32_t ) flag@var2560 ) ) !=@expr1073747660 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2561 ) {
71: mFlags@var2558 |=@expr1073747661 (@expr1073747662 1U <<@expr1073747663 (@expr1073747664 uint32_t ) flag@var2561 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2562 ) {
74: mFlags@var2558 &=@expr1073747665 ~@expr1073747666 (@expr1073747667 1U <<@expr1073747668 (@expr1073747669 uint32_t ) flag@var2562 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2563 , bool enabled@var2564 ) {
77: if (@expr1073747670 enabled@var2564 ) {
78: enable (@expr1073747671 flag@var2563 ) ; }
79: else {
80: disable (@expr1073747672 flag@var2563 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2565 ; mFlags@var2565 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2565 ;
54: }
55: void clear ( ) {
56: mFlags@var2565 =@expr1073747673 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2565 =@expr1073747674 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2566 ) {
62: if (@expr1073747675 enabled@var2566 ) {
63: fill (@expr1073747676 ) ; }
64: else {
65: clear (@expr1073747677 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2567 ) const {
68: return (@expr5854 mFlags@var2565 &@expr1073747679 (@expr5854 1U <<@expr1073747681 (@expr1073747682 uint32_t ) flag@var2567 ) ) !=@expr1073747683 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2568 ) {
71: mFlags@var2565 |=@expr1073747684 (@expr1073747685 1U <<@expr1073747686 (@expr1073747687 uint32_t ) flag@var2568 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2569 ) {
74: mFlags@var2565 &=@expr1073747688 ~@expr1073747689 (@expr1073747690 1U <<@expr1073747691 (@expr1073747692 uint32_t ) flag@var2569 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2570 , bool enabled@var2571 ) {
77: if (@expr1073747693 enabled@var2571 ) {
78: enable (@expr1073747694 flag@var2570 ) ; }
79: else {
80: disable (@expr1073747695 flag@var2570 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2572 ; mFlags@var2572 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2572 ;
54: }
55: void clear ( ) {
56: mFlags@var2572 =@expr1073747696 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2572 =@expr1073747697 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2573 ) {
62: if (@expr1073747698 enabled@var2573 ) {
63: fill (@expr1073747699 ) ; }
64: else {
65: clear (@expr1073747700 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2574 ) const {
68: return (@expr5877 mFlags@var2572 &@expr1073747702 (@expr5877 1U <<@expr1073747704 (@expr1073747705 uint32_t ) flag@var2574 ) ) !=@expr1073747706 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2575 ) {
71: mFlags@var2572 |=@expr1073747707 (@expr1073747708 1U <<@expr1073747709 (@expr1073747710 uint32_t ) flag@var2575 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2576 ) {
74: mFlags@var2572 &=@expr1073747711 ~@expr1073747712 (@expr1073747713 1U <<@expr1073747714 (@expr1073747715 uint32_t ) flag@var2576 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2577 , bool enabled@var2578 ) {
77: if (@expr1073747716 enabled@var2578 ) {
78: enable (@expr1073747717 flag@var2577 ) ; }
79: else {
80: disable (@expr1073747718 flag@var2577 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 65
  , inconclusive lifetime[SubObject]=(errorLogger)
  ( inconclusive lifetime[SubObject]=(errorLogger)
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
  tok possible 0@48
Line 141
  callstack always size=1
  severity inconclusive {1@48,2@49}
  id inconclusive {"nullPointer"@48,"nullPointerDefaultArg"@49,"nullPointerRedundantCheck"@50}
  msg inconclusive "Null pointer dereference"@48
  certainty possible 0@235
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 54
  null always 0
  uninit always 1
  bufferOverflow always 2
Line 63
  { always 0
Line 64
  { always 0
Line 71
  { always 0
Line 74
  { always 0
Line 87
  { always 0
Line 92
  ( always {!<=-1,!>=2}
Line 101
  warning always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 122
  { always 0
Line 136
  warning always {!<=-1,!>=2}
Line 148
  ( always {!<=-1,!>=2}
  * always {!<=-1,!>=2}
Line 52
  ( always "Null pointer"
Line 56
  ( always "Null pointer"
Line 85
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 96
  0 always 0
Line 98
  "" always ""
  & {lifetime[Address]=(v),!0}
  false always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  nullptr always 0
Line 124
  nullptr always 0
  "pointer" always "pointer"
  nullptr always 0
  false always 0
Line 125
  nullptr always 0
  nullptr always 0
  false always 0
Line 126
  nullptr always 0
  nullptr always 0
  nullptr always 0
  false always 0
Line 131
  "Null pointer" always "Null pointer"
Line 136
  "Null pointers\n- null pointer dereferencing\n- undefined null pointer arithmetic\n" always "Null pointers\n- null pointer dereferencing\n- undefined null pointer arithmetic\n"
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@22480,34@22736}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@87,34@88}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@87,""@88,""@89,"U"@90,"U"@91,"u"@92,"u"@93,"u8"@94,"u8"@95}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@205,34@206}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@202,34@204}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@177,128@178,64@179,32@180,16@181,8@182,4@183,2@184,1@185}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@186,128@187,64@188,32@189,16@190,8@191,4@192,2@193,1@194}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@186,4294967167@187,4294967231@188,4294967263@189,4294967279@190,4294967287@191,4294967291@192,4294967293@193,4294967294@194}
  flag {!<=-1,256@186,128@187,64@188,32@189,16@190,8@191,4@192,2@193,1@194}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok possible 0@96
  pattern possible {"* 0"@62,"std :: cin"@96,"new"@121,"."@123}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@76,4@77,0@78}
  t possible {10@76,4@77,0@78}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@76,4@77,0@78}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@76,0@78}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@76,0@78}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@76}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@76}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@76}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@76}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@76}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  s possible {"*"@148,"&"@154}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@84}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@86,17179869184@97,8589934592@99,34359738368@101,4294967296@103,2147483648@105,1073741824@107,536870912@109,268435456@111}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@173,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@174}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@85,17179869184@96,8589934592@98,34359738368@100,4294967296@102,2147483648@104,1073741824@106,536870912@108,268435456@110}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@85,17179869184@96,8589934592@98,34359738368@100,4294967296@102,2147483648@104,1073741824@106,536870912@108,268435456@110}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@19,4096@22,16384@25,2048@26,1024@27,65536@28,512@29,256@30,128@31}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@240,4194304@242,8388608@243,2097152@245,1048576@246,524288@247,262144@248,131072@249,65536@250}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@218,2097152@219,1048576@220,524288@221,262144@222,131072@223,65536@224,32768@225,16384@226}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@218,4292870143@219,4293918719@220,4294443007@221,4294705151@222,4294836223@223,4294901759@224,4294934527@225,4294950911@226}
  flag {!<=-1,8388608@218,2097152@219,1048576@220,524288@221,262144@222,131072@223,65536@224,32768@225,16384@226}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 49
  ( always {!<=-1,!>=2}
  , always !<=-1
  arg always !<=-1
Line 51
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  func always !0
  ( always !<=-1
  >= always {!<=-1,!>=2}
  arg always !<=-1
  && always {!<=-1,!>=2}
  func always !0
  arg {!<=-1,<=symbolic=(func->argCount()),!>=symbolic=(func->argCount()+1)}
  - always !<=-1
  1 always 1
  && always {!<=-1,!>=2}
  func always !0
  arg {!<=-1,<=symbolic=(func->argCount()),!>=symbolic=(func->argCount()+1)}
  - always !<=-1
  1 always 1
  ( always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
  "%name% ( )" always "%name% ( )"
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  2 always 2
Line 65
  & {lifetime[Address]=(tok),!0}
Line 67
  library possible {0,lifetime[Address]=(mSettings->library)@82,lifetime[Address]=(settings->library)@136}
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 68
  = always 1
  1 always 1
  argnr possible 1
  <= always {!<=-1,!>=2}
  ( always !<=-1
Line 69
  argnr {<=symbolic=(args.size()),!>=symbolic=(args.size()+1),1}
  - possible 0
  1 always 1
Line 70
  && always {!<=-1,!>=2}
  library always !0
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
  argnr always !>=symbolic=(args.size()+1)
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  argnr always !>=symbolic=(args.size()+1)
Line 71
  param always symbolic=(args[argnr-1])
Line 73
  ( always !0
  argnr always !>=symbolic=(args.size()+1)
  1 always 1
Line 74
  && always {!<=-1,!>=2}
  argVar always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  argVar always !0
  ( always {!<=-1,!>=2}
Line 75
  param always symbolic=(args[argnr-1])
Line 80
  library possible 0
  && always {!<=-1,!>=2}
  library always !0
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
Line 81
  library always !0
  & {lifetime[Address]=(tok),!0}
Line 82
  formatStringArgNr possible {>=symbolic=(args.size()),<=symbolic=(args.size()-1)}
  < always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  formatStringArgNr {!<=-1,>=0}
  >= always {!<=-1,!>=2}
  ( always !<=-1
Line 86
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
  "snprintf|vsnprintf|fnprintf|vfnprintf" always "snprintf|vsnprintf|fnprintf|vfnprintf"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!<=symbolic=(formatStringArgNr)}
  > always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  args {>=size=2,!<=size=1}
  1 always 1
  && always {!<=-1,!>=2}
  args always !<=size=1
  [ always !0
  1 always 1
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  args always !<=size=1
  [ always !0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 87
  args {>=size=2,!<=size=1}
  0 always 0
Line 89
  args possible {>=size=2,<=size=1}
  formatStringArgNr always {!>=symbolic=(args.size()),!<=-1}
  != always {!<=-1,!>=2}
  :: always 6
  eString always 6
Line 91
  formatStringArgNr always {!>=symbolic=(args.size()),!<=-1}
Line 92
  = always !<=0
  formatStringArgNr always {!>=symbolic=(args.size()),!<=-1}
  + always !<=0
  1 always 1
Line 93
  scan always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(tok),!0}
Line 95
  percent always {!<=-1,!>=2}
  percent always {!<=-1,!>=2}
  = always 0
  false always 0
Line 96
  = {lifetime[Iterator]=(formatString),start=0}
  ( {lifetime[Iterator]=(formatString),start=0}
  i possible {lifetime[Iterator]=(formatString),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(formatString),end=0}
  i possible lifetime[Iterator]=(formatString)
Line 97
  i possible lifetime[Iterator]=(formatString)
  == always {!<=-1,!>=2}
  '%' always 37
Line 98
  percent always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  percent always {!<=-1,!>=2}
Line 99
  percent always {!<=-1,!>=2}
Line 100
  percent always {!<=-1,!>=2}
  = always 0
  false always 0
Line 102
  _continue always {!<=-1,!>=2}
  _continue always {!<=-1,!>=2}
  = always 0
  false always 0
Line 103
  ! {!<=-1,!>=2,0}
  ( possible 1
  ( {!<=-1,110,115,109}
  * possible {110,115,109}
Line 104
  i possible symbolic=(formatString.end()-1)
  == always {!<=-1,!>=2}
  '*' always 42
Line 105
  scan always {!<=-1,!>=2}
Line 106
  _continue always {!<=-1,!>=2}
  = always 1
  true always 1
Line 110
  ++ possible symbolic=(formatString.end())
  i possible symbolic=(formatString.end()-1)
Line 111
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(formatString),end=0}
Line 114
  _continue always {!<=-1,!>=2}
Line 117
  < always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  'n' always 110
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  's' always 115
  || always {!<=-1,!>=2}
  scan always {!<=-1,!>=2}
Line 118
  argnr {<=symbolic=(args.size()-1),!>=symbolic=(args.size())}
Line 120
  != always {!<=-1,!>=2}
  'm' always 109
Line 129
  "fstream" always "fstream"
  "ifstream" always "ifstream"
  "iostream" always "iostream"
  "istream" always "istream"
Line 130
  "istringstream" always "istringstream"
  "ofstream" always "ofstream"
  "ostream" always "ostream"
  "ostringstream" always "ostringstream"
Line 131
  "stringstream" always "stringstream"
  "wistringstream" always "wistringstream"
  "wostringstream" always "wostringstream"
  "wstringstream" always "wstringstream"
Line 144
  ( always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  unknown {!<=-1,!>=2,0@14}
Line 149
  ( always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 151
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  tok possible symbolic=(tok->astParent())@146
  "[(,] %name% [,)]" always "[(,] %name% [,)]"
  && always {!<=-1,!>=2}
Line 156
  ftok possible {symbolic=(tok->previous()),0}
  && always {!<=-1,!>=2}
  ftok {symbolic=(tok->previous()),!0}
  != always {!<=-1,!>=2}
  "(" always "("
Line 157
  ftok always !0
  == always {!<=-1,!>=2}
  ")" always ")"
Line 158
  ftok always !0
Line 161
  ftok possible symbolic=(tok->previous())
  && always {!<=-1,!>=2}
  ftok always !0
Line 163
  ftok always !0
  ( always !0
  varlist always size=0
  & {lifetime[Address]=(settings->library),!0}
  settings always !0
Line 164
  ( possible lifetime[Iterator]=(varlist)
  ( {lifetime[Iterator]=(varlist),start=0}
  ( {lifetime[Iterator]=(varlist),end=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(varlist),end=0}
Line 165
  return always {!<=-1,!>=2}
  true always 1
Line 170
  tok possible symbolic=(tok->variable()->nameToken())
  == always {!<=-1,!>=2}
  "(" always "("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 171
  return always {!<=-1,!>=2}
  false always 0
Line 173
  tok possible symbolic=(tok->variable()->nameToken())
Line 174
  ! always {!<=-1,!>=2}
  parent always symbolic=(tok->astParent())
Line 175
  return always {!<=-1,!>=2}
  false always 0
Line 176
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  parent {symbolic=(tok->astParent()),!0}
  && always {!<=-1,!>=2}
  parent {symbolic=(tok->astParent()),!0}
  ( always !0
  == always {!<=-1,!>=2}
  "&" always "&"
Line 177
  parent {symbolic=(tok->astParent()),!0}
  == always {!<=-1,!>=2}
  "." always "."
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 178
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  parent {symbolic=(tok->astParent()),!0}
  unknown always {!<=-1,!>=2}
Line 179
  firstOperand always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  tok possible symbolic=(tok->variable()->nameToken())
Line 180
  tok possible symbolic=(tok->variable()->nameToken())
Line 181
  ! always {!<=-1,!>=2}
Line 182
  return always {!<=-1,!>=2}
  false always 0
Line 185
  parent always !0
  ( always {!<=-1,!>=2}
  "*" always "*"
Line 187
  tok possible symbolic=(tok->variable()->nameToken())
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
Line 188
  return always {!<=-1,!>=2}
  false always 0
Line 189
  ! always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  true always 1
Line 194
  firstOperand {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  "[" always "["
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
Line 195
  return always {!<=-1,!>=2}
  true always 1
Line 198
  = always !0
  parent always !0
Line 199
  ( always {!<=-1,!>=2}
  parent2 possible {symbolic=(parent),0}
  "[|." always "[|."
Line 201
  parent2 possible {symbolic=(parent),0}
  != {!<=-1,!>=2,0,1}
  parent {symbolic=(parent2),!0}
  && always {!<=-1,!>=2}
  parent2 always !symbolic=(parent)
  && always {!<=-1,!>=2}
  parent2 always {!symbolic=(parent),!0}
  ( always {!<=-1,!>=2}
  "&" always "&"
Line 202
  return always {!<=-1,!>=2}
  false always 0
Line 205
  firstOperand {!<=-1,!>=2,0}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "->" always "->"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
Line 206
  return always {!<=-1,!>=2}
  true always 1
Line 209
  ( possible 0
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( always !0
  "%name% ) (" always "%name% ) ("
  && always {!<=-1,!>=2}
Line 210
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
Line 211
  return always {!<=-1,!>=2}
  true always 1
Line 213
  ( always {!<=-1,!>=2}
  "%var% = %var% ." always "%var% = %var% ."
  && always {!<=-1,!>=2}
Line 214
  == always {!<=-1,!>=2}
  2 always 2
Line 215
  return always {!<=-1,!>=2}
  true always 1
Line 218
  ( always {!<=-1,!>=2}
  -3 always -3
  "std :: string|wstring (|{ %name% )|}" always "std :: string|wstring (|{ %name% )|}"
Line 219
  return always {!<=-1,!>=2}
  true always 1
Line 220
  ( always {!<=-1,!>=2}
  "%name% (|{ %name% )|}" always "%name% (|{ %name% )|}"
Line 221
  -2 always -2
Line 222
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 223
  return always {!<=-1,!>=2}
  true always 1
Line 227
  ( always {!<=-1,!>=2}
  "<<|>>" always "<<|>>"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  firstOperand always {!<=-1,!>=2}
Line 229
  var {symbolic=(tok->variable()),0}
  && always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  "char|wchar_t" always "char|wchar_t"
Line 231
  tok2 possible symbolic=(parent)
Line 232
  ( always {!<=-1,!>=2}
  tok2 possible symbolic=(parent)
  ";|{|}|:" always ";|{|}|:"
Line 235
  ( always {!<=-1,!>=2}
  tok2 possible {symbolic=(parent),0}
  "std :: cout|cin|cerr" always "std :: cout|cin|cerr"
Line 236
  return always {!<=-1,!>=2}
  true always 1
Line 237
  && always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
  0 always 0
Line 238
  tok2 always !0
Line 239
  var2 always symbolic=(tok2->variable())
  && always {!<=-1,!>=2}
  var2 {symbolic=(tok2->variable()),!0}
  ( always {!<=-1,!>=2}
Line 240
  return always {!<=-1,!>=2}
  true always 1
Line 245
  = always 0
  nullptr always 0
Line 246
  ( always {!<=-1,!>=2}
  "+|==|!=" always "+|==|!="
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "=" always "="
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  firstOperand always {!<=-1,!>=2}
Line 247
  ( possible 0
  == always {!<=-1,!>=2}
  tok possible symbolic=(parent->astOperand2())
  && always {!<=-1,!>=2}
Line 248
  ( always !0
Line 249
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 250
  ( always !0
Line 252
  ovar possible {symbolic=(parent->astOperand2()->variable()),symbolic=(parent->astOperand1()->variable())}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ovar always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ovar always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 253
  return always {!<=-1,!>=2}
  true always 1
Line 256
  return always {!<=-1,!>=2}
  false always 0
Line 260
  ( always {!<=-1,!>=2}
Line 262
  ! always {!<=-1,!>=2}
Line 263
  return always {!<=-1,!>=2}
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  tok always !0
  "new" always "new"
  && always {!<=-1,!>=2}
  tok always !0
  == always {!<=-1,!>=2}
  0 always 0
Line 265
  return always {!<=-1,!>=2}
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  tok always !0
Line 267
  return always {!<=-1,!>=2}
  true always 1
Line 268
  ( always {!<=-1,!>=2}
Line 269
  return always {!<=-1,!>=2}
  true always 1
Line 270
  ( always {!<=-1,!>=2}
  "." always "."
Line 271
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 273
  return always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var always !0
  ( always {!<=-1,!>=2}
Line 275
  return always {!<=-1,!>=2}
  false always 0
Line 280
  printInconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 283
  ( always {!<=-1,!>=2}
  "sizeof|decltype|typeid|typeof (" always "sizeof|decltype|typeid|typeof ("
Line 288
  ( always {!<=-1,!>=2}
  "%num%|%char%|%str%" always "%num%|%char%|%str%"
Line 291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 295
  0 always 0
Line 296
  ! always {!<=-1,!>=2}
Line 299
  ! always {!<=-1,!>=2}
  printInconclusive always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  value always !0
  ( always {!<=-1,!>=2}
Line 303
  unknown always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  unknown always 0
Line 305
  unknown always {!<=-1,!>=2}
Line 306
  value always !0
  true always 1
Line 310
  ( always {!<=-1,!>=2}
Line 321
  "fstream" always "fstream"
  "ifstream" always "ifstream"
  "iostream" always "iostream"
  "istream" always "istream"
Line 322
  "istringstream" always "istringstream"
  "stringstream" always "stringstream"
  "wistringstream" always "wistringstream"
  "wstringstream" always "wstringstream"
Line 331
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 332
  == always {!<=-1,!>=2}
  nullptr always 0
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  . always !0
  ( always {!<=-1,!>=2}
Line 337
  . always !0
  ( always {!<=-1,!>=2}
Line 338
  . always !0
Line 340
  tok possible {symbolic=(scope->bodyStart),symbolic=(scope->function->token)}
  != always {!<=-1,!>=2}
Line 341
  ( always {!<=-1,!>=2}
  "sizeof|decltype|typeid|typeof (" always "sizeof|decltype|typeid|typeof ("
Line 344
  ( always {!<=-1,!>=2}
  "* 0" always "* 0"
Line 345
  ( always {!<=-1,!>=2}
  "return|throw|;|{|}|:|[|(|," always "return|throw|;|{|}|:|[|(|,"
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 350
  ( always {!<=-1,!>=2}
  "0 [" always "0 ["
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  "&" always "&"
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "[.(]" always "[.(]"
Line 353
  ( always {!<=-1,!>=2}
  "!!. %name% (|{" always "!!. %name% (|{"
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  "::" always "::"
  || always {!<=-1,!>=2}
  -2 always -2
  == always {!<=-1,!>=2}
  "std" always "std"
Line 354
  ( always {!<=-1,!>=2}
  2 always 2
  "0|NULL|nullptr )|}" always "0|NULL|nullptr )|}"
  && always {!<=-1,!>=2}
Line 356
  var {symbolic=(tok->variable()),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  ( always {!<=-1,!>=2}
Line 360
  var always size=0
  & {lifetime[Address]=(mSettings->library),!0}
Line 364
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  0 always 0
Line 368
  ( always {!<=-1,!>=2}
  "std :: string|wstring ( 0|NULL|nullptr )" always "std :: string|wstring ( 0|NULL|nullptr )"
Line 371
  ( always {!<=-1,!>=2}
  "::|. %name% (" always "::|. %name% ("
Line 373
  = always 0
  0 always 0
  argnr possible 0
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 374
  argnr {<=symbolic=(args.size()-1),!>=symbolic=(args.size())}
Line 375
  ! always {!<=-1,!>=2}
  argtok always symbolic=(args[argnr])
  ( always {!<=-1,!>=2}
Line 377
  argtok always symbolic=(args[argnr])
  != always {!<=-1,!>=2}
  0 always 0
Line 379
  ( always {!<=-1,!>=2}
  1 always 1
Line 384
  ( always {!<=-1,!>=2}
  ">> 0|NULL|nullptr" always ">> 0|NULL|nullptr"
Line 386
  tok2 possible symbolic=(tok->previous())
Line 387
  ( always {!<=-1,!>=2}
  tok2 possible symbolic=(tok->previous())
  ";|{|}|:|(" always ";|{|}|:|("
Line 390
  tok2 possible {symbolic=(tok->previous()),0}
  && always {!<=-1,!>=2}
  tok2 always !0
  && always {!<=-1,!>=2}
  tok2 always !0
  ( always !0
  == always {!<=-1,!>=2}
  "(" always "("
Line 392
  ( always {!<=-1,!>=2}
  tok2 possible 0
  "std :: cin" always "std :: cin"
Line 394
  && always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
  0 always 0
Line 395
  tok2 always !0
Line 396
  var always symbolic=(tok2->variable())
  && always {!<=-1,!>=2}
  var {symbolic=(tok2->variable()),!0}
  ( always {!<=-1,!>=2}
Line 401
  = always 0
  nullptr always 0
Line 402
  = always 0
  nullptr always 0
Line 403
  ( always {!<=-1,!>=2}
  "0|NULL|nullptr ==|!=|>|>=|<|<= %var%" always "0|NULL|nullptr ==|!=|>|>=|<|<= %var%"
Line 404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  3 always 3
  ".|[" always ".|["
Line 405
  2 always 2
Line 408
  ( always {!<=-1,!>=2}
  "%var% ==|!=|>|>=|<|<= 0|NULL|nullptr" always "%var% ==|!=|>|>=|<|<= 0|NULL|nullptr"
  || always {!<=-1,!>=2}
Line 409
  ( always {!<=-1,!>=2}
  "%var% =|+ 0|NULL|nullptr )|]|,|;|+" always "%var% =|+ 0|NULL|nullptr )|]|,|;|+"
Line 411
  2 always 2
Line 413
  ovar possible symbolic=(tok->variable())
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ovar always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ovar always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  tokNull always !0
  != always {!<=-1,!>=2}
  "'\\0'" always "'\\0'"
Line 414
  tokNull always !0
Line 419
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 421
  "$symbol:" always "$symbol:"
  varname possible {"pointer"@210,""@214}
  '\n' always 10
  value possible {0,lifetime[Address]=(v)@214}
  ? possible 0
  value {!0,lifetime[Address]=(v)@214}
  . possible 0
  : always 0
  nullptr always 0
  " or there is possible null pointer dereference: $symbol." always " or there is possible null pointer dereference: $symbol."
Line 422
  "$symbol:" always "$symbol:"
  varname possible {"pointer"@210,""@214}
  "\nPossible null pointer dereference if the default parameter value is used: $symbol" always "\nPossible null pointer dereference if the default parameter value is used: $symbol"
Line 424
  ! {!<=-1,!>=2,1@210}
  tok possible 0@210
Line 425
  tok always 0
  :: always 1
  error always 1
  "nullPointer" always "nullPointer"
  "Null pointer dereference" always "Null pointer dereference"
  :: always 0
  normal always 0
Line 426
  tok always 0
  :: always 2
  warning always 2
  "nullPointerDefaultArg" always "nullPointerDefaultArg"
  :: always 0
  normal always 0
Line 427
  tok always 0
  :: always 2
  warning always 2
  "nullPointerRedundantCheck" always "nullPointerRedundantCheck"
  :: always 0
  normal always 0
Line 431
  ! always {!<=-1,!>=2}
  value possible lifetime[Address]=(v)@214
Line 432
  tok always !0
  :: always 1
  error always 1
  "nullPointer" always "nullPointer"
  "Null pointer dereference" always "Null pointer dereference"
  inconclusive always {!<=-1,!>=2}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  value always !0
  inconclusive {!<=-1,!>=2,0}
Line 439
  value always !0
  "Null pointer dereference" always "Null pointer dereference"
Line 441
  value always !0
Line 442
  :: always 2
  warning always 2
  "nullPointerRedundantCheck" always "nullPointerRedundantCheck"
  inconclusive always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  value always !0
  ( always {!<=-1,!>=2}
  : always 0
  :: always 0
  normal always 0
Line 443
  value always !0
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 444
  :: always 2
  warning always 2
  "nullPointerDefaultArg" always "nullPointerDefaultArg"
  inconclusive always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  value always !0
  ( always {!<=-1,!>=2}
  : always 0
  :: always 0
  normal always 0
Line 447
  value always !0
  ( {!<=-1,!>=2,0}
  "Null" always "Null"
  : always "Possible null"
  "Possible null" always "Possible null"
  " pointer dereference" always " pointer dereference"
Line 448
  ! {!<=-1,!>=2,0}
  varname possible size=0
  ( {!<=-1,!>=2,1}
Line 449
  "$symbol:" always "$symbol:"
  varname always !size=0
  '\n' always 10
  ": $symbol" always ": $symbol"
Line 452
  value always !0
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
Line 453
  "nullPointer" always "nullPointer"
Line 455
  inconclusive always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  value always !0
  ( always {!<=-1,!>=2}
  : always 0
  :: always 0
  normal always 0
Line 462
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 463
  != always {!<=-1,!>=2}
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "-|+|+=|-=|++|--" always "-|+|+=|-=|++|--"
Line 468
  && always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
  ( always !0
  ( always !0
  != always {!<=-1,!>=2}
  0 always 0
Line 469
  = always !0
  ( always !0
Line 471
  && always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
  ( always !0
  ( always !0
  != always {!<=-1,!>=2}
  0 always 0
Line 472
  = always !0
  ( always !0
Line 476
  numericOperand possible {symbolic=(tok->astOperand2()),symbolic=(tok->astOperand1())}
  && always {!<=-1,!>=2}
  numericOperand always !0
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  numericOperand always !0
  ( always !0
  ( always {!<=-1,!>=2}
Line 478
  0 always 0
Line 479
  ! always {!<=-1,!>=2}
Line 481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  value always !0
  ( always {!<=-1,!>=2}
Line 483
  value always !0
  . possible 0
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 485
  . possible 0
Line 486
  . always !0
  ( always {!<=-1,!>=2}
Line 488
  ( always {!<=-1,!>=2}
Line 495
  tok possible 0
  && always {!<=-1,!>=2}
  tok always !0
  0 always 0
  == always {!<=-1,!>=2}
  '-' always 45
Line 496
  "subtraction" always "subtraction"
Line 497
  tok possible 0
  && always {!<=-1,!>=2}
  tok always !0
  0 always 0
  == always {!<=-1,!>=2}
  '+' always 43
Line 498
  "addition" always "addition"
Line 500
  "arithmetic" always "arithmetic"
Line 503
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 505
  tok possible 0
Line 507
  tok possible 0@211
  && always {!<=-1,!>=2}
  tok always !0
  0 always 0
  == always {!<=-1,!>=2}
  '-' always 45
Line 508
  = always "Overflow in pointer arithmetic, NULL pointer is subtracted."
  "Overflow in pointer arithmetic, NULL pointer is subtracted." always "Overflow in pointer arithmetic, NULL pointer is subtracted."
Line 510
  "Pointer " always "Pointer "
  " with NULL pointer." always " with NULL pointer."
Line 512
  tok possible 0
  value possible 0@211
  "Null pointer " always "Null pointer "
Line 514
  :: always 1
  error always 1
Line 515
  "nullPointerArithmetic" always "nullPointerArithmetic"
Line 516
  errmsg possible {symbolic=("Pointer "+arithmetic+" with NULL pointer."),"Overflow in pointer arithmetic, NULL pointer is subtracted.",size=59}
Line 518
  inconclusive {!<=-1,!>=2,0@211}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 521
  , always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
Line 523
  tok possible 0
Line 525
  tok possible 0@212
  && always {!<=-1,!>=2}
  tok always !0
  0 always 0
  == always {!<=-1,!>=2}
  '-' always 45
Line 526
  " or there is overflow in pointer " always " or there is overflow in pointer "
  "." always "."
Line 528
  condition possible 0@212
  " or there is pointer arithmetic with NULL pointer." always " or there is pointer arithmetic with NULL pointer."
Line 530
  tok possible 0
  value possible 0@212
  "Null pointer " always "Null pointer "
Line 532
  :: always 2
  warning always 2
Line 533
  "nullPointerArithmeticRedundantCheck" always "nullPointerArithmeticRedundantCheck"
Line 536
  inconclusive {!<=-1,!>=2,0@212}
  ? possible 0
  : always 0
  :: always 0
  normal always 0
Line 544
  ( always {!<=-1,!>=2}
Line 548
  unknown always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 549
  return always {!<=-1,!>=2}
  checkNullPointer always symbolic=(dynamic_cast<const CheckNullPointer*>(check))
  && always {!<=-1,!>=2}
  checkNullPointer {symbolic=(dynamic_cast<const CheckNullPointer*>(check)),!0}
  ( always {!<=-1,!>=2}
  unknown always 0
Line 554
  nullptr always 0
Line 555
  unsafeUsage possible size=0
  & {lifetime[Address]=(check),!0}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  nullptr always 0
Line 560
  fileInfo always size=0
  = always !size=0
  unsafeUsage always !size=0
Line 561
  fileInfo always size=0
Line 566
  unsafeUsage possible size=0
Line 567
  ( always {!<=-1,!>=2}
Line 568
  nullptr always 0
Line 571
  fileInfo always size=0
  = always !size=0
  unsafeUsage always !size=0
Line 572
  fileInfo always size=0
Line 575
  ( always {!<=-1,!>=2}
Line 577
  ! always {!<=-1,!>=2}
Line 578
  return always {!<=-1,!>=2}
  false always 0
Line 579
  foundErrors always {!<=-1,!>=2}
  foundErrors always {!<=-1,!>=2}
  = always 0
  false always 0
Line 582
  ctu always !0
Line 586
  ! always {!<=-1,!>=2}
  fi always symbolic=(dynamic_cast<MyFileInfo*>(fi1))
Line 588
  fi {symbolic=(dynamic_cast<MyFileInfo*>(fi1)),!0}
Line 589
  = always 0
  0 always 0
  warning possible {0,1}
  <= {!<=-1,!>=2,1}
  1 always 1
Line 590
  warning {0,<=1,!>=2,!<=-1}
  == {!<=-1,!>=2,0,<=1}
  1 always 1
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 593
  locationList possible size=0
Line 594
  :: always 0
  null always 0
Line 597
  "Dereferencing argument ARG that is null" always "Dereferencing argument ARG that is null"
Line 598
  nullptr always 0
Line 599
  warning {0,!<=-1}
Line 600
  ( always {!<=-1,!>=2}
Line 605
  warning possible 0
  ? possible {2,1}
  :: always 2
  warning always 2
  : always 1
  :: always 1
  error always 1
Line 606
  "Null pointer dereference: " always "Null pointer dereference: "
Line 607
  "ctunullpointer" always "ctunullpointer"
Line 608
  :: always 0
  normal always 0
Line 611
  foundErrors always {!<=-1,!>=2}
  = always 1
  true always 1
Line 617
  return always {!<=-1,!>=2}
  foundErrors always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,2@13}
  flag possible 2@13
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
