

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073743799 !@expr1073743800 mTokenizer@var28 ) {
69: instances (@expr1073743801 ) .@expr1073743802 remove (@expr1073743803 this@expr1073743804 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073743805 string (@expr1073743806 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073743807 void ) tokenizer@var21 ;
108: (@expr1073743808 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073743809 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073743810 void ) ctu@var24 ;
120: (@expr1073743811 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073743812 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073743813 0U ) , Certainty ::@expr1073743814 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073743815 list < const Token *@expr1073743816 > callstack@var41 (@expr1073743817 1 , tok@var35 ) ;
141: reportError (@expr1073743818 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073743819 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073743820 0U ) , Certainty ::@expr1073743821 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var64 ;
42: double mDoubleValue@var65 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var66 ;
44: bool mIsUnsigned@var67 ;
45:
46: void promote ( const value & v@var68 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var69 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var66 !=@expr1073743822 Type ::@expr1073743823 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var66 ==@expr1073743824 Type ::@expr1073743825 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073743826 ) ?@expr1073743827 mDoubleValue@var65 :@expr1073743828 (@expr1073743829 double ) mIntValue@var64 ;
60: }
61:
62: static value calc ( char op@var70 , const value & v1@var71 , const value & v2@var72 ) ;
63: int compare ( const value & v@var73 ) const ;
64: value add ( int v@var74 ) const ;
65: value shiftLeft ( const value & v@var75 ) const ;
66: value shiftRight ( const value & v@var76 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var77 ;
72:
73: static long long toLongNumber ( const std :: string & str@var78 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var79 ) ;
75:
76: template < class T > static std :: string toString ( T value@var80 ) {
77: std ::@expr1073743830 ostringstream result@var81 ;
78: result@var81 <<@expr1073743831 value@var80 ;
79: return result@var81 .@expr1073743832 str (@expr1073743833 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var82 ) ;
82:
83: static bool isInt ( const std :: string & str@var83 ) ;
84: static bool isFloat ( const std :: string & str@var84 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var85 ) ;
86: static bool isNegative ( const std :: string & str@var86 ) ;
87: static bool isPositive ( const std :: string & str@var87 ) ;
88: static bool isDec ( const std :: string & str@var88 ) ;
89: static bool isFloatHex ( const std :: string & str@var89 ) ;
90: static bool isIntHex ( const std :: string & str@var90 ) ;
91: static bool isOct ( const std :: string & str@var91 ) ;
92: static bool isBin ( const std :: string & str@var92 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var93 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var94 , bool supportMicrosoftExtensions@var95 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var96 , const std :: string & second@var97 ) ;
105: static std :: string subtract ( const std :: string & first@var98 , const std :: string & second@var99 ) ;
106: static std :: string multiply ( const std :: string & first@var100 , const std :: string & second@var101 ) ;
107: static std :: string divide ( const std :: string & first@var102 , const std :: string & second@var103 ) ;
108: static std :: string mod ( const std :: string & first@var104 , const std :: string & second@var105 ) ;
109: static std :: string incdec ( const std :: string & var@var106 , const std :: string & op@var107 ) ;
110: static std :: string calculate ( const std :: string & first@var108 , const std :: string & second@var109 , char action@var110 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var111 ) ;
113: static std :: string cos ( const std :: string & tok@var112 ) ;
114: static std :: string tan ( const std :: string & tok@var113 ) ;
115: static std :: string abs ( const std :: string & tok@var114 ) ;
116: static bool isEqual ( const std :: string & first@var115 , const std :: string & second@var116 ) ;
117: static bool isNotEqual ( const std :: string & first@var117 , const std :: string & second@var118 ) ;
118: static bool isGreater ( const std :: string & first@var119 , const std :: string & second@var120 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var121 , const std :: string & second@var122 ) ;
120: static bool isLess ( const std :: string & first@var123 , const std :: string & second@var124 ) ;
121: static bool isLessEqual ( const std :: string & first@var125 , const std :: string & second@var126 ) ;
122: static bool isNullValue ( const std :: string & str@var127 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var128 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var129 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var130 , std :: string :: size_type iPos@var131 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var132 , const MathLib :: value & v2@var133 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var134 , const MathLib :: value & v2@var135 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var136 , const MathLib :: value & v2@var137 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var138 , const MathLib :: value & v2@var139 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var140 , const MathLib :: value & v2@var141 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var142 , const MathLib :: value & v2@var143 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var144 , const MathLib :: value & v2@var145 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var146 , const MathLib :: value & v2@var147 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var148 , const MathLib :: value & v2@var149 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var150 , const MathLib :: value & v2@var151 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var152 ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var153 ) const {
54: x@var153 ++@expr1073743834 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var154 ) const {
60: x@var154 --@expr1073743835 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var155 , const U & y@var156 ) const {
67: return x@var155 <@expr1073743836 y@var156 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var157 , const U & y@var158 ) const {
74: return std ::@expr1073743837 abs (@expr1073743838 x@var157 -@expr1073743839 y@var158 ) ==@expr1073743840 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var159 , T x@var160 , U y@var161 ) const {
81: result@var159 =@expr1073743841 !@expr1073743842 (@expr1073743843 x@var160 >@expr1073743844 y@var161 ||@expr1073743845 x@var160 <@expr1073743846 y@var161 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var162 = 0 , Bound b@var163 = Bound :: Point )
91: : valueType@var203 ( ValueType :: INT ) ,
92: bound@var204 ( b@var163 ) ,
93: intvalue@var205 ( val@var162 ) ,
94: tokvalue@var206 ( nullptr ) ,
95: floatValue@var207 ( 0.0 ) ,
96: moveKind@var208 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var209 ( val@var162 ) ,
98: condition@var210 ( nullptr ) ,
99: varId@var212 ( 0U ) ,
100: safe@var213 ( false ) ,
101: conditional@var214 ( false ) ,
102: macro@var215 ( false ) ,
103: defaultArg@var216 ( false ) ,
104: indirect@var217 ( 0 ) ,
105: path@var218 ( 0 ) ,
106: wideintvalue@var219 ( val@var162 ) ,
107: subexpressions@var220 ( ) ,
108: capturetok@var221 ( nullptr ) ,
109: lifetimeKind@var222 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var223 ( LifetimeScope :: Local ) ,
111: valueKind@var228 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var164 , long long val@var165 , Bound b@var166 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var167 ) const {
118: if (@expr1073743847 valueType@var203 !=@expr1073743848 rhs@var167 .@expr1073743849 valueType@var168 ) {
119: return false ; }
120: switch (@expr1073743850 valueType@var203 ) {
121: case ValueType ::@expr1073743851 INT :@expr2028
122: case ValueType ::@expr1073743853 CONTAINER_SIZE :@expr2028
123: case ValueType ::@expr1073743855 BUFFER_SIZE :@expr2028
124: case ValueType ::@expr1073743857 ITERATOR_START :@expr2028
125: case ValueType ::@expr1073743859 ITERATOR_END :@expr2028 ;
126: if (@expr2037 intvalue@var205 !=@expr2038 rhs@var167 .@expr2039 intvalue@var169 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073743864 TOK :@expr2028 ;
130: if (@expr2042 tokvalue@var206 !=@expr2043 rhs@var167 .@expr2044 tokvalue@var170 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073743869 FLOAT :@expr2028 ;
134:
135: if (@expr1073743871 floatValue@var207 >@expr1073743872 rhs@var167 .@expr2049 floatValue@var171 ||@expr1073743874 floatValue@var207 <@expr1073743875 rhs@var167 .@expr2049 floatValue@var171 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073743877 MOVED :@expr2028 ;
139: if (@expr1073743879 moveKind@var208 !=@expr1073743880 rhs@var167 .@expr1073743881 moveKind@var172 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073743882 UNINIT :@expr2028 ;
143: break ;
144: case ValueType ::@expr1073743884 LIFETIME :@expr2028 ;
145: if (@expr2042 tokvalue@var206 !=@expr2043 rhs@var167 .@expr2044 tokvalue@var170 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073743889 SYMBOLIC :@expr2028 ;
149: if (@expr1073743891 !@expr1073743892 sameToken (@expr1073743893 tokvalue@var206 , rhs@var167 .@expr2044 tokvalue@var170 ) ) {
150: return false ; }
151: if (@expr2037 intvalue@var205 !=@expr2038 rhs@var167 .@expr2039 intvalue@var169 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var173 , F f@var174 ) {
160: switch (@expr1073743898 self@var173 .@expr1073743899 valueType@var175 ) {
161: case ValueType ::@expr1073743900 INT :@expr2077
162: case ValueType ::@expr1073743902 SYMBOLIC :@expr2077
163: case ValueType ::@expr1073743904 BUFFER_SIZE :@expr2077
164: case ValueType ::@expr1073743906 CONTAINER_SIZE :@expr2077
165: case ValueType ::@expr1073743908 ITERATOR_START :@expr2077
166: case ValueType ::@expr1073743910 ITERATOR_END :@expr2077 ; {
167: f@var174 (@expr1073743912 self@var173 .@expr1073743913 intvalue@var176 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073743914 FLOAT :@expr2077 ; {
171: f@var174 (@expr1073743916 self@var173 .@expr1073743917 floatValue@var177 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073743918 UNINIT :@expr2077
175: case ValueType ::@expr1073743920 TOK :@expr2077
176: case ValueType ::@expr1073743922 LIFETIME :@expr2077
177: case ValueType ::@expr1073743924 MOVED :@expr2077 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var178 , Compare compare@var179 , T x@var180 , U y@var181 ) const {
186: result@var178 =@expr1073743926 compare@var179 (@expr1073743927 x@var180 , y@var181 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var182 , const Value & rhs@var183 , Compare compare@var184 , T x@var185 ) const {
191: visitValue (@expr1073743929 rhs@var183 ,
192: std ::@expr1073743930 bind (@expr1073743931 innerVisitor {@expr1073743932 } , std ::@expr1073743933 ref (@expr1073743934 result@var182 ) , std ::@expr1073743935 move (@expr1073743936 compare@var184 ) , x@var185 , std ::@expr1073743937 placeholders ::@expr1073743938 _1@expr1073743928 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var186 , Compare compare@var187 ) const {
198: assert (@expr1073743940 (@expr1073743941 !@expr1073743942 this@expr2119 .@expr1073743944 isSymbolicValue (@expr1073743945 ) &&@expr1073743946 !@expr1073743947 rhs@var186 .@expr1073743948 isSymbolicValue (@expr1073743949 ) ) ||@expr1073743950
199: (@expr1073743951 this@expr2119 .@expr1073743952 valueType@var203 ==@expr1073743953 rhs@var186 .@expr1073743954 valueType@var188 &&@expr1073743955 sameToken (@expr1073743956 this@expr2119 .@expr1073743957 tokvalue@var206 , rhs@var186 .@expr1073743958 tokvalue@var189 ) ) ) ;
200: bool result@var190 ; result@var190 =@expr1073743959 false ;
201: visitValue (@expr1073743960
202: *@expr1073743961 this@expr2119 ,
203: std ::@expr1073743962 bind (@expr1073743963 compareVisitor {@expr1073743964 } , std ::@expr2141 ref (@expr1073743966 result@var190 ) , std ::@expr2141 ref (@expr1073743968 rhs@var186 ) , std ::@expr1073743969 move (@expr1073743970 compare@var187 ) , std ::@expr1073743971 placeholders ::@expr1073743972 _1@expr1073743939 ) ) ;
204: return result@var190 ;
205: }
206:
207: bool operator== ( const Value & rhs@var191 ) const {
208: if (@expr1073743973 !@expr1073743974 equalValue (@expr1073743975 rhs@var191 ) ) {
209: return false ; }
210:
211: return varvalue@var209 ==@expr1073743976 rhs@var191 .@expr1073743977 varvalue@var192 &&@expr1073743978
212: condition@var210 ==@expr1073743979 rhs@var191 .@expr1073743980 condition@var193 &&@expr1073743981
213: varId@var212 ==@expr1073743982 rhs@var191 .@expr1073743983 varId@var194 &&@expr1073743984
214: conditional@var214 ==@expr1073743985 rhs@var191 .@expr1073743986 conditional@var195 &&@expr1073743987
215: defaultArg@var216 ==@expr1073743988 rhs@var191 .@expr1073743989 defaultArg@var196 &&@expr1073743990
216: indirect@var217 ==@expr1073743991 rhs@var191 .@expr1073743992 indirect@var197 &&@expr1073743993
217: valueKind@var228 ==@expr1073743994 rhs@var191 .@expr1073743995 valueKind@var198 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var199 ) const {
221: return !@expr1073743996 (@expr1073743997 *@expr1073743998 this@expr1073743999 ==@expr1073744000 rhs@var199 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var200 ) const {
226: bool result@var201 ; result@var201 =@expr1073744002 false ;
227: visitValue (@expr1073744003 *@expr1073744004 this@expr1073744005 , std ::@expr1073744006 bind (@expr1073744007 equalVisitor {@expr1073744008 } , std ::@expr1073744009 ref (@expr1073744010 result@var201 ) , x@var200 , std ::@expr1073744011 placeholders ::@expr1073744012 _1@expr1073744001 ) ) ;
228: return result@var201 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744013 bound@var204 ==@expr1073744014 Bound ::@expr1073744015 Lower ) {
233: visitValue (@expr1073744016 *@expr2193 this@expr2194 , increment {@expr1073744019 } ) ; }
234: else { if (@expr1073744020 bound@var204 ==@expr1073744021 Bound ::@expr1073744022 Upper ) {
235: visitValue (@expr1073744023 *@expr2193 this@expr2194 , decrement {@expr1073744025 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744026 bound@var204 ==@expr1073744027 Bound ::@expr2204 Lower ) {
240: bound@var204 =@expr1073744029 Bound ::@expr2206 Upper ; }
241: else { if (@expr1073744031 bound@var204 ==@expr1073744032 Bound ::@expr2206 Upper ) {
242: bound@var204 =@expr1073744034 Bound ::@expr2204 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744036 ) ;
247: decreaseRange (@expr1073744037 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var202 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var203 ;
267: bool isIntValue ( ) const {
268: return valueType@var203 ==@expr1073744038 ValueType ::@expr1073744039 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var203 ==@expr1073744040 ValueType ::@expr1073744041 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var203 ==@expr1073744042 ValueType ::@expr1073744043 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var203 ==@expr1073744044 ValueType ::@expr1073744045 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var203 ==@expr1073744046 ValueType ::@expr1073744047 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var203 ==@expr1073744048 ValueType ::@expr1073744049 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var203 ==@expr1073744050 ValueType ::@expr1073744051 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var203 ==@expr1073744052 ValueType ::@expr1073744053 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var203 ==@expr1073744054 ValueType ::@expr1073744055 ITERATOR_START ||@expr1073744056 valueType@var203 ==@expr1073744057 ValueType ::@expr1073744058 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var203 ==@expr1073744059 ValueType ::@expr1073744060 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var203 ==@expr1073744061 ValueType ::@expr1073744062 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var203 ==@expr1073744063 ValueType ::@expr1073744064 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var203 ==@expr1073744066 ValueType ::@expr1073744067 LIFETIME &&@expr1073744068 lifetimeScope@var223 ==@expr1073744069 LifetimeScope ::@expr1073744070 Local@expr1073744065 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var203 ==@expr1073744071 ValueType ::@expr1073744072 LIFETIME &&@expr1073744073 lifetimeScope@var223 ==@expr1073744074 LifetimeScope ::@expr1073744075 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var203 ==@expr1073744076 ValueType ::@expr1073744077 LIFETIME &&@expr1073744078 lifetimeScope@var223 ==@expr1073744079 LifetimeScope ::@expr1073744080 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744081 ) ||@expr1073744082 isUninitValue (@expr1073744083 ) ||@expr1073744084 isLifetimeValue (@expr1073744085 ) ;
318: }
319:
320:
321: Bound bound@var204 ;
322:
323:
324: long long intvalue@var205 ;
325:
326:
327: const Token * tokvalue@var206 ;
328:
329:
330: double floatValue@var207 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var208 ;
334:
335:
336: long long varvalue@var209 ;
337:
338:
339: const Token * condition@var210 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var211 ;
342:
343:
344: int varId@var212 ;
345:
346:
347: bool safe@var213 ;
348:
349:
350: bool conditional@var214 ;
351:
352:
353: bool macro@var215 ;
354:
355:
356: bool defaultArg@var216 ;
357:
358: int indirect@var217 ;
359:
360:
361: long long path@var218 ;
362:
363:
364: long long wideintvalue@var219 ;
365:
366: std :: vector < std :: string > subexpressions@var220 ;
367:
368:
369: const Token * capturetok@var221 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var222 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var223 ;
385:
386: static const char * toString ( MoveKind moveKind@var224 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var225 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var226 ) ;
389: static const char * toString ( Bound bound@var227 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var228 ;
402:
403: void setKnown ( ) {
404: valueKind@var228 =@expr1073744086 ValueKind ::@expr1073744087 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var228 ==@expr1073744088 ValueKind ::@expr1073744089 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var228 =@expr1073744091 ValueKind ::@expr1073744092 Possible@expr1073744090 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var228 ==@expr1073744094 ValueKind ::@expr1073744095 Possible@expr1073744093 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var228 ==@expr1073744096 ValueKind ::@expr1073744097 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var228 =@expr1073744098 ValueKind ::@expr1073744099 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var229 = true ) {
428: if (@expr1073744100 inconclusive@var229 ) {
429: valueKind@var228 =@expr1073744101 ValueKind ::@expr1073744102 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var228 ==@expr1073744103 ValueKind ::@expr1073744104 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744106 isKnown (@expr1073744107 ) ) {
438: valueKind@var228 =@expr1073744108 ValueKind ::@expr1073744109 Possible@expr1073744105 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744110 condition@var210 &&@expr1073744111 !@expr1073744112 defaultArg@var216 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var230 , const Token * tok2@var231 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var232 , const Settings * settings@var233 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var234 , SymbolDatabase * symboldatabase@var235 , ErrorLogger * errorLogger@var236 , const Settings * settings@var237 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var238 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var239 , const Settings * settings@var240 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var241 ,
459: const Settings * settings@var242 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var243 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var244 , const Token * indexTok@var245 , bool possible@var246 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var247 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var248 , const Settings * settings@var249 = nullptr , int depth@var250 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var251 ;
471: bool addressOf@var252 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var253 ;
473: bool inconclusive@var254 ;
474:
475: LifetimeToken ( ) : token@var251 ( nullptr ) , addressOf@var252 ( false ) , errorPath@var253 ( ) , inconclusive@var254 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var255 , ValueFlow :: Value :: ErrorPath errorPath@var256 )
478: : token@var251 ( token@var255 ) , addressOf@var252 ( false ) , errorPath@var253 ( std :: move ( errorPath@var256 ) ) , inconclusive@var254 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var257 , bool addressOf@var258 , ValueFlow :: Value :: ErrorPath errorPath@var259 )
482: : token@var251 ( token@var257 ) , addressOf@var252 ( addressOf@var258 ) , errorPath@var253 ( std :: move ( errorPath@var259 ) ) , inconclusive@var254 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var260 , bool b@var261 ) {
486: for (@expr1073744113 LifetimeToken &@expr1073744114 x@var262 :@expr1073744115 v@var260 ) {
487: x@var262 .@expr1073744116 addressOf@var263 =@expr1073744117 b@var261 ; }
488: return v@var260 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var264 , bool b@var265 ) {
492: for (@expr1073744118 LifetimeToken &@expr1073744119 x@var266 :@expr1073744120 v@var264 ) {
493: x@var266 .@expr1073744121 inconclusive@var267 =@expr1073744122 b@var265 ; }
494: return v@var264 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var268 , ValueFlow :: Value & true_value@var269 , ValueFlow :: Value & false_value@var270 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var271 ) ;
499: const Token * parseCompareInt ( const Token * tok@var272 , ValueFlow :: Value & true_value@var273 , ValueFlow :: Value & false_value@var274 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var275 , long long val@var276 , const Token * varTok@var277 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var278 , const Token * varTok@var279 , long long val@var280 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var281 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var282 ,
508: ValueFlow :: Value & value@var283 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var284 ,
511: bool escape@var285 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var286 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var287 , const Token * lifetime@var288 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var289 , ValueFlow :: Value :: ErrorPath & errorPath@var290 , bool * addressOf@var291 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var292 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var293 , const Settings * settings@var294 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var295 , const ValueFlow :: Value * val@var296 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var297 , const ValueFlow :: Value * val@var298 , ValueFlow :: Value :: ErrorPath & errorPath@var299 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var300 , bool inconclusive@var301 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var302 ,
529: bool inconclusive@var303 = false ,
530: long long path@var304 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var305 , const Scope * defaultScope@var306 = nullptr , bool smallest@var307 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var308 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var309 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var310 ;
69: std :: string mScope@var311 ;
70: std :: string mName@var312 ;
71: std :: string mFullName@var313 ;
72: const Token * mNameToken@var314 ;
73: const Token * mParamEnd@var315 ;
74: unsigned int mFlags@var316 ;
75:
76: enum Anonymous0 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var317 ) {
90: setFlag (@expr1073744123 fIsClass , state@var317 ) ;
91: }
92: void isFunction ( bool state@var318 ) {
93: setFlag (@expr1073744124 fIsFunction , state@var318 ) ;
94: }
95: void isVariable ( bool state@var319 ) {
96: setFlag (@expr1073744125 fIsVariable , state@var319 ) ;
97: }
98: void isAlias ( bool state@var320 ) {
99: setFlag (@expr1073744126 fIsAlias , state@var320 ) ;
100: }
101: void isSpecialization ( bool state@var321 ) {
102: setFlag (@expr1073744127 fIsSpecialization , state@var321 ) ;
103: }
104: void isPartialSpecialization ( bool state@var322 ) {
105: setFlag (@expr1073744128 fIsPartialSpecialization , state@var322 ) ;
106: }
107: void isForwardDeclaration ( bool state@var323 ) {
108: setFlag (@expr1073744129 fIsForwardDeclaration , state@var323 ) ;
109: }
110: void isVariadic ( bool state@var324 ) {
111: setFlag (@expr1073744130 fIsVariadic , state@var324 ) ;
112: }
113: void isFriend ( bool state@var325 ) {
114: setFlag (@expr1073744131 fIsFriend , state@var325 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var326 ) const {
123: return (@expr2308 (@expr2308 mFlags@var316 &@expr1073744134 flag@var326 ) !=@expr1073744135 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var327 , bool state@var328 ) {
132: mFlags@var316 =@expr1073744136 state@var328 ?@expr1073744137 mFlags@var316 |@expr1073744138 flag@var327 :@expr1073744139 mFlags@var316 &@expr1073744140 ~@expr1073744141 flag@var327 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var329 , const std :: string & scope@var330 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var331 , const std :: string & scope@var332 , const Token * nameToken@var333 , const Token * paramEnd@var334 ) ;
150: TokenAndName ( const TokenAndName & other@var335 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var336 ) const {
154: return mToken@var310 ==@expr1073744142 rhs@var336 .@expr1073744143 mToken@var337 &&@expr1073744144 mScope@var311 ==@expr1073744145 rhs@var336 .@expr1073744146 mScope@var338 &&@expr1073744147 mName@var312 ==@expr1073744148 rhs@var336 .@expr1073744149 mName@var339 &&@expr1073744150 mFullName@var313 ==@expr1073744151 rhs@var336 .@expr1073744152 mFullName@var340 &&@expr1073744153
155: mNameToken@var314 ==@expr1073744154 rhs@var336 .@expr1073744155 mNameToken@var341 &&@expr1073744156 mParamEnd@var315 ==@expr1073744157 rhs@var336 .@expr1073744158 mParamEnd@var342 &&@expr1073744159 mFlags@var316 ==@expr1073744160 rhs@var336 .@expr1073744161 mFlags@var343 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var310 ;
160: }
161: void token ( Token * token@var344 ) {
162: mToken@var310 =@expr1073744162 token@var344 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var311 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var312 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var313 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var314 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var315 ;
178: }
179: void paramEnd ( const Token * end@var345 ) {
180: mParamEnd@var315 =@expr1073744163 end@var345 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744164 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744165 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744166 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744167 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744168 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744169 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744170 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744171 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744172 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var346 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var347 ) const {
243:
244:
245: return (@expr2349 (@expr2349 mFlags@var316 &@expr1073744175 fFamilyMask ) &@expr1073744176 (@expr2349 decl@var347 .@expr1073744178 mFlags@var348 &@expr1073744179 fFamilyMask ) ) !=@expr1073744180 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var349 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var350 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var351 , const unsigned long numberOfArguments@var352 , bool variadic@var353 , const char patternAfter@var354 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var355 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var356 , int & namepos@var357 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var358 , int & namepos@var359 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var360 , int & namepos@var361 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var362 ,
306: bool & codeWithTemplates@var363 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var364 , bool isTemplate@var365 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var366 = nullptr , Token * backToken@var367 = nullptr , bool isTemplate@var368 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var369 , Token * end@var370 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var371 , const std :: string & scope@var372 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var373 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var374 ,
393: const std :: list < const Token * > & specializations@var375 ,
394: const std :: time_t maxtime@var376 ,
395: std :: set < std :: string > & expandedtemplates@var377 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var378 , const Token * tok@var379 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var380 , const Token * tok@var381 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var382 ,
422: const TokenAndName & templateInstantiation@var383 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var384 ,
424: const std :: string & newName@var385 ,
425: bool copy@var386 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var387 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var388 ,
435: const std :: string & newName@var389 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var390 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var391 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var392 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var393 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var394 ,
458: const Token * templateInstantiationNameToken@var395 ,
459: const std :: list < const Token * > & specializations@var396 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var397 , const Token * end@var398 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var399 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var400 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var401 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var402 ,
487: const std :: string & indent@var403 = "    " ) const ;
488: void printOut ( const std :: string & text@var404 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var405 ;
491: TokenList & mTokenList@var406 ;
492: const Settings * mSettings@var407 ;
493: ErrorLogger * mErrorLogger@var408 ;
494: bool mChanged@var409 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var410 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var411 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var412 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var413 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var414 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var415 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var416 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var417 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var418 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var419 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var420 ;
507: } ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var421 ) const {
35: return p@var421 .@expr1073744181 first@var422 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var423 ) const {
42: return p@var423 .@expr1073744182 second@var424 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var425 , const T & x@var426 )
48: {
49: return std ::@expr1073744183 find (@expr1073744184 r@var425 .@expr1073744185 begin (@expr1073744186 ) , r@var425 .@expr2363 end (@expr2364 ) , x@var426 ) !=@expr1073744189 r@var425 .@expr2363 end (@expr2364 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var427 , const T & x@var428 )
54: {
55: return std ::@expr1073744192 find (@expr1073744193 r@var427 .@expr1073744194 begin (@expr1073744195 ) , r@var427 .@expr2372 end (@expr2373 ) , x@var428 ) !=@expr1073744198 r@var427 .@expr2372 end (@expr2373 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var429 , const U & x@var430 )
60: {
61: return std ::@expr1073744201 find (@expr1073744202 r@var429 .@expr1073744203 begin (@expr1073744204 ) , r@var429 .@expr2381 end (@expr2382 ) , x@var430 ) !=@expr1073744207 r@var429 .@expr2381 end (@expr2382 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var431 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744210 t@var431 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var432 , char c@var433 )
74: {
75: return !@expr1073744211 str@var432 .@expr1073744212 empty (@expr1073744213 ) &&@expr1073744214 str@var432 .@expr1073744215 back (@expr1073744216 ) ==@expr1073744217 c@var433 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var434 , const char end@var435 [ ] , unsigned long endlen@var436 )
79: {
80: return (@expr2394 str@var434 .@expr2395 size (@expr2396 ) >=@expr1073744221 endlen@var436 ) &&@expr1073744222 (@expr2394 str@var434 .@expr1073744224 compare (@expr1073744225 str@var434 .@expr2395 size (@expr2396 ) -@expr1073744228 endlen@var436 , endlen@var436 , end@var435 ) ==@expr1073744229 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var437 , const char ( & end@var438 ) [ N ] )
85: {
86: return endsWith (@expr1073744231 str@var437 , end@var438 , N@expr1073744230 -@expr1073744232 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var439 , char q@var440 , const std :: string & p@var441 )
90: {
91: if (@expr1073744233 !@expr1073744234 endsWith (@expr1073744235 str@var439 , q@var440 ) ) {
92: return false ; }
93: if (@expr1073744236 (@expr1073744237 str@var439 .@expr1073744238 length (@expr1073744239 ) +@expr1073744240 1 ) >@expr1073744241 p@var441 .@expr1073744242 length (@expr1073744243 ) &&@expr1073744244 (@expr1073744245 str@var439 .@expr1073744246 compare (@expr1073744247 0 , p@var441 .@expr1073744248 size (@expr1073744249 ) +@expr1073744250 1 , p@var441 +@expr1073744251 q@var440 ) ==@expr1073744252 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var442 , char q@var443 )
99: {
100: static const std ::@expr2429 vector < std ::@expr2429 string > suffixes@var444 {@expr1073744255 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744256 const std ::@expr2429 string &@expr1073744258 p@var445 :@expr1073744259 suffixes@var444 ) {
102: if (@expr1073744260 isPrefixStringCharLiteral (@expr1073744261 str@var442 , q@var443 , p@var445 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var446 )
109: {
110: return isStringCharLiteral (@expr1073744262 str@var446 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var447 )
114: {
115: return isStringCharLiteral (@expr1073744263 str@var447 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var448 , char q@var449 )
119: {
120: const unsigned long quotePos@var450 =@expr1073744264 str@var448 .@expr1073744265 find (@expr1073744266 q@var449 ) ;
121: return str@var448 .@expr1073744267 substr (@expr1073744268 quotePos@var450 +@expr1073744269 1U , str@var448 .@expr1073744270 size (@expr1073744271 ) -@expr1073744272 quotePos@var450 -@expr1073744273 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var451 )
125: {
126: if (@expr1073744274 isStringLiteral (@expr1073744275 str@var451 ) ) {
127: return getStringCharLiteral (@expr1073744276 str@var451 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var452 )
132: {
133: if (@expr1073744277 isCharLiteral (@expr1073744278 str@var452 ) ) {
134: return getStringCharLiteral (@expr1073744279 str@var452 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var453 )
139: {
140: if (@expr1073744280 i@var453 ==@expr1073744281 1 ) {
141: return "st" ; }
142: if (@expr1073744282 i@var453 ==@expr1073744283 2 ) {
143: return "nd" ; }
144: if (@expr1073744284 i@var453 ==@expr1073744285 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var454 , const std :: string & rhs@var455 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var456 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var457 , const std :: string & name@var458 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var459 , const std :: string & name@var460 ) ;
156:
157: void strTolower ( std :: string & str@var461 ) ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var462 ;
57: Token * back@var463 ;
58: const TokenList * list@var464 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var465 , const Token * bodyEnd_@var466 , const std :: set < std :: string > & usingNamespaces_@var467 = std :: set < std :: string > ( ) ) : name@var468 ( name_@var465 ) , bodyEnd@var469 ( bodyEnd_@var466 ) , usingNamespaces@var470 ( usingNamespaces_@var467 ) { }
63: std :: string name@var468 ;
64: const Token * const bodyEnd@var469 ;
65: std :: set < std :: string > usingNamespaces@var470 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var471 ;
70: int mFileIndex@var472 ;
71: int mLineNumber@var473 ;
72: int mColumn@var474 ;
73: int mExprId@var475 ;
74:
75:
76: Token * mAstOperand1@var476 ;
77: Token * mAstOperand2@var477 ;
78: Token * mAstParent@var478 ;
79:
80:
81: const Scope * mScope@var479 ;
82: union {
83: const Function * mFunction@var480 ;
84: const Variable * mVariable@var481 ;
85: const :: Type * mType@var482 ;
86: const Enumerator * mEnumerator@var483 ;
87: } ;
88:
|
92:
93: int mProgressValue@var484 ;
94:
|
97:
98: int mIndex@var485 ;
99:
100:
101: std :: string * mOriginalName@var486 ;
102:
103:
104: ValueType * mValueType@var487 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var488 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var489 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var490 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var491 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var492 ;
119: long long value@var493 ;
120: struct CppcheckAttributes * next@var494 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var495 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var496 ;
126:
127:
128: unsigned char mBits@var497 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var498 , long long value@var499 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var500 , long long * value@var501 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var471 ( 0 )
135: , mFileIndex@var472 ( 0 )
136: , mLineNumber@var473 ( 0 )
137: , mColumn@var474 ( 0 )
138: , mExprId@var475 ( 0 )
139: , mAstOperand1@var476 ( nullptr )
140: , mAstOperand2@var477 ( nullptr )
141: , mAstParent@var478 ( nullptr )
142: , mScope@var479 ( nullptr )
143: , mFunction@var480 ( nullptr )
144: , mProgressValue@var484 ( 0 )
145: , mIndex@var485 ( 0 )
146: , mOriginalName@var486 ( nullptr )
147: , mValueType@var487 ( nullptr )
148: , mValues@var488 ( nullptr )
149: , mTemplateSimplifierPointers@var490 ( nullptr )
150: , mScopeInfo@var491 ( nullptr )
151: , mCppcheckAttributes@var495 ( nullptr )
152: , mCpp11init@var496 ( Cpp11init :: UNKNOWN )
153: , mBits@var497 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var502 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var503 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var504 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var505 ) {
199: mStr@var717 =@expr1073744286 s@var505 ;
200: mImpl@var723 .@expr1073744287 mVarId@var754 =@expr1073744288 0 ;
201:
202: update_property_info (@expr1073744289 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var506 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var717 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var507 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var508 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var509 ) const ;
236: Token * tokAt ( int index@var510 ) {
237: return const_cast < Token *@expr2466 > (@expr1073744291 const_cast < const Token *@expr2466 > (@expr1073744293 this@expr1073744294 ) .@expr1073744295 tokAt (@expr1073744296 index@var510 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var511 ) const ;
245: Token * linkAt ( int index@var512 ) {
246: return const_cast < Token *@expr2473 > (@expr1073744298 const_cast < const Token *@expr2473 > (@expr1073744300 this@expr1073744301 ) .@expr1073744302 linkAt (@expr1073744303 index@var512 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var513 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var514 , const char ( & pattern@var515 ) [ count ] ) {
276: return simpleMatch (@expr1073744305 tok@var514 , pattern@var515 , count@expr1073744304 -@expr1073744306 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var516 , const char pattern@var517 [ ] , unsigned long pattern_len@var518 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var519 , const char pattern@var520 [ ] , int varid@var521 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var522 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var523 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var524 , const Settings * const settings@var525 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var526 , long long index@var527 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var723 .@expr1073744307 mValueType@var755 ;
366: }
367: void setValueType ( ValueType * vt@var528 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var529 ; top@var529 =@expr1073744308 this@expr1073744309 ;
371: while (@expr1073744310 top@var529 &&@expr1073744311 !@expr1073744312 Token ::@expr1073744313 Match (@expr1073744314 top@var529 .@expr2491 astParent (@expr2492 ) , ",|(" ) ) {
372: top@var529 =@expr1073744317 top@var529 .@expr2491 astParent (@expr2492 ) ; }
373: return top@var529 ?@expr1073744320 top@var529 .@expr1073744321 mImpl@var530 .@expr1073744322 mValueType@var531 :@expr1073744323 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var721 ;
378: }
379: void tokType ( Token :: Type t@var532 ) {
380: mTokType@var721 =@expr1073744324 t@var532 ;
381:
382: const bool memoizedIsName@var533 =@expr1073744325 mTokType@var721 ==@expr1073744326 eName ||@expr1073744327 mTokType@var721 ==@expr1073744328 eType ||@expr1073744329 mTokType@var721 ==@expr1073744330 eVariable ||@expr1073744331
383: mTokType@var721 ==@expr1073744332 eFunction ||@expr1073744333 mTokType@var721 ==@expr1073744334 eKeyword ||@expr1073744335 mTokType@var721 ==@expr2512 eBoolean ||@expr1073744337
384: mTokType@var721 ==@expr2514 eEnumerator ;
385: setFlag (@expr1073744339 fIsName , memoizedIsName@var533 ) ;
386:
387: const bool memoizedIsLiteral@var534 =@expr1073744340 mTokType@var721 ==@expr1073744341 eNumber ||@expr1073744342 mTokType@var721 ==@expr1073744343 eString ||@expr1073744344 mTokType@var721 ==@expr1073744345 eChar ||@expr1073744346
388: mTokType@var721 ==@expr2512 eBoolean ||@expr1073744348 mTokType@var721 ==@expr1073744349 eLiteral ||@expr1073744350 mTokType@var721 ==@expr2514 eEnumerator ;
389: setFlag (@expr1073744352 fIsLiteral , memoizedIsLiteral@var534 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var721 ==@expr1073744353 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073744354 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var722 ==@expr1073744355 fIsName &&@expr1073744356 mTokType@var721 ==@expr1073744357 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073744358 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var721 ==@expr1073744359 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var721 ==@expr1073744360 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073744361 isConstOp (@expr1073744362 ) ||@expr1073744363
412: isAssignmentOp (@expr1073744364 ) ||@expr1073744365
413: mTokType@var721 ==@expr1073744366 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073744367 isArithmeticalOp (@expr1073744368 ) ||@expr1073744369
417: mTokType@var721 ==@expr1073744370 eLogicalOp ||@expr1073744371
418: mTokType@var721 ==@expr1073744372 eComparisonOp ||@expr1073744373
419: mTokType@var721 ==@expr1073744374 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073744375 ) ||@expr1073744376
423: mTokType@var721 ==@expr1073744377 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var721 ==@expr1073744378 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var721 ==@expr1073744379 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var721 ==@expr1073744380 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var721 ==@expr1073744381 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var721 ==@expr1073744382 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073744383 ) !=@expr1073744384 nullptr &&@expr1073744385 astOperand2 (@expr1073744386 ) !=@expr1073744387 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var535 ) const {
444: return s@var535 ==@expr1073744388 mStr@var717 &&@expr1073744389 astOperand1 (@expr1073744390 ) !=@expr1073744391 nullptr &&@expr1073744392 astOperand2 (@expr1073744393 ) ==@expr1073744394 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var722 ;
450: }
451: void flags ( const unsigned int flags_@var536 ) {
452: mFlags@var722 =@expr1073744395 flags_@var536 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073744396 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var537 ) {
458: setFlag (@expr1073744397 fIsUnsigned , sign@var537 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073744398 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var538 ) {
464: setFlag (@expr1073744399 fIsSigned , sign@var538 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073744400 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var539 ) {
470: setFlag (@expr1073744401 fIsPointerCompare , b@var539 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073744402 fIsLong ) ;
474: }
475: void isLong ( bool size@var540 ) {
476: setFlag (@expr1073744403 fIsLong , size@var540 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073744404 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var541 ) {
482: setFlag (@expr1073744405 fIsStandardType , b@var541 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073744406 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var542 ) {
488: setFlag (@expr1073744407 fIsExpandedMacro , m@var542 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073744408 fIsCast ) ;
492: }
493: void isCast ( bool c@var543 ) {
494: setFlag (@expr1073744409 fIsCast , c@var543 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073744410 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var544 ) {
500: setFlag (@expr1073744411 fIsAttributeConstructor , ac@var544 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073744412 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var545 ) {
506: setFlag (@expr1073744413 fIsAttributeDestructor , value@var545 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073744414 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var546 ) {
512: setFlag (@expr1073744415 fIsAttributeUnused , unused@var546 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073744416 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var547 ) {
518: setFlag (@expr1073744417 fIsAttributeUsed , unused@var547 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073744418 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var548 ) {
524: setFlag (@expr1073744419 fIsAttributePure , value@var548 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073744420 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var549 ) {
530: setFlag (@expr1073744421 fIsAttributeConst , value@var549 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073744422 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var550 ) {
536: setFlag (@expr1073744423 fIsAttributeNoreturn , value@var550 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073744424 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var551 ) {
542: setFlag (@expr1073744425 fIsAttributeNothrow , value@var551 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073744426 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var552 ) {
548: setFlag (@expr1073744427 fIsAttributePacked , value@var552 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073744428 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var553 ) {
554: setFlag (@expr1073744429 fIsAttributeNodiscard , value@var553 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073744430 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var554 ) {
560: setFlag (@expr1073744431 fIsAttributeMaybeUnused , value@var554 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var555 , long long value@var556 ) {
563: mImpl@var723 .@expr1073744432 setCppcheckAttribute (@expr1073744433 type@var555 , value@var556 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var557 , long long * value@var558 ) const {
566: return mImpl@var723 .@expr1073744434 getCppcheckAttribute (@expr1073744435 type@var557 , value@var558 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073744436 mImpl@var723 .@expr1073744437 mCppcheckAttributes@var756 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073744438 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073744439 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var559 ) {
578: setFlag (@expr1073744440 fIsOperatorKeyword , value@var559 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073744441 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var560 ) {
584: setFlag (@expr1073744442 fIsComplex , value@var560 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073744443 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var561 ) {
590: setFlag (@expr1073744444 fIsEnumType , value@var561 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073744445 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var562 ) {
596: setFlag (@expr1073744446 fAtAddress , b@var562 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073744447 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var563 ) {
602: setFlag (@expr1073744448 fIncompleteVar , b@var563 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073744449 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var564 ) {
609: setFlag (@expr1073744450 fIsIncompleteConstant , b@var564 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073744451 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var565 ) {
616: setFlag (@expr1073744452 fConstexpr , b@var565 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073744453 fExternC ) ;
621: }
622: void isExternC ( bool b@var566 ) {
623: setFlag (@expr1073744454 fExternC , b@var566 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073744455 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var567 ) {
630: setFlag (@expr1073744456 fIsSplitVarDeclComma , b@var567 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073744457 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var568 ) {
637: setFlag (@expr1073744458 fIsSplitVarDeclEq , b@var568 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073744459 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var569 ) {
644: setFlag (@expr1073744460 fIsImplicitInt , b@var569 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073744461 fIsInline ) ;
649: }
650: void isInline ( bool b@var570 ) {
651: setFlag (@expr1073744462 fIsInline , b@var570 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073744463 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var571 ) {
658: setFlag (@expr1073744464 fIsRemovedVoidParameter , b@var571 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073744465 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var572 ) {
665: setFlag (@expr1073744466 fIsTemplate , b@var572 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073744467 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var573 ) {
672: setFlag (@expr1073744468 fIsSimplifedScope , b@var573 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var723 .@expr1073744469 mBits@var757 >@expr1073744470 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var723 .@expr1073744471 mBits@var757 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var723 .@expr1073744472 mTemplateSimplifierPointers@var758 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var574 ) {
685: if (@expr1073744473 !@expr1073744474 mImpl@var723 .@expr2651 mTemplateSimplifierPointers@var758 ) {
686: mImpl@var723 .@expr2651 mTemplateSimplifierPointers@var758 =@expr1073744477 new std ::@expr1073744478 set < TemplateSimplifier ::@expr1073744479 TokenAndName *@expr1073744480 > ; }
687: mImpl@var723 .@expr2651 mTemplateSimplifierPointers@var758 .@expr1073744482 insert (@expr1073744483 tokenAndName@var574 ) ;
688: }
689: void setBits ( const unsigned char b@var575 ) {
690: mImpl@var723 .@expr1073744484 mBits@var757 =@expr1073744485 b@var575 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr2662 (@expr2662 (@expr2662 mTokType@var721 ==@expr1073744489 eString ) &&@expr1073744490 isPrefixStringCharLiteral (@expr1073744491 mStr@var717 , '"' , "u8" ) ) ||@expr1073744492
695: (@expr2662 (@expr2662 mTokType@var721 ==@expr1073744495 eChar ) &&@expr1073744496 isPrefixStringCharLiteral (@expr1073744497 mStr@var717 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr2674 (@expr2674 (@expr2674 mTokType@var721 ==@expr1073744501 eString ) &&@expr1073744502 isPrefixStringCharLiteral (@expr1073744503 mStr@var717 , '"' , "u" ) ) ||@expr1073744504
700: (@expr2674 (@expr2674 mTokType@var721 ==@expr1073744507 eChar ) &&@expr1073744508 isPrefixStringCharLiteral (@expr1073744509 mStr@var717 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr2686 (@expr2686 (@expr2686 mTokType@var721 ==@expr1073744513 eString ) &&@expr1073744514 isPrefixStringCharLiteral (@expr1073744515 mStr@var717 , '"' , "U" ) ) ||@expr1073744516
705: (@expr2686 (@expr2686 mTokType@var721 ==@expr1073744519 eChar ) &&@expr1073744520 isPrefixStringCharLiteral (@expr1073744521 mStr@var717 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr2698 (@expr2698 (@expr2698 mTokType@var721 ==@expr1073744525 eString ) &&@expr1073744526 isPrefixStringCharLiteral (@expr1073744527 mStr@var717 , '"' , "" ) ) ||@expr1073744528
710: (@expr2698 (@expr2698 mTokType@var721 ==@expr1073744531 eChar ) &&@expr1073744532 isPrefixStringCharLiteral (@expr1073744533 mStr@var717 , '\'' , "" ) &&@expr1073744534 mStr@var717 .@expr1073744535 length (@expr1073744536 ) ==@expr1073744537 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr2714 (@expr2714 (@expr2714 mTokType@var721 ==@expr1073744541 eChar ) &&@expr1073744542 isPrefixStringCharLiteral (@expr1073744543 mStr@var717 , '\'' , "" ) ) &&@expr1073744544
715: (@expr2714 mStr@var717 .@expr1073744546 length (@expr1073744547 ) >@expr1073744548 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073744549 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var576 ) {
738: setFlag (@expr1073744550 fIsTemplateArg , value@var576 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var577 , const char ( & pattern@var578 ) [ count ] ) {
743: return findsimplematch (@expr1073744552 startTok@var577 , pattern@var578 , count@expr1073744551 -@expr1073744553 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var579 , const char pattern@var580 [ ] , unsigned long pattern_len@var581 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var582 , const char ( & pattern@var583 ) [ count ] , const Token * const end@var584 ) {
749: return findsimplematch (@expr1073744555 startTok@var582 , pattern@var583 , count@expr1073744554 -@expr1073744556 1 , end@var584 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var585 , const char pattern@var586 [ ] , unsigned long pattern_len@var587 , const Token * const end@var588 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var589 , const char pattern@var590 [ ] , const int varId@var591 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var592 , const char pattern@var593 [ ] , const Token * const end@var594 , const int varId@var595 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var596 , const char ( & pattern@var597 ) [ count ] ) {
758: return findsimplematch (@expr1073744558 startTok@var596 , pattern@var597 , count@expr1073744557 -@expr1073744559 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var598 , const char pattern@var599 [ ] , unsigned long pattern_len@var600 ) {
761: return const_cast < Token *@expr2736 > (@expr1073744561 findsimplematch (@expr1073744562 const_cast < const Token *@expr2736 > (@expr1073744564 startTok@var598 ) , pattern@var599 , pattern_len@var600 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var601 , const char ( & pattern@var602 ) [ count ] , const Token * const end@var603 ) {
765: return findsimplematch (@expr1073744566 startTok@var601 , pattern@var602 , count@expr1073744565 -@expr1073744567 1 , end@var603 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var604 , const char pattern@var605 [ ] , unsigned long pattern_len@var606 , const Token * const end@var607 ) {
768: return const_cast < Token *@expr2744 > (@expr1073744569 findsimplematch (@expr1073744570 const_cast < const Token *@expr2744 > (@expr1073744572 startTok@var604 ) , pattern@var605 , pattern_len@var606 , end@var607 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var608 , const char pattern@var609 [ ] , const int varId@var610 = 0 ) {
772: return const_cast < Token *@expr2749 > (@expr1073744574 findmatch (@expr1073744575 const_cast < const Token *@expr2749 > (@expr1073744577 startTok@var608 ) , pattern@var609 , varId@var610 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var611 , const char pattern@var612 [ ] , const Token * const end@var613 , const int varId@var614 = 0 ) {
775: return const_cast < Token *@expr2754 > (@expr1073744579 findmatch (@expr1073744580 const_cast < const Token *@expr2754 > (@expr1073744582 startTok@var611 ) , pattern@var612 , end@var613 , varId@var614 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var615 , const char * haystack@var616 , int varid@var617 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var723 .@expr1073744583 mFileIndex@var759 ;
796: }
797: void fileIndex ( int indexOfFile@var618 ) {
798: mImpl@var723 .@expr1073744584 mFileIndex@var759 =@expr1073744585 indexOfFile@var618 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var723 .@expr1073744586 mLineNumber@var760 ;
803: }
804: void linenr ( int lineNumber@var619 ) {
805: mImpl@var723 .@expr1073744587 mLineNumber@var760 =@expr1073744588 lineNumber@var619 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var723 .@expr1073744589 mColumn@var761 ;
810: }
811: void column ( int c@var620 ) {
812: mImpl@var723 .@expr1073744590 mColumn@var761 =@expr1073744591 c@var620 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var718 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var621 , const Token * end@var622 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var623 , const std :: string & originalNameStr@var624 = emptyString@var1 , bool prepend@var625 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var626 , const std :: string & originalNameStr@var627 = emptyString@var1 )
840: {
841: return insertToken (@expr1073744592 tokenStr@var626 , originalNameStr@var627 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var719 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var723 .@expr1073744593 mVarId@var754 ;
851: }
852: void varId ( int id@var628 ) {
853: mImpl@var723 .@expr1073744594 mVarId@var754 =@expr1073744595 id@var628 ;
854: if (@expr1073744596 id@var628 !=@expr1073744597 0 ) {
855: tokType (@expr1073744598 eVariable ) ;
856: isStandardType (@expr1073744599 false ) ;
857: } else {
858: update_property_info (@expr1073744600 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073744601 mImpl@var723 .@expr2778 mExprId@var762 ) {
864: return mImpl@var723 .@expr2778 mExprId@var762 ; }
865: return mImpl@var723 .@expr1073744604 mVarId@var754 ;
866: }
867: void exprId ( int id@var629 ) {
868: mImpl@var723 .@expr1073744605 mExprId@var762 =@expr1073744606 id@var629 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var630 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var631 , const std :: vector < std :: string > & fileNames@var632 ) const ;
888:
|
891:
892: void printLines ( int lines@var633 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var634 , Token * start@var635 , Token * end@var636 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var637 ; varid@var637 = false ;
905: bool exprid@var638 ; exprid@var638 = false ;
906: bool idtype@var639 ; idtype@var639 = false ;
907: bool attributes@var640 ; attributes@var640 = false ;
908: bool macro@var641 ; macro@var641 = false ;
909: bool linenumbers@var642 ; linenumbers@var642 = false ;
910: bool linebreaks@var643 ; linebreaks@var643 = false ;
911: bool files@var644 ; files@var644 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var645 ;
914: options@var645 .@expr1073744607 attributes@var646 =@expr1073744608 true ;
915: options@var645 .@expr1073744609 macro@var647 =@expr1073744610 true ;
916: options@var645 .@expr1073744611 linenumbers@var648 =@expr1073744612 true ;
917: options@var645 .@expr1073744613 linebreaks@var649 =@expr1073744614 true ;
918: options@var645 .@expr1073744615 files@var650 =@expr1073744616 true ;
919: return options@var645 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var651 ; options@var651 =@expr1073744617 forDebug (@expr1073744618 ) ;
923: options@var651 .@expr1073744619 varid@var652 =@expr1073744620 true ;
924: return options@var651 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var653 ; options@var653 =@expr1073744621 forDebug (@expr1073744622 ) ;
928: options@var653 .@expr1073744623 exprid@var654 =@expr1073744624 true ;
929: return options@var653 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var655 ; options@var655 =@expr1073744625 forDebug (@expr1073744626 ) ;
933: options@var655 .@expr1073744627 exprid@var656 =@expr1073744628 true ;
934: options@var655 .@expr1073744629 varid@var657 =@expr1073744630 true ;
935: options@var655 .@expr1073744631 idtype@var658 =@expr1073744632 true ;
936: return options@var655 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var659 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var660 , bool attributes@var661 , bool macro@var662 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var663 , const std :: vector < std :: string > * fileNames@var664 = nullptr , const Token * end@var665 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var666 , bool attributes@var667 = true ) const ;
952: std :: string stringifyList ( bool varid@var668 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var669 , bool attributes@var670 , bool linenumbers@var671 , bool linebreaks@var672 , bool files@var673 , const std :: vector < std :: string > * fileNames@var674 = nullptr , const Token * end@var675 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var676 ) {
983: mLink@var720 =@expr1073744633 linkToToken@var676 ;
984: if (@expr1073744634 mStr@var717 ==@expr1073744635 "<" ||@expr1073744636 mStr@var717 ==@expr1073744637 ">" ) {
985: update_property_info (@expr1073744638 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var720 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var677 ) {
1006: mImpl@var723 .@expr1073744639 mScope@var763 =@expr1073744640 s@var677 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var723 .@expr1073744641 mScope@var763 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var678 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var721 ==@expr1073744642 eFunction ||@expr1073744643 mTokType@var721 ==@expr1073744644 eLambda ?@expr1073744645 mImpl@var723 .@expr1073744646 mFunction@var764 :@expr1073744647 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var679 ) {
1034: mImpl@var723 .@expr1073744648 mVariable@var765 =@expr1073744649 v@var679 ;
1035: if (@expr1073744650 v@var679 ||@expr1073744651 mImpl@var723 .@expr1073744652 mVarId@var754 ) {
1036: tokType (@expr1073744653 eVariable ) ; }
1037: else { if (@expr1073744654 mTokType@var721 ==@expr1073744655 eVariable ) {
1038: tokType (@expr1073744656 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var721 ==@expr1073744657 eVariable ?@expr1073744658 mImpl@var723 .@expr1073744659 mVariable@var765 :@expr1073744660 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var680 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var721 ==@expr1073744661 eType ?@expr1073744662 mImpl@var723 .@expr1073744663 mType@var766 :@expr1073744664 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var681 , const Token * * typeTok@var682 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var683 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var684 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var721 ==@expr1073744665 eEnumerator ?@expr1073744666 mImpl@var723 .@expr1073744667 mEnumerator@var767 :@expr1073744668 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var685 ) {
1079: mImpl@var723 .@expr1073744669 mEnumerator@var767 =@expr1073744670 e@var685 ;
1080: if (@expr1073744671 e@var685 ) {
1081: tokType (@expr1073744672 eEnumerator ) ; }
1082: else { if (@expr1073744673 mTokType@var721 ==@expr1073744674 eEnumerator ) {
1083: tokType (@expr1073744675 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var686 , Token * end@var687 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var688 , Token * srcEnd@var689 , Token * newLocation@var690 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var723 .@expr1073744676 mProgressValue@var768 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var691 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var723 .@expr2853 mOriginalName@var769 ?@expr1073744678 *@expr1073744679 mImpl@var723 .@expr2853 mOriginalName@var769 :@expr1073744681 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var723 .@expr2858 mValues@var742 ?@expr1073744683 *@expr1073744684 mImpl@var723 .@expr2858 mValues@var742 :@expr1073744686 TokenImpl ::@expr1073744687 mEmptyValueList@var489 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var692 ) {
1164: if (@expr1073744688 !@expr1073744689 mImpl@var723 .@expr2866 mOriginalName@var769 ) {
1165: mImpl@var723 .@expr2866 mOriginalName@var769 =@expr1073744692 new std ::@expr1073744693 string (@expr1073744694 name@var692 ) ; }
1166: else {
1167: *@expr1073744695 mImpl@var723 .@expr2866 mOriginalName@var769 =@expr1073744697 name@var692 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var693 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var694 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var695 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var723 .@expr1073744699 mValues@var742 .@expr1073744700 front (@expr1073744701 ) .@expr1073744702 intvalue@expr1073744698 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var696 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var697 , long long path@var698 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var699 , const Settings * settings@var700 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var701 , const Settings * settings@var702 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var703 , int argnr@var704 , const Settings * settings@var705 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var706 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var707 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var708 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var709 ) {
1200: if (@expr1073744703 mImpl@var723 .@expr2880 mValues@var742 ) {
1201: mImpl@var723 .@expr2880 mValues@var742 .@expr1073744706 remove_if (@expr1073744707 pred@var709 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var723 .@expr1073744708 mIndex@var770 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var710 ) {
1213: mNext@var718 =@expr1073744709 nextToken@var710 ;
1214: }
1215: void previous ( Token * previousToken@var711 ) {
1216: mPrevious@var719 =@expr1073744710 previousToken@var711 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var712 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var713 , const char * word@var714 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var715 , char c@var716 ) ;
1235:
1236: std :: string mStr@var717 ;
1237:
1238: Token * mNext@var718 ;
1239: Token * mPrevious@var719 ;
1240: Token * mLink@var720 ;
1241:
1242: enum Anonymous1 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var721 ;
1283:
1284: uint64_t mFlags@var722 ;
1285:
1286: TokenImpl * mImpl@var723 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var724 ) const {
1294: return (@expr2887 (@expr2887 mFlags@var722 &@expr1073744713 flag_@var724 ) !=@expr1073744714 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var725 , bool state_@var726 ) {
1303: mFlags@var722 =@expr1073744715 state_@var726 ?@expr1073744716 mFlags@var722 |@expr1073744717 flag_@var725 :@expr1073744718 mFlags@var722 &@expr1073744719 ~@expr1073744720 flag_@var725 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var727 , const int indent1@var728 = 0 , const int indent2@var729 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var730 ) ;
1321: void astOperand2 ( Token * tok@var731 ) ;
1322: void astParent ( Token * tok@var732 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var723 .@expr1073744721 mAstOperand1@var733 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var723 .@expr1073744722 mAstOperand1@var733 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var723 .@expr1073744723 mAstOperand2@var734 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var723 .@expr1073744724 mAstOperand2@var734 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var723 .@expr1073744725 mAstParent@var735 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var723 .@expr1073744726 mAstParent@var735 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073744727 !@expr1073744728 astParent (@expr2905 ) ) {
1344: return nullptr ; }
1345: if (@expr1073744730 this@expr2907 ==@expr1073744732 astParent (@expr2905 ) .@expr2910 astOperand1 (@expr2911 ) ) {
1346: return astParent (@expr2905 ) .@expr2913 astOperand2 (@expr2914 ) ; }
1347: else { if (@expr1073744739 this@expr2907 ==@expr1073744740 astParent (@expr2905 ) .@expr2913 astOperand2 (@expr2914 ) ) {
1348: return astParent (@expr2905 ) .@expr2910 astOperand1 (@expr2911 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073744747 !@expr1073744748 astParent (@expr2925 ) ) {
1354: return nullptr ; }
1355: if (@expr1073744750 this@expr2927 ==@expr1073744752 astParent (@expr2925 ) .@expr2930 astOperand1 (@expr2931 ) ) {
1356: return astParent (@expr2925 ) .@expr2933 astOperand2 (@expr2934 ) ; }
1357: else { if (@expr1073744759 this@expr2927 ==@expr1073744760 astParent (@expr2925 ) .@expr2933 astOperand2 (@expr2934 ) ) {
1358: return astParent (@expr2925 ) .@expr2930 astOperand1 (@expr2931 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var736 ; ret@var736 =@expr1073744767 this@expr1073744768 ;
1364: while (@expr1073744769 ret@var736 .@expr2946 mImpl@var737 .@expr2947 mAstParent@var738 ) {
1365: ret@var736 =@expr1073744772 ret@var736 .@expr2946 mImpl@var737 .@expr2947 mAstParent@var738 ; }
1366: return ret@var736 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var739 ; ret@var739 =@expr1073744775 this@expr1073744776 ;
1371: while (@expr1073744777 ret@var739 .@expr2954 mImpl@var740 .@expr2955 mAstParent@var741 ) {
1372: ret@var739 =@expr1073744780 ret@var739 .@expr2954 mImpl@var740 .@expr2955 mAstParent@var741 ; }
1373: return ret@var739 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var723 .@expr1073744783 mAstOperand1@var733 =@expr1073744784 mImpl@var723 .@expr1073744785 mAstOperand2@var734 =@expr1073744786 mImpl@var723 .@expr1073744787 mAstParent@var735 =@expr1073744788 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var723 .@expr2965 mValues@var742 ;
1393: mImpl@var723 .@expr2965 mValues@var742 =@expr1073744791 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var743 = "" ) const {
1397: std ::@expr1073744792 string ret@var744 ;
1398: if (@expr1073744793 mImpl@var723 .@expr2970 mAstOperand1@var733 ) {
1399: ret@var744 =@expr1073744795 mImpl@var723 .@expr2970 mAstOperand1@var733 .@expr1073744797 astString (@expr1073744798 sep@var743 ) ; }
1400: if (@expr1073744799 mImpl@var723 .@expr2976 mAstOperand2@var734 ) {
1401: ret@var744 +=@expr1073744801 mImpl@var723 .@expr2976 mAstOperand2@var734 .@expr1073744803 astString (@expr1073744804 sep@var743 ) ; }
1402: return ret@var744 +@expr1073744805 sep@var743 +@expr1073744806 mStr@var717 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var745 , bool xml@var746 , const std :: vector < std :: string > & fileNames@var747 , std :: ostream & out@var748 ) const ;
1412:
1413: void printValueFlow ( bool xml@var749 , std :: ostream & out@var750 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var751 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var752 ) const {
1419: mImpl@var723 .@expr1073744807 mCpp11init@var753 =@expr1073744808 cpp11init@var752 ?@expr1073744809 TokenImpl ::@expr2986 Cpp11init ::@expr1073744811 CPP11INIT :@expr1073744812 TokenImpl ::@expr2986 Cpp11init ::@expr1073744814 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var723 .@expr1073744815 mCpp11init@var753 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var771 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var772 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var773 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var774 ) ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var775 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var776 ) {
47: mSettings@var811 =@expr1073744816 settings@var776 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var811 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var813 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var814 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var777 ) ;
72:
73: void addtoken ( const std :: string & str@var778 , const int lineno@var779 , const int column@var780 , const int fileno@var781 , bool split@var782 = false ) ;
74: void addtoken ( const std :: string & str@var783 , const Token * locationTok@var784 ) ;
75:
76: void addtoken ( const Token * tok@var785 , const int lineno@var786 , const int column@var787 , const int fileno@var788 ) ;
77: void addtoken ( const Token * tok@var789 , const Token * locationTok@var790 ) ;
78: void addtoken ( const Token * tok@var791 ) ;
79:
80: static void insertTokens ( Token * dest@var792 , const Token * src@var793 , int n@var794 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var795 , const Token * first@var796 , const Token * last@var797 , bool one_line@var798 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var799 , const std :: string & file0@var800 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var801 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var802 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var808 .@expr1073744817 front@var815 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var808 .@expr1073744818 front@var815 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var808 .@expr1073744819 back@var816 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var808 .@expr1073744820 back@var816 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var809 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var803 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var804 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var805 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var806 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var807 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var808 ;
206:
207:
208: std :: vector < std :: string > mFiles@var809 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var810 ;
212:
213:
214: const Settings * mSettings@var811 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var812 ;
217:
218:
219: bool mIsC@var813 ;
220: bool mIsCpp@var814 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var817 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var818 ;
67: mutable int mVarId@var819 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var820 ) ;
73: bool hasVariable ( const std :: string & varname@var821 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var822 ) const {
75: return mVariableId@var817 .@expr1073744821 find (@expr1073744822 varname@var822 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var817 .@expr1073744823 end (@expr1073744824 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var817 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073744825 mVarId@var819 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var823 , ErrorLogger * errorLogger@var824 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var825 ) {
95: mTimerResults@var945 =@expr1073744826 tr@var825 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var923 .@expr1073744827 isC (@expr1073744828 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var923 .@expr1073744829 isCPP (@expr1073744830 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var826 , bool * unknown@var827 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var828 , const std :: string & FileName@var829 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var830 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var831 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var832 ,
142: const char FileName@var833 [ ] ,
143: const std :: string & configuration@var834 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var835 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var836 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var837 , const Token * end@var838 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var839 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var840 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var841 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var842 , const Token * const tokEnd@var843 , const bool only_k_r_fpar@var844 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var845 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var846 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var847 , bool commandWithCondition@var848 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var849 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var850 , Token * * _tok2@var851 , Token * * _tok3@var852 , std :: string & value@var853 , int & valueVarId@var854 , bool & valueIsPointer@var855 , bool floatvar@var856 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var857 , Token * tok3@var858 , int varid@var859 , const std :: string & structname@var860 , std :: string & value@var861 , int valueVarId@var862 , bool valueIsPointer@var863 , const Token * const valueToken@var864 , int indentlevel@var865 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var866 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var867 , const std :: string & endsWith@var868 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var869 , const std :: string & endsWith@var870 , bool cpp@var871 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var872 ) {
585: mPreprocessor@var946 =@expr1073744831 preprocessor@var872 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var946 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var873 , const Token * end@var874 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var875 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var876 , const std :: string & code@var877 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var878 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var879 , const std :: string & what@var880 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var881 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var882 , const std :: string & msg@var883 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var884 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var885 , const std :: string & macroName@var886 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var887 , const Token * end@var888 , bool allowSemicolon@var889 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var890 , const Severity :: SeverityType severity@var891 , const std :: string & id@var892 , const std :: string & msg@var893 , bool inconclusive@var894 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var895 , Severity :: SeverityType severity@var896 , const std :: string & id@var897 , const std :: string & msg@var898 , bool inconclusive@var899 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var900 , const Token * name@var901 , const Token * typeDef@var902 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var903 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var904 ,
821: const VariableMap & variableMap@var905 ,
822: const int scopeStartVarId@var906 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var907 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var908 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var909 ,
827: int * varId@var910 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var911 ,
830: Token * const startToken@var912 ,
831: const Token * const endToken@var913 ,
832: const std :: map < std :: string , int > & varlist@var914 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var915 ,
834: int * varId_@var916 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var917 ) ;
849:
850: bool operatorEnd ( const Token * tok@var918 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var944 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var919 ) {
861: mSettings@var930 =@expr1073744832 settings@var919 ;
862: list@var923 .@expr1073744833 setSettings (@expr1073744834 settings@var919 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var932 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var920 ) const ;
877:
878: void dump ( std :: ostream & out@var921 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var922 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var942 ;
888: }
889:
|
892:
893: TokenList list@var923 ;
894:
895: const Token * tokens ( ) const {
896: return list@var923 .@expr1073744835 front (@expr1073744836 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var924 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var925 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var926 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var927 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var930 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var928 , bool inOperator@var929 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073744837 mVarId@var942 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var930 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var931 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var932 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var933 ;
973:
974:
975:
976: std :: string mConfiguration@var934 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var935 ;
980:
981: struct TypedefInfo {
982: std :: string name@var936 ;
983: std :: string filename@var937 ;
984: int lineNumber@var938 ;
985: int column@var939 ;
986: bool used@var940 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var941 ;
989:
990:
991: int mVarId@var942 ;
992:
993:
994: int mUnnamedCount@var943 ;
995:
|
999:
1000: bool mCodeWithTemplates@var944 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var945 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var946 ;
1013: } ;

##file cppcheck-2.8/lib/checkpostfixoperator.h

1:
|
30:
31: class ErrorLogger ;
32: class Settings ;
33: class Token ;
34:
|
41:
42: class CheckPostfixOperator : public Check {
43: public:
44:
45: CheckPostfixOperator ( ) : Check ( myName ( ) ) { }
46:
47:
48: CheckPostfixOperator ( const Tokenizer * tokenizer@var947 , const Settings * settings@var948 , ErrorLogger * errorLogger@var949 )
49: : Check ( myName ( ) , tokenizer@var947 , settings@var948 , errorLogger@var949 ) { }
50:
51: void runChecks ( const Tokenizer * tokenizer@var950 , const Settings * settings@var951 , ErrorLogger * errorLogger@var952 ) override {
52: if (@expr1073744838 tokenizer@var950 .@expr1073744839 isC (@expr1073744840 ) ) {
53: return ; }
54:
55: CheckPostfixOperator checkPostfixOperator@var953 (@expr1073744841 tokenizer@var950 , settings@var951 , errorLogger@var952 ) ;
56: checkPostfixOperator@var953 .@expr1073744842 postfixOperator (@expr1073744843 ) ;
57: }
58:
59:
60: void postfixOperator ( ) ;
61:
62: private:
63:
64: void postfixOperatorError ( const Token * tok@var954 ) ;
65:
66: void getErrorMessages ( ErrorLogger * errorLogger@var955 , const Settings * settings@var956 ) const override {
67: CheckPostfixOperator c@var957 (@expr1073744844 nullptr , settings@var956 , errorLogger@var955 ) ;
68: c@var957 .@expr1073744845 postfixOperatorError (@expr1073744846 nullptr ) ;
69: }
70:
71: static std :: string myName ( ) {
72: return "Using postfix operators" ;
73: }
74:
75: std :: string classInfo ( ) const override {
76: return "Warn if using postfix operators ++ or -- rather than prefix operator\n" ;
77: }
78: } ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var958 ) {
44: if (@expr1073744847 bit@var958 >=@expr1073744848 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073744849 (@expr1073744850 1LL <<@expr1073744851 (@expr1073744852 bit@var958 -@expr1073744853 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var959 ) {
50: if (@expr1073744854 bit@var959 >=@expr1073744855 64 ) {
51: return (@expr3032 ~@expr1073744857 0ULL ) >>@expr1073744858 1 ; }
52: return (@expr3032 1LL <<@expr1073744860 (@expr3032 bit@var959 -@expr1073744862 1 ) ) -@expr1073744863 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var960 ) const {
59: return value@var960 >=@expr1073744864 min_value (@expr1073744865 int_bit@var970 ) &&@expr1073744866 value@var960 <=@expr1073744867 max_value (@expr1073744868 int_bit@var970 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var961 ) const {
63: unsigned long long intMax@var962 ; intMax@var962 =@expr1073744869 max_value (@expr1073744870 int_bit@var970 ) ;
64: return value@var961 <=@expr1073744871 intMax@var962 ;
65: }
66:
67: bool isLongValue ( long long value@var963 ) const {
68: return value@var963 >=@expr1073744872 min_value (@expr1073744873 long_bit@var971 ) &&@expr1073744874 value@var963 <=@expr1073744875 max_value (@expr1073744876 long_bit@var971 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var964 ) const {
72: unsigned long long longMax@var965 ; longMax@var965 =@expr1073744877 max_value (@expr1073744878 long_bit@var971 ) ;
73: return value@var964 <=@expr1073744879 longMax@var965 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var966 ) const {
77: unsigned long long longLongMax@var967 ; longLongMax@var967 =@expr1073744880 max_value (@expr1073744881 long_long_bit@var972 ) ;
78: return value@var966 <=@expr1073744882 longLongMax@var967 ;
79: }
80:
81: int char_bit@var968 ;
82: int short_bit@var969 ;
83: int int_bit@var970 ;
84: int long_bit@var971 ;
85: int long_long_bit@var972 ;
86:
87:
88: int sizeof_bool@var973 ;
89: int sizeof_short@var974 ;
90: int sizeof_int@var975 ;
91: int sizeof_long@var976 ;
92: int sizeof_long_long@var977 ;
93: int sizeof_float@var978 ;
94: int sizeof_double@var979 ;
95: int sizeof_long_double@var980 ;
96: int sizeof_wchar_t@var981 ;
97: int sizeof_size_t@var982 ;
98: int sizeof_pointer@var983 ;
99:
100: char defaultSign@var984 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var985 ;
115:
116:
117: bool platform ( PlatformType type@var986 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var987 [ ] , const std :: string & filename@var988 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var989 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var985 ==@expr1073744883 Win32A ||@expr1073744884
136: platformType@var985 ==@expr1073744885 Win32W ||@expr1073744886
137: platformType@var985 ==@expr1073744887 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073744888 platformType@var985 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var990 ) {
145: switch (@expr1073744889 pt@var990 ) {
146: case Unspecified :@expr3066 ;
147: return "Unspecified" ;
148: case Native :@expr3066 ;
149: return "Native" ;
150: case Win32A :@expr3066 ;
151: return "win32A" ;
152: case Win32W :@expr3066 ;
153: return "win32W" ;
154: case Win64 :@expr3066 ;
155: return "win64" ;
156: case Unix32 :@expr3066 ;
157: return "unix32" ;
158: case Unix64 :@expr3066 ;
159: return "unix64" ;
160: case PlatformFile :@expr3066 ;
161: return "platformFile" ;
162: default :@expr3066 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073744899 char_bit@var968 +@expr1073744900 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073744901 char_bit@var968 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073744902 char_bit@var968 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var991 , const std :: string & rhs@var992 ) const {
41: return caseInsensitiveStringCompare (@expr1073744903 lhs@var991 , rhs@var992 ) <@expr1073744904 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var1000 ( cppcheck :: Platform :: Unspecified ) , msc@var1001 ( false ) , useMfc@var1002 ( false ) { }
67: std :: string cfg@var993 ;
68: std :: string filename@var994 ;
69: std :: string defines@var995 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var995 +@expr1073744905 (@expr1073744906 msc@var1001 ?@expr1073744907 ";_MSC_VER=1900" :@expr1073744908 "" ) +@expr1073744909 (@expr1073744910 useMfc@var1002 ?@expr1073744911 ";__AFXWIN_H__=1" :@expr1073744912 "" ) ;
72: }
73: std :: set < std :: string > undefs@var996 ;
74: std :: list < std :: string > includePaths@var997 ;
75: std :: list < std :: string > systemIncludePaths@var998 ;
76: std :: string standard@var999 ;
77: cppcheck :: Platform :: PlatformType platformType@var1000 ;
78: bool msc@var1001 ;
79: bool useMfc@var1002 ;
80:
81: void parseCommand ( std :: string command@var1003 ) ;
82: void setDefines ( std :: string defs@var1004 ) ;
83: void setIncludePaths ( const std :: string & basepath@var1005 , const std :: list < std :: string > & in@var1006 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1007 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var1008 ;
86: Type projectType@var1009 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var1010 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous2 {
96: std :: string analyzeAllVsConfigs@var1011 ;
97: std :: vector < std :: string > pathNames@var1012 ;
98: std :: list < std :: string > libraries@var1013 ;
99: std :: list < std :: string > excludedPaths@var1014 ;
100: std :: list < std :: string > checkVsConfigs@var1015 ;
101: std :: string projectFile@var1016 ;
102: std :: string platform@var1017 ;
103: } ; struct Anonymous2 guiProject@var1018 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var1019 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var1020 ) ;
107:
108: Type import ( const std :: string & filename@var1021 , Settings * settings@var1022 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var1023 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var1024 , Settings * settings@var1025 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var1026 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var1027 , const std :: string & path@var1028 , const std :: vector < std :: string > & fileFilters@var1029 ) ;
115: bool importVcxproj ( const std :: string & filename@var1030 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var1031 , const std :: string & additionalIncludeDirectories@var1032 , const std :: vector < std :: string > & fileFilters@var1033 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var1034 ) ;
117:
118: static void printError ( const std :: string & message@var1035 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var1036 ) ;
121:
122: std :: string mPath@var1037 ;
123: std :: set < std :: string > mAllVSConfigs@var1038 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var1039 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var1040 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var1041 [ 2 ] = "1" ;
131: const char BuildDirElementName@var1042 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var1043 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var1044 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var1045 [ 7 ] = "parser" ;
135: const char BugHunting@var1046 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var1047 [ 11 ] = "includedir" ;
137: const char DirElementName@var1048 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var1049 [ 5 ] = "name" ;
139: const char DefinesElementName@var1050 [ 8 ] = "defines" ;
140: const char DefineName@var1051 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var1052 [ 5 ] = "name" ;
142: const char UndefinesElementName@var1053 [ 10 ] = "undefines" ;
143: const char UndefineName@var1054 [ 9 ] = "undefine" ;
144: const char PathsElementName@var1055 [ 6 ] = "paths" ;
145: const char PathName@var1056 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var1057 [ 5 ] = "name" ;
147: const char RootPathName@var1058 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var1059 [ 5 ] = "name" ;
149: const char IgnoreElementName@var1060 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var1061 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var1062 [ 5 ] = "name" ;
152: const char ExcludeElementName@var1063 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var1064 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var1065 [ 5 ] = "name" ;
155: const char FunctionContracts@var1066 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var1067 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var1068 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var1069 [ 8 ] = "library" ;
159: const char PlatformElementName@var1070 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var1071 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var1072 [ 12 ] = "suppression" ;
162: const char AddonElementName@var1073 [ 6 ] = "addon" ;
163: const char AddonsElementName@var1074 [ 7 ] = "addons" ;
164: const char ToolElementName@var1075 [ 5 ] = "tool" ;
165: const char ToolsElementName@var1076 [ 6 ] = "tools" ;
166: const char TagsElementName@var1077 [ 5 ] = "tags" ;
167: const char TagElementName@var1078 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var1079 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var1080 [ 4 ] = "tag" ;
170: const char WarningElementName@var1081 [ 8 ] = "warning" ;
171: const char HashAttributeName@var1082 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var1083 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var1084 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var1085 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var1086 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var1087 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var1088 [ 11 ] = "clang-tidy" ;
178: const char Name@var1089 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var1090 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var1091 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var1092 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var1093 ;
42:
43:
44: std :: string stdValue@var1094 ;
45:
46:
47: Standards ( ) : c@var1092 ( CLatest ) , cpp@var1093 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var1095 ) {
50: stdValue@var1094 =@expr1073744913 str@var1095 ;
51: if (@expr1073744914 str@var1095 ==@expr1073744915 "c89" ||@expr1073744916 str@var1095 ==@expr1073744917 "C89" ) {
52: c@var1092 =@expr1073744918 C89 ;
53: return true ;
54: }
55: if (@expr1073744919 str@var1095 ==@expr1073744920 "c99" ||@expr1073744921 str@var1095 ==@expr1073744922 "C99" ) {
56: c@var1092 =@expr1073744923 C99 ;
57: return true ;
58: }
59: if (@expr1073744924 str@var1095 ==@expr1073744925 "c11" ||@expr1073744926 str@var1095 ==@expr1073744927 "C11" ) {
60: c@var1092 =@expr1073744928 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744929 c@var1092 ) {
67: case C89 :@expr3106 ;
68: return "c89" ;
69: case C99 :@expr3106 ;
70: return "c99" ;
71: case C11 :@expr3106 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var1096 ) {
77: if (@expr1073744933 std@var1096 ==@expr1073744934 "c89" ) {
78: return Standards ::@expr1073744935 C89 ;
79: }
80: if (@expr1073744936 std@var1096 ==@expr1073744937 "c99" ) {
81: return Standards ::@expr1073744938 C99 ;
82: }
83: if (@expr1073744939 std@var1096 ==@expr1073744940 "c11" ) {
84: return Standards ::@expr1073744941 C11 ;
85: }
86: return Standards ::@expr1073744942 CLatest ;
87: }
88: bool setCPP ( std :: string str@var1097 ) {
89: stdValue@var1094 =@expr1073744943 str@var1097 ;
90: strTolower (@expr1073744944 str@var1097 ) ;
91: cpp@var1093 =@expr1073744945 getCPP (@expr1073744946 str@var1097 ) ;
92: return !@expr1073744947 stdValue@var1094 .@expr1073744948 empty (@expr1073744949 ) &&@expr1073744950 str@var1097 ==@expr1073744951 getCPP (@expr1073744952 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744953 cpp@var1093 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var1098 ) {
98: switch (@expr1073744954 std@var1098 ) {
99: case CPP03 :@expr3131 ;
100: return "c++03" ;
101: case CPP11 :@expr3131 ;
102: return "c++11" ;
103: case CPP14 :@expr3131 ;
104: return "c++14" ;
105: case CPP17 :@expr3131 ;
106: return "c++17" ;
107: case CPP20 :@expr3131 ;
108: return "c++20" ;
109: case CPP23 :@expr3131 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var1099 ) {
115: if (@expr1073744961 std@var1099 ==@expr1073744962 "c++03" ) {
116: return Standards ::@expr1073744963 CPP03 ;
117: }
118: if (@expr1073744964 std@var1099 ==@expr1073744965 "c++11" ) {
119: return Standards ::@expr1073744966 CPP11 ;
120: }
121: if (@expr1073744967 std@var1099 ==@expr1073744968 "c++14" ) {
122: return Standards ::@expr1073744969 CPP14 ;
123: }
124: if (@expr1073744970 std@var1099 ==@expr1073744971 "c++17" ) {
125: return Standards ::@expr1073744972 CPP17 ;
126: }
127: if (@expr1073744973 std@var1099 ==@expr1073744974 "c++20" ) {
128: return Standards ::@expr1073744975 CPP20 ;
129: }
130: if (@expr1073744976 std@var1099 ==@expr1073744977 "c++23" ) {
131: return Standards ::@expr1073744978 CPP23 ;
132: }
133: return Standards ::@expr1073744979 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var1103 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var1100 ) : errorcode@var1103 ( e@var1100 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var1101 , T && r@var1102 ) : errorcode@var1103 ( e@var1101 ) , reason@var1104 ( r@var1102 ) { }
66: ErrorCode errorcode@var1103 ;
67: std :: string reason@var1104 ;
68: } ;
69:
70: Error load ( const char exename@var1105 [ ] , const char path@var1106 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var1107 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var1108 [ ] , unsigned long len@var1109 ) ;
75:
76: struct AllocFunc {
77: int groupId@var1110 ;
78: int arg@var1111 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var1112 ;
81: int bufferSizeArg1@var1113 ;
82: int bufferSizeArg2@var1114 ;
83: int reallocArg@var1115 ;
84: bool initData@var1116 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var1117 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var1118 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var1119 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var1120 , int arg@var1121 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var1122 , int arg@var1123 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var1124 , int arg@var1125 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var1126 [ ] ) const {
107: return getAllocDealloc (@expr1073744980 mAlloc@var1392 , name@var1126 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var1127 [ ] ) const {
112: return getAllocDealloc (@expr1073744981 mDealloc@var1393 , name@var1127 ) ;
113: }
114:
115:
116: int allocId ( const char name@var1128 [ ] ) const {
117: const AllocFunc * af@var1129 ; af@var1129 =@expr1073744982 getAllocDealloc (@expr1073744983 mAlloc@var1392 , name@var1128 ) ;
118: return af@var1129 ?@expr1073744984 af@var1129 .@expr1073744985 groupId@var1130 :@expr1073744986 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var1131 [ ] ) const {
123: const AllocFunc * af@var1132 ; af@var1132 =@expr1073744987 getAllocDealloc (@expr1073744988 mDealloc@var1393 , name@var1131 ) ;
124: return af@var1132 ?@expr1073744989 af@var1132 .@expr1073744990 groupId@var1133 :@expr1073744991 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var1134 , int id@var1135 , int arg@var1136 ) {
129: mAlloc@var1392 [@expr3168 functionname@var1134 ] .@expr1073744993 groupId@var1976 =@expr1073744994 id@var1135 ;
130: mAlloc@var1392 [@expr3168 functionname@var1134 ] .@expr1073744996 arg@var1977 =@expr1073744997 arg@var1136 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var1137 , int id@var1138 , int arg@var1139 ) {
134: mDealloc@var1393 [@expr3174 functionname@var1137 ] .@expr1073744999 groupId@var1978 =@expr1073745000 id@var1138 ;
135: mDealloc@var1393 [@expr3174 functionname@var1137 ] .@expr1073745002 arg@var1979 =@expr1073745003 arg@var1139 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var1140 , int id@var1141 , int arg@var1142 , int reallocArg@var1143 = 1 ) {
139: mRealloc@var1394 [@expr3180 functionname@var1140 ] .@expr1073745005 groupId@var1980 =@expr1073745006 id@var1141 ;
140: mRealloc@var1394 [@expr3180 functionname@var1140 ] .@expr1073745008 arg@var1981 =@expr1073745009 arg@var1142 ;
141: mRealloc@var1394 [@expr3180 functionname@var1140 ] .@expr1073745011 reallocArg@var1982 =@expr1073745012 reallocArg@var1143 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var1144 , bool noreturn@var1145 ) {
146: mNoReturn@var1395 [@expr1073745013 funcname@var1144 ] =@expr1073745014 noreturn@var1145 ?@expr1073745015 FalseTrueMaybe ::@expr1073745016 True :@expr1073745017 FalseTrueMaybe ::@expr1073745018 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var1146 ) ;
150:
151:
152: static bool ismemory ( const int id@var1147 ) {
153: return (@expr3195 (@expr3195 id@var1147 >@expr1073745021 0 ) &&@expr1073745022 (@expr3195 (@expr3195 id@var1147 &@expr1073745025 1 ) ==@expr1073745026 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var1148 ) {
156: return (@expr3203 (@expr3203 func@var1148 .@expr3205 groupId@var1149 >@expr1073745030 0 ) &&@expr1073745031 (@expr3203 (@expr3203 func@var1148 .@expr3205 groupId@var1149 &@expr1073745035 1 ) ==@expr1073745036 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var1150 ) {
161: return (@expr3213 (@expr3213 id@var1150 >@expr1073745039 0 ) &&@expr1073745040 (@expr3213 (@expr3213 id@var1150 &@expr1073745043 1 ) ==@expr1073745044 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var1151 ) {
164: return (@expr3221 (@expr3221 func@var1151 .@expr3223 groupId@var1152 >@expr1073745048 0 ) &&@expr1073745049 (@expr3221 (@expr3221 func@var1151 .@expr3223 groupId@var1152 &@expr1073745053 1 ) ==@expr1073745054 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var1153 ) const ;
168: int formatstr_argno ( const Token * ftok@var1154 ) const ;
169: bool formatstr_scan ( const Token * ftok@var1155 ) const ;
170: bool formatstr_secure ( const Token * ftok@var1156 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var1157 ;
174: int ptr2Arg@var1158 ;
175: int sizeArg@var1159 ;
176: int strlenArg@var1160 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var1161 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var1162 ;
182: Standards standards@var1163 ;
183: Severity :: SeverityType severity@var1164 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var1165 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var1166 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var1167 ) const ;
191: bool matchArguments ( const Token * ftok@var1168 , const std :: string & functionName@var1169 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var1170 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var1171 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var1172 ) const ;
198: int returnValueContainer ( const Token * ftok@var1173 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var1174 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var1175 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var1176 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var1177 , std :: string * unknownFunc@var1178 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var1188 ( -1 ) ,
210: size_templateArgNo@var1190 ( -1 ) ,
211: arrayLike_indexOp@var1191 ( false ) ,
212: stdStringLike@var1192 ( false ) ,
213: stdAssociativeLike@var1193 ( false ) ,
214: opLessAllowed@var1194 ( true ) ,
215: hasInitializerListConstructor@var1195 ( false ) ,
216: unstableErase@var1196 ( false ) ,
217: unstableInsert@var1197 ( false ) ,
218: view@var1198 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var1179 ;
248: Yield yield@var1180 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var1181 ;
252: int templateParameter@var1182 ;
253: } ;
254: std :: string startPattern@var1183 ; std :: string startPattern2@var1184 ; std :: string endPattern@var1185 ; std :: string itEndPattern@var1186 ;
255: std :: map < std :: string , Function > functions@var1187 ;
256: int type_templateArgNo@var1188 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var1189 ;
258: int size_templateArgNo@var1190 ;
259: bool arrayLike_indexOp@var1191 ;
260: bool stdStringLike@var1192 ;
261: bool stdAssociativeLike@var1193 ;
262: bool opLessAllowed@var1194 ;
263: bool hasInitializerListConstructor@var1195 ;
264: bool unstableErase@var1196 ;
265: bool unstableInsert@var1197 ;
266: bool view@var1198 ;
267:
268: Action getAction ( const std :: string & function@var1199 ) const {
269: const std ::@expr1073745055 map < std ::@expr1073745056 string , Function > ::@expr1073745057 const_iterator i@var1200 =@expr1073745058 functions@var1187 .@expr1073745059 find (@expr1073745060 function@var1199 ) ;
270: if (@expr1073745061 i@var1200 !=@expr1073745062 functions@var1187 .@expr1073745063 end (@expr1073745064 ) ) {
271: return i@var1200 .@expr1073745065 second@var1201 .@expr1073745066 action@var1202 ; }
272: return Action ::@expr1073745067 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var1203 ) const {
276: const std ::@expr1073745068 map < std ::@expr1073745069 string , Function > ::@expr1073745070 const_iterator i@var1204 =@expr1073745071 functions@var1187 .@expr1073745072 find (@expr1073745073 function@var1203 ) ;
277: if (@expr1073745074 i@var1204 !=@expr1073745075 functions@var1187 .@expr1073745076 end (@expr1073745077 ) ) {
278: return i@var1204 .@expr1073745078 second@var1205 .@expr1073745079 yield@var1206 ; }
279: return Yield ::@expr1073745080 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var1207 ) ;
283: static Action actionFrom ( const std :: string & actionName@var1208 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var1209 ;
286: const Container * detectContainer ( const Token * typeStart@var1210 , bool iterator@var1211 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var1212 , bool * isIterator@var1213 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var1214 ( false ) ,
293: notnull@var1215 ( false ) ,
294: notuninit@var1216 ( -1 ) ,
295: formatstr@var1217 ( false ) ,
296: strz@var1218 ( false ) ,
297: optional@var1219 ( false ) ,
298: variadic@var1220 ( false ) ,
299: iteratorInfo@var1226 ( ) ,
300: direction@var1234 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var1214 ;
303: bool notnull@var1215 ;
304: int notuninit@var1216 ;
305: bool formatstr@var1217 ;
306: bool strz@var1218 ;
307: bool optional@var1219 ;
308: bool variadic@var1220 ;
309: std :: string valid@var1221 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var1222 ( 0 ) , it@var1223 ( false ) , first@var1224 ( false ) , last@var1225 ( false ) { }
314:
315: int container@var1222 ;
316: bool it@var1223 ;
317: bool first@var1224 ;
318: bool last@var1225 ;
319: } ;
320: IteratorInfo iteratorInfo@var1226 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var1227 , int a@var1228 ) : type@var1229 ( t@var1227 ) , arg@var1230 ( a@var1228 ) , arg2@var1231 ( 0 ) , value@var1232 ( 0 ) { }
326: Type type@var1229 ;
327: int arg@var1230 ;
328: int arg2@var1231 ;
329: long long value@var1232 ;
330: } ;
331: std :: vector < MinSize > minsizes@var1233 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var1234 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var1235 ;
344: bool use@var1236 ;
345: bool leakignore@var1237 ;
346: bool isconst@var1238 ;
347: bool ispure@var1239 ;
348: UseRetValType useretval@var1240 ;
349: bool ignore@var1241 ;
350: bool formatstr@var1242 ;
351: bool formatstr_scan@var1243 ;
352: bool formatstr_secure@var1244 ;
353: Container :: Action containerAction@var1245 ;
354: Container :: Yield containerYield@var1246 ;
355: Function ( )
356: : use@var1236 ( false ) ,
357: leakignore@var1237 ( false ) ,
358: isconst@var1238 ( false ) ,
359: ispure@var1239 ( false ) ,
360: useretval@var1240 ( UseRetValType :: NONE ) ,
361: ignore@var1241 ( false ) ,
362: formatstr@var1242 ( false ) ,
363: formatstr_scan@var1243 ( false ) ,
364: formatstr_secure@var1244 ( false ) ,
365: containerAction@var1245 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var1246 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var1247 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var1248 ;
372: bool isUse ( const std :: string & functionName@var1249 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var1250 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var1251 , bool pure@var1252 ) const ;
375: bool isFunctionConst ( const Token * ftok@var1253 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var1254 , int argnr@var1255 ) const {
378: const ArgumentChecks * arg@var1256 ; arg@var1256 =@expr1073745081 getarg (@expr1073745082 ftok@var1254 , argnr@var1255 ) ;
379: return arg@var1256 &&@expr1073745083 arg@var1256 .@expr1073745084 notbool@var1257 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var1258 , int argnr@var1259 ) const ;
383: bool isuninitargbad ( const Token * ftok@var1260 , int argnr@var1261 , int indirect@var1262 = 0 , bool * hasIndirect@var1263 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var1264 , int argnr@var1265 ) const {
386: const ArgumentChecks * arg@var1266 ; arg@var1266 =@expr1073745085 getarg (@expr1073745086 ftok@var1264 , argnr@var1265 ) ;
387: return arg@var1266 &&@expr1073745087 arg@var1266 .@expr1073745088 formatstr@var1267 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var1268 , int argnr@var1269 ) const {
391: const ArgumentChecks * arg@var1270 ; arg@var1270 =@expr1073745089 getarg (@expr1073745090 ftok@var1268 , argnr@var1269 ) ;
392: return arg@var1270 &&@expr1073745091 arg@var1270 .@expr1073745092 strz@var1271 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var1272 , int argnr@var1273 , const long long argvalue@var1274 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var1275 , int argnr@var1276 , double argvalue@var1277 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var1278 , int argnr@var1279 ) const {
399: const ArgumentChecks * arg@var1280 ; arg@var1280 =@expr1073745093 getarg (@expr1073745094 ftok@var1278 , argnr@var1279 ) ;
400: return arg@var1280 ?@expr1073745095 arg@var1280 .@expr1073745096 valid@var1281 :@expr1073745097 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var1282 ;
405: std :: string op1@var1283 ;
406: std :: string op2@var1284 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073745098 isInt (@expr1073745099 op1@var1283 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var1285 , int argnr@var1286 ) const {
413: const ArgumentChecks * arg@var1287 ; arg@var1287 =@expr1073745100 getarg (@expr1073745101 ftok@var1285 , argnr@var1286 ) ;
414: return arg@var1287 &&@expr1073745102 arg@var1287 .@expr3279 iteratorInfo@var1288 .@expr1073745104 it@var1289 ?@expr1073745105 &@expr1073745106 arg@var1287 .@expr3279 iteratorInfo@var1288 :@expr1073745108 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var1290 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var1291 , int argnr@var1292 ) const {
420: const ArgumentChecks * arg@var1293 ; arg@var1293 =@expr1073745109 getarg (@expr1073745110 ftok@var1291 , argnr@var1292 ) ;
421: return arg@var1293 ?@expr1073745111 &@expr1073745112 arg@var1293 .@expr1073745113 minsizes@var1294 :@expr1073745114 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var1295 , int argnr@var1296 ) const ;
425:
426: bool markupFile ( const std :: string & path@var1297 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var1298 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var1402 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var1299 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var1300 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var1301 , const std :: string & token@var1302 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var1303 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var1304 ) const ;
443: const std :: string & blockend ( const std :: string & file@var1305 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var1306 , const std :: string & keyword@var1307 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var1308 ) const {
448: return mExporters@var1405 .@expr1073745115 find (@expr1073745116 prefix@var1308 ) !=@expr1073745117 mExporters@var1405 .@expr1073745118 end (@expr1073745119 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var1309 , const std :: string & token@var1310 ) const {
452: const std ::@expr1073745120 map < std ::@expr1073745121 string , ExportedFunctions > ::@expr1073745122 const_iterator it@var1311 =@expr1073745123 mExporters@var1405 .@expr1073745124 find (@expr1073745125 prefix@var1309 ) ;
453: return (@expr1073745126 it@var1311 !=@expr1073745127 mExporters@var1405 .@expr1073745128 end (@expr1073745129 ) &&@expr1073745130 it@var1311 .@expr1073745131 second@var1312 .@expr1073745132 isPrefix (@expr1073745133 token@var1310 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var1313 , const std :: string & token@var1314 ) const {
457: const std ::@expr1073745134 map < std ::@expr1073745135 string , ExportedFunctions > ::@expr1073745136 const_iterator it@var1315 =@expr1073745137 mExporters@var1405 .@expr1073745138 find (@expr1073745139 prefix@var1313 ) ;
458: return (@expr1073745140 it@var1315 !=@expr1073745141 mExporters@var1405 .@expr1073745142 end (@expr1073745143 ) &&@expr1073745144 it@var1315 .@expr1073745145 second@var1316 .@expr1073745146 isSuffix (@expr1073745147 token@var1314 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var1317 , const std :: string & importer@var1318 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var1319 , Container :: Yield yield@var1320 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var1321 , Container :: Action action@var1322 ) const ;
465:
466: bool isreflection ( const std :: string & token@var1323 ) const {
467: return mReflection@var1407 .@expr1073745148 find (@expr1073745149 token@var1323 ) !=@expr1073745150 mReflection@var1407 .@expr1073745151 end (@expr1073745152 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var1324 ) const {
471: const std ::@expr1073745153 map < std ::@expr1073745154 string , int > ::@expr1073745155 const_iterator it@var1325 =@expr1073745156 mReflection@var1407 .@expr1073745157 find (@expr1073745158 token@var1324 ) ;
472: if (@expr1073745159 it@var1325 !=@expr1073745160 mReflection@var1407 .@expr1073745161 end (@expr1073745162 ) ) {
473: return it@var1325 .@expr1073745163 second@var1326 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var1327 ;
478:
479: struct SmartPointer {
480: std :: string name@var1328 ; name@var1328 = "" ;
481: bool unique@var1329 ; unique@var1329 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var1330 ;
485: bool isSmartPointer ( const Token * tok@var1331 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var1332 ) const ;
487:
488: struct PodType {
489: unsigned int size@var1333 ;
490: char sign@var1334 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var1335 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var1336 ) const {
494: const std ::@expr1073745164 unordered_map < std ::@expr1073745165 string , PodType > ::@expr1073745166 const_iterator it@var1337 =@expr1073745167 mPodTypes@var1408 .@expr1073745168 find (@expr1073745169 name@var1336 ) ;
495: return (@expr3346 it@var1337 !=@expr1073745171 mPodTypes@var1408 .@expr1073745172 end (@expr1073745173 ) ) ?@expr1073745174 &@expr1073745175 (@expr3346 it@var1337 .@expr1073745177 second@var1338 ) :@expr1073745178 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var1349 ( false )
501: , mUnsigned@var1350 ( false )
502: , mLong@var1351 ( false )
503: , mPointer@var1352 ( false )
504: , mPtrPtr@var1353 ( false )
505: , mConstPtr@var1354 ( false ) { }
506: bool operator== ( const PlatformType & type@var1339 ) const {
507: return (@expr1073745179 mSigned@var1349 ==@expr1073745180 type@var1339 .@expr1073745181 mSigned@var1340 &&@expr1073745182
508: mUnsigned@var1350 ==@expr1073745183 type@var1339 .@expr1073745184 mUnsigned@var1341 &&@expr1073745185
509: mLong@var1351 ==@expr1073745186 type@var1339 .@expr1073745187 mLong@var1342 &&@expr1073745188
510: mPointer@var1352 ==@expr1073745189 type@var1339 .@expr1073745190 mPointer@var1343 &&@expr1073745191
511: mPtrPtr@var1353 ==@expr1073745192 type@var1339 .@expr1073745193 mPtrPtr@var1344 &&@expr1073745194
512: mConstPtr@var1354 ==@expr1073745195 type@var1339 .@expr1073745196 mConstPtr@var1345 &&@expr1073745197
513: mType@var1348 ==@expr1073745198 type@var1339 .@expr1073745199 mType@var1346 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var1347 ) const {
516: return !@expr1073745200 (@expr1073745201 *@expr1073745202 this@expr1073745203 ==@expr1073745204 type@var1347 ) ;
517: }
518: std :: string mType@var1348 ;
519: bool mSigned@var1349 ;
520: bool mUnsigned@var1350 ;
521: bool mLong@var1351 ;
522: bool mPointer@var1352 ;
523: bool mPtrPtr@var1353 ;
524: bool mConstPtr@var1354 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var1355 ) const {
529: const std ::@expr1073745205 map < std ::@expr1073745206 string , PlatformType > ::@expr1073745207 const_iterator it@var1356 =@expr1073745208 mPlatformTypes@var1358 .@expr1073745209 find (@expr1073745210 name@var1355 ) ;
530: return (@expr3387 it@var1356 !=@expr1073745212 mPlatformTypes@var1358 .@expr1073745213 end (@expr1073745214 ) ) ?@expr1073745215 &@expr1073745216 (@expr3387 it@var1356 .@expr1073745218 second@var1357 ) :@expr1073745219 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var1358 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var1359 , const std :: string & platform@var1360 ) const {
536: const std ::@expr1073745220 map < std ::@expr3397 string , Platform > ::@expr1073745222 const_iterator it@var1361 =@expr1073745223 mPlatforms@var1410 .@expr1073745224 find (@expr1073745225 platform@var1360 ) ;
537: if (@expr1073745226 it@var1361 !=@expr1073745227 mPlatforms@var1410 .@expr1073745228 end (@expr1073745229 ) ) {
538: const PlatformType * const type@var1362 ; type@var1362 =@expr1073745230 it@var1361 .@expr1073745231 second@var1363 .@expr1073745232 platform_type (@expr1073745233 name@var1359 ) ;
539: if (@expr1073745234 type@var1362 ) {
540: return type@var1362 ; }
541: }
542:
543: const std ::@expr1073745235 map < std ::@expr3397 string , PlatformType > ::@expr1073745237 const_iterator it2@var1364 =@expr1073745238 mPlatformTypes@var1409 .@expr1073745239 find (@expr1073745240 name@var1359 ) ;
544: return (@expr3417 it2@var1364 !=@expr1073745242 mPlatformTypes@var1409 .@expr1073745243 end (@expr1073745244 ) ) ?@expr1073745245 &@expr1073745246 (@expr3417 it2@var1364 .@expr1073745248 second@var1365 ) :@expr1073745249 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var1366 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var1367 , Library :: Container :: Yield y@var1368 , const std :: string & fallback@var1369 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var1370 , const std :: string & typeName@var1371 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var1372 , const std :: string & name@var1373 , std :: set < std :: string > & unknown_elements@var1374 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var1375 ) {
565: mPrefixes@var1379 .@expr1073745250 insert (@expr1073745251 prefix@var1375 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var1376 ) {
568: mSuffixes@var1380 .@expr1073745252 insert (@expr1073745253 suffix@var1376 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var1377 ) const {
571: return (@expr1073745254 mPrefixes@var1379 .@expr1073745255 find (@expr1073745256 prefix@var1377 ) !=@expr1073745257 mPrefixes@var1379 .@expr1073745258 end (@expr1073745259 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var1378 ) const {
574: return (@expr1073745260 mSuffixes@var1380 .@expr1073745261 find (@expr1073745262 suffix@var1378 ) !=@expr1073745263 mSuffixes@var1380 .@expr1073745264 end (@expr1073745265 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var1379 ;
579: std :: set < std :: string > mSuffixes@var1380 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var1388 ( 0 ) { }
584:
585: void setStart ( const char * s@var1381 ) {
586: mStart@var1386 =@expr1073745266 s@var1381 ;
587: }
588: void setEnd ( const char * e@var1382 ) {
589: mEnd@var1387 =@expr1073745267 e@var1382 ;
590: }
591: void setOffset ( const int o@var1383 ) {
592: mOffset@var1388 =@expr1073745268 o@var1383 ;
593: }
594: void addBlock ( const char * blockName@var1384 ) {
595: mBlocks@var1389 .@expr1073745269 insert (@expr1073745270 blockName@var1384 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var1386 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var1387 ;
602: }
603: int offset ( ) const {
604: return mOffset@var1388 ;
605: }
606: bool isBlock ( const std :: string & blockName@var1385 ) const {
607: return mBlocks@var1389 .@expr1073745271 find (@expr1073745272 blockName@var1385 ) !=@expr1073745273 mBlocks@var1389 .@expr1073745274 end (@expr1073745275 ) ;
608: }
609:
610: private:
611: std :: string mStart@var1386 ;
612: std :: string mEnd@var1387 ;
613: int mOffset@var1388 ;
614: std :: set < std :: string > mBlocks@var1389 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var1390 ;
618: std :: set < std :: string > mFiles@var1391 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var1392 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var1393 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var1394 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var1395 ;
623: std :: map < std :: string , std :: string > mReturnValue@var1396 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var1397 ;
625: std :: map < std :: string , int > mReturnValueContainer@var1398 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var1399 ;
627: std :: map < std :: string , bool > mReportErrors@var1400 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var1401 ;
629: std :: set < std :: string > mMarkupExtensions@var1402 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var1403 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var1404 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var1405 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var1406 ;
634: std :: map < std :: string , int > mReflection@var1407 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var1408 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var1409 ;
637: std :: map < std :: string , Platform > mPlatforms@var1410 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var1411 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var1412 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var1413 , int argnr@var1414 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var1415 , bool * error@var1416 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var1417 , const std :: string & name@var1418 ) {
646: const std ::@expr1073745276 map < std ::@expr1073745277 string , AllocFunc > ::@expr1073745278 const_iterator it@var1419 =@expr1073745279 data@var1417 .@expr1073745280 find (@expr1073745281 name@var1418 ) ;
647: return (@expr1073745282 it@var1419 ==@expr1073745283 data@var1417 .@expr1073745284 end (@expr1073745285 ) ) ?@expr1073745286 nullptr :@expr1073745287 &@expr1073745288 it@var1419 .@expr1073745289 second@var1420 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var1421 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var1422 ,
654: const Settings * settings@var1423 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var1424 = nullptr ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var1425 ;
43: std :: string errorId@var1426 ;
44: void setFileName ( const std :: string & s@var1427 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var1431 ;
47: }
48: int lineNumber@var1428 ;
49: Certainty :: CertaintyLevel certainty@var1429 ;
50: std :: string symbolNames@var1430 ;
51: private:
52: std :: string mFileName@var1431 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var1465 ( NO_LINE ) , hash@var1467 ( 0 ) , thisAndNextLine@var1468 ( false ) , matched@var1469 ( false ) , checked@var1470 ( false ) { }
57: Suppression ( const Suppression & other@var1432 ) {
58: *@expr1073745290 this@expr1073745291 =@expr1073745292 other@var1432 ;
59: }
60: Suppression ( const std :: string & id@var1433 , const std :: string & file@var1434 , int line@var1435 = NO_LINE ) : errorId@var1463 ( id@var1433 ) , fileName@var1464 ( file@var1434 ) , lineNumber@var1465 ( line@var1435 ) , hash@var1467 ( 0 ) , thisAndNextLine@var1468 ( false ) , matched@var1469 ( false ) , checked@var1470 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var1436 ) {
63: errorId@var1463 =@expr1073745293 other@var1436 .@expr1073745294 errorId@var1437 ;
64: fileName@var1464 =@expr1073745295 other@var1436 .@expr1073745296 fileName@var1438 ;
65: lineNumber@var1465 =@expr1073745297 other@var1436 .@expr1073745298 lineNumber@var1439 ;
66: symbolName@var1466 =@expr1073745299 other@var1436 .@expr1073745300 symbolName@var1440 ;
67: hash@var1467 =@expr1073745301 other@var1436 .@expr1073745302 hash@var1441 ;
68: thisAndNextLine@var1468 =@expr1073745303 other@var1436 .@expr1073745304 thisAndNextLine@var1442 ;
69: matched@var1469 =@expr1073745305 other@var1436 .@expr1073745306 matched@var1443 ;
70: checked@var1470 =@expr1073745307 other@var1436 .@expr1073745308 checked@var1444 ;
71: return *@expr1073745309 this@expr1073745310 ;
72: }
73:
74: bool operator< ( const Suppression & other@var1445 ) const {
75: if (@expr1073745311 errorId@var1463 !=@expr1073745312 other@var1445 .@expr3489 errorId@var1446 ) {
76: return errorId@var1463 <@expr1073745314 other@var1445 .@expr3489 errorId@var1446 ; }
77: if (@expr1073745316 lineNumber@var1465 <@expr1073745317 other@var1445 .@expr1073745318 lineNumber@var1447 ) {
78: return true ; }
79: if (@expr1073745319 fileName@var1464 !=@expr1073745320 other@var1445 .@expr3497 fileName@var1448 ) {
80: return fileName@var1464 <@expr1073745322 other@var1445 .@expr3497 fileName@var1448 ; }
81: if (@expr1073745324 symbolName@var1466 !=@expr1073745325 other@var1445 .@expr3502 symbolName@var1449 ) {
82: return symbolName@var1466 <@expr1073745327 other@var1445 .@expr3502 symbolName@var1449 ; }
83: if (@expr1073745329 hash@var1467 !=@expr1073745330 other@var1445 .@expr3507 hash@var1450 ) {
84: return hash@var1467 <@expr1073745332 other@var1445 .@expr3507 hash@var1450 ; }
85: if (@expr1073745334 thisAndNextLine@var1468 !=@expr1073745335 other@var1445 .@expr1073745336 thisAndNextLine@var1451 ) {
86: return thisAndNextLine@var1468 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var1452 , std :: string * errorMessage@var1453 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var1454 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var1455 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073745338 fileName@var1464 .@expr1073745339 empty (@expr1073745340 ) &&@expr1073745341 fileName@var1464 .@expr1073745342 find_first_of (@expr1073745343 "?*" ) ==@expr1073745344 std ::@expr1073745345 string ::@expr1073745346 npos@expr1073745337 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var1456 ) const {
109: return errorId@var1463 ==@expr1073745347 other@var1456 .@expr1073745348 errorId@var1457 &&@expr1073745349
110: fileName@var1464 ==@expr1073745350 other@var1456 .@expr1073745351 fileName@var1458 &&@expr1073745352
111: lineNumber@var1465 ==@expr1073745353 other@var1456 .@expr1073745354 lineNumber@var1459 &&@expr1073745355
112: symbolName@var1466 ==@expr1073745356 other@var1456 .@expr1073745357 symbolName@var1460 &&@expr1073745358
113: hash@var1467 ==@expr1073745359 other@var1456 .@expr1073745360 hash@var1461 &&@expr1073745361
114: thisAndNextLine@var1468 ==@expr1073745362 other@var1456 .@expr1073745363 thisAndNextLine@var1462 ;
115: }
116:
117: std :: string errorId@var1463 ;
118: std :: string fileName@var1464 ;
119: int lineNumber@var1465 ;
120: std :: string symbolName@var1466 ;
121: unsigned long hash@var1467 ;
122: bool thisAndNextLine@var1468 ;
123: bool matched@var1469 ;
124: bool checked@var1470 ;
125:
126: enum Anonymous3 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var1471 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var1472 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var1473 , std :: string * errorMessage@var1474 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var1475 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var1476 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var1477 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var1478 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var1479 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var1480 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var1481 , const bool unusedFunctionChecking@var1482 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var1483 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var1484 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var1485 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var1486 , std :: clock_t clocks@var1487 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var1488 ;
45: long mNumberOfResults@var1489 ;
46:
47: TimerResultsData ( )
48: : mClocks@var1488 ( 0 )
49: , mNumberOfResults@var1489 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var1490 =@expr1073745365 (@expr1073745366 double ) (@expr1073745367 (@expr1073745368 unsigned long ) mClocks@var1488 ) /@expr1073745369 (@expr1073745370 double ) CLOCKS_PER_SEC@expr1073745364 ;
53: return ret@var1490 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var1491 ) const ;
62: void addResults ( const std :: string & str@var1492 , std :: clock_t clocks@var1493 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var1494 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var1495 , SHOWTIME_MODES showtimeMode@var1496 , TimerResultsIntf * timerResults@var1497 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var1498 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var1499 ;
79: TimerResultsIntf * mTimerResults@var1500 ;
80: std :: clock_t mStart@var1501 ;
81: const SHOWTIME_MODES mShowTimeMode@var1502 ;
82: bool mStopped@var1503 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var1504 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var1505 ;
103:
104:
105: std :: string addonPython@var1506 ;
106:
107:
108: std :: vector < std :: string > basePaths@var1507 ;
109:
110:
111: std :: string buildDir@var1508 ;
112:
113:
114: bool checkAllConfigurations@var1509 ;
115:
116:
117: bool checkConfiguration@var1510 ;
118:
|
121:
122: bool checkHeaders@var1511 ;
123:
124:
125: bool checkLibrary@var1512 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var1513 ;
129:
130:
131: bool checkUnusedTemplates@var1514 ;
132:
133:
134: bool clang@var1515 ;
135:
136:
137: std :: string clangExecutable@var1516 ;
138:
139:
140: bool clangTidy@var1517 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var1518 ;
144:
145:
146: std :: string cppcheckCfgProductName@var1519 ;
147:
148:
149: std :: string cppcheckCfgAbout@var1520 ;
150:
151:
152: bool daca@var1521 ;
153:
154:
155: bool debugnormal@var1522 ;
156:
157:
158: bool debugSimplified@var1523 ;
159:
160:
161: bool debugtemplate@var1524 ;
162:
163:
164: bool debugwarnings@var1525 ;
165:
166:
167: bool dump@var1526 ;
168: std :: string dumpFile@var1527 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var1528 ;
176:
177:
178: bool exceptionHandling@var1529 ;
179:
180:
181: std :: string exename@var1530 ;
182:
183:
184:
185: int exitCode@var1531 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var1532 ;
189:
190:
191: bool force@var1533 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var1534 ;
196:
197:
198: bool inlineSuppressions@var1535 ;
199:
200:
201:
202: unsigned int jobs@var1536 ;
203:
|
206:
207: bool jointSuppressionReport@var1537 ;
208:
209:
210: std :: list < std :: string > libraries@var1538 ;
211:
212:
213: Library library@var1539 ;
214:
215:
216:
217: int loadAverage@var1540 ;
218:
|
221:
222: int maxConfigs@var1541 ;
223:
224:
225: int maxCtuDepth@var1542 ;
226:
227:
228: int maxTemplateRecursion@var1543 ;
229:
230:
231: Suppressions nofail@var1544 ;
232:
233:
234: Suppressions nomsg@var1545 ;
235:
236:
237: std :: string outputFile@var1546 ;
238:
239:
240: std :: string plistOutput@var1547 ;
241:
242:
243: bool preprocessOnly@var1548 ;
244:
245: ImportProject project@var1549 ;
246:
247:
248: bool quiet@var1550 ;
249:
250:
251: bool relativePaths@var1551 ;
252:
253:
254: bool reportProgress@var1552 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var1553 ( "simple" )
261: , id@var1555 ( "rule" )
262: , severity@var1557 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var1553 ;
266: std :: string pattern@var1554 ;
267: std :: string id@var1555 ;
268: std :: string summary@var1556 ;
269: Severity :: SeverityType severity@var1557 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var1558 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var1564 ( false ) , externalFunctions@var1565 ( false ) , internalFunctions@var1566 ( false ) , externalVariables@var1567 ( false ) { }
281:
282: static const char XmlRootName@var1559 [ ] ;
283: static const char XmlClasses@var1560 [ ] ;
284: static const char XmlExternalFunctions@var1561 [ ] ;
285: static const char XmlInternalFunctions@var1562 [ ] ;
286: static const char XmlExternalVariables@var1563 [ ] ;
287:
288: void clear ( ) {
289: classes@var1564 =@expr1073745371 externalFunctions@var1565 =@expr1073745372 internalFunctions@var1566 =@expr1073745373 externalVariables@var1567 =@expr1073745374 false ;
290: }
291:
|
297:
298: bool classes@var1564 ;
299:
|
304:
305: bool externalFunctions@var1565 ;
306:
|
310:
311: bool internalFunctions@var1566 ;
312:
|
316:
317: bool externalVariables@var1567 ;
318: } ;
319:
320: SafeChecks safeChecks@var1568 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var1569 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var1570 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var1571 ;
325:
326:
327: SHOWTIME_MODES showtime@var1572 ;
328:
329:
330: Standards standards@var1573 ;
331:
332:
333:
334: std :: string templateFormat@var1574 ;
335:
336:
337:
338: std :: string templateLocation@var1575 ;
339:
340:
341: std :: string userDefines@var1576 ;
342:
343:
344: std :: set < std :: string > userUndefs@var1577 ;
345:
346:
347: std :: list < std :: string > userIncludes@var1578 ;
348:
349:
350: bool verbose@var1579 ;
351:
352:
353: bool xml@var1580 ;
354:
355:
356: int xml_version@var1581 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var1582 ) const {
363: for (@expr1073745375 const std ::@expr1073745376 string &@expr1073745377 configExcludePath@var1583 :@expr1073745378 configExcludePaths@var1518 ) {
364: if (@expr1073745379 file@var1582 .@expr1073745380 length (@expr1073745381 ) >=@expr1073745382 configExcludePath@var1583 .@expr3559 length (@expr3560 ) &&@expr1073745385 file@var1582 .@expr1073745386 compare (@expr1073745387 0 , configExcludePath@var1583 .@expr3559 length (@expr3560 ) , configExcludePath@var1583 ) ==@expr1073745390 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var1584 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var1585 , bool inconclusiveCheck@var1586 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073745391 find (@expr1073745392 libraries@var1538 .@expr1073745393 begin (@expr1073745394 ) , libraries@var1538 .@expr3571 end (@expr3572 ) , "posix" ) !=@expr1073745397 libraries@var1538 .@expr3571 end (@expr3572 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var1587 = true ) {
392: Settings ::@expr1073745400 mTerminated@var1504 =@expr1073745401 t@var1587 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073745402 mTerminated@var1504 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var1588 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1589 ( nullptr ) , num@var1590 ( 0 ) , known@var1591 ( true ) { }
62:
63: const Token * tok@var1589 ;
64: long long num@var1590 ;
65: bool known@var1591 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1592 ;
72: const Scope * classScope@var1593 ;
73: const Scope * enclosingScope@var1594 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1595 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1597 ( nullptr ) , nameTok@var1598 ( nullptr ) , access@var1599 ( AccessControl :: Public ) , isVirtual@var1600 ( false ) { }
82:
83: std :: string name@var1596 ;
84: const Type * type@var1597 ;
85: const Token * nameTok@var1598 ;
86: AccessControl access@var1599 ;
87: bool isVirtual@var1600 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1601 ) const {
90: return this@expr1073745403 .@expr1073745404 type@var1597 <@expr1073745405 rhs@var1601 .@expr1073745406 type@var1602 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1603 ( nullptr ) , nameEnd@var1604 ( nullptr ) , type@var1605 ( nullptr ) { }
97:
98: const Token * nameStart@var1603 ;
99: const Token * nameEnd@var1604 ;
100: const Type * type@var1605 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1606 ;
104: std :: vector < FriendInfo > friendList@var1607 ;
105:
106: const Token * typeStart@var1608 ;
107: const Token * typeEnd@var1609 ;
108: long long sizeOf@var1610 ;
109:
110: Type ( const Token * classDef_@var1611 = nullptr , const Scope * classScope_@var1612 = nullptr , const Scope * enclosingScope_@var1613 = nullptr ) :
111: classDef@var1592 ( classDef_@var1611 ) ,
112: classScope@var1593 ( classScope_@var1612 ) ,
113: enclosingScope@var1594 ( enclosingScope_@var1613 ) ,
114: needInitialization@var1595 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1608 ( nullptr ) ,
116: typeEnd@var1609 ( nullptr ) ,
117: sizeOf@var1610 ( 0 ) {
118: if (@expr1073745407 classDef_@var1611 &&@expr1073745408 classDef_@var1611 .@expr3585 str (@expr3586 ) ==@expr1073745411 "enum" ) {
119: needInitialization@var1595 =@expr1073745412 NeedInitialization ::@expr1073745413 True ; }
120: else { if (@expr1073745414 classDef_@var1611 &&@expr1073745415 classDef_@var1611 .@expr3585 str (@expr3586 ) ==@expr1073745418 "using" ) {
121: typeStart@var1608 =@expr1073745419 classDef@var1592 .@expr1073745420 tokAt (@expr1073745421 3 ) ;
122: typeEnd@var1609 =@expr1073745422 typeStart@var1608 ;
123: while (@expr1073745423 typeEnd@var1609 .@expr3600 next (@expr3601 ) &&@expr1073745426 typeEnd@var1609 .@expr3600 next (@expr3601 ) .@expr1073745429 str (@expr1073745430 ) !=@expr1073745431 ";" ) {
124: typeEnd@var1609 =@expr1073745432 typeEnd@var1609 .@expr3600 next (@expr3601 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1592 ?@expr1073745435 classDef@var1592 .@expr1073745436 str (@expr1073745437 ) :@expr1073745438 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1592 &&@expr1073745439 classDef@var1592 .@expr1073745440 str (@expr1073745441 ) ==@expr1073745442 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1614 , const Token * tok1@var1615 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1616 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1617 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1618 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1619 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1620 ) : scope@var1621 ( scope_@var1620 ) , name@var1622 ( nullptr ) , value@var1623 ( 0 ) , start@var1624 ( nullptr ) , end@var1625 ( nullptr ) , value_known@var1626 ( false ) { }
167: const Scope * scope@var1621 ;
168: const Token * name@var1622 ;
169: long long value@var1623 ;
170: const Token * start@var1624 ;
171: const Token * end@var1625 ;
172: bool value_known@var1626 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous4 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1627 ) const {
204: return (@expr3619 (@expr3619 mFlags@var1663 &@expr1073745445 flag_@var1627 ) !=@expr1073745446 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1628 , bool state_@var1629 ) {
213: mFlags@var1663 =@expr1073745447 state_@var1629 ?@expr1073745448 mFlags@var1663 |@expr1073745449 flag_@var1628 :@expr1073745450 mFlags@var1663 &@expr1073745451 ~@expr1073745452 flag_@var1628 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1630 , bool * isContainer@var1631 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1632 , const Token * start_@var1633 , const Token * end_@var1634 ,
226: int index_@var1635 , AccessControl access_@var1636 , const Type * type_@var1637 ,
227: const Scope * scope_@var1638 , const Settings * settings@var1639 )
228: : mNameToken@var1658 ( name_@var1632 ) ,
229: mTypeStartToken@var1659 ( start_@var1633 ) ,
230: mTypeEndToken@var1660 ( end_@var1634 ) ,
231: mIndex@var1661 ( index_@var1635 ) ,
232: mAccess@var1662 ( access_@var1636 ) ,
233: mFlags@var1663 ( 0 ) ,
234: mType@var1664 ( type_@var1637 ) ,
235: mScope@var1665 ( scope_@var1638 ) ,
236: mValueType@var1666 ( nullptr ) {
237: evaluate (@expr1073745453 settings@var1639 ) ;
238: }
239:
240: Variable ( const Token * name_@var1640 , const std :: string & clangType@var1641 , const Token * typeStart@var1642 ,
241: const Token * typeEnd@var1643 , int index_@var1644 , AccessControl access_@var1645 ,
242: const Type * type_@var1646 , const Scope * scope_@var1647 ) ;
243:
244: Variable ( const Variable & var@var1648 , const Scope * scope@var1649 ) ;
245:
246: Variable ( const Variable & var@var1650 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1651 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1658 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1659 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1660 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745454 mNameToken@var1658 ) {
300: return mNameToken@var1658 .@expr1073745455 str (@expr1073745456 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745457 mNameToken@var1658 ) {
312: return mNameToken@var1658 .@expr1073745458 varId (@expr1073745459 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1661 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1662 ==@expr1073745460 AccessControl ::@expr1073745461 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1662 ==@expr1073745462 AccessControl ::@expr1073745463 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1662 ==@expr1073745464 AccessControl ::@expr1073745465 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1662 ==@expr1073745466 AccessControl ::@expr1073745467 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1662 ==@expr1073745468 AccessControl ::@expr1073745469 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1662 ==@expr1073745470 AccessControl ::@expr1073745471 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745473 mAccess@var1662 ==@expr1073745474 AccessControl ::@expr1073745475 Local@expr1073745472 ) &&@expr1073745476 !@expr1073745477 isExtern (@expr1073745478 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745479 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745480 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745481 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745482 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745483 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1662 ==@expr1073745484 AccessControl ::@expr1073745485 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745486 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745487 fIsArray ) &&@expr1073745488 !@expr1073745489 getFlag (@expr1073745490 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745491 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745492 ) &&@expr1073745493 getFlag (@expr1073745494 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745495 fIsArray ) ||@expr1073745496 getFlag (@expr1073745497 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745498 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745499 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745500 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745501 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1664 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1664 ?@expr1073745502 mType@var1664 .@expr1073745503 classScope@var1669 :@expr1073745504 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1665 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1667 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1652 ) const {
550: return mDimensions@var1667 [@expr1073745505 index_@var1652 ] .@expr1073745506 num@var1983 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1653 ) const {
558: return mDimensions@var1667 [@expr1073745507 index_@var1653 ] .@expr1073745508 known@var1984 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745509 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745510 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745511 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1654 ) const {
602: return isStlType (@expr1073745512 ) &&@expr1073745513 stlType@var1654 ==@expr1073745514 mTypeStartToken@var1659 .@expr1073745515 strAt (@expr1073745516 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1655 ) const {
616: return isStlType (@expr1073745517 ) &&@expr1073745518 stlTypes@var1655 .@expr1073745519 find (@expr1073745520 mTypeStartToken@var1659 .@expr1073745521 strAt (@expr1073745522 2 ) ) !=@expr1073745523 stlTypes@var1655 .@expr1073745524 end (@expr1073745525 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745526 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr3703 ) &&@expr1073745528 type (@expr3703 ) .@expr1073745530 isEnumType (@expr1073745531 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745532 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1666 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1656 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1662 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1657 ) {
660: mType@var1664 =@expr1073745533 t@var1657 ;
661: }
662:
663:
664: const Token * mNameToken@var1658 ;
665:
666:
667: const Token * mTypeStartToken@var1659 ;
668:
669:
670: const Token * mTypeEndToken@var1660 ;
671:
672:
673: int mIndex@var1661 ;
674:
675:
676: AccessControl mAccess@var1662 ;
677:
678:
679: unsigned int mFlags@var1663 ;
680:
681:
682: const Type * mType@var1664 ;
683:
684:
685: const Scope * mScope@var1665 ;
686:
687: ValueType * mValueType@var1666 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1667 ;
691:
692:
693: void evaluate ( const Settings * settings@var1668 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous5 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1670 ) const {
735: return (@expr3710 (@expr3710 mFlags@var1719 &@expr1073745536 flag@var1670 ) !=@expr1073745537 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1671 , bool state@var1672 ) {
744: mFlags@var1719 =@expr1073745538 state@var1672 ?@expr1073745539 mFlags@var1719 |@expr1073745540 flag@var1671 :@expr1073745541 mFlags@var1719 &@expr1073745542 ~@expr1073745543 flag@var1671 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1673 , const Token * tok@var1674 , const Scope * scope@var1675 , const Token * tokDef@var1676 , const Token * tokArgDef@var1677 ) ;
751: Function ( const Token * tokenDef@var1678 , const std :: string & clangType@var1679 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1689 .@expr1073745544 str (@expr1073745545 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1697 .@expr1073745546 size (@expr1073745547 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1697 .@expr1073745548 size (@expr1073745549 ) -@expr1073745550 initArgCount@var1698 ;
764: }
765: const Variable * getArgumentVar ( int num@var1680 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1698 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1681 , const Scope * scope@var1682 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1683 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1684 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1699 ==@expr1073745551 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1699 ==@expr1073745552 eConstructor ||@expr1073745553
785: type@var1699 ==@expr1073745554 eCopyConstructor ||@expr1073745555
786: type@var1699 ==@expr1073745556 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1699 ==@expr1073745557 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1689 .@expr1073745558 isAttributeConstructor (@expr1073745559 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1689 .@expr1073745560 isAttributeDestructor (@expr1073745561 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1689 .@expr1073745562 isAttributePure (@expr1073745563 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1689 .@expr1073745564 isAttributeConst (@expr1073745565 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1689 .@expr1073745566 isAttributeNoreturn (@expr1073745567 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1689 .@expr1073745568 isAttributeNothrow (@expr1073745569 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1689 .@expr1073745570 isAttributeNodiscard (@expr1073745571 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745572 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745573 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745574 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745575 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745576 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745577 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745578 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745579 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745580 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745581 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745582 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745583 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745584 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745585 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745586 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745587 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745588 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745589 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745590 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745591 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745592 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745593 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1685 ) {
881: setFlag (@expr1073745594 fHasBody , state@var1685 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745595 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745596 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1686 ) {
891: setFlag (@expr1073745597 fIsEscapeFunction , state@var1686 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745598 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1687 ) {
898: setFlag (@expr1073745599 fIsConstexpr , state@var1687 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1688 ) const ;
901:
902: const Token * tokenDef@var1689 ;
903: const Token * argDef@var1690 ;
904: const Token * token@var1691 ;
905: const Token * arg@var1692 ;
906: const Token * retDef@var1693 ;
907: const :: Type * retType@var1694 ;
908: const Scope * functionScope@var1695 ;
909: const Scope * nestedIn@var1696 ;
910: std :: list < Variable > argumentList@var1697 ;
911: int initArgCount@var1698 ;
912: Type type@var1699 ;
913: AccessControl access@var1700 ;
914: const Token * noexceptArg@var1701 ;
915: const Token * throwArg@var1702 ;
916: const Token * templateDef@var1703 ;
917: const Token * functionPointerUsage@var1704 ;
918:
919: bool argsMatch ( const Scope * scope@var1705 , const Token * first@var1706 , const Token * second@var1707 , const std :: string & path@var1708 , int path_length@var1709 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1710 , bool unknown@var1711 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1712 , bool unknown@var1713 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1714 , bool unknown@var1715 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1716 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745600 this@expr1073745601 .@expr1073745602 hasTrailingReturnType (@expr1073745603 ) ) {
931: return Token ::@expr1073745604 findmatch (@expr1073745605 retDef@var1693 , "{|;" ) ;
932: } else {
933: return tokenDef@var1689 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1717 , bool * foundAllBaseClasses@var1718 ) const ;
946:
947: unsigned int mFlags@var1719 ;
948:
949: void isInline ( bool state@var1720 ) {
950: setFlag (@expr1073745606 fIsInline , state@var1720 ) ;
951: }
952: void isConst ( bool state@var1721 ) {
953: setFlag (@expr1073745607 fIsConst , state@var1721 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1722 ) {
956: setFlag (@expr1073745608 fHasVirtualSpecifier , state@var1722 ) ;
957: }
958: void isPure ( bool state@var1723 ) {
959: setFlag (@expr1073745609 fIsPure , state@var1723 ) ;
960: }
961: void isStatic ( bool state@var1724 ) {
962: setFlag (@expr1073745610 fIsStatic , state@var1724 ) ;
963: }
964: void isStaticLocal ( bool state@var1725 ) {
965: setFlag (@expr1073745611 fIsStaticLocal , state@var1725 ) ;
966: }
967: void isExtern ( bool state@var1726 ) {
968: setFlag (@expr1073745612 fIsExtern , state@var1726 ) ;
969: }
970: void isFriend ( bool state@var1727 ) {
971: setFlag (@expr1073745613 fIsFriend , state@var1727 ) ;
972: }
973: void isExplicit ( bool state@var1728 ) {
974: setFlag (@expr1073745614 fIsExplicit , state@var1728 ) ;
975: }
976: void isDefault ( bool state@var1729 ) {
977: setFlag (@expr1073745615 fIsDefault , state@var1729 ) ;
978: }
979: void isDelete ( bool state@var1730 ) {
980: setFlag (@expr1073745616 fIsDelete , state@var1730 ) ;
981: }
982: void isNoExcept ( bool state@var1731 ) {
983: setFlag (@expr1073745617 fIsNoExcept , state@var1731 ) ;
984: }
985: void isThrow ( bool state@var1732 ) {
986: setFlag (@expr1073745618 fIsThrow , state@var1732 ) ;
987: }
988: void isOperator ( bool state@var1733 ) {
989: setFlag (@expr1073745619 fIsOperator , state@var1733 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1734 ) {
992: setFlag (@expr1073745620 fHasLvalRefQual , state@var1734 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1735 ) {
995: setFlag (@expr1073745621 fHasRvalRefQual , state@var1735 ) ;
996: }
997: void isVariadic ( bool state@var1736 ) {
998: setFlag (@expr1073745622 fIsVariadic , state@var1736 ) ;
999: }
1000: void isVolatile ( bool state@var1737 ) {
1001: setFlag (@expr1073745623 fIsVolatile , state@var1737 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1738 ) {
1004: return setFlag (@expr1073745624 fHasTrailingReturnType , state@var1738 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1739 ) {
1007: setFlag (@expr1073745625 fIsInlineKeyword , state@var1739 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1740 , const Scope * scope@var1741 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1742 ;
1019: const Scope * scope@var1743 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1744 , const Token * classDef_@var1745 , const Scope * nestedIn_@var1746 ) ;
1025: Scope ( const SymbolDatabase * check_@var1747 , const Token * classDef_@var1748 , const Scope * nestedIn_@var1749 , ScopeType type_@var1750 , const Token * start_@var1751 ) ;
1026:
1027: const SymbolDatabase * check@var1752 ;
1028: std :: string className@var1753 ;
1029: const Token * classDef@var1754 ;
1030: const Token * bodyStart@var1755 ;
1031: const Token * bodyEnd@var1756 ;
1032: std :: list < Function > functionList@var1757 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1758 ;
1034: std :: list < Variable > varlist@var1759 ;
1035: const Scope * nestedIn@var1760 ;
1036: std :: list < Scope * > nestedList@var1761 ;
1037: int numConstructors@var1762 ;
1038: int numCopyOrMoveConstructors@var1763 ;
1039: std :: list < UsingInfo > usingList@var1764 ;
1040: ScopeType type@var1765 ;
1041: Type * definedType@var1766 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1767 ;
1043: std :: vector < const Token * > bodyStartList@var1768 ;
1044:
1045:
1046: const Scope * functionOf@var1769 ;
1047: Function * function@var1770 ;
1048:
1049:
1050: const Token * enumType@var1771 ;
1051: bool enumClass@var1772 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1773 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1774 ) {
1056: bodyStart@var1755 =@expr1073745626 start@var1774 ;
1057: bodyEnd@var1756 =@expr1073745627 start@var1774 ?@expr1073745628 start@var1774 .@expr1073745629 link (@expr1073745630 ) :@expr1073745631 nullptr ;
1058: if (@expr1073745632 start@var1774 ) {
1059: bodyStartList@var1768 .@expr1073745633 push_back (@expr1073745634 start@var1774 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1753 .@expr1073745635 size (@expr1073745636 ) >@expr1073745637 9 &&@expr1073745638 className@var1753 .@expr1073745639 compare (@expr1073745640 0 , 9 , "Anonymous" ) ==@expr1073745641 0 &&@expr1073745642 std ::@expr1073745643 isdigit (@expr1073745644 className@var1753 [@expr1073745645 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1775 ) const {
1068: for (@expr1073745646 const Enumerator &@expr1073745647 i@var1776 :@expr1073745648 enumeratorList@var1773 ) {
1069: if (@expr1073745649 i@var1776 .@expr1073745650 name@var1777 .@expr1073745651 str (@expr1073745652 ) ==@expr1073745653 name@var1775 ) {
1070: return &@expr1073745654 i@var1776 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1778 ) const {
1076: if (@expr1073745655 !@expr1073745656 outer@var1778 ) {
1077: return false ; }
1078: if (@expr1073745657 outer@var1778 ==@expr1073745658 this@expr1073745659 ) {
1079: return true ; }
1080: const Scope * parent@var1779 ; parent@var1779 =@expr1073745660 nestedIn@var1760 ;
1081: while (@expr1073745661 outer@var1778 !=@expr1073745662 parent@var1779 &&@expr1073745663 parent@var1779 ) {
1082: parent@var1779 =@expr1073745664 parent@var1779 .@expr1073745665 nestedIn@var1780 ; }
1083: if (@expr1073745666 parent@var1779 &&@expr1073745667 parent@var1779 ==@expr1073745668 outer@var1778 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1781 ) {
1089: while (@expr1073745669 scope@var1781 ) {
1090: if (@expr1073745670 scope@var1781 .@expr1073745671 type@var1782 ==@expr1073745672 Scope ::@expr1073745673 eFunction ) {
1091: break ; }
1092: scope@var1781 =@expr1073745674 scope@var1781 .@expr1073745675 nestedIn@var1783 ;
1093: }
1094: if (@expr1073745676 !@expr1073745677 scope@var1781 ) {
1095: return nullptr ; }
1096: return scope@var1781 .@expr1073745678 function@var1784 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073745679 type@var1765 ==@expr1073745680 eClass ||@expr1073745681 type@var1765 ==@expr1073745682 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073745683 type@var1765 ==@expr1073745684 eClass ||@expr1073745685 type@var1765 ==@expr1073745686 eStruct ||@expr1073745687 type@var1765 ==@expr1073745688 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1765 !=@expr1073745689 eClass &&@expr1073745690 type@var1765 !=@expr1073745691 eStruct &&@expr1073745692 type@var1765 !=@expr1073745693 eUnion &&@expr1073745694 type@var1765 !=@expr1073745695 eGlobal &&@expr1073745696 type@var1765 !=@expr1073745697 eNamespace &&@expr1073745698 type@var1765 !=@expr1073745699 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1765 ==@expr1073745700 Scope ::@expr3877 ScopeType ::@expr1073745702 eFor ||@expr1073745703 type@var1765 ==@expr1073745704 Scope ::@expr3877 ScopeType ::@expr1073745706 eWhile ||@expr1073745707 type@var1765 ==@expr1073745708 Scope ::@expr3877 ScopeType ::@expr1073745710 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073745711 type@var1765 ==@expr1073745712 eIf ||@expr1073745713 type@var1765 ==@expr1073745714 eElse ||@expr1073745715
1117: type@var1765 ==@expr1073745716 eFor ||@expr1073745717 type@var1765 ==@expr1073745718 eWhile ||@expr1073745719 type@var1765 ==@expr1073745720 eDo ||@expr1073745721
1118: type@var1765 ==@expr1073745722 eSwitch ||@expr1073745723 type@var1765 ==@expr1073745724 eUnconditional ||@expr1073745725
1119: type@var1765 ==@expr1073745726 eTry ||@expr1073745727 type@var1765 ==@expr1073745728 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1785 , bool requireConst@var1786 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1787 , bool isC@var1788 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1789 ) {
1135: return const_cast < Scope *@expr3905 > (@expr1073745730 const_cast < const Scope *@expr3905 > (@expr1073745732 this@expr1073745733 ) .@expr1073745734 findRecordInNestedList (@expr1073745735 name@var1789 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1790 ) const ;
1139: Type * findType ( const std :: string & name@var1791 ) {
1140: return const_cast < Type *@expr3912 > (@expr1073745737 const_cast < const Scope *@expr3912 > (@expr1073745739 this@expr1073745740 ) .@expr1073745741 findType (@expr1073745742 name@var1791 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1792 ) ;
1148:
1149: void addVariable ( const Token * token_@var1793 , const Token * start_@var1794 ,
1150: const Token * end_@var1795 , AccessControl access_@var1796 , const Type * type_@var1797 ,
1151: const Scope * scope_@var1798 , const Settings * settings@var1799 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1800 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1801 ) {
1159: functionList@var1757 .@expr1073745743 push_back (@expr1073745744 func@var1801 ) ;
1160:
1161: const Function * back@var1802 ; back@var1802 =@expr1073745745 &@expr1073745746 functionList@var1757 .@expr1073745747 back (@expr1073745748 ) ;
1162:
1163: functionMap@var1758 .@expr1073745749 insert (@expr1073745750 make_pair (@expr1073745751 back@var1802 .@expr1073745752 tokenDef@var1803 .@expr1073745753 str (@expr1073745754 ) , back@var1802 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1804 , AccessControl varaccess@var1805 , const Settings * settings@var1806 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1807 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1808 , bool isCpp@var1809 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1810 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1811 , const Token * & vartok@var1812 , const Token * & typetok@var1813 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1814 , int args@var1815 , std :: vector < const Function * > & matches@var1816 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1817 , const Token * start@var1818 , const Token * end@var1819 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1820 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1821 ;
1239: int bits@var1822 ;
1240: int pointer@var1823 ;
1241: int constness@var1824 ;
1242: Reference reference@var1825 ; reference@var1825 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1826 ;
1245: const :: Type * smartPointerType@var1827 ;
1246: const Token * smartPointerTypeToken@var1828 ;
1247: const Library :: SmartPointer * smartPointer@var1829 ;
1248: const Library :: Container * container@var1830 ;
1249:
1250: const Token * containerTypeToken@var1831 ;
1251:
1252: std :: string originalTypeName@var1832 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1820 ( UNKNOWN_SIGN ) ,
1257: type@var1821 ( UNKNOWN_TYPE ) ,
1258: bits@var1822 ( 0 ) ,
1259: pointer@var1823 ( 0U ) ,
1260: constness@var1824 ( 0U ) ,
1261: typeScope@var1826 ( nullptr ) ,
1262: smartPointerType@var1827 ( nullptr ) ,
1263: smartPointerTypeToken@var1828 ( nullptr ) ,
1264: smartPointer@var1829 ( nullptr ) ,
1265: container@var1830 ( nullptr ) ,
1266: containerTypeToken@var1831 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1833 , enum Type t@var1834 , int p@var1835 )
1269: : sign@var1820 ( s@var1833 ) ,
1270: type@var1821 ( t@var1834 ) ,
1271: bits@var1822 ( 0 ) ,
1272: pointer@var1823 ( p@var1835 ) ,
1273: constness@var1824 ( 0U ) ,
1274: typeScope@var1826 ( nullptr ) ,
1275: smartPointerType@var1827 ( nullptr ) ,
1276: smartPointerTypeToken@var1828 ( nullptr ) ,
1277: smartPointer@var1829 ( nullptr ) ,
1278: container@var1830 ( nullptr ) ,
1279: containerTypeToken@var1831 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1836 , enum Type t@var1837 , int p@var1838 , int c@var1839 )
1282: : sign@var1820 ( s@var1836 ) ,
1283: type@var1821 ( t@var1837 ) ,
1284: bits@var1822 ( 0 ) ,
1285: pointer@var1823 ( p@var1838 ) ,
1286: constness@var1824 ( c@var1839 ) ,
1287: typeScope@var1826 ( nullptr ) ,
1288: smartPointerType@var1827 ( nullptr ) ,
1289: smartPointerTypeToken@var1828 ( nullptr ) ,
1290: smartPointer@var1829 ( nullptr ) ,
1291: container@var1830 ( nullptr ) ,
1292: containerTypeToken@var1831 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1840 , enum Type t@var1841 , int p@var1842 , int c@var1843 , const std :: string & otn@var1844 )
1295: : sign@var1820 ( s@var1840 ) ,
1296: type@var1821 ( t@var1841 ) ,
1297: bits@var1822 ( 0 ) ,
1298: pointer@var1823 ( p@var1842 ) ,
1299: constness@var1824 ( c@var1843 ) ,
1300: typeScope@var1826 ( nullptr ) ,
1301: smartPointerType@var1827 ( nullptr ) ,
1302: smartPointerTypeToken@var1828 ( nullptr ) ,
1303: smartPointer@var1829 ( nullptr ) ,
1304: container@var1830 ( nullptr ) ,
1305: containerTypeToken@var1831 ( nullptr ) ,
1306: originalTypeName@var1832 ( otn@var1844 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1845 , const Settings * settings@var1846 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1847 , bool longType@var1848 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1849 , const ValueType * func@var1850 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1851 , const Variable * callVar@var1852 , const Variable * funcVar@var1853 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073745755 type@var1821 >=@expr1073745756 ValueType ::@expr1073745757 Type ::@expr1073745758 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073745759 type@var1821 >=@expr1073745760 ValueType ::@expr3937 Type ::@expr1073745762 BOOL &&@expr1073745763 type@var1821 <=@expr1073745764 ValueType ::@expr3937 Type ::@expr1073745766 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073745767 type@var1821 >=@expr1073745768 ValueType ::@expr3945 Type ::@expr1073745770 FLOAT &&@expr1073745771 type@var1821 <=@expr1073745772 ValueType ::@expr3945 Type ::@expr1073745774 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1854 , const Settings * settings@var1855 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1826 &&@expr1073745775 typeScope@var1826 .@expr1073745776 type@var1856 ==@expr1073745777 Scope ::@expr1073745778 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1857 , bool p@var1858 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1859 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1860 , const Settings * settings@var1861 , ErrorLogger * errorLogger@var1862 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1863 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1864 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1865 ;
1359:
1360:
1361: std :: list < Type > typeList@var1866 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1867 , const Token * typeTok@var1868 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1869 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1870 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1871 , const Scope * startScope@var1872 , bool lookOutside@var1873 = false ) const ;
1382: Type * findType ( const Token * startTok@var1874 , Scope * startScope@var1875 , bool lookOutside@var1876 = false ) const {
1383: return const_cast < Type *@expr3955 > (@expr1073745780 this@expr1073745781 .@expr1073745782 findType (@expr1073745783 startTok@var1874 , const_cast < const Scope *@expr3955 > (@expr1073745785 startScope@var1875 ) , lookOutside@var1876 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1877 , const Scope * startScope@var1878 ) const ;
1387: Scope * findScope ( const Token * tok@var1879 , Scope * startScope@var1880 ) const {
1388: return const_cast < Scope *@expr3962 > (@expr1073745787 this@expr1073745788 .@expr1073745789 findScope (@expr1073745790 tok@var1879 , const_cast < const Scope *@expr3962 > (@expr1073745792 startScope@var1880 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1881 ) const {
1392: return varid@var1881 <@expr1073745793 mVariableList@var1938 .@expr1073745794 size (@expr1073745795 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1882 ) const {
1396: return mVariableList@var1938 .@expr1073745796 at (@expr1073745797 varId@var1882 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1938 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1883 , const std :: string & type@var1884 , const std :: string & msg@var1885 ) const ;
1407:
1408: void printOut ( const char * title@var1886 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1887 , const char * indent@var1888 ) const ;
1410: void printXml ( std :: ostream & out@var1889 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1890 , Token * tokens@var1891 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1892 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1893 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1894 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1895 , const Token * * tok@var1896 , const Token * argStart@var1897 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1898 , const Token * tok@var1899 , const Token * argStart@var1900 , const Token * funcStart@var1901 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1902 , const Token * & tok@var1903 , const Token * argStart@var1904 , const Token * funcStart@var1905 ) ;
1469: void addNewFunction ( Scope * * scope@var1906 , const Token * * tok@var1907 ) ;
1470: bool isFunction ( const Token * tok@var1908 , const Scope * outerScope@var1909 , const Token * * funcStart@var1910 , const Token * * argStart@var1911 , const Token * * declEnd@var1912 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1913 , const Scope * startScope@var1914 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1915 , const Scope * scope@var1916 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1917 , const Scope * ns@var1918 , const std :: string & path@var1919 , int path_length@var1920 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1921 , const Token * typeTok@var1922 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1923 , const Token * vartok@var1924 , Token * membertok@var1925 , const Variable * membervar@var1926 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1927 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1928 ) const ;
1485:
1486: void setValueType ( Token * tok@var1929 , const ValueType & valuetype@var1930 ) ;
1487: void setValueType ( Token * tok@var1931 , const Variable & var@var1932 ) ;
1488: void setValueType ( Token * tok@var1933 , const Enumerator & enumerator@var1934 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1935 ;
1491: const Settings * mSettings@var1936 ;
1492: ErrorLogger * mErrorLogger@var1937 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1938 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1939 ;
1499:
1500: bool mIsCpp@var1940 ;
1501: ValueType :: Sign mDefaultSignedness@var1941 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1942 ;
1505: } ;

##file cppcheck-2.8/lib/checkpostfixoperator.cpp

1:
|
36:
37: namespace {
38: CheckPostfixOperator instance@var1943 ;
39: }
40:
41:
42:
43: static const struct CWE CWE398@var1944 ( 398U ) ;
44:
45:
46: void CheckPostfixOperator :: postfixOperator ( )
47: {
48: if (@expr1073745798 !@expr1073745799 mSettings@var29 .@expr1073745800 severity@var1975 .@expr1073745801 isEnabled (@expr1073745802 Severity ::@expr1073745803 performance ) ) {
49: return ; }
50:
51: const SymbolDatabase * symbolDatabase@var1945 ; symbolDatabase@var1945 =@expr1073745804 mTokenizer@var28 .@expr1073745805 getSymbolDatabase (@expr1073745806 ) ;
52:
53: for (@expr1073745807 const Scope *@expr3984 scope@var1946 :@expr1073745809 symbolDatabase@var1945 .@expr1073745810 functionScopes@var1947 ) {
54: for (@expr1073745811 const Token *@expr3984 tok@var1948 =@expr1073745813 scope@var1946 .@expr1073745814 bodyStart@var1949 .@expr1073745815 next (@expr1073745816 ) ; tok@var1948 !=@expr1073745817 scope@var1946 .@expr1073745818 bodyEnd@var1950 ; tok@var1948 =@expr1073745819 tok@var1948 .@expr3996 next (@expr3997 ) ) {
55: const Variable * var@var1951 ; var@var1951 =@expr1073745822 tok@var1948 .@expr1073745823 variable (@expr1073745824 ) ;
56: if (@expr1073745825 !@expr1073745826 var@var1951 ||@expr1073745827 !@expr1073745828 Token ::@expr4005 Match (@expr1073745830 tok@var1948 , "%var% ++|--" ) ) {
57: continue ; }
58:
59: const Token * parent@var1952 ; parent@var1952 =@expr1073745831 tok@var1948 .@expr3996 next (@expr3997 ) .@expr1073745834 astParent (@expr1073745835 ) ;
60: if (@expr1073745836 !@expr1073745837 parent@var1952 ||@expr1073745838 parent@var1952 .@expr4015 str (@expr4016 ) ==@expr1073745841 ";" ||@expr1073745842 (@expr1073745843 parent@var1952 .@expr4015 str (@expr4016 ) ==@expr1073745846 "," &&@expr1073745847 (@expr1073745848 !@expr1073745849 parent@var1952 .@expr4026 astParent (@expr4027 ) ||@expr1073745852 parent@var1952 .@expr4026 astParent (@expr4027 ) .@expr1073745855 str (@expr1073745856 ) !=@expr1073745857 "(" ) ) ) {
61: if (@expr1073745858 var@var1951 .@expr1073745859 isPointer (@expr1073745860 ) ||@expr1073745861 var@var1951 .@expr1073745862 isArray (@expr1073745863 ) ) {
62: continue ; }
63:
64: if (@expr1073745864 Token ::@expr4005 Match (@expr1073745866 var@var1951 .@expr1073745867 nameToken (@expr1073745868 ) .@expr1073745869 previous (@expr1073745870 ) , "iterator|const_iterator|reverse_iterator|const_reverse_iterator" ) ) {
65:
66: postfixOperatorError (@expr4047 tok@var1948 ) ;
67: } else { if (@expr1073745872 var@var1951 .@expr1073745873 type (@expr1073745874 ) ) {
68:
69: postfixOperatorError (@expr4047 tok@var1948 ) ;
70: } }
71: }
72: }
73: }
74: }
75:
76:
77:
78: void CheckPostfixOperator :: postfixOperatorError ( const Token * tok@var1953 )
79: {
80: reportError (@expr1073745876 tok@var1953 , Severity ::@expr1073745877 performance , "postfixOperator" ,
81: "Prefer prefix ++/-- operators for non-primitive types.\nPrefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code."
82:
|
85:
86: , CWE398@var1944 , Certainty ::@expr1073745878 normal ) ;
87: }

##file cppcheck-2.8/lib/settings.h

5:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var1954 ; mFlags@var1954 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1954 ;
54: }
55: void clear ( ) {
56: mFlags@var1954 =@expr1073745879 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1954 =@expr1073745880 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1955 ) {
62: if (@expr1073745881 enabled@var1955 ) {
63: fill (@expr1073745882 ) ; }
64: else {
65: clear (@expr1073745883 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var1956 ) const {
68: return (@expr4060 mFlags@var1954 &@expr1073745885 (@expr4060 1U <<@expr1073745887 (@expr1073745888 uint32_t ) flag@var1956 ) ) !=@expr1073745889 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var1957 ) {
71: mFlags@var1954 |=@expr1073745890 (@expr1073745891 1U <<@expr1073745892 (@expr1073745893 uint32_t ) flag@var1957 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var1958 ) {
74: mFlags@var1954 &=@expr1073745894 ~@expr1073745895 (@expr1073745896 1U <<@expr1073745897 (@expr1073745898 uint32_t ) flag@var1958 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var1959 , bool enabled@var1960 ) {
77: if (@expr1073745899 enabled@var1960 ) {
78: enable (@expr1073745900 flag@var1959 ) ; }
79: else {
80: disable (@expr1073745901 flag@var1959 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var1961 ; mFlags@var1961 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1961 ;
54: }
55: void clear ( ) {
56: mFlags@var1961 =@expr1073745902 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1961 =@expr1073745903 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1962 ) {
62: if (@expr1073745904 enabled@var1962 ) {
63: fill (@expr1073745905 ) ; }
64: else {
65: clear (@expr1073745906 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var1963 ) const {
68: return (@expr4083 mFlags@var1961 &@expr1073745908 (@expr4083 1U <<@expr1073745910 (@expr1073745911 uint32_t ) flag@var1963 ) ) !=@expr1073745912 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var1964 ) {
71: mFlags@var1961 |=@expr1073745913 (@expr1073745914 1U <<@expr1073745915 (@expr1073745916 uint32_t ) flag@var1964 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var1965 ) {
74: mFlags@var1961 &=@expr1073745917 ~@expr1073745918 (@expr1073745919 1U <<@expr1073745920 (@expr1073745921 uint32_t ) flag@var1965 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var1966 , bool enabled@var1967 ) {
77: if (@expr1073745922 enabled@var1967 ) {
78: enable (@expr1073745923 flag@var1966 ) ; }
79: else {
80: disable (@expr1073745924 flag@var1966 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var1968 ; mFlags@var1968 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1968 ;
54: }
55: void clear ( ) {
56: mFlags@var1968 =@expr1073745925 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1968 =@expr1073745926 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1969 ) {
62: if (@expr1073745927 enabled@var1969 ) {
63: fill (@expr1073745928 ) ; }
64: else {
65: clear (@expr1073745929 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var1970 ) const {
68: return (@expr4106 mFlags@var1968 &@expr1073745931 (@expr4106 1U <<@expr1073745933 (@expr1073745934 uint32_t ) flag@var1970 ) ) !=@expr1073745935 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var1971 ) {
71: mFlags@var1968 |=@expr1073745936 (@expr1073745937 1U <<@expr1073745938 (@expr1073745939 uint32_t ) flag@var1971 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var1972 ) {
74: mFlags@var1968 &=@expr1073745940 ~@expr1073745941 (@expr1073745942 1U <<@expr1073745943 (@expr1073745944 uint32_t ) flag@var1972 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var1973 , bool enabled@var1974 ) {
77: if (@expr1073745945 enabled@var1974 ) {
78: enable (@expr1073745946 flag@var1973 ) ; }
79: else {
80: disable (@expr1073745947 flag@var1973 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible 4@13
  id possible "postfixOperator"@13
  msg possible "Prefer prefix ++/-- operators for non-primitive types.\nPrefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code."@13
  certainty possible 0@13
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@28,128@29,64@30,32@31,16@32,8@33,4@34,2@35,1@36}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@37,128@38,64@39,32@40,16@41,8@42,4@43,2@44,1@45}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@37,4294967167@38,4294967231@39,4294967263@40,4294967279@41,4294967287@42,4294967291@43,4294967293@44,4294967294@45}
  flag {!<=-1,256@37,128@38,64@39,32@40,16@41,8@42,4@43,2@44,1@45}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@47386,34@47642}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@185,34@186}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@185,""@186,""@187,"U"@188,"U"@189,"u"@190,"u"@191,"u8"@192,"u8"@193}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@23,34@24}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@20,34@22}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@174,4@175,0@176}
  t possible {10@174,4@175,0@176}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@174,4@175,0@176}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@174,0@176}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@174,0@176}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@174}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@174}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@174}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@174}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@174}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@182}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@184,17179869184@195,8589934592@197,34359738368@199,4294967296@201,2147483648@203,1073741824@205,536870912@207,268435456@209}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@15,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@16}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@183,17179869184@194,8589934592@196,34359738368@198,4294967296@200,2147483648@202,1073741824@204,536870912@206,268435456@208}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@183,17179869184@194,8589934592@196,34359738368@198,4294967296@200,2147483648@202,1073741824@204,536870912@206,268435456@208}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 45
  ( always "Using postfix operators"
Line 49
  ( always "Using postfix operators"
Line 52
  ( always {!<=-1,!>=2}
Line 67
  nullptr always 0
Line 68
  nullptr always 0
Line 72
  "Using postfix operators" always "Using postfix operators"
Line 76
  "Warn if using postfix operators ++ or -- rather than prefix operator\n" always "Warn if using postfix operators ++ or -- rather than prefix operator\n"
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@93,4096@96,16384@99,2048@100,1024@101,65536@102,512@103,256@104,128@105}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@58,4194304@60,8388608@61,2097152@63,1048576@64,524288@65,262144@66,131072@67,65536@68}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@36,2097152@37,1048576@38,524288@39,262144@40,131072@41,65536@42,32768@43,16384@44}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@36,4292870143@37,4293918719@38,4294443007@39,4294705151@40,4294836223@41,4294901759@42,4294934527@43,4294950911@44}
  flag {!<=-1,8388608@36,2097152@37,1048576@38,524288@39,262144@40,131072@41,65536@42,32768@43,16384@44}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 43
  398U always 398
Line 48
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 4
  performance always 4
Line 53
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 54
  != always {!<=-1,!>=2}
Line 56
  ! always {!<=-1,!>=2}
  var always symbolic=(tok->variable())
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "%var% ++|--" always "%var% ++|--"
Line 60
  ! always {!<=-1,!>=2}
  parent always symbolic=(tok->next()->astParent())
  || always {!<=-1,!>=2}
  parent {symbolic=(tok->next()->astParent()),!0}
  == always {!<=-1,!>=2}
  ";" always ";"
  || always {!<=-1,!>=2}
  parent {symbolic=(tok->next()->astParent()),!0}
  == always {!<=-1,!>=2}
  "," always ","
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  parent {symbolic=(tok->next()->astParent()),!0}
  || always {!<=-1,!>=2}
  parent {symbolic=(tok->next()->astParent()),!0}
  ( always !0
  != always {!<=-1,!>=2}
  "(" always "("
Line 61
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  var {symbolic=(tok->variable()),!0}
  ( always {!<=-1,!>=2}
Line 64
  ( always {!<=-1,!>=2}
  var always !0
  "iterator|const_iterator|reverse_iterator|const_reverse_iterator" always "iterator|const_iterator|reverse_iterator|const_reverse_iterator"
Line 67
  var always !0
Line 80
  tok possible 0@147
  :: always 4
  performance always 4
  "postfixOperator" always "postfixOperator"
Line 81
  "Prefer prefix ++/-- operators for non-primitive types.\nPrefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code." always "Prefer prefix ++/-- operators for non-primitive types.\nPrefix ++/-- operators should be preferred for non-primitive types. Pre-increment/decrement can be more efficient than post-increment/decrement. Post-increment/decrement usually involves keeping a copy of the previous value around and adds a little extra code."
Line 86
  :: always 0
  normal always 0
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,4@14}
  flag possible 4@14
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
