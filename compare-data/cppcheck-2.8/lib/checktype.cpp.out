

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073743917 !@expr1073743918 mTokenizer@var28 ) {
69: instances (@expr1073743919 ) .@expr1073743920 remove (@expr1073743921 this@expr1073743922 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073743923 string (@expr1073743924 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073743925 void ) tokenizer@var21 ;
108: (@expr1073743926 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073743927 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073743928 void ) ctu@var24 ;
120: (@expr1073743929 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073743930 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073743931 0U ) , Certainty ::@expr1073743932 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073743933 list < const Token *@expr1073743934 > callstack@var41 (@expr1073743935 1 , tok@var35 ) ;
141: reportError (@expr1073743936 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073743937 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073743938 0U ) , Certainty ::@expr1073743939 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var64 ;
42: double mDoubleValue@var65 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var66 ;
44: bool mIsUnsigned@var67 ;
45:
46: void promote ( const value & v@var68 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var69 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var66 !=@expr1073743940 Type ::@expr1073743941 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var66 ==@expr1073743942 Type ::@expr1073743943 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073743944 ) ?@expr1073743945 mDoubleValue@var65 :@expr1073743946 (@expr1073743947 double ) mIntValue@var64 ;
60: }
61:
62: static value calc ( char op@var70 , const value & v1@var71 , const value & v2@var72 ) ;
63: int compare ( const value & v@var73 ) const ;
64: value add ( int v@var74 ) const ;
65: value shiftLeft ( const value & v@var75 ) const ;
66: value shiftRight ( const value & v@var76 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var77 ;
72:
73: static long long toLongNumber ( const std :: string & str@var78 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var79 ) ;
75:
76: template < class T > static std :: string toString ( T value@var80 ) {
77: std ::@expr1073743948 ostringstream result@var81 ;
78: result@var81 <<@expr1073743949 value@var80 ;
79: return result@var81 .@expr1073743950 str (@expr1073743951 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var82 ) ;
82:
83: static bool isInt ( const std :: string & str@var83 ) ;
84: static bool isFloat ( const std :: string & str@var84 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var85 ) ;
86: static bool isNegative ( const std :: string & str@var86 ) ;
87: static bool isPositive ( const std :: string & str@var87 ) ;
88: static bool isDec ( const std :: string & str@var88 ) ;
89: static bool isFloatHex ( const std :: string & str@var89 ) ;
90: static bool isIntHex ( const std :: string & str@var90 ) ;
91: static bool isOct ( const std :: string & str@var91 ) ;
92: static bool isBin ( const std :: string & str@var92 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var93 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var94 , bool supportMicrosoftExtensions@var95 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var96 , const std :: string & second@var97 ) ;
105: static std :: string subtract ( const std :: string & first@var98 , const std :: string & second@var99 ) ;
106: static std :: string multiply ( const std :: string & first@var100 , const std :: string & second@var101 ) ;
107: static std :: string divide ( const std :: string & first@var102 , const std :: string & second@var103 ) ;
108: static std :: string mod ( const std :: string & first@var104 , const std :: string & second@var105 ) ;
109: static std :: string incdec ( const std :: string & var@var106 , const std :: string & op@var107 ) ;
110: static std :: string calculate ( const std :: string & first@var108 , const std :: string & second@var109 , char action@var110 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var111 ) ;
113: static std :: string cos ( const std :: string & tok@var112 ) ;
114: static std :: string tan ( const std :: string & tok@var113 ) ;
115: static std :: string abs ( const std :: string & tok@var114 ) ;
116: static bool isEqual ( const std :: string & first@var115 , const std :: string & second@var116 ) ;
117: static bool isNotEqual ( const std :: string & first@var117 , const std :: string & second@var118 ) ;
118: static bool isGreater ( const std :: string & first@var119 , const std :: string & second@var120 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var121 , const std :: string & second@var122 ) ;
120: static bool isLess ( const std :: string & first@var123 , const std :: string & second@var124 ) ;
121: static bool isLessEqual ( const std :: string & first@var125 , const std :: string & second@var126 ) ;
122: static bool isNullValue ( const std :: string & str@var127 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var128 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var129 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var130 , std :: string :: size_type iPos@var131 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var132 , const MathLib :: value & v2@var133 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var134 , const MathLib :: value & v2@var135 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var136 , const MathLib :: value & v2@var137 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var138 , const MathLib :: value & v2@var139 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var140 , const MathLib :: value & v2@var141 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var142 , const MathLib :: value & v2@var143 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var144 , const MathLib :: value & v2@var145 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var146 , const MathLib :: value & v2@var147 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var148 , const MathLib :: value & v2@var149 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var150 , const MathLib :: value & v2@var151 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var152 ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var153 ) const {
54: x@var153 ++@expr1073743952 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var154 ) const {
60: x@var154 --@expr1073743953 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var155 , const U & y@var156 ) const {
67: return x@var155 <@expr1073743954 y@var156 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var157 , const U & y@var158 ) const {
74: return std ::@expr1073743955 abs (@expr1073743956 x@var157 -@expr1073743957 y@var158 ) ==@expr1073743958 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var159 , T x@var160 , U y@var161 ) const {
81: result@var159 =@expr1073743959 !@expr1073743960 (@expr1073743961 x@var160 >@expr1073743962 y@var161 ||@expr1073743963 x@var160 <@expr1073743964 y@var161 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var162 = 0 , Bound b@var163 = Bound :: Point )
91: : valueType@var203 ( ValueType :: INT ) ,
92: bound@var204 ( b@var163 ) ,
93: intvalue@var205 ( val@var162 ) ,
94: tokvalue@var206 ( nullptr ) ,
95: floatValue@var207 ( 0.0 ) ,
96: moveKind@var208 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var209 ( val@var162 ) ,
98: condition@var210 ( nullptr ) ,
99: varId@var212 ( 0U ) ,
100: safe@var213 ( false ) ,
101: conditional@var214 ( false ) ,
102: macro@var215 ( false ) ,
103: defaultArg@var216 ( false ) ,
104: indirect@var217 ( 0 ) ,
105: path@var218 ( 0 ) ,
106: wideintvalue@var219 ( val@var162 ) ,
107: subexpressions@var220 ( ) ,
108: capturetok@var221 ( nullptr ) ,
109: lifetimeKind@var222 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var223 ( LifetimeScope :: Local ) ,
111: valueKind@var228 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var164 , long long val@var165 , Bound b@var166 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var167 ) const {
118: if (@expr1073743965 valueType@var203 !=@expr1073743966 rhs@var167 .@expr1073743967 valueType@var168 ) {
119: return false ; }
120: switch (@expr1073743968 valueType@var203 ) {
121: case ValueType ::@expr1073743969 INT :@expr2146
122: case ValueType ::@expr1073743971 CONTAINER_SIZE :@expr2146
123: case ValueType ::@expr1073743973 BUFFER_SIZE :@expr2146
124: case ValueType ::@expr1073743975 ITERATOR_START :@expr2146
125: case ValueType ::@expr1073743977 ITERATOR_END :@expr2146 ;
126: if (@expr2155 intvalue@var205 !=@expr2156 rhs@var167 .@expr2157 intvalue@var169 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073743982 TOK :@expr2146 ;
130: if (@expr2160 tokvalue@var206 !=@expr2161 rhs@var167 .@expr2162 tokvalue@var170 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073743987 FLOAT :@expr2146 ;
134:
135: if (@expr1073743989 floatValue@var207 >@expr1073743990 rhs@var167 .@expr2167 floatValue@var171 ||@expr1073743992 floatValue@var207 <@expr1073743993 rhs@var167 .@expr2167 floatValue@var171 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073743995 MOVED :@expr2146 ;
139: if (@expr1073743997 moveKind@var208 !=@expr1073743998 rhs@var167 .@expr1073743999 moveKind@var172 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744000 UNINIT :@expr2146 ;
143: break ;
144: case ValueType ::@expr1073744002 LIFETIME :@expr2146 ;
145: if (@expr2160 tokvalue@var206 !=@expr2161 rhs@var167 .@expr2162 tokvalue@var170 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744007 SYMBOLIC :@expr2146 ;
149: if (@expr1073744009 !@expr1073744010 sameToken (@expr1073744011 tokvalue@var206 , rhs@var167 .@expr2162 tokvalue@var170 ) ) {
150: return false ; }
151: if (@expr2155 intvalue@var205 !=@expr2156 rhs@var167 .@expr2157 intvalue@var169 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var173 , F f@var174 ) {
160: switch (@expr1073744016 self@var173 .@expr1073744017 valueType@var175 ) {
161: case ValueType ::@expr1073744018 INT :@expr2195
162: case ValueType ::@expr1073744020 SYMBOLIC :@expr2195
163: case ValueType ::@expr1073744022 BUFFER_SIZE :@expr2195
164: case ValueType ::@expr1073744024 CONTAINER_SIZE :@expr2195
165: case ValueType ::@expr1073744026 ITERATOR_START :@expr2195
166: case ValueType ::@expr1073744028 ITERATOR_END :@expr2195 ; {
167: f@var174 (@expr1073744030 self@var173 .@expr1073744031 intvalue@var176 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744032 FLOAT :@expr2195 ; {
171: f@var174 (@expr1073744034 self@var173 .@expr1073744035 floatValue@var177 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744036 UNINIT :@expr2195
175: case ValueType ::@expr1073744038 TOK :@expr2195
176: case ValueType ::@expr1073744040 LIFETIME :@expr2195
177: case ValueType ::@expr1073744042 MOVED :@expr2195 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var178 , Compare compare@var179 , T x@var180 , U y@var181 ) const {
186: result@var178 =@expr1073744044 compare@var179 (@expr1073744045 x@var180 , y@var181 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var182 , const Value & rhs@var183 , Compare compare@var184 , T x@var185 ) const {
191: visitValue (@expr1073744047 rhs@var183 ,
192: std ::@expr1073744048 bind (@expr1073744049 innerVisitor {@expr1073744050 } , std ::@expr1073744051 ref (@expr1073744052 result@var182 ) , std ::@expr1073744053 move (@expr1073744054 compare@var184 ) , x@var185 , std ::@expr1073744055 placeholders ::@expr1073744056 _1@expr1073744046 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var186 , Compare compare@var187 ) const {
198: assert (@expr1073744058 (@expr1073744059 !@expr1073744060 this@expr2237 .@expr1073744062 isSymbolicValue (@expr1073744063 ) &&@expr1073744064 !@expr1073744065 rhs@var186 .@expr1073744066 isSymbolicValue (@expr1073744067 ) ) ||@expr1073744068
199: (@expr1073744069 this@expr2237 .@expr1073744070 valueType@var203 ==@expr1073744071 rhs@var186 .@expr1073744072 valueType@var188 &&@expr1073744073 sameToken (@expr1073744074 this@expr2237 .@expr1073744075 tokvalue@var206 , rhs@var186 .@expr1073744076 tokvalue@var189 ) ) ) ;
200: bool result@var190 ; result@var190 =@expr1073744077 false ;
201: visitValue (@expr1073744078
202: *@expr1073744079 this@expr2237 ,
203: std ::@expr1073744080 bind (@expr1073744081 compareVisitor {@expr1073744082 } , std ::@expr2259 ref (@expr1073744084 result@var190 ) , std ::@expr2259 ref (@expr1073744086 rhs@var186 ) , std ::@expr1073744087 move (@expr1073744088 compare@var187 ) , std ::@expr1073744089 placeholders ::@expr1073744090 _1@expr1073744057 ) ) ;
204: return result@var190 ;
205: }
206:
207: bool operator== ( const Value & rhs@var191 ) const {
208: if (@expr1073744091 !@expr1073744092 equalValue (@expr1073744093 rhs@var191 ) ) {
209: return false ; }
210:
211: return varvalue@var209 ==@expr1073744094 rhs@var191 .@expr1073744095 varvalue@var192 &&@expr1073744096
212: condition@var210 ==@expr1073744097 rhs@var191 .@expr1073744098 condition@var193 &&@expr1073744099
213: varId@var212 ==@expr1073744100 rhs@var191 .@expr1073744101 varId@var194 &&@expr1073744102
214: conditional@var214 ==@expr1073744103 rhs@var191 .@expr1073744104 conditional@var195 &&@expr1073744105
215: defaultArg@var216 ==@expr1073744106 rhs@var191 .@expr1073744107 defaultArg@var196 &&@expr1073744108
216: indirect@var217 ==@expr1073744109 rhs@var191 .@expr1073744110 indirect@var197 &&@expr1073744111
217: valueKind@var228 ==@expr1073744112 rhs@var191 .@expr1073744113 valueKind@var198 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var199 ) const {
221: return !@expr1073744114 (@expr1073744115 *@expr1073744116 this@expr1073744117 ==@expr1073744118 rhs@var199 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var200 ) const {
226: bool result@var201 ; result@var201 =@expr1073744120 false ;
227: visitValue (@expr1073744121 *@expr1073744122 this@expr1073744123 , std ::@expr1073744124 bind (@expr1073744125 equalVisitor {@expr1073744126 } , std ::@expr1073744127 ref (@expr1073744128 result@var201 ) , x@var200 , std ::@expr1073744129 placeholders ::@expr1073744130 _1@expr1073744119 ) ) ;
228: return result@var201 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744131 bound@var204 ==@expr1073744132 Bound ::@expr1073744133 Lower ) {
233: visitValue (@expr1073744134 *@expr2311 this@expr2312 , increment {@expr1073744137 } ) ; }
234: else { if (@expr1073744138 bound@var204 ==@expr1073744139 Bound ::@expr1073744140 Upper ) {
235: visitValue (@expr1073744141 *@expr2311 this@expr2312 , decrement {@expr1073744143 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744144 bound@var204 ==@expr1073744145 Bound ::@expr2322 Lower ) {
240: bound@var204 =@expr1073744147 Bound ::@expr2324 Upper ; }
241: else { if (@expr1073744149 bound@var204 ==@expr1073744150 Bound ::@expr2324 Upper ) {
242: bound@var204 =@expr1073744152 Bound ::@expr2322 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744154 ) ;
247: decreaseRange (@expr1073744155 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var202 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var203 ;
267: bool isIntValue ( ) const {
268: return valueType@var203 ==@expr1073744156 ValueType ::@expr1073744157 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var203 ==@expr1073744158 ValueType ::@expr1073744159 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var203 ==@expr1073744160 ValueType ::@expr1073744161 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var203 ==@expr1073744162 ValueType ::@expr1073744163 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var203 ==@expr1073744164 ValueType ::@expr1073744165 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var203 ==@expr1073744166 ValueType ::@expr1073744167 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var203 ==@expr1073744168 ValueType ::@expr1073744169 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var203 ==@expr1073744170 ValueType ::@expr1073744171 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var203 ==@expr1073744172 ValueType ::@expr1073744173 ITERATOR_START ||@expr1073744174 valueType@var203 ==@expr1073744175 ValueType ::@expr1073744176 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var203 ==@expr1073744177 ValueType ::@expr1073744178 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var203 ==@expr1073744179 ValueType ::@expr1073744180 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var203 ==@expr1073744181 ValueType ::@expr1073744182 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var203 ==@expr1073744184 ValueType ::@expr1073744185 LIFETIME &&@expr1073744186 lifetimeScope@var223 ==@expr1073744187 LifetimeScope ::@expr1073744188 Local@expr1073744183 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var203 ==@expr1073744189 ValueType ::@expr1073744190 LIFETIME &&@expr1073744191 lifetimeScope@var223 ==@expr1073744192 LifetimeScope ::@expr1073744193 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var203 ==@expr1073744194 ValueType ::@expr1073744195 LIFETIME &&@expr1073744196 lifetimeScope@var223 ==@expr1073744197 LifetimeScope ::@expr1073744198 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744199 ) ||@expr1073744200 isUninitValue (@expr1073744201 ) ||@expr1073744202 isLifetimeValue (@expr1073744203 ) ;
318: }
319:
320:
321: Bound bound@var204 ;
322:
323:
324: long long intvalue@var205 ;
325:
326:
327: const Token * tokvalue@var206 ;
328:
329:
330: double floatValue@var207 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var208 ;
334:
335:
336: long long varvalue@var209 ;
337:
338:
339: const Token * condition@var210 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var211 ;
342:
343:
344: int varId@var212 ;
345:
346:
347: bool safe@var213 ;
348:
349:
350: bool conditional@var214 ;
351:
352:
353: bool macro@var215 ;
354:
355:
356: bool defaultArg@var216 ;
357:
358: int indirect@var217 ;
359:
360:
361: long long path@var218 ;
362:
363:
364: long long wideintvalue@var219 ;
365:
366: std :: vector < std :: string > subexpressions@var220 ;
367:
368:
369: const Token * capturetok@var221 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var222 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var223 ;
385:
386: static const char * toString ( MoveKind moveKind@var224 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var225 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var226 ) ;
389: static const char * toString ( Bound bound@var227 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var228 ;
402:
403: void setKnown ( ) {
404: valueKind@var228 =@expr1073744204 ValueKind ::@expr1073744205 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var228 ==@expr1073744206 ValueKind ::@expr1073744207 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var228 =@expr1073744209 ValueKind ::@expr1073744210 Possible@expr1073744208 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var228 ==@expr1073744212 ValueKind ::@expr1073744213 Possible@expr1073744211 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var228 ==@expr1073744214 ValueKind ::@expr1073744215 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var228 =@expr1073744216 ValueKind ::@expr1073744217 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var229 = true ) {
428: if (@expr1073744218 inconclusive@var229 ) {
429: valueKind@var228 =@expr1073744219 ValueKind ::@expr1073744220 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var228 ==@expr1073744221 ValueKind ::@expr1073744222 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744224 isKnown (@expr1073744225 ) ) {
438: valueKind@var228 =@expr1073744226 ValueKind ::@expr1073744227 Possible@expr1073744223 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744228 condition@var210 &&@expr1073744229 !@expr1073744230 defaultArg@var216 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var230 , const Token * tok2@var231 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var232 , const Settings * settings@var233 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var234 , SymbolDatabase * symboldatabase@var235 , ErrorLogger * errorLogger@var236 , const Settings * settings@var237 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var238 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var239 , const Settings * settings@var240 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var241 ,
459: const Settings * settings@var242 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var243 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var244 , const Token * indexTok@var245 , bool possible@var246 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var247 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var248 , const Settings * settings@var249 = nullptr , int depth@var250 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var251 ;
471: bool addressOf@var252 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var253 ;
473: bool inconclusive@var254 ;
474:
475: LifetimeToken ( ) : token@var251 ( nullptr ) , addressOf@var252 ( false ) , errorPath@var253 ( ) , inconclusive@var254 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var255 , ValueFlow :: Value :: ErrorPath errorPath@var256 )
478: : token@var251 ( token@var255 ) , addressOf@var252 ( false ) , errorPath@var253 ( std :: move ( errorPath@var256 ) ) , inconclusive@var254 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var257 , bool addressOf@var258 , ValueFlow :: Value :: ErrorPath errorPath@var259 )
482: : token@var251 ( token@var257 ) , addressOf@var252 ( addressOf@var258 ) , errorPath@var253 ( std :: move ( errorPath@var259 ) ) , inconclusive@var254 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var260 , bool b@var261 ) {
486: for (@expr1073744231 LifetimeToken &@expr1073744232 x@var262 :@expr1073744233 v@var260 ) {
487: x@var262 .@expr1073744234 addressOf@var263 =@expr1073744235 b@var261 ; }
488: return v@var260 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var264 , bool b@var265 ) {
492: for (@expr1073744236 LifetimeToken &@expr1073744237 x@var266 :@expr1073744238 v@var264 ) {
493: x@var266 .@expr1073744239 inconclusive@var267 =@expr1073744240 b@var265 ; }
494: return v@var264 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var268 , ValueFlow :: Value & true_value@var269 , ValueFlow :: Value & false_value@var270 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var271 ) ;
499: const Token * parseCompareInt ( const Token * tok@var272 , ValueFlow :: Value & true_value@var273 , ValueFlow :: Value & false_value@var274 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var275 , long long val@var276 , const Token * varTok@var277 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var278 , const Token * varTok@var279 , long long val@var280 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var281 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var282 ,
508: ValueFlow :: Value & value@var283 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var284 ,
511: bool escape@var285 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var286 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var287 , const Token * lifetime@var288 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var289 , ValueFlow :: Value :: ErrorPath & errorPath@var290 , bool * addressOf@var291 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var292 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var293 , const Settings * settings@var294 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var295 , const ValueFlow :: Value * val@var296 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var297 , const ValueFlow :: Value * val@var298 , ValueFlow :: Value :: ErrorPath & errorPath@var299 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var300 , bool inconclusive@var301 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var302 ,
529: bool inconclusive@var303 = false ,
530: long long path@var304 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var305 , const Scope * defaultScope@var306 = nullptr , bool smallest@var307 = true ) ;

##file cppcheck-2.8/lib/checktype.h

1:
|
31:
32: class ErrorLogger ;
33: class Settings ;
34: class Token ;
35: class Tokenizer ;
36: class ValueType ;
37:
|
43:
44: class CheckType : public Check {
45: public:
46:
47: CheckType ( ) : Check ( myName ( ) ) { }
48:
49:
50: CheckType ( const Tokenizer * tokenizer@var308 , const Settings * settings@var309 , ErrorLogger * errorLogger@var310 )
51: : Check ( myName ( ) , tokenizer@var308 , settings@var309 , errorLogger@var310 ) { }
52:
53:
54: void runChecks ( const Tokenizer * tokenizer@var311 , const Settings * settings@var312 , ErrorLogger * errorLogger@var313 ) override {
55:
56: CheckType checkType@var314 (@expr1073744241 tokenizer@var311 , settings@var312 , errorLogger@var313 ) ;
57: checkType@var314 .@expr1073744242 checkTooBigBitwiseShift (@expr1073744243 ) ;
58: checkType@var314 .@expr1073744244 checkIntegerOverflow (@expr1073744245 ) ;
59: checkType@var314 .@expr1073744246 checkSignConversion (@expr1073744247 ) ;
60: checkType@var314 .@expr1073744248 checkLongCast (@expr1073744249 ) ;
61: checkType@var314 .@expr1073744250 checkFloatToIntegerOverflow (@expr1073744251 ) ;
62: }
63:
64:
65: void checkTooBigBitwiseShift ( ) ;
66:
67:
68: void checkIntegerOverflow ( ) ;
69:
70:
71: void checkSignConversion ( ) ;
72:
73:
74: void checkLongCast ( ) ;
75:
76:
77: void checkFloatToIntegerOverflow ( ) ;
78: void checkFloatToIntegerOverflow ( const Token * tok@var315 , const ValueType * vtint@var316 , const ValueType * vtfloat@var317 , const std :: list < ValueFlow :: Value > * floatValues@var318 ) ;
79:
80: private:
81:
82:
83: void tooBigBitwiseShiftError ( const Token * tok@var319 , int lhsbits@var320 , const ValueFlow :: Value & rhsbits@var321 ) ;
84: void tooBigSignedBitwiseShiftError ( const Token * tok@var322 , int lhsbits@var323 , const ValueFlow :: Value & rhsbits@var324 ) ;
85: void integerOverflowError ( const Token * tok@var325 , const ValueFlow :: Value & value@var326 ) ;
86: void signConversionError ( const Token * tok@var327 , const ValueFlow :: Value * negativeValue@var328 , const bool constvalue@var329 ) ;
87: void longCastAssignError ( const Token * tok@var330 ) ;
88: void longCastReturnError ( const Token * tok@var331 ) ;
89: void floatToIntegerOverflowError ( const Token * tok@var332 , const ValueFlow :: Value & value@var333 ) ;
90:
91: void getErrorMessages ( ErrorLogger * errorLogger@var334 , const Settings * settings@var335 ) const override {
92: CheckType c@var336 (@expr1073744252 nullptr , settings@var335 , errorLogger@var334 ) ;
93: c@var336 .@expr1073744253 tooBigBitwiseShiftError (@expr1073744254 nullptr , 32 , ValueFlow ::@expr2431 Value (@expr1073744256 64 ) ) ;
94: c@var336 .@expr1073744257 tooBigSignedBitwiseShiftError (@expr1073744258 nullptr , 31 , ValueFlow ::@expr2431 Value (@expr1073744260 31 ) ) ;
95: c@var336 .@expr1073744261 integerOverflowError (@expr1073744262 nullptr , ValueFlow ::@expr2431 Value (@expr1073744264 1LL <<@expr1073744265 32 ) ) ;
96: c@var336 .@expr1073744266 signConversionError (@expr1073744267 nullptr , nullptr , false ) ;
97: c@var336 .@expr1073744268 longCastAssignError (@expr1073744269 nullptr ) ;
98: c@var336 .@expr1073744270 longCastReturnError (@expr1073744271 nullptr ) ;
99: ValueFlow ::@expr1073744272 Value f@var337 ;
100: f@var337 .@expr1073744273 valueType@var338 =@expr1073744274 ValueFlow ::@expr2431 Value ::@expr1073744276 ValueType ::@expr1073744277 FLOAT ;
101: f@var337 .@expr1073744278 floatValue@var339 =@expr1073744279 1E100 ;
102: c@var336 .@expr1073744280 floatToIntegerOverflowError (@expr1073744281 nullptr , f@var337 ) ;
103: }
104:
105: static std :: string myName ( ) {
106: return "Type" ;
107: }
108:
109: std :: string classInfo ( ) const override {
110: return "Type checks\n- bitwise shift by too many bits (only enabled when --platform is used)\n- signed integer overflow (only enabled when --platform is used)\n- dangerous sign conversion, when signed value can be negative\n- possible loss of information when assigning int result to long variable\n- possible loss of information when returning int result as long return value\n- float conversion overflow\n"
111:
|
115:
116: ;
117: }
118: } ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var340 ) {
44: if (@expr1073744282 bit@var340 >=@expr1073744283 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073744284 (@expr1073744285 1LL <<@expr1073744286 (@expr1073744287 bit@var340 -@expr1073744288 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var341 ) {
50: if (@expr1073744289 bit@var341 >=@expr1073744290 64 ) {
51: return (@expr2467 ~@expr1073744292 0ULL ) >>@expr1073744293 1 ; }
52: return (@expr2467 1LL <<@expr1073744295 (@expr2467 bit@var341 -@expr1073744297 1 ) ) -@expr1073744298 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var342 ) const {
59: return value@var342 >=@expr1073744299 min_value (@expr1073744300 int_bit@var352 ) &&@expr1073744301 value@var342 <=@expr1073744302 max_value (@expr1073744303 int_bit@var352 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var343 ) const {
63: unsigned long long intMax@var344 ; intMax@var344 =@expr1073744304 max_value (@expr1073744305 int_bit@var352 ) ;
64: return value@var343 <=@expr1073744306 intMax@var344 ;
65: }
66:
67: bool isLongValue ( long long value@var345 ) const {
68: return value@var345 >=@expr1073744307 min_value (@expr1073744308 long_bit@var353 ) &&@expr1073744309 value@var345 <=@expr1073744310 max_value (@expr1073744311 long_bit@var353 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var346 ) const {
72: unsigned long long longMax@var347 ; longMax@var347 =@expr1073744312 max_value (@expr1073744313 long_bit@var353 ) ;
73: return value@var346 <=@expr1073744314 longMax@var347 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var348 ) const {
77: unsigned long long longLongMax@var349 ; longLongMax@var349 =@expr1073744315 max_value (@expr1073744316 long_long_bit@var354 ) ;
78: return value@var348 <=@expr1073744317 longLongMax@var349 ;
79: }
80:
81: int char_bit@var350 ;
82: int short_bit@var351 ;
83: int int_bit@var352 ;
84: int long_bit@var353 ;
85: int long_long_bit@var354 ;
86:
87:
88: int sizeof_bool@var355 ;
89: int sizeof_short@var356 ;
90: int sizeof_int@var357 ;
91: int sizeof_long@var358 ;
92: int sizeof_long_long@var359 ;
93: int sizeof_float@var360 ;
94: int sizeof_double@var361 ;
95: int sizeof_long_double@var362 ;
96: int sizeof_wchar_t@var363 ;
97: int sizeof_size_t@var364 ;
98: int sizeof_pointer@var365 ;
99:
100: char defaultSign@var366 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var367 ;
115:
116:
117: bool platform ( PlatformType type@var368 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var369 [ ] , const std :: string & filename@var370 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var371 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var367 ==@expr1073744318 Win32A ||@expr1073744319
136: platformType@var367 ==@expr1073744320 Win32W ||@expr1073744321
137: platformType@var367 ==@expr1073744322 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073744323 platformType@var367 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var372 ) {
145: switch (@expr1073744324 pt@var372 ) {
146: case Unspecified :@expr2501 ;
147: return "Unspecified" ;
148: case Native :@expr2501 ;
149: return "Native" ;
150: case Win32A :@expr2501 ;
151: return "win32A" ;
152: case Win32W :@expr2501 ;
153: return "win32W" ;
154: case Win64 :@expr2501 ;
155: return "win64" ;
156: case Unix32 :@expr2501 ;
157: return "unix32" ;
158: case Unix64 :@expr2501 ;
159: return "unix64" ;
160: case PlatformFile :@expr2501 ;
161: return "platformFile" ;
162: default :@expr2501 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073744334 char_bit@var350 +@expr1073744335 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073744336 char_bit@var350 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073744337 char_bit@var350 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var373 ) const {
35: return p@var373 .@expr1073744338 first@var374 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var375 ) const {
42: return p@var375 .@expr1073744339 second@var376 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var377 , const T & x@var378 )
48: {
49: return std ::@expr1073744340 find (@expr1073744341 r@var377 .@expr1073744342 begin (@expr1073744343 ) , r@var377 .@expr2520 end (@expr2521 ) , x@var378 ) !=@expr1073744346 r@var377 .@expr2520 end (@expr2521 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var379 , const T & x@var380 )
54: {
55: return std ::@expr1073744349 find (@expr1073744350 r@var379 .@expr1073744351 begin (@expr1073744352 ) , r@var379 .@expr2529 end (@expr2530 ) , x@var380 ) !=@expr1073744355 r@var379 .@expr2529 end (@expr2530 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var381 , const U & x@var382 )
60: {
61: return std ::@expr1073744358 find (@expr1073744359 r@var381 .@expr1073744360 begin (@expr1073744361 ) , r@var381 .@expr2538 end (@expr2539 ) , x@var382 ) !=@expr1073744364 r@var381 .@expr2538 end (@expr2539 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var383 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744367 t@var383 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var384 , char c@var385 )
74: {
75: return !@expr1073744368 str@var384 .@expr1073744369 empty (@expr1073744370 ) &&@expr1073744371 str@var384 .@expr1073744372 back (@expr1073744373 ) ==@expr1073744374 c@var385 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var386 , const char end@var387 [ ] , unsigned long endlen@var388 )
79: {
80: return (@expr2551 str@var386 .@expr2552 size (@expr2553 ) >=@expr1073744378 endlen@var388 ) &&@expr1073744379 (@expr2551 str@var386 .@expr1073744381 compare (@expr1073744382 str@var386 .@expr2552 size (@expr2553 ) -@expr1073744385 endlen@var388 , endlen@var388 , end@var387 ) ==@expr1073744386 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var389 , const char ( & end@var390 ) [ N ] )
85: {
86: return endsWith (@expr1073744388 str@var389 , end@var390 , N@expr1073744387 -@expr1073744389 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var391 , char q@var392 , const std :: string & p@var393 )
90: {
91: if (@expr1073744390 !@expr1073744391 endsWith (@expr1073744392 str@var391 , q@var392 ) ) {
92: return false ; }
93: if (@expr1073744393 (@expr1073744394 str@var391 .@expr1073744395 length (@expr1073744396 ) +@expr1073744397 1 ) >@expr1073744398 p@var393 .@expr1073744399 length (@expr1073744400 ) &&@expr1073744401 (@expr1073744402 str@var391 .@expr1073744403 compare (@expr1073744404 0 , p@var393 .@expr1073744405 size (@expr1073744406 ) +@expr1073744407 1 , p@var393 +@expr1073744408 q@var392 ) ==@expr1073744409 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var394 , char q@var395 )
99: {
100: static const std ::@expr2586 vector < std ::@expr2586 string > suffixes@var396 {@expr1073744412 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744413 const std ::@expr2586 string &@expr1073744415 p@var397 :@expr1073744416 suffixes@var396 ) {
102: if (@expr1073744417 isPrefixStringCharLiteral (@expr1073744418 str@var394 , q@var395 , p@var397 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var398 )
109: {
110: return isStringCharLiteral (@expr1073744419 str@var398 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var399 )
114: {
115: return isStringCharLiteral (@expr1073744420 str@var399 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var400 , char q@var401 )
119: {
120: const unsigned long quotePos@var402 =@expr1073744421 str@var400 .@expr1073744422 find (@expr1073744423 q@var401 ) ;
121: return str@var400 .@expr1073744424 substr (@expr1073744425 quotePos@var402 +@expr1073744426 1U , str@var400 .@expr1073744427 size (@expr1073744428 ) -@expr1073744429 quotePos@var402 -@expr1073744430 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var403 )
125: {
126: if (@expr1073744431 isStringLiteral (@expr1073744432 str@var403 ) ) {
127: return getStringCharLiteral (@expr1073744433 str@var403 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var404 )
132: {
133: if (@expr1073744434 isCharLiteral (@expr1073744435 str@var404 ) ) {
134: return getStringCharLiteral (@expr1073744436 str@var404 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var405 )
139: {
140: if (@expr1073744437 i@var405 ==@expr1073744438 1 ) {
141: return "st" ; }
142: if (@expr1073744439 i@var405 ==@expr1073744440 2 ) {
143: return "nd" ; }
144: if (@expr1073744441 i@var405 ==@expr1073744442 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var406 , const std :: string & rhs@var407 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var408 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var409 , const std :: string & name@var410 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var411 , const std :: string & name@var412 ) ;
156:
157: void strTolower ( std :: string & str@var413 ) ;

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var414 , const std :: string & rhs@var415 ) const {
41: return caseInsensitiveStringCompare (@expr1073744443 lhs@var414 , rhs@var415 ) <@expr1073744444 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var423 ( cppcheck :: Platform :: Unspecified ) , msc@var424 ( false ) , useMfc@var425 ( false ) { }
67: std :: string cfg@var416 ;
68: std :: string filename@var417 ;
69: std :: string defines@var418 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var418 +@expr1073744445 (@expr1073744446 msc@var424 ?@expr1073744447 ";_MSC_VER=1900" :@expr1073744448 "" ) +@expr1073744449 (@expr1073744450 useMfc@var425 ?@expr1073744451 ";__AFXWIN_H__=1" :@expr1073744452 "" ) ;
72: }
73: std :: set < std :: string > undefs@var419 ;
74: std :: list < std :: string > includePaths@var420 ;
75: std :: list < std :: string > systemIncludePaths@var421 ;
76: std :: string standard@var422 ;
77: cppcheck :: Platform :: PlatformType platformType@var423 ;
78: bool msc@var424 ;
79: bool useMfc@var425 ;
80:
81: void parseCommand ( std :: string command@var426 ) ;
82: void setDefines ( std :: string defs@var427 ) ;
83: void setIncludePaths ( const std :: string & basepath@var428 , const std :: list < std :: string > & in@var429 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var430 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var431 ;
86: Type projectType@var432 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var433 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous0 {
96: std :: string analyzeAllVsConfigs@var434 ;
97: std :: vector < std :: string > pathNames@var435 ;
98: std :: list < std :: string > libraries@var436 ;
99: std :: list < std :: string > excludedPaths@var437 ;
100: std :: list < std :: string > checkVsConfigs@var438 ;
101: std :: string projectFile@var439 ;
102: std :: string platform@var440 ;
103: } ; struct Anonymous0 guiProject@var441 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var442 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var443 ) ;
107:
108: Type import ( const std :: string & filename@var444 , Settings * settings@var445 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var446 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var447 , Settings * settings@var448 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var449 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var450 , const std :: string & path@var451 , const std :: vector < std :: string > & fileFilters@var452 ) ;
115: bool importVcxproj ( const std :: string & filename@var453 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var454 , const std :: string & additionalIncludeDirectories@var455 , const std :: vector < std :: string > & fileFilters@var456 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var457 ) ;
117:
118: static void printError ( const std :: string & message@var458 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var459 ) ;
121:
122: std :: string mPath@var460 ;
123: std :: set < std :: string > mAllVSConfigs@var461 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var462 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var463 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var464 [ 2 ] = "1" ;
131: const char BuildDirElementName@var465 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var466 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var467 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var468 [ 7 ] = "parser" ;
135: const char BugHunting@var469 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var470 [ 11 ] = "includedir" ;
137: const char DirElementName@var471 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var472 [ 5 ] = "name" ;
139: const char DefinesElementName@var473 [ 8 ] = "defines" ;
140: const char DefineName@var474 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var475 [ 5 ] = "name" ;
142: const char UndefinesElementName@var476 [ 10 ] = "undefines" ;
143: const char UndefineName@var477 [ 9 ] = "undefine" ;
144: const char PathsElementName@var478 [ 6 ] = "paths" ;
145: const char PathName@var479 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var480 [ 5 ] = "name" ;
147: const char RootPathName@var481 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var482 [ 5 ] = "name" ;
149: const char IgnoreElementName@var483 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var484 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var485 [ 5 ] = "name" ;
152: const char ExcludeElementName@var486 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var487 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var488 [ 5 ] = "name" ;
155: const char FunctionContracts@var489 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var490 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var491 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var492 [ 8 ] = "library" ;
159: const char PlatformElementName@var493 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var494 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var495 [ 12 ] = "suppression" ;
162: const char AddonElementName@var496 [ 6 ] = "addon" ;
163: const char AddonsElementName@var497 [ 7 ] = "addons" ;
164: const char ToolElementName@var498 [ 5 ] = "tool" ;
165: const char ToolsElementName@var499 [ 6 ] = "tools" ;
166: const char TagsElementName@var500 [ 5 ] = "tags" ;
167: const char TagElementName@var501 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var502 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var503 [ 4 ] = "tag" ;
170: const char WarningElementName@var504 [ 8 ] = "warning" ;
171: const char HashAttributeName@var505 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var506 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var507 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var508 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var509 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var510 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var511 [ 11 ] = "clang-tidy" ;
178: const char Name@var512 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var513 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var514 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var515 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var516 ;
42:
43:
44: std :: string stdValue@var517 ;
45:
46:
47: Standards ( ) : c@var515 ( CLatest ) , cpp@var516 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var518 ) {
50: stdValue@var517 =@expr1073744453 str@var518 ;
51: if (@expr1073744454 str@var518 ==@expr1073744455 "c89" ||@expr1073744456 str@var518 ==@expr1073744457 "C89" ) {
52: c@var515 =@expr1073744458 C89 ;
53: return true ;
54: }
55: if (@expr1073744459 str@var518 ==@expr1073744460 "c99" ||@expr1073744461 str@var518 ==@expr1073744462 "C99" ) {
56: c@var515 =@expr1073744463 C99 ;
57: return true ;
58: }
59: if (@expr1073744464 str@var518 ==@expr1073744465 "c11" ||@expr1073744466 str@var518 ==@expr1073744467 "C11" ) {
60: c@var515 =@expr1073744468 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744469 c@var515 ) {
67: case C89 :@expr2646 ;
68: return "c89" ;
69: case C99 :@expr2646 ;
70: return "c99" ;
71: case C11 :@expr2646 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var519 ) {
77: if (@expr1073744473 std@var519 ==@expr1073744474 "c89" ) {
78: return Standards ::@expr1073744475 C89 ;
79: }
80: if (@expr1073744476 std@var519 ==@expr1073744477 "c99" ) {
81: return Standards ::@expr1073744478 C99 ;
82: }
83: if (@expr1073744479 std@var519 ==@expr1073744480 "c11" ) {
84: return Standards ::@expr1073744481 C11 ;
85: }
86: return Standards ::@expr1073744482 CLatest ;
87: }
88: bool setCPP ( std :: string str@var520 ) {
89: stdValue@var517 =@expr1073744483 str@var520 ;
90: strTolower (@expr1073744484 str@var520 ) ;
91: cpp@var516 =@expr1073744485 getCPP (@expr1073744486 str@var520 ) ;
92: return !@expr1073744487 stdValue@var517 .@expr1073744488 empty (@expr1073744489 ) &&@expr1073744490 str@var520 ==@expr1073744491 getCPP (@expr1073744492 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744493 cpp@var516 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var521 ) {
98: switch (@expr1073744494 std@var521 ) {
99: case CPP03 :@expr2671 ;
100: return "c++03" ;
101: case CPP11 :@expr2671 ;
102: return "c++11" ;
103: case CPP14 :@expr2671 ;
104: return "c++14" ;
105: case CPP17 :@expr2671 ;
106: return "c++17" ;
107: case CPP20 :@expr2671 ;
108: return "c++20" ;
109: case CPP23 :@expr2671 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var522 ) {
115: if (@expr1073744501 std@var522 ==@expr1073744502 "c++03" ) {
116: return Standards ::@expr1073744503 CPP03 ;
117: }
118: if (@expr1073744504 std@var522 ==@expr1073744505 "c++11" ) {
119: return Standards ::@expr1073744506 CPP11 ;
120: }
121: if (@expr1073744507 std@var522 ==@expr1073744508 "c++14" ) {
122: return Standards ::@expr1073744509 CPP14 ;
123: }
124: if (@expr1073744510 std@var522 ==@expr1073744511 "c++17" ) {
125: return Standards ::@expr1073744512 CPP17 ;
126: }
127: if (@expr1073744513 std@var522 ==@expr1073744514 "c++20" ) {
128: return Standards ::@expr1073744515 CPP20 ;
129: }
130: if (@expr1073744516 std@var522 ==@expr1073744517 "c++23" ) {
131: return Standards ::@expr1073744518 CPP23 ;
132: }
133: return Standards ::@expr1073744519 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var526 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var523 ) : errorcode@var526 ( e@var523 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var524 , T && r@var525 ) : errorcode@var526 ( e@var524 ) , reason@var527 ( r@var525 ) { }
66: ErrorCode errorcode@var526 ;
67: std :: string reason@var527 ;
68: } ;
69:
70: Error load ( const char exename@var528 [ ] , const char path@var529 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var530 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var531 [ ] , unsigned long len@var532 ) ;
75:
76: struct AllocFunc {
77: int groupId@var533 ;
78: int arg@var534 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var535 ;
81: int bufferSizeArg1@var536 ;
82: int bufferSizeArg2@var537 ;
83: int reallocArg@var538 ;
84: bool initData@var539 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var540 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var541 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var542 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var543 , int arg@var544 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var545 , int arg@var546 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var547 , int arg@var548 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var549 [ ] ) const {
107: return getAllocDealloc (@expr1073744520 mAlloc@var815 , name@var549 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var550 [ ] ) const {
112: return getAllocDealloc (@expr1073744521 mDealloc@var816 , name@var550 ) ;
113: }
114:
115:
116: int allocId ( const char name@var551 [ ] ) const {
117: const AllocFunc * af@var552 ; af@var552 =@expr1073744522 getAllocDealloc (@expr1073744523 mAlloc@var815 , name@var551 ) ;
118: return af@var552 ?@expr1073744524 af@var552 .@expr1073744525 groupId@var553 :@expr1073744526 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var554 [ ] ) const {
123: const AllocFunc * af@var555 ; af@var555 =@expr1073744527 getAllocDealloc (@expr1073744528 mDealloc@var816 , name@var554 ) ;
124: return af@var555 ?@expr1073744529 af@var555 .@expr1073744530 groupId@var556 :@expr1073744531 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var557 , int id@var558 , int arg@var559 ) {
129: mAlloc@var815 [@expr2708 functionname@var557 ] .@expr1073744533 groupId@var2102 =@expr1073744534 id@var558 ;
130: mAlloc@var815 [@expr2708 functionname@var557 ] .@expr1073744536 arg@var2103 =@expr1073744537 arg@var559 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var560 , int id@var561 , int arg@var562 ) {
134: mDealloc@var816 [@expr2714 functionname@var560 ] .@expr1073744539 groupId@var2104 =@expr1073744540 id@var561 ;
135: mDealloc@var816 [@expr2714 functionname@var560 ] .@expr1073744542 arg@var2105 =@expr1073744543 arg@var562 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var563 , int id@var564 , int arg@var565 , int reallocArg@var566 = 1 ) {
139: mRealloc@var817 [@expr2720 functionname@var563 ] .@expr1073744545 groupId@var2106 =@expr1073744546 id@var564 ;
140: mRealloc@var817 [@expr2720 functionname@var563 ] .@expr1073744548 arg@var2107 =@expr1073744549 arg@var565 ;
141: mRealloc@var817 [@expr2720 functionname@var563 ] .@expr1073744551 reallocArg@var2108 =@expr1073744552 reallocArg@var566 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var567 , bool noreturn@var568 ) {
146: mNoReturn@var818 [@expr1073744553 funcname@var567 ] =@expr1073744554 noreturn@var568 ?@expr1073744555 FalseTrueMaybe ::@expr1073744556 True :@expr1073744557 FalseTrueMaybe ::@expr1073744558 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var569 ) ;
150:
151:
152: static bool ismemory ( const int id@var570 ) {
153: return (@expr2735 (@expr2735 id@var570 >@expr1073744561 0 ) &&@expr1073744562 (@expr2735 (@expr2735 id@var570 &@expr1073744565 1 ) ==@expr1073744566 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var571 ) {
156: return (@expr2743 (@expr2743 func@var571 .@expr2745 groupId@var572 >@expr1073744570 0 ) &&@expr1073744571 (@expr2743 (@expr2743 func@var571 .@expr2745 groupId@var572 &@expr1073744575 1 ) ==@expr1073744576 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var573 ) {
161: return (@expr2753 (@expr2753 id@var573 >@expr1073744579 0 ) &&@expr1073744580 (@expr2753 (@expr2753 id@var573 &@expr1073744583 1 ) ==@expr1073744584 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var574 ) {
164: return (@expr2761 (@expr2761 func@var574 .@expr2763 groupId@var575 >@expr1073744588 0 ) &&@expr1073744589 (@expr2761 (@expr2761 func@var574 .@expr2763 groupId@var575 &@expr1073744593 1 ) ==@expr1073744594 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var576 ) const ;
168: int formatstr_argno ( const Token * ftok@var577 ) const ;
169: bool formatstr_scan ( const Token * ftok@var578 ) const ;
170: bool formatstr_secure ( const Token * ftok@var579 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var580 ;
174: int ptr2Arg@var581 ;
175: int sizeArg@var582 ;
176: int strlenArg@var583 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var584 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var585 ;
182: Standards standards@var586 ;
183: Severity :: SeverityType severity@var587 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var588 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var589 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var590 ) const ;
191: bool matchArguments ( const Token * ftok@var591 , const std :: string & functionName@var592 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var593 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var594 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var595 ) const ;
198: int returnValueContainer ( const Token * ftok@var596 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var597 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var598 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var599 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var600 , std :: string * unknownFunc@var601 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var611 ( -1 ) ,
210: size_templateArgNo@var613 ( -1 ) ,
211: arrayLike_indexOp@var614 ( false ) ,
212: stdStringLike@var615 ( false ) ,
213: stdAssociativeLike@var616 ( false ) ,
214: opLessAllowed@var617 ( true ) ,
215: hasInitializerListConstructor@var618 ( false ) ,
216: unstableErase@var619 ( false ) ,
217: unstableInsert@var620 ( false ) ,
218: view@var621 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var602 ;
248: Yield yield@var603 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var604 ;
252: int templateParameter@var605 ;
253: } ;
254: std :: string startPattern@var606 ; std :: string startPattern2@var607 ; std :: string endPattern@var608 ; std :: string itEndPattern@var609 ;
255: std :: map < std :: string , Function > functions@var610 ;
256: int type_templateArgNo@var611 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var612 ;
258: int size_templateArgNo@var613 ;
259: bool arrayLike_indexOp@var614 ;
260: bool stdStringLike@var615 ;
261: bool stdAssociativeLike@var616 ;
262: bool opLessAllowed@var617 ;
263: bool hasInitializerListConstructor@var618 ;
264: bool unstableErase@var619 ;
265: bool unstableInsert@var620 ;
266: bool view@var621 ;
267:
268: Action getAction ( const std :: string & function@var622 ) const {
269: const std ::@expr1073744595 map < std ::@expr1073744596 string , Function > ::@expr1073744597 const_iterator i@var623 =@expr1073744598 functions@var610 .@expr1073744599 find (@expr1073744600 function@var622 ) ;
270: if (@expr1073744601 i@var623 !=@expr1073744602 functions@var610 .@expr1073744603 end (@expr1073744604 ) ) {
271: return i@var623 .@expr1073744605 second@var624 .@expr1073744606 action@var625 ; }
272: return Action ::@expr1073744607 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var626 ) const {
276: const std ::@expr1073744608 map < std ::@expr1073744609 string , Function > ::@expr1073744610 const_iterator i@var627 =@expr1073744611 functions@var610 .@expr1073744612 find (@expr1073744613 function@var626 ) ;
277: if (@expr1073744614 i@var627 !=@expr1073744615 functions@var610 .@expr1073744616 end (@expr1073744617 ) ) {
278: return i@var627 .@expr1073744618 second@var628 .@expr1073744619 yield@var629 ; }
279: return Yield ::@expr1073744620 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var630 ) ;
283: static Action actionFrom ( const std :: string & actionName@var631 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var632 ;
286: const Container * detectContainer ( const Token * typeStart@var633 , bool iterator@var634 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var635 , bool * isIterator@var636 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var637 ( false ) ,
293: notnull@var638 ( false ) ,
294: notuninit@var639 ( -1 ) ,
295: formatstr@var640 ( false ) ,
296: strz@var641 ( false ) ,
297: optional@var642 ( false ) ,
298: variadic@var643 ( false ) ,
299: iteratorInfo@var649 ( ) ,
300: direction@var657 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var637 ;
303: bool notnull@var638 ;
304: int notuninit@var639 ;
305: bool formatstr@var640 ;
306: bool strz@var641 ;
307: bool optional@var642 ;
308: bool variadic@var643 ;
309: std :: string valid@var644 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var645 ( 0 ) , it@var646 ( false ) , first@var647 ( false ) , last@var648 ( false ) { }
314:
315: int container@var645 ;
316: bool it@var646 ;
317: bool first@var647 ;
318: bool last@var648 ;
319: } ;
320: IteratorInfo iteratorInfo@var649 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var650 , int a@var651 ) : type@var652 ( t@var650 ) , arg@var653 ( a@var651 ) , arg2@var654 ( 0 ) , value@var655 ( 0 ) { }
326: Type type@var652 ;
327: int arg@var653 ;
328: int arg2@var654 ;
329: long long value@var655 ;
330: } ;
331: std :: vector < MinSize > minsizes@var656 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var657 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var658 ;
344: bool use@var659 ;
345: bool leakignore@var660 ;
346: bool isconst@var661 ;
347: bool ispure@var662 ;
348: UseRetValType useretval@var663 ;
349: bool ignore@var664 ;
350: bool formatstr@var665 ;
351: bool formatstr_scan@var666 ;
352: bool formatstr_secure@var667 ;
353: Container :: Action containerAction@var668 ;
354: Container :: Yield containerYield@var669 ;
355: Function ( )
356: : use@var659 ( false ) ,
357: leakignore@var660 ( false ) ,
358: isconst@var661 ( false ) ,
359: ispure@var662 ( false ) ,
360: useretval@var663 ( UseRetValType :: NONE ) ,
361: ignore@var664 ( false ) ,
362: formatstr@var665 ( false ) ,
363: formatstr_scan@var666 ( false ) ,
364: formatstr_secure@var667 ( false ) ,
365: containerAction@var668 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var669 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var670 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var671 ;
372: bool isUse ( const std :: string & functionName@var672 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var673 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var674 , bool pure@var675 ) const ;
375: bool isFunctionConst ( const Token * ftok@var676 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var677 , int argnr@var678 ) const {
378: const ArgumentChecks * arg@var679 ; arg@var679 =@expr1073744621 getarg (@expr1073744622 ftok@var677 , argnr@var678 ) ;
379: return arg@var679 &&@expr1073744623 arg@var679 .@expr1073744624 notbool@var680 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var681 , int argnr@var682 ) const ;
383: bool isuninitargbad ( const Token * ftok@var683 , int argnr@var684 , int indirect@var685 = 0 , bool * hasIndirect@var686 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var687 , int argnr@var688 ) const {
386: const ArgumentChecks * arg@var689 ; arg@var689 =@expr1073744625 getarg (@expr1073744626 ftok@var687 , argnr@var688 ) ;
387: return arg@var689 &&@expr1073744627 arg@var689 .@expr1073744628 formatstr@var690 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var691 , int argnr@var692 ) const {
391: const ArgumentChecks * arg@var693 ; arg@var693 =@expr1073744629 getarg (@expr1073744630 ftok@var691 , argnr@var692 ) ;
392: return arg@var693 &&@expr1073744631 arg@var693 .@expr1073744632 strz@var694 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var695 , int argnr@var696 , const long long argvalue@var697 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var698 , int argnr@var699 , double argvalue@var700 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var701 , int argnr@var702 ) const {
399: const ArgumentChecks * arg@var703 ; arg@var703 =@expr1073744633 getarg (@expr1073744634 ftok@var701 , argnr@var702 ) ;
400: return arg@var703 ?@expr1073744635 arg@var703 .@expr1073744636 valid@var704 :@expr1073744637 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var705 ;
405: std :: string op1@var706 ;
406: std :: string op2@var707 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744638 isInt (@expr1073744639 op1@var706 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var708 , int argnr@var709 ) const {
413: const ArgumentChecks * arg@var710 ; arg@var710 =@expr1073744640 getarg (@expr1073744641 ftok@var708 , argnr@var709 ) ;
414: return arg@var710 &&@expr1073744642 arg@var710 .@expr2819 iteratorInfo@var711 .@expr1073744644 it@var712 ?@expr1073744645 &@expr1073744646 arg@var710 .@expr2819 iteratorInfo@var711 :@expr1073744648 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var713 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var714 , int argnr@var715 ) const {
420: const ArgumentChecks * arg@var716 ; arg@var716 =@expr1073744649 getarg (@expr1073744650 ftok@var714 , argnr@var715 ) ;
421: return arg@var716 ?@expr1073744651 &@expr1073744652 arg@var716 .@expr1073744653 minsizes@var717 :@expr1073744654 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var718 , int argnr@var719 ) const ;
425:
426: bool markupFile ( const std :: string & path@var720 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var721 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var825 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var722 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var723 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var724 , const std :: string & token@var725 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var726 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var727 ) const ;
443: const std :: string & blockend ( const std :: string & file@var728 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var729 , const std :: string & keyword@var730 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var731 ) const {
448: return mExporters@var828 .@expr1073744655 find (@expr1073744656 prefix@var731 ) !=@expr1073744657 mExporters@var828 .@expr1073744658 end (@expr1073744659 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var732 , const std :: string & token@var733 ) const {
452: const std ::@expr1073744660 map < std ::@expr1073744661 string , ExportedFunctions > ::@expr1073744662 const_iterator it@var734 =@expr1073744663 mExporters@var828 .@expr1073744664 find (@expr1073744665 prefix@var732 ) ;
453: return (@expr1073744666 it@var734 !=@expr1073744667 mExporters@var828 .@expr1073744668 end (@expr1073744669 ) &&@expr1073744670 it@var734 .@expr1073744671 second@var735 .@expr1073744672 isPrefix (@expr1073744673 token@var733 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var736 , const std :: string & token@var737 ) const {
457: const std ::@expr1073744674 map < std ::@expr1073744675 string , ExportedFunctions > ::@expr1073744676 const_iterator it@var738 =@expr1073744677 mExporters@var828 .@expr1073744678 find (@expr1073744679 prefix@var736 ) ;
458: return (@expr1073744680 it@var738 !=@expr1073744681 mExporters@var828 .@expr1073744682 end (@expr1073744683 ) &&@expr1073744684 it@var738 .@expr1073744685 second@var739 .@expr1073744686 isSuffix (@expr1073744687 token@var737 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var740 , const std :: string & importer@var741 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var742 , Container :: Yield yield@var743 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var744 , Container :: Action action@var745 ) const ;
465:
466: bool isreflection ( const std :: string & token@var746 ) const {
467: return mReflection@var830 .@expr1073744688 find (@expr1073744689 token@var746 ) !=@expr1073744690 mReflection@var830 .@expr1073744691 end (@expr1073744692 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var747 ) const {
471: const std ::@expr1073744693 map < std ::@expr1073744694 string , int > ::@expr1073744695 const_iterator it@var748 =@expr1073744696 mReflection@var830 .@expr1073744697 find (@expr1073744698 token@var747 ) ;
472: if (@expr1073744699 it@var748 !=@expr1073744700 mReflection@var830 .@expr1073744701 end (@expr1073744702 ) ) {
473: return it@var748 .@expr1073744703 second@var749 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var750 ;
478:
479: struct SmartPointer {
480: std :: string name@var751 ; name@var751 = "" ;
481: bool unique@var752 ; unique@var752 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var753 ;
485: bool isSmartPointer ( const Token * tok@var754 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var755 ) const ;
487:
488: struct PodType {
489: unsigned int size@var756 ;
490: char sign@var757 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var758 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var759 ) const {
494: const std ::@expr1073744704 unordered_map < std ::@expr1073744705 string , PodType > ::@expr1073744706 const_iterator it@var760 =@expr1073744707 mPodTypes@var831 .@expr1073744708 find (@expr1073744709 name@var759 ) ;
495: return (@expr2886 it@var760 !=@expr1073744711 mPodTypes@var831 .@expr1073744712 end (@expr1073744713 ) ) ?@expr1073744714 &@expr1073744715 (@expr2886 it@var760 .@expr1073744717 second@var761 ) :@expr1073744718 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var772 ( false )
501: , mUnsigned@var773 ( false )
502: , mLong@var774 ( false )
503: , mPointer@var775 ( false )
504: , mPtrPtr@var776 ( false )
505: , mConstPtr@var777 ( false ) { }
506: bool operator== ( const PlatformType & type@var762 ) const {
507: return (@expr1073744719 mSigned@var772 ==@expr1073744720 type@var762 .@expr1073744721 mSigned@var763 &&@expr1073744722
508: mUnsigned@var773 ==@expr1073744723 type@var762 .@expr1073744724 mUnsigned@var764 &&@expr1073744725
509: mLong@var774 ==@expr1073744726 type@var762 .@expr1073744727 mLong@var765 &&@expr1073744728
510: mPointer@var775 ==@expr1073744729 type@var762 .@expr1073744730 mPointer@var766 &&@expr1073744731
511: mPtrPtr@var776 ==@expr1073744732 type@var762 .@expr1073744733 mPtrPtr@var767 &&@expr1073744734
512: mConstPtr@var777 ==@expr1073744735 type@var762 .@expr1073744736 mConstPtr@var768 &&@expr1073744737
513: mType@var771 ==@expr1073744738 type@var762 .@expr1073744739 mType@var769 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var770 ) const {
516: return !@expr1073744740 (@expr1073744741 *@expr1073744742 this@expr1073744743 ==@expr1073744744 type@var770 ) ;
517: }
518: std :: string mType@var771 ;
519: bool mSigned@var772 ;
520: bool mUnsigned@var773 ;
521: bool mLong@var774 ;
522: bool mPointer@var775 ;
523: bool mPtrPtr@var776 ;
524: bool mConstPtr@var777 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var778 ) const {
529: const std ::@expr1073744745 map < std ::@expr1073744746 string , PlatformType > ::@expr1073744747 const_iterator it@var779 =@expr1073744748 mPlatformTypes@var781 .@expr1073744749 find (@expr1073744750 name@var778 ) ;
530: return (@expr2927 it@var779 !=@expr1073744752 mPlatformTypes@var781 .@expr1073744753 end (@expr1073744754 ) ) ?@expr1073744755 &@expr1073744756 (@expr2927 it@var779 .@expr1073744758 second@var780 ) :@expr1073744759 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var781 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var782 , const std :: string & platform@var783 ) const {
536: const std ::@expr1073744760 map < std ::@expr2937 string , Platform > ::@expr1073744762 const_iterator it@var784 =@expr1073744763 mPlatforms@var833 .@expr1073744764 find (@expr1073744765 platform@var783 ) ;
537: if (@expr1073744766 it@var784 !=@expr1073744767 mPlatforms@var833 .@expr1073744768 end (@expr1073744769 ) ) {
538: const PlatformType * const type@var785 ; type@var785 =@expr1073744770 it@var784 .@expr1073744771 second@var786 .@expr1073744772 platform_type (@expr1073744773 name@var782 ) ;
539: if (@expr1073744774 type@var785 ) {
540: return type@var785 ; }
541: }
542:
543: const std ::@expr1073744775 map < std ::@expr2937 string , PlatformType > ::@expr1073744777 const_iterator it2@var787 =@expr1073744778 mPlatformTypes@var832 .@expr1073744779 find (@expr1073744780 name@var782 ) ;
544: return (@expr2957 it2@var787 !=@expr1073744782 mPlatformTypes@var832 .@expr1073744783 end (@expr1073744784 ) ) ?@expr1073744785 &@expr1073744786 (@expr2957 it2@var787 .@expr1073744788 second@var788 ) :@expr1073744789 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var789 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var790 , Library :: Container :: Yield y@var791 , const std :: string & fallback@var792 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var793 , const std :: string & typeName@var794 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var795 , const std :: string & name@var796 , std :: set < std :: string > & unknown_elements@var797 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var798 ) {
565: mPrefixes@var802 .@expr1073744790 insert (@expr1073744791 prefix@var798 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var799 ) {
568: mSuffixes@var803 .@expr1073744792 insert (@expr1073744793 suffix@var799 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var800 ) const {
571: return (@expr1073744794 mPrefixes@var802 .@expr1073744795 find (@expr1073744796 prefix@var800 ) !=@expr1073744797 mPrefixes@var802 .@expr1073744798 end (@expr1073744799 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var801 ) const {
574: return (@expr1073744800 mSuffixes@var803 .@expr1073744801 find (@expr1073744802 suffix@var801 ) !=@expr1073744803 mSuffixes@var803 .@expr1073744804 end (@expr1073744805 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var802 ;
579: std :: set < std :: string > mSuffixes@var803 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var811 ( 0 ) { }
584:
585: void setStart ( const char * s@var804 ) {
586: mStart@var809 =@expr1073744806 s@var804 ;
587: }
588: void setEnd ( const char * e@var805 ) {
589: mEnd@var810 =@expr1073744807 e@var805 ;
590: }
591: void setOffset ( const int o@var806 ) {
592: mOffset@var811 =@expr1073744808 o@var806 ;
593: }
594: void addBlock ( const char * blockName@var807 ) {
595: mBlocks@var812 .@expr1073744809 insert (@expr1073744810 blockName@var807 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var809 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var810 ;
602: }
603: int offset ( ) const {
604: return mOffset@var811 ;
605: }
606: bool isBlock ( const std :: string & blockName@var808 ) const {
607: return mBlocks@var812 .@expr1073744811 find (@expr1073744812 blockName@var808 ) !=@expr1073744813 mBlocks@var812 .@expr1073744814 end (@expr1073744815 ) ;
608: }
609:
610: private:
611: std :: string mStart@var809 ;
612: std :: string mEnd@var810 ;
613: int mOffset@var811 ;
614: std :: set < std :: string > mBlocks@var812 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var813 ;
618: std :: set < std :: string > mFiles@var814 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var815 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var816 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var817 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var818 ;
623: std :: map < std :: string , std :: string > mReturnValue@var819 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var820 ;
625: std :: map < std :: string , int > mReturnValueContainer@var821 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var822 ;
627: std :: map < std :: string , bool > mReportErrors@var823 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var824 ;
629: std :: set < std :: string > mMarkupExtensions@var825 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var826 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var827 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var828 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var829 ;
634: std :: map < std :: string , int > mReflection@var830 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var831 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var832 ;
637: std :: map < std :: string , Platform > mPlatforms@var833 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var834 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var835 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var836 , int argnr@var837 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var838 , bool * error@var839 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var840 , const std :: string & name@var841 ) {
646: const std ::@expr1073744816 map < std ::@expr1073744817 string , AllocFunc > ::@expr1073744818 const_iterator it@var842 =@expr1073744819 data@var840 .@expr1073744820 find (@expr1073744821 name@var841 ) ;
647: return (@expr1073744822 it@var842 ==@expr1073744823 data@var840 .@expr1073744824 end (@expr1073744825 ) ) ?@expr1073744826 nullptr :@expr1073744827 &@expr1073744828 it@var842 .@expr1073744829 second@var843 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var844 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var845 ,
654: const Settings * settings@var846 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var847 = nullptr ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var848 ;
43: std :: string errorId@var849 ;
44: void setFileName ( const std :: string & s@var850 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var854 ;
47: }
48: int lineNumber@var851 ;
49: Certainty :: CertaintyLevel certainty@var852 ;
50: std :: string symbolNames@var853 ;
51: private:
52: std :: string mFileName@var854 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var888 ( NO_LINE ) , hash@var890 ( 0 ) , thisAndNextLine@var891 ( false ) , matched@var892 ( false ) , checked@var893 ( false ) { }
57: Suppression ( const Suppression & other@var855 ) {
58: *@expr1073744830 this@expr1073744831 =@expr1073744832 other@var855 ;
59: }
60: Suppression ( const std :: string & id@var856 , const std :: string & file@var857 , int line@var858 = NO_LINE ) : errorId@var886 ( id@var856 ) , fileName@var887 ( file@var857 ) , lineNumber@var888 ( line@var858 ) , hash@var890 ( 0 ) , thisAndNextLine@var891 ( false ) , matched@var892 ( false ) , checked@var893 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var859 ) {
63: errorId@var886 =@expr1073744833 other@var859 .@expr1073744834 errorId@var860 ;
64: fileName@var887 =@expr1073744835 other@var859 .@expr1073744836 fileName@var861 ;
65: lineNumber@var888 =@expr1073744837 other@var859 .@expr1073744838 lineNumber@var862 ;
66: symbolName@var889 =@expr1073744839 other@var859 .@expr1073744840 symbolName@var863 ;
67: hash@var890 =@expr1073744841 other@var859 .@expr1073744842 hash@var864 ;
68: thisAndNextLine@var891 =@expr1073744843 other@var859 .@expr1073744844 thisAndNextLine@var865 ;
69: matched@var892 =@expr1073744845 other@var859 .@expr1073744846 matched@var866 ;
70: checked@var893 =@expr1073744847 other@var859 .@expr1073744848 checked@var867 ;
71: return *@expr1073744849 this@expr1073744850 ;
72: }
73:
74: bool operator< ( const Suppression & other@var868 ) const {
75: if (@expr1073744851 errorId@var886 !=@expr1073744852 other@var868 .@expr3029 errorId@var869 ) {
76: return errorId@var886 <@expr1073744854 other@var868 .@expr3029 errorId@var869 ; }
77: if (@expr1073744856 lineNumber@var888 <@expr1073744857 other@var868 .@expr1073744858 lineNumber@var870 ) {
78: return true ; }
79: if (@expr1073744859 fileName@var887 !=@expr1073744860 other@var868 .@expr3037 fileName@var871 ) {
80: return fileName@var887 <@expr1073744862 other@var868 .@expr3037 fileName@var871 ; }
81: if (@expr1073744864 symbolName@var889 !=@expr1073744865 other@var868 .@expr3042 symbolName@var872 ) {
82: return symbolName@var889 <@expr1073744867 other@var868 .@expr3042 symbolName@var872 ; }
83: if (@expr1073744869 hash@var890 !=@expr1073744870 other@var868 .@expr3047 hash@var873 ) {
84: return hash@var890 <@expr1073744872 other@var868 .@expr3047 hash@var873 ; }
85: if (@expr1073744874 thisAndNextLine@var891 !=@expr1073744875 other@var868 .@expr1073744876 thisAndNextLine@var874 ) {
86: return thisAndNextLine@var891 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var875 , std :: string * errorMessage@var876 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var877 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var878 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744878 fileName@var887 .@expr1073744879 empty (@expr1073744880 ) &&@expr1073744881 fileName@var887 .@expr1073744882 find_first_of (@expr1073744883 "?*" ) ==@expr1073744884 std ::@expr1073744885 string ::@expr1073744886 npos@expr1073744877 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var879 ) const {
109: return errorId@var886 ==@expr1073744887 other@var879 .@expr1073744888 errorId@var880 &&@expr1073744889
110: fileName@var887 ==@expr1073744890 other@var879 .@expr1073744891 fileName@var881 &&@expr1073744892
111: lineNumber@var888 ==@expr1073744893 other@var879 .@expr1073744894 lineNumber@var882 &&@expr1073744895
112: symbolName@var889 ==@expr1073744896 other@var879 .@expr1073744897 symbolName@var883 &&@expr1073744898
113: hash@var890 ==@expr1073744899 other@var879 .@expr1073744900 hash@var884 &&@expr1073744901
114: thisAndNextLine@var891 ==@expr1073744902 other@var879 .@expr1073744903 thisAndNextLine@var885 ;
115: }
116:
117: std :: string errorId@var886 ;
118: std :: string fileName@var887 ;
119: int lineNumber@var888 ;
120: std :: string symbolName@var889 ;
121: unsigned long hash@var890 ;
122: bool thisAndNextLine@var891 ;
123: bool matched@var892 ;
124: bool checked@var893 ;
125:
126: enum Anonymous1 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var894 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var895 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var896 , std :: string * errorMessage@var897 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var898 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var899 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var900 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var901 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var902 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var903 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var904 , const bool unusedFunctionChecking@var905 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var906 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var907 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var908 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var909 , std :: clock_t clocks@var910 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var911 ;
45: long mNumberOfResults@var912 ;
46:
47: TimerResultsData ( )
48: : mClocks@var911 ( 0 )
49: , mNumberOfResults@var912 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var913 =@expr1073744905 (@expr1073744906 double ) (@expr1073744907 (@expr1073744908 unsigned long ) mClocks@var911 ) /@expr1073744909 (@expr1073744910 double ) CLOCKS_PER_SEC@expr1073744904 ;
53: return ret@var913 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var914 ) const ;
62: void addResults ( const std :: string & str@var915 , std :: clock_t clocks@var916 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var917 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var918 , SHOWTIME_MODES showtimeMode@var919 , TimerResultsIntf * timerResults@var920 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var921 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var922 ;
79: TimerResultsIntf * mTimerResults@var923 ;
80: std :: clock_t mStart@var924 ;
81: const SHOWTIME_MODES mShowTimeMode@var925 ;
82: bool mStopped@var926 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var927 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var928 ;
103:
104:
105: std :: string addonPython@var929 ;
106:
107:
108: std :: vector < std :: string > basePaths@var930 ;
109:
110:
111: std :: string buildDir@var931 ;
112:
113:
114: bool checkAllConfigurations@var932 ;
115:
116:
117: bool checkConfiguration@var933 ;
118:
|
121:
122: bool checkHeaders@var934 ;
123:
124:
125: bool checkLibrary@var935 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var936 ;
129:
130:
131: bool checkUnusedTemplates@var937 ;
132:
133:
134: bool clang@var938 ;
135:
136:
137: std :: string clangExecutable@var939 ;
138:
139:
140: bool clangTidy@var940 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var941 ;
144:
145:
146: std :: string cppcheckCfgProductName@var942 ;
147:
148:
149: std :: string cppcheckCfgAbout@var943 ;
150:
151:
152: bool daca@var944 ;
153:
154:
155: bool debugnormal@var945 ;
156:
157:
158: bool debugSimplified@var946 ;
159:
160:
161: bool debugtemplate@var947 ;
162:
163:
164: bool debugwarnings@var948 ;
165:
166:
167: bool dump@var949 ;
168: std :: string dumpFile@var950 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var951 ;
176:
177:
178: bool exceptionHandling@var952 ;
179:
180:
181: std :: string exename@var953 ;
182:
183:
184:
185: int exitCode@var954 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var955 ;
189:
190:
191: bool force@var956 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var957 ;
196:
197:
198: bool inlineSuppressions@var958 ;
199:
200:
201:
202: unsigned int jobs@var959 ;
203:
|
206:
207: bool jointSuppressionReport@var960 ;
208:
209:
210: std :: list < std :: string > libraries@var961 ;
211:
212:
213: Library library@var962 ;
214:
215:
216:
217: int loadAverage@var963 ;
218:
|
221:
222: int maxConfigs@var964 ;
223:
224:
225: int maxCtuDepth@var965 ;
226:
227:
228: int maxTemplateRecursion@var966 ;
229:
230:
231: Suppressions nofail@var967 ;
232:
233:
234: Suppressions nomsg@var968 ;
235:
236:
237: std :: string outputFile@var969 ;
238:
239:
240: std :: string plistOutput@var970 ;
241:
242:
243: bool preprocessOnly@var971 ;
244:
245: ImportProject project@var972 ;
246:
247:
248: bool quiet@var973 ;
249:
250:
251: bool relativePaths@var974 ;
252:
253:
254: bool reportProgress@var975 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var976 ( "simple" )
261: , id@var978 ( "rule" )
262: , severity@var980 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var976 ;
266: std :: string pattern@var977 ;
267: std :: string id@var978 ;
268: std :: string summary@var979 ;
269: Severity :: SeverityType severity@var980 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var981 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var987 ( false ) , externalFunctions@var988 ( false ) , internalFunctions@var989 ( false ) , externalVariables@var990 ( false ) { }
281:
282: static const char XmlRootName@var982 [ ] ;
283: static const char XmlClasses@var983 [ ] ;
284: static const char XmlExternalFunctions@var984 [ ] ;
285: static const char XmlInternalFunctions@var985 [ ] ;
286: static const char XmlExternalVariables@var986 [ ] ;
287:
288: void clear ( ) {
289: classes@var987 =@expr1073744911 externalFunctions@var988 =@expr1073744912 internalFunctions@var989 =@expr1073744913 externalVariables@var990 =@expr1073744914 false ;
290: }
291:
|
297:
298: bool classes@var987 ;
299:
|
304:
305: bool externalFunctions@var988 ;
306:
|
310:
311: bool internalFunctions@var989 ;
312:
|
316:
317: bool externalVariables@var990 ;
318: } ;
319:
320: SafeChecks safeChecks@var991 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var992 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var993 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var994 ;
325:
326:
327: SHOWTIME_MODES showtime@var995 ;
328:
329:
330: Standards standards@var996 ;
331:
332:
333:
334: std :: string templateFormat@var997 ;
335:
336:
337:
338: std :: string templateLocation@var998 ;
339:
340:
341: std :: string userDefines@var999 ;
342:
343:
344: std :: set < std :: string > userUndefs@var1000 ;
345:
346:
347: std :: list < std :: string > userIncludes@var1001 ;
348:
349:
350: bool verbose@var1002 ;
351:
352:
353: bool xml@var1003 ;
354:
355:
356: int xml_version@var1004 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var1005 ) const {
363: for (@expr1073744915 const std ::@expr1073744916 string &@expr1073744917 configExcludePath@var1006 :@expr1073744918 configExcludePaths@var941 ) {
364: if (@expr1073744919 file@var1005 .@expr1073744920 length (@expr1073744921 ) >=@expr1073744922 configExcludePath@var1006 .@expr3099 length (@expr3100 ) &&@expr1073744925 file@var1005 .@expr1073744926 compare (@expr1073744927 0 , configExcludePath@var1006 .@expr3099 length (@expr3100 ) , configExcludePath@var1006 ) ==@expr1073744930 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var1007 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var1008 , bool inconclusiveCheck@var1009 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744931 find (@expr1073744932 libraries@var961 .@expr1073744933 begin (@expr1073744934 ) , libraries@var961 .@expr3111 end (@expr3112 ) , "posix" ) !=@expr1073744937 libraries@var961 .@expr3111 end (@expr3112 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var1010 = true ) {
392: Settings ::@expr1073744940 mTerminated@var927 =@expr1073744941 t@var1010 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744942 mTerminated@var927 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var1011 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var1012 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var1013 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var1014 ;
69: std :: string mScope@var1015 ;
70: std :: string mName@var1016 ;
71: std :: string mFullName@var1017 ;
72: const Token * mNameToken@var1018 ;
73: const Token * mParamEnd@var1019 ;
74: unsigned int mFlags@var1020 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var1021 ) {
90: setFlag (@expr1073744943 fIsClass , state@var1021 ) ;
91: }
92: void isFunction ( bool state@var1022 ) {
93: setFlag (@expr1073744944 fIsFunction , state@var1022 ) ;
94: }
95: void isVariable ( bool state@var1023 ) {
96: setFlag (@expr1073744945 fIsVariable , state@var1023 ) ;
97: }
98: void isAlias ( bool state@var1024 ) {
99: setFlag (@expr1073744946 fIsAlias , state@var1024 ) ;
100: }
101: void isSpecialization ( bool state@var1025 ) {
102: setFlag (@expr1073744947 fIsSpecialization , state@var1025 ) ;
103: }
104: void isPartialSpecialization ( bool state@var1026 ) {
105: setFlag (@expr1073744948 fIsPartialSpecialization , state@var1026 ) ;
106: }
107: void isForwardDeclaration ( bool state@var1027 ) {
108: setFlag (@expr1073744949 fIsForwardDeclaration , state@var1027 ) ;
109: }
110: void isVariadic ( bool state@var1028 ) {
111: setFlag (@expr1073744950 fIsVariadic , state@var1028 ) ;
112: }
113: void isFriend ( bool state@var1029 ) {
114: setFlag (@expr1073744951 fIsFriend , state@var1029 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var1030 ) const {
123: return (@expr3128 (@expr3128 mFlags@var1020 &@expr1073744954 flag@var1030 ) !=@expr1073744955 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var1031 , bool state@var1032 ) {
132: mFlags@var1020 =@expr1073744956 state@var1032 ?@expr1073744957 mFlags@var1020 |@expr1073744958 flag@var1031 :@expr1073744959 mFlags@var1020 &@expr1073744960 ~@expr1073744961 flag@var1031 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var1033 , const std :: string & scope@var1034 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var1035 , const std :: string & scope@var1036 , const Token * nameToken@var1037 , const Token * paramEnd@var1038 ) ;
150: TokenAndName ( const TokenAndName & other@var1039 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var1040 ) const {
154: return mToken@var1014 ==@expr1073744962 rhs@var1040 .@expr1073744963 mToken@var1041 &&@expr1073744964 mScope@var1015 ==@expr1073744965 rhs@var1040 .@expr1073744966 mScope@var1042 &&@expr1073744967 mName@var1016 ==@expr1073744968 rhs@var1040 .@expr1073744969 mName@var1043 &&@expr1073744970 mFullName@var1017 ==@expr1073744971 rhs@var1040 .@expr1073744972 mFullName@var1044 &&@expr1073744973
155: mNameToken@var1018 ==@expr1073744974 rhs@var1040 .@expr1073744975 mNameToken@var1045 &&@expr1073744976 mParamEnd@var1019 ==@expr1073744977 rhs@var1040 .@expr1073744978 mParamEnd@var1046 &&@expr1073744979 mFlags@var1020 ==@expr1073744980 rhs@var1040 .@expr1073744981 mFlags@var1047 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var1014 ;
160: }
161: void token ( Token * token@var1048 ) {
162: mToken@var1014 =@expr1073744982 token@var1048 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var1015 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var1016 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var1017 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var1018 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var1019 ;
178: }
179: void paramEnd ( const Token * end@var1049 ) {
180: mParamEnd@var1019 =@expr1073744983 end@var1049 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744984 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744985 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744986 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744987 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744988 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744989 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744990 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744991 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744992 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var1050 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var1051 ) const {
243:
244:
245: return (@expr3169 (@expr3169 mFlags@var1020 &@expr1073744995 fFamilyMask ) &@expr1073744996 (@expr3169 decl@var1051 .@expr1073744998 mFlags@var1052 &@expr1073744999 fFamilyMask ) ) !=@expr1073745000 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var1053 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var1054 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var1055 , const unsigned long numberOfArguments@var1056 , bool variadic@var1057 , const char patternAfter@var1058 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var1059 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var1060 , int & namepos@var1061 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1062 , int & namepos@var1063 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1064 , int & namepos@var1065 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1066 ,
306: bool & codeWithTemplates@var1067 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1068 , bool isTemplate@var1069 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1070 = nullptr , Token * backToken@var1071 = nullptr , bool isTemplate@var1072 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1073 , Token * end@var1074 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1075 , const std :: string & scope@var1076 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1077 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1078 ,
393: const std :: list < const Token * > & specializations@var1079 ,
394: const std :: time_t maxtime@var1080 ,
395: std :: set < std :: string > & expandedtemplates@var1081 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1082 , const Token * tok@var1083 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1084 , const Token * tok@var1085 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1086 ,
422: const TokenAndName & templateInstantiation@var1087 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1088 ,
424: const std :: string & newName@var1089 ,
425: bool copy@var1090 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1091 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1092 ,
435: const std :: string & newName@var1093 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1094 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1095 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1096 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1097 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1098 ,
458: const Token * templateInstantiationNameToken@var1099 ,
459: const std :: list < const Token * > & specializations@var1100 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1101 , const Token * end@var1102 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1103 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1104 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1105 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1106 ,
487: const std :: string & indent@var1107 = "    " ) const ;
488: void printOut ( const std :: string & text@var1108 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1109 ;
491: TokenList & mTokenList@var1110 ;
492: const Settings * mSettings@var1111 ;
493: ErrorLogger * mErrorLogger@var1112 ;
494: bool mChanged@var1113 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1114 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1115 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1116 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1117 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1118 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1119 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1120 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1121 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1122 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1123 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1124 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1125 ;
57: Token * back@var1126 ;
58: const TokenList * list@var1127 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1128 , const Token * bodyEnd_@var1129 , const std :: set < std :: string > & usingNamespaces_@var1130 = std :: set < std :: string > ( ) ) : name@var1131 ( name_@var1128 ) , bodyEnd@var1132 ( bodyEnd_@var1129 ) , usingNamespaces@var1133 ( usingNamespaces_@var1130 ) { }
63: std :: string name@var1131 ;
64: const Token * const bodyEnd@var1132 ;
65: std :: set < std :: string > usingNamespaces@var1133 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1134 ;
70: int mFileIndex@var1135 ;
71: int mLineNumber@var1136 ;
72: int mColumn@var1137 ;
73: int mExprId@var1138 ;
74:
75:
76: Token * mAstOperand1@var1139 ;
77: Token * mAstOperand2@var1140 ;
78: Token * mAstParent@var1141 ;
79:
80:
81: const Scope * mScope@var1142 ;
82: union {
83: const Function * mFunction@var1143 ;
84: const Variable * mVariable@var1144 ;
85: const :: Type * mType@var1145 ;
86: const Enumerator * mEnumerator@var1146 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1147 ;
94:
|
97:
98: int mIndex@var1148 ;
99:
100:
101: std :: string * mOriginalName@var1149 ;
102:
103:
104: ValueType * mValueType@var1150 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1151 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1152 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1153 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1154 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1155 ;
119: long long value@var1156 ;
120: struct CppcheckAttributes * next@var1157 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1158 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1159 ;
126:
127:
128: unsigned char mBits@var1160 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1161 , long long value@var1162 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1163 , long long * value@var1164 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1134 ( 0 )
135: , mFileIndex@var1135 ( 0 )
136: , mLineNumber@var1136 ( 0 )
137: , mColumn@var1137 ( 0 )
138: , mExprId@var1138 ( 0 )
139: , mAstOperand1@var1139 ( nullptr )
140: , mAstOperand2@var1140 ( nullptr )
141: , mAstParent@var1141 ( nullptr )
142: , mScope@var1142 ( nullptr )
143: , mFunction@var1143 ( nullptr )
144: , mProgressValue@var1147 ( 0 )
145: , mIndex@var1148 ( 0 )
146: , mOriginalName@var1149 ( nullptr )
147: , mValueType@var1150 ( nullptr )
148: , mValues@var1151 ( nullptr )
149: , mTemplateSimplifierPointers@var1153 ( nullptr )
150: , mScopeInfo@var1154 ( nullptr )
151: , mCppcheckAttributes@var1158 ( nullptr )
152: , mCpp11init@var1159 ( Cpp11init :: UNKNOWN )
153: , mBits@var1160 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1165 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1166 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1167 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1168 ) {
199: mStr@var1380 =@expr1073745001 s@var1168 ;
200: mImpl@var1386 .@expr1073745002 mVarId@var1417 =@expr1073745003 0 ;
201:
202: update_property_info (@expr1073745004 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1169 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1380 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1170 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1171 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1172 ) const ;
236: Token * tokAt ( int index@var1173 ) {
237: return const_cast < Token *@expr3181 > (@expr1073745006 const_cast < const Token *@expr3181 > (@expr1073745008 this@expr1073745009 ) .@expr1073745010 tokAt (@expr1073745011 index@var1173 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1174 ) const ;
245: Token * linkAt ( int index@var1175 ) {
246: return const_cast < Token *@expr3188 > (@expr1073745013 const_cast < const Token *@expr3188 > (@expr1073745015 this@expr1073745016 ) .@expr1073745017 linkAt (@expr1073745018 index@var1175 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1176 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1177 , const char ( & pattern@var1178 ) [ count ] ) {
276: return simpleMatch (@expr1073745020 tok@var1177 , pattern@var1178 , count@expr1073745019 -@expr1073745021 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1179 , const char pattern@var1180 [ ] , unsigned long pattern_len@var1181 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1182 , const char pattern@var1183 [ ] , int varid@var1184 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1185 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1186 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1187 , const Settings * const settings@var1188 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1189 , long long index@var1190 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1386 .@expr1073745022 mValueType@var1418 ;
366: }
367: void setValueType ( ValueType * vt@var1191 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1192 ; top@var1192 =@expr1073745023 this@expr1073745024 ;
371: while (@expr1073745025 top@var1192 &&@expr1073745026 !@expr1073745027 Token ::@expr1073745028 Match (@expr1073745029 top@var1192 .@expr3206 astParent (@expr3207 ) , ",|(" ) ) {
372: top@var1192 =@expr1073745032 top@var1192 .@expr3206 astParent (@expr3207 ) ; }
373: return top@var1192 ?@expr1073745035 top@var1192 .@expr1073745036 mImpl@var1193 .@expr1073745037 mValueType@var1194 :@expr1073745038 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1384 ;
378: }
379: void tokType ( Token :: Type t@var1195 ) {
380: mTokType@var1384 =@expr1073745039 t@var1195 ;
381:
382: const bool memoizedIsName@var1196 =@expr1073745040 mTokType@var1384 ==@expr1073745041 eName ||@expr1073745042 mTokType@var1384 ==@expr1073745043 eType ||@expr1073745044 mTokType@var1384 ==@expr1073745045 eVariable ||@expr1073745046
383: mTokType@var1384 ==@expr1073745047 eFunction ||@expr1073745048 mTokType@var1384 ==@expr1073745049 eKeyword ||@expr1073745050 mTokType@var1384 ==@expr3227 eBoolean ||@expr1073745052
384: mTokType@var1384 ==@expr3229 eEnumerator ;
385: setFlag (@expr1073745054 fIsName , memoizedIsName@var1196 ) ;
386:
387: const bool memoizedIsLiteral@var1197 =@expr1073745055 mTokType@var1384 ==@expr1073745056 eNumber ||@expr1073745057 mTokType@var1384 ==@expr1073745058 eString ||@expr1073745059 mTokType@var1384 ==@expr1073745060 eChar ||@expr1073745061
388: mTokType@var1384 ==@expr3227 eBoolean ||@expr1073745063 mTokType@var1384 ==@expr1073745064 eLiteral ||@expr1073745065 mTokType@var1384 ==@expr3229 eEnumerator ;
389: setFlag (@expr1073745067 fIsLiteral , memoizedIsLiteral@var1197 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1384 ==@expr1073745068 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745069 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1385 ==@expr1073745070 fIsName &&@expr1073745071 mTokType@var1384 ==@expr1073745072 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745073 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1384 ==@expr1073745074 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1384 ==@expr1073745075 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745076 isConstOp (@expr1073745077 ) ||@expr1073745078
412: isAssignmentOp (@expr1073745079 ) ||@expr1073745080
413: mTokType@var1384 ==@expr1073745081 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745082 isArithmeticalOp (@expr1073745083 ) ||@expr1073745084
417: mTokType@var1384 ==@expr1073745085 eLogicalOp ||@expr1073745086
418: mTokType@var1384 ==@expr1073745087 eComparisonOp ||@expr1073745088
419: mTokType@var1384 ==@expr1073745089 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745090 ) ||@expr1073745091
423: mTokType@var1384 ==@expr1073745092 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1384 ==@expr1073745093 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1384 ==@expr1073745094 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1384 ==@expr1073745095 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1384 ==@expr1073745096 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1384 ==@expr1073745097 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745098 ) !=@expr1073745099 nullptr &&@expr1073745100 astOperand2 (@expr1073745101 ) !=@expr1073745102 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1198 ) const {
444: return s@var1198 ==@expr1073745103 mStr@var1380 &&@expr1073745104 astOperand1 (@expr1073745105 ) !=@expr1073745106 nullptr &&@expr1073745107 astOperand2 (@expr1073745108 ) ==@expr1073745109 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1385 ;
450: }
451: void flags ( const unsigned int flags_@var1199 ) {
452: mFlags@var1385 =@expr1073745110 flags_@var1199 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745111 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1200 ) {
458: setFlag (@expr1073745112 fIsUnsigned , sign@var1200 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745113 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1201 ) {
464: setFlag (@expr1073745114 fIsSigned , sign@var1201 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745115 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1202 ) {
470: setFlag (@expr1073745116 fIsPointerCompare , b@var1202 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745117 fIsLong ) ;
474: }
475: void isLong ( bool size@var1203 ) {
476: setFlag (@expr1073745118 fIsLong , size@var1203 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745119 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1204 ) {
482: setFlag (@expr1073745120 fIsStandardType , b@var1204 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745121 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1205 ) {
488: setFlag (@expr1073745122 fIsExpandedMacro , m@var1205 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745123 fIsCast ) ;
492: }
493: void isCast ( bool c@var1206 ) {
494: setFlag (@expr1073745124 fIsCast , c@var1206 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745125 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1207 ) {
500: setFlag (@expr1073745126 fIsAttributeConstructor , ac@var1207 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745127 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1208 ) {
506: setFlag (@expr1073745128 fIsAttributeDestructor , value@var1208 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745129 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1209 ) {
512: setFlag (@expr1073745130 fIsAttributeUnused , unused@var1209 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745131 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1210 ) {
518: setFlag (@expr1073745132 fIsAttributeUsed , unused@var1210 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745133 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1211 ) {
524: setFlag (@expr1073745134 fIsAttributePure , value@var1211 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745135 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1212 ) {
530: setFlag (@expr1073745136 fIsAttributeConst , value@var1212 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745137 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1213 ) {
536: setFlag (@expr1073745138 fIsAttributeNoreturn , value@var1213 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745139 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1214 ) {
542: setFlag (@expr1073745140 fIsAttributeNothrow , value@var1214 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745141 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1215 ) {
548: setFlag (@expr1073745142 fIsAttributePacked , value@var1215 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745143 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1216 ) {
554: setFlag (@expr1073745144 fIsAttributeNodiscard , value@var1216 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745145 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1217 ) {
560: setFlag (@expr1073745146 fIsAttributeMaybeUnused , value@var1217 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1218 , long long value@var1219 ) {
563: mImpl@var1386 .@expr1073745147 setCppcheckAttribute (@expr1073745148 type@var1218 , value@var1219 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1220 , long long * value@var1221 ) const {
566: return mImpl@var1386 .@expr1073745149 getCppcheckAttribute (@expr1073745150 type@var1220 , value@var1221 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745151 mImpl@var1386 .@expr1073745152 mCppcheckAttributes@var1419 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745153 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745154 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1222 ) {
578: setFlag (@expr1073745155 fIsOperatorKeyword , value@var1222 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745156 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1223 ) {
584: setFlag (@expr1073745157 fIsComplex , value@var1223 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745158 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1224 ) {
590: setFlag (@expr1073745159 fIsEnumType , value@var1224 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745160 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1225 ) {
596: setFlag (@expr1073745161 fAtAddress , b@var1225 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745162 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1226 ) {
602: setFlag (@expr1073745163 fIncompleteVar , b@var1226 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745164 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1227 ) {
609: setFlag (@expr1073745165 fIsIncompleteConstant , b@var1227 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745166 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1228 ) {
616: setFlag (@expr1073745167 fConstexpr , b@var1228 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745168 fExternC ) ;
621: }
622: void isExternC ( bool b@var1229 ) {
623: setFlag (@expr1073745169 fExternC , b@var1229 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745170 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1230 ) {
630: setFlag (@expr1073745171 fIsSplitVarDeclComma , b@var1230 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745172 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1231 ) {
637: setFlag (@expr1073745173 fIsSplitVarDeclEq , b@var1231 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745174 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1232 ) {
644: setFlag (@expr1073745175 fIsImplicitInt , b@var1232 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745176 fIsInline ) ;
649: }
650: void isInline ( bool b@var1233 ) {
651: setFlag (@expr1073745177 fIsInline , b@var1233 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745178 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1234 ) {
658: setFlag (@expr1073745179 fIsRemovedVoidParameter , b@var1234 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745180 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1235 ) {
665: setFlag (@expr1073745181 fIsTemplate , b@var1235 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745182 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1236 ) {
672: setFlag (@expr1073745183 fIsSimplifedScope , b@var1236 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1386 .@expr1073745184 mBits@var1420 >@expr1073745185 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1386 .@expr1073745186 mBits@var1420 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1386 .@expr1073745187 mTemplateSimplifierPointers@var1421 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1237 ) {
685: if (@expr1073745188 !@expr1073745189 mImpl@var1386 .@expr3366 mTemplateSimplifierPointers@var1421 ) {
686: mImpl@var1386 .@expr3366 mTemplateSimplifierPointers@var1421 =@expr1073745192 new std ::@expr1073745193 set < TemplateSimplifier ::@expr1073745194 TokenAndName *@expr1073745195 > ; }
687: mImpl@var1386 .@expr3366 mTemplateSimplifierPointers@var1421 .@expr1073745197 insert (@expr1073745198 tokenAndName@var1237 ) ;
688: }
689: void setBits ( const unsigned char b@var1238 ) {
690: mImpl@var1386 .@expr1073745199 mBits@var1420 =@expr1073745200 b@var1238 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3377 (@expr3377 (@expr3377 mTokType@var1384 ==@expr1073745204 eString ) &&@expr1073745205 isPrefixStringCharLiteral (@expr1073745206 mStr@var1380 , '"' , "u8" ) ) ||@expr1073745207
695: (@expr3377 (@expr3377 mTokType@var1384 ==@expr1073745210 eChar ) &&@expr1073745211 isPrefixStringCharLiteral (@expr1073745212 mStr@var1380 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3389 (@expr3389 (@expr3389 mTokType@var1384 ==@expr1073745216 eString ) &&@expr1073745217 isPrefixStringCharLiteral (@expr1073745218 mStr@var1380 , '"' , "u" ) ) ||@expr1073745219
700: (@expr3389 (@expr3389 mTokType@var1384 ==@expr1073745222 eChar ) &&@expr1073745223 isPrefixStringCharLiteral (@expr1073745224 mStr@var1380 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3401 (@expr3401 (@expr3401 mTokType@var1384 ==@expr1073745228 eString ) &&@expr1073745229 isPrefixStringCharLiteral (@expr1073745230 mStr@var1380 , '"' , "U" ) ) ||@expr1073745231
705: (@expr3401 (@expr3401 mTokType@var1384 ==@expr1073745234 eChar ) &&@expr1073745235 isPrefixStringCharLiteral (@expr1073745236 mStr@var1380 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3413 (@expr3413 (@expr3413 mTokType@var1384 ==@expr1073745240 eString ) &&@expr1073745241 isPrefixStringCharLiteral (@expr1073745242 mStr@var1380 , '"' , "" ) ) ||@expr1073745243
710: (@expr3413 (@expr3413 mTokType@var1384 ==@expr1073745246 eChar ) &&@expr1073745247 isPrefixStringCharLiteral (@expr1073745248 mStr@var1380 , '\'' , "" ) &&@expr1073745249 mStr@var1380 .@expr1073745250 length (@expr1073745251 ) ==@expr1073745252 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3429 (@expr3429 (@expr3429 mTokType@var1384 ==@expr1073745256 eChar ) &&@expr1073745257 isPrefixStringCharLiteral (@expr1073745258 mStr@var1380 , '\'' , "" ) ) &&@expr1073745259
715: (@expr3429 mStr@var1380 .@expr1073745261 length (@expr1073745262 ) >@expr1073745263 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745264 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1239 ) {
738: setFlag (@expr1073745265 fIsTemplateArg , value@var1239 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1240 , const char ( & pattern@var1241 ) [ count ] ) {
743: return findsimplematch (@expr1073745267 startTok@var1240 , pattern@var1241 , count@expr1073745266 -@expr1073745268 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1242 , const char pattern@var1243 [ ] , unsigned long pattern_len@var1244 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1245 , const char ( & pattern@var1246 ) [ count ] , const Token * const end@var1247 ) {
749: return findsimplematch (@expr1073745270 startTok@var1245 , pattern@var1246 , count@expr1073745269 -@expr1073745271 1 , end@var1247 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1248 , const char pattern@var1249 [ ] , unsigned long pattern_len@var1250 , const Token * const end@var1251 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1252 , const char pattern@var1253 [ ] , const int varId@var1254 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1255 , const char pattern@var1256 [ ] , const Token * const end@var1257 , const int varId@var1258 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1259 , const char ( & pattern@var1260 ) [ count ] ) {
758: return findsimplematch (@expr1073745273 startTok@var1259 , pattern@var1260 , count@expr1073745272 -@expr1073745274 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1261 , const char pattern@var1262 [ ] , unsigned long pattern_len@var1263 ) {
761: return const_cast < Token *@expr3451 > (@expr1073745276 findsimplematch (@expr1073745277 const_cast < const Token *@expr3451 > (@expr1073745279 startTok@var1261 ) , pattern@var1262 , pattern_len@var1263 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1264 , const char ( & pattern@var1265 ) [ count ] , const Token * const end@var1266 ) {
765: return findsimplematch (@expr1073745281 startTok@var1264 , pattern@var1265 , count@expr1073745280 -@expr1073745282 1 , end@var1266 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1267 , const char pattern@var1268 [ ] , unsigned long pattern_len@var1269 , const Token * const end@var1270 ) {
768: return const_cast < Token *@expr3459 > (@expr1073745284 findsimplematch (@expr1073745285 const_cast < const Token *@expr3459 > (@expr1073745287 startTok@var1267 ) , pattern@var1268 , pattern_len@var1269 , end@var1270 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1271 , const char pattern@var1272 [ ] , const int varId@var1273 = 0 ) {
772: return const_cast < Token *@expr3464 > (@expr1073745289 findmatch (@expr1073745290 const_cast < const Token *@expr3464 > (@expr1073745292 startTok@var1271 ) , pattern@var1272 , varId@var1273 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1274 , const char pattern@var1275 [ ] , const Token * const end@var1276 , const int varId@var1277 = 0 ) {
775: return const_cast < Token *@expr3469 > (@expr1073745294 findmatch (@expr1073745295 const_cast < const Token *@expr3469 > (@expr1073745297 startTok@var1274 ) , pattern@var1275 , end@var1276 , varId@var1277 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1278 , const char * haystack@var1279 , int varid@var1280 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1386 .@expr1073745298 mFileIndex@var1422 ;
796: }
797: void fileIndex ( int indexOfFile@var1281 ) {
798: mImpl@var1386 .@expr1073745299 mFileIndex@var1422 =@expr1073745300 indexOfFile@var1281 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1386 .@expr1073745301 mLineNumber@var1423 ;
803: }
804: void linenr ( int lineNumber@var1282 ) {
805: mImpl@var1386 .@expr1073745302 mLineNumber@var1423 =@expr1073745303 lineNumber@var1282 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1386 .@expr1073745304 mColumn@var1424 ;
810: }
811: void column ( int c@var1283 ) {
812: mImpl@var1386 .@expr1073745305 mColumn@var1424 =@expr1073745306 c@var1283 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1381 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1284 , const Token * end@var1285 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1286 , const std :: string & originalNameStr@var1287 = emptyString@var1 , bool prepend@var1288 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1289 , const std :: string & originalNameStr@var1290 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745307 tokenStr@var1289 , originalNameStr@var1290 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1382 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1386 .@expr1073745308 mVarId@var1417 ;
851: }
852: void varId ( int id@var1291 ) {
853: mImpl@var1386 .@expr1073745309 mVarId@var1417 =@expr1073745310 id@var1291 ;
854: if (@expr1073745311 id@var1291 !=@expr1073745312 0 ) {
855: tokType (@expr1073745313 eVariable ) ;
856: isStandardType (@expr1073745314 false ) ;
857: } else {
858: update_property_info (@expr1073745315 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745316 mImpl@var1386 .@expr3493 mExprId@var1425 ) {
864: return mImpl@var1386 .@expr3493 mExprId@var1425 ; }
865: return mImpl@var1386 .@expr1073745319 mVarId@var1417 ;
866: }
867: void exprId ( int id@var1292 ) {
868: mImpl@var1386 .@expr1073745320 mExprId@var1425 =@expr1073745321 id@var1292 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1293 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1294 , const std :: vector < std :: string > & fileNames@var1295 ) const ;
888:
|
891:
892: void printLines ( int lines@var1296 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1297 , Token * start@var1298 , Token * end@var1299 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1300 ; varid@var1300 = false ;
905: bool exprid@var1301 ; exprid@var1301 = false ;
906: bool idtype@var1302 ; idtype@var1302 = false ;
907: bool attributes@var1303 ; attributes@var1303 = false ;
908: bool macro@var1304 ; macro@var1304 = false ;
909: bool linenumbers@var1305 ; linenumbers@var1305 = false ;
910: bool linebreaks@var1306 ; linebreaks@var1306 = false ;
911: bool files@var1307 ; files@var1307 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1308 ;
914: options@var1308 .@expr1073745322 attributes@var1309 =@expr1073745323 true ;
915: options@var1308 .@expr1073745324 macro@var1310 =@expr1073745325 true ;
916: options@var1308 .@expr1073745326 linenumbers@var1311 =@expr1073745327 true ;
917: options@var1308 .@expr1073745328 linebreaks@var1312 =@expr1073745329 true ;
918: options@var1308 .@expr1073745330 files@var1313 =@expr1073745331 true ;
919: return options@var1308 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1314 ; options@var1314 =@expr1073745332 forDebug (@expr1073745333 ) ;
923: options@var1314 .@expr1073745334 varid@var1315 =@expr1073745335 true ;
924: return options@var1314 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1316 ; options@var1316 =@expr1073745336 forDebug (@expr1073745337 ) ;
928: options@var1316 .@expr1073745338 exprid@var1317 =@expr1073745339 true ;
929: return options@var1316 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1318 ; options@var1318 =@expr1073745340 forDebug (@expr1073745341 ) ;
933: options@var1318 .@expr1073745342 exprid@var1319 =@expr1073745343 true ;
934: options@var1318 .@expr1073745344 varid@var1320 =@expr1073745345 true ;
935: options@var1318 .@expr1073745346 idtype@var1321 =@expr1073745347 true ;
936: return options@var1318 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1322 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1323 , bool attributes@var1324 , bool macro@var1325 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1326 , const std :: vector < std :: string > * fileNames@var1327 = nullptr , const Token * end@var1328 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1329 , bool attributes@var1330 = true ) const ;
952: std :: string stringifyList ( bool varid@var1331 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1332 , bool attributes@var1333 , bool linenumbers@var1334 , bool linebreaks@var1335 , bool files@var1336 , const std :: vector < std :: string > * fileNames@var1337 = nullptr , const Token * end@var1338 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1339 ) {
983: mLink@var1383 =@expr1073745348 linkToToken@var1339 ;
984: if (@expr1073745349 mStr@var1380 ==@expr1073745350 "<" ||@expr1073745351 mStr@var1380 ==@expr1073745352 ">" ) {
985: update_property_info (@expr1073745353 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1383 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1340 ) {
1006: mImpl@var1386 .@expr1073745354 mScope@var1426 =@expr1073745355 s@var1340 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1386 .@expr1073745356 mScope@var1426 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1341 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1384 ==@expr1073745357 eFunction ||@expr1073745358 mTokType@var1384 ==@expr1073745359 eLambda ?@expr1073745360 mImpl@var1386 .@expr1073745361 mFunction@var1427 :@expr1073745362 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1342 ) {
1034: mImpl@var1386 .@expr1073745363 mVariable@var1428 =@expr1073745364 v@var1342 ;
1035: if (@expr1073745365 v@var1342 ||@expr1073745366 mImpl@var1386 .@expr1073745367 mVarId@var1417 ) {
1036: tokType (@expr1073745368 eVariable ) ; }
1037: else { if (@expr1073745369 mTokType@var1384 ==@expr1073745370 eVariable ) {
1038: tokType (@expr1073745371 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1384 ==@expr1073745372 eVariable ?@expr1073745373 mImpl@var1386 .@expr1073745374 mVariable@var1428 :@expr1073745375 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1343 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1384 ==@expr1073745376 eType ?@expr1073745377 mImpl@var1386 .@expr1073745378 mType@var1429 :@expr1073745379 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1344 , const Token * * typeTok@var1345 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1346 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1347 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1384 ==@expr1073745380 eEnumerator ?@expr1073745381 mImpl@var1386 .@expr1073745382 mEnumerator@var1430 :@expr1073745383 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1348 ) {
1079: mImpl@var1386 .@expr1073745384 mEnumerator@var1430 =@expr1073745385 e@var1348 ;
1080: if (@expr1073745386 e@var1348 ) {
1081: tokType (@expr1073745387 eEnumerator ) ; }
1082: else { if (@expr1073745388 mTokType@var1384 ==@expr1073745389 eEnumerator ) {
1083: tokType (@expr1073745390 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1349 , Token * end@var1350 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1351 , Token * srcEnd@var1352 , Token * newLocation@var1353 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1386 .@expr1073745391 mProgressValue@var1431 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1354 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1386 .@expr3568 mOriginalName@var1432 ?@expr1073745393 *@expr1073745394 mImpl@var1386 .@expr3568 mOriginalName@var1432 :@expr1073745396 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1386 .@expr3573 mValues@var1405 ?@expr1073745398 *@expr1073745399 mImpl@var1386 .@expr3573 mValues@var1405 :@expr1073745401 TokenImpl ::@expr1073745402 mEmptyValueList@var1152 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1355 ) {
1164: if (@expr1073745403 !@expr1073745404 mImpl@var1386 .@expr3581 mOriginalName@var1432 ) {
1165: mImpl@var1386 .@expr3581 mOriginalName@var1432 =@expr1073745407 new std ::@expr1073745408 string (@expr1073745409 name@var1355 ) ; }
1166: else {
1167: *@expr1073745410 mImpl@var1386 .@expr3581 mOriginalName@var1432 =@expr1073745412 name@var1355 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1356 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1357 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1358 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1386 .@expr1073745414 mValues@var1405 .@expr1073745415 front (@expr1073745416 ) .@expr1073745417 intvalue@expr1073745413 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1359 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1360 , long long path@var1361 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1362 , const Settings * settings@var1363 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1364 , const Settings * settings@var1365 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1366 , int argnr@var1367 , const Settings * settings@var1368 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1369 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1370 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1371 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1372 ) {
1200: if (@expr1073745418 mImpl@var1386 .@expr3595 mValues@var1405 ) {
1201: mImpl@var1386 .@expr3595 mValues@var1405 .@expr1073745421 remove_if (@expr1073745422 pred@var1372 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1386 .@expr1073745423 mIndex@var1433 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1373 ) {
1213: mNext@var1381 =@expr1073745424 nextToken@var1373 ;
1214: }
1215: void previous ( Token * previousToken@var1374 ) {
1216: mPrevious@var1382 =@expr1073745425 previousToken@var1374 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1375 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1376 , const char * word@var1377 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1378 , char c@var1379 ) ;
1235:
1236: std :: string mStr@var1380 ;
1237:
1238: Token * mNext@var1381 ;
1239: Token * mPrevious@var1382 ;
1240: Token * mLink@var1383 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1384 ;
1283:
1284: uint64_t mFlags@var1385 ;
1285:
1286: TokenImpl * mImpl@var1386 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1387 ) const {
1294: return (@expr3602 (@expr3602 mFlags@var1385 &@expr1073745428 flag_@var1387 ) !=@expr1073745429 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1388 , bool state_@var1389 ) {
1303: mFlags@var1385 =@expr1073745430 state_@var1389 ?@expr1073745431 mFlags@var1385 |@expr1073745432 flag_@var1388 :@expr1073745433 mFlags@var1385 &@expr1073745434 ~@expr1073745435 flag_@var1388 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1390 , const int indent1@var1391 = 0 , const int indent2@var1392 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1393 ) ;
1321: void astOperand2 ( Token * tok@var1394 ) ;
1322: void astParent ( Token * tok@var1395 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1386 .@expr1073745436 mAstOperand1@var1396 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1386 .@expr1073745437 mAstOperand1@var1396 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1386 .@expr1073745438 mAstOperand2@var1397 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1386 .@expr1073745439 mAstOperand2@var1397 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1386 .@expr1073745440 mAstParent@var1398 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1386 .@expr1073745441 mAstParent@var1398 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745442 !@expr1073745443 astParent (@expr3620 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745445 this@expr3622 ==@expr1073745447 astParent (@expr3620 ) .@expr3625 astOperand1 (@expr3626 ) ) {
1346: return astParent (@expr3620 ) .@expr3628 astOperand2 (@expr3629 ) ; }
1347: else { if (@expr1073745454 this@expr3622 ==@expr1073745455 astParent (@expr3620 ) .@expr3628 astOperand2 (@expr3629 ) ) {
1348: return astParent (@expr3620 ) .@expr3625 astOperand1 (@expr3626 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745462 !@expr1073745463 astParent (@expr3640 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745465 this@expr3642 ==@expr1073745467 astParent (@expr3640 ) .@expr3645 astOperand1 (@expr3646 ) ) {
1356: return astParent (@expr3640 ) .@expr3648 astOperand2 (@expr3649 ) ; }
1357: else { if (@expr1073745474 this@expr3642 ==@expr1073745475 astParent (@expr3640 ) .@expr3648 astOperand2 (@expr3649 ) ) {
1358: return astParent (@expr3640 ) .@expr3645 astOperand1 (@expr3646 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1399 ; ret@var1399 =@expr1073745482 this@expr1073745483 ;
1364: while (@expr1073745484 ret@var1399 .@expr3661 mImpl@var1400 .@expr3662 mAstParent@var1401 ) {
1365: ret@var1399 =@expr1073745487 ret@var1399 .@expr3661 mImpl@var1400 .@expr3662 mAstParent@var1401 ; }
1366: return ret@var1399 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1402 ; ret@var1402 =@expr1073745490 this@expr1073745491 ;
1371: while (@expr1073745492 ret@var1402 .@expr3669 mImpl@var1403 .@expr3670 mAstParent@var1404 ) {
1372: ret@var1402 =@expr1073745495 ret@var1402 .@expr3669 mImpl@var1403 .@expr3670 mAstParent@var1404 ; }
1373: return ret@var1402 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1386 .@expr1073745498 mAstOperand1@var1396 =@expr1073745499 mImpl@var1386 .@expr1073745500 mAstOperand2@var1397 =@expr1073745501 mImpl@var1386 .@expr1073745502 mAstParent@var1398 =@expr1073745503 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1386 .@expr3680 mValues@var1405 ;
1393: mImpl@var1386 .@expr3680 mValues@var1405 =@expr1073745506 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1406 = "" ) const {
1397: std ::@expr1073745507 string ret@var1407 ;
1398: if (@expr1073745508 mImpl@var1386 .@expr3685 mAstOperand1@var1396 ) {
1399: ret@var1407 =@expr1073745510 mImpl@var1386 .@expr3685 mAstOperand1@var1396 .@expr1073745512 astString (@expr1073745513 sep@var1406 ) ; }
1400: if (@expr1073745514 mImpl@var1386 .@expr3691 mAstOperand2@var1397 ) {
1401: ret@var1407 +=@expr1073745516 mImpl@var1386 .@expr3691 mAstOperand2@var1397 .@expr1073745518 astString (@expr1073745519 sep@var1406 ) ; }
1402: return ret@var1407 +@expr1073745520 sep@var1406 +@expr1073745521 mStr@var1380 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1408 , bool xml@var1409 , const std :: vector < std :: string > & fileNames@var1410 , std :: ostream & out@var1411 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1412 , std :: ostream & out@var1413 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1414 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1415 ) const {
1419: mImpl@var1386 .@expr1073745522 mCpp11init@var1416 =@expr1073745523 cpp11init@var1415 ?@expr1073745524 TokenImpl ::@expr3701 Cpp11init ::@expr1073745526 CPP11INIT :@expr1073745527 TokenImpl ::@expr3701 Cpp11init ::@expr1073745529 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1386 .@expr1073745530 mCpp11init@var1416 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1434 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1435 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1436 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1437 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1438 ( nullptr ) , num@var1439 ( 0 ) , known@var1440 ( true ) { }
62:
63: const Token * tok@var1438 ;
64: long long num@var1439 ;
65: bool known@var1440 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1441 ;
72: const Scope * classScope@var1442 ;
73: const Scope * enclosingScope@var1443 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1444 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1446 ( nullptr ) , nameTok@var1447 ( nullptr ) , access@var1448 ( AccessControl :: Public ) , isVirtual@var1449 ( false ) { }
82:
83: std :: string name@var1445 ;
84: const Type * type@var1446 ;
85: const Token * nameTok@var1447 ;
86: AccessControl access@var1448 ;
87: bool isVirtual@var1449 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1450 ) const {
90: return this@expr1073745531 .@expr1073745532 type@var1446 <@expr1073745533 rhs@var1450 .@expr1073745534 type@var1451 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1452 ( nullptr ) , nameEnd@var1453 ( nullptr ) , type@var1454 ( nullptr ) { }
97:
98: const Token * nameStart@var1452 ;
99: const Token * nameEnd@var1453 ;
100: const Type * type@var1454 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1455 ;
104: std :: vector < FriendInfo > friendList@var1456 ;
105:
106: const Token * typeStart@var1457 ;
107: const Token * typeEnd@var1458 ;
108: long long sizeOf@var1459 ;
109:
110: Type ( const Token * classDef_@var1460 = nullptr , const Scope * classScope_@var1461 = nullptr , const Scope * enclosingScope_@var1462 = nullptr ) :
111: classDef@var1441 ( classDef_@var1460 ) ,
112: classScope@var1442 ( classScope_@var1461 ) ,
113: enclosingScope@var1443 ( enclosingScope_@var1462 ) ,
114: needInitialization@var1444 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1457 ( nullptr ) ,
116: typeEnd@var1458 ( nullptr ) ,
117: sizeOf@var1459 ( 0 ) {
118: if (@expr1073745535 classDef_@var1460 &&@expr1073745536 classDef_@var1460 .@expr3713 str (@expr3714 ) ==@expr1073745539 "enum" ) {
119: needInitialization@var1444 =@expr1073745540 NeedInitialization ::@expr1073745541 True ; }
120: else { if (@expr1073745542 classDef_@var1460 &&@expr1073745543 classDef_@var1460 .@expr3713 str (@expr3714 ) ==@expr1073745546 "using" ) {
121: typeStart@var1457 =@expr1073745547 classDef@var1441 .@expr1073745548 tokAt (@expr1073745549 3 ) ;
122: typeEnd@var1458 =@expr1073745550 typeStart@var1457 ;
123: while (@expr1073745551 typeEnd@var1458 .@expr3728 next (@expr3729 ) &&@expr1073745554 typeEnd@var1458 .@expr3728 next (@expr3729 ) .@expr1073745557 str (@expr1073745558 ) !=@expr1073745559 ";" ) {
124: typeEnd@var1458 =@expr1073745560 typeEnd@var1458 .@expr3728 next (@expr3729 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1441 ?@expr1073745563 classDef@var1441 .@expr1073745564 str (@expr1073745565 ) :@expr1073745566 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1441 &&@expr1073745567 classDef@var1441 .@expr1073745568 str (@expr1073745569 ) ==@expr1073745570 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1463 , const Token * tok1@var1464 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1465 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1466 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1467 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1468 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1469 ) : scope@var1470 ( scope_@var1469 ) , name@var1471 ( nullptr ) , value@var1472 ( 0 ) , start@var1473 ( nullptr ) , end@var1474 ( nullptr ) , value_known@var1475 ( false ) { }
167: const Scope * scope@var1470 ;
168: const Token * name@var1471 ;
169: long long value@var1472 ;
170: const Token * start@var1473 ;
171: const Token * end@var1474 ;
172: bool value_known@var1475 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous4 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1476 ) const {
204: return (@expr3747 (@expr3747 mFlags@var1512 &@expr1073745573 flag_@var1476 ) !=@expr1073745574 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1477 , bool state_@var1478 ) {
213: mFlags@var1512 =@expr1073745575 state_@var1478 ?@expr1073745576 mFlags@var1512 |@expr1073745577 flag_@var1477 :@expr1073745578 mFlags@var1512 &@expr1073745579 ~@expr1073745580 flag_@var1477 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1479 , bool * isContainer@var1480 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1481 , const Token * start_@var1482 , const Token * end_@var1483 ,
226: int index_@var1484 , AccessControl access_@var1485 , const Type * type_@var1486 ,
227: const Scope * scope_@var1487 , const Settings * settings@var1488 )
228: : mNameToken@var1507 ( name_@var1481 ) ,
229: mTypeStartToken@var1508 ( start_@var1482 ) ,
230: mTypeEndToken@var1509 ( end_@var1483 ) ,
231: mIndex@var1510 ( index_@var1484 ) ,
232: mAccess@var1511 ( access_@var1485 ) ,
233: mFlags@var1512 ( 0 ) ,
234: mType@var1513 ( type_@var1486 ) ,
235: mScope@var1514 ( scope_@var1487 ) ,
236: mValueType@var1515 ( nullptr ) {
237: evaluate (@expr1073745581 settings@var1488 ) ;
238: }
239:
240: Variable ( const Token * name_@var1489 , const std :: string & clangType@var1490 , const Token * typeStart@var1491 ,
241: const Token * typeEnd@var1492 , int index_@var1493 , AccessControl access_@var1494 ,
242: const Type * type_@var1495 , const Scope * scope_@var1496 ) ;
243:
244: Variable ( const Variable & var@var1497 , const Scope * scope@var1498 ) ;
245:
246: Variable ( const Variable & var@var1499 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1500 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1507 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1508 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1509 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745582 mNameToken@var1507 ) {
300: return mNameToken@var1507 .@expr1073745583 str (@expr1073745584 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745585 mNameToken@var1507 ) {
312: return mNameToken@var1507 .@expr1073745586 varId (@expr1073745587 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1510 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1511 ==@expr1073745588 AccessControl ::@expr1073745589 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1511 ==@expr1073745590 AccessControl ::@expr1073745591 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1511 ==@expr1073745592 AccessControl ::@expr1073745593 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1511 ==@expr1073745594 AccessControl ::@expr1073745595 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1511 ==@expr1073745596 AccessControl ::@expr1073745597 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1511 ==@expr1073745598 AccessControl ::@expr1073745599 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745601 mAccess@var1511 ==@expr1073745602 AccessControl ::@expr1073745603 Local@expr1073745600 ) &&@expr1073745604 !@expr1073745605 isExtern (@expr1073745606 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745607 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745608 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745609 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745610 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745611 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1511 ==@expr1073745612 AccessControl ::@expr1073745613 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745614 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745615 fIsArray ) &&@expr1073745616 !@expr1073745617 getFlag (@expr1073745618 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745619 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745620 ) &&@expr1073745621 getFlag (@expr1073745622 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745623 fIsArray ) ||@expr1073745624 getFlag (@expr1073745625 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745626 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745627 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745628 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745629 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1513 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1513 ?@expr1073745630 mType@var1513 .@expr1073745631 classScope@var1518 :@expr1073745632 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1514 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1516 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1501 ) const {
550: return mDimensions@var1516 [@expr1073745633 index_@var1501 ] .@expr1073745634 num@var2109 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1502 ) const {
558: return mDimensions@var1516 [@expr1073745635 index_@var1502 ] .@expr1073745636 known@var2110 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745637 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745638 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745639 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1503 ) const {
602: return isStlType (@expr1073745640 ) &&@expr1073745641 stlType@var1503 ==@expr1073745642 mTypeStartToken@var1508 .@expr1073745643 strAt (@expr1073745644 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1504 ) const {
616: return isStlType (@expr1073745645 ) &&@expr1073745646 stlTypes@var1504 .@expr1073745647 find (@expr1073745648 mTypeStartToken@var1508 .@expr1073745649 strAt (@expr1073745650 2 ) ) !=@expr1073745651 stlTypes@var1504 .@expr1073745652 end (@expr1073745653 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745654 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr3831 ) &&@expr1073745656 type (@expr3831 ) .@expr1073745658 isEnumType (@expr1073745659 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745660 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1515 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1505 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1511 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1506 ) {
660: mType@var1513 =@expr1073745661 t@var1506 ;
661: }
662:
663:
664: const Token * mNameToken@var1507 ;
665:
666:
667: const Token * mTypeStartToken@var1508 ;
668:
669:
670: const Token * mTypeEndToken@var1509 ;
671:
672:
673: int mIndex@var1510 ;
674:
675:
676: AccessControl mAccess@var1511 ;
677:
678:
679: unsigned int mFlags@var1512 ;
680:
681:
682: const Type * mType@var1513 ;
683:
684:
685: const Scope * mScope@var1514 ;
686:
687: ValueType * mValueType@var1515 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1516 ;
691:
692:
693: void evaluate ( const Settings * settings@var1517 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous5 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1519 ) const {
735: return (@expr3838 (@expr3838 mFlags@var1568 &@expr1073745664 flag@var1519 ) !=@expr1073745665 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1520 , bool state@var1521 ) {
744: mFlags@var1568 =@expr1073745666 state@var1521 ?@expr1073745667 mFlags@var1568 |@expr1073745668 flag@var1520 :@expr1073745669 mFlags@var1568 &@expr1073745670 ~@expr1073745671 flag@var1520 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1522 , const Token * tok@var1523 , const Scope * scope@var1524 , const Token * tokDef@var1525 , const Token * tokArgDef@var1526 ) ;
751: Function ( const Token * tokenDef@var1527 , const std :: string & clangType@var1528 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1538 .@expr1073745672 str (@expr1073745673 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1546 .@expr1073745674 size (@expr1073745675 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1546 .@expr1073745676 size (@expr1073745677 ) -@expr1073745678 initArgCount@var1547 ;
764: }
765: const Variable * getArgumentVar ( int num@var1529 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1547 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1530 , const Scope * scope@var1531 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1532 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1533 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1548 ==@expr1073745679 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1548 ==@expr1073745680 eConstructor ||@expr1073745681
785: type@var1548 ==@expr1073745682 eCopyConstructor ||@expr1073745683
786: type@var1548 ==@expr1073745684 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1548 ==@expr1073745685 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1538 .@expr1073745686 isAttributeConstructor (@expr1073745687 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1538 .@expr1073745688 isAttributeDestructor (@expr1073745689 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1538 .@expr1073745690 isAttributePure (@expr1073745691 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1538 .@expr1073745692 isAttributeConst (@expr1073745693 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1538 .@expr1073745694 isAttributeNoreturn (@expr1073745695 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1538 .@expr1073745696 isAttributeNothrow (@expr1073745697 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1538 .@expr1073745698 isAttributeNodiscard (@expr1073745699 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745700 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745701 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745702 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745703 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745704 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745705 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745706 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745707 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745708 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745709 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745710 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745711 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745712 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745713 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745714 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745715 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745716 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745717 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745718 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745719 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745720 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745721 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1534 ) {
881: setFlag (@expr1073745722 fHasBody , state@var1534 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745723 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745724 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1535 ) {
891: setFlag (@expr1073745725 fIsEscapeFunction , state@var1535 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745726 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1536 ) {
898: setFlag (@expr1073745727 fIsConstexpr , state@var1536 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1537 ) const ;
901:
902: const Token * tokenDef@var1538 ;
903: const Token * argDef@var1539 ;
904: const Token * token@var1540 ;
905: const Token * arg@var1541 ;
906: const Token * retDef@var1542 ;
907: const :: Type * retType@var1543 ;
908: const Scope * functionScope@var1544 ;
909: const Scope * nestedIn@var1545 ;
910: std :: list < Variable > argumentList@var1546 ;
911: int initArgCount@var1547 ;
912: Type type@var1548 ;
913: AccessControl access@var1549 ;
914: const Token * noexceptArg@var1550 ;
915: const Token * throwArg@var1551 ;
916: const Token * templateDef@var1552 ;
917: const Token * functionPointerUsage@var1553 ;
918:
919: bool argsMatch ( const Scope * scope@var1554 , const Token * first@var1555 , const Token * second@var1556 , const std :: string & path@var1557 , int path_length@var1558 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1559 , bool unknown@var1560 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1561 , bool unknown@var1562 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1563 , bool unknown@var1564 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1565 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745728 this@expr1073745729 .@expr1073745730 hasTrailingReturnType (@expr1073745731 ) ) {
931: return Token ::@expr1073745732 findmatch (@expr1073745733 retDef@var1542 , "{|;" ) ;
932: } else {
933: return tokenDef@var1538 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1566 , bool * foundAllBaseClasses@var1567 ) const ;
946:
947: unsigned int mFlags@var1568 ;
948:
949: void isInline ( bool state@var1569 ) {
950: setFlag (@expr1073745734 fIsInline , state@var1569 ) ;
951: }
952: void isConst ( bool state@var1570 ) {
953: setFlag (@expr1073745735 fIsConst , state@var1570 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1571 ) {
956: setFlag (@expr1073745736 fHasVirtualSpecifier , state@var1571 ) ;
957: }
958: void isPure ( bool state@var1572 ) {
959: setFlag (@expr1073745737 fIsPure , state@var1572 ) ;
960: }
961: void isStatic ( bool state@var1573 ) {
962: setFlag (@expr1073745738 fIsStatic , state@var1573 ) ;
963: }
964: void isStaticLocal ( bool state@var1574 ) {
965: setFlag (@expr1073745739 fIsStaticLocal , state@var1574 ) ;
966: }
967: void isExtern ( bool state@var1575 ) {
968: setFlag (@expr1073745740 fIsExtern , state@var1575 ) ;
969: }
970: void isFriend ( bool state@var1576 ) {
971: setFlag (@expr1073745741 fIsFriend , state@var1576 ) ;
972: }
973: void isExplicit ( bool state@var1577 ) {
974: setFlag (@expr1073745742 fIsExplicit , state@var1577 ) ;
975: }
976: void isDefault ( bool state@var1578 ) {
977: setFlag (@expr1073745743 fIsDefault , state@var1578 ) ;
978: }
979: void isDelete ( bool state@var1579 ) {
980: setFlag (@expr1073745744 fIsDelete , state@var1579 ) ;
981: }
982: void isNoExcept ( bool state@var1580 ) {
983: setFlag (@expr1073745745 fIsNoExcept , state@var1580 ) ;
984: }
985: void isThrow ( bool state@var1581 ) {
986: setFlag (@expr1073745746 fIsThrow , state@var1581 ) ;
987: }
988: void isOperator ( bool state@var1582 ) {
989: setFlag (@expr1073745747 fIsOperator , state@var1582 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1583 ) {
992: setFlag (@expr1073745748 fHasLvalRefQual , state@var1583 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1584 ) {
995: setFlag (@expr1073745749 fHasRvalRefQual , state@var1584 ) ;
996: }
997: void isVariadic ( bool state@var1585 ) {
998: setFlag (@expr1073745750 fIsVariadic , state@var1585 ) ;
999: }
1000: void isVolatile ( bool state@var1586 ) {
1001: setFlag (@expr1073745751 fIsVolatile , state@var1586 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1587 ) {
1004: return setFlag (@expr1073745752 fHasTrailingReturnType , state@var1587 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1588 ) {
1007: setFlag (@expr1073745753 fIsInlineKeyword , state@var1588 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1589 , const Scope * scope@var1590 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1591 ;
1019: const Scope * scope@var1592 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1593 , const Token * classDef_@var1594 , const Scope * nestedIn_@var1595 ) ;
1025: Scope ( const SymbolDatabase * check_@var1596 , const Token * classDef_@var1597 , const Scope * nestedIn_@var1598 , ScopeType type_@var1599 , const Token * start_@var1600 ) ;
1026:
1027: const SymbolDatabase * check@var1601 ;
1028: std :: string className@var1602 ;
1029: const Token * classDef@var1603 ;
1030: const Token * bodyStart@var1604 ;
1031: const Token * bodyEnd@var1605 ;
1032: std :: list < Function > functionList@var1606 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1607 ;
1034: std :: list < Variable > varlist@var1608 ;
1035: const Scope * nestedIn@var1609 ;
1036: std :: list < Scope * > nestedList@var1610 ;
1037: int numConstructors@var1611 ;
1038: int numCopyOrMoveConstructors@var1612 ;
1039: std :: list < UsingInfo > usingList@var1613 ;
1040: ScopeType type@var1614 ;
1041: Type * definedType@var1615 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1616 ;
1043: std :: vector < const Token * > bodyStartList@var1617 ;
1044:
1045:
1046: const Scope * functionOf@var1618 ;
1047: Function * function@var1619 ;
1048:
1049:
1050: const Token * enumType@var1620 ;
1051: bool enumClass@var1621 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1622 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1623 ) {
1056: bodyStart@var1604 =@expr1073745754 start@var1623 ;
1057: bodyEnd@var1605 =@expr1073745755 start@var1623 ?@expr1073745756 start@var1623 .@expr1073745757 link (@expr1073745758 ) :@expr1073745759 nullptr ;
1058: if (@expr1073745760 start@var1623 ) {
1059: bodyStartList@var1617 .@expr1073745761 push_back (@expr1073745762 start@var1623 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1602 .@expr1073745763 size (@expr1073745764 ) >@expr1073745765 9 &&@expr1073745766 className@var1602 .@expr1073745767 compare (@expr1073745768 0 , 9 , "Anonymous" ) ==@expr1073745769 0 &&@expr1073745770 std ::@expr1073745771 isdigit (@expr1073745772 className@var1602 [@expr1073745773 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1624 ) const {
1068: for (@expr1073745774 const Enumerator &@expr1073745775 i@var1625 :@expr1073745776 enumeratorList@var1622 ) {
1069: if (@expr1073745777 i@var1625 .@expr1073745778 name@var1626 .@expr1073745779 str (@expr1073745780 ) ==@expr1073745781 name@var1624 ) {
1070: return &@expr1073745782 i@var1625 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1627 ) const {
1076: if (@expr1073745783 !@expr1073745784 outer@var1627 ) {
1077: return false ; }
1078: if (@expr1073745785 outer@var1627 ==@expr1073745786 this@expr1073745787 ) {
1079: return true ; }
1080: const Scope * parent@var1628 ; parent@var1628 =@expr1073745788 nestedIn@var1609 ;
1081: while (@expr1073745789 outer@var1627 !=@expr1073745790 parent@var1628 &&@expr1073745791 parent@var1628 ) {
1082: parent@var1628 =@expr1073745792 parent@var1628 .@expr1073745793 nestedIn@var1629 ; }
1083: if (@expr1073745794 parent@var1628 &&@expr1073745795 parent@var1628 ==@expr1073745796 outer@var1627 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1630 ) {
1089: while (@expr1073745797 scope@var1630 ) {
1090: if (@expr1073745798 scope@var1630 .@expr1073745799 type@var1631 ==@expr1073745800 Scope ::@expr1073745801 eFunction ) {
1091: break ; }
1092: scope@var1630 =@expr1073745802 scope@var1630 .@expr1073745803 nestedIn@var1632 ;
1093: }
1094: if (@expr1073745804 !@expr1073745805 scope@var1630 ) {
1095: return nullptr ; }
1096: return scope@var1630 .@expr1073745806 function@var1633 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073745807 type@var1614 ==@expr1073745808 eClass ||@expr1073745809 type@var1614 ==@expr1073745810 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073745811 type@var1614 ==@expr1073745812 eClass ||@expr1073745813 type@var1614 ==@expr1073745814 eStruct ||@expr1073745815 type@var1614 ==@expr1073745816 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1614 !=@expr1073745817 eClass &&@expr1073745818 type@var1614 !=@expr1073745819 eStruct &&@expr1073745820 type@var1614 !=@expr1073745821 eUnion &&@expr1073745822 type@var1614 !=@expr1073745823 eGlobal &&@expr1073745824 type@var1614 !=@expr1073745825 eNamespace &&@expr1073745826 type@var1614 !=@expr1073745827 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1614 ==@expr1073745828 Scope ::@expr4005 ScopeType ::@expr1073745830 eFor ||@expr1073745831 type@var1614 ==@expr1073745832 Scope ::@expr4005 ScopeType ::@expr1073745834 eWhile ||@expr1073745835 type@var1614 ==@expr1073745836 Scope ::@expr4005 ScopeType ::@expr1073745838 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073745839 type@var1614 ==@expr1073745840 eIf ||@expr1073745841 type@var1614 ==@expr1073745842 eElse ||@expr1073745843
1117: type@var1614 ==@expr1073745844 eFor ||@expr1073745845 type@var1614 ==@expr1073745846 eWhile ||@expr1073745847 type@var1614 ==@expr1073745848 eDo ||@expr1073745849
1118: type@var1614 ==@expr1073745850 eSwitch ||@expr1073745851 type@var1614 ==@expr1073745852 eUnconditional ||@expr1073745853
1119: type@var1614 ==@expr1073745854 eTry ||@expr1073745855 type@var1614 ==@expr1073745856 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1634 , bool requireConst@var1635 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1636 , bool isC@var1637 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1638 ) {
1135: return const_cast < Scope *@expr4033 > (@expr1073745858 const_cast < const Scope *@expr4033 > (@expr1073745860 this@expr1073745861 ) .@expr1073745862 findRecordInNestedList (@expr1073745863 name@var1638 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1639 ) const ;
1139: Type * findType ( const std :: string & name@var1640 ) {
1140: return const_cast < Type *@expr4040 > (@expr1073745865 const_cast < const Scope *@expr4040 > (@expr1073745867 this@expr1073745868 ) .@expr1073745869 findType (@expr1073745870 name@var1640 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1641 ) ;
1148:
1149: void addVariable ( const Token * token_@var1642 , const Token * start_@var1643 ,
1150: const Token * end_@var1644 , AccessControl access_@var1645 , const Type * type_@var1646 ,
1151: const Scope * scope_@var1647 , const Settings * settings@var1648 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1649 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1650 ) {
1159: functionList@var1606 .@expr1073745871 push_back (@expr1073745872 func@var1650 ) ;
1160:
1161: const Function * back@var1651 ; back@var1651 =@expr1073745873 &@expr1073745874 functionList@var1606 .@expr1073745875 back (@expr1073745876 ) ;
1162:
1163: functionMap@var1607 .@expr1073745877 insert (@expr1073745878 make_pair (@expr1073745879 back@var1651 .@expr1073745880 tokenDef@var1652 .@expr1073745881 str (@expr1073745882 ) , back@var1651 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1653 , AccessControl varaccess@var1654 , const Settings * settings@var1655 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1656 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1657 , bool isCpp@var1658 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1659 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1660 , const Token * & vartok@var1661 , const Token * & typetok@var1662 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1663 , int args@var1664 , std :: vector < const Function * > & matches@var1665 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1666 , const Token * start@var1667 , const Token * end@var1668 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1669 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1670 ;
1239: int bits@var1671 ;
1240: int pointer@var1672 ;
1241: int constness@var1673 ;
1242: Reference reference@var1674 ; reference@var1674 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1675 ;
1245: const :: Type * smartPointerType@var1676 ;
1246: const Token * smartPointerTypeToken@var1677 ;
1247: const Library :: SmartPointer * smartPointer@var1678 ;
1248: const Library :: Container * container@var1679 ;
1249:
1250: const Token * containerTypeToken@var1680 ;
1251:
1252: std :: string originalTypeName@var1681 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1669 ( UNKNOWN_SIGN ) ,
1257: type@var1670 ( UNKNOWN_TYPE ) ,
1258: bits@var1671 ( 0 ) ,
1259: pointer@var1672 ( 0U ) ,
1260: constness@var1673 ( 0U ) ,
1261: typeScope@var1675 ( nullptr ) ,
1262: smartPointerType@var1676 ( nullptr ) ,
1263: smartPointerTypeToken@var1677 ( nullptr ) ,
1264: smartPointer@var1678 ( nullptr ) ,
1265: container@var1679 ( nullptr ) ,
1266: containerTypeToken@var1680 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1682 , enum Type t@var1683 , int p@var1684 )
1269: : sign@var1669 ( s@var1682 ) ,
1270: type@var1670 ( t@var1683 ) ,
1271: bits@var1671 ( 0 ) ,
1272: pointer@var1672 ( p@var1684 ) ,
1273: constness@var1673 ( 0U ) ,
1274: typeScope@var1675 ( nullptr ) ,
1275: smartPointerType@var1676 ( nullptr ) ,
1276: smartPointerTypeToken@var1677 ( nullptr ) ,
1277: smartPointer@var1678 ( nullptr ) ,
1278: container@var1679 ( nullptr ) ,
1279: containerTypeToken@var1680 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1685 , enum Type t@var1686 , int p@var1687 , int c@var1688 )
1282: : sign@var1669 ( s@var1685 ) ,
1283: type@var1670 ( t@var1686 ) ,
1284: bits@var1671 ( 0 ) ,
1285: pointer@var1672 ( p@var1687 ) ,
1286: constness@var1673 ( c@var1688 ) ,
1287: typeScope@var1675 ( nullptr ) ,
1288: smartPointerType@var1676 ( nullptr ) ,
1289: smartPointerTypeToken@var1677 ( nullptr ) ,
1290: smartPointer@var1678 ( nullptr ) ,
1291: container@var1679 ( nullptr ) ,
1292: containerTypeToken@var1680 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1689 , enum Type t@var1690 , int p@var1691 , int c@var1692 , const std :: string & otn@var1693 )
1295: : sign@var1669 ( s@var1689 ) ,
1296: type@var1670 ( t@var1690 ) ,
1297: bits@var1671 ( 0 ) ,
1298: pointer@var1672 ( p@var1691 ) ,
1299: constness@var1673 ( c@var1692 ) ,
1300: typeScope@var1675 ( nullptr ) ,
1301: smartPointerType@var1676 ( nullptr ) ,
1302: smartPointerTypeToken@var1677 ( nullptr ) ,
1303: smartPointer@var1678 ( nullptr ) ,
1304: container@var1679 ( nullptr ) ,
1305: containerTypeToken@var1680 ( nullptr ) ,
1306: originalTypeName@var1681 ( otn@var1693 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1694 , const Settings * settings@var1695 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1696 , bool longType@var1697 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1698 , const ValueType * func@var1699 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1700 , const Variable * callVar@var1701 , const Variable * funcVar@var1702 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073745883 type@var1670 >=@expr1073745884 ValueType ::@expr1073745885 Type ::@expr1073745886 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073745887 type@var1670 >=@expr1073745888 ValueType ::@expr4065 Type ::@expr1073745890 BOOL &&@expr1073745891 type@var1670 <=@expr1073745892 ValueType ::@expr4065 Type ::@expr1073745894 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073745895 type@var1670 >=@expr1073745896 ValueType ::@expr4073 Type ::@expr1073745898 FLOAT &&@expr1073745899 type@var1670 <=@expr1073745900 ValueType ::@expr4073 Type ::@expr1073745902 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1703 , const Settings * settings@var1704 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1675 &&@expr1073745903 typeScope@var1675 .@expr1073745904 type@var1705 ==@expr1073745905 Scope ::@expr1073745906 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1706 , bool p@var1707 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1708 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1709 , const Settings * settings@var1710 , ErrorLogger * errorLogger@var1711 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1712 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1713 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1714 ;
1359:
1360:
1361: std :: list < Type > typeList@var1715 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1716 , const Token * typeTok@var1717 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1718 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1719 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1720 , const Scope * startScope@var1721 , bool lookOutside@var1722 = false ) const ;
1382: Type * findType ( const Token * startTok@var1723 , Scope * startScope@var1724 , bool lookOutside@var1725 = false ) const {
1383: return const_cast < Type *@expr4083 > (@expr1073745908 this@expr1073745909 .@expr1073745910 findType (@expr1073745911 startTok@var1723 , const_cast < const Scope *@expr4083 > (@expr1073745913 startScope@var1724 ) , lookOutside@var1725 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1726 , const Scope * startScope@var1727 ) const ;
1387: Scope * findScope ( const Token * tok@var1728 , Scope * startScope@var1729 ) const {
1388: return const_cast < Scope *@expr4090 > (@expr1073745915 this@expr1073745916 .@expr1073745917 findScope (@expr1073745918 tok@var1728 , const_cast < const Scope *@expr4090 > (@expr1073745920 startScope@var1729 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1730 ) const {
1392: return varid@var1730 <@expr1073745921 mVariableList@var1787 .@expr1073745922 size (@expr1073745923 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1731 ) const {
1396: return mVariableList@var1787 .@expr1073745924 at (@expr1073745925 varId@var1731 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1787 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1732 , const std :: string & type@var1733 , const std :: string & msg@var1734 ) const ;
1407:
1408: void printOut ( const char * title@var1735 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1736 , const char * indent@var1737 ) const ;
1410: void printXml ( std :: ostream & out@var1738 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1739 , Token * tokens@var1740 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1741 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1742 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1743 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1744 , const Token * * tok@var1745 , const Token * argStart@var1746 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1747 , const Token * tok@var1748 , const Token * argStart@var1749 , const Token * funcStart@var1750 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1751 , const Token * & tok@var1752 , const Token * argStart@var1753 , const Token * funcStart@var1754 ) ;
1469: void addNewFunction ( Scope * * scope@var1755 , const Token * * tok@var1756 ) ;
1470: bool isFunction ( const Token * tok@var1757 , const Scope * outerScope@var1758 , const Token * * funcStart@var1759 , const Token * * argStart@var1760 , const Token * * declEnd@var1761 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1762 , const Scope * startScope@var1763 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1764 , const Scope * scope@var1765 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1766 , const Scope * ns@var1767 , const std :: string & path@var1768 , int path_length@var1769 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1770 , const Token * typeTok@var1771 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1772 , const Token * vartok@var1773 , Token * membertok@var1774 , const Variable * membervar@var1775 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1776 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1777 ) const ;
1485:
1486: void setValueType ( Token * tok@var1778 , const ValueType & valuetype@var1779 ) ;
1487: void setValueType ( Token * tok@var1780 , const Variable & var@var1781 ) ;
1488: void setValueType ( Token * tok@var1782 , const Enumerator & enumerator@var1783 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1784 ;
1491: const Settings * mSettings@var1785 ;
1492: ErrorLogger * mErrorLogger@var1786 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1787 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1788 ;
1499:
1500: bool mIsCpp@var1789 ;
1501: ValueType :: Sign mDefaultSignedness@var1790 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1791 ;
1505: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var1792 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var1793 ) {
47: mSettings@var1828 =@expr1073745926 settings@var1793 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var1828 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var1830 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var1831 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var1794 ) ;
72:
73: void addtoken ( const std :: string & str@var1795 , const int lineno@var1796 , const int column@var1797 , const int fileno@var1798 , bool split@var1799 = false ) ;
74: void addtoken ( const std :: string & str@var1800 , const Token * locationTok@var1801 ) ;
75:
76: void addtoken ( const Token * tok@var1802 , const int lineno@var1803 , const int column@var1804 , const int fileno@var1805 ) ;
77: void addtoken ( const Token * tok@var1806 , const Token * locationTok@var1807 ) ;
78: void addtoken ( const Token * tok@var1808 ) ;
79:
80: static void insertTokens ( Token * dest@var1809 , const Token * src@var1810 , int n@var1811 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var1812 , const Token * first@var1813 , const Token * last@var1814 , bool one_line@var1815 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var1816 , const std :: string & file0@var1817 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var1818 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var1819 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var1825 .@expr1073745927 front@var1832 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var1825 .@expr1073745928 front@var1832 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var1825 .@expr1073745929 back@var1833 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var1825 .@expr1073745930 back@var1833 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var1826 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var1820 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var1821 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var1822 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var1823 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var1824 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var1825 ;
206:
207:
208: std :: vector < std :: string > mFiles@var1826 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var1827 ;
212:
213:
214: const Settings * mSettings@var1828 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var1829 ;
217:
218:
219: bool mIsC@var1830 ;
220: bool mIsCpp@var1831 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var1834 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var1835 ;
67: mutable int mVarId@var1836 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var1837 ) ;
73: bool hasVariable ( const std :: string & varname@var1838 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var1839 ) const {
75: return mVariableId@var1834 .@expr1073745931 find (@expr1073745932 varname@var1839 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var1834 .@expr1073745933 end (@expr1073745934 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var1834 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745935 mVarId@var1836 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var1840 , ErrorLogger * errorLogger@var1841 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var1842 ) {
95: mTimerResults@var1962 =@expr1073745936 tr@var1842 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var1940 .@expr1073745937 isC (@expr1073745938 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var1940 .@expr1073745939 isCPP (@expr1073745940 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var1843 , bool * unknown@var1844 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var1845 , const std :: string & FileName@var1846 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var1847 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var1848 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var1849 ,
142: const char FileName@var1850 [ ] ,
143: const std :: string & configuration@var1851 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var1852 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var1853 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var1854 , const Token * end@var1855 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var1856 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var1857 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var1858 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var1859 , const Token * const tokEnd@var1860 , const bool only_k_r_fpar@var1861 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var1862 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var1863 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var1864 , bool commandWithCondition@var1865 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var1866 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var1867 , Token * * _tok2@var1868 , Token * * _tok3@var1869 , std :: string & value@var1870 , int & valueVarId@var1871 , bool & valueIsPointer@var1872 , bool floatvar@var1873 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var1874 , Token * tok3@var1875 , int varid@var1876 , const std :: string & structname@var1877 , std :: string & value@var1878 , int valueVarId@var1879 , bool valueIsPointer@var1880 , const Token * const valueToken@var1881 , int indentlevel@var1882 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var1883 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var1884 , const std :: string & endsWith@var1885 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var1886 , const std :: string & endsWith@var1887 , bool cpp@var1888 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var1889 ) {
585: mPreprocessor@var1963 =@expr1073745941 preprocessor@var1889 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var1963 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var1890 , const Token * end@var1891 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var1892 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var1893 , const std :: string & code@var1894 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var1895 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var1896 , const std :: string & what@var1897 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var1898 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var1899 , const std :: string & msg@var1900 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var1901 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var1902 , const std :: string & macroName@var1903 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var1904 , const Token * end@var1905 , bool allowSemicolon@var1906 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var1907 , const Severity :: SeverityType severity@var1908 , const std :: string & id@var1909 , const std :: string & msg@var1910 , bool inconclusive@var1911 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var1912 , Severity :: SeverityType severity@var1913 , const std :: string & id@var1914 , const std :: string & msg@var1915 , bool inconclusive@var1916 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var1917 , const Token * name@var1918 , const Token * typeDef@var1919 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var1920 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var1921 ,
821: const VariableMap & variableMap@var1922 ,
822: const int scopeStartVarId@var1923 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var1924 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var1925 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var1926 ,
827: int * varId@var1927 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var1928 ,
830: Token * const startToken@var1929 ,
831: const Token * const endToken@var1930 ,
832: const std :: map < std :: string , int > & varlist@var1931 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var1932 ,
834: int * varId_@var1933 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var1934 ) ;
849:
850: bool operatorEnd ( const Token * tok@var1935 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var1961 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var1936 ) {
861: mSettings@var1947 =@expr1073745942 settings@var1936 ;
862: list@var1940 .@expr1073745943 setSettings (@expr1073745944 settings@var1936 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var1949 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var1937 ) const ;
877:
878: void dump ( std :: ostream & out@var1938 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var1939 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var1959 ;
888: }
889:
|
892:
893: TokenList list@var1940 ;
894:
895: const Token * tokens ( ) const {
896: return list@var1940 .@expr1073745945 front (@expr1073745946 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var1941 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var1942 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var1943 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var1944 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var1947 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var1945 , bool inOperator@var1946 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745947 mVarId@var1959 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var1947 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var1948 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var1949 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var1950 ;
973:
974:
975:
976: std :: string mConfiguration@var1951 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var1952 ;
980:
981: struct TypedefInfo {
982: std :: string name@var1953 ;
983: std :: string filename@var1954 ;
984: int lineNumber@var1955 ;
985: int column@var1956 ;
986: bool used@var1957 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var1958 ;
989:
990:
991: int mVarId@var1959 ;
992:
993:
994: int mUnnamedCount@var1960 ;
995:
|
999:
1000: bool mCodeWithTemplates@var1961 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var1962 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var1963 ;
1013: } ;

##file cppcheck-2.8/lib/checktype.cpp

1:
|
39:
40: namespace {
41: CheckType instance@var1964 ;
42: }
43:
|
49:
50: static const struct CWE CWE195@var1965 ( 195U ) ;
51: static const struct CWE CWE197@var1966 ( 197U ) ;
52: static const struct CWE CWE758@var1967 ( 758U ) ;
53: static const struct CWE CWE190@var1968 ( 190U ) ;
54:
55:
56: void CheckType :: checkTooBigBitwiseShift ( )
57: {
58:
59: if (@expr1073745949 mSettings@var29 .@expr1073745950 platformType@var2093 ==@expr1073745951 Settings ::@expr1073745952 Unspecified@expr1073745948 ) {
60: return ; }
61:
62: for (@expr1073745953 const Token *@expr1073745954 tok@var1969 =@expr1073745955 mTokenizer@var28 .@expr1073745956 tokens (@expr1073745957 ) ; tok@var1969 ; tok@var1969 =@expr1073745958 tok@var1969 .@expr4135 next (@expr4136 ) ) {
63:
64: if (@expr1073745961 mTokenizer@var28 .@expr1073745962 isCPP (@expr1073745963 ) &&@expr1073745964 Token ::@expr4141 Match (@expr1073745966 tok@var1969 , "[;{}] %name% (" ) &&@expr1073745967 Token ::@expr1073745968 simpleMatch (@expr1073745969 tok@var1969 .@expr4146 linkAt (@expr4147 2 ) , ") ;" ) &&@expr1073745972 tok@var1969 .@expr4135 next (@expr4136 ) .@expr1073745975 isUpperCaseName (@expr1073745976 ) &&@expr1073745977 !@expr1073745978 tok@var1969 .@expr4135 next (@expr4136 ) .@expr1073745981 function (@expr1073745982 ) ) {
65: tok@var1969 =@expr1073745983 tok@var1969 .@expr4146 linkAt (@expr4147 2 ) ; }
66:
67: if (@expr1073745986 !@expr1073745987 tok@var1969 .@expr4164 astOperand1 (@expr4165 ) ||@expr1073745990 !@expr1073745991 tok@var1969 .@expr4168 astOperand2 (@expr4169 ) ) {
68: continue ; }
69:
70: if (@expr1073745994 !@expr1073745995 Token ::@expr4141 Match (@expr1073745997 tok@var1969 , "<<|>>|<<=|>>=" ) ) {
71: continue ; }
72:
73:
74: const ValueType * const lhstype@var1970 ; lhstype@var1970 =@expr1073745998 tok@var1969 .@expr4164 astOperand1 (@expr4165 ) .@expr1073746001 valueType (@expr1073746002 ) ;
75: if (@expr1073746003 !@expr1073746004 lhstype@var1970 ||@expr1073746005 !@expr1073746006 lhstype@var1970 .@expr1073746007 isIntegral (@expr1073746008 ) ||@expr1073746009 lhstype@var1970 .@expr1073746010 pointer@var1971 >=@expr1073746011 1 ) {
76: continue ; }
77:
78:
79:
80: int lhsbits@var1972 ;
81: if (@expr1073746012 (@expr1073746013 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746015 ValueType ::@expr4192 Type ::@expr1073746017 CHAR ) ||@expr1073746018
82: (@expr1073746019 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746021 ValueType ::@expr4192 Type ::@expr1073746023 SHORT ) ||@expr1073746024
83: (@expr1073746025 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746027 ValueType ::@expr4192 Type ::@expr1073746029 WCHAR_T ) ||@expr1073746030
84: (@expr1073746031 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746033 ValueType ::@expr4192 Type ::@expr1073746035 BOOL ) ||@expr1073746036
85: (@expr1073746037 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746039 ValueType ::@expr4192 Type ::@expr1073746041 INT ) ) {
86: lhsbits@var1972 =@expr1073746042 mSettings@var29 .@expr1073746043 int_bit@var2094 ; }
87: else { if (@expr1073746044 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746046 ValueType ::@expr4192 Type ::@expr1073746048 LONG ) {
88: lhsbits@var1972 =@expr1073746049 mSettings@var29 .@expr1073746050 long_bit@var2095 ; }
89: else { if (@expr1073746051 lhstype@var1970 .@expr4190 type@var1973 ==@expr1073746053 ValueType ::@expr4192 Type ::@expr1073746055 LONGLONG ) {
90: lhsbits@var1972 =@expr1073746056 mSettings@var29 .@expr1073746057 long_long_bit@var2096 ; }
91: else {
92: continue ; } } }
93:
94:
95: const ValueFlow ::@expr1073746058 Value * value@var1974 ; value@var1974 =@expr1073746059 tok@var1969 .@expr4168 astOperand2 (@expr4169 ) .@expr4238 getValueGE (@expr1073746063 lhsbits@var1972 , mSettings@var29 ) ;
96: if (@expr4240 value@var1974 &&@expr4241 mSettings@var29 .@expr4242 isEnabled (@expr4243 value@var1974 , false ) ) {
97: tooBigBitwiseShiftError (@expr1073746068 tok@var1969 , lhsbits@var1972 , *@expr4245 value@var1974 ) ; }
98: else { if (@expr1073746070 lhstype@var1970 .@expr1073746071 sign@var1975 ==@expr1073746072 ValueType ::@expr1073746073 Sign ::@expr1073746074 SIGNED ) {
99: value@var1974 =@expr1073746075 tok@var1969 .@expr4168 astOperand2 (@expr4169 ) .@expr4238 getValueGE (@expr1073746079 lhsbits@var1972 -@expr1073746080 1 , mSettings@var29 ) ;
100: if (@expr4240 value@var1974 &&@expr4241 mSettings@var29 .@expr4242 isEnabled (@expr4243 value@var1974 , false ) ) {
101: tooBigSignedBitwiseShiftError (@expr1073746085 tok@var1969 , lhsbits@var1972 , *@expr4245 value@var1974 ) ; }
102: } }
103: }
104: }
105:
106: void CheckType :: tooBigBitwiseShiftError ( const Token * tok@var1976 , int lhsbits@var1977 , const ValueFlow :: Value & rhsbits@var1978 )
107: {
108: const char id@var1979 [@expr1073746087 17 ] =@expr1073746088 "shiftTooManyBits" ;
109:
110: if (@expr1073746089 !@expr1073746090 tok@var1976 ) {
111: reportError (@expr1073746091 tok@var1976 , Severity ::@expr4268 error , id@var1979 , "Shifting 32-bit value by 40 bits is undefined behaviour" , CWE758@var1967 , Certainty ::@expr4269 normal ) ;
112: return ;
113: }
114:
115: const std ::@expr1073746094 list < std ::@expr4271 pair < const Token *@expr1073746096 , std ::@expr4271 string > > errorPath@var1980 =@expr1073746098 getErrorPath (@expr1073746099 tok@var1976 , &@expr1073746100 rhsbits@var1978 , "Shift" ) ;
116:
117: std ::@expr1073746101 ostringstream errmsg@var1981 ;
118: errmsg@var1981 <<@expr1073746102 "Shifting " <<@expr1073746103 lhsbits@var1977 <<@expr1073746104 "-bit value by " <<@expr1073746105 rhsbits@var1978 .@expr1073746106 intvalue@var1982 <<@expr1073746107 " bits is undefined behaviour" ;
119: if (@expr1073746108 rhsbits@var1978 .@expr4285 condition@var1983 ) {
120: errmsg@var1981 <<@expr1073746110 ". See condition at line " <<@expr1073746111 rhsbits@var1978 .@expr4285 condition@var1983 .@expr1073746113 linenr (@expr1073746114 ) <<@expr1073746115 "." ; }
121:
122: reportError (@expr1073746116 errorPath@var1980 , rhsbits@var1978 .@expr1073746117 errorSeverity (@expr1073746118 ) ?@expr1073746119 Severity ::@expr4268 error :@expr1073746121 Severity ::@expr1073746122 warning , id@var1979 , errmsg@var1981 .@expr1073746123 str (@expr1073746124 ) , CWE758@var1967 , rhsbits@var1978 .@expr1073746125 isInconclusive (@expr1073746126 ) ?@expr1073746127 Certainty ::@expr1073746128 inconclusive :@expr1073746129 Certainty ::@expr4269 normal ) ;
123: }
124:
125: void CheckType :: tooBigSignedBitwiseShiftError ( const Token * tok@var1984 , int lhsbits@var1985 , const ValueFlow :: Value & rhsbits@var1986 )
126: {
127: const char id@var1987 [@expr1073746131 23 ] =@expr1073746132 "shiftTooManyBitsSigned" ;
128:
129: const bool cpp14@var1988 =@expr1073746133 mSettings@var29 .@expr1073746134 standards@var2097 .@expr1073746135 cpp@var2098 >=@expr1073746136 Standards ::@expr1073746137 CPP14 ;
130:
131: std ::@expr1073746138 string behaviour@var1989 ; behaviour@var1989 =@expr1073746139 "undefined" ;
132: if (@expr4316 cpp14@var1988 ) {
133: behaviour@var1989 =@expr1073746141 "implementation-defined" ; }
134: if (@expr1073746142 !@expr1073746143 tok@var1984 ) {
135: reportError (@expr1073746144 tok@var1984 , Severity ::@expr4321 error , id@var1987 , "Shifting signed 32-bit value by 31 bits is " +@expr1073746146 behaviour@var1989 +@expr1073746147 " behaviour" , CWE758@var1967 , Certainty ::@expr4324 normal ) ;
136: return ;
137: }
138:
139: const std ::@expr1073746149 list < std ::@expr4326 pair < const Token *@expr1073746151 , std ::@expr4326 string > > errorPath@var1990 =@expr1073746153 getErrorPath (@expr1073746154 tok@var1984 , &@expr1073746155 rhsbits@var1986 , "Shift" ) ;
140:
141: std ::@expr1073746156 ostringstream errmsg@var1991 ;
142: errmsg@var1991 <<@expr1073746157 "Shifting signed " <<@expr1073746158 lhsbits@var1985 <<@expr1073746159 "-bit value by " <<@expr1073746160 rhsbits@var1986 .@expr1073746161 intvalue@var1992 <<@expr1073746162 " bits is " +@expr1073746163 behaviour@var1989 +@expr1073746164 " behaviour" ;
143: if (@expr1073746165 rhsbits@var1986 .@expr4342 condition@var1993 ) {
144: errmsg@var1991 <<@expr1073746167 ". See condition at line " <<@expr1073746168 rhsbits@var1986 .@expr4342 condition@var1993 .@expr1073746170 linenr (@expr1073746171 ) <<@expr1073746172 "." ; }
145:
146: Severity ::@expr1073746173 SeverityType severity@var1994 ; severity@var1994 =@expr1073746174 rhsbits@var1986 .@expr1073746175 errorSeverity (@expr1073746176 ) ?@expr1073746177 Severity ::@expr4321 error :@expr1073746179 Severity ::@expr1073746180 warning ;
147: if (@expr4316 cpp14@var1988 ) {
148: severity@var1994 =@expr1073746182 Severity ::@expr4359 portability ; }
149:
150: if (@expr1073746184 (@expr1073746185 severity@var1994 ==@expr1073746186 Severity ::@expr4359 portability ) &&@expr1073746188 !@expr1073746189 mSettings@var29 .@expr1073746190 severity@var2099 .@expr1073746191 isEnabled (@expr1073746192 Severity ::@expr4359 portability ) ) {
151: return ; }
152: reportError (@expr1073746194 errorPath@var1990 , severity@var1994 , id@var1987 , errmsg@var1991 .@expr1073746195 str (@expr1073746196 ) , CWE758@var1967 , rhsbits@var1986 .@expr1073746197 isInconclusive (@expr1073746198 ) ?@expr1073746199 Certainty ::@expr1073746200 inconclusive :@expr1073746201 Certainty ::@expr4324 normal ) ;
153: }
154:
|
158:
159: void CheckType :: checkIntegerOverflow ( )
160: {
161:
162: if (@expr1073746204 mSettings@var29 .@expr1073746205 platformType@var2093 ==@expr1073746206 Settings ::@expr1073746207 Unspecified@expr1073746203 ||@expr1073746208 mSettings@var29 .@expr4385 int_bit@var2094 >=@expr1073746210 MathLib ::@expr4387 bigint_bits@var77 ) {
163: return ; }
164:
165: for (@expr1073746212 const Token *@expr1073746213 tok@var1995 =@expr1073746214 mTokenizer@var28 .@expr1073746215 tokens (@expr1073746216 ) ; tok@var1995 ; tok@var1995 =@expr1073746217 tok@var1995 .@expr1073746218 next (@expr1073746219 ) ) {
166: if (@expr1073746220 !@expr1073746221 tok@var1995 .@expr1073746222 isArithmeticalOp (@expr1073746223 ) ) {
167: continue ; }
168:
169:
170: const ValueType * vt@var1996 ; vt@var1996 =@expr1073746224 tok@var1995 .@expr1073746225 valueType (@expr1073746226 ) ;
171: if (@expr1073746227 !@expr1073746228 vt@var1996 ||@expr1073746229 !@expr1073746230 vt@var1996 .@expr1073746231 isIntegral (@expr1073746232 ) ||@expr1073746233 vt@var1996 .@expr1073746234 sign@var1997 !=@expr1073746235 ValueType ::@expr1073746236 Sign ::@expr1073746237 SIGNED ) {
172: continue ; }
173:
174: unsigned int bits@var1998 ;
175: if (@expr1073746238 vt@var1996 .@expr4415 type@var1999 ==@expr1073746240 ValueType ::@expr4417 Type ::@expr1073746242 INT ) {
176: bits@var1998 =@expr1073746243 mSettings@var29 .@expr4385 int_bit@var2094 ; }
177: else { if (@expr1073746245 vt@var1996 .@expr4415 type@var1999 ==@expr1073746247 ValueType ::@expr4417 Type ::@expr1073746249 LONG ) {
178: bits@var1998 =@expr1073746250 mSettings@var29 .@expr1073746251 long_bit@var2095 ; }
179: else { if (@expr1073746252 vt@var1996 .@expr4415 type@var1999 ==@expr1073746254 ValueType ::@expr4417 Type ::@expr1073746256 LONGLONG ) {
180: bits@var1998 =@expr1073746257 mSettings@var29 .@expr1073746258 long_long_bit@var2096 ; }
181: else {
182: continue ; } } }
183:
184: if (@expr1073746259 bits@var1998 >=@expr1073746260 MathLib ::@expr4387 bigint_bits@var77 ) {
185: continue ; }
186:
187:
188: const long long maxvalue@var2000 =@expr1073746262 (@expr1073746263 (@expr1073746264 (@expr1073746265 unsigned long long ) 1 ) <<@expr1073746266 (@expr1073746267 bits@var1998 -@expr1073746268 1 ) ) -@expr1073746269 1 ;
189:
190:
191: const ValueFlow ::@expr1073746270 Value * value@var2001 ; value@var2001 =@expr1073746271 tok@var1995 .@expr1073746272 getValueGE (@expr1073746273 maxvalue@var2000 +@expr1073746274 1 , mSettings@var29 ) ;
192: if (@expr1073746275 !@expr4452 value@var2001 ) {
193: value@var2001 =@expr1073746277 tok@var1995 .@expr1073746278 getValueLE (@expr1073746279 -@expr1073746280 maxvalue@var2000 -@expr1073746281 2 , mSettings@var29 ) ; }
194: if (@expr1073746282 !@expr4452 value@var2001 ||@expr1073746284 !@expr1073746285 mSettings@var29 .@expr1073746286 isEnabled (@expr1073746287 value@var2001 , false ) ) {
195: continue ; }
196:
|
200:
201: integerOverflowError (@expr1073746288 tok@var1995 , *@expr1073746289 value@var2001 ) ;
202: }
203: }
204:
205: void CheckType :: integerOverflowError ( const Token * tok@var2002 , const ValueFlow :: Value & value@var2003 )
206: {
207: const std ::@expr1073746290 string expr@var2004 (@expr1073746291 tok@var2002 ?@expr1073746292 tok@var2002 .@expr1073746293 expressionString (@expr1073746294 ) :@expr1073746295 "" ) ;
208:
209: std ::@expr1073746296 string msg@var2005 ;
210: if (@expr1073746297 value@var2003 .@expr4474 condition@var2006 ) {
211: msg@var2005 =@expr1073746299 ValueFlow ::@expr1073746300 eitherTheConditionIsRedundant (@expr1073746301 value@var2003 .@expr4474 condition@var2006 ) +@expr1073746303
212: " or there is signed integer overflow for expression '" +@expr1073746304 expr@var2004 +@expr1073746305 "'." ; }
213: else {
214: msg@var2005 =@expr1073746306 "Signed integer overflow for expression '" +@expr1073746307 expr@var2004 +@expr1073746308 "'." ; }
215:
216: if (@expr1073746309 value@var2003 .@expr1073746310 safe@var2007 ) {
217: msg@var2005 =@expr1073746311 "Safe checks: " +@expr1073746312 msg@var2005 ; }
218:
219: reportError (@expr1073746313 getErrorPath (@expr1073746314 tok@var2002 , &@expr1073746315 value@var2003 , "Integer overflow" ) ,
220: value@var2003 .@expr1073746316 errorSeverity (@expr1073746317 ) ?@expr1073746318 Severity ::@expr1073746319 error :@expr1073746320 Severity ::@expr1073746321 warning ,
221: getMessageId (@expr1073746322 value@var2003 , "integerOverflow" ) .@expr1073746323 c_str (@expr1073746324 ) ,
222: msg@var2005 ,
223: CWE190@var1968 ,
224: value@var2003 .@expr1073746325 isInconclusive (@expr1073746326 ) ?@expr1073746327 Certainty ::@expr1073746328 inconclusive :@expr1073746329 Certainty ::@expr1073746330 normal ) ;
225: }
226:
|
230:
231: void CheckType :: checkSignConversion ( )
232: {
233: if (@expr1073746331 !@expr1073746332 mSettings@var29 .@expr1073746333 severity@var2099 .@expr1073746334 isEnabled (@expr1073746335 Severity ::@expr1073746336 warning ) ) {
234: return ; }
235:
236: for (@expr1073746337 const Token *@expr4514 tok@var2008 =@expr1073746339 mTokenizer@var28 .@expr1073746340 tokens (@expr1073746341 ) ; tok@var2008 ; tok@var2008 =@expr1073746342 tok@var2008 .@expr1073746343 next (@expr1073746344 ) ) {
237: if (@expr1073746345 !@expr1073746346 tok@var2008 .@expr1073746347 isArithmeticalOp (@expr1073746348 ) ||@expr1073746349 Token ::@expr1073746350 Match (@expr1073746351 tok@var2008 , "+|-" ) ) {
238: continue ; }
239:
240:
241: if (@expr1073746352 !@expr1073746353 (@expr1073746354 tok@var2008 .@expr4531 valueType (@expr4532 ) &&@expr1073746357 tok@var2008 .@expr4531 valueType (@expr4532 ) .@expr1073746360 sign@var2111 ==@expr1073746361 ValueType ::@expr4538 Sign ::@expr4539 UNSIGNED ) ) {
242: continue ; }
243:
244:
245: const Token * astOperands@var2009 [@expr1073746364 2 ] =@expr1073746365 {@expr1073746366 tok@var2008 .@expr1073746367 astOperand1 (@expr1073746368 ) , tok@var2008 .@expr1073746369 astOperand2 (@expr1073746370 ) } ;
246: for (@expr1073746371 const Token *@expr4514 tok1@var2010 :@expr1073746373 astOperands@var2009 ) {
247: if (@expr1073746374 !@expr1073746375 tok1@var2010 ) {
248: continue ; }
249: const ValueFlow ::@expr1073746376 Value * negativeValue@var2011 ; negativeValue@var2011 =@expr1073746377
250: ValueFlow ::@expr1073746378 findValue (@expr1073746379 tok1@var2010 .@expr1073746380 values (@expr1073746381 ) , mSettings@var29 , [@expr1073746382 &@expr4559 ] (@expr1073746384 const ValueFlow ::@expr1073746385 Value &@expr4559 v@var2012 ) {
251: return !@expr1073746387 v@var2012 .@expr1073746388 isImpossible (@expr1073746389 ) &&@expr1073746390 v@var2012 .@expr1073746391 isIntValue (@expr1073746392 ) &&@expr1073746393 (@expr1073746394 v@var2012 .@expr1073746395 intvalue@var2013 <=@expr1073746396 -1 ||@expr1073746397 v@var2012 .@expr1073746398 wideintvalue@var2014 <=@expr1073746399 -1 ) ;
252: } ) ;
253: if (@expr1073746400 !@expr1073746401 negativeValue@var2011 ) {
254: continue ; }
255: if (@expr1073746402 tok1@var2010 .@expr4579 valueType (@expr4580 ) &&@expr1073746405 tok1@var2010 .@expr4579 valueType (@expr4580 ) .@expr1073746408 sign@var2111 !=@expr1073746409 ValueType ::@expr4538 Sign ::@expr4539 UNSIGNED ) {
256: signConversionError (@expr1073746412 tok1@var2010 , negativeValue@var2011 , tok1@var2010 .@expr1073746413 isNumber (@expr1073746414 ) ) ; }
257: }
258: }
259: }
260:
261: void CheckType :: signConversionError ( const Token * tok@var2015 , const ValueFlow :: Value * negativeValue@var2016 , const bool constvalue@var2017 )
262: {
263: const std ::@expr1073746415 string expr@var2018 (@expr1073746416 tok@var2015 ?@expr1073746417 tok@var2015 .@expr1073746418 expressionString (@expr1073746419 ) :@expr1073746420 "var" ) ;
264:
265: std ::@expr1073746421 ostringstream msg@var2019 ;
266: if (@expr1073746422 tok@var2015 &&@expr1073746423 tok@var2015 .@expr1073746424 isName (@expr1073746425 ) ) {
267: msg@var2019 <<@expr1073746426 "$symbol:" <<@expr1073746427 expr@var2018 <<@expr1073746428 "\n" ; }
268: if (@expr1073746429 constvalue@var2017 ) {
269: msg@var2019 <<@expr4606 "Expression '" <<@expr4607 expr@var2018 <<@expr1073746432 "' has a negative value. That is converted to an unsigned value and used in an unsigned calculation." ; }
270: else {
271: msg@var2019 <<@expr4606 "Expression '" <<@expr4607 expr@var2018 <<@expr1073746435 "' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." ; }
272:
273: if (@expr1073746436 !@expr1073746437 negativeValue@var2016 ) {
274: reportError (@expr1073746438 tok@var2015 , Severity ::@expr4615 warning , "signConversion" , msg@var2019 .@expr4616 str (@expr4617 ) , CWE195@var1965 , Certainty ::@expr4618 normal ) ; }
275: else {
276: const std ::@expr1073746443 list < std ::@expr4620 pair < const Token *@expr1073746445 , std ::@expr4620 string > > & errorPath@var2020 =@expr1073746447 getErrorPath (@expr1073746448 tok@var2015 , negativeValue@var2016 , "Negative value is converted to an unsigned value" ) ;
277: reportError (@expr1073746449 errorPath@var2020 ,
278: Severity ::@expr4615 warning ,
279: Check ::@expr1073746451 getMessageId (@expr1073746452 *@expr1073746453 negativeValue@var2016 , "signConversion" ) .@expr1073746454 c_str (@expr1073746455 ) ,
280: msg@var2019 .@expr4616 str (@expr4617 ) ,
281: CWE195@var1965 ,
282: negativeValue@var2016 .@expr1073746458 isInconclusive (@expr1073746459 ) ?@expr1073746460 Certainty ::@expr1073746461 inconclusive :@expr1073746462 Certainty ::@expr4618 normal ) ;
283: }
284: }
285:
|
290:
291: void CheckType :: checkLongCast ( )
292: {
293: if (@expr1073746464 !@expr1073746465 mSettings@var29 .@expr1073746466 severity@var2099 .@expr1073746467 isEnabled (@expr1073746468 Severity ::@expr1073746469 style ) ) {
294: return ; }
295:
296:
297: for (@expr1073746470 const Token *@expr4647 tok@var2021 =@expr1073746472 mTokenizer@var28 .@expr1073746473 tokens (@expr1073746474 ) ; tok@var2021 ; tok@var2021 =@expr1073746475 tok@var2021 .@expr1073746476 next (@expr1073746477 ) ) {
298: if (@expr1073746478 tok@var2021 .@expr1073746479 str (@expr1073746480 ) !=@expr1073746481 "=" ||@expr1073746482 !@expr1073746483 Token ::@expr4660 Match (@expr1073746485 tok@var2021 .@expr4662 astOperand2 (@expr4663 ) , "*|<<" ) ) {
299: continue ; }
300:
301: if (@expr1073746488 tok@var2021 .@expr4662 astOperand2 (@expr4663 ) .@expr1073746491 hasKnownIntValue (@expr1073746492 ) ) {
302: const ValueFlow ::@expr1073746493 Value &@expr1073746494 v@var2022 =@expr1073746495 tok@var2021 .@expr4662 astOperand2 (@expr4663 ) .@expr1073746498 values (@expr1073746499 ) .@expr1073746500 front (@expr1073746501 ) ;
303: if (@expr1073746502 mSettings@var29 .@expr1073746503 isIntValue (@expr1073746504 v@var2022 .@expr1073746505 intvalue@var2023 ) ) {
304: continue ; }
305: }
306:
307: const ValueType * lhstype@var2024 ; lhstype@var2024 =@expr1073746506 tok@var2021 .@expr4683 astOperand1 (@expr4684 ) ?@expr1073746509 tok@var2021 .@expr4683 astOperand1 (@expr4684 ) .@expr1073746512 valueType (@expr1073746513 ) :@expr1073746514 nullptr ;
308: const ValueType * rhstype@var2025 ; rhstype@var2025 =@expr1073746515 tok@var2021 .@expr4662 astOperand2 (@expr4663 ) .@expr1073746518 valueType (@expr1073746519 ) ;
309:
310: if (@expr1073746520 !@expr1073746521 lhstype@var2024 ||@expr1073746522 !@expr1073746523 rhstype@var2025 ) {
311: continue ; }
312:
313:
314: if (@expr1073746524 rhstype@var2025 .@expr1073746525 type@var2026 ==@expr1073746526 ValueType ::@expr4703 Type ::@expr4704 INT &&@expr1073746529
315: rhstype@var2025 .@expr1073746530 pointer@var2027 ==@expr1073746531 0U &&@expr1073746532
316: rhstype@var2025 .@expr1073746533 originalTypeName@var2028 .@expr1073746534 empty (@expr1073746535 ) &&@expr1073746536
317: (@expr1073746537 lhstype@var2024 .@expr4714 type@var2029 ==@expr1073746539 ValueType ::@expr4703 Type ::@expr1073746541 LONG ||@expr1073746542 lhstype@var2024 .@expr4714 type@var2029 ==@expr1073746544 ValueType ::@expr4703 Type ::@expr1073746546 LONGLONG ) &&@expr1073746547
318: lhstype@var2024 .@expr1073746548 pointer@var2030 ==@expr1073746549 0U &&@expr1073746550
319: lhstype@var2024 .@expr1073746551 constness@var2031 ==@expr1073746552 1U &&@expr1073746553
320: lhstype@var2024 .@expr1073746554 originalTypeName@var2032 .@expr1073746555 empty (@expr1073746556 ) ) {
321: longCastAssignError (@expr1073746557 tok@var2021 ) ; }
322: }
323:
324:
325: const SymbolDatabase * symbolDatabase@var2033 ; symbolDatabase@var2033 =@expr1073746558 mTokenizer@var28 .@expr1073746559 getSymbolDatabase (@expr1073746560 ) ;
326: for (@expr1073746561 const Scope *@expr4647 scope@var2034 :@expr1073746563 symbolDatabase@var2033 .@expr1073746564 functionScopes@var2035 ) {
327:
328:
329: const Token * def@var2036 ; def@var2036 =@expr1073746565 scope@var2034 .@expr1073746566 classDef@var2037 ;
330: bool islong@var2038 ; islong@var2038 =@expr1073746567 false ;
331: while (@expr1073746568 Token ::@expr4660 Match (@expr1073746570 def@var2036 , "%type%|::" ) ) {
332: if (@expr1073746571 def@var2036 .@expr1073746572 str (@expr1073746573 ) ==@expr1073746574 "long" &&@expr1073746575 def@var2036 .@expr1073746576 originalName (@expr1073746577 ) .@expr1073746578 empty (@expr1073746579 ) ) {
333: islong@var2038 =@expr1073746580 true ;
334: break ;
335: }
336: def@var2036 =@expr1073746581 def@var2036 .@expr1073746582 previous (@expr1073746583 ) ;
337: }
338: if (@expr1073746584 !@expr1073746585 islong@var2038 ) {
339: continue ; }
340:
341:
342: const Token * ret@var2039 ; ret@var2039 =@expr1073746586 nullptr ;
343: for (@expr1073746587 const Token *@expr4647 tok@var2040 =@expr1073746589 scope@var2034 .@expr1073746590 bodyStart@var2041 ; tok@var2040 !=@expr1073746591 scope@var2034 .@expr1073746592 bodyEnd@var2042 ; tok@var2040 =@expr1073746593 tok@var2040 .@expr1073746594 next (@expr1073746595 ) ) {
344: if (@expr1073746596 tok@var2040 .@expr1073746597 str (@expr1073746598 ) ==@expr1073746599 "return" ) {
345: if (@expr1073746600 Token ::@expr4660 Match (@expr1073746602 tok@var2040 .@expr4779 astOperand1 (@expr4780 ) , "<<|*" ) ) {
346: const ValueType * type@var2043 ; type@var2043 =@expr1073746605 tok@var2040 .@expr4779 astOperand1 (@expr4780 ) .@expr1073746608 valueType (@expr1073746609 ) ;
347: if (@expr1073746610 type@var2043 &&@expr1073746611 type@var2043 .@expr1073746612 type@var2044 ==@expr1073746613 ValueType ::@expr4703 Type ::@expr4704 INT &&@expr1073746616 type@var2043 .@expr1073746617 pointer@var2045 ==@expr1073746618 0U &&@expr1073746619 type@var2043 .@expr1073746620 originalTypeName@var2046 .@expr1073746621 empty (@expr1073746622 ) ) {
348: ret@var2039 =@expr1073746623 tok@var2040 ; }
349: }
350:
351: if (@expr1073746624 ret@var2039 !=@expr1073746625 tok@var2040 ) {
352: ret@var2039 =@expr1073746626 nullptr ;
353: break ;
354: }
355: }
356: }
357:
358: if (@expr1073746627 ret@var2039 ) {
359: longCastReturnError (@expr1073746628 ret@var2039 ) ; }
360: }
361: }
362:
363: void CheckType :: longCastAssignError ( const Token * tok@var2047 )
364: {
365: reportError (@expr1073746629 tok@var2047 ,
366: Severity ::@expr1073746630 style ,
367: "truncLongCastAssignment" ,
368: "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.\nint result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'l = a * b;' => 'l = (long)a * b;'."
369: , CWE197@var1966 , Certainty ::@expr1073746631 normal ) ;
370: }
371:
372: void CheckType :: longCastReturnError ( const Token * tok@var2048 )
373: {
374: reportError (@expr1073746632 tok@var2048 ,
375: Severity ::@expr1073746633 style ,
376: "truncLongCastReturn" ,
377: "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.\nint result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'return a*b;' => 'return (long)a*b'."
378: , CWE197@var1966 , Certainty ::@expr1073746634 normal ) ;
379: }
380:
|
384:
385: void CheckType :: checkFloatToIntegerOverflow ( )
386: {
387: for (@expr1073746635 const Token *@expr1073746636 tok@var2049 =@expr1073746637 mTokenizer@var28 .@expr1073746638 tokens (@expr1073746639 ) ; tok@var2049 ; tok@var2049 =@expr1073746640 tok@var2049 .@expr1073746641 next (@expr1073746642 ) ) {
388: const ValueType * vtint@var2050 ; const ValueType * vtfloat@var2051 ;
389: const std ::@expr1073746643 list < ValueFlow ::@expr1073746644 Value > * floatValues@var2052 ;
390:
391:
392: if (@expr1073746645 Token ::@expr1073746646 Match (@expr1073746647 tok@var2049 , "( %name%" ) &&@expr1073746648 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) &&@expr1073746651 !@expr1073746652 tok@var2049 .@expr4829 astOperand2 (@expr4830 ) ) {
393: vtint@var2050 =@expr1073746655 tok@var2049 .@expr1073746656 valueType (@expr1073746657 ) ;
394: vtfloat@var2051 =@expr1073746658 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4837 valueType (@expr4838 ) ;
395: floatValues@var2052 =@expr1073746663 &@expr4840 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4843 values (@expr4844 ) ;
396: checkFloatToIntegerOverflow (@expr4845 tok@var2049 , vtint@var2050 , vtfloat@var2051 , floatValues@var2052 ) ;
397: }
398:
399:
400: else { if (@expr1073746670 tok@var2049 .@expr4847 str (@expr4848 ) ==@expr1073746673 "=" &&@expr1073746674 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) &&@expr1073746677 tok@var2049 .@expr4829 astOperand2 (@expr4830 ) ) {
401: vtint@var2050 =@expr1073746680 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4837 valueType (@expr4838 ) ;
402: vtfloat@var2051 =@expr1073746685 tok@var2049 .@expr4829 astOperand2 (@expr4830 ) .@expr1073746688 valueType (@expr1073746689 ) ;
403: floatValues@var2052 =@expr1073746690 &@expr1073746691 tok@var2049 .@expr4829 astOperand2 (@expr4830 ) .@expr1073746694 values (@expr1073746695 ) ;
404: checkFloatToIntegerOverflow (@expr4845 tok@var2049 , vtint@var2050 , vtfloat@var2051 , floatValues@var2052 ) ;
405: }
406:
407: else { if (@expr1073746697 tok@var2049 .@expr4847 str (@expr4848 ) ==@expr1073746700 "return" &&@expr1073746701 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) &&@expr1073746704 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4837 valueType (@expr4838 ) &&@expr1073746709 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4837 valueType (@expr4838 ) .@expr1073746714 isFloat (@expr1073746715 ) ) {
408: const Scope * scope@var2053 ; scope@var2053 =@expr1073746716 tok@var2049 .@expr1073746717 scope (@expr1073746718 ) ;
409: while (@expr1073746719 scope@var2053 &&@expr1073746720 scope@var2053 .@expr4897 type@var2054 !=@expr1073746722 Scope ::@expr4899 ScopeType ::@expr1073746724 eLambda &&@expr1073746725 scope@var2053 .@expr4897 type@var2054 !=@expr1073746727 Scope ::@expr4899 ScopeType ::@expr4905 eFunction ) {
410: scope@var2053 =@expr1073746730 scope@var2053 .@expr1073746731 nestedIn@var2055 ; }
411: if (@expr1073746732 scope@var2053 &&@expr1073746733 scope@var2053 .@expr4897 type@var2054 ==@expr1073746735 Scope ::@expr4899 ScopeType ::@expr4905 eFunction &&@expr1073746738 scope@var2053 .@expr4915 function@var2056 &&@expr1073746740 scope@var2053 .@expr4915 function@var2056 .@expr4918 retDef@var2057 ) {
412: const ValueType &@expr1073746743 valueType@var2058 =@expr1073746744 ValueType ::@expr1073746745 parseDecl (@expr1073746746 scope@var2053 .@expr4915 function@var2056 .@expr4918 retDef@var2057 , mSettings@var29 ) ;
413: vtfloat@var2051 =@expr1073746749 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4837 valueType (@expr4838 ) ;
414: floatValues@var2052 =@expr1073746754 &@expr4840 tok@var2049 .@expr4825 astOperand1 (@expr4826 ) .@expr4843 values (@expr4844 ) ;
415: checkFloatToIntegerOverflow (@expr1073746760 tok@var2049 , &@expr1073746761 valueType@var2058 , vtfloat@var2051 , floatValues@var2052 ) ;
416: }
417: } } }
418: }
419: }
420:
421: void CheckType :: checkFloatToIntegerOverflow ( const Token * tok@var2059 , const ValueType * vtint@var2060 , const ValueType * vtfloat@var2061 , const std :: list < ValueFlow :: Value > * floatValues@var2062 )
422: {
423:
424: if (@expr1073746763 !@expr1073746764 vtint@var2060 ||@expr1073746765 !@expr1073746766 vtint@var2060 .@expr1073746767 isIntegral (@expr1073746768 ) ) {
425: return ; }
426: if (@expr1073746769 !@expr1073746770 vtfloat@var2061 ||@expr1073746771 !@expr1073746772 vtfloat@var2061 .@expr1073746773 isFloat (@expr1073746774 ) ) {
427: return ; }
428:
429: for (@expr1073746775 const ValueFlow ::@expr1073746776 Value &@expr1073746777 f@var2063 :@expr1073746778 *@expr1073746779 floatValues@var2062 ) {
430: if (@expr1073746780 f@var2063 .@expr1073746781 valueType@var2064 !=@expr1073746782 ValueFlow ::@expr1073746783 Value ::@expr1073746784 ValueType ::@expr1073746785 FLOAT ) {
431: continue ; }
432: if (@expr1073746786 !@expr1073746787 mSettings@var29 .@expr1073746788 isEnabled (@expr1073746789 &@expr1073746790 f@var2063 , false ) ) {
433: continue ; }
434: if (@expr1073746791 f@var2063 .@expr4968 floatValue@var2065 >=@expr1073746793 std ::@expr4970 exp2 (@expr1073746795 mSettings@var29 .@expr4972 long_long_bit@var2096 ) ) {
435: floatToIntegerOverflowError (@expr4973 tok@var2059 , f@var2063 ) ; }
436: else { if (@expr1073746798 (@expr1073746799 -@expr1073746800 f@var2063 .@expr4968 floatValue@var2065 ) >@expr1073746802 std ::@expr4970 exp2 (@expr1073746804 mSettings@var29 .@expr4972 long_long_bit@var2096 -@expr1073746806 1 ) ) {
437: floatToIntegerOverflowError (@expr4973 tok@var2059 , f@var2063 ) ; }
438: else { if (@expr1073746808 mSettings@var29 .@expr1073746809 platformType@var2093 !=@expr1073746810 Settings ::@expr1073746811 Unspecified@expr1073746762 ) {
439: int bits@var2066 ; bits@var2066 =@expr1073746812 0 ;
440: if (@expr1073746813 vtint@var2060 .@expr4990 type@var2067 ==@expr1073746815 ValueType ::@expr4992 Type ::@expr1073746817 CHAR ) {
441: bits@var2066 =@expr1073746818 mSettings@var29 .@expr1073746819 char_bit@var2100 ; }
442: else { if (@expr1073746820 vtint@var2060 .@expr4990 type@var2067 ==@expr1073746822 ValueType ::@expr4992 Type ::@expr1073746824 SHORT ) {
443: bits@var2066 =@expr1073746825 mSettings@var29 .@expr1073746826 short_bit@var2101 ; }
444: else { if (@expr1073746827 vtint@var2060 .@expr4990 type@var2067 ==@expr1073746829 ValueType ::@expr4992 Type ::@expr1073746831 INT ) {
445: bits@var2066 =@expr1073746832 mSettings@var29 .@expr1073746833 int_bit@var2094 ; }
446: else { if (@expr1073746834 vtint@var2060 .@expr4990 type@var2067 ==@expr1073746836 ValueType ::@expr4992 Type ::@expr1073746838 LONG ) {
447: bits@var2066 =@expr1073746839 mSettings@var29 .@expr1073746840 long_bit@var2095 ; }
448: else { if (@expr1073746841 vtint@var2060 .@expr4990 type@var2067 ==@expr1073746843 ValueType ::@expr4992 Type ::@expr1073746845 LONGLONG ) {
449: bits@var2066 =@expr1073746846 mSettings@var29 .@expr4972 long_long_bit@var2096 ; }
450: else {
451: continue ; } } } } }
452: if (@expr1073746848 bits@var2066 <@expr1073746849 MathLib ::@expr1073746850 bigint_bits@var77 &&@expr1073746851 f@var2063 .@expr4968 floatValue@var2065 >=@expr1073746853 (@expr1073746854 (@expr1073746855 (@expr1073746856 unsigned long long ) 1 ) <<@expr1073746857 bits@var2066 ) ) {
453: floatToIntegerOverflowError (@expr4973 tok@var2059 , f@var2063 ) ; }
454: } } }
455: }
456: }
457:
458: void CheckType :: floatToIntegerOverflowError ( const Token * tok@var2068 , const ValueFlow :: Value & value@var2069 )
459: {
460: std ::@expr1073746859 ostringstream errmsg@var2070 ;
461: errmsg@var2070 <<@expr1073746860 "Undefined behaviour: float (" <<@expr1073746861 value@var2069 .@expr1073746862 floatValue@var2071 <<@expr1073746863 ") to integer conversion overflow." ;
462: reportError (@expr1073746864 getErrorPath (@expr1073746865 tok@var2068 , &@expr1073746866 value@var2069 , "float to integer conversion" ) ,
463: value@var2069 .@expr1073746867 errorSeverity (@expr1073746868 ) ?@expr1073746869 Severity ::@expr1073746870 error :@expr1073746871 Severity ::@expr1073746872 warning ,
464: "floatConversionOverflow" ,
465: errmsg@var2070 .@expr1073746873 str (@expr1073746874 ) , CWE190@var1968 , value@var2069 .@expr1073746875 isInconclusive (@expr1073746876 ) ?@expr1073746877 Certainty ::@expr1073746878 inconclusive :@expr1073746879 Certainty ::@expr1073746880 normal ) ;
466: }

##file cppcheck-2.8/lib/settings.h

14:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2072 ; mFlags@var2072 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2072 ;
54: }
55: void clear ( ) {
56: mFlags@var2072 =@expr1073746881 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2072 =@expr1073746882 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2073 ) {
62: if (@expr1073746883 enabled@var2073 ) {
63: fill (@expr1073746884 ) ; }
64: else {
65: clear (@expr1073746885 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2074 ) const {
68: return (@expr5062 mFlags@var2072 &@expr1073746887 (@expr5062 1U <<@expr1073746889 (@expr1073746890 uint32_t ) flag@var2074 ) ) !=@expr1073746891 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2075 ) {
71: mFlags@var2072 |=@expr1073746892 (@expr1073746893 1U <<@expr1073746894 (@expr1073746895 uint32_t ) flag@var2075 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2076 ) {
74: mFlags@var2072 &=@expr1073746896 ~@expr1073746897 (@expr1073746898 1U <<@expr1073746899 (@expr1073746900 uint32_t ) flag@var2076 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2077 , bool enabled@var2078 ) {
77: if (@expr1073746901 enabled@var2078 ) {
78: enable (@expr1073746902 flag@var2077 ) ; }
79: else {
80: disable (@expr1073746903 flag@var2077 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2079 ; mFlags@var2079 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2079 ;
54: }
55: void clear ( ) {
56: mFlags@var2079 =@expr1073746904 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2079 =@expr1073746905 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2080 ) {
62: if (@expr1073746906 enabled@var2080 ) {
63: fill (@expr1073746907 ) ; }
64: else {
65: clear (@expr1073746908 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2081 ) const {
68: return (@expr5085 mFlags@var2079 &@expr1073746910 (@expr5085 1U <<@expr1073746912 (@expr1073746913 uint32_t ) flag@var2081 ) ) !=@expr1073746914 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2082 ) {
71: mFlags@var2079 |=@expr1073746915 (@expr1073746916 1U <<@expr1073746917 (@expr1073746918 uint32_t ) flag@var2082 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2083 ) {
74: mFlags@var2079 &=@expr1073746919 ~@expr1073746920 (@expr1073746921 1U <<@expr1073746922 (@expr1073746923 uint32_t ) flag@var2083 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2084 , bool enabled@var2085 ) {
77: if (@expr1073746924 enabled@var2085 ) {
78: enable (@expr1073746925 flag@var2084 ) ; }
79: else {
80: disable (@expr1073746926 flag@var2084 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2086 ; mFlags@var2086 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2086 ;
54: }
55: void clear ( ) {
56: mFlags@var2086 =@expr1073746927 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2086 =@expr1073746928 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2087 ) {
62: if (@expr1073746929 enabled@var2087 ) {
63: fill (@expr1073746930 ) ; }
64: else {
65: clear (@expr1073746931 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2088 ) const {
68: return (@expr5108 mFlags@var2086 &@expr1073746933 (@expr5108 1U <<@expr1073746935 (@expr1073746936 uint32_t ) flag@var2088 ) ) !=@expr1073746937 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2089 ) {
71: mFlags@var2086 |=@expr1073746938 (@expr1073746939 1U <<@expr1073746940 (@expr1073746941 uint32_t ) flag@var2089 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2090 ) {
74: mFlags@var2086 &=@expr1073746942 ~@expr1073746943 (@expr1073746944 1U <<@expr1073746945 (@expr1073746946 uint32_t ) flag@var2090 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2091 , bool enabled@var2092 ) {
77: if (@expr1073746947 enabled@var2092 ) {
78: enable (@expr1073746948 flag@var2091 ) ; }
79: else {
80: disable (@expr1073746949 flag@var2091 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  severity possible {3@53,2@80}
  id possible {"truncLongCastReturn"@53,"truncLongCastAssignment"@54,"signConversion"@80}
  msg possible {"int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.\nint result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'return a*b;' => 'return (long)a*b'."@53,"int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.\nint result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'l = a * b;' => 'l = (long)a * b;'."@54}
  certainty possible 0@53
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 47
  ( always "Type"
Line 51
  ( always "Type"
Line 92
  nullptr always 0
Line 93
  nullptr always 0
  32 always 32
  64 always 64
Line 94
  nullptr always 0
  31 always 31
  31 always 31
Line 95
  nullptr always 0
  1LL always 1
  << always 4294967296
  32 always 32
Line 96
  nullptr always 0
  nullptr always 0
  false always 0
Line 97
  nullptr always 0
Line 98
  nullptr always 0
Line 100
  = always 2
  :: always 2
  FLOAT always 2
Line 101
  = always 1e+100
  1E100 always 1e+100
Line 102
  nullptr always 0
Line 106
  "Type" always "Type"
Line 110
  "Type checks\n- bitwise shift by too many bits (only enabled when --platform is used)\n- signed integer overflow (only enabled when --platform is used)\n- dangerous sign conversion, when signed value can be negative\n- possible loss of information when assigning int result to long variable\n- possible loss of information when returning int result as long return value\n- float conversion overflow\n" always "Type checks\n- bitwise shift by too many bits (only enabled when --platform is used)\n- signed integer overflow (only enabled when --platform is used)\n- dangerous sign conversion, when signed value can be negative\n- possible loss of information when assigning int result to long variable\n- possible loss of information when returning int result as long return value\n- float conversion overflow\n"
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@1149,34@1405}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@4,34@5}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@4,""@5,""@6,"U"@7,"U"@8,"u"@9,"u"@10,"u8"@11,"u8"@12}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@122,34@123}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@119,34@121}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@94,128@95,64@96,32@97,16@98,8@99,4@100,2@101,1@102}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@103,128@104,64@105,32@106,16@107,8@108,4@109,2@110,1@111}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@103,4294967167@104,4294967231@105,4294967263@106,4294967279@107,4294967287@108,4294967291@109,4294967293@110,4294967294@111}
  flag {!<=-1,256@103,128@104,64@105,32@106,16@107,8@108,4@109,2@110,1@111}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible ") ;"@115
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@249,4@250,0@251}
  t possible {10@249,4@250,0@251}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@249,4@250,0@251}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@249,0@251}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@249,0@251}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@249}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@249}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@249}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@249}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@249}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@1}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@3,17179869184@14,8589934592@16,34359738368@18,4294967296@20,2147483648@22,1073741824@24,536870912@26,268435456@28}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@90,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@91}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@2,17179869184@13,8589934592@15,34359738368@17,4294967296@19,2147483648@21,1073741824@23,536870912@25,268435456@27}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@2,17179869184@13,8589934592@15,34359738368@17,4294967296@19,2147483648@21,1073741824@23,536870912@25,268435456@27}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@192,4096@195,16384@198,2048@199,1024@200,65536@201,512@202,256@203,128@204}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@157,4194304@159,8388608@160,2097152@162,1048576@163,524288@164,262144@165,131072@166,65536@167}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@135,2097152@136,1048576@137,524288@138,262144@139,131072@140,65536@141,32768@142,16384@143}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@135,4292870143@136,4293918719@137,4294443007@138,4294705151@139,4294836223@140,4294901759@141,4294934527@142,4294950911@143}
  flag {!<=-1,8388608@135,2097152@136,1048576@137,524288@138,262144@139,131072@140,65536@141,32768@142,16384@143}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 50
  195U always 195
Line 51
  197U always 197
Line 52
  758U always 758
Line 53
  190U always 190
Line 59
  == always {!<=-1,!>=2}
Line 64
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "[;{}] %name% (" always "[;{}] %name% ("
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  2 always 2
  ") ;" always ") ;"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 65
  2 always 2
Line 67
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 70
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "<<|>>|<<=|>>=" always "<<|>>|<<=|>>="
Line 74
  ( always !0
Line 75
  ! always {!<=-1,!>=2}
  lhstype always symbolic=(tok->astOperand1()->valueType())
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  >= always {!<=-1,!>=2}
  1 always 1
Line 81
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . possible {13,14}
  == {!<=-1,!>=2,0}
  :: always 9
  CHAR always 9
  || {!<=-1,!>=2,0}
Line 82
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . {13,14,!9}
  == {!<=-1,!>=2,0}
  :: always 10
  SHORT always 10
  || {!<=-1,!>=2,0}
Line 83
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . {13,14,!9,!10}
  == {!<=-1,!>=2,0}
  :: always 11
  WCHAR_T always 11
  || {!<=-1,!>=2,0}
Line 84
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  :: always 8
  BOOL always 8
  || {!<=-1,!>=2,0}
Line 85
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . {13,14,!11,!8}
  == {!<=-1,!>=2,0}
  :: always 12
  INT always 12
Line 87
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . {14,!9,!10,!11,!8,!12}
  == {!<=-1,!>=2,0}
  :: always 13
  LONG always 13
Line 89
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  . always {!9,!10,!11,!8,!12,!13}
  == always {!<=-1,!>=2}
  :: always 14
  LONGLONG always 14
Line 95
  lhsbits possible {symbolic=(mSettings->int_bit),symbolic=(mSettings->long_bit),symbolic=(mSettings->long_long_bit)}
Line 96
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  value always !0
  false always 0
Line 97
  value always !0
Line 98
  lhstype {symbolic=(tok->astOperand1()->valueType()),!0}
  == always {!<=-1,!>=2}
  :: always 1
  SIGNED always 1
Line 99
  1 always 1
Line 100
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  value always !0
  false always 0
Line 101
  value always !0
Line 108
  17 always 17
  = always "shiftTooManyBits"
  "shiftTooManyBits" always "shiftTooManyBits"
Line 110
  ! {!<=-1,!>=2,1@138}
  tok possible 0@138
Line 111
  tok always 0
  :: always 1
  error always 1
  id always "shiftTooManyBits"
  "Shifting 32-bit value by 40 bits is undefined behaviour" always "Shifting 32-bit value by 40 bits is undefined behaviour"
  :: always 0
  normal always 0
Line 115
  tok always !0
  & {lifetime[Address]=(rhsbits),!0}
  "Shift" always "Shift"
Line 118
  "Shifting " always "Shifting "
  "-bit value by " always "-bit value by "
  " bits is undefined behaviour" always " bits is undefined behaviour"
Line 120
  ". See condition at line " always ". See condition at line "
  . always !0
  "." always "."
Line 122
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
  id always "shiftTooManyBits"
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 127
  23 always 23
  = always "shiftTooManyBitsSigned"
  "shiftTooManyBitsSigned" always "shiftTooManyBitsSigned"
Line 129
  cpp14 always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 2
  CPP14 always 2
Line 131
  = always "undefined"
  "undefined" always "undefined"
Line 132
  cpp14 {symbolic=(mSettings->standards.cpp>=Standards::CPP14),!<=-1,!>=2,0}
Line 133
  = always "implementation-defined"
  "implementation-defined" always "implementation-defined"
Line 134
  ! {!<=-1,!>=2,1@139}
  tok possible 0@139
Line 135
  tok always 0
  :: always 1
  error always 1
  id always "shiftTooManyBitsSigned"
  "Shifting signed 32-bit value by 31 bits is " always "Shifting signed 32-bit value by 31 bits is "
  " behaviour" always " behaviour"
  :: always 0
  normal always 0
Line 139
  tok always !0
  & {lifetime[Address]=(rhsbits),!0}
  "Shift" always "Shift"
Line 142
  "Shifting signed " always "Shifting signed "
  "-bit value by " always "-bit value by "
  " bits is " always " bits is "
  " behaviour" always " behaviour"
Line 144
  ". See condition at line " always ". See condition at line "
  . always !0
  "." always "."
Line 146
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
Line 147
  cpp14 {symbolic=(mSettings->standards.cpp>=Standards::CPP14),!<=-1,!>=2}
Line 148
  = always 5
  :: always 5
  portability always 5
Line 150
  severity possible {symbolic=(rhsbits.errorSeverity()?Severity::error:Severity::warning),5}
  == {!<=-1,!>=2,1}
  :: always 5
  portability always 5
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 5
  portability always 5
Line 152
  id always "shiftTooManyBitsSigned"
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 162
  == always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
Line 166
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 171
  ! always {!<=-1,!>=2}
  vt always symbolic=(tok->valueType())
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  vt {symbolic=(tok->valueType()),!0}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  vt {symbolic=(tok->valueType()),!0}
  != always {!<=-1,!>=2}
  :: always 1
  SIGNED always 1
Line 174
  bits always !<=-1
Line 175
  vt {symbolic=(tok->valueType()),!0}
  . possible {13,14}
  == {!<=-1,!>=2,0}
  :: always 12
  INT always 12
Line 176
  bits always !<=-1
  = always !<=-1
Line 177
  vt {symbolic=(tok->valueType()),!0}
  . {14,!12}
  == {!<=-1,!>=2,0}
  :: always 13
  LONG always 13
Line 178
  bits always !<=-1
  = always !<=-1
Line 179
  vt {symbolic=(tok->valueType()),!0}
  . always {!12,!13}
  == always {!<=-1,!>=2}
  :: always 14
  LONGLONG always 14
Line 180
  bits always !<=-1
  = always !<=-1
Line 184
  bits always !<=-1
  >= always {!<=-1,!>=2}
Line 188
  = always !<=-1
  ( always 1
  1 always 1
  << always !<=0
  bits {!<=-1,!>=symbolic=(MathLib::bigint_bits),<=symbolic=(MathLib::bigint_bits-1)}
  - always !<=-1
  1 always 1
  - always !<=-1
  1 always 1
Line 191
  1 always 1
Line 192
  ! always {!<=-1,!>=2}
Line 193
  2 always 2
Line 194
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  value always !0
  false always 0
Line 201
  value always !0
Line 207
  tok possible 0@140
  ? possible ""
  tok always !0
  : always ""
  "" always ""
Line 211
  . always !0
Line 212
  " or there is signed integer overflow for expression '" always " or there is signed integer overflow for expression '"
  "'." always "'."
Line 214
  "Signed integer overflow for expression '" always "Signed integer overflow for expression '"
  "'." always "'."
Line 216
  . always {!<=-1,!>=2}
  safe always {!<=-1,!>=2}
Line 217
  "Safe checks: " always "Safe checks: "
Line 219
  tok possible 0@140
  & {lifetime[Address]=(value),!0}
  "Integer overflow" always "Integer overflow"
Line 220
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
Line 221
  "integerOverflow" always "integerOverflow"
  ( {lifetime[Object]=(getMessageId(value,"integerOverflow")),!0}
Line 224
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 233
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
Line 237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "+|-" always "+|-"
Line 241
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  == always {!<=-1,!>=2}
  :: always 2
  UNSIGNED always 2
Line 245
  2 always 2
Line 247
  ! always {!<=-1,!>=2}
Line 250
  tok1 always !0
Line 251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  -1 always -1
  || always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
  -1 always -1
Line 253
  ! always {!<=-1,!>=2}
Line 255
  tok1 always !0
  && always {!<=-1,!>=2}
  tok1 always !0
  ( always !0
  != always {!<=-1,!>=2}
  :: always 2
  UNSIGNED always 2
Line 256
  tok1 always !0
  negativeValue always !0
  tok1 always !0
  ( always {!<=-1,!>=2}
Line 261
  , always {!<=-1,!>=2}
  constvalue always {!<=-1,!>=2}
Line 263
  tok possible 0
  ? possible "var"
  tok always !0
  : always "var"
  "var" always "var"
Line 266
  tok possible 0@141
  && always {!<=-1,!>=2}
  tok always !0
  ( always {!<=-1,!>=2}
Line 267
  "$symbol:" always "$symbol:"
  "\n" always "\n"
Line 268
  constvalue {!<=-1,!>=2,0@141}
Line 269
  "Expression '" always "Expression '"
  "' has a negative value. That is converted to an unsigned value and used in an unsigned calculation." always "' has a negative value. That is converted to an unsigned value and used in an unsigned calculation."
Line 271
  "Expression '" always "Expression '"
  "' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation." always "' can have a negative value. That is converted to an unsigned value and used in an unsigned calculation."
Line 273
  ! {!<=-1,!>=2,1@141}
  negativeValue possible 0@141
Line 274
  tok possible 0@141
  :: always 2
  warning always 2
  "signConversion" always "signConversion"
  :: always 0
  normal always 0
Line 276
  negativeValue always !0
  "Negative value is converted to an unsigned value" always "Negative value is converted to an unsigned value"
Line 278
  :: always 2
  warning always 2
Line 279
  negativeValue always !0
  "signConversion" always "signConversion"
  ( {lifetime[Object]=(Check::getMessageId(*negativeValue,"signConversion")),!0}
Line 282
  negativeValue always !0
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
Line 298
  != always {!<=-1,!>=2}
  "=" always "="
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "*|<<" always "*|<<"
Line 301
  ( always {!<=-1,!>=2}
Line 303
  v always symbolic=(tok->astOperand2()->values().front())
Line 307
  ( always !0
  : always 0
  nullptr always 0
Line 310
  ! always {!<=-1,!>=2}
  lhstype always symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr)
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  rhstype always symbolic=(tok->astOperand2()->valueType())
Line 314
  rhstype {symbolic=(tok->astOperand2()->valueType()),!0}
  == always {!<=-1,!>=2}
  :: always 12
  INT always 12
  && always {!<=-1,!>=2}
Line 315
  rhstype {symbolic=(tok->astOperand2()->valueType()),!0}
  == always {!<=-1,!>=2}
  0U always 0
  && always {!<=-1,!>=2}
Line 316
  rhstype {symbolic=(tok->astOperand2()->valueType()),!0}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 317
  lhstype {symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr),!0}
  == always {!<=-1,!>=2}
  :: always 13
  LONG always 13
  || always {!<=-1,!>=2}
  lhstype {symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr),!0}
  . always !13
  == always {!<=-1,!>=2}
  :: always 14
  LONGLONG always 14
  && always {!<=-1,!>=2}
Line 318
  lhstype {symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr),!0}
  == always {!<=-1,!>=2}
  0U always 0
  && always {!<=-1,!>=2}
Line 319
  lhstype {symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr),!0}
  == always {!<=-1,!>=2}
  1U always 1
  && always {!<=-1,!>=2}
Line 320
  lhstype {symbolic=(tok->astOperand1()?tok->astOperand1()->valueType():nullptr),!0}
  ( always {!<=-1,!>=2}
Line 326
  symbolDatabase always symbolic=(mTokenizer->getSymbolDatabase())
Line 330
  islong always {!<=-1,!>=2}
  islong always {!<=-1,!>=2}
  = always 0
  false always 0
Line 331
  ( always {!<=-1,!>=2}
  def possible symbolic=(scope->classDef)
  "%type%|::" always "%type%|::"
Line 332
  == always {!<=-1,!>=2}
  "long" always "long"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  islong always {!<=-1,!>=2}
  = always 1
  true always 1
Line 338
  ! {!<=-1,!>=2,1,0}
  islong {!<=-1,!>=2,0,1}
Line 342
  = always 0
  nullptr always 0
Line 343
  != always {!<=-1,!>=2}
  tok possible symbolic=(ret)
Line 344
  == always {!<=-1,!>=2}
  "return" always "return"
Line 345
  ( always {!<=-1,!>=2}
  "<<|*" always "<<|*"
Line 347
  type always symbolic=(tok->astOperand1()->valueType())
  && always {!<=-1,!>=2}
  type {symbolic=(tok->astOperand1()->valueType()),!0}
  == always {!<=-1,!>=2}
  :: always 12
  INT always 12
  && always {!<=-1,!>=2}
  type {symbolic=(tok->astOperand1()->valueType()),!0}
  == always {!<=-1,!>=2}
  0U always 0
  && always {!<=-1,!>=2}
  type always symbolic=(tok->astOperand1()->valueType())
  ( always {!<=-1,!>=2}
Line 351
  ret possible symbolic=(tok)
  != {!<=-1,!>=2,0}
  tok possible symbolic=(ret)
Line 352
  = always 0
  nullptr always 0
Line 358
  ret possible 0
Line 359
  ret always !0
Line 365
  tok possible 0@142
Line 366
  :: always 3
  style always 3
Line 367
  "truncLongCastAssignment" always "truncLongCastAssignment"
Line 368
  "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.\nint result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'l = a * b;' => 'l = (long)a * b;'." always "int result is assigned to long variable. If the variable is long to avoid loss of information, then you have loss of information.\nint result is assigned to long variable. If the variable is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'l = a * b;' => 'l = (long)a * b;'."
Line 369
  :: always 0
  normal always 0
Line 374
  tok possible 0@143
Line 375
  :: always 3
  style always 3
Line 376
  "truncLongCastReturn" always "truncLongCastReturn"
Line 377
  "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.\nint result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'return a*b;' => 'return (long)a*b'." always "int result is returned as long value. If the return value is long to avoid loss of information, then you have loss of information.\nint result is returned as long value. If the return value is long to avoid loss of information, then there is loss of information. To avoid loss of information you must cast a calculation operand to long, for example 'return a*b;' => 'return (long)a*b'."
Line 378
  :: always 0
  normal always 0
Line 392
  ( always {!<=-1,!>=2}
  "( %name%" always "( %name%"
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 393
  vtint always Uninit
Line 394
  vtfloat always Uninit
  ( always !0
Line 395
  = always !0
  & always !0
  ( always !0
Line 396
  vtint always symbolic=(tok->valueType())
  vtfloat always symbolic=(tok->astOperand1()->valueType())
  floatValues {symbolic=(&tok->astOperand1()->values()),!0}
Line 400
  ( possible size=6
  == {!<=-1,!>=2,0}
  "=" always "="
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 401
  vtint always Uninit
  ( always !0
Line 402
  vtfloat always Uninit
  ( always !0
Line 403
  = always !0
  & always !0
  ( always !0
Line 404
  vtint always symbolic=(tok->astOperand1()->valueType())
  vtfloat always symbolic=(tok->astOperand2()->valueType())
  floatValues {symbolic=(&tok->astOperand2()->values()),!0}
Line 407
  == always {!<=-1,!>=2}
  "return" always "return"
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  && always {!<=-1,!>=2}
  ( always !0
  ( always !0
  ( always {!<=-1,!>=2}
Line 409
  scope possible {symbolic=(tok->scope()),0}
  && always {!<=-1,!>=2}
  scope {symbolic=(tok->scope()),!0}
  != always {!<=-1,!>=2}
  :: always 15
  eLambda always 15
  && always {!<=-1,!>=2}
  scope {symbolic=(tok->scope()),!0}
  . always !15
  != always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 410
  scope always !0
Line 411
  scope possible {symbolic=(tok->scope()),0}
  && always {!<=-1,!>=2}
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
  && always {!<=-1,!>=2}
  scope always !0
  && always {!<=-1,!>=2}
  . always !0
Line 412
  scope always !0
  . always !0
  . always !0
Line 413
  vtfloat always Uninit
  = always !0
  ( always !0
  ( always !0
Line 414
  = always !0
  & always !0
  ( always !0
Line 415
  & {lifetime[Address]=(valueType),!0}
  vtfloat {symbolic=(tok->astOperand1()->valueType()),!0}
  floatValues {symbolic=(&tok->astOperand1()->values()),!0}
Line 424
  ! always {!<=-1,!>=2}
  vtint possible {symbolic=(tok->valueType())@29,symbolic=(tok->astOperand1()->valueType())@39,lifetime[Address]=(valueType)@52}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  vtint {!0,symbolic=(tok->valueType())@29,symbolic=(tok->astOperand1()->valueType())@39,lifetime[Address]=(valueType)@52}
  ( always {!<=-1,!>=2}
Line 426
  ! always {!<=-1,!>=2}
  vtfloat possible {symbolic=(tok->astOperand1()->valueType())@29,symbolic=(tok->astOperand2()->valueType())@39}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  vtfloat always !0
  ( always {!<=-1,!>=2}
Line 430
  != always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(*floatValues),!0}
  false always 0
Line 434
  >= always {!<=-1,!>=2}
Line 436
  . {!>=symbolic=(std::exp2(mSettings->long_long_bit)),<=symbolic=(std::exp2(mSettings->long_long_bit)-1)}
  > always {!<=-1,!>=2}
  1 always 1
Line 438
  != always {!<=-1,!>=2}
Line 439
  = always 0
  0 always 0
Line 440
  . possible {10,12,13,14}
  == {!<=-1,!>=2,0}
  :: always 9
  CHAR always 9
Line 442
  . {12,13,14,!9}
  == {!<=-1,!>=2,0}
  :: always 10
  SHORT always 10
Line 444
  . {13,14,!9,!10}
  == {!<=-1,!>=2,0}
  :: always 12
  INT always 12
Line 446
  . {14,!9,!10,!12}
  == {!<=-1,!>=2,0}
  :: always 13
  LONG always 13
Line 448
  . always {!9,!10,!12,!13}
  == always {!<=-1,!>=2}
  :: always 14
  LONGLONG always 14
Line 452
  bits possible {symbolic=(mSettings->char_bit),symbolic=(mSettings->short_bit),symbolic=(mSettings->int_bit),symbolic=(mSettings->long_bit),symbolic=(mSettings->long_long_bit)}
  < always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  ( always 1
  1 always 1
  << always !<=-1
  bits {<=symbolic=(MathLib::bigint_bits-1),!>=symbolic=(MathLib::bigint_bits)}
Line 461
  "Undefined behaviour: float (" always "Undefined behaviour: float ("
  ") to integer conversion overflow." always ") to integer conversion overflow."
Line 462
  tok possible 0@144
  & {lifetime[Address]=(value),!0}
  "float to integer conversion" always "float to integer conversion"
Line 463
  ( always {!<=-1,!>=2}
  :: always 1
  error always 1
  : always 2
  :: always 2
  warning always 2
Line 464
  "floatConversionOverflow" always "floatConversionOverflow"
Line 465
  ( always {!<=-1,!>=2}
  :: always 1
  inconclusive always 1
  : always 0
  :: always 0
  normal always 0
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,3@55,2@82,5@107}
  flag possible {3@55,2@82,5@107}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
