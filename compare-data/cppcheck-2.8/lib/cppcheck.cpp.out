

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var2 ) {
44: if (@expr1073744168 bit@var2 >=@expr1073744169 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073744170 (@expr1073744171 1LL <<@expr1073744172 (@expr1073744173 bit@var2 -@expr1073744174 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var3 ) {
50: if (@expr1073744175 bit@var3 >=@expr1073744176 64 ) {
51: return (@expr2353 ~@expr1073744178 0ULL ) >>@expr1073744179 1 ; }
52: return (@expr2353 1LL <<@expr1073744181 (@expr2353 bit@var3 -@expr1073744183 1 ) ) -@expr1073744184 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var4 ) const {
59: return value@var4 >=@expr1073744185 min_value (@expr1073744186 int_bit@var14 ) &&@expr1073744187 value@var4 <=@expr1073744188 max_value (@expr1073744189 int_bit@var14 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var5 ) const {
63: unsigned long long intMax@var6 ; intMax@var6 =@expr1073744190 max_value (@expr1073744191 int_bit@var14 ) ;
64: return value@var5 <=@expr1073744192 intMax@var6 ;
65: }
66:
67: bool isLongValue ( long long value@var7 ) const {
68: return value@var7 >=@expr1073744193 min_value (@expr1073744194 long_bit@var15 ) &&@expr1073744195 value@var7 <=@expr1073744196 max_value (@expr1073744197 long_bit@var15 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var8 ) const {
72: unsigned long long longMax@var9 ; longMax@var9 =@expr1073744198 max_value (@expr1073744199 long_bit@var15 ) ;
73: return value@var8 <=@expr1073744200 longMax@var9 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var10 ) const {
77: unsigned long long longLongMax@var11 ; longLongMax@var11 =@expr1073744201 max_value (@expr1073744202 long_long_bit@var16 ) ;
78: return value@var10 <=@expr1073744203 longLongMax@var11 ;
79: }
80:
81: int char_bit@var12 ;
82: int short_bit@var13 ;
83: int int_bit@var14 ;
84: int long_bit@var15 ;
85: int long_long_bit@var16 ;
86:
87:
88: int sizeof_bool@var17 ;
89: int sizeof_short@var18 ;
90: int sizeof_int@var19 ;
91: int sizeof_long@var20 ;
92: int sizeof_long_long@var21 ;
93: int sizeof_float@var22 ;
94: int sizeof_double@var23 ;
95: int sizeof_long_double@var24 ;
96: int sizeof_wchar_t@var25 ;
97: int sizeof_size_t@var26 ;
98: int sizeof_pointer@var27 ;
99:
100: char defaultSign@var28 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var29 ;
115:
116:
117: bool platform ( PlatformType type@var30 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var31 [ ] , const std :: string & filename@var32 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var33 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var29 ==@expr1073744204 Win32A ||@expr1073744205
136: platformType@var29 ==@expr1073744206 Win32W ||@expr1073744207
137: platformType@var29 ==@expr1073744208 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073744209 platformType@var29 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var34 ) {
145: switch (@expr1073744210 pt@var34 ) {
146: case Unspecified :@expr2387 ;
147: return "Unspecified" ;
148: case Native :@expr2387 ;
149: return "Native" ;
150: case Win32A :@expr2387 ;
151: return "win32A" ;
152: case Win32W :@expr2387 ;
153: return "win32W" ;
154: case Win64 :@expr2387 ;
155: return "win64" ;
156: case Unix32 :@expr2387 ;
157: return "unix32" ;
158: case Unix64 :@expr2387 ;
159: return "unix64" ;
160: case PlatformFile :@expr2387 ;
161: return "platformFile" ;
162: default :@expr2387 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073744220 char_bit@var12 +@expr1073744221 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073744222 char_bit@var12 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073744223 char_bit@var12 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var35 ) const {
35: return p@var35 .@expr1073744224 first@var36 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var37 ) const {
42: return p@var37 .@expr1073744225 second@var38 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var39 , const T & x@var40 )
48: {
49: return std ::@expr1073744226 find (@expr1073744227 r@var39 .@expr1073744228 begin (@expr1073744229 ) , r@var39 .@expr2406 end (@expr2407 ) , x@var40 ) !=@expr1073744232 r@var39 .@expr2406 end (@expr2407 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var41 , const T & x@var42 )
54: {
55: return std ::@expr1073744235 find (@expr1073744236 r@var41 .@expr1073744237 begin (@expr1073744238 ) , r@var41 .@expr2415 end (@expr2416 ) , x@var42 ) !=@expr1073744241 r@var41 .@expr2415 end (@expr2416 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var43 , const U & x@var44 )
60: {
61: return std ::@expr1073744244 find (@expr1073744245 r@var43 .@expr1073744246 begin (@expr1073744247 ) , r@var43 .@expr2424 end (@expr2425 ) , x@var44 ) !=@expr1073744250 r@var43 .@expr2424 end (@expr2425 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var45 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744253 t@var45 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var46 , char c@var47 )
74: {
75: return !@expr1073744254 str@var46 .@expr1073744255 empty (@expr1073744256 ) &&@expr1073744257 str@var46 .@expr1073744258 back (@expr1073744259 ) ==@expr1073744260 c@var47 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var48 , const char end@var49 [ ] , unsigned long endlen@var50 )
79: {
80: return (@expr2437 str@var48 .@expr2438 size (@expr2439 ) >=@expr1073744264 endlen@var50 ) &&@expr1073744265 (@expr2437 str@var48 .@expr1073744267 compare (@expr1073744268 str@var48 .@expr2438 size (@expr2439 ) -@expr1073744271 endlen@var50 , endlen@var50 , end@var49 ) ==@expr1073744272 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var51 , const char ( & end@var52 ) [ N ] )
85: {
86: return endsWith (@expr1073744274 str@var51 , end@var52 , N@expr1073744273 -@expr1073744275 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var53 , char q@var54 , const std :: string & p@var55 )
90: {
91: if (@expr1073744276 !@expr1073744277 endsWith (@expr1073744278 str@var53 , q@var54 ) ) {
92: return false ; }
93: if (@expr1073744279 (@expr1073744280 str@var53 .@expr1073744281 length (@expr1073744282 ) +@expr1073744283 1 ) >@expr1073744284 p@var55 .@expr1073744285 length (@expr1073744286 ) &&@expr1073744287 (@expr1073744288 str@var53 .@expr1073744289 compare (@expr1073744290 0 , p@var55 .@expr1073744291 size (@expr1073744292 ) +@expr1073744293 1 , p@var55 +@expr1073744294 q@var54 ) ==@expr1073744295 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var56 , char q@var57 )
99: {
100: static const std ::@expr2472 vector < std ::@expr2472 string > suffixes@var58 {@expr1073744298 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744299 const std ::@expr2472 string &@expr1073744301 p@var59 :@expr1073744302 suffixes@var58 ) {
102: if (@expr1073744303 isPrefixStringCharLiteral (@expr1073744304 str@var56 , q@var57 , p@var59 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var60 )
109: {
110: return isStringCharLiteral (@expr1073744305 str@var60 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var61 )
114: {
115: return isStringCharLiteral (@expr1073744306 str@var61 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var62 , char q@var63 )
119: {
120: const unsigned long quotePos@var64 =@expr1073744307 str@var62 .@expr1073744308 find (@expr1073744309 q@var63 ) ;
121: return str@var62 .@expr1073744310 substr (@expr1073744311 quotePos@var64 +@expr1073744312 1U , str@var62 .@expr1073744313 size (@expr1073744314 ) -@expr1073744315 quotePos@var64 -@expr1073744316 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var65 )
125: {
126: if (@expr1073744317 isStringLiteral (@expr1073744318 str@var65 ) ) {
127: return getStringCharLiteral (@expr1073744319 str@var65 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var66 )
132: {
133: if (@expr1073744320 isCharLiteral (@expr1073744321 str@var66 ) ) {
134: return getStringCharLiteral (@expr1073744322 str@var66 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var67 )
139: {
140: if (@expr1073744323 i@var67 ==@expr1073744324 1 ) {
141: return "st" ; }
142: if (@expr1073744325 i@var67 ==@expr1073744326 2 ) {
143: return "nd" ; }
144: if (@expr1073744327 i@var67 ==@expr1073744328 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var68 , const std :: string & rhs@var69 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var70 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var71 , const std :: string & name@var72 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var73 , const std :: string & name@var74 ) ;
156:
157: void strTolower ( std :: string & str@var75 ) ;

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var76 , const std :: string & rhs@var77 ) const {
41: return caseInsensitiveStringCompare (@expr1073744329 lhs@var76 , rhs@var77 ) <@expr1073744330 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var85 ( cppcheck :: Platform :: Unspecified ) , msc@var86 ( false ) , useMfc@var87 ( false ) { }
67: std :: string cfg@var78 ;
68: std :: string filename@var79 ;
69: std :: string defines@var80 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var80 +@expr1073744331 (@expr1073744332 msc@var86 ?@expr1073744333 ";_MSC_VER=1900" :@expr1073744334 "" ) +@expr1073744335 (@expr1073744336 useMfc@var87 ?@expr1073744337 ";__AFXWIN_H__=1" :@expr1073744338 "" ) ;
72: }
73: std :: set < std :: string > undefs@var81 ;
74: std :: list < std :: string > includePaths@var82 ;
75: std :: list < std :: string > systemIncludePaths@var83 ;
76: std :: string standard@var84 ;
77: cppcheck :: Platform :: PlatformType platformType@var85 ;
78: bool msc@var86 ;
79: bool useMfc@var87 ;
80:
81: void parseCommand ( std :: string command@var88 ) ;
82: void setDefines ( std :: string defs@var89 ) ;
83: void setIncludePaths ( const std :: string & basepath@var90 , const std :: list < std :: string > & in@var91 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var92 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var93 ;
86: Type projectType@var94 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var95 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous0 {
96: std :: string analyzeAllVsConfigs@var96 ;
97: std :: vector < std :: string > pathNames@var97 ;
98: std :: list < std :: string > libraries@var98 ;
99: std :: list < std :: string > excludedPaths@var99 ;
100: std :: list < std :: string > checkVsConfigs@var100 ;
101: std :: string projectFile@var101 ;
102: std :: string platform@var102 ;
103: } ; struct Anonymous0 guiProject@var103 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var104 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var105 ) ;
107:
108: Type import ( const std :: string & filename@var106 , Settings * settings@var107 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var108 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var109 , Settings * settings@var110 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var111 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var112 , const std :: string & path@var113 , const std :: vector < std :: string > & fileFilters@var114 ) ;
115: bool importVcxproj ( const std :: string & filename@var115 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var116 , const std :: string & additionalIncludeDirectories@var117 , const std :: vector < std :: string > & fileFilters@var118 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var119 ) ;
117:
118: static void printError ( const std :: string & message@var120 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var121 ) ;
121:
122: std :: string mPath@var122 ;
123: std :: set < std :: string > mAllVSConfigs@var123 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var124 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var125 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var126 [ 2 ] = "1" ;
131: const char BuildDirElementName@var127 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var128 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var129 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var130 [ 7 ] = "parser" ;
135: const char BugHunting@var131 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var132 [ 11 ] = "includedir" ;
137: const char DirElementName@var133 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var134 [ 5 ] = "name" ;
139: const char DefinesElementName@var135 [ 8 ] = "defines" ;
140: const char DefineName@var136 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var137 [ 5 ] = "name" ;
142: const char UndefinesElementName@var138 [ 10 ] = "undefines" ;
143: const char UndefineName@var139 [ 9 ] = "undefine" ;
144: const char PathsElementName@var140 [ 6 ] = "paths" ;
145: const char PathName@var141 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var142 [ 5 ] = "name" ;
147: const char RootPathName@var143 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var144 [ 5 ] = "name" ;
149: const char IgnoreElementName@var145 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var146 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var147 [ 5 ] = "name" ;
152: const char ExcludeElementName@var148 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var149 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var150 [ 5 ] = "name" ;
155: const char FunctionContracts@var151 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var152 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var153 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var154 [ 8 ] = "library" ;
159: const char PlatformElementName@var155 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var156 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var157 [ 12 ] = "suppression" ;
162: const char AddonElementName@var158 [ 6 ] = "addon" ;
163: const char AddonsElementName@var159 [ 7 ] = "addons" ;
164: const char ToolElementName@var160 [ 5 ] = "tool" ;
165: const char ToolsElementName@var161 [ 6 ] = "tools" ;
166: const char TagsElementName@var162 [ 5 ] = "tags" ;
167: const char TagElementName@var163 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var164 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var165 [ 4 ] = "tag" ;
170: const char WarningElementName@var166 [ 8 ] = "warning" ;
171: const char HashAttributeName@var167 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var168 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var169 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var170 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var171 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var172 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var173 [ 11 ] = "clang-tidy" ;
178: const char Name@var174 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var175 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var176 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/analyzerinfo.h

1:
|
30:
31: class ErrorMessage ;
32:
|
48:
49: class AnalyzerInformation {
50: public:
51: ~ AnalyzerInformation ( ) ;
52:
53: static void writeFilesTxt ( const std :: string & buildDir@var177 , const std :: list < std :: string > & sourcefiles@var178 , const std :: string & userDefines@var179 , const std :: list < ImportProject :: FileSettings > & fileSettings@var180 ) ;
54:
55:
56: void close ( ) ;
57: bool analyzeFile ( const std :: string & buildDir@var181 , const std :: string & sourcefile@var182 , const std :: string & cfg@var183 , unsigned long long checksum@var184 , std :: list < ErrorMessage > * errors@var185 ) ;
58: void reportErr ( const ErrorMessage & msg@var186 , bool verbose@var187 ) ;
59: void setFileInfo ( const std :: string & check@var188 , const std :: string & fileInfo@var189 ) ;
60: static std :: string getAnalyzerInfoFile ( const std :: string & buildDir@var190 , const std :: string & sourcefile@var191 , const std :: string & cfg@var192 ) ;
61: private:
62: std :: ofstream mOutputStream@var193 ;
63: std :: string mAnalyzerInfoFile@var194 ;
64: } ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var195 , const std :: string & errorMsg@var196 , Type type@var197 = INTERNAL ) ;
38: const Token * token@var198 ;
39: std :: string errorMessage@var199 ;
40: Type type@var200 ;
41: std :: string id@var201 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var202 ) ;
117: static SeverityType fromString ( const std :: string & severity@var203 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var204 ) : id@var205 ( cweId@var204 ) { }
122: unsigned short id@var205 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var206 ) ;
62:
63:
64: Check ( const std :: string & aname@var207 , const Tokenizer * tokenizer@var208 , const Settings * settings@var209 , ErrorLogger * errorLogger@var210 )
65: : mTokenizer@var221 ( tokenizer@var208 ) , mSettings@var222 ( settings@var209 ) , mErrorLogger@var223 ( errorLogger@var210 ) , mName@var256 ( aname@var207 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744339 !@expr1073744340 mTokenizer@var221 ) {
69: instances (@expr1073744341 ) .@expr1073744342 remove (@expr1073744343 this@expr1073744344 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var211 , const Settings * settings@var212 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var256 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var213 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744345 string (@expr1073744346 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var214 , const Settings * settings@var215 ) const {
107: (@expr1073744347 void ) tokenizer@var214 ;
108: (@expr1073744348 void ) settings@var215 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var216 ) const {
113: (@expr1073744349 void ) xmlElement@var216 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var217 , const std :: list < FileInfo * > & fileInfo@var218 , const Settings & , ErrorLogger & ) {
119: (@expr1073744350 void ) ctu@var217 ;
120: (@expr1073744351 void ) fileInfo@var218 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var219 , const char id@var220 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var221 ;
130: const Settings * const mSettings@var222 ;
131: ErrorLogger * const mErrorLogger@var223 ;
132:
133:
134: void reportError ( const Token * tok@var224 , const Severity :: SeverityType severity@var225 , const std :: string & id@var226 , const std :: string & msg@var227 ) {
135: reportError (@expr1073744352 tok@var224 , severity@var225 , id@var226 , msg@var227 , CWE (@expr1073744353 0U ) , Certainty ::@expr1073744354 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var228 , const Severity :: SeverityType severity@var229 , const std :: string & id@var230 , const std :: string & msg@var231 , const CWE & cwe@var232 , Certainty :: CertaintyLevel certainty@var233 ) {
140: const std ::@expr1073744355 list < const Token *@expr1073744356 > callstack@var234 (@expr1073744357 1 , tok@var228 ) ;
141: reportError (@expr1073744358 callstack@var234 , severity@var229 , id@var230 , msg@var231 , cwe@var232 , certainty@var233 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var235 , Severity :: SeverityType severity@var236 , const std :: string & id@var237 , const std :: string & msg@var238 ) {
146: reportError (@expr1073744359 callstack@var235 , severity@var236 , id@var237 , msg@var238 , CWE (@expr1073744360 0U ) , Certainty ::@expr1073744361 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var239 , Severity :: SeverityType severity@var240 , const std :: string & id@var241 , const std :: string & msg@var242 , const CWE & cwe@var243 , Certainty :: CertaintyLevel certainty@var244 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var245 , Severity :: SeverityType severity@var246 , const char id@var247 [ ] , const std :: string & msg@var248 , const CWE & cwe@var249 , Certainty :: CertaintyLevel certainty@var250 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var251 , const ValueFlow :: Value * value@var252 , const std :: string & bug@var253 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var254 , const char * str@var255 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var256 ;
167: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var257 , const Color & c@var258 ) ;
42:
43: std :: string toString ( const Color & c@var259 ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var260 ;
43: std :: string errorId@var261 ;
44: void setFileName ( const std :: string & s@var262 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var266 ;
47: }
48: int lineNumber@var263 ;
49: Certainty :: CertaintyLevel certainty@var264 ;
50: std :: string symbolNames@var265 ;
51: private:
52: std :: string mFileName@var266 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var300 ( NO_LINE ) , hash@var302 ( 0 ) , thisAndNextLine@var303 ( false ) , matched@var304 ( false ) , checked@var305 ( false ) { }
57: Suppression ( const Suppression & other@var267 ) {
58: *@expr1073744362 this@expr1073744363 =@expr1073744364 other@var267 ;
59: }
60: Suppression ( const std :: string & id@var268 , const std :: string & file@var269 , int line@var270 = NO_LINE ) : errorId@var298 ( id@var268 ) , fileName@var299 ( file@var269 ) , lineNumber@var300 ( line@var270 ) , hash@var302 ( 0 ) , thisAndNextLine@var303 ( false ) , matched@var304 ( false ) , checked@var305 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var271 ) {
63: errorId@var298 =@expr1073744365 other@var271 .@expr1073744366 errorId@var272 ;
64: fileName@var299 =@expr1073744367 other@var271 .@expr1073744368 fileName@var273 ;
65: lineNumber@var300 =@expr1073744369 other@var271 .@expr1073744370 lineNumber@var274 ;
66: symbolName@var301 =@expr1073744371 other@var271 .@expr1073744372 symbolName@var275 ;
67: hash@var302 =@expr1073744373 other@var271 .@expr1073744374 hash@var276 ;
68: thisAndNextLine@var303 =@expr1073744375 other@var271 .@expr1073744376 thisAndNextLine@var277 ;
69: matched@var304 =@expr1073744377 other@var271 .@expr1073744378 matched@var278 ;
70: checked@var305 =@expr1073744379 other@var271 .@expr1073744380 checked@var279 ;
71: return *@expr1073744381 this@expr1073744382 ;
72: }
73:
74: bool operator< ( const Suppression & other@var280 ) const {
75: if (@expr1073744383 errorId@var298 !=@expr1073744384 other@var280 .@expr2561 errorId@var281 ) {
76: return errorId@var298 <@expr1073744386 other@var280 .@expr2561 errorId@var281 ; }
77: if (@expr1073744388 lineNumber@var300 <@expr1073744389 other@var280 .@expr1073744390 lineNumber@var282 ) {
78: return true ; }
79: if (@expr1073744391 fileName@var299 !=@expr1073744392 other@var280 .@expr2569 fileName@var283 ) {
80: return fileName@var299 <@expr1073744394 other@var280 .@expr2569 fileName@var283 ; }
81: if (@expr1073744396 symbolName@var301 !=@expr1073744397 other@var280 .@expr2574 symbolName@var284 ) {
82: return symbolName@var301 <@expr1073744399 other@var280 .@expr2574 symbolName@var284 ; }
83: if (@expr1073744401 hash@var302 !=@expr1073744402 other@var280 .@expr2579 hash@var285 ) {
84: return hash@var302 <@expr1073744404 other@var280 .@expr2579 hash@var285 ; }
85: if (@expr1073744406 thisAndNextLine@var303 !=@expr1073744407 other@var280 .@expr1073744408 thisAndNextLine@var286 ) {
86: return thisAndNextLine@var303 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var287 , std :: string * errorMessage@var288 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var289 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var290 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744410 fileName@var299 .@expr1073744411 empty (@expr1073744412 ) &&@expr1073744413 fileName@var299 .@expr1073744414 find_first_of (@expr1073744415 "?*" ) ==@expr1073744416 std ::@expr1073744417 string ::@expr1073744418 npos@expr1073744409 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var291 ) const {
109: return errorId@var298 ==@expr1073744419 other@var291 .@expr1073744420 errorId@var292 &&@expr1073744421
110: fileName@var299 ==@expr1073744422 other@var291 .@expr1073744423 fileName@var293 &&@expr1073744424
111: lineNumber@var300 ==@expr1073744425 other@var291 .@expr1073744426 lineNumber@var294 &&@expr1073744427
112: symbolName@var301 ==@expr1073744428 other@var291 .@expr1073744429 symbolName@var295 &&@expr1073744430
113: hash@var302 ==@expr1073744431 other@var291 .@expr1073744432 hash@var296 &&@expr1073744433
114: thisAndNextLine@var303 ==@expr1073744434 other@var291 .@expr1073744435 thisAndNextLine@var297 ;
115: }
116:
117: std :: string errorId@var298 ;
118: std :: string fileName@var299 ;
119: int lineNumber@var300 ;
120: std :: string symbolName@var301 ;
121: unsigned long hash@var302 ;
122: bool thisAndNextLine@var303 ;
123: bool matched@var304 ;
124: bool checked@var305 ;
125:
126: enum Anonymous1 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var306 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var307 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var308 , std :: string * errorMessage@var309 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var310 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var311 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var312 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var313 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var314 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var315 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var316 , const bool unusedFunctionChecking@var317 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var318 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var319 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var320 ;
219: } ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var321 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var322 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var323 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var324 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var325 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var341 ( 0 ) , line@var342 ( 0 ) , column@var343 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var326 , int line@var327 , unsigned int column@var328 )
73: : fileIndex@var341 ( 0 ) , line@var342 ( line@var327 ) , column@var343 ( column@var328 ) , mOrigFileName@var345 ( file@var326 ) , mFileName@var346 ( file@var326 ) { }
74:
75: FileLocation ( const std :: string & file@var329 , const std :: string & info@var330 , int line@var331 , unsigned int column@var332 )
76: : fileIndex@var341 ( 0 ) , line@var342 ( line@var331 ) , column@var343 ( column@var332 ) , mOrigFileName@var345 ( file@var329 ) , mFileName@var346 ( file@var329 ) , mInfo@var347 ( info@var330 ) { }
77:
78: FileLocation ( const Token * tok@var333 , const TokenList * tokenList@var334 ) ;
79: FileLocation ( const Token * tok@var335 , const std :: string & info@var336 , const TokenList * tokenList@var337 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var338 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var339 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var340 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var341 ;
107: int line@var342 ;
108: unsigned int column@var343 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var347 ;
112: }
113: void setinfo ( const std :: string & i@var344 ) {
114: mInfo@var347 =@expr1073744436 i@var344 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var345 ;
119: std :: string mFileName@var346 ;
120: std :: string mInfo@var347 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var348 ,
124: const std :: string & file1@var349 ,
125: Severity :: SeverityType severity@var350 ,
126: const std :: string & msg@var351 ,
127: const std :: string & id@var352 , Certainty :: CertaintyLevel certainty@var353 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var354 ,
129: const std :: string & file1@var355 ,
130: Severity :: SeverityType severity@var356 ,
131: const std :: string & msg@var357 ,
132: const std :: string & id@var358 ,
133: const CWE & cwe@var359 ,
134: Certainty :: CertaintyLevel certainty@var360 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var361 ,
136: const TokenList * list@var362 ,
137: Severity :: SeverityType severity@var363 ,
138: const std :: string & id@var364 ,
139: const std :: string & msg@var365 ,
140: Certainty :: CertaintyLevel certainty@var366 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var367 ,
142: const TokenList * list@var368 ,
143: Severity :: SeverityType severity@var369 ,
144: const std :: string & id@var370 ,
145: const std :: string & msg@var371 ,
146: const CWE & cwe@var372 ,
147: Certainty :: CertaintyLevel certainty@var373 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var374 ,
149: const TokenList * tokenList@var375 ,
150: Severity :: SeverityType severity@var376 ,
151: const char id@var377 [ ] ,
152: const std :: string & msg@var378 ,
153: const CWE & cwe@var379 ,
154: Certainty :: CertaintyLevel certainty@var380 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var381 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var382 ,
176: const std :: string & templateFormat@var383 = emptyString@var1 ,
177: const std :: string & templateLocation@var384 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var385 ) ;
181:
182: std :: list < FileLocation > callStack@var386 ;
183: std :: string id@var387 ;
184:
185:
186: std :: string file0@var388 ;
187:
188: std :: string function@var389 ;
189:
190: bool incomplete@var390 ;
191:
192: Severity :: SeverityType severity@var391 ;
193: CWE cwe@var392 ;
194: Certainty :: CertaintyLevel certainty@var393 ;
195:
196:
197: unsigned long hash@var394 ;
198:
199:
200: void setmsg ( const std :: string & msg@var395 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var397 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var398 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var399 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var396 ) ;
221:
222:
223: std :: string mShortMessage@var397 ;
224:
225:
226: std :: string mVerboseMessage@var398 ;
227:
228:
229: std :: string mSymbolNames@var399 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var400 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073744437 plistFile@var400 .@expr1073744438 is_open (@expr1073744439 ) ) {
243: plistFile@var400 <<@expr1073744440 ErrorLogger ::@expr1073744441 plistFooter (@expr1073744442 ) ;
244: plistFile@var400 .@expr1073744443 close (@expr1073744444 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var401 , Color c@var402 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var403 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var404 , const char stage@var405 [ ] , const unsigned long value@var406 ) {
271: (@expr1073744445 void ) filename@var404 ;
272: (@expr1073744446 void ) stage@var405 ;
273: (@expr1073744447 void ) value@var406 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var407 ) {
281: reportErr (@expr1073744448 msg@var407 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var408 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var409 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var410 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var411 , const std :: vector < std :: string > & files@var412 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var413 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var414 , const std :: string & from@var415 , const std :: string & to@var416 ) ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var417 ;
42: double mDoubleValue@var418 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var419 ;
44: bool mIsUnsigned@var420 ;
45:
46: void promote ( const value & v@var421 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var422 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var419 !=@expr1073744449 Type ::@expr1073744450 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var419 ==@expr1073744451 Type ::@expr1073744452 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744453 ) ?@expr1073744454 mDoubleValue@var418 :@expr1073744455 (@expr1073744456 double ) mIntValue@var417 ;
60: }
61:
62: static value calc ( char op@var423 , const value & v1@var424 , const value & v2@var425 ) ;
63: int compare ( const value & v@var426 ) const ;
64: value add ( int v@var427 ) const ;
65: value shiftLeft ( const value & v@var428 ) const ;
66: value shiftRight ( const value & v@var429 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var430 ;
72:
73: static long long toLongNumber ( const std :: string & str@var431 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var432 ) ;
75:
76: template < class T > static std :: string toString ( T value@var433 ) {
77: std ::@expr1073744457 ostringstream result@var434 ;
78: result@var434 <<@expr1073744458 value@var433 ;
79: return result@var434 .@expr1073744459 str (@expr1073744460 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var435 ) ;
82:
83: static bool isInt ( const std :: string & str@var436 ) ;
84: static bool isFloat ( const std :: string & str@var437 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var438 ) ;
86: static bool isNegative ( const std :: string & str@var439 ) ;
87: static bool isPositive ( const std :: string & str@var440 ) ;
88: static bool isDec ( const std :: string & str@var441 ) ;
89: static bool isFloatHex ( const std :: string & str@var442 ) ;
90: static bool isIntHex ( const std :: string & str@var443 ) ;
91: static bool isOct ( const std :: string & str@var444 ) ;
92: static bool isBin ( const std :: string & str@var445 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var446 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var447 , bool supportMicrosoftExtensions@var448 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var449 , const std :: string & second@var450 ) ;
105: static std :: string subtract ( const std :: string & first@var451 , const std :: string & second@var452 ) ;
106: static std :: string multiply ( const std :: string & first@var453 , const std :: string & second@var454 ) ;
107: static std :: string divide ( const std :: string & first@var455 , const std :: string & second@var456 ) ;
108: static std :: string mod ( const std :: string & first@var457 , const std :: string & second@var458 ) ;
109: static std :: string incdec ( const std :: string & var@var459 , const std :: string & op@var460 ) ;
110: static std :: string calculate ( const std :: string & first@var461 , const std :: string & second@var462 , char action@var463 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var464 ) ;
113: static std :: string cos ( const std :: string & tok@var465 ) ;
114: static std :: string tan ( const std :: string & tok@var466 ) ;
115: static std :: string abs ( const std :: string & tok@var467 ) ;
116: static bool isEqual ( const std :: string & first@var468 , const std :: string & second@var469 ) ;
117: static bool isNotEqual ( const std :: string & first@var470 , const std :: string & second@var471 ) ;
118: static bool isGreater ( const std :: string & first@var472 , const std :: string & second@var473 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var474 , const std :: string & second@var475 ) ;
120: static bool isLess ( const std :: string & first@var476 , const std :: string & second@var477 ) ;
121: static bool isLessEqual ( const std :: string & first@var478 , const std :: string & second@var479 ) ;
122: static bool isNullValue ( const std :: string & str@var480 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var481 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var482 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var483 , std :: string :: size_type iPos@var484 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var485 , const MathLib :: value & v2@var486 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var487 , const MathLib :: value & v2@var488 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var489 , const MathLib :: value & v2@var490 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var491 , const MathLib :: value & v2@var492 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var493 , const MathLib :: value & v2@var494 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var495 , const MathLib :: value & v2@var496 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var497 , const MathLib :: value & v2@var498 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var499 , const MathLib :: value & v2@var500 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var501 , const MathLib :: value & v2@var502 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var503 , const MathLib :: value & v2@var504 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var505 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var506 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var507 ;
42:
43:
44: std :: string stdValue@var508 ;
45:
46:
47: Standards ( ) : c@var506 ( CLatest ) , cpp@var507 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var509 ) {
50: stdValue@var508 =@expr1073744461 str@var509 ;
51: if (@expr1073744462 str@var509 ==@expr1073744463 "c89" ||@expr1073744464 str@var509 ==@expr1073744465 "C89" ) {
52: c@var506 =@expr1073744466 C89 ;
53: return true ;
54: }
55: if (@expr1073744467 str@var509 ==@expr1073744468 "c99" ||@expr1073744469 str@var509 ==@expr1073744470 "C99" ) {
56: c@var506 =@expr1073744471 C99 ;
57: return true ;
58: }
59: if (@expr1073744472 str@var509 ==@expr1073744473 "c11" ||@expr1073744474 str@var509 ==@expr1073744475 "C11" ) {
60: c@var506 =@expr1073744476 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744477 c@var506 ) {
67: case C89 :@expr2654 ;
68: return "c89" ;
69: case C99 :@expr2654 ;
70: return "c99" ;
71: case C11 :@expr2654 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var510 ) {
77: if (@expr1073744481 std@var510 ==@expr1073744482 "c89" ) {
78: return Standards ::@expr1073744483 C89 ;
79: }
80: if (@expr1073744484 std@var510 ==@expr1073744485 "c99" ) {
81: return Standards ::@expr1073744486 C99 ;
82: }
83: if (@expr1073744487 std@var510 ==@expr1073744488 "c11" ) {
84: return Standards ::@expr1073744489 C11 ;
85: }
86: return Standards ::@expr1073744490 CLatest ;
87: }
88: bool setCPP ( std :: string str@var511 ) {
89: stdValue@var508 =@expr1073744491 str@var511 ;
90: strTolower (@expr1073744492 str@var511 ) ;
91: cpp@var507 =@expr1073744493 getCPP (@expr1073744494 str@var511 ) ;
92: return !@expr1073744495 stdValue@var508 .@expr1073744496 empty (@expr1073744497 ) &&@expr1073744498 str@var511 ==@expr1073744499 getCPP (@expr1073744500 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744501 cpp@var507 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var512 ) {
98: switch (@expr1073744502 std@var512 ) {
99: case CPP03 :@expr2679 ;
100: return "c++03" ;
101: case CPP11 :@expr2679 ;
102: return "c++11" ;
103: case CPP14 :@expr2679 ;
104: return "c++14" ;
105: case CPP17 :@expr2679 ;
106: return "c++17" ;
107: case CPP20 :@expr2679 ;
108: return "c++20" ;
109: case CPP23 :@expr2679 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var513 ) {
115: if (@expr1073744509 std@var513 ==@expr1073744510 "c++03" ) {
116: return Standards ::@expr1073744511 CPP03 ;
117: }
118: if (@expr1073744512 std@var513 ==@expr1073744513 "c++11" ) {
119: return Standards ::@expr1073744514 CPP11 ;
120: }
121: if (@expr1073744515 std@var513 ==@expr1073744516 "c++14" ) {
122: return Standards ::@expr1073744517 CPP14 ;
123: }
124: if (@expr1073744518 std@var513 ==@expr1073744519 "c++17" ) {
125: return Standards ::@expr1073744520 CPP17 ;
126: }
127: if (@expr1073744521 std@var513 ==@expr1073744522 "c++20" ) {
128: return Standards ::@expr1073744523 CPP20 ;
129: }
130: if (@expr1073744524 std@var513 ==@expr1073744525 "c++23" ) {
131: return Standards ::@expr1073744526 CPP23 ;
132: }
133: return Standards ::@expr1073744527 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var517 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var514 ) : errorcode@var517 ( e@var514 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var515 , T && r@var516 ) : errorcode@var517 ( e@var515 ) , reason@var518 ( r@var516 ) { }
66: ErrorCode errorcode@var517 ;
67: std :: string reason@var518 ;
68: } ;
69:
70: Error load ( const char exename@var519 [ ] , const char path@var520 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var521 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var522 [ ] , unsigned long len@var523 ) ;
75:
76: struct AllocFunc {
77: int groupId@var524 ;
78: int arg@var525 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var526 ;
81: int bufferSizeArg1@var527 ;
82: int bufferSizeArg2@var528 ;
83: int reallocArg@var529 ;
84: bool initData@var530 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var531 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var532 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var533 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var534 , int arg@var535 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var536 , int arg@var537 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var538 , int arg@var539 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var540 [ ] ) const {
107: return getAllocDealloc (@expr1073744528 mAlloc@var806 , name@var540 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var541 [ ] ) const {
112: return getAllocDealloc (@expr1073744529 mDealloc@var807 , name@var541 ) ;
113: }
114:
115:
116: int allocId ( const char name@var542 [ ] ) const {
117: const AllocFunc * af@var543 ; af@var543 =@expr1073744530 getAllocDealloc (@expr1073744531 mAlloc@var806 , name@var542 ) ;
118: return af@var543 ?@expr1073744532 af@var543 .@expr1073744533 groupId@var544 :@expr1073744534 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var545 [ ] ) const {
123: const AllocFunc * af@var546 ; af@var546 =@expr1073744535 getAllocDealloc (@expr1073744536 mDealloc@var807 , name@var545 ) ;
124: return af@var546 ?@expr1073744537 af@var546 .@expr1073744538 groupId@var547 :@expr1073744539 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var548 , int id@var549 , int arg@var550 ) {
129: mAlloc@var806 [@expr2716 functionname@var548 ] .@expr1073744541 groupId@var2379 =@expr1073744542 id@var549 ;
130: mAlloc@var806 [@expr2716 functionname@var548 ] .@expr1073744544 arg@var2380 =@expr1073744545 arg@var550 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var551 , int id@var552 , int arg@var553 ) {
134: mDealloc@var807 [@expr2722 functionname@var551 ] .@expr1073744547 groupId@var2381 =@expr1073744548 id@var552 ;
135: mDealloc@var807 [@expr2722 functionname@var551 ] .@expr1073744550 arg@var2382 =@expr1073744551 arg@var553 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var554 , int id@var555 , int arg@var556 , int reallocArg@var557 = 1 ) {
139: mRealloc@var808 [@expr2728 functionname@var554 ] .@expr1073744553 groupId@var2383 =@expr1073744554 id@var555 ;
140: mRealloc@var808 [@expr2728 functionname@var554 ] .@expr1073744556 arg@var2384 =@expr1073744557 arg@var556 ;
141: mRealloc@var808 [@expr2728 functionname@var554 ] .@expr1073744559 reallocArg@var2385 =@expr1073744560 reallocArg@var557 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var558 , bool noreturn@var559 ) {
146: mNoReturn@var809 [@expr1073744561 funcname@var558 ] =@expr1073744562 noreturn@var559 ?@expr1073744563 FalseTrueMaybe ::@expr1073744564 True :@expr1073744565 FalseTrueMaybe ::@expr1073744566 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var560 ) ;
150:
151:
152: static bool ismemory ( const int id@var561 ) {
153: return (@expr2743 (@expr2743 id@var561 >@expr1073744569 0 ) &&@expr1073744570 (@expr2743 (@expr2743 id@var561 &@expr1073744573 1 ) ==@expr1073744574 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var562 ) {
156: return (@expr2751 (@expr2751 func@var562 .@expr2753 groupId@var563 >@expr1073744578 0 ) &&@expr1073744579 (@expr2751 (@expr2751 func@var562 .@expr2753 groupId@var563 &@expr1073744583 1 ) ==@expr1073744584 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var564 ) {
161: return (@expr2761 (@expr2761 id@var564 >@expr1073744587 0 ) &&@expr1073744588 (@expr2761 (@expr2761 id@var564 &@expr1073744591 1 ) ==@expr1073744592 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var565 ) {
164: return (@expr2769 (@expr2769 func@var565 .@expr2771 groupId@var566 >@expr1073744596 0 ) &&@expr1073744597 (@expr2769 (@expr2769 func@var565 .@expr2771 groupId@var566 &@expr1073744601 1 ) ==@expr1073744602 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var567 ) const ;
168: int formatstr_argno ( const Token * ftok@var568 ) const ;
169: bool formatstr_scan ( const Token * ftok@var569 ) const ;
170: bool formatstr_secure ( const Token * ftok@var570 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var571 ;
174: int ptr2Arg@var572 ;
175: int sizeArg@var573 ;
176: int strlenArg@var574 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var575 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var576 ;
182: Standards standards@var577 ;
183: Severity :: SeverityType severity@var578 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var579 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var580 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var581 ) const ;
191: bool matchArguments ( const Token * ftok@var582 , const std :: string & functionName@var583 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var584 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var585 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var586 ) const ;
198: int returnValueContainer ( const Token * ftok@var587 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var588 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var589 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var590 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var591 , std :: string * unknownFunc@var592 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var602 ( -1 ) ,
210: size_templateArgNo@var604 ( -1 ) ,
211: arrayLike_indexOp@var605 ( false ) ,
212: stdStringLike@var606 ( false ) ,
213: stdAssociativeLike@var607 ( false ) ,
214: opLessAllowed@var608 ( true ) ,
215: hasInitializerListConstructor@var609 ( false ) ,
216: unstableErase@var610 ( false ) ,
217: unstableInsert@var611 ( false ) ,
218: view@var612 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var593 ;
248: Yield yield@var594 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var595 ;
252: int templateParameter@var596 ;
253: } ;
254: std :: string startPattern@var597 ; std :: string startPattern2@var598 ; std :: string endPattern@var599 ; std :: string itEndPattern@var600 ;
255: std :: map < std :: string , Function > functions@var601 ;
256: int type_templateArgNo@var602 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var603 ;
258: int size_templateArgNo@var604 ;
259: bool arrayLike_indexOp@var605 ;
260: bool stdStringLike@var606 ;
261: bool stdAssociativeLike@var607 ;
262: bool opLessAllowed@var608 ;
263: bool hasInitializerListConstructor@var609 ;
264: bool unstableErase@var610 ;
265: bool unstableInsert@var611 ;
266: bool view@var612 ;
267:
268: Action getAction ( const std :: string & function@var613 ) const {
269: const std ::@expr1073744603 map < std ::@expr1073744604 string , Function > ::@expr1073744605 const_iterator i@var614 =@expr1073744606 functions@var601 .@expr1073744607 find (@expr1073744608 function@var613 ) ;
270: if (@expr1073744609 i@var614 !=@expr1073744610 functions@var601 .@expr1073744611 end (@expr1073744612 ) ) {
271: return i@var614 .@expr1073744613 second@var615 .@expr1073744614 action@var616 ; }
272: return Action ::@expr1073744615 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var617 ) const {
276: const std ::@expr1073744616 map < std ::@expr1073744617 string , Function > ::@expr1073744618 const_iterator i@var618 =@expr1073744619 functions@var601 .@expr1073744620 find (@expr1073744621 function@var617 ) ;
277: if (@expr1073744622 i@var618 !=@expr1073744623 functions@var601 .@expr1073744624 end (@expr1073744625 ) ) {
278: return i@var618 .@expr1073744626 second@var619 .@expr1073744627 yield@var620 ; }
279: return Yield ::@expr1073744628 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var621 ) ;
283: static Action actionFrom ( const std :: string & actionName@var622 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var623 ;
286: const Container * detectContainer ( const Token * typeStart@var624 , bool iterator@var625 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var626 , bool * isIterator@var627 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var628 ( false ) ,
293: notnull@var629 ( false ) ,
294: notuninit@var630 ( -1 ) ,
295: formatstr@var631 ( false ) ,
296: strz@var632 ( false ) ,
297: optional@var633 ( false ) ,
298: variadic@var634 ( false ) ,
299: iteratorInfo@var640 ( ) ,
300: direction@var648 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var628 ;
303: bool notnull@var629 ;
304: int notuninit@var630 ;
305: bool formatstr@var631 ;
306: bool strz@var632 ;
307: bool optional@var633 ;
308: bool variadic@var634 ;
309: std :: string valid@var635 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var636 ( 0 ) , it@var637 ( false ) , first@var638 ( false ) , last@var639 ( false ) { }
314:
315: int container@var636 ;
316: bool it@var637 ;
317: bool first@var638 ;
318: bool last@var639 ;
319: } ;
320: IteratorInfo iteratorInfo@var640 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var641 , int a@var642 ) : type@var643 ( t@var641 ) , arg@var644 ( a@var642 ) , arg2@var645 ( 0 ) , value@var646 ( 0 ) { }
326: Type type@var643 ;
327: int arg@var644 ;
328: int arg2@var645 ;
329: long long value@var646 ;
330: } ;
331: std :: vector < MinSize > minsizes@var647 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var648 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var649 ;
344: bool use@var650 ;
345: bool leakignore@var651 ;
346: bool isconst@var652 ;
347: bool ispure@var653 ;
348: UseRetValType useretval@var654 ;
349: bool ignore@var655 ;
350: bool formatstr@var656 ;
351: bool formatstr_scan@var657 ;
352: bool formatstr_secure@var658 ;
353: Container :: Action containerAction@var659 ;
354: Container :: Yield containerYield@var660 ;
355: Function ( )
356: : use@var650 ( false ) ,
357: leakignore@var651 ( false ) ,
358: isconst@var652 ( false ) ,
359: ispure@var653 ( false ) ,
360: useretval@var654 ( UseRetValType :: NONE ) ,
361: ignore@var655 ( false ) ,
362: formatstr@var656 ( false ) ,
363: formatstr_scan@var657 ( false ) ,
364: formatstr_secure@var658 ( false ) ,
365: containerAction@var659 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var660 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var661 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var662 ;
372: bool isUse ( const std :: string & functionName@var663 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var664 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var665 , bool pure@var666 ) const ;
375: bool isFunctionConst ( const Token * ftok@var667 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var668 , int argnr@var669 ) const {
378: const ArgumentChecks * arg@var670 ; arg@var670 =@expr1073744629 getarg (@expr1073744630 ftok@var668 , argnr@var669 ) ;
379: return arg@var670 &&@expr1073744631 arg@var670 .@expr1073744632 notbool@var671 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var672 , int argnr@var673 ) const ;
383: bool isuninitargbad ( const Token * ftok@var674 , int argnr@var675 , int indirect@var676 = 0 , bool * hasIndirect@var677 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var678 , int argnr@var679 ) const {
386: const ArgumentChecks * arg@var680 ; arg@var680 =@expr1073744633 getarg (@expr1073744634 ftok@var678 , argnr@var679 ) ;
387: return arg@var680 &&@expr1073744635 arg@var680 .@expr1073744636 formatstr@var681 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var682 , int argnr@var683 ) const {
391: const ArgumentChecks * arg@var684 ; arg@var684 =@expr1073744637 getarg (@expr1073744638 ftok@var682 , argnr@var683 ) ;
392: return arg@var684 &&@expr1073744639 arg@var684 .@expr1073744640 strz@var685 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var686 , int argnr@var687 , const long long argvalue@var688 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var689 , int argnr@var690 , double argvalue@var691 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var692 , int argnr@var693 ) const {
399: const ArgumentChecks * arg@var694 ; arg@var694 =@expr1073744641 getarg (@expr1073744642 ftok@var692 , argnr@var693 ) ;
400: return arg@var694 ?@expr1073744643 arg@var694 .@expr1073744644 valid@var695 :@expr1073744645 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var696 ;
405: std :: string op1@var697 ;
406: std :: string op2@var698 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744646 isInt (@expr1073744647 op1@var697 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var699 , int argnr@var700 ) const {
413: const ArgumentChecks * arg@var701 ; arg@var701 =@expr1073744648 getarg (@expr1073744649 ftok@var699 , argnr@var700 ) ;
414: return arg@var701 &&@expr1073744650 arg@var701 .@expr2827 iteratorInfo@var702 .@expr1073744652 it@var703 ?@expr1073744653 &@expr1073744654 arg@var701 .@expr2827 iteratorInfo@var702 :@expr1073744656 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var704 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var705 , int argnr@var706 ) const {
420: const ArgumentChecks * arg@var707 ; arg@var707 =@expr1073744657 getarg (@expr1073744658 ftok@var705 , argnr@var706 ) ;
421: return arg@var707 ?@expr1073744659 &@expr1073744660 arg@var707 .@expr1073744661 minsizes@var708 :@expr1073744662 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var709 , int argnr@var710 ) const ;
425:
426: bool markupFile ( const std :: string & path@var711 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var712 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var816 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var713 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var714 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var715 , const std :: string & token@var716 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var717 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var718 ) const ;
443: const std :: string & blockend ( const std :: string & file@var719 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var720 , const std :: string & keyword@var721 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var722 ) const {
448: return mExporters@var819 .@expr1073744663 find (@expr1073744664 prefix@var722 ) !=@expr1073744665 mExporters@var819 .@expr1073744666 end (@expr1073744667 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var723 , const std :: string & token@var724 ) const {
452: const std ::@expr1073744668 map < std ::@expr1073744669 string , ExportedFunctions > ::@expr1073744670 const_iterator it@var725 =@expr1073744671 mExporters@var819 .@expr1073744672 find (@expr1073744673 prefix@var723 ) ;
453: return (@expr1073744674 it@var725 !=@expr1073744675 mExporters@var819 .@expr1073744676 end (@expr1073744677 ) &&@expr1073744678 it@var725 .@expr1073744679 second@var726 .@expr1073744680 isPrefix (@expr1073744681 token@var724 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var727 , const std :: string & token@var728 ) const {
457: const std ::@expr1073744682 map < std ::@expr1073744683 string , ExportedFunctions > ::@expr1073744684 const_iterator it@var729 =@expr1073744685 mExporters@var819 .@expr1073744686 find (@expr1073744687 prefix@var727 ) ;
458: return (@expr1073744688 it@var729 !=@expr1073744689 mExporters@var819 .@expr1073744690 end (@expr1073744691 ) &&@expr1073744692 it@var729 .@expr1073744693 second@var730 .@expr1073744694 isSuffix (@expr1073744695 token@var728 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var731 , const std :: string & importer@var732 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var733 , Container :: Yield yield@var734 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var735 , Container :: Action action@var736 ) const ;
465:
466: bool isreflection ( const std :: string & token@var737 ) const {
467: return mReflection@var821 .@expr1073744696 find (@expr1073744697 token@var737 ) !=@expr1073744698 mReflection@var821 .@expr1073744699 end (@expr1073744700 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var738 ) const {
471: const std ::@expr1073744701 map < std ::@expr1073744702 string , int > ::@expr1073744703 const_iterator it@var739 =@expr1073744704 mReflection@var821 .@expr1073744705 find (@expr1073744706 token@var738 ) ;
472: if (@expr1073744707 it@var739 !=@expr1073744708 mReflection@var821 .@expr1073744709 end (@expr1073744710 ) ) {
473: return it@var739 .@expr1073744711 second@var740 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var741 ;
478:
479: struct SmartPointer {
480: std :: string name@var742 ; name@var742 = "" ;
481: bool unique@var743 ; unique@var743 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var744 ;
485: bool isSmartPointer ( const Token * tok@var745 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var746 ) const ;
487:
488: struct PodType {
489: unsigned int size@var747 ;
490: char sign@var748 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var749 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var750 ) const {
494: const std ::@expr1073744712 unordered_map < std ::@expr1073744713 string , PodType > ::@expr1073744714 const_iterator it@var751 =@expr1073744715 mPodTypes@var822 .@expr1073744716 find (@expr1073744717 name@var750 ) ;
495: return (@expr2894 it@var751 !=@expr1073744719 mPodTypes@var822 .@expr1073744720 end (@expr1073744721 ) ) ?@expr1073744722 &@expr1073744723 (@expr2894 it@var751 .@expr1073744725 second@var752 ) :@expr1073744726 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var763 ( false )
501: , mUnsigned@var764 ( false )
502: , mLong@var765 ( false )
503: , mPointer@var766 ( false )
504: , mPtrPtr@var767 ( false )
505: , mConstPtr@var768 ( false ) { }
506: bool operator== ( const PlatformType & type@var753 ) const {
507: return (@expr1073744727 mSigned@var763 ==@expr1073744728 type@var753 .@expr1073744729 mSigned@var754 &&@expr1073744730
508: mUnsigned@var764 ==@expr1073744731 type@var753 .@expr1073744732 mUnsigned@var755 &&@expr1073744733
509: mLong@var765 ==@expr1073744734 type@var753 .@expr1073744735 mLong@var756 &&@expr1073744736
510: mPointer@var766 ==@expr1073744737 type@var753 .@expr1073744738 mPointer@var757 &&@expr1073744739
511: mPtrPtr@var767 ==@expr1073744740 type@var753 .@expr1073744741 mPtrPtr@var758 &&@expr1073744742
512: mConstPtr@var768 ==@expr1073744743 type@var753 .@expr1073744744 mConstPtr@var759 &&@expr1073744745
513: mType@var762 ==@expr1073744746 type@var753 .@expr1073744747 mType@var760 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var761 ) const {
516: return !@expr1073744748 (@expr1073744749 *@expr1073744750 this@expr1073744751 ==@expr1073744752 type@var761 ) ;
517: }
518: std :: string mType@var762 ;
519: bool mSigned@var763 ;
520: bool mUnsigned@var764 ;
521: bool mLong@var765 ;
522: bool mPointer@var766 ;
523: bool mPtrPtr@var767 ;
524: bool mConstPtr@var768 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var769 ) const {
529: const std ::@expr1073744753 map < std ::@expr1073744754 string , PlatformType > ::@expr1073744755 const_iterator it@var770 =@expr1073744756 mPlatformTypes@var772 .@expr1073744757 find (@expr1073744758 name@var769 ) ;
530: return (@expr2935 it@var770 !=@expr1073744760 mPlatformTypes@var772 .@expr1073744761 end (@expr1073744762 ) ) ?@expr1073744763 &@expr1073744764 (@expr2935 it@var770 .@expr1073744766 second@var771 ) :@expr1073744767 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var772 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var773 , const std :: string & platform@var774 ) const {
536: const std ::@expr1073744768 map < std ::@expr2945 string , Platform > ::@expr1073744770 const_iterator it@var775 =@expr1073744771 mPlatforms@var824 .@expr1073744772 find (@expr1073744773 platform@var774 ) ;
537: if (@expr1073744774 it@var775 !=@expr1073744775 mPlatforms@var824 .@expr1073744776 end (@expr1073744777 ) ) {
538: const PlatformType * const type@var776 ; type@var776 =@expr1073744778 it@var775 .@expr1073744779 second@var777 .@expr1073744780 platform_type (@expr1073744781 name@var773 ) ;
539: if (@expr1073744782 type@var776 ) {
540: return type@var776 ; }
541: }
542:
543: const std ::@expr1073744783 map < std ::@expr2945 string , PlatformType > ::@expr1073744785 const_iterator it2@var778 =@expr1073744786 mPlatformTypes@var823 .@expr1073744787 find (@expr1073744788 name@var773 ) ;
544: return (@expr2965 it2@var778 !=@expr1073744790 mPlatformTypes@var823 .@expr1073744791 end (@expr1073744792 ) ) ?@expr1073744793 &@expr1073744794 (@expr2965 it2@var778 .@expr1073744796 second@var779 ) :@expr1073744797 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var780 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var781 , Library :: Container :: Yield y@var782 , const std :: string & fallback@var783 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var784 , const std :: string & typeName@var785 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var786 , const std :: string & name@var787 , std :: set < std :: string > & unknown_elements@var788 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var789 ) {
565: mPrefixes@var793 .@expr1073744798 insert (@expr1073744799 prefix@var789 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var790 ) {
568: mSuffixes@var794 .@expr1073744800 insert (@expr1073744801 suffix@var790 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var791 ) const {
571: return (@expr1073744802 mPrefixes@var793 .@expr1073744803 find (@expr1073744804 prefix@var791 ) !=@expr1073744805 mPrefixes@var793 .@expr1073744806 end (@expr1073744807 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var792 ) const {
574: return (@expr1073744808 mSuffixes@var794 .@expr1073744809 find (@expr1073744810 suffix@var792 ) !=@expr1073744811 mSuffixes@var794 .@expr1073744812 end (@expr1073744813 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var793 ;
579: std :: set < std :: string > mSuffixes@var794 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var802 ( 0 ) { }
584:
585: void setStart ( const char * s@var795 ) {
586: mStart@var800 =@expr1073744814 s@var795 ;
587: }
588: void setEnd ( const char * e@var796 ) {
589: mEnd@var801 =@expr1073744815 e@var796 ;
590: }
591: void setOffset ( const int o@var797 ) {
592: mOffset@var802 =@expr1073744816 o@var797 ;
593: }
594: void addBlock ( const char * blockName@var798 ) {
595: mBlocks@var803 .@expr1073744817 insert (@expr1073744818 blockName@var798 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var800 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var801 ;
602: }
603: int offset ( ) const {
604: return mOffset@var802 ;
605: }
606: bool isBlock ( const std :: string & blockName@var799 ) const {
607: return mBlocks@var803 .@expr1073744819 find (@expr1073744820 blockName@var799 ) !=@expr1073744821 mBlocks@var803 .@expr1073744822 end (@expr1073744823 ) ;
608: }
609:
610: private:
611: std :: string mStart@var800 ;
612: std :: string mEnd@var801 ;
613: int mOffset@var802 ;
614: std :: set < std :: string > mBlocks@var803 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var804 ;
618: std :: set < std :: string > mFiles@var805 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var806 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var807 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var808 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var809 ;
623: std :: map < std :: string , std :: string > mReturnValue@var810 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var811 ;
625: std :: map < std :: string , int > mReturnValueContainer@var812 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var813 ;
627: std :: map < std :: string , bool > mReportErrors@var814 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var815 ;
629: std :: set < std :: string > mMarkupExtensions@var816 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var817 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var818 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var819 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var820 ;
634: std :: map < std :: string , int > mReflection@var821 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var822 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var823 ;
637: std :: map < std :: string , Platform > mPlatforms@var824 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var825 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var826 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var827 , int argnr@var828 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var829 , bool * error@var830 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var831 , const std :: string & name@var832 ) {
646: const std ::@expr1073744824 map < std ::@expr1073744825 string , AllocFunc > ::@expr1073744826 const_iterator it@var833 =@expr1073744827 data@var831 .@expr1073744828 find (@expr1073744829 name@var832 ) ;
647: return (@expr1073744830 it@var833 ==@expr1073744831 data@var831 .@expr1073744832 end (@expr1073744833 ) ) ?@expr1073744834 nullptr :@expr1073744835 &@expr1073744836 it@var833 .@expr1073744837 second@var834 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var835 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var836 ,
654: const Settings * settings@var837 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var838 = nullptr ) ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var839 , std :: clock_t clocks@var840 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var841 ;
45: long mNumberOfResults@var842 ;
46:
47: TimerResultsData ( )
48: : mClocks@var841 ( 0 )
49: , mNumberOfResults@var842 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var843 =@expr1073744839 (@expr1073744840 double ) (@expr1073744841 (@expr1073744842 unsigned long ) mClocks@var841 ) /@expr1073744843 (@expr1073744844 double ) CLOCKS_PER_SEC@expr1073744838 ;
53: return ret@var843 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var844 ) const ;
62: void addResults ( const std :: string & str@var845 , std :: clock_t clocks@var846 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var847 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var848 , SHOWTIME_MODES showtimeMode@var849 , TimerResultsIntf * timerResults@var850 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var851 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var852 ;
79: TimerResultsIntf * mTimerResults@var853 ;
80: std :: clock_t mStart@var854 ;
81: const SHOWTIME_MODES mShowTimeMode@var855 ;
82: bool mStopped@var856 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var857 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var858 ;
103:
104:
105: std :: string addonPython@var859 ;
106:
107:
108: std :: vector < std :: string > basePaths@var860 ;
109:
110:
111: std :: string buildDir@var861 ;
112:
113:
114: bool checkAllConfigurations@var862 ;
115:
116:
117: bool checkConfiguration@var863 ;
118:
|
121:
122: bool checkHeaders@var864 ;
123:
124:
125: bool checkLibrary@var865 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var866 ;
129:
130:
131: bool checkUnusedTemplates@var867 ;
132:
133:
134: bool clang@var868 ;
135:
136:
137: std :: string clangExecutable@var869 ;
138:
139:
140: bool clangTidy@var870 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var871 ;
144:
145:
146: std :: string cppcheckCfgProductName@var872 ;
147:
148:
149: std :: string cppcheckCfgAbout@var873 ;
150:
151:
152: bool daca@var874 ;
153:
154:
155: bool debugnormal@var875 ;
156:
157:
158: bool debugSimplified@var876 ;
159:
160:
161: bool debugtemplate@var877 ;
162:
163:
164: bool debugwarnings@var878 ;
165:
166:
167: bool dump@var879 ;
168: std :: string dumpFile@var880 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var881 ;
176:
177:
178: bool exceptionHandling@var882 ;
179:
180:
181: std :: string exename@var883 ;
182:
183:
184:
185: int exitCode@var884 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var885 ;
189:
190:
191: bool force@var886 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var887 ;
196:
197:
198: bool inlineSuppressions@var888 ;
199:
200:
201:
202: unsigned int jobs@var889 ;
203:
|
206:
207: bool jointSuppressionReport@var890 ;
208:
209:
210: std :: list < std :: string > libraries@var891 ;
211:
212:
213: Library library@var892 ;
214:
215:
216:
217: int loadAverage@var893 ;
218:
|
221:
222: int maxConfigs@var894 ;
223:
224:
225: int maxCtuDepth@var895 ;
226:
227:
228: int maxTemplateRecursion@var896 ;
229:
230:
231: Suppressions nofail@var897 ;
232:
233:
234: Suppressions nomsg@var898 ;
235:
236:
237: std :: string outputFile@var899 ;
238:
239:
240: std :: string plistOutput@var900 ;
241:
242:
243: bool preprocessOnly@var901 ;
244:
245: ImportProject project@var902 ;
246:
247:
248: bool quiet@var903 ;
249:
250:
251: bool relativePaths@var904 ;
252:
253:
254: bool reportProgress@var905 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var906 ( "simple" )
261: , id@var908 ( "rule" )
262: , severity@var910 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var906 ;
266: std :: string pattern@var907 ;
267: std :: string id@var908 ;
268: std :: string summary@var909 ;
269: Severity :: SeverityType severity@var910 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var911 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var917 ( false ) , externalFunctions@var918 ( false ) , internalFunctions@var919 ( false ) , externalVariables@var920 ( false ) { }
281:
282: static const char XmlRootName@var912 [ ] ;
283: static const char XmlClasses@var913 [ ] ;
284: static const char XmlExternalFunctions@var914 [ ] ;
285: static const char XmlInternalFunctions@var915 [ ] ;
286: static const char XmlExternalVariables@var916 [ ] ;
287:
288: void clear ( ) {
289: classes@var917 =@expr1073744845 externalFunctions@var918 =@expr1073744846 internalFunctions@var919 =@expr1073744847 externalVariables@var920 =@expr1073744848 false ;
290: }
291:
|
297:
298: bool classes@var917 ;
299:
|
304:
305: bool externalFunctions@var918 ;
306:
|
310:
311: bool internalFunctions@var919 ;
312:
|
316:
317: bool externalVariables@var920 ;
318: } ;
319:
320: SafeChecks safeChecks@var921 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var922 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var923 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var924 ;
325:
326:
327: SHOWTIME_MODES showtime@var925 ;
328:
329:
330: Standards standards@var926 ;
331:
332:
333:
334: std :: string templateFormat@var927 ;
335:
336:
337:
338: std :: string templateLocation@var928 ;
339:
340:
341: std :: string userDefines@var929 ;
342:
343:
344: std :: set < std :: string > userUndefs@var930 ;
345:
346:
347: std :: list < std :: string > userIncludes@var931 ;
348:
349:
350: bool verbose@var932 ;
351:
352:
353: bool xml@var933 ;
354:
355:
356: int xml_version@var934 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var935 ) const {
363: for (@expr1073744849 const std ::@expr1073744850 string &@expr1073744851 configExcludePath@var936 :@expr1073744852 configExcludePaths@var871 ) {
364: if (@expr1073744853 file@var935 .@expr1073744854 length (@expr1073744855 ) >=@expr1073744856 configExcludePath@var936 .@expr3033 length (@expr3034 ) &&@expr1073744859 file@var935 .@expr1073744860 compare (@expr1073744861 0 , configExcludePath@var936 .@expr3033 length (@expr3034 ) , configExcludePath@var936 ) ==@expr1073744864 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var937 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var938 , bool inconclusiveCheck@var939 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744865 find (@expr1073744866 libraries@var891 .@expr1073744867 begin (@expr1073744868 ) , libraries@var891 .@expr3045 end (@expr3046 ) , "posix" ) !=@expr1073744871 libraries@var891 .@expr3045 end (@expr3046 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var940 = true ) {
392: Settings ::@expr1073744874 mTerminated@var857 =@expr1073744875 t@var940 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744876 mTerminated@var857 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var941 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/cppcheck.h

1:
|
39:
40: class Tokenizer ;
41:
|
50:
51: class CppCheck : ErrorLogger {
52: public:
53:
54:
55:
56: CppCheck ( ErrorLogger & errorLogger@var942 ,
57: bool useGlobalSuppressions@var943 ,
58: std :: function < bool ( std :: string , std :: vector < std :: string > , std :: string , std :: string * ) > executeCommand@var944 ) ;
59:
|
62:
63: ~ CppCheck ( ) override ;
64:
|
78:
79: unsigned int check ( const std :: string & path@var945 ) ;
80: unsigned int check ( const ImportProject :: FileSettings & fs@var946 ) ;
81:
|
92:
93: unsigned int check ( const std :: string & path@var947 , const std :: string & content@var948 ) ;
94:
|
98:
99: Settings & settings ( ) ;
100:
|
104:
105: static const char * version ( ) ;
106:
|
112:
113: static const char * extraVersion ( ) ;
114:
115: virtual void reportStatus ( unsigned int fileindex@var949 , unsigned int filecount@var950 , unsigned long sizedone@var951 , unsigned long sizetotal@var952 ) ;
116:
|
120:
121: void getErrorMessages ( ) ;
122:
123: void tooManyConfigsError ( const std :: string & file@var953 , const int numberOfConfigurations@var954 ) ;
124: void purgedConfigurationMessage ( const std :: string & file@var955 , const std :: string & configuration@var956 ) ;
125:
126: void dontSimplify ( ) {
127: mSimplify@var987 =@expr1073744877 false ;
128: }
129:
|
134:
135: bool analyseWholeProgram ( ) ;
136:
137:
138: void analyseClangTidy ( const ImportProject :: FileSettings & fileSettings@var957 ) ;
139:
140:
141: void analyseWholeProgram ( const std :: string & buildDir@var958 , const std :: map < std :: string , unsigned long > & files@var959 ) ;
142:
143:
144:
145: bool isUnusedFunctionCheckEnabled ( ) const ;
146:
147: private:
148:
149: bool hasRule ( const std :: string & tokenlist@var960 ) const ;
150:
151:
152: void internalError ( const std :: string & filename@var961 , const std :: string & msg@var962 ) ;
153:
|
160:
161: unsigned int checkFile ( const std :: string & filename@var963 , const std :: string & cfgname@var964 , std :: istream & fileStream@var965 ) ;
162:
|
166:
167: void checkRawTokens ( const Tokenizer & tokenizer@var966 ) ;
168:
|
172:
173: void checkNormalTokens ( const Tokenizer & tokenizer@var967 ) ;
174:
|
177:
178: void executeAddons ( const std :: vector < std :: string > & files@var968 ) ;
179: void executeAddons ( const std :: string & dumpFile@var969 ) ;
180:
|
183:
184: void executeAddonsWholeProgram ( const std :: map < std :: string , unsigned long > & files@var970 ) ;
185:
|
190:
191: void executeRules ( const std :: string & tokenlist@var971 , const Tokenizer & tokenizer@var972 ) ;
192:
|
199:
200: void reportErr ( const ErrorMessage & msg@var973 ) override ;
201:
|
206:
207: void reportOut ( const std :: string & outmsg@var974 , Color c@var975 = Color :: Reset ) override ;
208:
209: std :: list < std :: string > mErrorList@var976 ;
210: Settings mSettings@var977 ;
211:
212: void reportProgress ( const std :: string & filename@var978 , const char stage@var979 [ ] , const unsigned long value@var980 ) override ;
213:
|
216:
217: void reportInfo ( const ErrorMessage & msg@var981 ) override ;
218:
219: ErrorLogger & mErrorLogger@var982 ;
220:
221:
222: std :: string mCurrentConfig@var983 ;
223:
224: unsigned int mExitCode@var984 ;
225:
226: bool mUseGlobalSuppressions@var985 ;
227:
228:
229: bool mTooManyConfigs@var986 ;
230:
231:
232: bool mSimplify@var987 ;
233:
234:
235: std :: list < Check :: FileInfo * > mFileInfo@var988 ;
236:
237: AnalyzerInformation mAnalyzerInformation@var989 ;
238:
239:
240: std :: function < bool ( std :: string , std :: vector < std :: string > , std :: string , std :: string * ) > mExecuteCommand@var990 ;
241: } ;

##file cppcheck-2.8/lib/checkunusedfunctions.h

1:
|
32:
33: class ErrorLogger ;
34: class Function ;
35: class Settings ;
36: class Tokenizer ;
37:
38: namespace CTU {
39: class FileInfo ;
40: }
41:
|
45:
46: class CheckUnusedFunctions : public Check {
47: public:
48:
49: CheckUnusedFunctions ( ) : Check ( myName ( ) ) { }
50:
51:
52: CheckUnusedFunctions ( const Tokenizer * tokenizer@var991 , const Settings * settings@var992 , ErrorLogger * errorLogger@var993 )
53: : Check ( myName ( ) , tokenizer@var991 , settings@var992 , errorLogger@var993 ) { }
54:
55: static void clear ( ) {
56: instance@var1005 .@expr1073744878 mFunctions@var1023 .@expr1073744879 clear (@expr1073744880 ) ;
57: instance@var1005 .@expr1073744881 mFunctionCalls@var1024 .@expr1073744882 clear (@expr1073744883 ) ;
58: }
59:
|
62:
63: void parseTokens ( const Tokenizer & tokenizer@var994 , const char FileName@var995 [ ] , const Settings * settings@var996 ) ;
64:
65:
66: bool check ( ErrorLogger * const errorLogger@var997 , const Settings & settings@var998 ) const ;
67:
68:
69: Check :: FileInfo * getFileInfo ( const Tokenizer * tokenizer@var999 , const Settings * settings@var1000 ) const override ;
70:
71:
72: bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var1001 , const std :: list < Check :: FileInfo * > & fileInfo@var1002 , const Settings & settings@var1003 , ErrorLogger & errorLogger@var1004 ) override ;
73:
74: static CheckUnusedFunctions instance@var1005 ;
75:
76: std :: string analyzerInfo ( ) const ;
77:
78:
79: static void analyseWholeProgram ( ErrorLogger * const errorLogger@var1006 , const std :: string & buildDir@var1007 ) ;
80:
81: private:
82:
83: void getErrorMessages ( ErrorLogger * errorLogger@var1008 , const Settings * ) const override {
84: CheckUnusedFunctions ::@expr1073744884 unusedFunctionError (@expr1073744885 errorLogger@var1008 , emptyString@var1 , 0 , "funcName" ) ;
85: }
86:
87: void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) override { }
88:
|
91:
92: static void unusedFunctionError ( ErrorLogger * const errorLogger@var1009 ,
93: const std :: string & filename@var1010 , unsigned int lineNumber@var1011 ,
94: const std :: string & funcname@var1012 ) ;
95:
96: static std :: string myName ( ) {
97: return "Unused functions" ;
98: }
99:
100: std :: string classInfo ( ) const override {
101: return "Check for functions that are never called\n" ;
102: }
103:
104: class FunctionUsage {
105: public:
106: FunctionUsage ( ) : lineNumber@var1014 ( 0 ) , usedSameFile@var1015 ( false ) , usedOtherFile@var1016 ( false ) { }
107:
108: std :: string filename@var1013 ;
109: unsigned int lineNumber@var1014 ;
110: bool usedSameFile@var1015 ;
111: bool usedOtherFile@var1016 ;
112: } ;
113:
114: std :: map < std :: string , FunctionUsage > mFunctions@var1017 ;
115:
116: class FunctionDecl {
117: public:
118: explicit FunctionDecl ( const Function * f@var1018 ) ;
119: std :: string functionName@var1019 ;
120: unsigned int lineNumber@var1020 ;
121: } ;
122: std :: list < FunctionDecl > mFunctionDecl@var1021 ;
123: std :: set < std :: string > mFunctionCalls@var1022 ;
124: } ;

##file cppcheck-2.8/lib/clangimport.h

1:
|
26:
27: class Tokenizer ;
28:
29: namespace clangimport {
30: void parseClangAstDump ( Tokenizer * tokenizer@var1025 , std :: istream & f@var1026 ) ;
31: }

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var1027 ) const {
54: x@var1027 ++@expr1073744886 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var1028 ) const {
60: x@var1028 --@expr1073744887 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var1029 , const U & y@var1030 ) const {
67: return x@var1029 <@expr1073744888 y@var1030 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var1031 , const U & y@var1032 ) const {
74: return std ::@expr1073744889 abs (@expr1073744890 x@var1031 -@expr1073744891 y@var1032 ) ==@expr1073744892 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var1033 , T x@var1034 , U y@var1035 ) const {
81: result@var1033 =@expr1073744893 !@expr1073744894 (@expr1073744895 x@var1034 >@expr1073744896 y@var1035 ||@expr1073744897 x@var1034 <@expr1073744898 y@var1035 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var1036 = 0 , Bound b@var1037 = Bound :: Point )
91: : valueType@var1077 ( ValueType :: INT ) ,
92: bound@var1078 ( b@var1037 ) ,
93: intvalue@var1079 ( val@var1036 ) ,
94: tokvalue@var1080 ( nullptr ) ,
95: floatValue@var1081 ( 0.0 ) ,
96: moveKind@var1082 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var1083 ( val@var1036 ) ,
98: condition@var1084 ( nullptr ) ,
99: varId@var1086 ( 0U ) ,
100: safe@var1087 ( false ) ,
101: conditional@var1088 ( false ) ,
102: macro@var1089 ( false ) ,
103: defaultArg@var1090 ( false ) ,
104: indirect@var1091 ( 0 ) ,
105: path@var1092 ( 0 ) ,
106: wideintvalue@var1093 ( val@var1036 ) ,
107: subexpressions@var1094 ( ) ,
108: capturetok@var1095 ( nullptr ) ,
109: lifetimeKind@var1096 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var1097 ( LifetimeScope :: Local ) ,
111: valueKind@var1102 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var1038 , long long val@var1039 , Bound b@var1040 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var1041 ) const {
118: if (@expr1073744899 valueType@var1077 !=@expr1073744900 rhs@var1041 .@expr1073744901 valueType@var1042 ) {
119: return false ; }
120: switch (@expr1073744902 valueType@var1077 ) {
121: case ValueType ::@expr1073744903 INT :@expr3080
122: case ValueType ::@expr1073744905 CONTAINER_SIZE :@expr3080
123: case ValueType ::@expr1073744907 BUFFER_SIZE :@expr3080
124: case ValueType ::@expr1073744909 ITERATOR_START :@expr3080
125: case ValueType ::@expr1073744911 ITERATOR_END :@expr3080 ;
126: if (@expr3089 intvalue@var1079 !=@expr3090 rhs@var1041 .@expr3091 intvalue@var1043 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744916 TOK :@expr3080 ;
130: if (@expr3094 tokvalue@var1080 !=@expr3095 rhs@var1041 .@expr3096 tokvalue@var1044 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744921 FLOAT :@expr3080 ;
134:
135: if (@expr1073744923 floatValue@var1081 >@expr1073744924 rhs@var1041 .@expr3101 floatValue@var1045 ||@expr1073744926 floatValue@var1081 <@expr1073744927 rhs@var1041 .@expr3101 floatValue@var1045 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744929 MOVED :@expr3080 ;
139: if (@expr1073744931 moveKind@var1082 !=@expr1073744932 rhs@var1041 .@expr1073744933 moveKind@var1046 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744934 UNINIT :@expr3080 ;
143: break ;
144: case ValueType ::@expr1073744936 LIFETIME :@expr3080 ;
145: if (@expr3094 tokvalue@var1080 !=@expr3095 rhs@var1041 .@expr3096 tokvalue@var1044 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744941 SYMBOLIC :@expr3080 ;
149: if (@expr1073744943 !@expr1073744944 sameToken (@expr1073744945 tokvalue@var1080 , rhs@var1041 .@expr3096 tokvalue@var1044 ) ) {
150: return false ; }
151: if (@expr3089 intvalue@var1079 !=@expr3090 rhs@var1041 .@expr3091 intvalue@var1043 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var1047 , F f@var1048 ) {
160: switch (@expr1073744950 self@var1047 .@expr1073744951 valueType@var1049 ) {
161: case ValueType ::@expr1073744952 INT :@expr3129
162: case ValueType ::@expr1073744954 SYMBOLIC :@expr3129
163: case ValueType ::@expr1073744956 BUFFER_SIZE :@expr3129
164: case ValueType ::@expr1073744958 CONTAINER_SIZE :@expr3129
165: case ValueType ::@expr1073744960 ITERATOR_START :@expr3129
166: case ValueType ::@expr1073744962 ITERATOR_END :@expr3129 ; {
167: f@var1048 (@expr1073744964 self@var1047 .@expr1073744965 intvalue@var1050 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744966 FLOAT :@expr3129 ; {
171: f@var1048 (@expr1073744968 self@var1047 .@expr1073744969 floatValue@var1051 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744970 UNINIT :@expr3129
175: case ValueType ::@expr1073744972 TOK :@expr3129
176: case ValueType ::@expr1073744974 LIFETIME :@expr3129
177: case ValueType ::@expr1073744976 MOVED :@expr3129 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var1052 , Compare compare@var1053 , T x@var1054 , U y@var1055 ) const {
186: result@var1052 =@expr1073744978 compare@var1053 (@expr1073744979 x@var1054 , y@var1055 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var1056 , const Value & rhs@var1057 , Compare compare@var1058 , T x@var1059 ) const {
191: visitValue (@expr1073744981 rhs@var1057 ,
192: std ::@expr1073744982 bind (@expr1073744983 innerVisitor {@expr1073744984 } , std ::@expr1073744985 ref (@expr1073744986 result@var1056 ) , std ::@expr1073744987 move (@expr1073744988 compare@var1058 ) , x@var1059 , std ::@expr1073744989 placeholders ::@expr1073744990 _1@expr1073744980 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var1060 , Compare compare@var1061 ) const {
198: assert (@expr1073744992 (@expr1073744993 !@expr1073744994 this@expr3171 .@expr1073744996 isSymbolicValue (@expr1073744997 ) &&@expr1073744998 !@expr1073744999 rhs@var1060 .@expr1073745000 isSymbolicValue (@expr1073745001 ) ) ||@expr1073745002
199: (@expr1073745003 this@expr3171 .@expr1073745004 valueType@var1077 ==@expr1073745005 rhs@var1060 .@expr1073745006 valueType@var1062 &&@expr1073745007 sameToken (@expr1073745008 this@expr3171 .@expr1073745009 tokvalue@var1080 , rhs@var1060 .@expr1073745010 tokvalue@var1063 ) ) ) ;
200: bool result@var1064 ; result@var1064 =@expr1073745011 false ;
201: visitValue (@expr1073745012
202: *@expr1073745013 this@expr3171 ,
203: std ::@expr1073745014 bind (@expr1073745015 compareVisitor {@expr1073745016 } , std ::@expr3193 ref (@expr1073745018 result@var1064 ) , std ::@expr3193 ref (@expr1073745020 rhs@var1060 ) , std ::@expr1073745021 move (@expr1073745022 compare@var1061 ) , std ::@expr1073745023 placeholders ::@expr1073745024 _1@expr1073744991 ) ) ;
204: return result@var1064 ;
205: }
206:
207: bool operator== ( const Value & rhs@var1065 ) const {
208: if (@expr1073745025 !@expr1073745026 equalValue (@expr1073745027 rhs@var1065 ) ) {
209: return false ; }
210:
211: return varvalue@var1083 ==@expr1073745028 rhs@var1065 .@expr1073745029 varvalue@var1066 &&@expr1073745030
212: condition@var1084 ==@expr1073745031 rhs@var1065 .@expr1073745032 condition@var1067 &&@expr1073745033
213: varId@var1086 ==@expr1073745034 rhs@var1065 .@expr1073745035 varId@var1068 &&@expr1073745036
214: conditional@var1088 ==@expr1073745037 rhs@var1065 .@expr1073745038 conditional@var1069 &&@expr1073745039
215: defaultArg@var1090 ==@expr1073745040 rhs@var1065 .@expr1073745041 defaultArg@var1070 &&@expr1073745042
216: indirect@var1091 ==@expr1073745043 rhs@var1065 .@expr1073745044 indirect@var1071 &&@expr1073745045
217: valueKind@var1102 ==@expr1073745046 rhs@var1065 .@expr1073745047 valueKind@var1072 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var1073 ) const {
221: return !@expr1073745048 (@expr1073745049 *@expr1073745050 this@expr1073745051 ==@expr1073745052 rhs@var1073 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var1074 ) const {
226: bool result@var1075 ; result@var1075 =@expr1073745054 false ;
227: visitValue (@expr1073745055 *@expr1073745056 this@expr1073745057 , std ::@expr1073745058 bind (@expr1073745059 equalVisitor {@expr1073745060 } , std ::@expr1073745061 ref (@expr1073745062 result@var1075 ) , x@var1074 , std ::@expr1073745063 placeholders ::@expr1073745064 _1@expr1073745053 ) ) ;
228: return result@var1075 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073745065 bound@var1078 ==@expr1073745066 Bound ::@expr1073745067 Lower ) {
233: visitValue (@expr1073745068 *@expr3245 this@expr3246 , increment {@expr1073745071 } ) ; }
234: else { if (@expr1073745072 bound@var1078 ==@expr1073745073 Bound ::@expr1073745074 Upper ) {
235: visitValue (@expr1073745075 *@expr3245 this@expr3246 , decrement {@expr1073745077 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073745078 bound@var1078 ==@expr1073745079 Bound ::@expr3256 Lower ) {
240: bound@var1078 =@expr1073745081 Bound ::@expr3258 Upper ; }
241: else { if (@expr1073745083 bound@var1078 ==@expr1073745084 Bound ::@expr3258 Upper ) {
242: bound@var1078 =@expr1073745086 Bound ::@expr3256 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073745088 ) ;
247: decreaseRange (@expr1073745089 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var1076 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var1077 ;
267: bool isIntValue ( ) const {
268: return valueType@var1077 ==@expr1073745091 ValueType ::@expr1073745092 INT@expr1073745090 ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var1077 ==@expr1073745093 ValueType ::@expr1073745094 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var1077 ==@expr1073745095 ValueType ::@expr1073745096 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var1077 ==@expr1073745097 ValueType ::@expr1073745098 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var1077 ==@expr1073745099 ValueType ::@expr1073745100 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var1077 ==@expr1073745101 ValueType ::@expr1073745102 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var1077 ==@expr1073745103 ValueType ::@expr1073745104 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var1077 ==@expr1073745105 ValueType ::@expr1073745106 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var1077 ==@expr1073745107 ValueType ::@expr1073745108 ITERATOR_START ||@expr1073745109 valueType@var1077 ==@expr1073745110 ValueType ::@expr1073745111 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var1077 ==@expr1073745112 ValueType ::@expr1073745113 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var1077 ==@expr1073745114 ValueType ::@expr1073745115 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var1077 ==@expr1073745116 ValueType ::@expr1073745117 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var1077 ==@expr1073745119 ValueType ::@expr1073745120 LIFETIME &&@expr1073745121 lifetimeScope@var1097 ==@expr1073745122 LifetimeScope ::@expr1073745123 Local@expr1073745118 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var1077 ==@expr1073745124 ValueType ::@expr1073745125 LIFETIME &&@expr1073745126 lifetimeScope@var1097 ==@expr1073745127 LifetimeScope ::@expr1073745128 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var1077 ==@expr1073745129 ValueType ::@expr1073745130 LIFETIME &&@expr1073745131 lifetimeScope@var1097 ==@expr1073745132 LifetimeScope ::@expr1073745133 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073745134 ) ||@expr1073745135 isUninitValue (@expr1073745136 ) ||@expr1073745137 isLifetimeValue (@expr1073745138 ) ;
318: }
319:
320:
321: Bound bound@var1078 ;
322:
323:
324: long long intvalue@var1079 ;
325:
326:
327: const Token * tokvalue@var1080 ;
328:
329:
330: double floatValue@var1081 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var1082 ;
334:
335:
336: long long varvalue@var1083 ;
337:
338:
339: const Token * condition@var1084 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1085 ;
342:
343:
344: int varId@var1086 ;
345:
346:
347: bool safe@var1087 ;
348:
349:
350: bool conditional@var1088 ;
351:
352:
353: bool macro@var1089 ;
354:
355:
356: bool defaultArg@var1090 ;
357:
358: int indirect@var1091 ;
359:
360:
361: long long path@var1092 ;
362:
363:
364: long long wideintvalue@var1093 ;
365:
366: std :: vector < std :: string > subexpressions@var1094 ;
367:
368:
369: const Token * capturetok@var1095 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var1096 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var1097 ;
385:
386: static const char * toString ( MoveKind moveKind@var1098 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var1099 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var1100 ) ;
389: static const char * toString ( Bound bound@var1101 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var1102 ;
402:
403: void setKnown ( ) {
404: valueKind@var1102 =@expr1073745139 ValueKind ::@expr1073745140 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var1102 ==@expr1073745141 ValueKind ::@expr1073745142 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var1102 =@expr1073745144 ValueKind ::@expr1073745145 Possible@expr1073745143 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var1102 ==@expr1073745147 ValueKind ::@expr1073745148 Possible@expr1073745146 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var1102 ==@expr1073745149 ValueKind ::@expr1073745150 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var1102 =@expr1073745151 ValueKind ::@expr1073745152 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var1103 = true ) {
428: if (@expr1073745153 inconclusive@var1103 ) {
429: valueKind@var1102 =@expr1073745154 ValueKind ::@expr1073745155 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var1102 ==@expr1073745156 ValueKind ::@expr1073745157 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073745159 isKnown (@expr1073745160 ) ) {
438: valueKind@var1102 =@expr1073745161 ValueKind ::@expr1073745162 Possible@expr1073745158 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073745163 condition@var1084 &&@expr1073745164 !@expr1073745165 defaultArg@var1090 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var1104 , const Token * tok2@var1105 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var1106 , const Settings * settings@var1107 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var1108 , SymbolDatabase * symboldatabase@var1109 , ErrorLogger * errorLogger@var1110 , const Settings * settings@var1111 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var1112 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var1113 , const Settings * settings@var1114 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var1115 ,
459: const Settings * settings@var1116 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var1117 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var1118 , const Token * indexTok@var1119 , bool possible@var1120 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var1121 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var1122 , const Settings * settings@var1123 = nullptr , int depth@var1124 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var1125 ;
471: bool addressOf@var1126 ;
472: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1127 ;
473: bool inconclusive@var1128 ;
474:
475: LifetimeToken ( ) : token@var1125 ( nullptr ) , addressOf@var1126 ( false ) , errorPath@var1127 ( ) , inconclusive@var1128 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var1129 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var1130 )
478: : token@var1125 ( token@var1129 ) , addressOf@var1126 ( false ) , errorPath@var1127 ( std :: move ( errorPath@var1130 ) ) , inconclusive@var1128 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var1131 , bool addressOf@var1132 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var1133 )
482: : token@var1125 ( token@var1131 ) , addressOf@var1126 ( addressOf@var1132 ) , errorPath@var1127 ( std :: move ( errorPath@var1133 ) ) , inconclusive@var1128 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var1134 , bool b@var1135 ) {
486: for (@expr1073745166 LifetimeToken &@expr1073745167 x@var1136 :@expr1073745168 v@var1134 ) {
487: x@var1136 .@expr1073745169 addressOf@var1137 =@expr1073745170 b@var1135 ; }
488: return v@var1134 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var1138 , bool b@var1139 ) {
492: for (@expr1073745171 LifetimeToken &@expr1073745172 x@var1140 :@expr1073745173 v@var1138 ) {
493: x@var1140 .@expr1073745174 inconclusive@var1141 =@expr1073745175 b@var1139 ; }
494: return v@var1138 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var1142 , ValueFlow :: Value & true_value@var1143 , ValueFlow :: Value & false_value@var1144 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var1145 ) ;
499: const Token * parseCompareInt ( const Token * tok@var1146 , ValueFlow :: Value & true_value@var1147 , ValueFlow :: Value & false_value@var1148 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var1149 , long long val@var1150 , const Token * varTok@var1151 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var1152 , const Token * varTok@var1153 , long long val@var1154 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var1155 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var1156 ,
508: ValueFlow :: Value & value@var1157 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var1158 ,
511: bool escape@var1159 = false ,
512: std :: list < std :: pair < const Token * , std :: string > > errorPath@var1160 = std :: list < std :: pair < const Token * , std :: string > > { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var1161 , const Token * lifetime@var1162 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var1163 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1164 , bool * addressOf@var1165 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var1166 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var1167 , const Settings * settings@var1168 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var1169 , const ValueFlow :: Value * val@var1170 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var1171 , const ValueFlow :: Value * val@var1172 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var1173 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var1174 , bool inconclusive@var1175 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var1176 ,
529: bool inconclusive@var1177 = false ,
530: long long path@var1178 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var1179 , const Scope * defaultScope@var1180 = nullptr , bool smallest@var1181 = true ) ;

##file cppcheck-2.8/lib/ctu.h

1:
|
36:
37: class Function ;
38: class Settings ;
39: class Token ;
40: class Tokenizer ;
41:
42: namespace tinyxml2 {
43: class XMLElement ;
44: }
45:
|
50:
51: namespace CTU {
52: class FileInfo : public Check :: FileInfo {
53: public:
54: enum class InvalidValueType { null , uninit , bufferOverflow } ;
55:
56: std :: string toString ( ) const override ;
57:
58: struct Location {
59: Location ( ) = default ;
60: Location ( const Tokenizer * tokenizer@var1182 , const Token * tok@var1183 ) ;
61: Location ( const std :: string & fileName@var1184 , int lineNumber@var1185 , int column@var1186 ) : fileName@var1187 ( fileName@var1184 ) , lineNumber@var1188 ( lineNumber@var1185 ) , column@var1189 ( column@var1186 ) { }
62: std :: string fileName@var1187 ;
63: int lineNumber@var1188 { } ;
64: int column@var1189 { } ;
65: } ;
66:
67: struct UnsafeUsage {
68: UnsafeUsage ( ) = default ;
69: UnsafeUsage ( const std :: string & myId@var1190 , int myArgNr@var1191 , const std :: string & myArgumentName@var1192 , const Location & location@var1193 , long long value@var1194 ) : myId@var1195 ( myId@var1190 ) , myArgNr@var1196 ( myArgNr@var1191 ) , myArgumentName@var1197 ( myArgumentName@var1192 ) , location@var1198 ( location@var1193 ) , value@var1199 ( value@var1194 ) { }
70: std :: string myId@var1195 ;
71: int myArgNr@var1196 { } ;
72: std :: string myArgumentName@var1197 ;
73: Location location@var1198 ;
74: long long value@var1199 { } ;
75: std :: string toString ( ) const ;
76: } ;
77:
78: class CallBase {
79: public:
80: CallBase ( ) = default ;
81: CallBase ( const std :: string & callId@var1200 , int callArgNr@var1201 , const std :: string & callFunctionName@var1202 , const Location & loc@var1203 )
82: : callId@var1206 ( callId@var1200 ) , callArgNr@var1207 ( callArgNr@var1201 ) , callFunctionName@var1208 ( callFunctionName@var1202 ) , location@var1209 ( loc@var1203 )
83: { }
84: CallBase ( const Tokenizer * tokenizer@var1204 , const Token * callToken@var1205 ) ;
85: virtual ~ CallBase ( ) { }
86: std :: string callId@var1206 ;
87: int callArgNr@var1207 { } ;
88: std :: string callFunctionName@var1208 ;
89: Location location@var1209 ;
90: protected:
91: std :: string toBaseXmlString ( ) const ;
92: bool loadBaseFromXml ( const tinyxml2 :: XMLElement * xmlElement@var1210 ) ;
93: } ;
94:
95: class FunctionCall : public CallBase {
96: public:
97: std :: string callArgumentExpression@var1211 ;
98: long long callArgValue@var1212 ;
99: ValueFlow :: Value :: ValueType callValueType@var1213 ;
100: std :: vector < ErrorMessage :: FileLocation > callValuePath@var1214 ;
101: bool warning@var1215 ;
102:
103: std :: string toXmlString ( ) const ;
104: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var1216 ) ;
105: } ;
106:
107: class NestedCall : public CallBase {
108: public:
109: NestedCall ( ) = default ;
110:
111: NestedCall ( const std :: string & myId@var1217 , int myArgNr@var1218 , const std :: string & callId@var1219 , int callArgnr@var1220 , const std :: string & callFunctionName@var1221 , const Location & location@var1222 )
112: : CallBase ( callId@var1219 , callArgnr@var1220 , callFunctionName@var1221 , location@var1222 ) ,
113: myId@var1227 ( myId@var1217 ) ,
114: myArgNr@var1228 ( myArgNr@var1218 ) { }
115:
116: NestedCall ( const Tokenizer * tokenizer@var1223 , const Function * myFunction@var1224 , const Token * callToken@var1225 ) ;
117:
118: std :: string toXmlString ( ) const ;
119: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var1226 ) ;
120:
121: std :: string myId@var1227 ;
122: int myArgNr@var1228 { } ;
123: } ;
124:
125: std :: list < FunctionCall > functionCalls@var1229 ;
126: std :: list < NestedCall > nestedCalls@var1230 ;
127:
128: void loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var1231 ) ;
129: std :: map < std :: string , std :: list < const CallBase * > > getCallsMap ( ) const ;
130:
131: static std :: list < ErrorMessage :: FileLocation > getErrorPath ( InvalidValueType invalidValue@var1232 ,
132: const UnsafeUsage & unsafeUsage@var1233 ,
133: const std :: map < std :: string , std :: list < const CallBase * > > & callsMap@var1234 ,
134: const char info@var1235 [ ] ,
135: const FunctionCall * * const functionCallPtr@var1236 ,
136: bool warning@var1237 ) ;
137: } ;
138:
139: extern int maxCtuDepth@var1238 ;
140:
141: std :: string toString ( const std :: list < FileInfo :: UnsafeUsage > & unsafeUsage@var1239 ) ;
142:
143: std :: string getFunctionId ( const Tokenizer * tokenizer@var1240 , const Function * function@var1241 ) ;
144:
145:
146: FileInfo * getFileInfo ( const Tokenizer * tokenizer@var1242 ) ;
147:
148: std :: list < FileInfo :: UnsafeUsage > getUnsafeUsage ( const Tokenizer * tokenizer@var1243 , const Settings * settings@var1244 , const Check * check@var1245 , bool ( * isUnsafeUsage@var1246 ) ( const Check * , const Token * , long long * ) ) ;
149:
150: std :: list < FileInfo :: UnsafeUsage > loadUnsafeUsageListFromXml ( const tinyxml2 :: XMLElement * xmlElement@var1247 ) ;
151: }

##file cppcheck-2.8/lib/path.h

1:
|
39:
40: class Path {
41: public:
42:
|
46:
47: static std :: string toNativeSeparators ( std :: string path@var1248 ) ;
48:
|
53:
54: static std :: string fromNativeSeparators ( std :: string path@var1249 ) ;
55:
|
60:
61: static std :: string simplifyPath ( std :: string originalPath@var1250 ) ;
62:
|
67:
68: static std :: string getPathFromFilename ( const std :: string & filename@var1251 ) ;
69:
|
76:
77: static bool sameFileName ( const std :: string & fname1@var1252 , const std :: string & fname2@var1253 ) ;
78:
|
83:
84: static std :: string removeQuotationMarks ( std :: string path@var1254 ) ;
85:
|
90:
91: static std :: string getFilenameExtension ( const std :: string & path@var1255 ) ;
92:
|
97:
98: static std :: string getFilenameExtensionInLowerCase ( const std :: string & path@var1256 ) ;
99:
|
103:
104: static std :: string getCurrentPath ( ) ;
105:
|
110:
111: static bool isAbsolute ( const std :: string & path@var1257 ) ;
112:
|
118:
119: static std :: string getRelativePath ( const std :: string & absolutePath@var1258 , const std :: vector < std :: string > & basePaths@var1259 ) ;
120:
|
125:
126: static std :: string getAbsoluteFilePath ( const std :: string & filePath@var1260 ) ;
127:
|
133:
134: static bool acceptFile ( const std :: string & filename@var1261 ) {
135: const std ::@expr1073745176 set < std ::@expr1073745177 string > extra@var1262 ;
136: return acceptFile (@expr1073745178 filename@var1261 , extra@var1262 ) ;
137: }
138:
|
145:
146: static bool acceptFile ( const std :: string & path@var1263 , const std :: set < std :: string > & extra@var1264 ) ;
147:
|
152:
153: static bool isC ( const std :: string & path@var1265 ) ;
154:
|
159:
160: static bool isCPP ( const std :: string & path@var1266 ) ;
161:
|
166:
167: static bool isHeader ( const std :: string & path@var1267 ) ;
168:
|
173:
174: static std :: string stripDirectoryPart ( const std :: string & file@var1268 ) ;
175:
|
180:
181: static bool fileExists ( const std :: string & file@var1269 ) ;
182: } ;

##file cppcheck-2.8/lib/preprocessor.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37:
|
46:
47: class Directive {
48: public:
49:
50: std :: string file@var1270 ;
51:
52:
53: unsigned int linenr@var1271 ;
54:
55:
56: std :: string str@var1272 ;
57:
58:
59: Directive ( const std :: string & _file@var1273 , const int _linenr@var1274 , const std :: string & _str@var1275 ) ;
60: } ;
61:
|
69:
70: class Preprocessor {
71: public:
72:
|
75:
76: enum HeaderTypes {
77: NoHeader = 0 ,
78: UserHeader ,
79: SystemHeader
80: } ;
81:
82:
83: static char macroChar@var1276 ;
84:
85: explicit Preprocessor ( Settings & settings@var1277 , ErrorLogger * errorLogger@var1278 = nullptr ) ;
86: virtual ~ Preprocessor ( ) ;
87:
88: static std :: atomic < bool > missingIncludeFlag@var1279 ;
89: static std :: atomic < bool > missingSystemIncludeFlag@var1280 ;
90:
91: void inlineSuppressions ( const simplecpp :: TokenList & tokens@var1281 ) ;
92:
93: void setDirectives ( const simplecpp :: TokenList & tokens@var1282 ) ;
94: void setDirectives ( const std :: list < Directive > & directives@var1283 ) {
95: mDirectives@var1335 =@expr1073745179 directives@var1283 ;
96: }
97:
98:
99: const std :: list < Directive > & getDirectives ( ) const {
100: return mDirectives@var1335 ;
101: }
102:
103: std :: set < std :: string > getConfigs ( const simplecpp :: TokenList & tokens@var1284 ) const ;
104:
105: void handleErrors ( const simplecpp :: OutputList & outputList@var1285 , bool throwError@var1286 ) ;
106:
107: bool loadFiles ( const simplecpp :: TokenList & rawtokens@var1287 , std :: vector < std :: string > & files@var1288 ) ;
108:
109: void removeComments ( ) ;
110:
111: void setPlatformInfo ( simplecpp :: TokenList * tokens@var1289 ) const ;
112:
|
123:
124: void preprocess ( std :: istream & istr@var1290 , std :: map < std :: string , std :: string > & result@var1291 , const std :: string & filename@var1292 , const std :: list < std :: string > & includePaths@var1293 = std :: list < std :: string > ( ) ) ;
125:
|
142:
143: void preprocess ( std :: istream & srcCodeStream@var1294 , std :: string & processedFile@var1295 , std :: list < std :: string > & resultConfigurations@var1296 , const std :: string & filename@var1297 , const std :: list < std :: string > & includePaths@var1298 ) ;
144:
145: simplecpp :: TokenList preprocess ( const simplecpp :: TokenList & tokens1@var1299 , const std :: string & cfg@var1300 , std :: vector < std :: string > & files@var1301 , bool throwError@var1302 = false ) ;
146:
147: std :: string getcode ( const simplecpp :: TokenList & tokens1@var1303 , const std :: string & cfg@var1304 , std :: vector < std :: string > & files@var1305 , const bool writeLocations@var1306 ) ;
148:
|
154:
155: std :: string getcode ( const std :: string & filedata@var1307 , const std :: string & cfg@var1308 , const std :: string & filename@var1309 ) ;
156:
|
162:
163: bool validateCfg ( const std :: string & cfg@var1310 , const std :: list < simplecpp :: MacroUsage > & macroUsageList@var1311 ) ;
164: void validateCfgError ( const std :: string & file@var1312 , const unsigned int line@var1313 , const std :: string & cfg@var1314 , const std :: string & macro@var1315 ) ;
165:
|
172:
173: unsigned int calculateChecksum ( const simplecpp :: TokenList & tokens1@var1316 , const std :: string & toolinfo@var1317 ) const ;
174:
175: void simplifyPragmaAsm ( simplecpp :: TokenList * tokenList@var1318 ) ;
176:
177: private:
178:
179: static void simplifyPragmaAsmPrivate ( simplecpp :: TokenList * tokenList@var1319 ) ;
180:
181: public:
182:
183:
184: static void getErrorMessages ( ErrorLogger * errorLogger@var1320 , const Settings * settings@var1321 ) ;
185:
186: void setFile0 ( const std :: string & f@var1322 ) {
187: mFile0@var1337 =@expr1073745180 f@var1322 ;
188: }
189:
|
192:
193: void dump ( std :: ostream & out@var1323 ) const ;
194:
195: void reportOutput ( const simplecpp :: OutputList & outputList@var1324 , bool showerror@var1325 ) ;
196:
197: private:
198: void missingInclude ( const std :: string & filename@var1326 , unsigned int linenr@var1327 , const std :: string & header@var1328 , HeaderTypes headerType@var1329 ) ;
199: void error ( const std :: string & filename@var1330 , unsigned int linenr@var1331 , const std :: string & msg@var1332 ) ;
200:
201: Settings & mSettings@var1333 ;
202: ErrorLogger * mErrorLogger@var1334 ;
203:
204:
205: std :: list < Directive > mDirectives@var1335 ;
206:
207: std :: map < std :: string , simplecpp :: TokenList * > mTokenLists@var1336 ;
208:
209:
210: std :: string mFile0@var1337 ;
211:
212:
213: std :: list < simplecpp :: MacroUsage > mMacroUsage@var1338 ;
214: std :: list < simplecpp :: IfCond > mIfCond@var1339 ;
215: } ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var1340 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var1341 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var1342 ;
69: std :: string mScope@var1343 ;
70: std :: string mName@var1344 ;
71: std :: string mFullName@var1345 ;
72: const Token * mNameToken@var1346 ;
73: const Token * mParamEnd@var1347 ;
74: unsigned int mFlags@var1348 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var1349 ) {
90: setFlag (@expr1073745181 fIsClass , state@var1349 ) ;
91: }
92: void isFunction ( bool state@var1350 ) {
93: setFlag (@expr1073745182 fIsFunction , state@var1350 ) ;
94: }
95: void isVariable ( bool state@var1351 ) {
96: setFlag (@expr1073745183 fIsVariable , state@var1351 ) ;
97: }
98: void isAlias ( bool state@var1352 ) {
99: setFlag (@expr1073745184 fIsAlias , state@var1352 ) ;
100: }
101: void isSpecialization ( bool state@var1353 ) {
102: setFlag (@expr1073745185 fIsSpecialization , state@var1353 ) ;
103: }
104: void isPartialSpecialization ( bool state@var1354 ) {
105: setFlag (@expr1073745186 fIsPartialSpecialization , state@var1354 ) ;
106: }
107: void isForwardDeclaration ( bool state@var1355 ) {
108: setFlag (@expr1073745187 fIsForwardDeclaration , state@var1355 ) ;
109: }
110: void isVariadic ( bool state@var1356 ) {
111: setFlag (@expr1073745188 fIsVariadic , state@var1356 ) ;
112: }
113: void isFriend ( bool state@var1357 ) {
114: setFlag (@expr1073745189 fIsFriend , state@var1357 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var1358 ) const {
123: return (@expr3366 (@expr3366 mFlags@var1348 &@expr1073745192 flag@var1358 ) !=@expr1073745193 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var1359 , bool state@var1360 ) {
132: mFlags@var1348 =@expr1073745194 state@var1360 ?@expr1073745195 mFlags@var1348 |@expr1073745196 flag@var1359 :@expr1073745197 mFlags@var1348 &@expr1073745198 ~@expr1073745199 flag@var1359 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var1361 , const std :: string & scope@var1362 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var1363 , const std :: string & scope@var1364 , const Token * nameToken@var1365 , const Token * paramEnd@var1366 ) ;
150: TokenAndName ( const TokenAndName & other@var1367 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var1368 ) const {
154: return mToken@var1342 ==@expr1073745200 rhs@var1368 .@expr1073745201 mToken@var1369 &&@expr1073745202 mScope@var1343 ==@expr1073745203 rhs@var1368 .@expr1073745204 mScope@var1370 &&@expr1073745205 mName@var1344 ==@expr1073745206 rhs@var1368 .@expr1073745207 mName@var1371 &&@expr1073745208 mFullName@var1345 ==@expr1073745209 rhs@var1368 .@expr1073745210 mFullName@var1372 &&@expr1073745211
155: mNameToken@var1346 ==@expr1073745212 rhs@var1368 .@expr1073745213 mNameToken@var1373 &&@expr1073745214 mParamEnd@var1347 ==@expr1073745215 rhs@var1368 .@expr1073745216 mParamEnd@var1374 &&@expr1073745217 mFlags@var1348 ==@expr1073745218 rhs@var1368 .@expr1073745219 mFlags@var1375 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var1342 ;
160: }
161: void token ( Token * token@var1376 ) {
162: mToken@var1342 =@expr1073745220 token@var1376 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var1343 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var1344 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var1345 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var1346 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var1347 ;
178: }
179: void paramEnd ( const Token * end@var1377 ) {
180: mParamEnd@var1347 =@expr1073745221 end@var1377 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745222 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745223 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745224 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745225 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745226 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745227 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745228 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745229 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745230 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var1378 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var1379 ) const {
243:
244:
245: return (@expr3407 (@expr3407 mFlags@var1348 &@expr1073745233 fFamilyMask ) &@expr1073745234 (@expr3407 decl@var1379 .@expr1073745236 mFlags@var1380 &@expr1073745237 fFamilyMask ) ) !=@expr1073745238 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var1381 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var1382 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var1383 , const unsigned long numberOfArguments@var1384 , bool variadic@var1385 , const char patternAfter@var1386 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var1387 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var1388 , int & namepos@var1389 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1390 , int & namepos@var1391 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1392 , int & namepos@var1393 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1394 ,
306: bool & codeWithTemplates@var1395 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1396 , bool isTemplate@var1397 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1398 = nullptr , Token * backToken@var1399 = nullptr , bool isTemplate@var1400 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1401 , Token * end@var1402 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1403 , const std :: string & scope@var1404 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1405 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1406 ,
393: const std :: list < const Token * > & specializations@var1407 ,
394: const std :: time_t maxtime@var1408 ,
395: std :: set < std :: string > & expandedtemplates@var1409 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1410 , const Token * tok@var1411 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1412 , const Token * tok@var1413 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1414 ,
422: const TokenAndName & templateInstantiation@var1415 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1416 ,
424: const std :: string & newName@var1417 ,
425: bool copy@var1418 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1419 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1420 ,
435: const std :: string & newName@var1421 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1422 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1423 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1424 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1425 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1426 ,
458: const Token * templateInstantiationNameToken@var1427 ,
459: const std :: list < const Token * > & specializations@var1428 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1429 , const Token * end@var1430 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1431 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1432 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1433 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1434 ,
487: const std :: string & indent@var1435 = "    " ) const ;
488: void printOut ( const std :: string & text@var1436 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1437 ;
491: TokenList & mTokenList@var1438 ;
492: const Settings * mSettings@var1439 ;
493: ErrorLogger * mErrorLogger@var1440 ;
494: bool mChanged@var1441 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1442 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1443 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1444 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1445 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1446 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1447 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1448 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1449 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1450 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1451 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1452 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1453 ;
57: Token * back@var1454 ;
58: const TokenList * list@var1455 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1456 , const Token * bodyEnd_@var1457 , const std :: set < std :: string > & usingNamespaces_@var1458 = std :: set < std :: string > ( ) ) : name@var1459 ( name_@var1456 ) , bodyEnd@var1460 ( bodyEnd_@var1457 ) , usingNamespaces@var1461 ( usingNamespaces_@var1458 ) { }
63: std :: string name@var1459 ;
64: const Token * const bodyEnd@var1460 ;
65: std :: set < std :: string > usingNamespaces@var1461 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1462 ;
70: int mFileIndex@var1463 ;
71: int mLineNumber@var1464 ;
72: int mColumn@var1465 ;
73: int mExprId@var1466 ;
74:
75:
76: Token * mAstOperand1@var1467 ;
77: Token * mAstOperand2@var1468 ;
78: Token * mAstParent@var1469 ;
79:
80:
81: const Scope * mScope@var1470 ;
82: union {
83: const Function * mFunction@var1471 ;
84: const Variable * mVariable@var1472 ;
85: const :: Type * mType@var1473 ;
86: const Enumerator * mEnumerator@var1474 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1475 ;
94:
|
97:
98: int mIndex@var1476 ;
99:
100:
101: std :: string * mOriginalName@var1477 ;
102:
103:
104: ValueType * mValueType@var1478 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1479 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1480 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1481 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1482 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1483 ;
119: long long value@var1484 ;
120: struct CppcheckAttributes * next@var1485 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1486 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1487 ;
126:
127:
128: unsigned char mBits@var1488 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1489 , long long value@var1490 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1491 , long long * value@var1492 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1462 ( 0 )
135: , mFileIndex@var1463 ( 0 )
136: , mLineNumber@var1464 ( 0 )
137: , mColumn@var1465 ( 0 )
138: , mExprId@var1466 ( 0 )
139: , mAstOperand1@var1467 ( nullptr )
140: , mAstOperand2@var1468 ( nullptr )
141: , mAstParent@var1469 ( nullptr )
142: , mScope@var1470 ( nullptr )
143: , mFunction@var1471 ( nullptr )
144: , mProgressValue@var1475 ( 0 )
145: , mIndex@var1476 ( 0 )
146: , mOriginalName@var1477 ( nullptr )
147: , mValueType@var1478 ( nullptr )
148: , mValues@var1479 ( nullptr )
149: , mTemplateSimplifierPointers@var1481 ( nullptr )
150: , mScopeInfo@var1482 ( nullptr )
151: , mCppcheckAttributes@var1486 ( nullptr )
152: , mCpp11init@var1487 ( Cpp11init :: UNKNOWN )
153: , mBits@var1488 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1493 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1494 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1495 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1496 ) {
199: mStr@var1708 =@expr1073745239 s@var1496 ;
200: mImpl@var1714 .@expr1073745240 mVarId@var1745 =@expr1073745241 0 ;
201:
202: update_property_info (@expr1073745242 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1497 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1708 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1498 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1499 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1500 ) const ;
236: Token * tokAt ( int index@var1501 ) {
237: return const_cast < Token *@expr3419 > (@expr1073745244 const_cast < const Token *@expr3419 > (@expr1073745246 this@expr1073745247 ) .@expr1073745248 tokAt (@expr1073745249 index@var1501 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1502 ) const ;
245: Token * linkAt ( int index@var1503 ) {
246: return const_cast < Token *@expr3426 > (@expr1073745251 const_cast < const Token *@expr3426 > (@expr1073745253 this@expr1073745254 ) .@expr1073745255 linkAt (@expr1073745256 index@var1503 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1504 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1505 , const char ( & pattern@var1506 ) [ count ] ) {
276: return simpleMatch (@expr1073745258 tok@var1505 , pattern@var1506 , count@expr1073745257 -@expr1073745259 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1507 , const char pattern@var1508 [ ] , unsigned long pattern_len@var1509 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1510 , const char pattern@var1511 [ ] , int varid@var1512 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1513 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1514 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1515 , const Settings * const settings@var1516 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1517 , long long index@var1518 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1714 .@expr1073745260 mValueType@var1746 ;
366: }
367: void setValueType ( ValueType * vt@var1519 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1520 ; top@var1520 =@expr1073745261 this@expr1073745262 ;
371: while (@expr1073745263 top@var1520 &&@expr1073745264 !@expr1073745265 Token ::@expr1073745266 Match (@expr1073745267 top@var1520 .@expr3444 astParent (@expr3445 ) , ",|(" ) ) {
372: top@var1520 =@expr1073745270 top@var1520 .@expr3444 astParent (@expr3445 ) ; }
373: return top@var1520 ?@expr1073745273 top@var1520 .@expr1073745274 mImpl@var1521 .@expr1073745275 mValueType@var1522 :@expr1073745276 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1712 ;
378: }
379: void tokType ( Token :: Type t@var1523 ) {
380: mTokType@var1712 =@expr1073745277 t@var1523 ;
381:
382: const bool memoizedIsName@var1524 =@expr1073745278 mTokType@var1712 ==@expr1073745279 eName ||@expr1073745280 mTokType@var1712 ==@expr1073745281 eType ||@expr1073745282 mTokType@var1712 ==@expr1073745283 eVariable ||@expr1073745284
383: mTokType@var1712 ==@expr1073745285 eFunction ||@expr1073745286 mTokType@var1712 ==@expr1073745287 eKeyword ||@expr1073745288 mTokType@var1712 ==@expr3465 eBoolean ||@expr1073745290
384: mTokType@var1712 ==@expr3467 eEnumerator ;
385: setFlag (@expr1073745292 fIsName , memoizedIsName@var1524 ) ;
386:
387: const bool memoizedIsLiteral@var1525 =@expr1073745293 mTokType@var1712 ==@expr1073745294 eNumber ||@expr1073745295 mTokType@var1712 ==@expr1073745296 eString ||@expr1073745297 mTokType@var1712 ==@expr1073745298 eChar ||@expr1073745299
388: mTokType@var1712 ==@expr3465 eBoolean ||@expr1073745301 mTokType@var1712 ==@expr1073745302 eLiteral ||@expr1073745303 mTokType@var1712 ==@expr3467 eEnumerator ;
389: setFlag (@expr1073745305 fIsLiteral , memoizedIsLiteral@var1525 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1712 ==@expr1073745306 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745307 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1713 ==@expr1073745308 fIsName &&@expr1073745309 mTokType@var1712 ==@expr1073745310 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745311 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1712 ==@expr1073745312 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1712 ==@expr1073745313 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745314 isConstOp (@expr1073745315 ) ||@expr1073745316
412: isAssignmentOp (@expr1073745317 ) ||@expr1073745318
413: mTokType@var1712 ==@expr1073745319 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745320 isArithmeticalOp (@expr1073745321 ) ||@expr1073745322
417: mTokType@var1712 ==@expr1073745323 eLogicalOp ||@expr1073745324
418: mTokType@var1712 ==@expr1073745325 eComparisonOp ||@expr1073745326
419: mTokType@var1712 ==@expr1073745327 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745328 ) ||@expr1073745329
423: mTokType@var1712 ==@expr1073745330 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1712 ==@expr1073745331 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1712 ==@expr1073745332 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1712 ==@expr1073745333 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1712 ==@expr1073745334 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1712 ==@expr1073745335 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745336 ) !=@expr1073745337 nullptr &&@expr1073745338 astOperand2 (@expr1073745339 ) !=@expr1073745340 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1526 ) const {
444: return s@var1526 ==@expr1073745341 mStr@var1708 &&@expr1073745342 astOperand1 (@expr1073745343 ) !=@expr1073745344 nullptr &&@expr1073745345 astOperand2 (@expr1073745346 ) ==@expr1073745347 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1713 ;
450: }
451: void flags ( const unsigned int flags_@var1527 ) {
452: mFlags@var1713 =@expr1073745348 flags_@var1527 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745349 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1528 ) {
458: setFlag (@expr1073745350 fIsUnsigned , sign@var1528 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745351 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1529 ) {
464: setFlag (@expr1073745352 fIsSigned , sign@var1529 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745353 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1530 ) {
470: setFlag (@expr1073745354 fIsPointerCompare , b@var1530 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745355 fIsLong ) ;
474: }
475: void isLong ( bool size@var1531 ) {
476: setFlag (@expr1073745356 fIsLong , size@var1531 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745357 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1532 ) {
482: setFlag (@expr1073745358 fIsStandardType , b@var1532 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745359 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1533 ) {
488: setFlag (@expr1073745360 fIsExpandedMacro , m@var1533 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745361 fIsCast ) ;
492: }
493: void isCast ( bool c@var1534 ) {
494: setFlag (@expr1073745362 fIsCast , c@var1534 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745363 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1535 ) {
500: setFlag (@expr1073745364 fIsAttributeConstructor , ac@var1535 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745365 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1536 ) {
506: setFlag (@expr1073745366 fIsAttributeDestructor , value@var1536 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745367 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1537 ) {
512: setFlag (@expr1073745368 fIsAttributeUnused , unused@var1537 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745369 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1538 ) {
518: setFlag (@expr1073745370 fIsAttributeUsed , unused@var1538 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745371 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1539 ) {
524: setFlag (@expr1073745372 fIsAttributePure , value@var1539 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745373 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1540 ) {
530: setFlag (@expr1073745374 fIsAttributeConst , value@var1540 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745375 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1541 ) {
536: setFlag (@expr1073745376 fIsAttributeNoreturn , value@var1541 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745377 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1542 ) {
542: setFlag (@expr1073745378 fIsAttributeNothrow , value@var1542 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745379 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1543 ) {
548: setFlag (@expr1073745380 fIsAttributePacked , value@var1543 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745381 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1544 ) {
554: setFlag (@expr1073745382 fIsAttributeNodiscard , value@var1544 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745383 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1545 ) {
560: setFlag (@expr1073745384 fIsAttributeMaybeUnused , value@var1545 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1546 , long long value@var1547 ) {
563: mImpl@var1714 .@expr1073745385 setCppcheckAttribute (@expr1073745386 type@var1546 , value@var1547 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1548 , long long * value@var1549 ) const {
566: return mImpl@var1714 .@expr1073745387 getCppcheckAttribute (@expr1073745388 type@var1548 , value@var1549 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745389 mImpl@var1714 .@expr1073745390 mCppcheckAttributes@var1747 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745391 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745392 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1550 ) {
578: setFlag (@expr1073745393 fIsOperatorKeyword , value@var1550 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745394 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1551 ) {
584: setFlag (@expr1073745395 fIsComplex , value@var1551 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745396 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1552 ) {
590: setFlag (@expr1073745397 fIsEnumType , value@var1552 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745398 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1553 ) {
596: setFlag (@expr1073745399 fAtAddress , b@var1553 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745400 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1554 ) {
602: setFlag (@expr1073745401 fIncompleteVar , b@var1554 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745402 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1555 ) {
609: setFlag (@expr1073745403 fIsIncompleteConstant , b@var1555 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745404 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1556 ) {
616: setFlag (@expr1073745405 fConstexpr , b@var1556 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745406 fExternC ) ;
621: }
622: void isExternC ( bool b@var1557 ) {
623: setFlag (@expr1073745407 fExternC , b@var1557 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745408 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1558 ) {
630: setFlag (@expr1073745409 fIsSplitVarDeclComma , b@var1558 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745410 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1559 ) {
637: setFlag (@expr1073745411 fIsSplitVarDeclEq , b@var1559 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745412 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1560 ) {
644: setFlag (@expr1073745413 fIsImplicitInt , b@var1560 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745414 fIsInline ) ;
649: }
650: void isInline ( bool b@var1561 ) {
651: setFlag (@expr1073745415 fIsInline , b@var1561 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745416 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1562 ) {
658: setFlag (@expr1073745417 fIsRemovedVoidParameter , b@var1562 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745418 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1563 ) {
665: setFlag (@expr1073745419 fIsTemplate , b@var1563 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745420 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1564 ) {
672: setFlag (@expr1073745421 fIsSimplifedScope , b@var1564 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1714 .@expr1073745422 mBits@var1748 >@expr1073745423 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1714 .@expr1073745424 mBits@var1748 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1714 .@expr1073745425 mTemplateSimplifierPointers@var1749 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1565 ) {
685: if (@expr1073745426 !@expr1073745427 mImpl@var1714 .@expr3604 mTemplateSimplifierPointers@var1749 ) {
686: mImpl@var1714 .@expr3604 mTemplateSimplifierPointers@var1749 =@expr1073745430 new std ::@expr1073745431 set < TemplateSimplifier ::@expr1073745432 TokenAndName *@expr1073745433 > ; }
687: mImpl@var1714 .@expr3604 mTemplateSimplifierPointers@var1749 .@expr1073745435 insert (@expr1073745436 tokenAndName@var1565 ) ;
688: }
689: void setBits ( const unsigned char b@var1566 ) {
690: mImpl@var1714 .@expr1073745437 mBits@var1748 =@expr1073745438 b@var1566 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3615 (@expr3615 (@expr3615 mTokType@var1712 ==@expr1073745442 eString ) &&@expr1073745443 isPrefixStringCharLiteral (@expr1073745444 mStr@var1708 , '"' , "u8" ) ) ||@expr1073745445
695: (@expr3615 (@expr3615 mTokType@var1712 ==@expr1073745448 eChar ) &&@expr1073745449 isPrefixStringCharLiteral (@expr1073745450 mStr@var1708 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3627 (@expr3627 (@expr3627 mTokType@var1712 ==@expr1073745454 eString ) &&@expr1073745455 isPrefixStringCharLiteral (@expr1073745456 mStr@var1708 , '"' , "u" ) ) ||@expr1073745457
700: (@expr3627 (@expr3627 mTokType@var1712 ==@expr1073745460 eChar ) &&@expr1073745461 isPrefixStringCharLiteral (@expr1073745462 mStr@var1708 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3639 (@expr3639 (@expr3639 mTokType@var1712 ==@expr1073745466 eString ) &&@expr1073745467 isPrefixStringCharLiteral (@expr1073745468 mStr@var1708 , '"' , "U" ) ) ||@expr1073745469
705: (@expr3639 (@expr3639 mTokType@var1712 ==@expr1073745472 eChar ) &&@expr1073745473 isPrefixStringCharLiteral (@expr1073745474 mStr@var1708 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3651 (@expr3651 (@expr3651 mTokType@var1712 ==@expr1073745478 eString ) &&@expr1073745479 isPrefixStringCharLiteral (@expr1073745480 mStr@var1708 , '"' , "" ) ) ||@expr1073745481
710: (@expr3651 (@expr3651 mTokType@var1712 ==@expr1073745484 eChar ) &&@expr1073745485 isPrefixStringCharLiteral (@expr1073745486 mStr@var1708 , '\'' , "" ) &&@expr1073745487 mStr@var1708 .@expr1073745488 length (@expr1073745489 ) ==@expr1073745490 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3667 (@expr3667 (@expr3667 mTokType@var1712 ==@expr1073745494 eChar ) &&@expr1073745495 isPrefixStringCharLiteral (@expr1073745496 mStr@var1708 , '\'' , "" ) ) &&@expr1073745497
715: (@expr3667 mStr@var1708 .@expr1073745499 length (@expr1073745500 ) >@expr1073745501 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745502 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1567 ) {
738: setFlag (@expr1073745503 fIsTemplateArg , value@var1567 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1568 , const char ( & pattern@var1569 ) [ count ] ) {
743: return findsimplematch (@expr1073745505 startTok@var1568 , pattern@var1569 , count@expr1073745504 -@expr1073745506 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1570 , const char pattern@var1571 [ ] , unsigned long pattern_len@var1572 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1573 , const char ( & pattern@var1574 ) [ count ] , const Token * const end@var1575 ) {
749: return findsimplematch (@expr1073745508 startTok@var1573 , pattern@var1574 , count@expr1073745507 -@expr1073745509 1 , end@var1575 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1576 , const char pattern@var1577 [ ] , unsigned long pattern_len@var1578 , const Token * const end@var1579 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1580 , const char pattern@var1581 [ ] , const int varId@var1582 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1583 , const char pattern@var1584 [ ] , const Token * const end@var1585 , const int varId@var1586 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1587 , const char ( & pattern@var1588 ) [ count ] ) {
758: return findsimplematch (@expr1073745511 startTok@var1587 , pattern@var1588 , count@expr1073745510 -@expr1073745512 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1589 , const char pattern@var1590 [ ] , unsigned long pattern_len@var1591 ) {
761: return const_cast < Token *@expr3689 > (@expr1073745514 findsimplematch (@expr1073745515 const_cast < const Token *@expr3689 > (@expr1073745517 startTok@var1589 ) , pattern@var1590 , pattern_len@var1591 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1592 , const char ( & pattern@var1593 ) [ count ] , const Token * const end@var1594 ) {
765: return findsimplematch (@expr1073745519 startTok@var1592 , pattern@var1593 , count@expr1073745518 -@expr1073745520 1 , end@var1594 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1595 , const char pattern@var1596 [ ] , unsigned long pattern_len@var1597 , const Token * const end@var1598 ) {
768: return const_cast < Token *@expr3697 > (@expr1073745522 findsimplematch (@expr1073745523 const_cast < const Token *@expr3697 > (@expr1073745525 startTok@var1595 ) , pattern@var1596 , pattern_len@var1597 , end@var1598 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1599 , const char pattern@var1600 [ ] , const int varId@var1601 = 0 ) {
772: return const_cast < Token *@expr3702 > (@expr1073745527 findmatch (@expr1073745528 const_cast < const Token *@expr3702 > (@expr1073745530 startTok@var1599 ) , pattern@var1600 , varId@var1601 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1602 , const char pattern@var1603 [ ] , const Token * const end@var1604 , const int varId@var1605 = 0 ) {
775: return const_cast < Token *@expr3707 > (@expr1073745532 findmatch (@expr1073745533 const_cast < const Token *@expr3707 > (@expr1073745535 startTok@var1602 ) , pattern@var1603 , end@var1604 , varId@var1605 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1606 , const char * haystack@var1607 , int varid@var1608 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1714 .@expr1073745536 mFileIndex@var1750 ;
796: }
797: void fileIndex ( int indexOfFile@var1609 ) {
798: mImpl@var1714 .@expr1073745537 mFileIndex@var1750 =@expr1073745538 indexOfFile@var1609 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1714 .@expr1073745539 mLineNumber@var1751 ;
803: }
804: void linenr ( int lineNumber@var1610 ) {
805: mImpl@var1714 .@expr1073745540 mLineNumber@var1751 =@expr1073745541 lineNumber@var1610 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1714 .@expr1073745542 mColumn@var1752 ;
810: }
811: void column ( int c@var1611 ) {
812: mImpl@var1714 .@expr1073745543 mColumn@var1752 =@expr1073745544 c@var1611 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1709 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1612 , const Token * end@var1613 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1614 , const std :: string & originalNameStr@var1615 = emptyString@var1 , bool prepend@var1616 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1617 , const std :: string & originalNameStr@var1618 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745545 tokenStr@var1617 , originalNameStr@var1618 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1710 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1714 .@expr1073745546 mVarId@var1745 ;
851: }
852: void varId ( int id@var1619 ) {
853: mImpl@var1714 .@expr1073745547 mVarId@var1745 =@expr1073745548 id@var1619 ;
854: if (@expr1073745549 id@var1619 !=@expr1073745550 0 ) {
855: tokType (@expr1073745551 eVariable ) ;
856: isStandardType (@expr1073745552 false ) ;
857: } else {
858: update_property_info (@expr1073745553 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745554 mImpl@var1714 .@expr3731 mExprId@var1753 ) {
864: return mImpl@var1714 .@expr3731 mExprId@var1753 ; }
865: return mImpl@var1714 .@expr1073745557 mVarId@var1745 ;
866: }
867: void exprId ( int id@var1620 ) {
868: mImpl@var1714 .@expr1073745558 mExprId@var1753 =@expr1073745559 id@var1620 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1621 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1622 , const std :: vector < std :: string > & fileNames@var1623 ) const ;
888:
|
891:
892: void printLines ( int lines@var1624 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1625 , Token * start@var1626 , Token * end@var1627 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1628 ; varid@var1628 = false ;
905: bool exprid@var1629 ; exprid@var1629 = false ;
906: bool idtype@var1630 ; idtype@var1630 = false ;
907: bool attributes@var1631 ; attributes@var1631 = false ;
908: bool macro@var1632 ; macro@var1632 = false ;
909: bool linenumbers@var1633 ; linenumbers@var1633 = false ;
910: bool linebreaks@var1634 ; linebreaks@var1634 = false ;
911: bool files@var1635 ; files@var1635 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1636 ;
914: options@var1636 .@expr1073745560 attributes@var1637 =@expr1073745561 true ;
915: options@var1636 .@expr1073745562 macro@var1638 =@expr1073745563 true ;
916: options@var1636 .@expr1073745564 linenumbers@var1639 =@expr1073745565 true ;
917: options@var1636 .@expr1073745566 linebreaks@var1640 =@expr1073745567 true ;
918: options@var1636 .@expr1073745568 files@var1641 =@expr1073745569 true ;
919: return options@var1636 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1642 ; options@var1642 =@expr1073745570 forDebug (@expr1073745571 ) ;
923: options@var1642 .@expr1073745572 varid@var1643 =@expr1073745573 true ;
924: return options@var1642 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1644 ; options@var1644 =@expr1073745574 forDebug (@expr1073745575 ) ;
928: options@var1644 .@expr1073745576 exprid@var1645 =@expr1073745577 true ;
929: return options@var1644 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1646 ; options@var1646 =@expr1073745578 forDebug (@expr1073745579 ) ;
933: options@var1646 .@expr1073745580 exprid@var1647 =@expr1073745581 true ;
934: options@var1646 .@expr1073745582 varid@var1648 =@expr1073745583 true ;
935: options@var1646 .@expr1073745584 idtype@var1649 =@expr1073745585 true ;
936: return options@var1646 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1650 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1651 , bool attributes@var1652 , bool macro@var1653 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1654 , const std :: vector < std :: string > * fileNames@var1655 = nullptr , const Token * end@var1656 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1657 , bool attributes@var1658 = true ) const ;
952: std :: string stringifyList ( bool varid@var1659 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1660 , bool attributes@var1661 , bool linenumbers@var1662 , bool linebreaks@var1663 , bool files@var1664 , const std :: vector < std :: string > * fileNames@var1665 = nullptr , const Token * end@var1666 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1667 ) {
983: mLink@var1711 =@expr1073745586 linkToToken@var1667 ;
984: if (@expr1073745587 mStr@var1708 ==@expr1073745588 "<" ||@expr1073745589 mStr@var1708 ==@expr1073745590 ">" ) {
985: update_property_info (@expr1073745591 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1711 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1668 ) {
1006: mImpl@var1714 .@expr1073745592 mScope@var1754 =@expr1073745593 s@var1668 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1714 .@expr1073745594 mScope@var1754 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1669 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1712 ==@expr1073745595 eFunction ||@expr1073745596 mTokType@var1712 ==@expr1073745597 eLambda ?@expr1073745598 mImpl@var1714 .@expr1073745599 mFunction@var1755 :@expr1073745600 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1670 ) {
1034: mImpl@var1714 .@expr1073745601 mVariable@var1756 =@expr1073745602 v@var1670 ;
1035: if (@expr1073745603 v@var1670 ||@expr1073745604 mImpl@var1714 .@expr1073745605 mVarId@var1745 ) {
1036: tokType (@expr1073745606 eVariable ) ; }
1037: else { if (@expr1073745607 mTokType@var1712 ==@expr1073745608 eVariable ) {
1038: tokType (@expr1073745609 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1712 ==@expr1073745610 eVariable ?@expr1073745611 mImpl@var1714 .@expr1073745612 mVariable@var1756 :@expr1073745613 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1671 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1712 ==@expr1073745614 eType ?@expr1073745615 mImpl@var1714 .@expr1073745616 mType@var1757 :@expr1073745617 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1672 , const Token * * typeTok@var1673 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1674 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1675 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1712 ==@expr1073745618 eEnumerator ?@expr1073745619 mImpl@var1714 .@expr1073745620 mEnumerator@var1758 :@expr1073745621 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1676 ) {
1079: mImpl@var1714 .@expr1073745622 mEnumerator@var1758 =@expr1073745623 e@var1676 ;
1080: if (@expr1073745624 e@var1676 ) {
1081: tokType (@expr1073745625 eEnumerator ) ; }
1082: else { if (@expr1073745626 mTokType@var1712 ==@expr1073745627 eEnumerator ) {
1083: tokType (@expr1073745628 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1677 , Token * end@var1678 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1679 , Token * srcEnd@var1680 , Token * newLocation@var1681 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1714 .@expr1073745629 mProgressValue@var1759 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1682 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1714 .@expr3806 mOriginalName@var1760 ?@expr1073745631 *@expr1073745632 mImpl@var1714 .@expr3806 mOriginalName@var1760 :@expr1073745634 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1714 .@expr3811 mValues@var1733 ?@expr1073745636 *@expr1073745637 mImpl@var1714 .@expr3811 mValues@var1733 :@expr1073745639 TokenImpl ::@expr1073745640 mEmptyValueList@var1480 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1683 ) {
1164: if (@expr1073745641 !@expr1073745642 mImpl@var1714 .@expr3819 mOriginalName@var1760 ) {
1165: mImpl@var1714 .@expr3819 mOriginalName@var1760 =@expr1073745645 new std ::@expr1073745646 string (@expr1073745647 name@var1683 ) ; }
1166: else {
1167: *@expr1073745648 mImpl@var1714 .@expr3819 mOriginalName@var1760 =@expr1073745650 name@var1683 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1684 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1685 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1686 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1714 .@expr1073745652 mValues@var1733 .@expr1073745653 front (@expr1073745654 ) .@expr1073745655 intvalue@expr1073745651 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1687 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1688 , long long path@var1689 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1690 , const Settings * settings@var1691 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1692 , const Settings * settings@var1693 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1694 , int argnr@var1695 , const Settings * settings@var1696 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1697 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1698 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1699 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1700 ) {
1200: if (@expr1073745656 mImpl@var1714 .@expr3833 mValues@var1733 ) {
1201: mImpl@var1714 .@expr3833 mValues@var1733 .@expr1073745659 remove_if (@expr1073745660 pred@var1700 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1714 .@expr1073745661 mIndex@var1761 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1701 ) {
1213: mNext@var1709 =@expr1073745662 nextToken@var1701 ;
1214: }
1215: void previous ( Token * previousToken@var1702 ) {
1216: mPrevious@var1710 =@expr1073745663 previousToken@var1702 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1703 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1704 , const char * word@var1705 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1706 , char c@var1707 ) ;
1235:
1236: std :: string mStr@var1708 ;
1237:
1238: Token * mNext@var1709 ;
1239: Token * mPrevious@var1710 ;
1240: Token * mLink@var1711 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1712 ;
1283:
1284: uint64_t mFlags@var1713 ;
1285:
1286: TokenImpl * mImpl@var1714 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1715 ) const {
1294: return (@expr3840 (@expr3840 mFlags@var1713 &@expr1073745666 flag_@var1715 ) !=@expr1073745667 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1716 , bool state_@var1717 ) {
1303: mFlags@var1713 =@expr1073745668 state_@var1717 ?@expr1073745669 mFlags@var1713 |@expr1073745670 flag_@var1716 :@expr1073745671 mFlags@var1713 &@expr1073745672 ~@expr1073745673 flag_@var1716 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1718 , const int indent1@var1719 = 0 , const int indent2@var1720 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1721 ) ;
1321: void astOperand2 ( Token * tok@var1722 ) ;
1322: void astParent ( Token * tok@var1723 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1714 .@expr1073745674 mAstOperand1@var1724 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1714 .@expr1073745675 mAstOperand1@var1724 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1714 .@expr1073745676 mAstOperand2@var1725 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1714 .@expr1073745677 mAstOperand2@var1725 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1714 .@expr1073745678 mAstParent@var1726 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1714 .@expr1073745679 mAstParent@var1726 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745680 !@expr1073745681 astParent (@expr3858 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745683 this@expr3860 ==@expr1073745685 astParent (@expr3858 ) .@expr3863 astOperand1 (@expr3864 ) ) {
1346: return astParent (@expr3858 ) .@expr3866 astOperand2 (@expr3867 ) ; }
1347: else { if (@expr1073745692 this@expr3860 ==@expr1073745693 astParent (@expr3858 ) .@expr3866 astOperand2 (@expr3867 ) ) {
1348: return astParent (@expr3858 ) .@expr3863 astOperand1 (@expr3864 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745700 !@expr1073745701 astParent (@expr3878 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745703 this@expr3880 ==@expr1073745705 astParent (@expr3878 ) .@expr3883 astOperand1 (@expr3884 ) ) {
1356: return astParent (@expr3878 ) .@expr3886 astOperand2 (@expr3887 ) ; }
1357: else { if (@expr1073745712 this@expr3880 ==@expr1073745713 astParent (@expr3878 ) .@expr3886 astOperand2 (@expr3887 ) ) {
1358: return astParent (@expr3878 ) .@expr3883 astOperand1 (@expr3884 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1727 ; ret@var1727 =@expr1073745720 this@expr1073745721 ;
1364: while (@expr1073745722 ret@var1727 .@expr3899 mImpl@var1728 .@expr3900 mAstParent@var1729 ) {
1365: ret@var1727 =@expr1073745725 ret@var1727 .@expr3899 mImpl@var1728 .@expr3900 mAstParent@var1729 ; }
1366: return ret@var1727 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1730 ; ret@var1730 =@expr1073745728 this@expr1073745729 ;
1371: while (@expr1073745730 ret@var1730 .@expr3907 mImpl@var1731 .@expr3908 mAstParent@var1732 ) {
1372: ret@var1730 =@expr1073745733 ret@var1730 .@expr3907 mImpl@var1731 .@expr3908 mAstParent@var1732 ; }
1373: return ret@var1730 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1714 .@expr1073745736 mAstOperand1@var1724 =@expr1073745737 mImpl@var1714 .@expr1073745738 mAstOperand2@var1725 =@expr1073745739 mImpl@var1714 .@expr1073745740 mAstParent@var1726 =@expr1073745741 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1714 .@expr3918 mValues@var1733 ;
1393: mImpl@var1714 .@expr3918 mValues@var1733 =@expr1073745744 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1734 = "" ) const {
1397: std ::@expr1073745745 string ret@var1735 ;
1398: if (@expr1073745746 mImpl@var1714 .@expr3923 mAstOperand1@var1724 ) {
1399: ret@var1735 =@expr1073745748 mImpl@var1714 .@expr3923 mAstOperand1@var1724 .@expr1073745750 astString (@expr1073745751 sep@var1734 ) ; }
1400: if (@expr1073745752 mImpl@var1714 .@expr3929 mAstOperand2@var1725 ) {
1401: ret@var1735 +=@expr1073745754 mImpl@var1714 .@expr3929 mAstOperand2@var1725 .@expr1073745756 astString (@expr1073745757 sep@var1734 ) ; }
1402: return ret@var1735 +@expr1073745758 sep@var1734 +@expr1073745759 mStr@var1708 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1736 , bool xml@var1737 , const std :: vector < std :: string > & fileNames@var1738 , std :: ostream & out@var1739 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1740 , std :: ostream & out@var1741 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1742 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1743 ) const {
1419: mImpl@var1714 .@expr1073745760 mCpp11init@var1744 =@expr1073745761 cpp11init@var1743 ?@expr1073745762 TokenImpl ::@expr3939 Cpp11init ::@expr1073745764 CPP11INIT :@expr1073745765 TokenImpl ::@expr3939 Cpp11init ::@expr1073745767 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1714 .@expr1073745768 mCpp11init@var1744 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1762 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1763 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1764 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1765 ) ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var1766 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var1767 ) {
47: mSettings@var1802 =@expr1073745769 settings@var1767 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var1802 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var1804 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var1805 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var1768 ) ;
72:
73: void addtoken ( const std :: string & str@var1769 , const int lineno@var1770 , const int column@var1771 , const int fileno@var1772 , bool split@var1773 = false ) ;
74: void addtoken ( const std :: string & str@var1774 , const Token * locationTok@var1775 ) ;
75:
76: void addtoken ( const Token * tok@var1776 , const int lineno@var1777 , const int column@var1778 , const int fileno@var1779 ) ;
77: void addtoken ( const Token * tok@var1780 , const Token * locationTok@var1781 ) ;
78: void addtoken ( const Token * tok@var1782 ) ;
79:
80: static void insertTokens ( Token * dest@var1783 , const Token * src@var1784 , int n@var1785 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var1786 , const Token * first@var1787 , const Token * last@var1788 , bool one_line@var1789 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var1790 , const std :: string & file0@var1791 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var1792 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var1793 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var1799 .@expr1073745770 front@var1806 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var1799 .@expr1073745771 front@var1806 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var1799 .@expr1073745772 back@var1807 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var1799 .@expr1073745773 back@var1807 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var1800 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var1794 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var1795 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var1796 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var1797 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var1798 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var1799 ;
206:
207:
208: std :: vector < std :: string > mFiles@var1800 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var1801 ;
212:
213:
214: const Settings * mSettings@var1802 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var1803 ;
217:
218:
219: bool mIsC@var1804 ;
220: bool mIsCpp@var1805 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var1808 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var1809 ;
67: mutable int mVarId@var1810 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var1811 ) ;
73: bool hasVariable ( const std :: string & varname@var1812 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var1813 ) const {
75: return mVariableId@var1808 .@expr1073745774 find (@expr1073745775 varname@var1813 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var1808 .@expr1073745776 end (@expr1073745777 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var1808 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745778 mVarId@var1810 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var1814 , ErrorLogger * errorLogger@var1815 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var1816 ) {
95: mTimerResults@var1936 =@expr1073745779 tr@var1816 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var1914 .@expr1073745780 isC (@expr1073745781 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var1914 .@expr1073745782 isCPP (@expr1073745783 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var1817 , bool * unknown@var1818 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var1819 , const std :: string & FileName@var1820 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var1821 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var1822 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var1823 ,
142: const char FileName@var1824 [ ] ,
143: const std :: string & configuration@var1825 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var1826 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var1827 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var1828 , const Token * end@var1829 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var1830 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var1831 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var1832 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var1833 , const Token * const tokEnd@var1834 , const bool only_k_r_fpar@var1835 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var1836 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var1837 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var1838 , bool commandWithCondition@var1839 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var1840 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var1841 , Token * * _tok2@var1842 , Token * * _tok3@var1843 , std :: string & value@var1844 , int & valueVarId@var1845 , bool & valueIsPointer@var1846 , bool floatvar@var1847 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var1848 , Token * tok3@var1849 , int varid@var1850 , const std :: string & structname@var1851 , std :: string & value@var1852 , int valueVarId@var1853 , bool valueIsPointer@var1854 , const Token * const valueToken@var1855 , int indentlevel@var1856 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var1857 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var1858 , const std :: string & endsWith@var1859 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var1860 , const std :: string & endsWith@var1861 , bool cpp@var1862 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var1863 ) {
585: mPreprocessor@var1937 =@expr1073745784 preprocessor@var1863 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var1937 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var1864 , const Token * end@var1865 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var1866 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var1867 , const std :: string & code@var1868 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var1869 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var1870 , const std :: string & what@var1871 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var1872 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var1873 , const std :: string & msg@var1874 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var1875 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var1876 , const std :: string & macroName@var1877 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var1878 , const Token * end@var1879 , bool allowSemicolon@var1880 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var1881 , const Severity :: SeverityType severity@var1882 , const std :: string & id@var1883 , const std :: string & msg@var1884 , bool inconclusive@var1885 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var1886 , Severity :: SeverityType severity@var1887 , const std :: string & id@var1888 , const std :: string & msg@var1889 , bool inconclusive@var1890 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var1891 , const Token * name@var1892 , const Token * typeDef@var1893 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var1894 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var1895 ,
821: const VariableMap & variableMap@var1896 ,
822: const int scopeStartVarId@var1897 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var1898 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var1899 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var1900 ,
827: int * varId@var1901 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var1902 ,
830: Token * const startToken@var1903 ,
831: const Token * const endToken@var1904 ,
832: const std :: map < std :: string , int > & varlist@var1905 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var1906 ,
834: int * varId_@var1907 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var1908 ) ;
849:
850: bool operatorEnd ( const Token * tok@var1909 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var1935 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var1910 ) {
861: mSettings@var1921 =@expr1073745785 settings@var1910 ;
862: list@var1914 .@expr1073745786 setSettings (@expr1073745787 settings@var1910 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var1923 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var1911 ) const ;
877:
878: void dump ( std :: ostream & out@var1912 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var1913 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var1933 ;
888: }
889:
|
892:
893: TokenList list@var1914 ;
894:
895: const Token * tokens ( ) const {
896: return list@var1914 .@expr1073745788 front (@expr1073745789 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var1915 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var1916 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var1917 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var1918 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var1921 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var1919 , bool inOperator@var1920 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745790 mVarId@var1933 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var1921 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var1922 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var1923 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var1924 ;
973:
974:
975:
976: std :: string mConfiguration@var1925 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var1926 ;
980:
981: struct TypedefInfo {
982: std :: string name@var1927 ;
983: std :: string filename@var1928 ;
984: int lineNumber@var1929 ;
985: int column@var1930 ;
986: bool used@var1931 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var1932 ;
989:
990:
991: int mVarId@var1933 ;
992:
993:
994: int mUnnamedCount@var1934 ;
995:
|
999:
1000: bool mCodeWithTemplates@var1935 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var1936 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var1937 ;
1013: } ;

##file cppcheck-2.8/lib/cppcheck.cpp

1:
|
70:
71: class SymbolDatabase ;
72:
73: static const char Version@var1938 [ 4 ] = $"2.8" ;
74: static const char ExtraVersion@var1939 [ 1 ] = "" ;
75:
76: static const char FILELIST@var1940 [ 29 ] = "cppcheck-addon-ctu-file-list" ;
77:
78: static TimerResults s_timerResults@var1941 ;
79:
80:
81: static const CWE CWE398@var1942 ( 398U ) ;
82:
83: namespace {
84: struct AddonInfo {
85: std :: string name@var1943 ;
86: std :: string scriptFile@var1944 ;
87: std :: string executable@var1945 ;
88: std :: string args@var1946 ;
89: std :: string python@var1947 ;
90: bool ctu@var1948 ; ctu@var1948 = false ;
91: std :: string runScript@var1949 { } ;
92:
93: static std :: string getFullPath ( const std :: string & fileName@var1950 , const std :: string & exename@var1951 ) {
94: if (@expr1073745791 Path ::@expr3968 fileExists (@expr1073745793 fileName@var1950 ) ) {
95: return fileName@var1950 ; }
96:
97: const std ::@expr1073745794 string exepath@var1952 =@expr1073745795 Path ::@expr1073745796 getPathFromFilename (@expr1073745797 exename@var1951 ) ;
98: if (@expr1073745798 Path ::@expr3968 fileExists (@expr1073745800 exepath@var1952 +@expr3977 fileName@var1950 ) ) {
99: return exepath@var1952 +@expr3977 fileName@var1950 ; }
100: if (@expr1073745803 Path ::@expr3968 fileExists (@expr1073745805 exepath@var1952 +@expr3982 "addons/" +@expr3983 fileName@var1950 ) ) {
101: return exepath@var1952 +@expr3982 "addons/" +@expr3983 fileName@var1950 ; }
102:
|
108:
109: return "" ;
110: }
111:
112: std :: string parseAddonInfo ( const picojson :: value & json@var1953 , const std :: string & fileName@var1954 , const std :: string & exename@var1955 ) {
113: const std ::@expr3986 string &@expr3987 json_error@var1956 =@expr1073745812 picojson ::@expr1073745813 get_last_error (@expr1073745814 ) ;
114: if (@expr1073745815 !@expr1073745816 json_error@var1956 .@expr1073745817 empty (@expr1073745818 ) ) {
115: return "Loading " +@expr3995 fileName@var1954 +@expr1073745820 " failed. " +@expr1073745821 json_error@var1956 ;
116: }
117: if (@expr1073745822 !@expr1073745823 json@var1953 .@expr1073745824 is < picojson ::@expr3986 object > (@expr1073745826 ) ) {
118: return "Loading " +@expr3995 fileName@var1954 +@expr1073745828 " failed. Bad json." ; }
119: picojson ::@expr1073745829 object obj@var1957 ; obj@var1957 =@expr1073745830 json@var1953 .@expr1073745831 get < picojson ::@expr3986 object > (@expr1073745833 ) ;
120: if (@expr1073745834 obj@var1957 .@expr4011 count (@expr1073745836 "args" ) ) {
121: if (@expr1073745837 !@expr1073745838 obj@var1957 [@expr4015 "args" ] .@expr1073745840 is < picojson ::@expr3986 array > (@expr1073745842 ) ) {
122: return "Loading " +@expr3995 fileName@var1954 +@expr1073745844 " failed. args must be array." ; }
123: for (@expr1073745845 const picojson ::@expr3986 value &@expr3987 v@var1958 :@expr1073745848 obj@var1957 [@expr4015 "args" ] .@expr1073745850 get < picojson ::@expr3986 array > (@expr1073745852 ) ) {
124: args@var1946 +=@expr1073745853 " " +@expr1073745854 v@var1958 .@expr1073745855 get < std ::@expr3986 string > (@expr1073745857 ) ; }
125: }
126:
127: if (@expr1073745858 obj@var1957 .@expr4011 count (@expr1073745860 "ctu" ) ) {
128:
129: if (@expr1073745861 !@expr1073745862 obj@var1957 [@expr4039 "ctu" ] .@expr1073745864 is < bool > (@expr1073745865 ) ) {
130: return "Loading " +@expr3995 fileName@var1954 +@expr1073745867 " failed. ctu must be boolean." ; }
131: ctu@var1948 =@expr1073745868 obj@var1957 [@expr4039 "ctu" ] .@expr1073745870 get < bool > (@expr1073745871 ) ;
132: } else {
133: ctu@var1948 =@expr1073745872 false ;
134: }
135:
136: if (@expr1073745873 obj@var1957 .@expr4011 count (@expr1073745875 "python" ) ) {
137:
138: if (@expr1073745876 obj@var1957 [@expr4053 "python" ] .@expr1073745878 is < picojson ::@expr3986 array > (@expr1073745880 ) ) {
139: return "Loading " +@expr3995 fileName@var1954 +@expr1073745882 " failed. python must not be an array." ;
140: }
141: python@var1947 =@expr1073745883 obj@var1957 [@expr4053 "python" ] .@expr1073745885 get < std ::@expr3986 string > (@expr1073745887 ) ;
142: } else {
143: python@var1947 =@expr1073745888 "" ;
144: }
145:
146: if (@expr1073745889 obj@var1957 .@expr4011 count (@expr1073745891 "executable" ) ) {
147: if (@expr1073745892 !@expr1073745893 obj@var1957 [@expr4070 "executable" ] .@expr1073745895 is < std ::@expr3986 string > (@expr1073745897 ) ) {
148: return "Loading " +@expr3995 fileName@var1954 +@expr1073745899 " failed. executable must be a string." ; }
149: executable@var1945 =@expr1073745900 getFullPath (@expr1073745901 obj@var1957 [@expr4070 "executable" ] .@expr1073745903 get < std ::@expr3986 string > (@expr1073745905 ) , fileName@var1954 ) ;
150: return "" ;
151: }
152:
153: return getAddonInfo (@expr1073745906 obj@var1957 [@expr1073745907 "script" ] .@expr1073745908 get < std ::@expr3986 string > (@expr1073745910 ) , exename@var1955 ) ;
154: }
155:
156: std :: string getAddonInfo ( const std :: string & fileName@var1959 , const std :: string & exename@var1960 ) {
157: if (@expr1073745912 fileName@var1959 [@expr1073745913 0 ] ==@expr1073745914 '{' ) {
158: std ::@expr1073745915 istringstream in@var1961 (@expr1073745916 fileName@var1959 ) ;
159: picojson ::@expr1073745917 value json@var1962 ;
160: in@var1961 >>@expr1073745918 json@var1962 ;
161: return parseAddonInfo (@expr1073745919 json@var1962 , fileName@var1959 , exename@var1960 ) ;
162: }
163: if (@expr1073745920 fileName@var1959 .@expr1073745921 find (@expr1073745922 "." ) ==@expr1073745923 std ::@expr4100 string ::@expr4101 npos@expr4087 ) {
164: return getAddonInfo (@expr1073745926 fileName@var1959 +@expr1073745927 ".py" , exename@var1960 ) ; }
165:
166: if (@expr1073745928 endsWith (@expr1073745929 fileName@var1959 , ".py" ) ) {
167: scriptFile@var1944 =@expr1073745930 getFullPath (@expr1073745931 fileName@var1959 , exename@var1960 ) ;
168: if (@expr1073745932 scriptFile@var1944 .@expr1073745933 empty (@expr1073745934 ) ) {
169: return "Did not find addon " +@expr1073745935 fileName@var1959 ; }
170:
171: std ::@expr4100 string ::@expr1073745937 size_type pos1@var1963 ; pos1@var1963 =@expr1073745938 scriptFile@var1944 .@expr4115 rfind (@expr1073745940 "/" ) ;
172: if (@expr1073745941 pos1@var1963 ==@expr1073745942 std ::@expr4100 string ::@expr4101 npos@expr4087 ) {
173: pos1@var1963 =@expr1073745945 0 ; }
174: else {
175: pos1@var1963 ++@expr1073745946 ; }
176: std ::@expr4100 string ::@expr1073745948 size_type pos2@var1964 ; pos2@var1964 =@expr1073745949 scriptFile@var1944 .@expr4115 rfind (@expr1073745951 "." ) ;
177: if (@expr1073745952 pos2@var1964 <@expr1073745953 pos1@var1963 ) {
178: pos2@var1964 =@expr1073745954 std ::@expr4100 string ::@expr4101 npos@expr4087 ; }
179: name@var1943 =@expr1073745957 scriptFile@var1944 .@expr1073745958 substr (@expr1073745959 pos1@var1963 , pos2@var1964 -@expr1073745960 pos1@var1963 ) ;
180:
181: runScript@var1949 =@expr1073745961 getFullPath (@expr1073745962 "runaddon.py" , exename@var1960 ) ;
182:
183: return "" ;
184: }
185:
186: if (@expr1073745963 !@expr1073745964 endsWith (@expr1073745965 fileName@var1959 , ".json" ) ) {
187: return "Failed to open addon " +@expr1073745966 fileName@var1959 ; }
188:
189: std ::@expr1073745967 ifstream fin@var1965 (@expr1073745968 fileName@var1959 ) ;
190: if (@expr1073745969 !@expr1073745970 fin@var1965 .@expr1073745971 is_open (@expr1073745972 ) ) {
191: return "Failed to open " +@expr1073745973 fileName@var1959 ; }
192: picojson ::@expr1073745974 value json@var1966 ;
193: fin@var1965 >>@expr1073745975 json@var1966 ;
194: return parseAddonInfo (@expr1073745976 json@var1966 , fileName@var1959 , exename@var1960 ) ;
195: }
196: } ;
197: }
198:
199: static std :: string cmdFileName ( std :: string f@var1967 )
200: {
201: f@var1967 =@expr1073745978 Path ::@expr1073745979 toNativeSeparators (@expr1073745980 f@var1967 ) ;
202: if (@expr1073745981 f@var1967 .@expr1073745982 find (@expr1073745983 " " ) !=@expr1073745984 std ::@expr1073745985 string ::@expr1073745986 npos@expr1073745977 ) {
203: return "\"" +@expr1073745987 f@var1967 +@expr1073745988 "\"" ; }
204: return f@var1967 ;
205: }
206:
207: static std :: vector < std :: string > split ( const std :: string & str@var1968 , const std :: string & sep@var1969 = " " )
208: {
209: std ::@expr1073745990 vector < std ::@expr4167 string > ret@var1970 ;
210: for (@expr1073745992 std ::@expr4167 string ::@expr4167 size_type startPos@var1971 =@expr1073745995 0U ; startPos@var1971 <@expr1073745996 str@var1968 .@expr4173 size (@expr4174 ) ; ) {
211: startPos@var1971 =@expr1073745999 str@var1968 .@expr1073746000 find_first_not_of (@expr1073746001 sep@var1969 , startPos@var1971 ) ;
212: if (@expr1073746002 startPos@var1971 ==@expr1073746003 std ::@expr1073746004 string ::@expr1073746005 npos@expr1073745989 ) {
213: break ; }
214:
215: if (@expr1073746006 str@var1968 [@expr1073746007 startPos@var1971 ] ==@expr1073746008 '\"' ) {
216: const std ::@expr4167 string ::@expr4167 size_type endPos@var1972 =@expr1073746011 str@var1968 .@expr4188 find (@expr1073746013 "\"" , startPos@var1971 +@expr4190 1 ) ;
217: ret@var1970 .@expr4191 push_back (@expr1073746016 str@var1968 .@expr4193 substr (@expr1073746018 startPos@var1971 +@expr4190 1 , endPos@var1972 -@expr1073746020 startPos@var1971 -@expr1073746021 1 ) ) ;
218: startPos@var1971 =@expr1073746022 (@expr1073746023 endPos@var1972 <@expr1073746024 str@var1968 .@expr4173 size (@expr4174 ) ) ?@expr1073746027 endPos@var1972 +@expr1073746028 1 :@expr1073746029 endPos@var1972 ;
219: continue ;
220: }
221:
222: const std ::@expr4167 string ::@expr4167 size_type endPos@var1973 =@expr1073746032 str@var1968 .@expr4188 find (@expr1073746034 sep@var1969 , startPos@var1971 +@expr4190 1 ) ;
223: ret@var1970 .@expr4191 push_back (@expr1073746037 str@var1968 .@expr4193 substr (@expr1073746039 startPos@var1971 , endPos@var1973 -@expr1073746040 startPos@var1971 ) ) ;
224: startPos@var1971 =@expr1073746041 endPos@var1973 ;
225: }
226:
227: return ret@var1970 ;
228: }
229:
230: static std :: string getDumpFileName ( const Settings & settings@var1974 , const std :: string & filename@var1975 )
231: {
232: if (@expr1073746042 !@expr1073746043 settings@var1974 .@expr4220 dumpFile@var1976 .@expr1073746045 empty (@expr1073746046 ) ) {
233: return settings@var1974 .@expr4220 dumpFile@var1976 ; }
234: if (@expr1073746048 !@expr1073746049 settings@var1974 .@expr1073746050 dump@var1977 &&@expr1073746051 !@expr1073746052 settings@var1974 .@expr4229 buildDir@var1978 .@expr1073746054 empty (@expr1073746055 ) ) {
235: return AnalyzerInformation ::@expr1073746056 getAnalyzerInfoFile (@expr1073746057 settings@var1974 .@expr4229 buildDir@var1978 , filename@var1975 , "" ) +@expr1073746059 ".dump" ; }
236: return filename@var1975 +@expr1073746060 ".dump" ;
237: }
238:
239: static std :: string getCtuInfoFileName ( const std :: string & dumpFile@var1979 )
240: {
241: return dumpFile@var1979 .@expr1073746061 substr (@expr1073746062 0 , dumpFile@var1979 .@expr1073746063 size (@expr1073746064 ) -@expr1073746065 4 ) +@expr1073746066 "ctu-info" ;
242: }
243:
244: static void createDumpFile ( const Settings & settings@var1980 ,
245: const std :: string & filename@var1981 ,
246: const std :: vector < std :: string > & files@var1982 ,
247: const simplecpp :: Token * rawtokens@var1983 ,
248: std :: ofstream & fdump@var1984 ,
249: std :: string & dumpFile@var1985 )
250: {
251: if (@expr1073746068 !@expr1073746069 settings@var1980 .@expr1073746070 dump@var1986 &&@expr1073746071 settings@var1980 .@expr1073746072 addons@var1987 .@expr1073746073 empty (@expr1073746074 ) ) {
252: return ; }
253: dumpFile@var1985 =@expr1073746075 getDumpFileName (@expr1073746076 settings@var1980 , filename@var1981 ) ;
254:
255: fdump@var1984 .@expr1073746077 open (@expr1073746078 dumpFile@var1985 ) ;
256: if (@expr1073746079 !@expr1073746080 fdump@var1984 .@expr1073746081 is_open (@expr1073746082 ) ) {
257: return ; }
258:
259: {
260: std ::@expr1073746083 ofstream fout@var1988 (@expr1073746084 getCtuInfoFileName (@expr1073746085 dumpFile@var1985 ) ) ;
261: }
262:
263: fdump@var1984 <<@expr1073746086 "<?xml version=\"1.0\"?>" <<@expr1073746087 std ::@expr4264 endl@expr4243 ;
264: fdump@var1984 <<@expr1073746089 "<dumps>" <<@expr1073746090 std ::@expr4264 endl@expr4243 ;
265: fdump@var1984 <<@expr1073746092 "  <platform"
266: <<@expr1073746093 " name=\"" <<@expr1073746094 settings@var1980 .@expr1073746095 platformString (@expr1073746096 ) <<@expr1073746097 '\"'
267: <<@expr1073746098 " char_bit=\"" <<@expr1073746099 settings@var1980 .@expr4276 char_bit@var1989 <<@expr1073746101 '\"'
268: <<@expr1073746102 " short_bit=\"" <<@expr1073746103 settings@var1980 .@expr1073746104 short_bit@var1990 <<@expr1073746105 '\"'
269: <<@expr1073746106 " int_bit=\"" <<@expr1073746107 settings@var1980 .@expr1073746108 int_bit@var1991 <<@expr1073746109 '\"'
270: <<@expr1073746110 " long_bit=\"" <<@expr1073746111 settings@var1980 .@expr1073746112 long_bit@var1992 <<@expr1073746113 '\"'
271: <<@expr1073746114 " long_long_bit=\"" <<@expr1073746115 settings@var1980 .@expr1073746116 long_long_bit@var1993 <<@expr1073746117 '\"'
272: <<@expr1073746118 " pointer_bit=\"" <<@expr1073746119 (@expr1073746120 settings@var1980 .@expr1073746121 sizeof_pointer@var1994 *@expr1073746122 settings@var1980 .@expr4276 char_bit@var1989 ) <<@expr1073746124 '\"'
273: <<@expr1073746125 "/>\n" ;
274: if (@expr1073746126 rawtokens@var1983 ) {
275: fdump@var1984 <<@expr1073746127 "  <rawtokens>" <<@expr1073746128 std ::@expr4264 endl@expr4243 ;
276: for (@expr1073746130 unsigned int i@var1995 =@expr1073746131 0 ; i@var1995 <@expr1073746132 files@var1982 .@expr1073746133 size (@expr1073746134 ) ; ++@expr1073746135 i@var1995 ) {
277: fdump@var1984 <<@expr1073746136 "    <file index=\"" <<@expr1073746137 i@var1995 <<@expr1073746138 "\" name=\"" <<@expr1073746139 ErrorLogger ::@expr4316 toxml (@expr1073746141 files@var1982 [@expr1073746142 i@var1995 ] ) <<@expr1073746143 "\"/>" <<@expr1073746144 std ::@expr4264 endl@expr4243 ; }
278: for (@expr1073746146 const simplecpp ::@expr1073746147 Token *@expr1073746148 tok@var1996 =@expr1073746149 rawtokens@var1983 ; tok@var1996 ; tok@var1996 =@expr1073746150 tok@var1996 .@expr1073746151 next@var1997 ) {
279: fdump@var1984 <<@expr1073746152 "    <tok "
280: <<@expr1073746153 "fileIndex=\"" <<@expr1073746154 tok@var1996 .@expr4331 location@var1998 .@expr1073746156 fileIndex@var1999 <<@expr1073746157 "\" "
281: <<@expr1073746158 "linenr=\"" <<@expr1073746159 tok@var1996 .@expr4331 location@var1998 .@expr1073746161 line@var2000 <<@expr1073746162 "\" "
282: <<@expr1073746163 "column=\"" <<@expr1073746164 tok@var1996 .@expr4331 location@var1998 .@expr1073746166 col@var2001 <<@expr1073746167 "\" "
283: <<@expr1073746168 "str=\"" <<@expr1073746169 ErrorLogger ::@expr4316 toxml (@expr1073746171 tok@var1996 .@expr1073746172 str (@expr1073746173 ) ) <<@expr1073746174 "\""
284: <<@expr1073746175 "/>" <<@expr1073746176 std ::@expr4264 endl@expr4243 ;
285: }
286: fdump@var1984 <<@expr1073746178 "  </rawtokens>" <<@expr1073746179 std ::@expr4264 endl@expr4243 ;
287: }
288: }
289:
290: static std :: string executeAddon ( const AddonInfo & addonInfo@var2002 ,
291: const std :: string & defaultPythonExe@var2003 ,
292: const std :: string & file@var2004 ,
293: std :: function < bool ( std :: string , std :: vector < std :: string > , std :: string , std :: string * ) > executeCommand@var2005 )
294: {
295: const std ::@expr4358 string redirect@var2006 =@expr1073746183 "2>&1" ;
296:
297: std ::@expr1073746184 string pythonExe@var2007 ;
298:
299: if (@expr1073746185 !@expr1073746186 addonInfo@var2002 .@expr4363 executable@var2008 .@expr4364 empty (@expr4365 ) ) {
300: pythonExe@var2007 =@expr1073746190 addonInfo@var2002 .@expr4363 executable@var2008 ; }
301: else { if (@expr1073746192 !@expr1073746193 addonInfo@var2002 .@expr4370 python@var2009 .@expr1073746195 empty (@expr1073746196 ) ) {
302: pythonExe@var2007 =@expr1073746197 cmdFileName (@expr1073746198 addonInfo@var2002 .@expr4370 python@var2009 ) ; }
303: else { if (@expr1073746200 !@expr1073746201 defaultPythonExe@var2003 .@expr1073746202 empty (@expr1073746203 ) ) {
304: pythonExe@var2007 =@expr1073746204 cmdFileName (@expr1073746205 defaultPythonExe@var2003 ) ; }
305: else {
306:
307:
308:
309: const char * py_exes@var2010 [@expr1073746206 2 ] =@expr1073746207 {@expr1073746208 "python3" , "python" } ;
310:
311: for (@expr1073746209 const char *@expr1073746210 py_exe@var2011 :@expr1073746211 py_exes@var2010 ) {
312: std ::@expr1073746212 string out@var2012 ;
313: if (@expr1073746213 executeCommand@var2005 (@expr1073746214 py_exe@var2011 , split (@expr1073746215 "--version" ) , redirect@var2006 , &@expr1073746216 out@var2012 ) &&@expr1073746217 out@var2012 .@expr1073746218 compare (@expr1073746219 0 , 7 , "Python " ) ==@expr1073746220 0 &&@expr1073746221 std ::@expr1073746222 isdigit (@expr1073746223 out@var2012 [@expr1073746224 7 ] ) ) {
314: pythonExe@var2007 =@expr1073746225 py_exe@var2011 ;
315: break ;
316: }
317: }
318: if (@expr1073746226 pythonExe@var2007 .@expr1073746227 empty (@expr1073746228 ) ) {
319: throw InternalError (@expr1073746229 nullptr , "Failed to auto detect python" ) ; }
320: } } }
321:
322: std ::@expr1073746230 string args@var2013 ;
323: if (@expr1073746231 addonInfo@var2002 .@expr4363 executable@var2008 .@expr4364 empty (@expr4365 ) ) {
324: args@var2013 =@expr1073746235 cmdFileName (@expr1073746236 addonInfo@var2002 .@expr1073746237 runScript@var2014 ) +@expr1073746238 " " +@expr1073746239 cmdFileName (@expr1073746240 addonInfo@var2002 .@expr1073746241 scriptFile@var2015 ) ; }
325: args@var2013 +=@expr1073746242 std ::@expr4419 string (@expr1073746244 args@var2013 .@expr1073746245 empty (@expr1073746246 ) ?@expr1073746247 "" :@expr1073746248 " " ) +@expr1073746249 "--cli" +@expr1073746250 addonInfo@var2002 .@expr1073746251 args@var2016 ;
326:
327: const std ::@expr4358 string fileArg@var2017 =@expr1073746253 (@expr1073746254 endsWith (@expr1073746255 file@var2004 , FILELIST@var1940 , sizeof (@expr1073746256 FILELIST@var1940 ) -@expr1073746257 1 ) ?@expr1073746258 " --file-list " :@expr1073746259 " " ) +@expr1073746260 cmdFileName (@expr1073746261 file@var2004 ) ;
328: args@var2013 +=@expr1073746262 fileArg@var2017 ;
329:
330: std ::@expr1073746263 string result@var2018 ;
331: if (@expr1073746264 !@expr1073746265 executeCommand@var2005 (@expr1073746266 pythonExe@var2007 , split (@expr1073746267 args@var2013 ) , redirect@var2006 , &@expr1073746268 result@var2018 ) ) {
332: std ::@expr1073746269 string message@var2019 (@expr1073746270 "Failed to execute addon (command: '" +@expr1073746271 pythonExe@var2007 +@expr1073746272 " " +@expr1073746273 args@var2013 +@expr1073746274 "'). Exitcode is nonzero." ) ;
333: if (@expr1073746275 result@var2018 .@expr1073746276 size (@expr1073746277 ) >@expr1073746278 2 ) {
334: message@var2019 =@expr1073746279 message@var2019 +@expr1073746280 "\n" +@expr1073746281 message@var2019 +@expr1073746282 "\nOutput:\n" +@expr1073746283 result@var2018 ;
335: message@var2019 =@expr1073746284 message@var2019 .@expr1073746285 substr (@expr1073746286 0 , message@var2019 .@expr1073746287 find_last_not_of (@expr1073746288 "\n\r" ) ) ;
336: }
337: throw InternalError (@expr1073746289 nullptr , message@var2019 ) ;
338: }
339:
340:
341: std ::@expr1073746290 istringstream istr@var2020 (@expr1073746291 result@var2018 ) ;
342: std ::@expr1073746292 string line@var2021 ;
343: while (@expr1073746293 std ::@expr1073746294 getline (@expr1073746295 istr@var2020 , line@var2021 ) ) {
344: if (@expr1073746296 line@var2021 .@expr1073746297 compare (@expr1073746298 0 , 9 , "Checking " , 0 , 9 ) !=@expr1073746299 0 &&@expr1073746300 !@expr1073746301 line@var2021 .@expr1073746302 empty (@expr1073746303 ) &&@expr1073746304 line@var2021 [@expr1073746305 0 ] !=@expr1073746306 '{' ) {
345: result@var2018 .@expr1073746307 erase (@expr1073746308 result@var2018 .@expr1073746309 find_last_not_of (@expr1073746310 '\n' ) +@expr1073746311 1 , std ::@expr4419 string ::@expr1073746313 npos@expr1073746181 ) ;
346: throw InternalError (@expr1073746314 nullptr , "Failed to execute '" +@expr1073746315 pythonExe@var2007 +@expr1073746316 " " +@expr1073746317 args@var2013 +@expr1073746318 "'. " +@expr1073746319 result@var2018 ) ;
347: }
348: }
349:
350:
351: return result@var2018 ;
352: }
353:
354: static std :: string getDefinesFlags ( const std :: string & semicolonSeparatedString@var2022 )
355: {
356: std ::@expr1073746320 string flags@var2023 ;
357: for (@expr1073746321 const std ::@expr1073746322 string &@expr1073746323 d@var2024 :@expr1073746324 split (@expr1073746325 semicolonSeparatedString@var2022 , ";" ) ) {
358: flags@var2023 +=@expr1073746326 "-D" +@expr1073746327 d@var2024 +@expr1073746328 " " ; }
359: return flags@var2023 ;
360: }
361:
362: CppCheck :: CppCheck ( ErrorLogger & errorLogger@var2025 ,
363: bool useGlobalSuppressions@var2026 ,
364: std :: function < bool ( std :: string , std :: vector < std :: string > , std :: string , std :: string * ) > executeCommand@var2027 )
365: : mErrorLogger@var982 ( errorLogger@var2025 )
366: , mExitCode@var984 ( 0 )
367: , mUseGlobalSuppressions@var985 ( useGlobalSuppressions@var2026 )
368: , mTooManyConfigs@var986 ( false )
369: , mSimplify@var987 ( true )
370: , mExecuteCommand@var990 ( executeCommand@var2027 )
371: { }
372:
373: CppCheck :: ~ CppCheck ( )
374: {
375: while (@expr1073746329 !@expr1073746330 mFileInfo@var988 .@expr1073746331 empty (@expr1073746332 ) ) {
376: delete mFileInfo@var988 .@expr1073746333 back (@expr1073746334 ) ;
377: mFileInfo@var988 .@expr1073746335 pop_back (@expr1073746336 ) ;
378: }
379: s_timerResults@var1941 .@expr1073746337 showResults (@expr1073746338 mSettings@var977 .@expr1073746339 showtime@var2345 ) ;
380: }
381:
382: const char * CppCheck :: version ( )
383: {
384: return Version@var1938 ;
385: }
386:
387: const char * CppCheck :: extraVersion ( )
388: {
389: return ExtraVersion@var1939 ;
390: }
391:
392: static bool reportClangErrors ( std :: istream & is@var2028 , std :: function < void ( const ErrorMessage & ) > reportErr@var2029 , std :: vector < ErrorMessage > * warnings@var2030 )
393: {
394: std ::@expr1073746341 string line@var2031 ;
395: while (@expr1073746342 std ::@expr1073746343 getline (@expr1073746344 is@var2028 , line@var2031 ) ) {
396: if (@expr1073746345 line@var2031 .@expr1073746346 empty (@expr1073746347 ) ||@expr1073746348 line@var2031 [@expr4525 0 ] ==@expr1073746350 ' ' ||@expr1073746351 line@var2031 [@expr4525 0 ] ==@expr1073746353 '`' ||@expr1073746354 line@var2031 [@expr4525 0 ] ==@expr1073746356 '-' ) {
397: continue ; }
398:
399: std ::@expr4533 string ::@expr1073746358 size_type pos3@var2032 ; pos3@var2032 =@expr1073746359 line@var2031 .@expr4536 find (@expr1073746361 ": error: " ) ;
400: if (@expr4538 pos3@var2032 ==@expr4539 std ::@expr4533 string ::@expr4541 npos@expr4516 ) {
401: pos3@var2032 =@expr1073746366 line@var2031 .@expr4536 find (@expr1073746368 ": fatal error:" ) ; }
402: if (@expr1073746369 warnings@var2030 &&@expr1073746370 pos3@var2032 ==@expr4539 std ::@expr4533 string ::@expr4541 npos@expr4516 ) {
403: pos3@var2032 =@expr1073746374 line@var2031 .@expr4536 find (@expr1073746376 ": warning:" ) ; }
404: if (@expr4538 pos3@var2032 ==@expr4539 std ::@expr4533 string ::@expr4541 npos@expr4516 ) {
405: continue ; }
406:
407:
408: const std ::@expr4557 string ::@expr4557 size_type pos2@var2033 =@expr1073746383 line@var2031 .@expr4560 rfind (@expr1073746385 ":" , pos3@var2032 -@expr1073746386 1 ) ;
409: const std ::@expr4557 string ::@expr4557 size_type pos1@var2034 =@expr1073746389 line@var2031 .@expr4560 rfind (@expr1073746391 ":" , pos2@var2033 -@expr1073746392 1 ) ;
410:
411: if (@expr1073746393 pos1@var2034 >=@expr1073746394 pos2@var2033 ||@expr1073746395 pos2@var2033 >=@expr1073746396 pos3@var2032 ) {
412: continue ; }
413:
414: const std ::@expr4557 string filename@var2035 =@expr1073746398 line@var2031 .@expr4575 substr (@expr1073746400 0 , pos1@var2034 ) ;
415: const std ::@expr4557 string linenr@var2036 =@expr1073746402 line@var2031 .@expr4575 substr (@expr1073746404 pos1@var2034 +@expr1073746405 1 , pos2@var2033 -@expr1073746406 pos1@var2034 -@expr1073746407 1 ) ;
416: const std ::@expr4557 string colnr@var2037 =@expr1073746409 line@var2031 .@expr4575 substr (@expr1073746411 pos2@var2033 +@expr1073746412 1 , pos3@var2032 -@expr1073746413 pos2@var2033 -@expr1073746414 1 ) ;
417: const std ::@expr4557 string msg@var2038 =@expr1073746416 line@var2031 .@expr4575 substr (@expr1073746418 line@var2031 .@expr4536 find (@expr1073746420 ":" , pos3@var2032 +@expr1073746421 1 ) +@expr1073746422 2 ) ;
418:
419: std ::@expr1073746423 list < ErrorMessage ::@expr4557 FileLocation > locationList@var2039 ;
420: ErrorMessage ::@expr1073746425 FileLocation loc@var2040 ;
421: loc@var2040 .@expr1073746426 setfile (@expr1073746427 Path ::@expr1073746428 toNativeSeparators (@expr1073746429 filename@var2035 ) ) ;
422: loc@var2040 .@expr1073746430 line@var2041 =@expr1073746431 std ::@expr4608 atoi (@expr1073746433 linenr@var2036 .@expr1073746434 c_str (@expr1073746435 ) ) ;
423: loc@var2040 .@expr1073746436 column@var2042 =@expr1073746437 std ::@expr4608 atoi (@expr1073746439 colnr@var2037 .@expr1073746440 c_str (@expr1073746441 ) ) ;
424: locationList@var2039 .@expr1073746442 push_back (@expr1073746443 loc@var2040 ) ;
425: ErrorMessage errmsg@var2043 (@expr1073746444 locationList@var2039 ,
426: loc@var2040 .@expr1073746445 getfile (@expr1073746446 ) ,
427: Severity ::@expr1073746447 error ,
428: msg@var2038 ,
429: "syntaxError" ,
430: Certainty ::@expr1073746448 normal ) ;
431:
432: if (@expr1073746449 line@var2031 .@expr1073746450 compare (@expr1073746451 pos3@var2032 , 10 , ": warning:" ) ==@expr1073746452 0 ) {
433: warnings@var2030 .@expr1073746453 push_back (@expr1073746454 errmsg@var2043 ) ;
434: continue ;
435: }
436:
437: reportErr@var2029 (@expr1073746455 errmsg@var2043 ) ;
438:
439: return true ;
440: }
441: return false ;
442: }
443:
444: unsigned int CppCheck :: check ( const std :: string & path@var2044 )
445: {
446: if (@expr1073746459 mSettings@var977 .@expr1073746460 clang@var2346 ) {
447: if (@expr1073746461 !@expr4638 mSettings@var977 .@expr4639 quiet@var2347 ) {
448: mErrorLogger@var982 .@expr4640 reportOut (@expr1073746465 std ::@expr4642 string (@expr1073746467 "Checking " ) +@expr1073746468 path@var2044 +@expr1073746469 "..." , Color ::@expr1073746470 FgGreen ) ; }
449:
450: const std ::@expr4647 string lang@var2045 =@expr1073746472 Path ::@expr4649 isCPP (@expr4650 path@var2044 ) ?@expr1073746475 "-x c++" :@expr1073746476 "-x c" ;
451: const std ::@expr4647 string analyzerInfo@var2046 =@expr1073746478 mSettings@var977 .@expr4655 buildDir@var2348 .@expr4656 empty (@expr4657 ) ?@expr1073746482 std ::@expr4642 string (@expr1073746484 ) :@expr1073746485 AnalyzerInformation ::@expr1073746486 getAnalyzerInfoFile (@expr1073746487 mSettings@var977 .@expr4655 buildDir@var2348 , path@var2044 , "" ) ;
452: const std ::@expr4647 string clangcmd@var2047 =@expr1073746490 analyzerInfo@var2046 +@expr1073746491 ".clang-cmd" ;
453: const std ::@expr4647 string clangStderr@var2048 =@expr1073746493 analyzerInfo@var2046 +@expr1073746494 ".clang-stderr" ;
454: const std ::@expr4647 string clangAst@var2049 =@expr1073746496 analyzerInfo@var2046 +@expr1073746497 ".clang-ast" ;
455: std ::@expr1073746498 string exe@var2050 ; exe@var2050 =@expr1073746499 mSettings@var977 .@expr1073746500 clangExecutable@var2349 ;
456:
|
462:
463: std ::@expr1073746501 string flags@var2051 (@expr1073746502 lang@var2045 +@expr1073746503 " " ) ;
464: if (@expr1073746504 Path ::@expr4649 isCPP (@expr4650 path@var2044 ) &&@expr1073746507 !@expr1073746508 mSettings@var977 .@expr4685 standards@var2350 .@expr4686 stdValue@var2351 .@expr1073746511 empty (@expr1073746512 ) ) {
465: flags@var2051 +=@expr1073746513 "-std=" +@expr1073746514 mSettings@var977 .@expr4685 standards@var2350 .@expr4686 stdValue@var2351 +@expr1073746517 " " ; }
466:
467: for (@expr1073746518 const std ::@expr4647 string &@expr4696 i@var2052 :@expr1073746521 mSettings@var977 .@expr1073746522 includePaths@var2352 ) {
468: flags@var2051 +=@expr1073746523 "-I" +@expr1073746524 i@var2052 +@expr1073746525 " " ; }
469:
470: flags@var2051 +=@expr1073746526 getDefinesFlags (@expr1073746527 mSettings@var977 .@expr1073746528 userDefines@var2353 ) ;
471:
472: const std ::@expr4647 string args2@var2053 =@expr1073746530 "-fsyntax-only -Xclang -ast-dump -fno-color-diagnostics " +@expr1073746531 flags@var2051 +@expr1073746532 path@var2044 ;
473: const std ::@expr4647 string redirect2@var2054 =@expr1073746534 analyzerInfo@var2046 .@expr1073746535 empty (@expr1073746536 ) ?@expr1073746537 std ::@expr4642 string (@expr1073746539 "2>&1" ) :@expr1073746540 (@expr1073746541 "2> " +@expr1073746542 clangStderr@var2048 ) ;
474: if (@expr4719 !@expr4720 mSettings@var977 .@expr4655 buildDir@var2348 .@expr4656 empty (@expr4657 ) ) {
475: std ::@expr1073746548 ofstream fout@var2055 (@expr1073746549 clangcmd@var2047 ) ;
476: fout@var2055 <<@expr1073746550 exe@var2050 <<@expr1073746551 " " <<@expr1073746552 args2@var2053 <<@expr1073746553 " " <<@expr1073746554 redirect2@var2054 <<@expr1073746555 std ::@expr4732 endl@expr4632 ;
477: } else { if (@expr1073746557 mSettings@var977 .@expr1073746558 verbose@var2354 &&@expr1073746559 !@expr4638 mSettings@var977 .@expr4639 quiet@var2347 ) {
478: mErrorLogger@var982 .@expr4640 reportOut (@expr1073746563 exe@var2050 +@expr1073746564 " " +@expr1073746565 args2@var2053 ) ;
479: } }
480:
481: std ::@expr1073746566 string output2@var2056 ;
482: if (@expr1073746567 !@expr1073746568 mExecuteCommand@var990 (@expr1073746569 exe@var2050 , split (@expr1073746570 args2@var2053 ) , redirect2@var2054 , &@expr1073746571 output2@var2056 ) ||@expr1073746572 output2@var2056 .@expr1073746573 find (@expr1073746574 "TranslationUnitDecl" ) ==@expr1073746575 std ::@expr4642 string ::@expr1073746577 npos@expr1073746457 ) {
483: std ::@expr1073746578 cerr@expr1073746458 <<@expr1073746579 "Failed to execute '" <<@expr1073746580 exe@var2050 <<@expr1073746581 " " <<@expr1073746582 args2@var2053 <<@expr1073746583 " " <<@expr1073746584 redirect2@var2054 <<@expr1073746585 "'" <<@expr1073746586 std ::@expr4732 endl@expr4632 ;
484: return 0 ;
485: }
486:
487:
488: std ::@expr1073746588 vector < ErrorMessage > compilerWarnings@var2057 ;
489: if (@expr4719 !@expr4720 mSettings@var977 .@expr4655 buildDir@var2348 .@expr4656 empty (@expr4657 ) ) {
490: std ::@expr1073746594 ifstream fin@var2058 (@expr1073746595 clangStderr@var2048 ) ;
491: auto reportError@var2059 ; reportError@var2059 =@expr1073746596 [@expr1073746597 this@expr4774 ] (@expr1073746599 const ErrorMessage &@expr4696 errorMessage@var2060 ) {
492: reportErr (@expr1073746601 errorMessage@var2060 ) ;
493: } ;
494: if (@expr1073746602 reportClangErrors (@expr1073746603 fin@var2058 , reportError@var2059 , &@expr4780 compilerWarnings@var2057 ) ) {
495: return 0 ; }
496: } else {
497: std ::@expr1073746605 istringstream istr@var2061 (@expr1073746606 output2@var2056 ) ;
498: auto reportError@var2062 ; reportError@var2062 =@expr1073746607 [@expr1073746608 this@expr4774 ] (@expr1073746609 const ErrorMessage &@expr4696 errorMessage@var2063 ) {
499: reportErr (@expr1073746611 errorMessage@var2063 ) ;
500: } ;
501: if (@expr1073746612 reportClangErrors (@expr1073746613 istr@var2061 , reportError@var2062 , &@expr4780 compilerWarnings@var2057 ) ) {
502: return 0 ; }
503: }
504:
505: if (@expr4719 !@expr4720 mSettings@var977 .@expr4655 buildDir@var2348 .@expr4656 empty (@expr4657 ) ) {
506: std ::@expr1073746620 ofstream fout@var2064 (@expr1073746621 clangAst@var2049 ) ;
507: fout@var2064 <<@expr1073746622 output2@var2056 <<@expr1073746623 std ::@expr4732 endl@expr4632 ;
508: }
509:
510: try {
511: std ::@expr1073746625 istringstream ast@var2065 (@expr1073746626 output2@var2056 ) ;
512: Tokenizer tokenizer@var2066 (@expr1073746627 &@expr4804 mSettings@var977 , this@expr4774 ) ;
513: tokenizer@var2066 .@expr4805 list@var2067 .@expr1073746630 appendFileIfNew (@expr1073746631 path@var2044 ) ;
514: clangimport ::@expr1073746632 parseClangAstDump (@expr1073746633 &@expr1073746634 tokenizer@var2066 , ast@var2065 ) ;
515: ValueFlow ::@expr1073746635 setValues (@expr1073746636 &@expr1073746637 tokenizer@var2066 .@expr4805 list@var2067 , const_cast < SymbolDatabase *@expr1073746639 > (@expr1073746640 tokenizer@var2066 .@expr1073746641 getSymbolDatabase (@expr1073746642 ) ) , this@expr4774 , &@expr4804 mSettings@var977 ) ;
516: if (@expr1073746644 mSettings@var977 .@expr1073746645 debugnormal@var2355 ) {
517: tokenizer@var2066 .@expr1073746646 printDebugOutput (@expr1073746647 1 ) ; }
518: checkNormalTokens (@expr1073746648 tokenizer@var2066 ) ;
519:
520:
521: std ::@expr1073746649 ofstream fdump@var2068 ;
522: std ::@expr1073746650 string dumpFile@var2069 ;
523: createDumpFile (@expr1073746651 mSettings@var977 , path@var2044 , tokenizer@var2066 .@expr4805 list@var2067 .@expr1073746653 getFiles (@expr1073746654 ) , nullptr , fdump@var2068 , dumpFile@var2069 ) ;
524: if (@expr1073746655 fdump@var2068 .@expr1073746656 is_open (@expr1073746657 ) ) {
525: fdump@var2068 <<@expr1073746658 "<dump cfg=\"\">" <<@expr1073746659 std ::@expr4732 endl@expr4632 ;
526: for (@expr1073746661 const ErrorMessage &@expr4696 errmsg@var2070 :@expr1073746663 compilerWarnings@var2057 ) {
527: fdump@var2068 <<@expr1073746664 "  <clang-warning file=\"" <<@expr1073746665 toxml (@expr1073746666 errmsg@var2070 .@expr4843 callStack@var2071 .@expr4844 front (@expr4845 ) .@expr1073746670 getfile (@expr1073746671 ) ) <<@expr1073746672 "\" line=\"" <<@expr1073746673 errmsg@var2070 .@expr4843 callStack@var2071 .@expr4844 front (@expr4845 ) .@expr1073746677 line@var2386 <<@expr1073746678 "\" column=\"" <<@expr1073746679 errmsg@var2070 .@expr4843 callStack@var2071 .@expr4844 front (@expr4845 ) .@expr1073746683 column@var2387 <<@expr1073746684 "\" message=\"" <<@expr1073746685 toxml (@expr1073746686 errmsg@var2070 .@expr1073746687 shortMessage (@expr1073746688 ) ) <<@expr1073746689 "\"/>\n" ; }
528: fdump@var2068 <<@expr1073746690 "  <standards>" <<@expr1073746691 std ::@expr4732 endl@expr4632 ;
529: fdump@var2068 <<@expr1073746693 "    <c version=\"" <<@expr1073746694 mSettings@var977 .@expr4685 standards@var2350 .@expr1073746696 getC (@expr1073746697 ) <<@expr1073746698 "\"/>" <<@expr1073746699 std ::@expr4732 endl@expr4632 ;
530: fdump@var2068 <<@expr1073746701 "    <cpp version=\"" <<@expr1073746702 mSettings@var977 .@expr4685 standards@var2350 .@expr1073746704 getCPP (@expr1073746705 ) <<@expr1073746706 "\"/>" <<@expr1073746707 std ::@expr4732 endl@expr4632 ;
531: fdump@var2068 <<@expr1073746709 "  </standards>" <<@expr1073746710 std ::@expr4732 endl@expr4632 ;
532: tokenizer@var2066 .@expr1073746712 dump (@expr1073746713 fdump@var2068 ) ;
533: fdump@var2068 <<@expr1073746714 "</dump>" <<@expr1073746715 std ::@expr4732 endl@expr4632 ;
534: fdump@var2068 <<@expr1073746717 "</dumps>" <<@expr1073746718 std ::@expr4732 endl@expr4632 ;
535: fdump@var2068 .@expr1073746720 close (@expr1073746721 ) ;
536: }
537:
538:
539: executeAddons (@expr1073746722 dumpFile@var2069 ) ;
540:
541: } catch (@expr1073746723 const InternalError & e@var2072 ) {
542: internalError (@expr1073746724 path@var2044 , e@var2072 .@expr1073746725 errorMessage@var2073 ) ;
543: mExitCode@var984 =@expr1073746726 1 ;
544: } catch (@expr1073746727 const std ::@expr1073746728 exception & e@var2074 ) {
545: internalError (@expr1073746729 path@var2044 , e@var2074 .@expr1073746730 what (@expr1073746731 ) ) ;
546: }
547:
548: return mExitCode@var984 ;
549: }
550:
551: std ::@expr1073746732 ifstream fin@var2075 (@expr1073746733 path@var2044 ) ;
552: return checkFile (@expr1073746734 Path ::@expr1073746735 simplifyPath (@expr1073746736 path@var2044 ) , emptyString@var1 , fin@var2075 ) ;
553: }
554:
555: unsigned int CppCheck :: check ( const std :: string & path@var2076 , const std :: string & content@var2077 )
556: {
557: std ::@expr1073746737 istringstream iss@var2078 (@expr1073746738 content@var2077 ) ;
558: return checkFile (@expr1073746739 Path ::@expr1073746740 simplifyPath (@expr1073746741 path@var2076 ) , emptyString@var1 , iss@var2078 ) ;
559: }
560:
561: unsigned int CppCheck :: check ( const ImportProject :: FileSettings & fs@var2079 )
562: {
563: CppCheck temp@var2080 (@expr1073746744 mErrorLogger@var982 , mUseGlobalSuppressions@var985 , mExecuteCommand@var990 ) ;
564: temp@var2080 .@expr4921 mSettings@var2081 =@expr1073746746 mSettings@var977 ;
565: if (@expr1073746747 !@expr1073746748 temp@var2080 .@expr4921 mSettings@var2081 .@expr4926 userDefines@var2082 .@expr1073746751 empty (@expr1073746752 ) ) {
566: temp@var2080 .@expr4921 mSettings@var2081 .@expr4926 userDefines@var2082 +=@expr1073746755 ';' ; }
567: if (@expr4932 mSettings@var977 .@expr4933 clang@var2346 ) {
568: temp@var2080 .@expr4921 mSettings@var2081 .@expr4926 userDefines@var2082 +=@expr1073746760 fs@var2079 .@expr1073746761 defines@var2083 ; }
569: else {
570: temp@var2080 .@expr4921 mSettings@var2081 .@expr4926 userDefines@var2082 +=@expr1073746764 fs@var2079 .@expr1073746765 cppcheckDefines (@expr1073746766 ) ; }
571: temp@var2080 .@expr4921 mSettings@var2081 .@expr4944 includePaths@var2084 =@expr1073746769 fs@var2079 .@expr1073746770 includePaths@var2085 ;
572: temp@var2080 .@expr4921 mSettings@var2081 .@expr1073746772 userUndefs@var2086 .@expr1073746773 insert (@expr1073746774 fs@var2079 .@expr4951 undefs@var2087 .@expr1073746776 cbegin (@expr1073746777 ) , fs@var2079 .@expr4951 undefs@var2087 .@expr1073746779 cend (@expr1073746780 ) ) ;
573: if (@expr1073746781 fs@var2079 .@expr4958 standard@var2088 .@expr1073746783 find (@expr1073746784 "++" ) !=@expr1073746785 std ::@expr1073746786 string ::@expr1073746787 npos@expr1073746742 ) {
574: temp@var2080 .@expr4921 mSettings@var2081 .@expr4965 standards@var2089 .@expr1073746790 setCPP (@expr1073746791 fs@var2079 .@expr4958 standard@var2088 ) ; }
575: else { if (@expr1073746793 !@expr1073746794 fs@var2079 .@expr4958 standard@var2088 .@expr1073746796 empty (@expr1073746797 ) ) {
576: temp@var2080 .@expr4921 mSettings@var2081 .@expr4965 standards@var2089 .@expr1073746800 setC (@expr1073746801 fs@var2079 .@expr4958 standard@var2088 ) ; } }
577: if (@expr1073746803 fs@var2079 .@expr4980 platformType@var2090 !=@expr1073746805 Settings ::@expr1073746806 Unspecified@expr1073746743 ) {
578: temp@var2080 .@expr4921 mSettings@var2081 .@expr1073746808 platform (@expr1073746809 fs@var2079 .@expr4980 platformType@var2090 ) ; }
579: if (@expr4932 mSettings@var977 .@expr4933 clang@var2346 ) {
580: temp@var2080 .@expr4921 mSettings@var2081 .@expr4944 includePaths@var2084 .@expr1073746815 insert (@expr1073746816 temp@var2080 .@expr4921 mSettings@var2081 .@expr4944 includePaths@var2084 .@expr1073746819 end (@expr1073746820 ) , fs@var2079 .@expr4997 systemIncludePaths@var2091 .@expr1073746822 cbegin (@expr1073746823 ) , fs@var2079 .@expr4997 systemIncludePaths@var2091 .@expr1073746825 cend (@expr1073746826 ) ) ;
581: return temp@var2080 .@expr1073746827 check (@expr1073746828 Path ::@expr5005 simplifyPath (@expr5006 fs@var2079 .@expr5007 filename@var2092 ) ) ;
582: }
583: std ::@expr1073746832 ifstream fin@var2093 (@expr1073746833 fs@var2079 .@expr5007 filename@var2092 ) ;
584: unsigned int returnValue@var2094 ; returnValue@var2094 =@expr1073746835 temp@var2080 .@expr1073746836 checkFile (@expr1073746837 Path ::@expr5005 simplifyPath (@expr5006 fs@var2079 .@expr5007 filename@var2092 ) , fs@var2079 .@expr1073746841 cfg@var2095 , fin@var2093 ) ;
585: mSettings@var977 .@expr1073746842 nomsg@var2356 .@expr1073746843 addSuppressions (@expr1073746844 temp@var2080 .@expr4921 mSettings@var2081 .@expr1073746846 nomsg@var2096 .@expr1073746847 getSuppressions (@expr1073746848 ) ) ;
586: return returnValue@var2094 ;
587: }
588:
589: unsigned int CppCheck :: checkFile ( const std :: string & filename@var2097 , const std :: string & cfgname@var2098 , std :: istream & fileStream@var2099 )
590: {
591: mExitCode@var984 =@expr1073746852 0 ;
592:
593:
594: if (@expr1073746853 !@expr1073746854 Path ::@expr1073746855 acceptFile (@expr1073746856 filename@var2097 ) ) {
595: mSettings@var977 .@expr5033 debugwarnings@var2357 =@expr1073746858 false ; }
596:
597: if (@expr5035 Settings ::@expr5036 terminated (@expr5037 ) ) {
598: return mExitCode@var984 ; }
599:
600: if (@expr1073746862 !@expr5039 mSettings@var977 .@expr5040 quiet@var2347 ) {
601: std ::@expr1073746865 string fixedpath@var2100 ; fixedpath@var2100 =@expr1073746866 Path ::@expr5043 simplifyPath (@expr5044 filename@var2097 ) ;
602: fixedpath@var2100 =@expr1073746869 Path ::@expr5046 toNativeSeparators (@expr1073746871 fixedpath@var2100 ) ;
603: mErrorLogger@var982 .@expr5048 reportOut (@expr1073746873 std ::@expr5050 string (@expr1073746875 "Checking " ) +@expr1073746876 fixedpath@var2100 +@expr1073746877 ' ' +@expr1073746878 cfgname@var2098 +@expr1073746879 std ::@expr5050 string (@expr1073746881 "..." ) , Color ::@expr5058 FgGreen ) ;
604:
605: if (@expr1073746883 mSettings@var977 .@expr1073746884 verbose@var2354 ) {
606: mErrorLogger@var982 .@expr5048 reportOut (@expr1073746886 "Defines:" +@expr1073746887 mSettings@var977 .@expr5064 userDefines@var2353 ) ;
607: std ::@expr1073746889 string undefs@var2101 ;
608: for (@expr1073746890 const std ::@expr5067 string &@expr5068 U@var2102 :@expr1073746893 mSettings@var977 .@expr1073746894 userUndefs@var2358 ) {
609: if (@expr1073746895 !@expr1073746896 undefs@var2101 .@expr1073746897 empty (@expr1073746898 ) ) {
610: undefs@var2101 +=@expr1073746899 ';' ; }
611: undefs@var2101 +=@expr1073746900 ' ' +@expr1073746901 U@var2102 ;
612: }
613: mErrorLogger@var982 .@expr5048 reportOut (@expr1073746903 "Undefines:" +@expr1073746904 undefs@var2101 ) ;
614: std ::@expr1073746905 string includePaths@var2103 ;
615: for (@expr1073746906 const std ::@expr5067 string &@expr5068 I@var2104 :@expr1073746909 mSettings@var977 .@expr1073746910 includePaths@var2352 ) {
616: includePaths@var2103 +=@expr1073746911 " -I" +@expr1073746912 I@var2104 ; }
617: mErrorLogger@var982 .@expr5048 reportOut (@expr1073746914 "Includes:" +@expr1073746915 includePaths@var2103 ) ;
618: mErrorLogger@var982 .@expr5048 reportOut (@expr1073746917 std ::@expr5050 string (@expr1073746919 "Platform:" ) +@expr1073746920 mSettings@var977 .@expr1073746921 platformString (@expr1073746922 ) ) ;
619: }
620: }
621:
622: if (@expr1073746923 plistFile@var400 .@expr1073746924 is_open (@expr1073746925 ) ) {
623: plistFile@var400 <<@expr1073746926 ErrorLogger ::@expr1073746927 plistFooter (@expr1073746928 ) ;
624: plistFile@var400 .@expr1073746929 close (@expr1073746930 ) ;
625: }
626:
627: CheckUnusedFunctions checkUnusedFunctions@var2105 (@expr1073746931 nullptr , nullptr , nullptr ) ;
628:
629: try {
630: Preprocessor preprocessor@var2106 (@expr1073746932 mSettings@var977 , this@expr5109 ) ;
631: std ::@expr1073746934 set < std ::@expr5067 string > configurations@var2107 ;
632:
633: simplecpp ::@expr1073746936 OutputList outputList@var2108 ;
634: std ::@expr1073746937 vector < std ::@expr5067 string > files@var2109 ;
635: simplecpp ::@expr1073746939 TokenList tokens1@var2110 (@expr1073746940 fileStream@var2099 , files@var2109 , filename@var2097 , &@expr1073746941 outputList@var2108 ) ;
636:
637:
638: for (@expr1073746942 const simplecpp ::@expr5067 Output &@expr5068 output@var2111 :@expr1073746945 outputList@var2108 ) {
639: bool err@var2112 ;
640: switch (@expr1073746946 output@var2111 .@expr1073746947 type@var2113 ) {
641: case simplecpp ::@expr5124 Output ::@expr1073746949 ERROR :@expr5126
642: case simplecpp ::@expr5124 Output ::@expr1073746952 INCLUDE_NESTED_TOO_DEEPLY :@expr5126
643: case simplecpp ::@expr5124 Output ::@expr1073746955 SYNTAX_ERROR :@expr5126
644: case simplecpp ::@expr5124 Output ::@expr1073746958 UNHANDLED_CHAR_ERROR :@expr5126
645: case simplecpp ::@expr5124 Output ::@expr1073746961 EXPLICIT_INCLUDE_NOT_FOUND :@expr5126 ;
646: err@var2112 =@expr1073746963 true ;
647: break ;
648: case simplecpp ::@expr5124 Output ::@expr1073746965 WARNING :@expr5126
649: case simplecpp ::@expr5124 Output ::@expr1073746968 MISSING_HEADER :@expr5126
650: case simplecpp ::@expr5124 Output ::@expr1073746971 PORTABILITY_BACKSLASH :@expr5126 ;
651: err@var2112 =@expr1073746973 false ;
652: break ;
653: }
654:
655: if (@expr1073746974 err@var2112 ) {
656: std ::@expr1073746975 string file@var2114 ; file@var2114 =@expr1073746976 Path ::@expr1073746977 fromNativeSeparators (@expr1073746978 output@var2111 .@expr5155 location@var2115 .@expr1073746980 file (@expr1073746981 ) ) ;
657: if (@expr1073746982 mSettings@var977 .@expr1073746983 relativePaths@var2359 ) {
658: file@var2114 =@expr1073746984 Path ::@expr1073746985 getRelativePath (@expr1073746986 file@var2114 , mSettings@var977 .@expr1073746987 basePaths@var2360 ) ; }
659:
660: const ErrorMessage ::@expr1073746988 FileLocation loc1@var2116 (@expr1073746989 file@var2114 , output@var2111 .@expr5155 location@var2115 .@expr1073746991 line@var2117 , output@var2111 .@expr5155 location@var2115 .@expr1073746993 col@var2118 ) ;
661: std ::@expr1073746994 list < ErrorMessage ::@expr5067 FileLocation > callstack@var2119 (@expr1073746996 1 , loc1@var2116 ) ;
662:
663: ErrorMessage errmsg@var2120 (@expr1073746997 callstack@var2119 ,
664: "" ,
665: Severity ::@expr5174 error ,
666: output@var2111 .@expr1073746999 msg@var2121 ,
667: "syntaxError" ,
668: Certainty ::@expr5176 normal ) ;
669: reportErr (@expr1073747001 errmsg@var2120 ) ;
670: return mExitCode@var984 ;
671: }
672: }
673:
674: if (@expr1073747002 !@expr1073747003 preprocessor@var2106 .@expr1073747004 loadFiles (@expr1073747005 tokens1@var2110 , files@var2109 ) ) {
675: return mExitCode@var984 ; }
676:
677: if (@expr1073747006 !@expr1073747007 mSettings@var977 .@expr5184 plistOutput@var2361 .@expr1073747009 empty (@expr1073747010 ) ) {
678: std ::@expr1073747011 string filename2@var2122 ;
679: if (@expr1073747012 filename@var2097 .@expr1073747013 find (@expr1073747014 '/' ) !=@expr1073747015 std ::@expr5050 string ::@expr5193 npos@expr5025 ) {
680: filename2@var2122 =@expr1073747018 filename@var2097 .@expr1073747019 substr (@expr1073747020 filename@var2097 .@expr1073747021 rfind (@expr1073747022 '/' ) +@expr1073747023 1 ) ; }
681: else {
682: filename2@var2122 =@expr1073747024 filename@var2097 ; }
683: unsigned long fileNameHash@var2123 ; fileNameHash@var2123 =@expr1073747025 std ::@expr1073747026 hash < std ::@expr5067 string > {@expr1073747028 } (@expr1073747029 filename@var2097 ) ;
684: filename2@var2122 =@expr1073747030 mSettings@var977 .@expr5184 plistOutput@var2361 +@expr1073747032 filename2@var2122 .@expr1073747033 substr (@expr1073747034 0 , filename2@var2122 .@expr1073747035 find (@expr1073747036 '.' ) ) +@expr1073747037 "_" +@expr1073747038 std ::@expr1073747039 to_string (@expr1073747040 fileNameHash@var2123 ) +@expr1073747041 ".plist" ;
685: plistFile@var400 .@expr1073747042 open (@expr1073747043 filename2@var2122 ) ;
686: plistFile@var400 <<@expr1073747044 ErrorLogger ::@expr1073747045 plistHeader (@expr1073747046 version (@expr1073747047 ) , files@var2109 ) ;
687: }
688:
689:
690: std ::@expr1073747048 ofstream fdump@var2124 ;
691: std ::@expr1073747049 string dumpFile@var2125 ;
692: createDumpFile (@expr1073747050 mSettings@var977 , filename@var2097 , files@var2109 , tokens1@var2110 .@expr1073747051 cfront (@expr1073747052 ) , fdump@var2124 , dumpFile@var2125 ) ;
693:
694:
695: preprocessor@var2106 .@expr1073747053 inlineSuppressions (@expr1073747054 tokens1@var2110 ) ;
696: if (@expr5231 (@expr1073747056 mSettings@var977 .@expr5233 dump@var2362 ||@expr5234 !@expr5235 mSettings@var977 .@expr5236 addons@var2363 .@expr5237 empty (@expr5238 ) ) &&@expr5239 fdump@var2124 .@expr5240 is_open (@expr5241 ) ) {
697: mSettings@var977 .@expr5242 nomsg@var2356 .@expr5243 dump (@expr1073747068 fdump@var2124 ) ;
698: }
699: tokens1@var2110 .@expr1073747069 removeComments (@expr1073747070 ) ;
700: preprocessor@var2106 .@expr1073747071 removeComments (@expr1073747072 ) ;
701:
702: if (@expr5249 !@expr5250 mSettings@var977 .@expr5251 buildDir@var2348 .@expr5252 empty (@expr5253 ) ) {
703:
704: std ::@expr1073747078 ostringstream toolinfo@var2126 ;
705: toolinfo@var2126 <<@expr1073747079 $"2.8" ;
706: toolinfo@var2126 <<@expr1073747080 (@expr1073747081 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr1073747084 Severity ::@expr1073747085 warning ) ?@expr1073747086 'w' :@expr1073747087 ' ' ) ;
707: toolinfo@var2126 <<@expr1073747088 (@expr1073747089 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr1073747092 Severity ::@expr1073747093 style ) ?@expr1073747094 's' :@expr1073747095 ' ' ) ;
708: toolinfo@var2126 <<@expr1073747096 (@expr1073747097 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr1073747100 Severity ::@expr1073747101 performance ) ?@expr1073747102 'p' :@expr5279 ' ' ) ;
709: toolinfo@var2126 <<@expr1073747104 (@expr1073747105 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr1073747108 Severity ::@expr1073747109 portability ) ?@expr1073747110 'p' :@expr5279 ' ' ) ;
710: toolinfo@var2126 <<@expr1073747112 (@expr1073747113 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr5292 Severity ::@expr5293 information ) ?@expr1073747118 'i' :@expr1073747119 ' ' ) ;
711: toolinfo@var2126 <<@expr1073747120 mSettings@var977 .@expr5064 userDefines@var2353 ;
712: mSettings@var977 .@expr5242 nomsg@var2356 .@expr5243 dump (@expr1073747124 toolinfo@var2126 ) ;
713:
714:
715: const unsigned int checksum@var2127 =@expr1073747125 preprocessor@var2106 .@expr1073747126 calculateChecksum (@expr1073747127 tokens1@var2110 , toolinfo@var2126 .@expr1073747128 str (@expr1073747129 ) ) ;
716: std ::@expr1073747130 list < ErrorMessage > errors@var2128 ;
717: if (@expr1073747131 !@expr1073747132 mAnalyzerInformation@var989 .@expr1073747133 analyzeFile (@expr1073747134 mSettings@var977 .@expr5251 buildDir@var2348 , filename@var2097 , cfgname@var2098 , checksum@var2127 , &@expr1073747136 errors@var2128 ) ) {
718: while (@expr1073747137 !@expr1073747138 errors@var2128 .@expr1073747139 empty (@expr1073747140 ) ) {
719: reportErr (@expr1073747141 errors@var2128 .@expr1073747142 front (@expr1073747143 ) ) ;
720: errors@var2128 .@expr1073747144 pop_front (@expr1073747145 ) ;
721: }
722: return mExitCode@var984 ;
723: }
724: }
725:
726:
727: preprocessor@var2106 .@expr1073747146 setDirectives (@expr1073747147 tokens1@var2110 ) ;
728: preprocessor@var2106 .@expr1073747148 simplifyPragmaAsm (@expr1073747149 &@expr5326 tokens1@var2110 ) ;
729:
730: preprocessor@var2106 .@expr1073747151 setPlatformInfo (@expr1073747152 &@expr5326 tokens1@var2110 ) ;
731:
732:
733: if (@expr1073747154 (@expr1073747155 mSettings@var977 .@expr1073747156 checkAllConfigurations@var2365 &&@expr1073747157 mSettings@var977 .@expr5064 userDefines@var2353 .@expr5335 empty (@expr5336 ) ) ||@expr1073747161 mSettings@var977 .@expr5338 force@var2366 ) {
734: Timer t@var2129 (@expr1073747163 "Preprocessor::getConfigs" , mSettings@var977 .@expr5340 showtime@var2345 , &@expr5341 s_timerResults@var1941 ) ;
735: configurations@var2107 =@expr1073747166 preprocessor@var2106 .@expr1073747167 getConfigs (@expr1073747168 tokens1@var2110 ) ;
736: } else {
737: configurations@var2107 .@expr1073747169 insert (@expr1073747170 mSettings@var977 .@expr5064 userDefines@var2353 ) ;
738: }
739:
740: if (@expr5348 mSettings@var977 .@expr5349 checkConfiguration@var2367 ) {
741: for (@expr1073747174 const std ::@expr5067 string &@expr5068 config@var2130 :@expr1073747177 configurations@var2107 ) {
742: (@expr1073747178 void ) preprocessor@var2106 .@expr5355 getcode (@expr1073747180 tokens1@var2110 , config@var2130 , files@var2109 , true ) ; }
743:
744: return 0 ;
745: }
746:
747:
748: for (@expr1073747181 const Settings ::@expr5067 Rule &@expr5068 rule@var2131 :@expr1073747184 mSettings@var977 .@expr1073747185 rules@var2368 ) {
749: if (@expr1073747186 rule@var2131 .@expr1073747187 tokenlist@var2132 !=@expr1073747188 "define" ) {
750: continue ; }
751:
752: std ::@expr1073747189 string code@var2133 ;
753: const std ::@expr1073747190 list < Directive > & directives@var2134 =@expr1073747191 preprocessor@var2106 .@expr1073747192 getDirectives (@expr1073747193 ) ;
754: for (@expr1073747194 const Directive &@expr5068 dir@var2135 :@expr1073747196 directives@var2134 ) {
755: if (@expr1073747197 dir@var2135 .@expr5374 str@var2136 .@expr5375 compare (@expr1073747200 0 , 8 , "#define " ) ==@expr1073747201 0 ||@expr1073747202 dir@var2135 .@expr5374 str@var2136 .@expr5375 compare (@expr1073747205 0 , 9 , "#include " ) ==@expr1073747206 0 ) {
756: code@var2133 +=@expr1073747207 "#line " +@expr1073747208 MathLib ::@expr5385 toString (@expr1073747210 dir@var2135 .@expr1073747211 linenr@var2137 ) +@expr1073747212 " \"" +@expr1073747213 dir@var2135 .@expr1073747214 file@var2138 +@expr1073747215 "\"\n" +@expr1073747216 dir@var2135 .@expr5374 str@var2136 +@expr1073747218 '\n' ; }
757: }
758: Tokenizer tokenizer2@var2139 (@expr1073747219 &@expr5396 mSettings@var977 , this@expr5109 ) ;
759: std ::@expr1073747221 istringstream istr2@var2140 (@expr1073747222 code@var2133 ) ;
760: tokenizer2@var2139 .@expr1073747223 list@var2141 .@expr1073747224 createTokens (@expr1073747225 istr2@var2140 ) ;
761: executeRules (@expr1073747226 "define" , tokenizer2@var2139 ) ;
762: break ;
763: }
764:
765: if (@expr1073747227 !@expr5404 mSettings@var977 .@expr5338 force@var2366 &&@expr1073747230 configurations@var2107 .@expr5407 size (@expr5408 ) >@expr1073747233 mSettings@var977 .@expr5410 maxConfigs@var2369 ) {
766: if (@expr1073747235 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr5292 Severity ::@expr5293 information ) ) {
767: tooManyConfigsError (@expr1073747240 Path ::@expr5046 toNativeSeparators (@expr5418 filename@var2097 ) , configurations@var2107 .@expr5407 size (@expr5408 ) ) ;
768: } else {
769: mTooManyConfigs@var986 =@expr1073747245 true ;
770: }
771: }
772:
773: std ::@expr1073747246 set < unsigned long long > checksums@var2142 ;
774: int checkCount@var2143 ; checkCount@var2143 =@expr1073747247 0 ;
775: bool hasValidConfig@var2144 ; hasValidConfig@var2144 =@expr1073747248 false ;
776: std ::@expr1073747249 list < std ::@expr5067 string > configurationError@var2145 ;
777: for (@expr1073747251 const std ::@expr5067 string &@expr5068 currCfg@var2146 :@expr1073747254 configurations@var2107 ) {
778:
779: if (@expr5035 Settings ::@expr5036 terminated (@expr5037 ) ) {
780: break ; }
781:
782:
783:
784: if (@expr1073747258 !@expr5404 mSettings@var977 .@expr5338 force@var2366 &&@expr1073747261 ++@expr1073747262 checkCount@var2143 >@expr1073747263 mSettings@var977 .@expr5410 maxConfigs@var2369 ) {
785: break ; }
786:
787: if (@expr1073747265 !@expr1073747266 mSettings@var977 .@expr5064 userDefines@var2353 .@expr5335 empty (@expr5336 ) ) {
788: mCurrentConfig@var983 =@expr1073747270 mSettings@var977 .@expr5064 userDefines@var2353 ;
789: const std ::@expr1073747272 vector < std ::@expr5067 string > v1@var2147 (@expr1073747274 split (@expr1073747275 mSettings@var977 .@expr5064 userDefines@var2353 , ";" ) ) ;
790: for (@expr1073747277 const std ::@expr5067 string &@expr5068 cfg@var2148 :@expr1073747280 split (@expr1073747281 currCfg@var2146 , ";" ) ) {
791: if (@expr1073747282 std ::@expr1073747283 find (@expr1073747284 v1@var2147 .@expr1073747285 begin (@expr1073747286 ) , v1@var2147 .@expr5463 end (@expr5464 ) , cfg@var2148 ) ==@expr1073747289 v1@var2147 .@expr5463 end (@expr5464 ) ) {
792: mCurrentConfig@var983 +=@expr1073747292 ";" +@expr1073747293 cfg@var2148 ;
793: }
794: }
795: } else {
796: mCurrentConfig@var983 =@expr1073747294 currCfg@var2146 ;
797: }
798:
799: if (@expr1073747295 mSettings@var977 .@expr1073747296 preprocessOnly@var2370 ) {
800: Timer t@var2149 (@expr1073747297 "Preprocessor::getcode" , mSettings@var977 .@expr5340 showtime@var2345 , &@expr5341 s_timerResults@var1941 ) ;
801: std ::@expr1073747300 string codeWithoutCfg@var2150 ; codeWithoutCfg@var2150 =@expr1073747301 preprocessor@var2106 .@expr5355 getcode (@expr1073747303 tokens1@var2110 , mCurrentConfig@var983 , files@var2109 , true ) ;
802: t@var2149 .@expr1073747304 stop (@expr1073747305 ) ;
803:
804: if (@expr1073747306 codeWithoutCfg@var2150 .@expr1073747307 compare (@expr1073747308 0 , 5 , "#file" ) ==@expr1073747309 0 ) {
805: codeWithoutCfg@var2150 .@expr5486 insert (@expr1073747311 0U , "//" ) ; }
806: std ::@expr5050 string ::@expr1073747313 size_type pos@var2151 ; pos@var2151 =@expr1073747314 0 ;
807: while (@expr1073747315 (@expr1073747316 pos@var2151 =@expr1073747317 codeWithoutCfg@var2150 .@expr5494 find (@expr1073747319 "\n#file" , pos@var2151 ) ) !=@expr1073747320 std ::@expr5050 string ::@expr5193 npos@expr5025 ) {
808: codeWithoutCfg@var2150 .@expr5486 insert (@expr5500 pos@var2151 +@expr5501 1U , "//" ) ; }
809: pos@var2151 =@expr1073747326 0 ;
810: while (@expr1073747327 (@expr1073747328 pos@var2151 =@expr1073747329 codeWithoutCfg@var2150 .@expr5494 find (@expr1073747331 "\n#endfile" , pos@var2151 ) ) !=@expr1073747332 std ::@expr5050 string ::@expr5193 npos@expr5025 ) {
811: codeWithoutCfg@var2150 .@expr5486 insert (@expr5500 pos@var2151 +@expr5501 1U , "//" ) ; }
812: pos@var2151 =@expr1073747338 0 ;
813: while (@expr1073747339 (@expr1073747340 pos@var2151 =@expr1073747341 codeWithoutCfg@var2150 .@expr5494 find (@expr1073747343 Preprocessor ::@expr1073747344 macroChar@var1276 , pos@var2151 ) ) !=@expr1073747345 std ::@expr5050 string ::@expr5193 npos@expr5025 ) {
814: codeWithoutCfg@var2150 [@expr1073747348 pos@var2151 ] =@expr1073747349 ' ' ; }
815: reportOut (@expr1073747350 codeWithoutCfg@var2150 ) ;
816: continue ;
817: }
818:
819: Tokenizer tokenizer@var2152 (@expr1073747351 &@expr5396 mSettings@var977 , this@expr5109 ) ;
820: tokenizer@var2152 .@expr1073747353 setPreprocessor (@expr1073747354 &@expr1073747355 preprocessor@var2106 ) ;
821: if (@expr1073747356 mSettings@var977 .@expr5340 showtime@var2345 !=@expr1073747358 SHOWTIME_MODES ::@expr1073747359 SHOWTIME_NONE ) {
822: tokenizer@var2152 .@expr1073747360 setTimerResults (@expr1073747361 &@expr5341 s_timerResults@var1941 ) ; }
823:
824: try {
825:
826: {
827: Timer timer@var2153 (@expr1073747363 "Tokenizer::createTokens" , mSettings@var977 .@expr5340 showtime@var2345 , &@expr5341 s_timerResults@var1941 ) ;
828: simplecpp ::@expr1073747366 TokenList tokensP@var2154 ; tokensP@var2154 =@expr1073747367 preprocessor@var2106 .@expr1073747368 preprocess (@expr1073747369 tokens1@var2110 , mCurrentConfig@var983 , files@var2109 , true ) ;
829: tokenizer@var2152 .@expr1073747370 createTokens (@expr1073747371 std ::@expr1073747372 move (@expr1073747373 tokensP@var2154 ) ) ;
830: }
831: hasValidConfig@var2144 =@expr1073747374 true ;
832:
833:
834: if (@expr1073747375 !@expr5039 mSettings@var977 .@expr5040 quiet@var2347 &&@expr1073747378 (@expr1073747379 !@expr1073747380 mCurrentConfig@var983 .@expr5557 empty (@expr5558 ) ||@expr1073747383 checkCount@var2143 >@expr1073747384 1 ) ) {
835: std ::@expr1073747385 string fixedpath@var2155 ; fixedpath@var2155 =@expr1073747386 Path ::@expr5043 simplifyPath (@expr5044 filename@var2097 ) ;
836: fixedpath@var2155 =@expr1073747389 Path ::@expr5046 toNativeSeparators (@expr1073747391 fixedpath@var2155 ) ;
837: mErrorLogger@var982 .@expr5048 reportOut (@expr1073747393 "Checking " +@expr1073747394 fixedpath@var2155 +@expr1073747395 ": " +@expr1073747396 mCurrentConfig@var983 +@expr1073747397 "..." , Color ::@expr5058 FgGreen ) ;
838: }
839:
840: if (@expr1073747399 !@expr1073747400 tokenizer@var2152 .@expr1073747401 tokens (@expr1073747402 ) ) {
841: continue ; }
842:
843:
844: if (@expr5348 mSettings@var977 .@expr5349 checkConfiguration@var2367 ) {
845: continue ; }
846:
847:
848: checkRawTokens (@expr1073747405 tokenizer@var2152 ) ;
849:
850:
851: Timer timer2@var2156 (@expr1073747406 "Tokenizer::simplifyTokens1" , mSettings@var977 .@expr5340 showtime@var2345 , &@expr5341 s_timerResults@var1941 ) ;
852: bool result@var2157 ; result@var2157 =@expr1073747409 tokenizer@var2152 .@expr1073747410 simplifyTokens1 (@expr1073747411 mCurrentConfig@var983 ) ;
853: timer2@var2156 .@expr1073747412 stop (@expr1073747413 ) ;
854: if (@expr5590 !@expr5591 result@var2157 ) {
855: continue ; }
856:
857:
858: if (@expr5231 (@expr1073747417 mSettings@var977 .@expr5233 dump@var2362 ||@expr5234 !@expr5235 mSettings@var977 .@expr5236 addons@var2363 .@expr5237 empty (@expr5238 ) ) &&@expr5239 fdump@var2124 .@expr5240 is_open (@expr5241 ) ) {
859: fdump@var2124 <<@expr1073747427 "<dump cfg=\"" <<@expr1073747428 ErrorLogger ::@expr1073747429 toxml (@expr1073747430 mCurrentConfig@var983 ) <<@expr1073747431 "\">" <<@expr1073747432 std ::@expr5609 endl@expr5026 ;
860: fdump@var2124 <<@expr1073747434 "  <standards>" <<@expr1073747435 std ::@expr5609 endl@expr5026 ;
861: fdump@var2124 <<@expr1073747437 "    <c version=\"" <<@expr1073747438 mSettings@var977 .@expr5615 standards@var2350 .@expr1073747440 getC (@expr1073747441 ) <<@expr1073747442 "\"/>" <<@expr1073747443 std ::@expr5609 endl@expr5026 ;
862: fdump@var2124 <<@expr1073747445 "    <cpp version=\"" <<@expr1073747446 mSettings@var977 .@expr5615 standards@var2350 .@expr1073747448 getCPP (@expr1073747449 ) <<@expr1073747450 "\"/>" <<@expr1073747451 std ::@expr5609 endl@expr5026 ;
863: fdump@var2124 <<@expr1073747453 "  </standards>" <<@expr1073747454 std ::@expr5609 endl@expr5026 ;
864: preprocessor@var2106 .@expr1073747456 dump (@expr1073747457 fdump@var2124 ) ;
865: tokenizer@var2152 .@expr1073747458 dump (@expr1073747459 fdump@var2124 ) ;
866: fdump@var2124 <<@expr1073747460 "</dump>" <<@expr1073747461 std ::@expr5609 endl@expr5026 ;
867: }
868:
869:
870: mSettings@var977 .@expr5242 nomsg@var2356 .@expr1073747464 markUnmatchedInlineSuppressionsAsChecked (@expr1073747465 tokenizer@var2152 ) ;
871:
872:
873: if (@expr1073747466 mSettings@var977 .@expr5338 force@var2366 ||@expr1073747468 mSettings@var977 .@expr5410 maxConfigs@var2369 >@expr1073747470 1 ) {
874: const unsigned long long checksum@var2158 =@expr1073747471 tokenizer@var2152 .@expr5648 list@var2159 .@expr1073747473 calculateChecksum (@expr1073747474 ) ;
875: if (@expr1073747475 checksums@var2142 .@expr1073747476 find (@expr1073747477 checksum@var2158 ) !=@expr1073747478 checksums@var2142 .@expr1073747479 end (@expr1073747480 ) ) {
876: if (@expr1073747481 mSettings@var977 .@expr5033 debugwarnings@var2357 ) {
877: purgedConfigurationMessage (@expr1073747483 filename@var2097 , mCurrentConfig@var983 ) ; }
878: continue ;
879: }
880: checksums@var2142 .@expr1073747484 insert (@expr1073747485 checksum@var2158 ) ;
881: }
882:
883:
884: checkNormalTokens (@expr1073747486 tokenizer@var2152 ) ;
885:
886:
887: if (@expr5249 !@expr5250 mSettings@var977 .@expr5251 buildDir@var2348 .@expr5252 empty (@expr5253 ) ) {
888: checkUnusedFunctions@var2105 .@expr1073747492 parseTokens (@expr1073747493 tokenizer@var2152 , filename@var2097 .@expr1073747494 c_str (@expr1073747495 ) , &@expr5396 mSettings@var977 ) ; }
889:
890:
891: if (@expr1073747497 mSimplify@var987 &&@expr1073747498 hasRule (@expr1073747499 "simple" ) ) {
892: std ::@expr1073747500 cout@expr1073746851 <<@expr1073747501 "Handling of \"simple\" rules is deprecated and will be removed in Cppcheck 2.5." <<@expr1073747502 std ::@expr5609 endl@expr5026 ;
893:
894:
895: Timer timer3@var2160 (@expr1073747504 "Tokenizer::simplifyTokenList2" , mSettings@var977 .@expr5340 showtime@var2345 , &@expr5341 s_timerResults@var1941 ) ;
896: result@var2157 =@expr1073747507 tokenizer@var2152 .@expr1073747508 simplifyTokenList2 (@expr1073747509 ) ;
897: timer3@var2160 .@expr1073747510 stop (@expr1073747511 ) ;
898: if (@expr5590 !@expr5591 result@var2157 ) {
899: continue ; }
900:
901: if (@expr1073747514 !@expr1073747515 Settings ::@expr5036 terminated (@expr5037 ) ) {
902: executeRules (@expr1073747518 "simple" , tokenizer@var2152 ) ; }
903: }
904:
905: } catch (@expr1073747519 const simplecpp ::@expr5124 Output & o@var2161 ) {
906:
907: configurationError@var2145 .@expr1073747521 push_back (@expr1073747522 (@expr1073747523 mCurrentConfig@var983 .@expr5557 empty (@expr5558 ) ?@expr1073747526 "\'\'" :@expr1073747527 mCurrentConfig@var983 ) +@expr1073747528 " : [" +@expr1073747529 o@var2161 .@expr5706 location@var2162 .@expr1073747531 file (@expr1073747532 ) +@expr1073747533 ':' +@expr1073747534 MathLib ::@expr5385 toString (@expr1073747536 o@var2161 .@expr5706 location@var2162 .@expr1073747538 line@var2163 ) +@expr1073747539 "] " +@expr1073747540 o@var2161 .@expr1073747541 msg@var2164 ) ;
908: --@expr1073747542 checkCount@var2143 ;
909: continue ;
910:
911: } catch (@expr1073747543 const InternalError & e@var2165 ) {
912: std ::@expr1073747544 list < ErrorMessage ::@expr5067 FileLocation > locationList@var2166 ;
913: if (@expr1073747546 e@var2165 .@expr5723 token@var2167 ) {
914: ErrorMessage ::@expr1073747548 FileLocation loc@var2168 (@expr1073747549 e@var2165 .@expr5723 token@var2167 , &@expr1073747551 tokenizer@var2152 .@expr5648 list@var2159 ) ;
915: locationList@var2166 .@expr5729 push_back (@expr1073747554 loc@var2168 ) ;
916: } else {
917: ErrorMessage ::@expr1073747555 FileLocation loc@var2169 (@expr1073747556 tokenizer@var2152 .@expr5648 list@var2159 .@expr5734 getSourceFilePath (@expr5735 ) , 0 , 0 ) ;
918: ErrorMessage ::@expr1073747560 FileLocation loc2@var2170 (@expr1073747561 filename@var2097 , 0 , 0 ) ;
919: locationList@var2166 .@expr5729 push_back (@expr1073747563 loc2@var2170 ) ;
920: if (@expr1073747564 filename@var2097 !=@expr1073747565 tokenizer@var2152 .@expr5648 list@var2159 .@expr5734 getSourceFilePath (@expr5735 ) ) {
921: locationList@var2166 .@expr5729 push_back (@expr1073747570 loc@var2169 ) ; }
922: }
923: ErrorMessage errmsg@var2171 (@expr1073747571 locationList@var2166 ,
924: tokenizer@var2152 .@expr5648 list@var2159 .@expr5734 getSourceFilePath (@expr5735 ) ,
925: Severity ::@expr5174 error ,
926: e@var2165 .@expr1073747576 errorMessage@var2172 ,
927: e@var2165 .@expr1073747577 id@var2173 ,
928: Certainty ::@expr5176 normal ) ;
929:
930: if (@expr1073747579 errmsg@var2171 .@expr5756 severity@var2174 ==@expr1073747581 Severity ::@expr5174 error ||@expr1073747583 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr1073747586 errmsg@var2171 .@expr5756 severity@var2174 ) ) {
931: reportErr (@expr1073747588 errmsg@var2171 ) ; }
932: }
933: }
934:
935: if (@expr1073747589 !@expr1073747590 hasValidConfig@var2144 &&@expr1073747591 configurations@var2107 .@expr5407 size (@expr5408 ) >@expr1073747594 1 &&@expr1073747595 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr5292 Severity ::@expr5293 information ) ) {
936: std ::@expr1073747600 string msg@var2175 ;
937: msg@var2175 =@expr1073747601 "This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." ;
938: msg@var2175 +=@expr1073747602 "\nThis file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:" ;
939: for (@expr1073747603 const std ::@expr5067 string &@expr5068 s@var2176 :@expr1073747606 configurationError@var2145 ) {
940: msg@var2175 +=@expr1073747607 '\n' +@expr1073747608 s@var2176 ; }
941:
942: std ::@expr1073747609 list < ErrorMessage ::@expr5067 FileLocation > locationList@var2177 ;
943: ErrorMessage ::@expr1073747611 FileLocation loc@var2178 ;
944: loc@var2178 .@expr1073747612 setfile (@expr1073747613 Path ::@expr5046 toNativeSeparators (@expr5418 filename@var2097 ) ) ;
945: locationList@var2177 .@expr1073747616 push_back (@expr1073747617 loc@var2178 ) ;
946: ErrorMessage errmsg@var2179 (@expr1073747618 locationList@var2177 ,
947: loc@var2178 .@expr1073747619 getfile (@expr1073747620 ) ,
948: Severity ::@expr5293 information ,
949: msg@var2175 ,
950: "noValidConfiguration" ,
951: Certainty ::@expr5176 normal ) ;
952: reportErr (@expr1073747623 errmsg@var2179 ) ;
953: }
954:
955:
956: if (@expr1073747624 fdump@var2124 .@expr5240 is_open (@expr5241 ) ) {
957: fdump@var2124 <<@expr1073747627 "</dumps>" <<@expr1073747628 std ::@expr5609 endl@expr5026 ;
958: fdump@var2124 .@expr1073747630 close (@expr1073747631 ) ;
959: }
960:
961: executeAddons (@expr1073747632 dumpFile@var2125 ) ;
962:
963: } catch (@expr1073747633 const std ::@expr1073747634 runtime_error & e@var2180 ) {
964: internalError (@expr1073747635 filename@var2097 , e@var2180 .@expr1073747636 what (@expr1073747637 ) ) ;
965: } catch (@expr1073747638 const std ::@expr1073747639 bad_alloc & e@var2181 ) {
966: internalError (@expr1073747640 filename@var2097 , e@var2181 .@expr1073747641 what (@expr1073747642 ) ) ;
967: } catch (@expr1073747643 const InternalError & e@var2182 ) {
968: internalError (@expr1073747644 filename@var2097 , e@var2182 .@expr1073747645 errorMessage@var2183 ) ;
969: mExitCode@var984 =@expr1073747646 1 ;
970: }
971:
972: mAnalyzerInformation@var989 .@expr1073747647 setFileInfo (@expr1073747648 "CheckUnusedFunctions" , checkUnusedFunctions@var2105 .@expr1073747649 analyzerInfo (@expr1073747650 ) ) ;
973: mAnalyzerInformation@var989 .@expr1073747651 close (@expr1073747652 ) ;
974:
975:
976:
977: if (@expr1073747653 !@expr1073747654 mSettings@var977 .@expr1073747655 jointSuppressionReport@var2371 &&@expr1073747656 (@expr1073747657 mSettings@var977 .@expr5258 severity@var2364 .@expr5259 isEnabled (@expr5292 Severity ::@expr5293 information ) ||@expr1073747662 mSettings@var977 .@expr5349 checkConfiguration@var2367 ) ) {
978: reportUnmatchedSuppressions (@expr1073747664 mSettings@var977 .@expr5242 nomsg@var2356 .@expr1073747666 getUnmatchedLocalSuppressions (@expr1073747667 filename@var2097 , isUnusedFunctionCheckEnabled (@expr1073747668 ) ) ) ;
979: }
980:
981: mErrorList@var976 .@expr1073747669 clear (@expr1073747670 ) ;
982:
983: return mExitCode@var984 ;
984: }
985:
986: void CppCheck :: internalError ( const std :: string & filename@var2184 , const std :: string & msg@var2185 )
987: {
988: const std ::@expr5847 string fixedpath@var2186 =@expr1073747672 Path ::@expr1073747673 toNativeSeparators (@expr1073747674 filename@var2184 ) ;
989: const std ::@expr1073747675 string fullmsg@var2187 (@expr1073747676 "Bailing out from checking " +@expr1073747677 fixedpath@var2186 +@expr1073747678 " since there was an internal error: " +@expr1073747679 msg@var2185 ) ;
990:
991: if (@expr1073747680 mSettings@var977 .@expr1073747681 severity@var2364 .@expr1073747682 isEnabled (@expr1073747683 Severity ::@expr5860 information ) ) {
992: const ErrorMessage ::@expr1073747685 FileLocation loc1@var2188 (@expr1073747686 filename@var2184 , 0 , 0 ) ;
993: std ::@expr1073747687 list < ErrorMessage ::@expr5847 FileLocation > callstack@var2189 (@expr1073747689 1 , loc1@var2188 ) ;
994:
995: ErrorMessage errmsg@var2190 (@expr1073747690 callstack@var2189 ,
996: emptyString@var1 ,
997: Severity ::@expr5860 information ,
998: fullmsg@var2187 ,
999: "internalError" ,
1000: Certainty ::@expr1073747692 normal ) ;
1001:
1002: mErrorLogger@var982 .@expr1073747693 reportErr (@expr1073747694 errmsg@var2190 ) ;
1003: } else {
1004:
1005: mErrorLogger@var982 .@expr1073747695 reportOut (@expr1073747696 fullmsg@var2187 ) ;
1006: }
1007: }
1008:
|
1011:
1012: void CppCheck :: checkRawTokens ( const Tokenizer & tokenizer@var2191 )
1013: {
1014:
1015: executeRules (@expr1073747697 "raw" , tokenizer@var2191 ) ;
1016: }
1017:
|
1021:
1022: void CppCheck :: checkNormalTokens ( const Tokenizer & tokenizer@var2192 )
1023: {
1024:
1025: for (@expr1073747698 Check *@expr5875 check@var2193 :@expr1073747700 Check ::@expr5877 instances (@expr5878 ) ) {
1026: if (@expr1073747703 Settings ::@expr1073747704 terminated (@expr1073747705 ) ) {
1027: return ; }
1028:
1029: if (@expr1073747706 Tokenizer ::@expr1073747707 isMaxTime (@expr1073747708 ) ) {
1030: return ; }
1031:
1032: Timer timerRunChecks@var2194 (@expr1073747709 check@var2193 .@expr1073747710 name (@expr1073747711 ) +@expr1073747712 "::runChecks" , mSettings@var222 .@expr1073747713 showtime@var2344 , &@expr1073747714 s_timerResults@var1941 ) ;
1033: check@var2193 .@expr1073747715 runChecks (@expr1073747716 &@expr5893 tokenizer@var2192 , &@expr5894 mSettings@var222 , this@expr1073747719 ) ;
1034: }
1035:
1036: if (@expr1073747720 mSettings@var977 .@expr1073747721 clang@var2346 ) {
1037:
1038: return ; }
1039:
1040:
1041:
1042: CTU ::@expr1073747722 FileInfo * fi1@var2195 ; fi1@var2195 =@expr1073747723 CTU ::@expr1073747724 getFileInfo (@expr1073747725 &@expr5893 tokenizer@var2192 ) ;
1043: if (@expr1073747727 fi1@var2195 ) {
1044: mFileInfo@var988 .@expr5904 push_back (@expr1073747729 fi1@var2195 ) ;
1045: mAnalyzerInformation@var989 .@expr5906 setFileInfo (@expr1073747731 "ctu" , fi1@var2195 .@expr1073747732 toString (@expr1073747733 ) ) ;
1046: }
1047:
1048: for (@expr1073747734 const Check *@expr5875 check@var2196 :@expr1073747736 Check ::@expr5877 instances (@expr5878 ) ) {
1049: Check ::@expr1073747739 FileInfo * fi@var2197 ; fi@var2197 =@expr1073747740 check@var2196 .@expr1073747741 getFileInfo (@expr1073747742 &@expr5893 tokenizer@var2192 , &@expr5894 mSettings@var222 ) ;
1050: if (@expr1073747745 fi@var2197 !=@expr1073747746 nullptr ) {
1051: mFileInfo@var988 .@expr5904 push_back (@expr1073747748 fi@var2197 ) ;
1052: mAnalyzerInformation@var989 .@expr5906 setFileInfo (@expr1073747750 check@var2196 .@expr1073747751 name (@expr1073747752 ) , fi@var2197 .@expr1073747753 toString (@expr1073747754 ) ) ;
1053: }
1054: }
1055:
1056: executeRules (@expr1073747755 "normal" , tokenizer@var2192 ) ;
1057: }
1058:
1059:
1060:
1061: bool CppCheck :: hasRule ( const std :: string & tokenlist@var2198 ) const
1062: {
1063:
|
1068:
1069: (@expr1073747756 void ) tokenlist@var2198 ;
1070:
1071: return false ;
1072: }
1073:
|
1208:
1209: void CppCheck :: executeRules ( const std :: string & tokenlist@var2199 , const Tokenizer & tokenizer@var2200 )
1210: {
1211: (@expr1073747757 void ) tokenlist@var2199 ;
1212: (@expr1073747758 void ) tokenizer@var2200 ;
1213:
|
1337:
1338: }
1339:
1340: void CppCheck :: executeAddons ( const std :: string & dumpFile@var2201 )
1341: {
1342: if (@expr1073747759 !@expr1073747760 dumpFile@var2201 .@expr1073747761 empty (@expr1073747762 ) ) {
1343: std ::@expr5939 vector < std ::@expr5939 string > f@var2202 {@expr1073747765 dumpFile@var2201 } ;
1344: executeAddons (@expr1073747766 f@var2202 ) ;
1345: if (@expr1073747767 !@expr1073747768 mSettings@var977 .@expr1073747769 dump@var2362 &&@expr1073747770 mSettings@var977 .@expr1073747771 buildDir@var2348 .@expr1073747772 empty (@expr1073747773 ) ) {
1346: std ::@expr1073747774 remove (@expr1073747775 dumpFile@var2201 .@expr1073747776 c_str (@expr1073747777 ) ) ; }
1347: }
1348: }
1349:
1350: void CppCheck :: executeAddons ( const std :: vector < std :: string > & files@var2203 )
1351: {
1352: if (@expr1073747779 mSettings@var977 .@expr5956 addons@var2363 .@expr1073747781 empty (@expr1073747782 ) ||@expr1073747783 files@var2203 .@expr1073747784 empty (@expr1073747785 ) ) {
1353: return ; }
1354:
1355: std ::@expr1073747786 string fileList@var2204 ;
1356:
1357: if (@expr1073747787 files@var2203 .@expr5964 size (@expr5965 ) >=@expr1073747790 2 ||@expr1073747791 endsWith (@expr1073747792 files@var2203 [@expr5969 0 ] , ".ctu-info" ) ) {
1358: fileList@var2204 =@expr1073747794 Path ::@expr1073747795 getPathFromFilename (@expr1073747796 files@var2203 [@expr5969 0 ] ) +@expr1073747798 FILELIST@var1940 ;
1359: std ::@expr1073747799 ofstream fout@var2205 (@expr1073747800 fileList@var2204 ) ;
1360: for (@expr1073747801 const std ::@expr5978 string &@expr5979 f@var2206 :@expr1073747804 files@var2203 ) {
1361: fout@var2205 <<@expr1073747805 f@var2206 <<@expr1073747806 std ::@expr1073747807 endl@expr1073747778 ; }
1362: }
1363:
1364: for (@expr1073747808 const std ::@expr5978 string &@expr5979 addon@var2207 :@expr1073747811 mSettings@var977 .@expr5956 addons@var2363 ) {
1365: struct AddonInfo addonInfo@var2208 ;
1366: const std ::@expr5978 string &@expr5979 failedToGetAddonInfo@var2209 =@expr1073747815 addonInfo@var2208 .@expr1073747816 getAddonInfo (@expr1073747817 addon@var2207 , mSettings@var977 .@expr1073747818 exename@var2372 ) ;
1367: if (@expr1073747819 !@expr1073747820 failedToGetAddonInfo@var2209 .@expr1073747821 empty (@expr1073747822 ) ) {
1368: reportOut (@expr1073747823 failedToGetAddonInfo@var2209 , Color ::@expr1073747824 FgRed ) ;
1369: mExitCode@var984 =@expr1073747825 1 ;
1370: continue ;
1371: }
1372: if (@expr1073747826 addonInfo@var2208 .@expr1073747827 name@var2210 !=@expr1073747828 "misra" &&@expr1073747829 !@expr1073747830 addonInfo@var2208 .@expr1073747831 ctu@var2211 &&@expr1073747832 endsWith (@expr1073747833 files@var2203 .@expr1073747834 back (@expr1073747835 ) , ".ctu-info" ) ) {
1373: continue ; }
1374:
1375: const std ::@expr5978 string results@var2212 =@expr1073747837
1376: executeAddon (@expr1073747838 addonInfo@var2208 , mSettings@var977 .@expr1073747839 addonPython@var2373 , fileList@var2204 .@expr6016 empty (@expr6017 ) ?@expr1073747842 files@var2203 [@expr5969 0 ] :@expr1073747844 fileList@var2204 , mExecuteCommand@var990 ) ;
1377: std ::@expr1073747845 istringstream istr@var2213 (@expr1073747846 results@var2212 ) ;
1378: std ::@expr1073747847 string line@var2214 ;
1379:
1380: while (@expr1073747848 std ::@expr1073747849 getline (@expr1073747850 istr@var2213 , line@var2214 ) ) {
1381: if (@expr1073747851 line@var2214 .@expr1073747852 compare (@expr1073747853 0 , 1 , "{" ) !=@expr1073747854 0 ) {
1382: continue ; }
1383:
1384: picojson ::@expr1073747855 value res@var2215 ;
1385: std ::@expr1073747856 istringstream istr2@var2216 (@expr1073747857 line@var2214 ) ;
1386: istr2@var2216 >>@expr1073747858 res@var2215 ;
1387: if (@expr1073747859 !@expr1073747860 res@var2215 .@expr1073747861 is < picojson ::@expr5978 object > (@expr1073747863 ) ) {
1388: continue ; }
1389:
1390: picojson ::@expr1073747864 object obj@var2217 ; obj@var2217 =@expr1073747865 res@var2215 .@expr1073747866 get < picojson ::@expr5978 object > (@expr1073747868 ) ;
1391:
1392: ErrorMessage errmsg@var2218 ;
1393:
1394: if (@expr1073747869 obj@var2217 .@expr6046 count (@expr1073747871 "file" ) >@expr1073747872 0 ) {
1395: const std ::@expr5978 string fileName@var2219 =@expr1073747874 obj@var2217 [@expr1073747875 "file" ] .@expr1073747876 get < std ::@expr5978 string > (@expr1073747878 ) ;
1396: const int64_t lineNumber@var2220 =@expr1073747879 obj@var2217 [@expr1073747880 "linenr" ] .@expr1073747881 get < int64_t > (@expr1073747882 ) ;
1397: const int64_t column@var2221 =@expr1073747883 obj@var2217 [@expr1073747884 "column" ] .@expr1073747885 get < int64_t > (@expr1073747886 ) ;
1398: errmsg@var2218 .@expr6063 callStack@var2222 .@expr6064 emplace_back (@expr1073747889 ErrorMessage ::@expr6066 FileLocation (@expr1073747891 fileName@var2219 , lineNumber@var2220 , column@var2221 ) ) ;
1399: } else { if (@expr1073747892 obj@var2217 .@expr6046 count (@expr1073747894 "loc" ) >@expr1073747895 0 ) {
1400: for (@expr1073747896 const picojson ::@expr5978 value &@expr5979 locvalue@var2223 :@expr1073747899 obj@var2217 [@expr1073747900 "loc" ] .@expr1073747901 get < picojson ::@expr5978 array > (@expr1073747903 ) ) {
1401: picojson ::@expr1073747904 object loc@var2224 ; loc@var2224 =@expr1073747905 locvalue@var2223 .@expr1073747906 get < picojson ::@expr5978 object > (@expr1073747908 ) ;
1402: const std ::@expr5978 string fileName@var2225 =@expr1073747910 loc@var2224 [@expr1073747911 "file" ] .@expr1073747912 get < std ::@expr5978 string > (@expr1073747914 ) ;
1403: const int64_t lineNumber@var2226 =@expr1073747915 loc@var2224 [@expr1073747916 "linenr" ] .@expr1073747917 get < int64_t > (@expr1073747918 ) ;
1404: const int64_t column@var2227 =@expr1073747919 loc@var2224 [@expr1073747920 "column" ] .@expr1073747921 get < int64_t > (@expr1073747922 ) ;
1405: const std ::@expr5978 string info@var2228 =@expr1073747924 loc@var2224 [@expr1073747925 "info" ] .@expr1073747926 get < std ::@expr5978 string > (@expr1073747928 ) ;
1406: errmsg@var2218 .@expr6063 callStack@var2222 .@expr6064 emplace_back (@expr1073747931 ErrorMessage ::@expr6066 FileLocation (@expr1073747933 fileName@var2225 , info@var2228 , lineNumber@var2226 , column@var2227 ) ) ;
1407: }
1408: } }
1409:
1410: errmsg@var2218 .@expr1073747934 id@var2229 =@expr1073747935 obj@var2217 [@expr1073747936 "addon" ] .@expr1073747937 get < std ::@expr5978 string > (@expr1073747939 ) +@expr1073747940 "-" +@expr1073747941 obj@var2217 [@expr1073747942 "errorId" ] .@expr1073747943 get < std ::@expr5978 string > (@expr1073747945 ) ;
1411: const std ::@expr5978 string text@var2230 =@expr1073747947 obj@var2217 [@expr1073747948 "message" ] .@expr1073747949 get < std ::@expr5978 string > (@expr1073747951 ) ;
1412: errmsg@var2218 .@expr1073747952 setmsg (@expr1073747953 text@var2230 ) ;
1413: const std ::@expr5978 string severity@var2231 =@expr1073747955 obj@var2217 [@expr1073747956 "severity" ] .@expr1073747957 get < std ::@expr5978 string > (@expr1073747959 ) ;
1414: errmsg@var2218 .@expr6136 severity@var2232 =@expr1073747961 Severity ::@expr1073747962 fromString (@expr1073747963 severity@var2231 ) ;
1415: if (@expr1073747964 errmsg@var2218 .@expr6136 severity@var2232 ==@expr1073747966 Severity ::@expr1073747967 SeverityType ::@expr1073747968 none ) {
1416: continue ; }
1417: errmsg@var2218 .@expr1073747969 file0@var2233 =@expr1073747970 (@expr1073747971 files@var2203 .@expr5964 size (@expr5965 ) ==@expr1073747974 1 ) ?@expr1073747975 files@var2203 [@expr5969 0 ] :@expr1073747977 "" ;
1418:
1419: reportErr (@expr1073747978 errmsg@var2218 ) ;
1420: }
1421: }
1422:
1423: if (@expr1073747979 !@expr1073747980 fileList@var2204 .@expr6016 empty (@expr6017 ) ) {
1424: std ::@expr1073747983 remove (@expr1073747984 fileList@var2204 .@expr1073747985 c_str (@expr1073747986 ) ) ; }
1425: }
1426:
1427: void CppCheck :: executeAddonsWholeProgram ( const std :: map < std :: string , unsigned long > & files@var2234 )
1428: {
1429: if (@expr1073747987 mSettings@var977 .@expr1073747988 addons@var2363 .@expr1073747989 empty (@expr1073747990 ) ) {
1430: return ; }
1431:
1432: std ::@expr1073747991 vector < std ::@expr6168 string > ctuInfoFiles@var2235 ;
1433: for (@expr1073747993 const auto &@expr6170 f@var2236 :@expr1073747995 files@var2234 ) {
1434: const std ::@expr6168 string &@expr6170 dumpFileName@var2237 =@expr1073747998 getDumpFileName (@expr1073747999 mSettings@var977 , f@var2236 .@expr1073748000 first@var2238 ) ;
1435: ctuInfoFiles@var2235 .@expr1073748001 push_back (@expr1073748002 getCtuInfoFileName (@expr1073748003 dumpFileName@var2237 ) ) ;
1436: }
1437:
1438: executeAddons (@expr1073748004 ctuInfoFiles@var2235 ) ;
1439:
1440: for (@expr1073748005 const std ::@expr6168 string &@expr6170 f@var2239 :@expr1073748008 ctuInfoFiles@var2235 ) {
1441: std ::@expr1073748009 remove (@expr1073748010 f@var2239 .@expr1073748011 c_str (@expr1073748012 ) ) ;
1442: }
1443: }
1444:
1445: Settings & CppCheck :: settings ( )
1446: {
1447: return mSettings@var977 ;
1448: }
1449:
1450: void CppCheck :: tooManyConfigsError ( const std :: string & file@var2240 , const int numberOfConfigurations@var2241 )
1451: {
1452: if (@expr1073748013 !@expr1073748014 mSettings@var977 .@expr6191 severity@var2364 .@expr6192 isEnabled (@expr6193 Severity ::@expr6194 information ) &&@expr1073748019 !@expr1073748020 mTooManyConfigs@var986 ) {
1453: return ; }
1454:
1455: mTooManyConfigs@var986 =@expr1073748021 false ;
1456:
1457: if (@expr1073748022 mSettings@var977 .@expr6191 severity@var2364 .@expr6192 isEnabled (@expr6193 Severity ::@expr6194 information ) &&@expr1073748027 file@var2240 .@expr6204 empty (@expr6205 ) ) {
1458: return ; }
1459:
1460: std ::@expr1073748030 list < ErrorMessage ::@expr1073748031 FileLocation > loclist@var2242 ;
1461: if (@expr1073748032 !@expr1073748033 file@var2240 .@expr6204 empty (@expr6205 ) ) {
1462: ErrorMessage ::@expr1073748036 FileLocation location@var2243 ;
1463: location@var2243 .@expr1073748037 setfile (@expr1073748038 file@var2240 ) ;
1464: loclist@var2242 .@expr1073748039 push_back (@expr1073748040 location@var2243 ) ;
1465: }
1466:
1467: std ::@expr1073748041 ostringstream msg@var2244 ;
1468: msg@var2244 <<@expr1073748042 "Too many #ifdef configurations - cppcheck only checks " <<@expr1073748043 mSettings@var977 .@expr6220 maxConfigs@var2369 ;
1469: if (@expr1073748045 numberOfConfigurations@var2241 >@expr1073748046 mSettings@var977 .@expr6220 maxConfigs@var2369 ) {
1470: msg@var2244 <<@expr1073748048 " of " <<@expr1073748049 numberOfConfigurations@var2241 <<@expr1073748050 " configurations. Use --force to check all configurations.\n" ; }
1471: if (@expr6227 file@var2240 .@expr6204 empty (@expr6205 ) ) {
1472: msg@var2244 <<@expr1073748054 " configurations. Use --force to check all configurations. For more details, use --enable=information.\n" ; }
1473: msg@var2244 <<@expr1073748055 "The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time."
1474:
1475:
1476: ;
1477: if (@expr6227 file@var2240 .@expr6204 empty (@expr6205 ) ) {
1478: msg@var2244 <<@expr1073748059 " For more details, use --enable=information." ; }
1479:
1480:
1481: ErrorMessage errmsg@var2245 (@expr1073748060 loclist@var2242 ,
1482: emptyString@var1 ,
1483: Severity ::@expr6194 information ,
1484: msg@var2244 .@expr1073748062 str (@expr1073748063 ) ,
1485: "toomanyconfigs" , CWE398@var1942 ,
1486: Certainty ::@expr1073748064 normal ) ;
1487:
1488: reportErr (@expr1073748065 errmsg@var2245 ) ;
1489: }
1490:
1491: void CppCheck :: purgedConfigurationMessage ( const std :: string & file@var2246 , const std :: string & configuration@var2247 )
1492: {
1493: mTooManyConfigs@var986 =@expr1073748066 false ;
1494:
1495: if (@expr1073748067 mSettings@var977 .@expr1073748068 severity@var2364 .@expr1073748069 isEnabled (@expr1073748070 Severity ::@expr6247 information ) &&@expr1073748072 file@var2246 .@expr6249 empty (@expr6250 ) ) {
1496: return ; }
1497:
1498: std ::@expr1073748075 list < ErrorMessage ::@expr1073748076 FileLocation > loclist@var2248 ;
1499: if (@expr1073748077 !@expr1073748078 file@var2246 .@expr6249 empty (@expr6250 ) ) {
1500: ErrorMessage ::@expr1073748081 FileLocation location@var2249 ;
1501: location@var2249 .@expr1073748082 setfile (@expr1073748083 file@var2246 ) ;
1502: loclist@var2248 .@expr1073748084 push_back (@expr1073748085 location@var2249 ) ;
1503: }
1504:
1505: ErrorMessage errmsg@var2250 (@expr1073748086 loclist@var2248 ,
1506: emptyString@var1 ,
1507: Severity ::@expr6247 information ,
1508: "The configuration '" +@expr1073748088 configuration@var2247 +@expr1073748089 "' was not checked because its code equals another one." ,
1509: "purgedConfiguration" ,
1510: Certainty ::@expr1073748090 normal ) ;
1511:
1512: reportErr (@expr1073748091 errmsg@var2250 ) ;
1513: }
1514:
1515:
1516:
1517: void CppCheck :: reportErr ( const ErrorMessage & msg@var2251 )
1518: {
1519: if (@expr1073748092 !@expr1073748093 mSettings@var977 .@expr1073748094 library@var2374 .@expr1073748095 reportErrors (@expr1073748096 msg@var2251 .@expr1073748097 file0@var2252 ) ) {
1520: return ; }
1521:
1522: const std ::@expr6274 string errmsg@var2253 =@expr1073748099 msg@var2251 .@expr1073748100 toString (@expr1073748101 mSettings@var977 .@expr6278 verbose@var2354 ) ;
1523: if (@expr1073748103 errmsg@var2253 .@expr1073748104 empty (@expr1073748105 ) ) {
1524: return ; }
1525:
1526:
1527: if (@expr1073748106 std ::@expr1073748107 find (@expr1073748108 mErrorList@var976 .@expr1073748109 begin (@expr1073748110 ) , mErrorList@var976 .@expr6287 end (@expr6288 ) , errmsg@var2253 ) !=@expr1073748113 mErrorList@var976 .@expr6287 end (@expr6288 ) ) {
1528: return ; }
1529:
1530: mAnalyzerInformation@var989 .@expr1073748116 reportErr (@expr1073748117 msg@var2251 , mSettings@var977 .@expr6278 verbose@var2354 ) ;
1531:
1532: const Suppressions ::@expr6274 ErrorMessage errorMessage@var2254 =@expr1073748120 msg@var2251 .@expr1073748121 toSuppressionsErrorMessage (@expr1073748122 ) ;
1533:
1534: if (@expr1073748123 mUseGlobalSuppressions@var985 ) {
1535: if (@expr1073748124 mSettings@var977 .@expr6301 nomsg@var2356 .@expr6302 isSuppressed (@expr6303 errorMessage@var2254 ) ) {
1536: return ;
1537: }
1538: } else {
1539: if (@expr1073748128 mSettings@var977 .@expr6301 nomsg@var2356 .@expr1073748130 isSuppressedLocal (@expr1073748131 errorMessage@var2254 ) ) {
1540: return ;
1541: }
1542: }
1543:
1544: if (@expr1073748132 !@expr1073748133 mSettings@var977 .@expr1073748134 nofail@var2375 .@expr1073748135 isSuppressed (@expr1073748136 errorMessage@var2254 ) &&@expr1073748137 !@expr6314 mSettings@var977 .@expr6301 nomsg@var2356 .@expr6302 isSuppressed (@expr6303 errorMessage@var2254 ) ) {
1545: mExitCode@var984 =@expr1073748142 1 ;
1546: }
1547:
1548: mErrorList@var976 .@expr1073748143 push_back (@expr1073748144 errmsg@var2253 ) ;
1549:
1550: mErrorLogger@var982 .@expr1073748145 reportErr (@expr1073748146 msg@var2251 ) ;
1551:
1552: if (@expr1073748147 !@expr1073748148 mSettings@var977 .@expr1073748149 plistOutput@var2361 .@expr1073748150 empty (@expr1073748151 ) &&@expr1073748152 plistFile@var400 .@expr1073748153 is_open (@expr1073748154 ) &&@expr1073748155 !@expr6314 mSettings@var977 .@expr6301 nomsg@var2356 .@expr6302 isSuppressed (@expr6303 errorMessage@var2254 ) ) {
1553:
1554: plistFile@var400 <<@expr1073748160 ErrorLogger ::@expr1073748161 plistData (@expr1073748162 msg@var2251 ) ;
1555: }
1556: }
1557:
1558: void CppCheck :: reportOut ( const std :: string & outmsg@var2255 , Color c@var2256 )
1559: {
1560: mErrorLogger@var982 .@expr1073748163 reportOut (@expr1073748164 outmsg@var2255 , c@var2256 ) ;
1561: }
1562:
1563: void CppCheck :: reportProgress ( const std :: string & filename@var2257 , const char stage@var2258 [ ] , const unsigned long value@var2259 )
1564: {
1565: mErrorLogger@var982 .@expr1073748165 reportProgress (@expr1073748166 filename@var2257 , stage@var2258 , value@var2259 ) ;
1566: }
1567:
1568: void CppCheck :: reportInfo ( const ErrorMessage & msg@var2260 )
1569: {
1570: const Suppressions ::@expr1073748167 ErrorMessage &@expr1073748168 errorMessage@var2261 =@expr1073748169 msg@var2260 .@expr1073748170 toSuppressionsErrorMessage (@expr1073748171 ) ;
1571: if (@expr1073748172 !@expr1073748173 mSettings@var977 .@expr1073748174 nomsg@var2356 .@expr1073748175 isSuppressed (@expr1073748176 errorMessage@var2261 ) ) {
1572: mErrorLogger@var982 .@expr1073748177 reportInfo (@expr1073748178 msg@var2260 ) ; }
1573: }
1574:
1575: void CppCheck :: reportStatus ( unsigned int , unsigned int , unsigned long , unsigned long )
1576: { }
1577:
1578: void CppCheck :: getErrorMessages ( )
1579: {
1580: Settings s@var2262 (@expr1073748179 mSettings@var977 ) ;
1581: s@var2262 .@expr6356 severity@var2263 .@expr6357 enable (@expr1073748182 Severity ::@expr1073748183 warning ) ;
1582: s@var2262 .@expr6356 severity@var2263 .@expr6357 enable (@expr1073748186 Severity ::@expr1073748187 style ) ;
1583: s@var2262 .@expr6356 severity@var2263 .@expr6357 enable (@expr1073748190 Severity ::@expr1073748191 portability ) ;
1584: s@var2262 .@expr6356 severity@var2263 .@expr6357 enable (@expr1073748194 Severity ::@expr1073748195 performance ) ;
1585: s@var2262 .@expr6356 severity@var2263 .@expr6357 enable (@expr1073748198 Severity ::@expr1073748199 information ) ;
1586:
1587: purgedConfigurationMessage (@expr1073748200 "" , "" ) ;
1588:
1589: mTooManyConfigs@var986 =@expr1073748201 true ;
1590: tooManyConfigsError (@expr1073748202 "" , 0U ) ;
1591:
1592:
1593: for (@expr1073748203 std ::@expr6380 list < Check *@expr1073748205 > ::@expr6380 const_iterator it@var2264 =@expr1073748207 Check ::@expr6384 instances (@expr6385 ) .@expr1073748210 begin (@expr1073748211 ) ; it@var2264 !=@expr1073748212 Check ::@expr6384 instances (@expr6385 ) .@expr1073748215 end (@expr1073748216 ) ; ++@expr1073748217 it@var2264 ) {
1594: (@expr1073748218 *@expr1073748219 it@var2264 ) .@expr1073748220 getErrorMessages (@expr1073748221 this@expr6398 , &@expr6399 s@var2262 ) ; }
1595:
1596: Preprocessor ::@expr1073748224 getErrorMessages (@expr1073748225 this@expr6398 , &@expr6399 s@var2262 ) ;
1597: }
1598:
1599: void CppCheck :: analyseClangTidy ( const ImportProject :: FileSettings & fileSettings@var2265 )
1600: {
1601: std ::@expr1073748230 string allIncludes@var2266 ;
1602: for (@expr1073748231 const std ::@expr6408 string &@expr1073748233 inc@var2267 :@expr1073748234 fileSettings@var2265 .@expr1073748235 includePaths@var2268 ) {
1603: allIncludes@var2266 =@expr1073748236 allIncludes@var2266 +@expr1073748237 "-I\"" +@expr1073748238 inc@var2267 +@expr1073748239 "\" " ;
1604: }
1605:
1606: const std ::@expr6408 string allDefines@var2269 =@expr1073748241 getDefinesFlags (@expr1073748242 fileSettings@var2265 .@expr1073748243 defines@var2270 ) ;
1607:
|
1610:
1611: const char exe@var2271 [@expr1073748244 11 ] =@expr1073748245 "clang-tidy" ;
1612:
1613:
1614: const std ::@expr6408 string args@var2272 =@expr1073748247 "-quiet -checks=*,-clang-analyzer-*,-llvm* \"" +@expr1073748248 fileSettings@var2265 .@expr6425 filename@var2273 +@expr1073748250 "\" -- " +@expr1073748251 allIncludes@var2266 +@expr1073748252 allDefines@var2269 ;
1615: std ::@expr1073748253 string output@var2274 ;
1616: if (@expr1073748254 !@expr1073748255 mExecuteCommand@var990 (@expr1073748256 exe@var2271 , split (@expr1073748257 args@var2272 ) , "" , &@expr1073748258 output@var2274 ) ) {
1617: std ::@expr1073748259 cerr@expr1073748227 <<@expr1073748260 "Failed to execute '" <<@expr1073748261 exe@var2271 <<@expr1073748262 "'" <<@expr1073748263 std ::@expr1073748264 endl@expr1073748228 ;
1618: return ;
1619: }
1620:
1621:
1622: std ::@expr1073748265 istringstream istr@var2275 (@expr1073748266 output@var2274 ) ;
1623: std ::@expr1073748267 string line@var2276 ;
1624:
1625: if (@expr1073748268 !@expr1073748269 mSettings@var977 .@expr6446 buildDir@var2348 .@expr1073748271 empty (@expr1073748272 ) ) {
1626: const std ::@expr6408 string analyzerInfoFile@var2277 =@expr1073748274 AnalyzerInformation ::@expr1073748275 getAnalyzerInfoFile (@expr1073748276 mSettings@var977 .@expr6446 buildDir@var2348 , fileSettings@var2265 .@expr6425 filename@var2273 , "" ) ;
1627: std ::@expr1073748279 ofstream fcmd@var2278 (@expr1073748280 analyzerInfoFile@var2277 +@expr1073748281 ".clang-tidy-cmd" ) ;
1628: fcmd@var2278 <<@expr1073748282 istr@var2275 .@expr1073748283 str (@expr1073748284 ) ;
1629: }
1630:
1631: while (@expr1073748285 std ::@expr1073748286 getline (@expr1073748287 istr@var2275 , line@var2276 ) ) {
1632: if (@expr1073748288 line@var2276 .@expr6465 find (@expr1073748290 "error" ) ==@expr1073748291 std ::@expr6468 string ::@expr6469 npos &&@expr1073748294 line@var2276 .@expr6465 find (@expr1073748296 "warning" ) ==@expr1073748297 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1633: continue ; }
1634:
1635: unsigned long endColumnPos@var2279 ; endColumnPos@var2279 =@expr1073748300 line@var2276 .@expr6465 find (@expr1073748302 ": error:" ) ;
1636: if (@expr1073748303 endColumnPos@var2279 ==@expr1073748304 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1637: endColumnPos@var2279 =@expr1073748307 line@var2276 .@expr6465 find (@expr1073748309 ": warning:" ) ;
1638: }
1639:
1640: const unsigned long endLinePos@var2280 =@expr1073748310 line@var2276 .@expr6487 rfind (@expr1073748312 ":" , endColumnPos@var2279 -@expr1073748313 1 ) ;
1641: const unsigned long endNamePos@var2281 =@expr1073748314 line@var2276 .@expr6487 rfind (@expr1073748316 ":" , endLinePos@var2280 -@expr1073748317 1 ) ;
1642: const unsigned long endMsgTypePos@var2282 =@expr1073748318 line@var2276 .@expr6465 find (@expr1073748320 ':' , endColumnPos@var2279 +@expr1073748321 2 ) ;
1643: const unsigned long endErrorPos@var2283 =@expr1073748322 line@var2276 .@expr6487 rfind (@expr1073748324 '[' , std ::@expr6468 string ::@expr6469 npos@expr6405 ) ;
1644: if (@expr1073748327 endLinePos@var2280 ==@expr1073748328 std ::@expr6468 string ::@expr6469 npos@expr6405 ||@expr1073748331 endNamePos@var2281 ==@expr1073748332 std ::@expr6468 string ::@expr6469 npos@expr6405 ||@expr1073748335 endMsgTypePos@var2282 ==@expr1073748336 std ::@expr6468 string ::@expr6469 npos@expr6405 ||@expr1073748339 endErrorPos@var2283 ==@expr1073748340 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1645: continue ; }
1646:
1647: const std ::@expr6408 string lineNumString@var2284 =@expr1073748344 line@var2276 .@expr6521 substr (@expr1073748346 endNamePos@var2281 +@expr1073748347 1 , endLinePos@var2280 -@expr1073748348 endNamePos@var2281 -@expr1073748349 1 ) ;
1648: const std ::@expr6408 string columnNumString@var2285 =@expr1073748351 line@var2276 .@expr6521 substr (@expr1073748353 endLinePos@var2280 +@expr1073748354 1 , endColumnPos@var2279 -@expr1073748355 endLinePos@var2280 -@expr1073748356 1 ) ;
1649: const std ::@expr6408 string messageString@var2286 =@expr1073748358 line@var2276 .@expr6521 substr (@expr1073748360 endMsgTypePos@var2282 +@expr1073748361 1 , endErrorPos@var2283 -@expr1073748362 endMsgTypePos@var2282 -@expr1073748363 1 ) ;
1650: const std ::@expr6408 string errorString@var2287 =@expr1073748365 line@var2276 .@expr6521 substr (@expr1073748367 endErrorPos@var2283 , line@var2276 .@expr1073748368 length (@expr1073748369 ) ) ;
1651:
1652: std ::@expr1073748370 string fixedpath@var2288 ; fixedpath@var2288 =@expr1073748371 Path ::@expr1073748372 simplifyPath (@expr1073748373 line@var2276 .@expr6521 substr (@expr1073748375 0 , endNamePos@var2281 ) ) ;
1653: const int64_t lineNumber@var2289 =@expr1073748376 std ::@expr6553 atol (@expr1073748378 lineNumString@var2284 .@expr1073748379 c_str (@expr1073748380 ) ) ;
1654: const int64_t column@var2290 =@expr1073748381 std ::@expr6553 atol (@expr1073748383 columnNumString@var2285 .@expr1073748384 c_str (@expr1073748385 ) ) ;
1655: fixedpath@var2288 =@expr1073748386 Path ::@expr1073748387 toNativeSeparators (@expr1073748388 fixedpath@var2288 ) ;
1656:
1657: ErrorMessage errmsg@var2291 ;
1658: errmsg@var2291 .@expr1073748389 callStack@var2292 .@expr1073748390 emplace_back (@expr1073748391 ErrorMessage ::@expr1073748392 FileLocation (@expr1073748393 fixedpath@var2288 , lineNumber@var2289 , column@var2290 ) ) ;
1659:
1660: errmsg@var2291 .@expr6570 id@var2293 =@expr1073748395 "clang-tidy-" +@expr1073748396 errorString@var2287 .@expr1073748397 substr (@expr1073748398 1 , errorString@var2287 .@expr1073748399 length (@expr1073748400 ) -@expr1073748401 2 ) ;
1661: if (@expr1073748402 errmsg@var2291 .@expr6570 id@var2293 .@expr6580 find (@expr1073748405 "performance" ) !=@expr1073748406 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1662: errmsg@var2291 .@expr6585 severity@var2294 =@expr1073748410 Severity ::@expr6587 SeverityType ::@expr1073748412 performance ; }
1663: else { if (@expr1073748413 errmsg@var2291 .@expr6570 id@var2293 .@expr6580 find (@expr1073748416 "portability" ) !=@expr1073748417 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1664: errmsg@var2291 .@expr6585 severity@var2294 =@expr1073748421 Severity ::@expr6587 SeverityType ::@expr1073748423 portability ; }
1665: else { if (@expr1073748424 errmsg@var2291 .@expr6570 id@var2293 .@expr6580 find (@expr1073748427 "cert" ) !=@expr1073748428 std ::@expr6468 string ::@expr6469 npos@expr6405 ||@expr1073748431 errmsg@var2291 .@expr6570 id@var2293 .@expr6580 find (@expr1073748434 "misc" ) !=@expr1073748435 std ::@expr6468 string ::@expr6469 npos@expr6405 ||@expr1073748438 errmsg@var2291 .@expr6570 id@var2293 .@expr6580 find (@expr1073748441 "unused" ) !=@expr1073748442 std ::@expr6468 string ::@expr6469 npos@expr6405 ) {
1666: errmsg@var2291 .@expr6585 severity@var2294 =@expr1073748446 Severity ::@expr6587 SeverityType ::@expr1073748448 warning ; }
1667: else {
1668: errmsg@var2291 .@expr6585 severity@var2294 =@expr1073748450 Severity ::@expr6587 SeverityType ::@expr1073748452 style ; } } }
1669:
1670: errmsg@var2291 .@expr1073748453 file0@var2295 =@expr1073748454 fixedpath@var2288 ;
1671: errmsg@var2291 .@expr1073748455 setmsg (@expr1073748456 messageString@var2286 ) ;
1672: reportErr (@expr1073748457 errmsg@var2291 ) ;
1673: }
1674: }
1675:
1676: bool CppCheck :: analyseWholeProgram ( )
1677: {
1678: bool errors@var2296 ; errors@var2296 =@expr1073748458 false ;
1679:
1680: CTU ::@expr6635 maxCtuDepth@var1238 =@expr1073748460 mSettings@var977 .@expr1073748461 maxCtuDepth@var2376 ;
1681:
1682: CTU ::@expr1073748462 FileInfo ctu@var2297 ;
1683: for (@expr1073748463 const Check ::@expr6635 FileInfo *@expr6641 fi@var2298 :@expr1073748466 mFileInfo@var988 ) {
1684: const CTU ::@expr1073748467 FileInfo * fi2@var2299 ; fi2@var2299 =@expr1073748468 dynamic_cast < const CTU ::@expr6635 FileInfo *@expr6641 > (@expr1073748471 fi@var2298 ) ;
1685: if (@expr1073748472 fi2@var2299 ) {
1686: ctu@var2297 .@expr6649 functionCalls@var2300 .@expr1073748474 insert (@expr1073748475 ctu@var2297 .@expr6649 functionCalls@var2300 .@expr1073748477 end (@expr1073748478 ) , fi2@var2299 .@expr6655 functionCalls@var2301 .@expr1073748480 begin (@expr1073748481 ) , fi2@var2299 .@expr6655 functionCalls@var2301 .@expr1073748483 end (@expr1073748484 ) ) ;
1687: ctu@var2297 .@expr6661 nestedCalls@var2302 .@expr1073748486 insert (@expr1073748487 ctu@var2297 .@expr6661 nestedCalls@var2302 .@expr1073748489 end (@expr1073748490 ) , fi2@var2299 .@expr6667 nestedCalls@var2303 .@expr1073748492 begin (@expr1073748493 ) , fi2@var2299 .@expr6667 nestedCalls@var2303 .@expr1073748495 end (@expr1073748496 ) ) ;
1688: }
1689: }
1690: for (@expr1073748497 Check *@expr6641 check@var2304 :@expr1073748499 Check ::@expr1073748500 instances (@expr1073748501 ) ) {
1691: errors@var2296 |=@expr1073748502 check@var2304 .@expr1073748503 analyseWholeProgram (@expr1073748504 &@expr1073748505 ctu@var2297 , mFileInfo@var988 , mSettings@var222 , *@expr1073748506 this@expr1073748507 ) ; }
1692: return errors@var2296 &&@expr1073748508 (@expr1073748509 mExitCode@var984 >@expr1073748510 0 ) ;
1693: }
1694:
1695: void CppCheck :: analyseWholeProgram ( const std :: string & buildDir@var2305 , const std :: map < std :: string , unsigned long > & files@var2306 )
1696: {
1697: executeAddonsWholeProgram (@expr1073748514 files@var2306 ) ;
1698: if (@expr1073748515 buildDir@var2305 .@expr1073748516 empty (@expr1073748517 ) ) {
1699: return ; }
1700: if (@expr1073748518 mSettings@var977 .@expr1073748519 checks@var2377 .@expr1073748520 isEnabled (@expr1073748521 Checks ::@expr1073748522 unusedFunction ) ) {
1701: CheckUnusedFunctions ::@expr1073748523 analyseWholeProgram (@expr1073748524 this@expr6701 , buildDir@var2305 ) ; }
1702: std ::@expr1073748526 list < Check ::@expr6703 FileInfo *@expr6704 > fileInfoList@var2307 ;
1703: CTU ::@expr1073748529 FileInfo ctuFileInfo@var2308 ;
1704:
1705:
1706: const std ::@expr1073748530 string filesTxt@var2309 (@expr1073748531 buildDir@var2305 +@expr1073748532 "/files.txt" ) ;
1707: std ::@expr1073748533 ifstream fin@var2310 (@expr1073748534 filesTxt@var2309 ) ;
1708: std ::@expr1073748535 string filesTxtLine@var2311 ;
1709: while (@expr1073748536 std ::@expr1073748537 getline (@expr1073748538 fin@var2310 , filesTxtLine@var2311 ) ) {
1710: const std ::@expr6703 string ::@expr6703 size_type firstColon@var2312 =@expr1073748541 filesTxtLine@var2311 .@expr1073748542 find (@expr1073748543 ':' ) ;
1711: if (@expr1073748544 firstColon@var2312 ==@expr1073748545 std ::@expr1073748546 string ::@expr1073748547 npos@expr1073748511 ) {
1712: continue ; }
1713: const std ::@expr6703 string ::@expr6703 size_type lastColon@var2313 =@expr1073748550 filesTxtLine@var2311 .@expr1073748551 rfind (@expr1073748552 ':' ) ;
1714: if (@expr1073748553 firstColon@var2312 ==@expr1073748554 lastColon@var2313 ) {
1715: continue ; }
1716: const std ::@expr6703 string xmlfile@var2314 =@expr1073748556 buildDir@var2305 +@expr1073748557 '/' +@expr1073748558 filesTxtLine@var2311 .@expr1073748559 substr (@expr1073748560 0 , firstColon@var2312 ) ;
1717:
1718:
1719: tinyxml2 ::@expr1073748561 XMLDocument doc@var2315 ;
1720: const tinyxml2 ::@expr6703 XMLError error@var2316 =@expr1073748563 doc@var2315 .@expr1073748564 LoadFile (@expr1073748565 xmlfile@var2314 .@expr1073748566 c_str (@expr1073748567 ) ) ;
1721: if (@expr1073748568 error@var2316 !=@expr1073748569 tinyxml2 ::@expr1073748570 XML_SUCCESS@expr1073748512 ) {
1722: continue ; }
1723:
1724: const tinyxml2 ::@expr1073748571 XMLElement@expr1073748513 * const rootNode@var2317 ; rootNode@var2317 =@expr1073748572 doc@var2315 .@expr1073748573 FirstChildElement (@expr1073748574 ) ;
1725: if (@expr1073748575 rootNode@var2317 ==@expr1073748576 nullptr ) {
1726: continue ; }
1727:
1728: for (@expr1073748577 const tinyxml2 ::@expr6703 XMLElement *@expr6704 e@var2318 =@expr1073748580 rootNode@var2317 .@expr1073748581 FirstChildElement (@expr1073748582 ) ; e@var2318 ; e@var2318 =@expr1073748583 e@var2318 .@expr1073748584 NextSiblingElement (@expr1073748585 ) ) {
1729: if (@expr1073748586 std ::@expr6763 strcmp (@expr1073748588 e@var2318 .@expr1073748589 Name (@expr1073748590 ) , "FileInfo" ) !=@expr1073748591 0 ) {
1730: continue ; }
1731: const char * checkClassAttr@var2319 ; checkClassAttr@var2319 =@expr1073748592 e@var2318 .@expr1073748593 Attribute (@expr1073748594 "check" ) ;
1732: if (@expr1073748595 !@expr1073748596 checkClassAttr@var2319 ) {
1733: continue ; }
1734: if (@expr1073748597 std ::@expr6763 strcmp (@expr1073748599 checkClassAttr@var2319 , "ctu" ) ==@expr1073748600 0 ) {
1735: ctuFileInfo@var2308 .@expr1073748601 loadFromXml (@expr1073748602 e@var2318 ) ;
1736: continue ;
1737: }
1738: for (@expr1073748603 Check *@expr6704 check@var2320 :@expr1073748605 Check ::@expr6782 instances (@expr6783 ) ) {
1739: if (@expr1073748608 checkClassAttr@var2319 ==@expr1073748609 check@var2320 .@expr1073748610 name (@expr1073748611 ) ) {
1740: fileInfoList@var2307 .@expr1073748612 push_back (@expr1073748613 check@var2320 .@expr1073748614 loadFileInfoFromXml (@expr1073748615 e@var2318 ) ) ; }
1741: }
1742: }
1743: }
1744:
1745:
1746: CTU ::@expr6703 maxCtuDepth@var1238 =@expr1073748617 mSettings@var977 .@expr1073748618 maxCtuDepth@var2376 ;
1747:
1748:
1749: for (@expr1073748619 Check *@expr6704 check@var2321 :@expr1073748621 Check ::@expr6782 instances (@expr6783 ) ) {
1750: check@var2321 .@expr1073748624 analyseWholeProgram (@expr1073748625 &@expr1073748626 ctuFileInfo@var2308 , fileInfoList@var2307 , mSettings@var222 , *@expr1073748627 this@expr6701 ) ; }
1751:
1752: for (@expr1073748628 Check ::@expr6703 FileInfo *@expr6704 fi@var2322 :@expr1073748631 fileInfoList@var2307 ) {
1753: delete fi@var2322 ; }
1754: }
1755:
1756: bool CppCheck :: isUnusedFunctionCheckEnabled ( ) const
1757: {
1758: return (@expr1073748632 mSettings@var977 .@expr1073748633 jobs@var2378 ==@expr1073748634 1 &&@expr1073748635 mSettings@var977 .@expr1073748636 checks@var2377 .@expr1073748637 isEnabled (@expr1073748638 Checks ::@expr1073748639 unusedFunction ) ) ;
1759: }

##file cppcheck-2.8/lib/settings.h

2:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2323 ; mFlags@var2323 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2323 ;
54: }
55: void clear ( ) {
56: mFlags@var2323 =@expr1073748640 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2323 =@expr1073748641 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2324 ) {
62: if (@expr1073748642 enabled@var2324 ) {
63: fill (@expr1073748643 ) ; }
64: else {
65: clear (@expr1073748644 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2325 ) const {
68: return (@expr6821 mFlags@var2323 &@expr1073748646 (@expr6821 1U <<@expr1073748648 (@expr1073748649 uint32_t ) flag@var2325 ) ) !=@expr1073748650 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2326 ) {
71: mFlags@var2323 |=@expr1073748651 (@expr1073748652 1U <<@expr1073748653 (@expr1073748654 uint32_t ) flag@var2326 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2327 ) {
74: mFlags@var2323 &=@expr1073748655 ~@expr1073748656 (@expr1073748657 1U <<@expr1073748658 (@expr1073748659 uint32_t ) flag@var2327 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2328 , bool enabled@var2329 ) {
77: if (@expr1073748660 enabled@var2329 ) {
78: enable (@expr1073748661 flag@var2328 ) ; }
79: else {
80: disable (@expr1073748662 flag@var2328 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2330 ; mFlags@var2330 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2330 ;
54: }
55: void clear ( ) {
56: mFlags@var2330 =@expr1073748663 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2330 =@expr1073748664 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2331 ) {
62: if (@expr1073748665 enabled@var2331 ) {
63: fill (@expr1073748666 ) ; }
64: else {
65: clear (@expr1073748667 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2332 ) const {
68: return (@expr6844 mFlags@var2330 &@expr1073748669 (@expr6844 1U <<@expr1073748671 (@expr1073748672 uint32_t ) flag@var2332 ) ) !=@expr1073748673 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2333 ) {
71: mFlags@var2330 |=@expr1073748674 (@expr1073748675 1U <<@expr1073748676 (@expr1073748677 uint32_t ) flag@var2333 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2334 ) {
74: mFlags@var2330 &=@expr1073748678 ~@expr1073748679 (@expr1073748680 1U <<@expr1073748681 (@expr1073748682 uint32_t ) flag@var2334 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2335 , bool enabled@var2336 ) {
77: if (@expr1073748683 enabled@var2336 ) {
78: enable (@expr1073748684 flag@var2335 ) ; }
79: else {
80: disable (@expr1073748685 flag@var2335 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2337 ; mFlags@var2337 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2337 ;
54: }
55: void clear ( ) {
56: mFlags@var2337 =@expr1073748686 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2337 =@expr1073748687 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2338 ) {
62: if (@expr1073748688 enabled@var2338 ) {
63: fill (@expr1073748689 ) ; }
64: else {
65: clear (@expr1073748690 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2339 ) const {
68: return (@expr6867 mFlags@var2337 &@expr1073748692 (@expr6867 1U <<@expr1073748694 (@expr1073748695 uint32_t ) flag@var2339 ) ) !=@expr1073748696 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2340 ) {
71: mFlags@var2337 |=@expr1073748697 (@expr1073748698 1U <<@expr1073748699 (@expr1073748700 uint32_t ) flag@var2340 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2341 ) {
74: mFlags@var2337 &=@expr1073748701 ~@expr1073748702 (@expr1073748703 1U <<@expr1073748704 (@expr1073748705 uint32_t ) flag@var2341 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2342 , bool enabled@var2343 ) {
77: if (@expr1073748706 enabled@var2343 ) {
78: enable (@expr1073748707 flag@var2342 ) ; }
79: else {
80: disable (@expr1073748708 flag@var2342 ) ; }
81: }
82: } ;



##Value flow
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@45630,34@45886}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen {!<=-1,28@128}
  && always {!<=-1,!>=2}
  str possible >=size=28@128
  str possible >=size=28@128
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1),>=28@128}
  - {!<=-1,>=0@128}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1),28@128}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1),28@128}
  end possible {"cppcheck-addon-ctu-file-list"@128,".ctu-info"@10303,".ctu-info"@11071,".py"@34879,".json"@35647}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  end possible {".ctu-info"@40,".ctu-info"@43,".py"@136,".json"@139}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@178,34@179}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@178,""@179,""@180,"U"@181,"U"@182,"u"@183,"u"@184,"u8"@185,"u8"@186}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@59,34@60}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@56,34@58}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  checksum always !<=-1
Line 58
  , always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 65
  , inconclusive lifetime[SubObject]=(errorLogger)
  ( inconclusive lifetime[SubObject]=(errorLogger)
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ctu possible {lifetime[Address]=(ctuFileInfo)@18,lifetime[Address]=(ctu)@19}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  certainty possible 0@53
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 79
  ( always !<=-1
Line 80
  ( always !<=-1
Line 93
  ( always !<=-1
Line 127
  mSimplify always {!<=-1,!>=2}
  = always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
Line 145
  ( always {!<=-1,!>=2}
Line 149
  ( always {!<=-1,!>=2}
Line 161
  ( always !<=-1
Line 207
  = always 0
  :: always 0
  Reset always 0
Line 224
  mExitCode always !<=-1
Line 226
  mUseGlobalSuppressions always {!<=-1,!>=2}
Line 229
  mTooManyConfigs always {!<=-1,!>=2}
Line 232
  mSimplify always {!<=-1,!>=2}
Line 240
  ( always {!<=-1,!>=2}
Line 49
  ( always "Unused functions"
Line 53
  ( always "Unused functions"
Line 66
  ( always {!<=-1,!>=2}
Line 72
  ( always {!<=-1,!>=2}
Line 84
  0 always 0
  "funcName" always "funcName"
Line 93
  , always !<=-1
  lineNumber always !<=-1
Line 97
  "Unused functions" always "Unused functions"
Line 101
  "Check for functions that are never called\n" always "Check for functions that are never called\n"
Line 106
  lineNumber always !<=-1
  0 always 0
  usedSameFile always {!<=-1,!>=2}
  false always 0
  usedOtherFile always {!<=-1,!>=2}
  false always 0
Line 109
  lineNumber always !<=-1
Line 110
  usedSameFile always {!<=-1,!>=2}
Line 111
  usedOtherFile always {!<=-1,!>=2}
Line 120
  lineNumber always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 54
  null always 0
  uninit always 1
  bufferOverflow always 2
Line 63
  { always 0
Line 64
  { always 0
Line 71
  { always 0
Line 74
  { always 0
Line 87
  { always 0
Line 92
  ( always {!<=-1,!>=2}
Line 101
  warning always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 122
  { always 0
Line 136
  warning always {!<=-1,!>=2}
Line 148
  ( always {!<=-1,!>=2}
  * always {!<=-1,!>=2}
Line 77
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 136
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  extra always size=0
Line 146
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 160
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 181
  ( always {!<=-1,!>=2}
Line 53
  linenr always !<=-1
Line 77
  NoHeader always 0
  = always 0
  0 always 0
  , always 1
Line 78
  UserHeader always 1
  , always 2
Line 79
  SystemHeader always 2
Line 85
  , always 0
  = always 0
  nullptr always 0
Line 105
  , always {!<=-1,!>=2}
  throwError always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 145
  , always 0
  throwError always {!<=-1,!>=2}
  = always 0
  false always 0
Line 147
  , always {!<=-1,!>=2}
  writeLocations always {!<=-1,!>=2}
Line 163
  ( always {!<=-1,!>=2}
Line 164
  , always !<=-1
  line always !<=-1
Line 173
  ( always !<=-1
Line 195
  , always {!<=-1,!>=2}
  showerror always {!<=-1,!>=2}
Line 198
  , always !<=-1
  linenr always !<=-1
Line 199
  , always !<=-1
  linenr always !<=-1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@12,128@13,64@14,32@15,16@16,8@17,4@18,2@19,1@20}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@21,128@22,64@23,32@24,16@25,8@26,4@27,2@28,1@29}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@21,4294967167@22,4294967231@23,4294967263@24,4294967279@25,4294967287@26,4294967291@27,4294967293@28,4294967294@29}
  flag {!<=-1,256@21,128@22,64@23,32@24,16@25,8@26,4@27,2@28,1@29}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@167,4@168,0@169}
  t possible {10@167,4@168,0@169}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@167,4@168,0@169}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@167,0@169}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@167,0@169}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@167}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@167}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@167}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@167}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@167}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@175}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@177,17179869184@188,8589934592@190,34359738368@192,4294967296@194,2147483648@196,1073741824@198,536870912@200,268435456@202}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@8,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@9}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@176,17179869184@187,8589934592@189,34359738368@191,4294967296@193,2147483648@195,1073741824@197,536870912@199,268435456@201}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@176,17179869184@187,8589934592@189,34359738368@191,4294967296@193,2147483648@195,1073741824@197,536870912@199,268435456@201}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 95
  = possible lifetime[Address]=(s_timerResults)@78
  tr possible lifetime[Address]=(s_timerResults)@78
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 585
  = possible lifetime[Address]=(preprocessor)@77
  preprocessor possible lifetime[Address]=(preprocessor)@77
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 73
  4 always 4
  = always "2.8"
  "2.8" always "2.8"
Line 74
  1 always 1
  = always ""
  "" always ""
Line 76
  29 always 29
  = always "cppcheck-addon-ctu-file-list"
  "cppcheck-addon-ctu-file-list" always "cppcheck-addon-ctu-file-list"
Line 81
  398U always 398
Line 90
  ctu always {!<=-1,!>=2}
  ctu always {!<=-1,!>=2}
  = always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  fileName possible "runaddon.py"@138
Line 98
  ( always {!<=-1,!>=2}
  exepath always symbolic=(Path::getPathFromFilename(exename))
  fileName possible "runaddon.py"@138
Line 99
  exepath always symbolic=(Path::getPathFromFilename(exename))
Line 100
  ( always {!<=-1,!>=2}
  exepath always symbolic=(Path::getPathFromFilename(exename))
  "addons/" always "addons/"
Line 101
  exepath always symbolic=(Path::getPathFromFilename(exename))
  "addons/" always "addons/"
Line 109
  "" always ""
Line 114
  ! {!<=-1,!>=2,0}
  json_error possible size=0
  ( {!<=-1,!>=2,1}
Line 115
  "Loading " always "Loading "
  " failed. " always " failed. "
  json_error always !size=0
Line 117
  ! always {!<=-1,!>=2}
Line 118
  "Loading " always "Loading "
  " failed. Bad json." always " failed. Bad json."
Line 120
  obj always symbolic=(json.get<picojson::object>())
  "args" always "args"
Line 121
  ! always {!<=-1,!>=2}
  "args" always "args"
Line 122
  "Loading " always "Loading "
  " failed. args must be array." always " failed. args must be array."
Line 123
  "args" always "args"
Line 124
  " " always " "
Line 127
  "ctu" always "ctu"
Line 129
  ! always {!<=-1,!>=2}
  "ctu" always "ctu"
Line 130
  "Loading " always "Loading "
  " failed. ctu must be boolean." always " failed. ctu must be boolean."
Line 131
  ctu always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  "ctu" always "ctu"
Line 133
  ctu always {!<=-1,!>=2}
  = always 0
  false always 0
Line 136
  "python" always "python"
Line 138
  "python" always "python"
Line 139
  "Loading " always "Loading "
  " failed. python must not be an array." always " failed. python must not be an array."
Line 141
  "python" always "python"
Line 143
  = always ""
  "" always ""
Line 146
  "executable" always "executable"
Line 147
  ! always {!<=-1,!>=2}
  "executable" always "executable"
Line 148
  "Loading " always "Loading "
  " failed. executable must be a string." always " failed. executable must be a string."
Line 149
  "executable" always "executable"
Line 150
  "" always ""
Line 153
  "script" always "script"
Line 157
  0 always 0
  == always {!<=-1,!>=2}
  '{' always 123
Line 163
  ( always !<=-1
  "." always "."
  == always {!<=-1,!>=2}
Line 164
  ".py" always ".py"
Line 166
  ( always {!<=-1,!>=2}
  ".py" always ".py"
Line 167
  = inconclusive lifetime[Object]=(fileName)
  ( inconclusive lifetime[Object]=(fileName)
Line 168
  scriptFile inconclusive lifetime[Object]=(fileName)
  ( always {!<=-1,!>=2}
Line 169
  "Did not find addon " always "Did not find addon "
Line 171
  :: always !<=-1
  pos1 always !<=-1
  pos1 always !<=-1
  = always !<=-1
  scriptFile {lifetime[Object]=(fileName),!size=0}
  ( always !<=-1
  "/" always "/"
Line 172
  pos1 always !<=-1
  == always {!<=-1,!>=2}
Line 173
  pos1 always !<=-1
  = always 0
  0 always 0
Line 175
  pos1 always !<=-1
  ++ always !<=-1
Line 176
  :: always !<=-1
  pos2 always !<=-1
  pos2 always !<=-1
  = always !<=-1
  scriptFile {lifetime[Object]=(fileName),!size=0}
  ( always !<=-1
  "." always "."
Line 177
  pos2 always !<=-1
  < always {!<=-1,!>=2}
  pos1 {!<=-1,0}
Line 178
  pos2 always !<=-1
  = always !<=-1
Line 179
  scriptFile {lifetime[Object]=(fileName),!size=0}
  pos1 always !<=-1
  pos2 always !<=-1
  - always !<=-1
  pos1 always !<=-1
Line 181
  "runaddon.py" always "runaddon.py"
Line 183
  "" always ""
Line 186
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ".json" always ".json"
Line 187
  "Failed to open addon " always "Failed to open addon "
Line 190
  ! always {!<=-1,!>=2}
Line 191
  "Failed to open " always "Failed to open "
Line 202
  ( always !<=-1
  " " always " "
  != always {!<=-1,!>=2}
Line 203
  "\"" always "\""
  "\"" always "\""
Line 207
  = always " "
  " " always " "
Line 210
  startPos always !<=-1
  = always 0
  0U always 0
  startPos {symbolic=(endPos),!<=-1,0}
  < always {!<=-1,!>=2}
  str possible {symbolic=("-quiet -checks=*,-clang-analyzer-*,-llvm* \""+fileSettings.filename+"\" -- "+allIncludes+allDefines)@21,"--version"@125}
  ( always !<=-1
Line 211
  startPos always !<=-1
  = always !<=-1
  str possible {symbolic=("-quiet -checks=*,-clang-analyzer-*,-llvm* \""+fileSettings.filename+"\" -- "+allIncludes+allDefines)@21,"--version"@125}
  ( always !<=-1
  sep inconclusive {";"@74,";"@75,";"@122," "}
  startPos always !<=-1
Line 212
  startPos always !<=-1
  == always {!<=-1,!>=2}
Line 215
  str possible {symbolic=("-quiet -checks=*,-clang-analyzer-*,-llvm* \""+fileSettings.filename+"\" -- "+allIncludes+allDefines)@21,"--version"@125}
  startPos always !<=-1
  == always {!<=-1,!>=2}
  '\"' always 34
Line 216
  endPos always !<=-1
  = always !<=-1
  ( always !<=-1
  "\"" always "\""
  startPos always !<=-1
  + always !<=0
  1 always 1
Line 217
  startPos always !<=-1
  + always !<=0
  1 always 1
  endPos always !<=-1
  - always !<=-1
  startPos always !<=-1
  - always !<=-1
  1 always 1
Line 218
  startPos always !<=-1
  = always !<=-1
  endPos always !<=-1
  < always {!<=-1,!>=2}
  ( always !<=-1
  ? always !<=-1
  endPos {!<=-1,<=symbolic=(str.size()-1),!>=symbolic=(str.size())}
  + always !<=0
  1 always 1
  : {1,!<=symbolic=(str.size()-1),>=symbolic=(str.size())}
  endPos {!<=-1,!<=symbolic=(str.size()-1),>=symbolic=(str.size())}
Line 222
  endPos always !<=-1
  = always !<=-1
  ( always !<=-1
  startPos always !<=-1
  + always !<=0
  1 always 1
Line 223
  startPos always !<=-1
  endPos {!<=-1,<=symbolic=(str.size()-1),>=symbolic=(str.size())}
  - always !<=-1
  startPos always !<=-1
Line 224
  startPos always !<=-1
  = always !<=-1
  endPos always !<=-1
Line 232
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 233
  . always !size=0
Line 234
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  dump always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 235
  . always !size=0
  "" always ""
  ".dump" always ".dump"
Line 236
  ".dump" always ".dump"
Line 241
  0 always 0
  ( always !<=-1
  - always !<=-1
  4 always 4
  "ctu-info" always "ctu-info"
Line 251
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  dump always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 255
  dumpFile always symbolic=(getDumpFileName(settings,filename))
Line 256
  ! always {!<=-1,!>=2}
Line 263
  "<?xml version=\"1.0\"?>" always "<?xml version=\"1.0\"?>"
Line 264
  "<dumps>" always "<dumps>"
Line 265
  "  <platform" always "  <platform"
Line 266
  " name=\"" always " name=\""
  '\"' always 34
Line 267
  " char_bit=\"" always " char_bit=\""
  '\"' always 34
Line 268
  " short_bit=\"" always " short_bit=\""
  '\"' always 34
Line 269
  " int_bit=\"" always " int_bit=\""
  '\"' always 34
Line 270
  " long_bit=\"" always " long_bit=\""
  '\"' always 34
Line 271
  " long_long_bit=\"" always " long_long_bit=\""
  '\"' always 34
Line 272
  " pointer_bit=\"" always " pointer_bit=\""
  '\"' always 34
Line 273
  "/>\n" always "/>\n"
Line 275
  "  <rawtokens>" always "  <rawtokens>"
Line 276
  i always !<=-1
  = always 0
  0 always 0
  i {!<=-1,0}
  < always {!<=-1,!>=2}
  ( always !<=-1
  ++ always !<=0
  i always !<=-1
Line 277
  "    <file index=\"" always "    <file index=\""
  i {!<=-1,<=symbolic=(files.size()-1),!>=symbolic=(files.size())}
  "\" name=\"" always "\" name=\""
  i {!<=-1,<=symbolic=(files.size()-1),!>=symbolic=(files.size())}
  "\"/>" always "\"/>"
Line 278
  = always !0
  rawtokens always !0
Line 279
  "    <tok " always "    <tok "
Line 280
  "fileIndex=\"" always "fileIndex=\""
  "\" " always "\" "
Line 281
  "linenr=\"" always "linenr=\""
  "\" " always "\" "
Line 282
  "column=\"" always "column=\""
  "\" " always "\" "
Line 283
  "str=\"" always "str=\""
  "\"" always "\""
Line 284
  "/>" always "/>"
Line 286
  "  </rawtokens>" always "  </rawtokens>"
Line 293
  ( always {!<=-1,!>=2}
Line 295
  = always "2>&1"
  "2>&1" always "2>&1"
Line 299
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 300
  = always !size=0
  . always !size=0
Line 301
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 302
  . always !size=0
Line 303
  ! {!<=-1,!>=2,0}
  defaultPythonExe possible size=0
  ( {!<=-1,!>=2,1}
Line 304
  defaultPythonExe always !size=0
Line 309
  2 always 2
  "python3" always "python3"
  "python" always "python"
Line 313
  "--version" always "--version"
  redirect always "2>&1"
  & {lifetime[Address]=(out),!0}
  out always size=0
  && always {!<=-1,!>=2}
  0 always 0
  7 always 7
  "Python " always "Python "
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  7 always 7
Line 318
  ( always {!<=-1,!>=2}
Line 319
  nullptr always 0
  "Failed to auto detect python" always "Failed to auto detect python"
Line 323
  . possible symbolic=(pythonExe)
  ( always {!<=-1,!>=2}
Line 324
  " " always " "
Line 325
  args possible size=0
  ( {!<=-1,!>=2,1}
  "" always ""
  : always " "
  " " always " "
  "--cli" always "--cli"
Line 327
  ( always {!<=-1,!>=2}
  FILELIST always "cppcheck-addon-ctu-file-list"
  sizeof always 29
  ( always 29
  FILELIST always "cppcheck-addon-ctu-file-list"
  - always 28
  1 always 1
  " --file-list " always " --file-list "
  : always " "
  " " always " "
Line 331
  ! always {!<=-1,!>=2}
  redirect always "2>&1"
  & {lifetime[Address]=(result),!0}
  result always size=0
Line 332
  "Failed to execute addon (command: '" always "Failed to execute addon (command: '"
  " " always " "
  "'). Exitcode is nonzero." always "'). Exitcode is nonzero."
Line 333
  ( always !<=-1
  > always {!<=-1,!>=2}
  2 always 2
Line 334
  "\n" always "\n"
  "\nOutput:\n" always "\nOutput:\n"
  result {>=size=3,!<=size=2}
Line 335
  0 always 0
  ( always !<=-1
  "\n\r" always "\n\r"
Line 337
  nullptr always 0
Line 343
  line possible size=0
Line 344
  0 always 0
  9 always 9
  "Checking " always "Checking "
  0 always 0
  9 always 9
  != always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  line always !size=0
  0 always 0
  != always {!<=-1,!>=2}
  '{' always 123
Line 345
  ( always !<=-1
  '\n' always 10
  + always !<=0
  1 always 1
Line 346
  nullptr always 0
  "Failed to execute '" always "Failed to execute '"
  " " always " "
  "'. " always "'. "
Line 357
  ";" always ";"
Line 358
  "-D" always "-D"
  " " always " "
Line 363
  useGlobalSuppressions always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 366
  mExitCode always !<=-1
  0 always 0
Line 367
  mUseGlobalSuppressions always {!<=-1,!>=2}
  useGlobalSuppressions always {!<=-1,!>=2}
Line 368
  mTooManyConfigs always {!<=-1,!>=2}
  false always 0
Line 369
  mSimplify always {!<=-1,!>=2}
  true always 1
Line 375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 376
  mFileInfo always !size=0
Line 377
  mFileInfo always !size=0
Line 384
  Version {"2.8",lifetime[Object]=(Version)}
Line 389
  ExtraVersion {"",lifetime[Object]=(ExtraVersion)}
Line 392
  ( always {!<=-1,!>=2}
Line 395
  line possible size=0
Line 396
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  line always !size=0
  0 always 0
  == always {!<=-1,!>=2}
  ' ' always 32
  || always {!<=-1,!>=2}
  line always !size=0
  0 always 0
  == always {!<=-1,!>=2}
  '`' always 96
  || always {!<=-1,!>=2}
  0 always 0
  == always {!<=-1,!>=2}
  '-' always 45
Line 399
  :: always !<=-1
  pos3 always !<=-1
  pos3 always !<=-1
  = always !<=-1
  line always !size=0
  ( always !<=-1
  ": error: " always ": error: "
Line 400
  pos3 always !<=-1
  == always {!<=-1,!>=2}
Line 401
  pos3 always !<=-1
  = always !<=-1
  line always !size=0
  ( always !<=-1
  ": fatal error:" always ": fatal error:"
Line 402
  && always {!<=-1,!>=2}
  pos3 always !<=-1
  == always {!<=-1,!>=2}
Line 403
  pos3 always !<=-1
  = always !<=-1
  line always !size=0
  ( always !<=-1
  ": warning:" always ": warning:"
Line 404
  pos3 always !<=-1
  == always {!<=-1,!>=2}
Line 408
  pos2 always !<=-1
  = always !<=-1
  line always !size=0
  ( always !<=-1
  ":" always ":"
  pos3 always !<=-1
  - always !<=-1
  1 always 1
Line 409
  pos1 always !<=-1
  = always !<=-1
  line always !size=0
  ( always !<=-1
  ":" always ":"
  pos2 {!<=-1,>=symbolic=(pos3),<=symbolic=(pos3-1)}
  - always !<=-1
  1 always 1
Line 411
  pos1 always !<=-1
  >= always {!<=-1,!>=2}
  pos2 {!<=-1,>=symbolic=(pos3),<=symbolic=(pos3-1)}
  || always {!<=-1,!>=2}
  pos2 {!<=-1,!<=symbolic=(pos1),>=symbolic=(pos1+1)}
  >= always {!<=-1,!>=2}
  pos3 always !<=-1
Line 414
  0 always 0
  pos1 {!<=-1,!>=symbolic=(pos2),<=symbolic=(pos2-1)}
Line 415
  pos1 {!<=-1,!>=symbolic=(pos2),<=symbolic=(pos2-1)}
  + always !<=0
  1 always 1
  pos2 {!<=-1,!<=symbolic=(pos1),>=symbolic=(pos1+1),!>=symbolic=(pos3),<=symbolic=(pos3-1)}
  - always !<=0
  pos1 {!<=-1,!>=symbolic=(pos2),<=symbolic=(pos2-1)}
  - always !<=-1
  1 always 1
Line 416
  pos2 {!<=-1,!<=symbolic=(pos1),>=symbolic=(pos1+1),!>=symbolic=(pos3),<=symbolic=(pos3-1)}
  + always !<=0
  1 always 1
  pos3 {!<=-1,!<=symbolic=(pos2),>=symbolic=(pos2+1)}
  - always !<=0
  pos2 {!<=-1,!<=symbolic=(pos1),>=symbolic=(pos1+1),!>=symbolic=(pos3),<=symbolic=(pos3-1)}
  - always !<=-1
  1 always 1
Line 417
  ( always !<=-1
  ":" always ":"
  pos3 {!<=-1,!<=symbolic=(pos2),>=symbolic=(pos2+1)}
  + always !<=0
  1 always 1
  + always !<=1
  2 always 2
Line 422
  ( {lifetime[Object]=(linenr),!0}
Line 423
  . always !<=-1
  column always !<=-1
  = always !<=-1
  ( {lifetime[Object]=(colnr),!0}
Line 424
  locationList always size=0
Line 425
  locationList always size=1
Line 427
  :: always 1
  error always 1
Line 429
  "syntaxError" always "syntaxError"
Line 430
  :: always 0
  normal always 0
Line 432
  pos3 {!<=-1,!<=symbolic=(pos2),>=symbolic=(pos2+1)}
  10 always 10
  ": warning:" always ": warning:"
  == always {!<=-1,!>=2}
  0 always 0
Line 439
  return always {!<=-1,!>=2}
  true always 1
Line 441
  return always {!<=-1,!>=2}
  false always 0
Line 444
  ( always !<=-1
Line 446
  . always {!<=-1,!>=2}
  clang always {!<=-1,!>=2}
Line 447
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  quiet always {!<=-1,!>=2}
Line 448
  "Checking " always "Checking "
  "..." always "..."
  :: always 32
  FgGreen always 32
Line 450
  ( always {!<=-1,!>=2}
  "-x c++" always "-x c++"
  : always "-x c"
  "-x c" always "-x c"
Line 451
  ( always {!<=-1,!>=2}
  . always !size=0
  "" always ""
Line 452
  ".clang-cmd" always ".clang-cmd"
Line 453
  ".clang-stderr" always ".clang-stderr"
Line 454
  ".clang-ast" always ".clang-ast"
Line 463
  " " always " "
Line 464
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 465
  "-std=" always "-std="
  . always !size=0
  " " always " "
Line 468
  "-I" always "-I"
  " " always " "
Line 472
  "-fsyntax-only -Xclang -ast-dump -fno-color-diagnostics " always "-fsyntax-only -Xclang -ast-dump -fno-color-diagnostics "
Line 473
  ( always {!<=-1,!>=2}
  "2>&1" always "2>&1"
  "2> " always "2> "
  clangStderr always symbolic=(analyzerInfo+".clang-stderr")
Line 474
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 475
  clangcmd always symbolic=(analyzerInfo+".clang-cmd")
Line 476
  " " always " "
  " " always " "
Line 477
  . always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  quiet always {!<=-1,!>=2}
Line 478
  " " always " "
Line 482
  ! always {!<=-1,!>=2}
  & {lifetime[Address]=(output2),!0}
  output2 always size=0
  || always {!<=-1,!>=2}
  ( always !<=-1
  "TranslationUnitDecl" always "TranslationUnitDecl"
  == always {!<=-1,!>=2}
Line 483
  "Failed to execute '" always "Failed to execute '"
  " " always " "
  " " always " "
  "'" always "'"
Line 484
  return always !<=-1
  0 always 0
Line 489
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 491
  = possible lifetime[Lambda]=(this)
  [ possible lifetime[Lambda]=(this)
  this always !0
Line 494
  ( always {!<=-1,!>=2}
  reportError possible lifetime[Lambda]=(this)
  & {lifetime[Address]=(compilerWarnings),!0}
Line 495
  return always !<=-1
  0 always 0
Line 498
  = possible lifetime[Lambda]=(this)
  [ possible lifetime[Lambda]=(this)
  this always !0
Line 501
  ( always {!<=-1,!>=2}
  reportError possible lifetime[Lambda]=(this)
  & {lifetime[Address]=(compilerWarnings),!0}
Line 502
  return always !<=-1
  0 always 0
Line 505
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 512
  & {lifetime[Address]=(mSettings),!0}
  this always !0
Line 514
  & {lifetime[Address]=(tokenizer),!0}
Line 515
  & {lifetime[Address]=(list),!0}
  this always !0
  & {lifetime[Address]=(mSettings),!0}
Line 516
  . always {!<=-1,!>=2}
  debugnormal always {!<=-1,!>=2}
Line 517
  1 always 1
Line 523
  nullptr always 0
  dumpFile always size=0
Line 525
  "<dump cfg=\"\">" always "<dump cfg=\"\">"
Line 527
  "  <clang-warning file=\"" always "  <clang-warning file=\""
  "\" line=\"" always "\" line=\""
  "\" column=\"" always "\" column=\""
  . always !<=-1
  column always !<=-1
  "\" message=\"" always "\" message=\""
  "\"/>\n" always "\"/>\n"
Line 528
  "  <standards>" always "  <standards>"
Line 529
  "    <c version=\"" always "    <c version=\""
  "\"/>" always "\"/>"
Line 530
  "    <cpp version=\"" always "    <cpp version=\""
  "\"/>" always "\"/>"
Line 531
  "  </standards>" always "  </standards>"
Line 533
  "</dump>" always "</dump>"
Line 534
  "</dumps>" always "</dumps>"
Line 543
  mExitCode always !<=-1
  = always 1
  1 always 1
Line 548
  return always !<=-1
  mExitCode always !<=-1
Line 552
  return always !<=-1
  ( always !<=-1
Line 555
  ( always !<=-1
Line 558
  return always !<=-1
  ( always !<=-1
Line 561
  ( always !<=-1
Line 563
  mUseGlobalSuppressions always {!<=-1,!>=2}
Line 565
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 566
  ';' always 59
Line 567
  . always {!<=-1,!>=2}
  clang always {!<=-1,!>=2}
Line 572
  ( {lifetime[Iterator]=(fs.undefs),lifetime[Object]=(undefs),start=0}
  ( {lifetime[Iterator]=(fs.undefs),lifetime[Object]=(undefs),end=0}
Line 573
  . possible size=0
  ( always !<=-1
  "++" always "++"
  != always {!<=-1,!>=2}
Line 574
  ( always {!<=-1,!>=2}
Line 575
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 576
  ( always {!<=-1,!>=2}
Line 577
  != always {!<=-1,!>=2}
Line 578
  ( always {!<=-1,!>=2}
Line 579
  . always {!<=-1,!>=2}
  clang always {!<=-1,!>=2}
Line 580
  ( possible {lifetime[Iterator]=(temp.mSettings.includePaths),lifetime[Object]=(includePaths)}
  ( {lifetime[Iterator]=(temp.mSettings.includePaths),lifetime[Object]=(includePaths),end=0}
  ( {lifetime[Iterator]=(fs.systemIncludePaths),lifetime[Object]=(systemIncludePaths),start=0}
  ( {lifetime[Iterator]=(fs.systemIncludePaths),lifetime[Object]=(systemIncludePaths),end=0}
Line 581
  return always !<=-1
  ( always !<=-1
Line 584
  returnValue always !<=-1
  returnValue always !<=-1
  = always !<=-1
  ( always !<=-1
Line 586
  return always !<=-1
  returnValue always !<=-1
Line 589
  ( always !<=-1
Line 591
  mExitCode always !<=-1
  = always 0
  0 always 0
Line 594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 595
  . always {!<=-1,!>=2}
  debugwarnings always {!<=-1,!>=2}
  = always 0
  false always 0
Line 597
  ( always {!<=-1,!>=2}
Line 598
  return always !<=-1
  mExitCode always !<=-1
Line 600
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  quiet always {!<=-1,!>=2}
Line 603
  "Checking " always "Checking "
  ' ' always 32
  "..." always "..."
  :: always 32
  FgGreen always 32
Line 605
  . always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
Line 606
  "Defines:" always "Defines:"
Line 609
  ! {!<=-1,!>=2,0}
  undefs possible size=0
  ( {!<=-1,!>=2,1}
Line 610
  ';' always 59
Line 611
  ' ' always 32
Line 613
  "Undefines:" always "Undefines:"
Line 616
  " -I" always " -I"
Line 617
  "Includes:" always "Includes:"
Line 618
  "Platform:" always "Platform:"
Line 623
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 627
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 630
  ( inconclusive lifetime[SubObject]=(mSettings)
  this always !0
Line 635
  files always size=0
  & {lifetime[Address]=(outputList),!0}
Line 639
  err {!<=-1,!>=2,0}
Line 646
  err always {!<=-1,!>=2}
  = always 1
  true always 1
Line 651
  err always {!<=-1,!>=2}
  = always 0
  false always 0
Line 655
  err {!<=-1,!>=2,1,0}
Line 657
  . always {!<=-1,!>=2}
  relativePaths always {!<=-1,!>=2}
Line 661
  1 always 1
Line 663
  callstack always size=1
Line 664
  "" always ""
Line 665
  :: always 1
  error always 1
Line 667
  "syntaxError" always "syntaxError"
Line 668
  :: always 0
  normal always 0
Line 670
  return always !<=-1
  mExitCode always !<=-1
Line 674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 675
  return always !<=-1
  mExitCode always !<=-1
Line 677
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 679
  ( always !<=-1
  '/' always 47
  != always {!<=-1,!>=2}
Line 680
  ( always !<=-1
  '/' always 47
  + always !<=0
  1 always 1
Line 683
  fileNameHash always !<=-1
  fileNameHash always !<=-1
  = always !<=-1
  filename possible symbolic=(filename2)
Line 684
  . always !size=0
  filename2 possible symbolic=(filename)
  0 always 0
  filename2 possible symbolic=(filename)
  ( always !<=-1
  '.' always 46
  "_" always "_"
  fileNameHash always !<=-1
  ".plist" always ".plist"
Line 686
  ( always "2.8"
Line 692
  dumpFile always size=0
Line 696
  . always {!<=-1,!>=2}
  dump always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 702
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 705
  "2.8" always "2.8"
Line 706
  ( always {!<=-1,!>=2}
  :: always 2
  warning always 2
  'w' always 119
  : always 32
  ' ' always 32
Line 707
  ( always {!<=-1,!>=2}
  :: always 3
  style always 3
  's' always 115
  : always 32
  ' ' always 32
Line 708
  ( always {!<=-1,!>=2}
  :: always 4
  performance always 4
  'p' always 112
  : always 32
  ' ' always 32
Line 709
  ( always {!<=-1,!>=2}
  :: always 5
  portability always 5
  'p' always 112
  : always 32
  ' ' always 32
Line 710
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
  'i' always 105
  : always 32
  ' ' always 32
Line 715
  checksum always !<=-1
  = always !<=-1
  ( always !<=-1
Line 717
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  checksum {symbolic=(preprocessor.calculateChecksum(tokens1,toolinfo.str())),!<=-1}
  & {lifetime[Address]=(errors),!0}
  errors always size=0
Line 718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 719
  errors always !size=0
Line 720
  errors always !size=0
Line 722
  return always !<=-1
  mExitCode always !<=-1
Line 728
  & {lifetime[Address]=(tokens1),!0}
Line 730
  & {lifetime[Address]=(tokens1),!0}
Line 733
  . always {!<=-1,!>=2}
  checkAllConfigurations always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  force always {!<=-1,!>=2}
Line 734
  "Preprocessor::getConfigs" always "Preprocessor::getConfigs"
  & {lifetime[Address]=(s_timerResults),!0}
Line 740
  . always {!<=-1,!>=2}
  checkConfiguration always {!<=-1,!>=2}
Line 742
  true always 1
Line 744
  return always !<=-1
  0 always 0
Line 749
  != always {!<=-1,!>=2}
  "define" always "define"
Line 755
  0 always 0
  8 always 8
  "#define " always "#define "
  == always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  0 always 0
  9 always 9
  "#include " always "#include "
  == always {!<=-1,!>=2}
  0 always 0
Line 756
  "#line " always "#line "
  . always !<=-1
  linenr always !<=-1
  " \"" always " \""
  "\"\n" always "\"\n"
  '\n' always 10
Line 758
  & {lifetime[Address]=(mSettings),!0}
  this always !0
Line 760
  ( always {!<=-1,!>=2}
Line 761
  "define" always "define"
Line 765
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  force always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
Line 766
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
Line 767
  ( always !<=-1
Line 769
  mTooManyConfigs always {!<=-1,!>=2}
  = always 1
  true always 1
Line 774
  = always 0
  0 always 0
Line 775
  hasValidConfig always {!<=-1,!>=2}
  hasValidConfig always {!<=-1,!>=2}
  = always 0
  false always 0
Line 779
  ( always {!<=-1,!>=2}
Line 784
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  force always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
Line 787
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 788
  = always !size=0
  . always !size=0
Line 789
  ";" always ";"
Line 790
  ";" always ";"
Line 791
  ( possible lifetime[Iterator]=(v1)
  ( {lifetime[Iterator]=(v1),start=0}
  ( {lifetime[Iterator]=(v1),end=0}
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(v1),end=0}
Line 792
  ";" always ";"
Line 799
  . always {!<=-1,!>=2}
  preprocessOnly always {!<=-1,!>=2}
Line 800
  "Preprocessor::getcode" always "Preprocessor::getcode"
  & {lifetime[Address]=(s_timerResults),!0}
Line 801
  true always 1
Line 804
  0 always 0
  5 always 5
  "#file" always "#file"
  == always {!<=-1,!>=2}
  0 always 0
Line 805
  ( possible lifetime[Iterator]=(codeWithoutCfg)
  0U always 0
  "//" always "//"
Line 806
  :: always !<=-1
  pos always !<=-1
  pos always !<=-1
  = always 0
  0 always 0
Line 807
  pos always !<=-1
  = always !<=-1
  ( always !<=-1
  "\n#file" always "\n#file"
  pos {!<=-1,0}
  != always {!<=-1,!>=2}
Line 808
  ( possible lifetime[Iterator]=(codeWithoutCfg)
  pos always !<=-1
  + always !<=0
  1U always 1
  "//" always "//"
Line 809
  pos always !<=-1
  = always 0
  0 always 0
Line 810
  pos always !<=-1
  = always !<=-1
  ( always !<=-1
  "\n#endfile" always "\n#endfile"
  pos {!<=-1,0}
  != always {!<=-1,!>=2}
Line 811
  ( possible lifetime[Iterator]=(codeWithoutCfg)
  pos always !<=-1
  + always !<=0
  1U always 1
  "//" always "//"
Line 812
  pos always !<=-1
  = always 0
  0 always 0
Line 813
  pos always !<=-1
  = always !<=-1
  ( always !<=-1
  pos {!<=-1,0}
  != always {!<=-1,!>=2}
Line 814
  pos always !<=-1
  = always 32
  ' ' always 32
Line 819
  & {lifetime[Address]=(mSettings),!0}
  this always !0
Line 820
  & {lifetime[Address]=(preprocessor),!0}
Line 821
  != always {!<=-1,!>=2}
  :: always 0
  SHOWTIME_NONE always 0
Line 822
  & {lifetime[Address]=(s_timerResults),!0}
Line 827
  "Tokenizer::createTokens" always "Tokenizer::createTokens"
  . possible 0
  & {lifetime[Address]=(s_timerResults),!0}
Line 828
  true always 1
Line 831
  hasValidConfig always {!<=-1,!>=2}
  = always 1
  true always 1
Line 834
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  quiet always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  1 always 1
Line 837
  "Checking " always "Checking "
  ": " always ": "
  "..." always "..."
  :: always 32
  FgGreen always 32
Line 840
  ! always {!<=-1,!>=2}
Line 844
  . always {!<=-1,!>=2}
  checkConfiguration always {!<=-1,!>=2}
Line 851
  "Tokenizer::simplifyTokens1" always "Tokenizer::simplifyTokens1"
  & {lifetime[Address]=(s_timerResults),!0}
Line 852
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 854
  ! always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
Line 858
  . always {!<=-1,!>=2}
  dump always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 859
  "<dump cfg=\"" always "<dump cfg=\""
  "\">" always "\">"
Line 860
  "  <standards>" always "  <standards>"
Line 861
  "    <c version=\"" always "    <c version=\""
  "\"/>" always "\"/>"
Line 862
  "    <cpp version=\"" always "    <cpp version=\""
  "\"/>" always "\"/>"
Line 863
  "  </standards>" always "  </standards>"
Line 866
  "</dump>" always "</dump>"
Line 873
  . always {!<=-1,!>=2}
  force always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  1 always 1
Line 874
  checksum always !<=-1
  = always !<=-1
  ( always !<=-1
Line 875
  ( possible lifetime[Iterator]=(checksums)
  checksum {symbolic=(tokenizer.list.calculateChecksum()),!<=-1}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(checksums),end=0}
Line 876
  . always {!<=-1,!>=2}
  debugwarnings always {!<=-1,!>=2}
Line 880
  checksum {symbolic=(tokenizer.list.calculateChecksum()),!<=-1}
Line 887
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 888
  ( {lifetime[Object]=(filename),!0}
  & {lifetime[Address]=(mSettings),!0}
Line 891
  mSimplify always {!<=-1,!>=2}
  && always 0
  ( always 0
  "simple" always "simple"
Line 892
  "Handling of \"simple\" rules is deprecated and will be removed in Cppcheck 2.5." always "Handling of \"simple\" rules is deprecated and will be removed in Cppcheck 2.5."
Line 895
  "Tokenizer::simplifyTokenList2" always "Tokenizer::simplifyTokenList2"
  & {lifetime[Address]=(s_timerResults),!0}
Line 896
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 898
  ! always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
Line 901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 902
  "simple" always "simple"
Line 907
  ( always {!<=-1,!>=2}
  "\'\'" always "\'\'"
  : always "\'\'"
  mCurrentConfig always !size=0
  " : [" always " : ["
  ':' always 58
  "] " always "] "
Line 914
  & {lifetime[Address]=(list),!0}
Line 915
  locationList always size=0
Line 917
  0 always 0
  0 always 0
Line 918
  0 always 0
  0 always 0
Line 919
  locationList always size=0
Line 920
  != always {!<=-1,!>=2}
Line 921
  locationList always size=1
Line 925
  :: always 1
  error always 1
Line 928
  :: always 0
  normal always 0
Line 930
  == always {!<=-1,!>=2}
  :: always 1
  error always 1
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  . always !1
Line 935
  ! always {!<=-1,!>=2}
  hasValidConfig always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
Line 937
  = always "This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details."
  "This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details." always "This file is not analyzed. Cppcheck failed to extract a valid configuration. Use -v for more details."
Line 938
  msg always size=101
  "\nThis file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:" always "\nThis file is not analyzed. Cppcheck failed to extract a valid configuration. The tested configurations have these preprocessor errors:"
Line 940
  '\n' always 10
Line 945
  locationList always size=0
Line 946
  locationList always size=1
Line 948
  :: always 6
  information always 6
Line 950
  "noValidConfiguration" always "noValidConfiguration"
Line 951
  :: always 0
  normal always 0
Line 957
  "</dumps>" always "</dumps>"
Line 969
  mExitCode always !<=-1
  = always 1
  1 always 1
Line 972
  "CheckUnusedFunctions" always "CheckUnusedFunctions"
Line 977
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  jointSuppressionReport always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
  || always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checkConfiguration always {!<=-1,!>=2}
Line 978
  ( always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 983
  return always !<=-1
  mExitCode always !<=-1
Line 989
  "Bailing out from checking " always "Bailing out from checking "
  " since there was an internal error: " always " since there was an internal error: "
Line 991
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
Line 992
  0 always 0
  0 always 0
Line 993
  1 always 1
Line 995
  callstack always size=1
Line 997
  :: always 6
  information always 6
Line 999
  "internalError" always "internalError"
Line 1000
  :: always 0
  normal always 0
Line 1015
  "raw" always "raw"
Line 1026
  ( always {!<=-1,!>=2}
Line 1029
  ( always 0
Line 1032
  "::runChecks" always "::runChecks"
  & {lifetime[Address]=(s_timerResults),!0}
Line 1033
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(mSettings),!0}
  this always !0
Line 1036
  . always {!<=-1,!>=2}
  clang always {!<=-1,!>=2}
Line 1042
  & {lifetime[Address]=(tokenizer),!0}
Line 1044
  fi1 always !0
Line 1045
  "ctu" always "ctu"
Line 1049
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(mSettings),!0}
Line 1050
  != always {!<=-1,!>=2}
  nullptr always 0
Line 1051
  fi always !0
Line 1056
  "normal" always "normal"
Line 1061
  ( always {!<=-1,!>=2}
Line 1069
  tokenlist possible "simple"@85
Line 1071
  return always {!<=-1,!>=2}
  false always 0
Line 1211
  tokenlist possible {"normal"@52,"raw"@53,"define"@70,"simple"@87}
Line 1342
  ! {!<=-1,!>=2,0}
  dumpFile possible size=0
  ( {!<=-1,!>=2,1}
Line 1343
  dumpFile always !size=0
Line 1344
  f always {{,size=1}
Line 1345
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  dump always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1346
  ( {lifetime[Object]=(dumpFile),!0}
Line 1352
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  files possible {{@46,size=1@46}
  ( {!<=-1,!>=2,0@46}
Line 1357
  files {!size=0,{@46,size=1@46}
  ( {!<=0,1@46}
  >= always {!<=-1,!>=2}
  2 always 2
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  files {!size=0,!>=size=2,<=size=1}
  0 always 0
  ".ctu-info" always ".ctu-info"
Line 1358
  files {!size=0,>=size=2}
  0 always 0
  FILELIST {"cppcheck-addon-ctu-file-list",lifetime[Object]=(FILELIST)}
Line 1364
  . always !size=0
Line 1367
  ! {!<=-1,!>=2,0}
  failedToGetAddonInfo possible size=0
  ( {!<=-1,!>=2,1}
Line 1368
  :: always 31
  FgRed always 31
Line 1369
  mExitCode always !<=-1
  = always 1
  1 always 1
Line 1372
  != always {!<=-1,!>=2}
  "misra" always "misra"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  ctu always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ".ctu-info" always ".ctu-info"
Line 1376
  ( always {!<=-1,!>=2}
  0 always 0
  fileList always !size=0
Line 1380
  line possible size=0
Line 1381
  0 always 0
  1 always 1
  "{" always "{"
  != always {!<=-1,!>=2}
  0 always 0
Line 1387
  ! always {!<=-1,!>=2}
Line 1394
  obj always symbolic=(res.get<picojson::object>())
  "file" always "file"
  > always {!<=-1,!>=2}
  0 always 0
Line 1395
  "file" always "file"
Line 1396
  "linenr" always "linenr"
Line 1397
  "column" always "column"
Line 1398
  column always symbolic=(obj["column"].get<int64_t>())
Line 1399
  "loc" always "loc"
  > always {!<=-1,!>=2}
  0 always 0
Line 1400
  "loc" always "loc"
Line 1402
  loc always symbolic=(locvalue.get<picojson::object>())
  "file" always "file"
Line 1403
  "linenr" always "linenr"
Line 1404
  "column" always "column"
Line 1405
  "info" always "info"
Line 1406
  info always symbolic=(loc["info"].get<std::string>())
Line 1410
  "addon" always "addon"
  "-" always "-"
  "errorId" always "errorId"
Line 1411
  "message" always "message"
Line 1412
  text always symbolic=(obj["message"].get<std::string>())
Line 1413
  "severity" always "severity"
Line 1414
  severity always symbolic=(obj["severity"].get<std::string>())
Line 1415
  == always {!<=-1,!>=2}
  :: always 0
  none always 0
Line 1417
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
  files possible size=1
  0 always 0
  : always ""
  "" always ""
Line 1423
  ! {!<=-1,!>=2,0}
  fileList possible size=0
  ( {!<=-1,!>=2,1}
Line 1424
  fileList always !size=0
  ( {lifetime[Object]=(fileList),!0}
Line 1429
  ( always {!<=-1,!>=2}
Line 1435
  ctuInfoFiles possible size=0
Line 1441
  ( {lifetime[Object]=(f),!0}
Line 1452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  mTooManyConfigs always {!<=-1,!>=2}
Line 1455
  mTooManyConfigs always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1457
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1461
  ! {!<=-1,!>=2,1,0}
  file possible size=0
  ( {!<=-1,!>=2,0,1}
Line 1468
  "Too many #ifdef configurations - cppcheck only checks " always "Too many #ifdef configurations - cppcheck only checks "
Line 1469
  > always {!<=-1,!>=2}
Line 1470
  " of " always " of "
  numberOfConfigurations {>=symbolic=(mSettings.maxConfigs+1),!<=symbolic=(mSettings.maxConfigs)}
  " configurations. Use --force to check all configurations.\n" always " configurations. Use --force to check all configurations.\n"
Line 1471
  file possible size=0
  ( {!<=-1,!>=2,0,1}
Line 1472
  " configurations. Use --force to check all configurations. For more details, use --enable=information.\n" always " configurations. Use --force to check all configurations. For more details, use --enable=information.\n"
Line 1473
  "The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time." always "The checking of the file will be interrupted because there are too many #ifdef configurations. Checking of all #ifdef configurations can be forced by --force command line option or from GUI preferences. However that may increase the checking time."
Line 1477
  file possible size=0
  ( {!<=-1,!>=2,1,0}
Line 1478
  " For more details, use --enable=information." always " For more details, use --enable=information."
Line 1483
  :: always 6
  information always 6
Line 1485
  "toomanyconfigs" always "toomanyconfigs"
Line 1486
  :: always 0
  normal always 0
Line 1493
  mTooManyConfigs always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1495
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
  && always {!<=-1,!>=2}
  file possible ""@28
  ( always {!<=-1,!>=2}
Line 1499
  ! {!<=-1,!>=2,1,0}
  file possible {""@28,size=0}
  ( {!<=-1,!>=2,0,1}
Line 1507
  :: always 6
  information always 6
Line 1508
  "The configuration '" always "The configuration '"
  "' was not checked because its code equals another one." always "' was not checked because its code equals another one."
Line 1509
  "purgedConfiguration" always "purgedConfiguration"
Line 1510
  :: always 0
  normal always 0
Line 1519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1522
  . always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
Line 1523
  ( always {!<=-1,!>=2}
Line 1527
  ( possible lifetime[Iterator]=(mErrorList)
  ( {lifetime[Iterator]=(mErrorList),start=0}
  ( {lifetime[Iterator]=(mErrorList),end=0}
  errmsg always !size=0
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mErrorList),end=0}
Line 1530
  . always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
Line 1534
  mUseGlobalSuppressions always {!<=-1,!>=2}
Line 1535
  ( always {!<=-1,!>=2}
  errorMessage always symbolic=(msg.toSuppressionsErrorMessage())
Line 1539
  ( always {!<=-1,!>=2}
  errorMessage always symbolic=(msg.toSuppressionsErrorMessage())
Line 1544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1545
  mExitCode always !<=-1
  = always 1
  1 always 1
Line 1552
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 1560
  c possible 31@42
Line 1563
  , always !<=-1
  value always !<=-1
Line 1565
  value always !<=-1
Line 1571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  errorMessage always symbolic=(msg.toSuppressionsErrorMessage())
Line 1581
  :: always 2
  warning always 2
Line 1582
  :: always 3
  style always 3
Line 1583
  :: always 5
  portability always 5
Line 1584
  :: always 4
  performance always 4
Line 1585
  :: always 6
  information always 6
Line 1587
  "" always ""
  "" always ""
Line 1589
  mTooManyConfigs always {!<=-1,!>=2}
  = always 1
  true always 1
Line 1590
  "" always ""
  0U always 0
Line 1593
  = {lifetime[Iterator]=(Check::instances()),start=0}
  ( {lifetime[Iterator]=(Check::instances()),start=0}
  it possible {lifetime[Iterator]=(Check::instances()),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(Check::instances()),end=0}
  it possible lifetime[Iterator]=(Check::instances())
Line 1594
  it {lifetime[Iterator]=(Check::instances()),!end=0}
  this always !0
  & {lifetime[Address]=(s),!0}
Line 1596
  this always !0
  & {lifetime[Address]=(s),!0}
Line 1603
  allIncludes possible size=0
  + possible size=3
  "-I\"" always "-I\""
  "\" " always "\" "
Line 1611
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 1614
  "-quiet -checks=*,-clang-analyzer-*,-llvm* \"" always "-quiet -checks=*,-clang-analyzer-*,-llvm* \""
  "\" -- " always "\" -- "
  allDefines always symbolic=(getDefinesFlags(fileSettings.defines))
Line 1616
  ! always {!<=-1,!>=2}
  exe always "clang-tidy"
  args always symbolic=("-quiet -checks=*,-clang-analyzer-*,-llvm* \""+fileSettings.filename+"\" -- "+allIncludes+allDefines)
  "" always ""
  & {lifetime[Address]=(output),!0}
  output always size=0
Line 1617
  "Failed to execute '" always "Failed to execute '"
  exe {"clang-tidy",lifetime[Object]=(exe)}
  "'" always "'"
Line 1625
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 1626
  . always !size=0
  "" always ""
Line 1627
  ".clang-tidy-cmd" always ".clang-tidy-cmd"
Line 1632
  ( always !<=-1
  "error" always "error"
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !<=-1
  "warning" always "warning"
  == always {!<=-1,!>=2}
  :: always symbolic=(line.find("error"))
Line 1635
  endColumnPos always !<=-1
  endColumnPos always !<=-1
  = always !<=-1
  ( always !<=-1
  ": error:" always ": error:"
Line 1636
  endColumnPos {symbolic=(line.find(": error:")),!<=-1}
  == always {!<=-1,!>=2}
Line 1637
  endColumnPos always !<=-1
  = always !<=-1
  ( always !<=-1
  ": warning:" always ": warning:"
Line 1640
  endLinePos always !<=-1
  = always !<=-1
  ( always !<=-1
  ":" always ":"
  endColumnPos {symbolic=(line.find(": error:")),symbolic=(line.find(": warning:")),!<=-1}
  - always !<=-1
  1 always 1
Line 1641
  endNamePos always !<=-1
  = always !<=-1
  ( always !<=-1
  ":" always ":"
  endLinePos {symbolic=(line.rfind(":",endColumnPos-1)),!<=-1}
  - always !<=-1
  1 always 1
Line 1642
  endMsgTypePos always !<=-1
  = always !<=-1
  ( always !<=-1
  ':' always 58
  endColumnPos {symbolic=(line.find(": error:")),symbolic=(line.find(": warning:")),!<=-1}
  + always !<=1
  2 always 2
Line 1643
  endErrorPos always !<=-1
  = always !<=-1
  ( always !<=-1
  '[' always 91
Line 1644
  endLinePos {symbolic=(line.rfind(":",endColumnPos-1)),!<=-1}
  == always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  endNamePos {symbolic=(line.rfind(":",endLinePos-1)),!<=-1}
  == always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  endMsgTypePos {symbolic=(line.find(':',endColumnPos+2)),!<=-1}
  == always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  endErrorPos always !<=-1
  == always {!<=-1,!>=2}
Line 1647
  endNamePos {symbolic=(line.rfind(":",endLinePos-1)),!<=-1}
  + always !<=0
  1 always 1
  endLinePos {symbolic=(line.rfind(":",endColumnPos-1)),!<=-1}
  - always !<=-1
  endNamePos {symbolic=(line.rfind(":",endLinePos-1)),!<=-1}
  - always !<=-1
  1 always 1
Line 1648
  endLinePos always !<=-1
  + always !<=0
  1 always 1
  endColumnPos always !<=-1
  - always !<=-1
  endLinePos always !<=-1
  - always !<=-1
  1 always 1
Line 1649
  endMsgTypePos always !<=-1
  + always !<=0
  1 always 1
  endErrorPos always !<=-1
  - always !<=-1
  endMsgTypePos always !<=-1
  - always !<=-1
  1 always 1
Line 1650
  endErrorPos always !<=-1
  ( always !<=-1
Line 1652
  0 always 0
  endNamePos always !<=-1
Line 1653
  ( {lifetime[Object]=(lineNumString),!0}
Line 1654
  ( {lifetime[Object]=(columnNumString),!0}
Line 1658
  lineNumber always symbolic=(std::atol(lineNumString.c_str()))
  column always symbolic=(std::atol(columnNumString.c_str()))
Line 1660
  "clang-tidy-" always "clang-tidy-"
  1 always 1
  ( always !<=-1
  - always !<=-1
  2 always 2
Line 1661
  ( always !<=-1
  "performance" always "performance"
  != always {!<=-1,!>=2}
Line 1662
  = always 4
  :: always 4
  performance always 4
Line 1663
  ( always !<=-1
  "portability" always "portability"
  != always {!<=-1,!>=2}
Line 1664
  = always 5
  :: always 5
  portability always 5
Line 1665
  ( always !<=-1
  "cert" always "cert"
  != always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always !<=-1
  "misc" always "misc"
  != always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always !<=-1
  "unused" always "unused"
  != always {!<=-1,!>=2}
Line 1666
  = always 2
  :: always 2
  warning always 2
Line 1668
  = always 3
  :: always 3
  style always 3
Line 1676
  ( always {!<=-1,!>=2}
Line 1678
  errors always {!<=-1,!>=2}
  errors always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1685
  fi2 always symbolic=(dynamic_cast<const CTU::FileInfo*>(fi))
Line 1686
  ( possible {lifetime[Iterator]=(ctu.functionCalls),lifetime[Object]=(functionCalls)}
  ( {lifetime[Iterator]=(ctu.functionCalls),lifetime[Object]=(functionCalls),end=0}
  fi2 {symbolic=(dynamic_cast<const CTU::FileInfo*>(fi)),!0}
  ( {lifetime[Iterator]=(fi2->functionCalls),start=0}
  fi2 {symbolic=(dynamic_cast<const CTU::FileInfo*>(fi)),!0}
  ( {lifetime[Iterator]=(fi2->functionCalls),end=0}
Line 1687
  ( possible {lifetime[Iterator]=(ctu.nestedCalls),lifetime[Object]=(nestedCalls)}
  ( {lifetime[Iterator]=(ctu.nestedCalls),lifetime[Object]=(nestedCalls),end=0}
  fi2 {symbolic=(dynamic_cast<const CTU::FileInfo*>(fi)),!0}
  ( {lifetime[Iterator]=(fi2->nestedCalls),start=0}
  fi2 {symbolic=(dynamic_cast<const CTU::FileInfo*>(fi)),!0}
  ( {lifetime[Iterator]=(fi2->nestedCalls),end=0}
Line 1691
  errors always {!<=-1,!>=2}
  |= always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(ctu),!0}
  this always !0
Line 1692
  return always {!<=-1,!>=2}
  errors always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mExitCode always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 1698
  ( always {!<=-1,!>=2}
Line 1700
  ( always {!<=-1,!>=2}
  :: always 0
  unusedFunction always 0
Line 1701
  this always !0
Line 1706
  "/files.txt" always "/files.txt"
Line 1709
  filesTxtLine possible size=0
Line 1710
  firstColon always !<=-1
  = always !<=-1
  ( always !<=-1
  ':' always 58
Line 1711
  firstColon always !<=-1
  == always {!<=-1,!>=2}
Line 1713
  lastColon always !<=-1
  = always !<=-1
  ( always !<=-1
  ':' always 58
Line 1714
  firstColon always !<=-1
  == always {!<=-1,!>=2}
  lastColon always !<=-1
Line 1716
  '/' always 47
  0 always 0
  firstColon always {!<=-1,!symbolic=(lastColon)}
Line 1720
  ( {lifetime[Object]=(xmlfile),!0}
Line 1721
  != always {!<=-1,!>=2}
Line 1725
  == always {!<=-1,!>=2}
  nullptr always 0
Line 1728
  rootNode always !0
Line 1729
  "FileInfo" always "FileInfo"
  != always {!<=-1,!>=2}
  0 always 0
Line 1731
  "check" always "check"
Line 1732
  ! always {!<=-1,!>=2}
Line 1734
  checkClassAttr always !0
  "ctu" always "ctu"
  == always {!<=-1,!>=2}
  0 always 0
Line 1739
  checkClassAttr {symbolic=(check->name()),!0}
  == {!<=-1,!>=2,1}
Line 1750
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(ctuFileInfo),!0}
  this always !0
Line 1756
  ( always {!<=-1,!>=2}
Line 1758
  return always {!<=-1,!>=2}
  . always !<=-1
  jobs always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  :: always 0
  unusedFunction always 0
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,6@32,2@62,3@63,4@64,5@65}
  flag possible {6@32,2@62,3@63,4@64,5@65}
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,2@23,3@24,5@25,4@26,6@27}
  flag possible {2@23,3@24,5@25,4@26,6@27}
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,0@13}
  flag possible 0@13
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
