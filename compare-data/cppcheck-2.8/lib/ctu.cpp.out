

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var2 , const std :: string & errorMsg@var3 , Type type@var4 = INTERNAL ) ;
38: const Token * token@var5 ;
39: std :: string errorMessage@var6 ;
40: Type type@var7 ;
41: std :: string id@var8 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var9 ) ;
117: static SeverityType fromString ( const std :: string & severity@var10 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var11 ) : id@var12 ( cweId@var11 ) { }
122: unsigned short id@var12 ;
123: } ;

##file cppcheck-2.8/lib/check.h

1:
|
29:
30: namespace tinyxml2 {
31: class XMLElement ;
32: }
33:
34: namespace CTU {
35: class FileInfo ;
36: }
37:
38: namespace ValueFlow {
39: class Value ;
40: }
41:
42: class Settings ;
43: class Token ;
44: class ErrorLogger ;
45: class ErrorMessage ;
46: class Tokenizer ;
47:
|
57:
58: class Check {
59: public:
60:
61: explicit Check ( const std :: string & aname@var13 ) ;
62:
63:
64: Check ( const std :: string & aname@var14 , const Tokenizer * tokenizer@var15 , const Settings * settings@var16 , ErrorLogger * errorLogger@var17 )
65: : mTokenizer@var28 ( tokenizer@var15 ) , mSettings@var29 ( settings@var16 ) , mErrorLogger@var30 ( errorLogger@var17 ) , mName@var63 ( aname@var14 ) { }
66:
67: virtual ~ Check ( ) {
68: if (@expr1073744482 !@expr1073744483 mTokenizer@var28 ) {
69: instances (@expr1073744484 ) .@expr1073744485 remove (@expr1073744486 this@expr1073744487 ) ; }
70: }
71:
72:
73: static std :: list < Check * > & instances ( ) ;
74:
75:
76: virtual void runChecks ( const Tokenizer * , const Settings * , ErrorLogger * ) = 0 ;
77:
78:
79: virtual void getErrorMessages ( ErrorLogger * errorLogger@var18 , const Settings * settings@var19 ) const = 0 ;
80:
81:
82: const std :: string & name ( ) const {
83: return mName@var63 ;
84: }
85:
86:
87: virtual std :: string classInfo ( ) const = 0 ;
88:
|
93:
94: static void reportError ( const ErrorMessage & errmsg@var20 ) ;
95:
96:
97: class FileInfo {
98: public:
99: FileInfo ( ) { }
100: virtual ~ FileInfo ( ) { }
101: virtual std :: string toString ( ) const {
102: return std ::@expr1073744488 string (@expr1073744489 ) ;
103: }
104: } ;
105:
106: virtual FileInfo * getFileInfo ( const Tokenizer * tokenizer@var21 , const Settings * settings@var22 ) const {
107: (@expr1073744490 void ) tokenizer@var21 ;
108: (@expr1073744491 void ) settings@var22 ;
109: return nullptr ;
110: }
111:
112: virtual FileInfo * loadFileInfoFromXml ( const tinyxml2 :: XMLElement * xmlElement@var23 ) const {
113: (@expr1073744492 void ) xmlElement@var23 ;
114: return nullptr ;
115: }
116:
117:
118: virtual bool analyseWholeProgram ( const CTU :: FileInfo * ctu@var24 , const std :: list < FileInfo * > & fileInfo@var25 , const Settings & , ErrorLogger & ) {
119: (@expr1073744493 void ) ctu@var24 ;
120: (@expr1073744494 void ) fileInfo@var25 ;
121:
122:
123: return false ;
124: }
125:
126: static std :: string getMessageId ( const ValueFlow :: Value & value@var26 , const char id@var27 [ ] ) ;
127:
128: protected:
129: const Tokenizer * const mTokenizer@var28 ;
130: const Settings * const mSettings@var29 ;
131: ErrorLogger * const mErrorLogger@var30 ;
132:
133:
134: void reportError ( const Token * tok@var31 , const Severity :: SeverityType severity@var32 , const std :: string & id@var33 , const std :: string & msg@var34 ) {
135: reportError (@expr1073744495 tok@var31 , severity@var32 , id@var33 , msg@var34 , CWE (@expr1073744496 0U ) , Certainty ::@expr1073744497 normal ) ;
136: }
137:
138:
139: void reportError ( const Token * tok@var35 , const Severity :: SeverityType severity@var36 , const std :: string & id@var37 , const std :: string & msg@var38 , const CWE & cwe@var39 , Certainty :: CertaintyLevel certainty@var40 ) {
140: const std ::@expr1073744498 list < const Token *@expr1073744499 > callstack@var41 (@expr1073744500 1 , tok@var35 ) ;
141: reportError (@expr1073744501 callstack@var41 , severity@var36 , id@var37 , msg@var38 , cwe@var39 , certainty@var40 ) ;
142: }
143:
144:
145: void reportError ( const std :: list < const Token * > & callstack@var42 , Severity :: SeverityType severity@var43 , const std :: string & id@var44 , const std :: string & msg@var45 ) {
146: reportError (@expr1073744502 callstack@var42 , severity@var43 , id@var44 , msg@var45 , CWE (@expr1073744503 0U ) , Certainty ::@expr1073744504 normal ) ;
147: }
148:
149:
150: void reportError ( const std :: list < const Token * > & callstack@var46 , Severity :: SeverityType severity@var47 , const std :: string & id@var48 , const std :: string & msg@var49 , const CWE & cwe@var50 , Certainty :: CertaintyLevel certainty@var51 ) ;
151:
152: void reportError ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var52 , Severity :: SeverityType severity@var53 , const char id@var54 [ ] , const std :: string & msg@var55 , const CWE & cwe@var56 , Certainty :: CertaintyLevel certainty@var57 ) ;
153:
154: std :: list < std :: pair < const Token * , std :: string > > getErrorPath ( const Token * errtok@var58 , const ValueFlow :: Value * value@var59 , const std :: string & bug@var60 ) const ;
155:
|
159:
160: bool wrongData ( const Token * tok@var61 , const char * str@var62 ) ;
161:
162:
163: void operator= ( const Check & ) = delete ;
164: Check ( const Check & ) = delete ;
165: private:
166: const std :: string mName@var63 ;
167: } ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var64 ;
43: std :: string errorId@var65 ;
44: void setFileName ( const std :: string & s@var66 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var70 ;
47: }
48: int lineNumber@var67 ;
49: Certainty :: CertaintyLevel certainty@var68 ;
50: std :: string symbolNames@var69 ;
51: private:
52: std :: string mFileName@var70 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var104 ( NO_LINE ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
57: Suppression ( const Suppression & other@var71 ) {
58: *@expr1073744505 this@expr1073744506 =@expr1073744507 other@var71 ;
59: }
60: Suppression ( const std :: string & id@var72 , const std :: string & file@var73 , int line@var74 = NO_LINE ) : errorId@var102 ( id@var72 ) , fileName@var103 ( file@var73 ) , lineNumber@var104 ( line@var74 ) , hash@var106 ( 0 ) , thisAndNextLine@var107 ( false ) , matched@var108 ( false ) , checked@var109 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var75 ) {
63: errorId@var102 =@expr1073744508 other@var75 .@expr1073744509 errorId@var76 ;
64: fileName@var103 =@expr1073744510 other@var75 .@expr1073744511 fileName@var77 ;
65: lineNumber@var104 =@expr1073744512 other@var75 .@expr1073744513 lineNumber@var78 ;
66: symbolName@var105 =@expr1073744514 other@var75 .@expr1073744515 symbolName@var79 ;
67: hash@var106 =@expr1073744516 other@var75 .@expr1073744517 hash@var80 ;
68: thisAndNextLine@var107 =@expr1073744518 other@var75 .@expr1073744519 thisAndNextLine@var81 ;
69: matched@var108 =@expr1073744520 other@var75 .@expr1073744521 matched@var82 ;
70: checked@var109 =@expr1073744522 other@var75 .@expr1073744523 checked@var83 ;
71: return *@expr1073744524 this@expr1073744525 ;
72: }
73:
74: bool operator< ( const Suppression & other@var84 ) const {
75: if (@expr1073744526 errorId@var102 !=@expr1073744527 other@var84 .@expr2704 errorId@var85 ) {
76: return errorId@var102 <@expr1073744529 other@var84 .@expr2704 errorId@var85 ; }
77: if (@expr1073744531 lineNumber@var104 <@expr1073744532 other@var84 .@expr1073744533 lineNumber@var86 ) {
78: return true ; }
79: if (@expr1073744534 fileName@var103 !=@expr1073744535 other@var84 .@expr2712 fileName@var87 ) {
80: return fileName@var103 <@expr1073744537 other@var84 .@expr2712 fileName@var87 ; }
81: if (@expr1073744539 symbolName@var105 !=@expr1073744540 other@var84 .@expr2717 symbolName@var88 ) {
82: return symbolName@var105 <@expr1073744542 other@var84 .@expr2717 symbolName@var88 ; }
83: if (@expr1073744544 hash@var106 !=@expr1073744545 other@var84 .@expr2722 hash@var89 ) {
84: return hash@var106 <@expr1073744547 other@var84 .@expr2722 hash@var89 ; }
85: if (@expr1073744549 thisAndNextLine@var107 !=@expr1073744550 other@var84 .@expr1073744551 thisAndNextLine@var90 ) {
86: return thisAndNextLine@var107 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var91 , std :: string * errorMessage@var92 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var93 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var94 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744553 fileName@var103 .@expr1073744554 empty (@expr1073744555 ) &&@expr1073744556 fileName@var103 .@expr1073744557 find_first_of (@expr1073744558 "?*" ) ==@expr1073744559 std ::@expr1073744560 string ::@expr1073744561 npos@expr1073744552 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var95 ) const {
109: return errorId@var102 ==@expr1073744562 other@var95 .@expr1073744563 errorId@var96 &&@expr1073744564
110: fileName@var103 ==@expr1073744565 other@var95 .@expr1073744566 fileName@var97 &&@expr1073744567
111: lineNumber@var104 ==@expr1073744568 other@var95 .@expr1073744569 lineNumber@var98 &&@expr1073744570
112: symbolName@var105 ==@expr1073744571 other@var95 .@expr1073744572 symbolName@var99 &&@expr1073744573
113: hash@var106 ==@expr1073744574 other@var95 .@expr1073744575 hash@var100 &&@expr1073744576
114: thisAndNextLine@var107 ==@expr1073744577 other@var95 .@expr1073744578 thisAndNextLine@var101 ;
115: }
116:
117: std :: string errorId@var102 ;
118: std :: string fileName@var103 ;
119: int lineNumber@var104 ;
120: std :: string symbolName@var105 ;
121: unsigned long hash@var106 ;
122: bool thisAndNextLine@var107 ;
123: bool matched@var108 ;
124: bool checked@var109 ;
125:
126: enum Anonymous0 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var110 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var111 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var112 , std :: string * errorMessage@var113 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var114 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var115 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var116 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var117 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var118 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var119 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var120 , const bool unusedFunctionChecking@var121 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var122 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var123 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var124 ;
219: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var125 , const Color & c@var126 ) ;
42:
43: std :: string toString ( const Color & c@var127 ) ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var128 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var129 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var130 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var131 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var132 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var148 ( 0 ) , line@var149 ( 0 ) , column@var150 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var133 , int line@var134 , unsigned int column@var135 )
73: : fileIndex@var148 ( 0 ) , line@var149 ( line@var134 ) , column@var150 ( column@var135 ) , mOrigFileName@var152 ( file@var133 ) , mFileName@var153 ( file@var133 ) { }
74:
75: FileLocation ( const std :: string & file@var136 , const std :: string & info@var137 , int line@var138 , unsigned int column@var139 )
76: : fileIndex@var148 ( 0 ) , line@var149 ( line@var138 ) , column@var150 ( column@var139 ) , mOrigFileName@var152 ( file@var136 ) , mFileName@var153 ( file@var136 ) , mInfo@var154 ( info@var137 ) { }
77:
78: FileLocation ( const Token * tok@var140 , const TokenList * tokenList@var141 ) ;
79: FileLocation ( const Token * tok@var142 , const std :: string & info@var143 , const TokenList * tokenList@var144 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var145 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var146 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var147 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var148 ;
107: int line@var149 ;
108: unsigned int column@var150 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var154 ;
112: }
113: void setinfo ( const std :: string & i@var151 ) {
114: mInfo@var154 =@expr1073744579 i@var151 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var152 ;
119: std :: string mFileName@var153 ;
120: std :: string mInfo@var154 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var155 ,
124: const std :: string & file1@var156 ,
125: Severity :: SeverityType severity@var157 ,
126: const std :: string & msg@var158 ,
127: const std :: string & id@var159 , Certainty :: CertaintyLevel certainty@var160 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var161 ,
129: const std :: string & file1@var162 ,
130: Severity :: SeverityType severity@var163 ,
131: const std :: string & msg@var164 ,
132: const std :: string & id@var165 ,
133: const CWE & cwe@var166 ,
134: Certainty :: CertaintyLevel certainty@var167 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var168 ,
136: const TokenList * list@var169 ,
137: Severity :: SeverityType severity@var170 ,
138: const std :: string & id@var171 ,
139: const std :: string & msg@var172 ,
140: Certainty :: CertaintyLevel certainty@var173 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var174 ,
142: const TokenList * list@var175 ,
143: Severity :: SeverityType severity@var176 ,
144: const std :: string & id@var177 ,
145: const std :: string & msg@var178 ,
146: const CWE & cwe@var179 ,
147: Certainty :: CertaintyLevel certainty@var180 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var181 ,
149: const TokenList * tokenList@var182 ,
150: Severity :: SeverityType severity@var183 ,
151: const char id@var184 [ ] ,
152: const std :: string & msg@var185 ,
153: const CWE & cwe@var186 ,
154: Certainty :: CertaintyLevel certainty@var187 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var188 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var189 ,
176: const std :: string & templateFormat@var190 = emptyString@var1 ,
177: const std :: string & templateLocation@var191 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var192 ) ;
181:
182: std :: list < FileLocation > callStack@var193 ;
183: std :: string id@var194 ;
184:
185:
186: std :: string file0@var195 ;
187:
188: std :: string function@var196 ;
189:
190: bool incomplete@var197 ;
191:
192: Severity :: SeverityType severity@var198 ;
193: CWE cwe@var199 ;
194: Certainty :: CertaintyLevel certainty@var200 ;
195:
196:
197: unsigned long hash@var201 ;
198:
199:
200: void setmsg ( const std :: string & msg@var202 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var204 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var205 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var206 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var203 ) ;
221:
222:
223: std :: string mShortMessage@var204 ;
224:
225:
226: std :: string mVerboseMessage@var205 ;
227:
228:
229: std :: string mSymbolNames@var206 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var207 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073744580 plistFile@var207 .@expr1073744581 is_open (@expr1073744582 ) ) {
243: plistFile@var207 <<@expr1073744583 ErrorLogger ::@expr1073744584 plistFooter (@expr1073744585 ) ;
244: plistFile@var207 .@expr1073744586 close (@expr1073744587 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var208 , Color c@var209 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var210 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var211 , const char stage@var212 [ ] , const unsigned long value@var213 ) {
271: (@expr1073744588 void ) filename@var211 ;
272: (@expr1073744589 void ) stage@var212 ;
273: (@expr1073744590 void ) value@var213 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var214 ) {
281: reportErr (@expr1073744591 msg@var214 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var215 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var216 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var217 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var218 , const std :: vector < std :: string > & files@var219 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var220 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var221 , const std :: string & from@var222 , const std :: string & to@var223 ) ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var224 ;
42: double mDoubleValue@var225 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var226 ;
44: bool mIsUnsigned@var227 ;
45:
46: void promote ( const value & v@var228 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var229 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var226 !=@expr1073744592 Type ::@expr1073744593 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var226 ==@expr1073744594 Type ::@expr1073744595 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073744596 ) ?@expr1073744597 mDoubleValue@var225 :@expr1073744598 (@expr1073744599 double ) mIntValue@var224 ;
60: }
61:
62: static value calc ( char op@var230 , const value & v1@var231 , const value & v2@var232 ) ;
63: int compare ( const value & v@var233 ) const ;
64: value add ( int v@var234 ) const ;
65: value shiftLeft ( const value & v@var235 ) const ;
66: value shiftRight ( const value & v@var236 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var237 ;
72:
73: static long long toLongNumber ( const std :: string & str@var238 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var239 ) ;
75:
76: template < class T > static std :: string toString ( T value@var240 ) {
77: std ::@expr1073744600 ostringstream result@var241 ;
78: result@var241 <<@expr1073744601 value@var240 ;
79: return result@var241 .@expr1073744602 str (@expr1073744603 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var242 ) ;
82:
83: static bool isInt ( const std :: string & str@var243 ) ;
84: static bool isFloat ( const std :: string & str@var244 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var245 ) ;
86: static bool isNegative ( const std :: string & str@var246 ) ;
87: static bool isPositive ( const std :: string & str@var247 ) ;
88: static bool isDec ( const std :: string & str@var248 ) ;
89: static bool isFloatHex ( const std :: string & str@var249 ) ;
90: static bool isIntHex ( const std :: string & str@var250 ) ;
91: static bool isOct ( const std :: string & str@var251 ) ;
92: static bool isBin ( const std :: string & str@var252 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var253 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var254 , bool supportMicrosoftExtensions@var255 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var256 , const std :: string & second@var257 ) ;
105: static std :: string subtract ( const std :: string & first@var258 , const std :: string & second@var259 ) ;
106: static std :: string multiply ( const std :: string & first@var260 , const std :: string & second@var261 ) ;
107: static std :: string divide ( const std :: string & first@var262 , const std :: string & second@var263 ) ;
108: static std :: string mod ( const std :: string & first@var264 , const std :: string & second@var265 ) ;
109: static std :: string incdec ( const std :: string & var@var266 , const std :: string & op@var267 ) ;
110: static std :: string calculate ( const std :: string & first@var268 , const std :: string & second@var269 , char action@var270 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var271 ) ;
113: static std :: string cos ( const std :: string & tok@var272 ) ;
114: static std :: string tan ( const std :: string & tok@var273 ) ;
115: static std :: string abs ( const std :: string & tok@var274 ) ;
116: static bool isEqual ( const std :: string & first@var275 , const std :: string & second@var276 ) ;
117: static bool isNotEqual ( const std :: string & first@var277 , const std :: string & second@var278 ) ;
118: static bool isGreater ( const std :: string & first@var279 , const std :: string & second@var280 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var281 , const std :: string & second@var282 ) ;
120: static bool isLess ( const std :: string & first@var283 , const std :: string & second@var284 ) ;
121: static bool isLessEqual ( const std :: string & first@var285 , const std :: string & second@var286 ) ;
122: static bool isNullValue ( const std :: string & str@var287 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var288 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var289 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var290 , std :: string :: size_type iPos@var291 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var292 , const MathLib :: value & v2@var293 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var294 , const MathLib :: value & v2@var295 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var296 , const MathLib :: value & v2@var297 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var298 , const MathLib :: value & v2@var299 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var300 , const MathLib :: value & v2@var301 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var302 , const MathLib :: value & v2@var303 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var304 , const MathLib :: value & v2@var305 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var306 , const MathLib :: value & v2@var307 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var308 , const MathLib :: value & v2@var309 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var310 , const MathLib :: value & v2@var311 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var312 ) ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var313 ) const {
54: x@var313 ++@expr1073744604 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var314 ) const {
60: x@var314 --@expr1073744605 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var315 , const U & y@var316 ) const {
67: return x@var315 <@expr1073744606 y@var316 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var317 , const U & y@var318 ) const {
74: return std ::@expr1073744607 abs (@expr1073744608 x@var317 -@expr1073744609 y@var318 ) ==@expr1073744610 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var319 , T x@var320 , U y@var321 ) const {
81: result@var319 =@expr1073744611 !@expr1073744612 (@expr1073744613 x@var320 >@expr1073744614 y@var321 ||@expr1073744615 x@var320 <@expr1073744616 y@var321 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var322 = 0 , Bound b@var323 = Bound :: Point )
91: : valueType@var363 ( ValueType :: INT ) ,
92: bound@var364 ( b@var323 ) ,
93: intvalue@var365 ( val@var322 ) ,
94: tokvalue@var366 ( nullptr ) ,
95: floatValue@var367 ( 0.0 ) ,
96: moveKind@var368 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var369 ( val@var322 ) ,
98: condition@var370 ( nullptr ) ,
99: varId@var372 ( 0U ) ,
100: safe@var373 ( false ) ,
101: conditional@var374 ( false ) ,
102: macro@var375 ( false ) ,
103: defaultArg@var376 ( false ) ,
104: indirect@var377 ( 0 ) ,
105: path@var378 ( 0 ) ,
106: wideintvalue@var379 ( val@var322 ) ,
107: subexpressions@var380 ( ) ,
108: capturetok@var381 ( nullptr ) ,
109: lifetimeKind@var382 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var383 ( LifetimeScope :: Local ) ,
111: valueKind@var388 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var324 , long long val@var325 , Bound b@var326 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var327 ) const {
118: if (@expr1073744617 valueType@var363 !=@expr1073744618 rhs@var327 .@expr1073744619 valueType@var328 ) {
119: return false ; }
120: switch (@expr1073744620 valueType@var363 ) {
121: case ValueType ::@expr1073744621 INT :@expr2798
122: case ValueType ::@expr1073744623 CONTAINER_SIZE :@expr2798
123: case ValueType ::@expr1073744625 BUFFER_SIZE :@expr2798
124: case ValueType ::@expr1073744627 ITERATOR_START :@expr2798
125: case ValueType ::@expr1073744629 ITERATOR_END :@expr2798 ;
126: if (@expr2807 intvalue@var365 !=@expr2808 rhs@var327 .@expr2809 intvalue@var329 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744634 TOK :@expr2798 ;
130: if (@expr2812 tokvalue@var366 !=@expr2813 rhs@var327 .@expr2814 tokvalue@var330 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744639 FLOAT :@expr2798 ;
134:
135: if (@expr1073744641 floatValue@var367 >@expr1073744642 rhs@var327 .@expr2819 floatValue@var331 ||@expr1073744644 floatValue@var367 <@expr1073744645 rhs@var327 .@expr2819 floatValue@var331 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744647 MOVED :@expr2798 ;
139: if (@expr1073744649 moveKind@var368 !=@expr1073744650 rhs@var327 .@expr1073744651 moveKind@var332 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744652 UNINIT :@expr2798 ;
143: break ;
144: case ValueType ::@expr1073744654 LIFETIME :@expr2798 ;
145: if (@expr2812 tokvalue@var366 !=@expr2813 rhs@var327 .@expr2814 tokvalue@var330 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744659 SYMBOLIC :@expr2798 ;
149: if (@expr1073744661 !@expr1073744662 sameToken (@expr1073744663 tokvalue@var366 , rhs@var327 .@expr2814 tokvalue@var330 ) ) {
150: return false ; }
151: if (@expr2807 intvalue@var365 !=@expr2808 rhs@var327 .@expr2809 intvalue@var329 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var333 , F f@var334 ) {
160: switch (@expr1073744668 self@var333 .@expr1073744669 valueType@var335 ) {
161: case ValueType ::@expr1073744670 INT :@expr2847
162: case ValueType ::@expr1073744672 SYMBOLIC :@expr2847
163: case ValueType ::@expr1073744674 BUFFER_SIZE :@expr2847
164: case ValueType ::@expr1073744676 CONTAINER_SIZE :@expr2847
165: case ValueType ::@expr1073744678 ITERATOR_START :@expr2847
166: case ValueType ::@expr1073744680 ITERATOR_END :@expr2847 ; {
167: f@var334 (@expr1073744682 self@var333 .@expr1073744683 intvalue@var336 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744684 FLOAT :@expr2847 ; {
171: f@var334 (@expr1073744686 self@var333 .@expr1073744687 floatValue@var337 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744688 UNINIT :@expr2847
175: case ValueType ::@expr1073744690 TOK :@expr2847
176: case ValueType ::@expr1073744692 LIFETIME :@expr2847
177: case ValueType ::@expr1073744694 MOVED :@expr2847 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var338 , Compare compare@var339 , T x@var340 , U y@var341 ) const {
186: result@var338 =@expr1073744696 compare@var339 (@expr1073744697 x@var340 , y@var341 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var342 , const Value & rhs@var343 , Compare compare@var344 , T x@var345 ) const {
191: visitValue (@expr1073744699 rhs@var343 ,
192: std ::@expr1073744700 bind (@expr1073744701 innerVisitor {@expr1073744702 } , std ::@expr1073744703 ref (@expr1073744704 result@var342 ) , std ::@expr1073744705 move (@expr1073744706 compare@var344 ) , x@var345 , std ::@expr1073744707 placeholders ::@expr1073744708 _1@expr1073744698 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var346 , Compare compare@var347 ) const {
198: assert (@expr1073744710 (@expr1073744711 !@expr1073744712 this@expr2889 .@expr1073744714 isSymbolicValue (@expr1073744715 ) &&@expr1073744716 !@expr1073744717 rhs@var346 .@expr1073744718 isSymbolicValue (@expr1073744719 ) ) ||@expr1073744720
199: (@expr1073744721 this@expr2889 .@expr1073744722 valueType@var363 ==@expr1073744723 rhs@var346 .@expr1073744724 valueType@var348 &&@expr1073744725 sameToken (@expr1073744726 this@expr2889 .@expr1073744727 tokvalue@var366 , rhs@var346 .@expr1073744728 tokvalue@var349 ) ) ) ;
200: bool result@var350 ; result@var350 =@expr1073744729 false ;
201: visitValue (@expr1073744730
202: *@expr1073744731 this@expr2889 ,
203: std ::@expr1073744732 bind (@expr1073744733 compareVisitor {@expr1073744734 } , std ::@expr2911 ref (@expr1073744736 result@var350 ) , std ::@expr2911 ref (@expr1073744738 rhs@var346 ) , std ::@expr1073744739 move (@expr1073744740 compare@var347 ) , std ::@expr1073744741 placeholders ::@expr1073744742 _1@expr1073744709 ) ) ;
204: return result@var350 ;
205: }
206:
207: bool operator== ( const Value & rhs@var351 ) const {
208: if (@expr1073744743 !@expr1073744744 equalValue (@expr1073744745 rhs@var351 ) ) {
209: return false ; }
210:
211: return varvalue@var369 ==@expr1073744746 rhs@var351 .@expr1073744747 varvalue@var352 &&@expr1073744748
212: condition@var370 ==@expr1073744749 rhs@var351 .@expr1073744750 condition@var353 &&@expr1073744751
213: varId@var372 ==@expr1073744752 rhs@var351 .@expr1073744753 varId@var354 &&@expr1073744754
214: conditional@var374 ==@expr1073744755 rhs@var351 .@expr1073744756 conditional@var355 &&@expr1073744757
215: defaultArg@var376 ==@expr1073744758 rhs@var351 .@expr1073744759 defaultArg@var356 &&@expr1073744760
216: indirect@var377 ==@expr1073744761 rhs@var351 .@expr1073744762 indirect@var357 &&@expr1073744763
217: valueKind@var388 ==@expr1073744764 rhs@var351 .@expr1073744765 valueKind@var358 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var359 ) const {
221: return !@expr1073744766 (@expr1073744767 *@expr1073744768 this@expr1073744769 ==@expr1073744770 rhs@var359 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var360 ) const {
226: bool result@var361 ; result@var361 =@expr1073744772 false ;
227: visitValue (@expr1073744773 *@expr1073744774 this@expr1073744775 , std ::@expr1073744776 bind (@expr1073744777 equalVisitor {@expr1073744778 } , std ::@expr1073744779 ref (@expr1073744780 result@var361 ) , x@var360 , std ::@expr1073744781 placeholders ::@expr1073744782 _1@expr1073744771 ) ) ;
228: return result@var361 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744783 bound@var364 ==@expr1073744784 Bound ::@expr1073744785 Lower ) {
233: visitValue (@expr1073744786 *@expr2963 this@expr2964 , increment {@expr1073744789 } ) ; }
234: else { if (@expr1073744790 bound@var364 ==@expr1073744791 Bound ::@expr1073744792 Upper ) {
235: visitValue (@expr1073744793 *@expr2963 this@expr2964 , decrement {@expr1073744795 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744796 bound@var364 ==@expr1073744797 Bound ::@expr2974 Lower ) {
240: bound@var364 =@expr1073744799 Bound ::@expr2976 Upper ; }
241: else { if (@expr1073744801 bound@var364 ==@expr1073744802 Bound ::@expr2976 Upper ) {
242: bound@var364 =@expr1073744804 Bound ::@expr2974 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744806 ) ;
247: decreaseRange (@expr1073744807 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var362 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var363 ;
267: bool isIntValue ( ) const {
268: return valueType@var363 ==@expr1073744808 ValueType ::@expr1073744809 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var363 ==@expr1073744810 ValueType ::@expr1073744811 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var363 ==@expr1073744812 ValueType ::@expr1073744813 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var363 ==@expr1073744814 ValueType ::@expr1073744815 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var363 ==@expr1073744816 ValueType ::@expr1073744817 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var363 ==@expr1073744818 ValueType ::@expr1073744819 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var363 ==@expr1073744820 ValueType ::@expr1073744821 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var363 ==@expr1073744822 ValueType ::@expr1073744823 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var363 ==@expr1073744824 ValueType ::@expr1073744825 ITERATOR_START ||@expr1073744826 valueType@var363 ==@expr1073744827 ValueType ::@expr1073744828 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var363 ==@expr1073744829 ValueType ::@expr1073744830 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var363 ==@expr1073744831 ValueType ::@expr1073744832 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var363 ==@expr1073744833 ValueType ::@expr1073744834 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var363 ==@expr1073744836 ValueType ::@expr1073744837 LIFETIME &&@expr1073744838 lifetimeScope@var383 ==@expr1073744839 LifetimeScope ::@expr1073744840 Local@expr1073744835 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var363 ==@expr1073744841 ValueType ::@expr1073744842 LIFETIME &&@expr1073744843 lifetimeScope@var383 ==@expr1073744844 LifetimeScope ::@expr1073744845 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var363 ==@expr1073744846 ValueType ::@expr1073744847 LIFETIME &&@expr1073744848 lifetimeScope@var383 ==@expr1073744849 LifetimeScope ::@expr1073744850 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744851 ) ||@expr1073744852 isUninitValue (@expr1073744853 ) ||@expr1073744854 isLifetimeValue (@expr1073744855 ) ;
318: }
319:
320:
321: Bound bound@var364 ;
322:
323:
324: long long intvalue@var365 ;
325:
326:
327: const Token * tokvalue@var366 ;
328:
329:
330: double floatValue@var367 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var368 ;
334:
335:
336: long long varvalue@var369 ;
337:
338:
339: const Token * condition@var370 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var371 ;
342:
343:
344: int varId@var372 ;
345:
346:
347: bool safe@var373 ;
348:
349:
350: bool conditional@var374 ;
351:
352:
353: bool macro@var375 ;
354:
355:
356: bool defaultArg@var376 ;
357:
358: int indirect@var377 ;
359:
360:
361: long long path@var378 ;
362:
363:
364: long long wideintvalue@var379 ;
365:
366: std :: vector < std :: string > subexpressions@var380 ;
367:
368:
369: const Token * capturetok@var381 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var382 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var383 ;
385:
386: static const char * toString ( MoveKind moveKind@var384 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var385 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var386 ) ;
389: static const char * toString ( Bound bound@var387 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var388 ;
402:
403: void setKnown ( ) {
404: valueKind@var388 =@expr1073744856 ValueKind ::@expr1073744857 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var388 ==@expr1073744858 ValueKind ::@expr1073744859 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var388 =@expr1073744861 ValueKind ::@expr1073744862 Possible@expr1073744860 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var388 ==@expr1073744864 ValueKind ::@expr1073744865 Possible@expr1073744863 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var388 ==@expr1073744866 ValueKind ::@expr1073744867 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var388 =@expr1073744868 ValueKind ::@expr1073744869 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var389 = true ) {
428: if (@expr1073744870 inconclusive@var389 ) {
429: valueKind@var388 =@expr1073744871 ValueKind ::@expr1073744872 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var388 ==@expr1073744873 ValueKind ::@expr1073744874 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744876 isKnown (@expr1073744877 ) ) {
438: valueKind@var388 =@expr1073744878 ValueKind ::@expr1073744879 Possible@expr1073744875 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744880 condition@var370 &&@expr1073744881 !@expr1073744882 defaultArg@var376 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var390 , const Token * tok2@var391 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var392 , const Settings * settings@var393 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var394 , SymbolDatabase * symboldatabase@var395 , ErrorLogger * errorLogger@var396 , const Settings * settings@var397 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var398 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var399 , const Settings * settings@var400 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var401 ,
459: const Settings * settings@var402 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var403 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var404 , const Token * indexTok@var405 , bool possible@var406 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var407 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var408 , const Settings * settings@var409 = nullptr , int depth@var410 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var411 ;
471: bool addressOf@var412 ;
472: ValueFlow :: Value :: ErrorPath errorPath@var413 ;
473: bool inconclusive@var414 ;
474:
475: LifetimeToken ( ) : token@var411 ( nullptr ) , addressOf@var412 ( false ) , errorPath@var413 ( ) , inconclusive@var414 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var415 , ValueFlow :: Value :: ErrorPath errorPath@var416 )
478: : token@var411 ( token@var415 ) , addressOf@var412 ( false ) , errorPath@var413 ( std :: move ( errorPath@var416 ) ) , inconclusive@var414 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var417 , bool addressOf@var418 , ValueFlow :: Value :: ErrorPath errorPath@var419 )
482: : token@var411 ( token@var417 ) , addressOf@var412 ( addressOf@var418 ) , errorPath@var413 ( std :: move ( errorPath@var419 ) ) , inconclusive@var414 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var420 , bool b@var421 ) {
486: for (@expr1073744883 LifetimeToken &@expr1073744884 x@var422 :@expr1073744885 v@var420 ) {
487: x@var422 .@expr1073744886 addressOf@var423 =@expr1073744887 b@var421 ; }
488: return v@var420 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var424 , bool b@var425 ) {
492: for (@expr1073744888 LifetimeToken &@expr1073744889 x@var426 :@expr1073744890 v@var424 ) {
493: x@var426 .@expr1073744891 inconclusive@var427 =@expr1073744892 b@var425 ; }
494: return v@var424 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var428 , ValueFlow :: Value & true_value@var429 , ValueFlow :: Value & false_value@var430 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var431 ) ;
499: const Token * parseCompareInt ( const Token * tok@var432 , ValueFlow :: Value & true_value@var433 , ValueFlow :: Value & false_value@var434 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var435 , long long val@var436 , const Token * varTok@var437 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var438 , const Token * varTok@var439 , long long val@var440 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var441 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var442 ,
508: ValueFlow :: Value & value@var443 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var444 ,
511: bool escape@var445 = false ,
512: ValueFlow :: Value :: ErrorPath errorPath@var446 = ValueFlow :: Value :: ErrorPath { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var447 , const Token * lifetime@var448 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var449 , ValueFlow :: Value :: ErrorPath & errorPath@var450 , bool * addressOf@var451 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var452 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var453 , const Settings * settings@var454 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var455 , const ValueFlow :: Value * val@var456 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var457 , const ValueFlow :: Value * val@var458 , ValueFlow :: Value :: ErrorPath & errorPath@var459 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var460 , bool inconclusive@var461 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var462 ,
529: bool inconclusive@var463 = false ,
530: long long path@var464 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var465 , const Scope * defaultScope@var466 = nullptr , bool smallest@var467 = true ) ;

##file cppcheck-2.8/lib/ctu.h

1:
|
36:
37: class Function ;
38: class Settings ;
39: class Token ;
40: class Tokenizer ;
41:
42: namespace tinyxml2 {
43: class XMLElement ;
44: }
45:
|
50:
51: namespace CTU {
52: class FileInfo : public Check :: FileInfo {
53: public:
54: enum class InvalidValueType { null , uninit , bufferOverflow } ;
55:
56: std :: string toString ( ) const override ;
57:
58: struct Location {
59: Location ( ) = default ;
60: Location ( const Tokenizer * tokenizer@var468 , const Token * tok@var469 ) ;
61: Location ( const std :: string & fileName@var470 , int lineNumber@var471 , int column@var472 ) : fileName@var473 ( fileName@var470 ) , lineNumber@var474 ( lineNumber@var471 ) , column@var475 ( column@var472 ) { }
62: std :: string fileName@var473 ;
63: int lineNumber@var474 { } ;
64: int column@var475 { } ;
65: } ;
66:
67: struct UnsafeUsage {
68: UnsafeUsage ( ) = default ;
69: UnsafeUsage ( const std :: string & myId@var476 , int myArgNr@var477 , const std :: string & myArgumentName@var478 , const Location & location@var479 , long long value@var480 ) : myId@var481 ( myId@var476 ) , myArgNr@var482 ( myArgNr@var477 ) , myArgumentName@var483 ( myArgumentName@var478 ) , location@var484 ( location@var479 ) , value@var485 ( value@var480 ) { }
70: std :: string myId@var481 ;
71: int myArgNr@var482 { } ;
72: std :: string myArgumentName@var483 ;
73: Location location@var484 ;
74: long long value@var485 { } ;
75: std :: string toString ( ) const ;
76: } ;
77:
78: class CallBase {
79: public:
80: CallBase ( ) = default ;
81: CallBase ( const std :: string & callId@var486 , int callArgNr@var487 , const std :: string & callFunctionName@var488 , const Location & loc@var489 )
82: : callId@var492 ( callId@var486 ) , callArgNr@var493 ( callArgNr@var487 ) , callFunctionName@var494 ( callFunctionName@var488 ) , location@var495 ( loc@var489 )
83: { }
84: CallBase ( const Tokenizer * tokenizer@var490 , const Token * callToken@var491 ) ;
85: virtual ~ CallBase ( ) { }
86: std :: string callId@var492 ;
87: int callArgNr@var493 { } ;
88: std :: string callFunctionName@var494 ;
89: Location location@var495 ;
90: protected:
91: std :: string toBaseXmlString ( ) const ;
92: bool loadBaseFromXml ( const tinyxml2 :: XMLElement * xmlElement@var496 ) ;
93: } ;
94:
95: class FunctionCall : public CallBase {
96: public:
97: std :: string callArgumentExpression@var497 ;
98: long long callArgValue@var498 ;
99: ValueFlow :: Value :: ValueType callValueType@var499 ;
100: std :: vector < ErrorMessage :: FileLocation > callValuePath@var500 ;
101: bool warning@var501 ;
102:
103: std :: string toXmlString ( ) const ;
104: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var502 ) ;
105: } ;
106:
107: class NestedCall : public CallBase {
108: public:
109: NestedCall ( ) = default ;
110:
111: NestedCall ( const std :: string & myId@var503 , int myArgNr@var504 , const std :: string & callId@var505 , int callArgnr@var506 , const std :: string & callFunctionName@var507 , const Location & location@var508 )
112: : CallBase ( callId@var505 , callArgnr@var506 , callFunctionName@var507 , location@var508 ) ,
113: myId@var513 ( myId@var503 ) ,
114: myArgNr@var514 ( myArgNr@var504 ) { }
115:
116: NestedCall ( const Tokenizer * tokenizer@var509 , const Function * myFunction@var510 , const Token * callToken@var511 ) ;
117:
118: std :: string toXmlString ( ) const ;
119: bool loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var512 ) ;
120:
121: std :: string myId@var513 ;
122: int myArgNr@var514 { } ;
123: } ;
124:
125: std :: list < FunctionCall > functionCalls@var515 ;
126: std :: list < NestedCall > nestedCalls@var516 ;
127:
128: void loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var517 ) ;
129: std :: map < std :: string , std :: list < const CallBase * > > getCallsMap ( ) const ;
130:
131: static std :: list < ErrorMessage :: FileLocation > getErrorPath ( InvalidValueType invalidValue@var518 ,
132: const UnsafeUsage & unsafeUsage@var519 ,
133: const std :: map < std :: string , std :: list < const CallBase * > > & callsMap@var520 ,
134: const char info@var521 [ ] ,
135: const FunctionCall * * const functionCallPtr@var522 ,
136: bool warning@var523 ) ;
137: } ;
138:
139: extern int maxCtuDepth@var524 ;
140:
141: std :: string toString ( const std :: list < FileInfo :: UnsafeUsage > & unsafeUsage@var525 ) ;
142:
143: std :: string getFunctionId ( const Tokenizer * tokenizer@var526 , const Function * function@var527 ) ;
144:
145:
146: FileInfo * getFileInfo ( const Tokenizer * tokenizer@var528 ) ;
147:
148: std :: list < FileInfo :: UnsafeUsage > getUnsafeUsage ( const Tokenizer * tokenizer@var529 , const Settings * settings@var530 , const Check * check@var531 , bool ( * isUnsafeUsage@var532 ) ( const Check * , const Token * , long long * ) ) ;
149:
150: std :: list < FileInfo :: UnsafeUsage > loadUnsafeUsageListFromXml ( const tinyxml2 :: XMLElement * xmlElement@var533 ) ;
151: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var534 ) const {
35: return p@var534 .@expr1073744893 first@var535 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var536 ) const {
42: return p@var536 .@expr1073744894 second@var537 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var538 , const T & x@var539 )
48: {
49: return std ::@expr1073744895 find (@expr1073744896 r@var538 .@expr1073744897 begin (@expr1073744898 ) , r@var538 .@expr3075 end (@expr3076 ) , x@var539 ) !=@expr1073744901 r@var538 .@expr3075 end (@expr3076 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var540 , const T & x@var541 )
54: {
55: return std ::@expr1073744904 find (@expr1073744905 r@var540 .@expr1073744906 begin (@expr1073744907 ) , r@var540 .@expr3084 end (@expr3085 ) , x@var541 ) !=@expr1073744910 r@var540 .@expr3084 end (@expr3085 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var542 , const U & x@var543 )
60: {
61: return std ::@expr1073744913 find (@expr1073744914 r@var542 .@expr1073744915 begin (@expr1073744916 ) , r@var542 .@expr3093 end (@expr3094 ) , x@var543 ) !=@expr1073744919 r@var542 .@expr3093 end (@expr3094 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var544 ) const
68: {
69: return static_cast < unsigned long > (@expr1073744922 t@var544 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var545 , char c@var546 )
74: {
75: return !@expr1073744923 str@var545 .@expr1073744924 empty (@expr1073744925 ) &&@expr1073744926 str@var545 .@expr1073744927 back (@expr1073744928 ) ==@expr1073744929 c@var546 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var547 , const char end@var548 [ ] , unsigned long endlen@var549 )
79: {
80: return (@expr3106 str@var547 .@expr3107 size (@expr3108 ) >=@expr1073744933 endlen@var549 ) &&@expr1073744934 (@expr3106 str@var547 .@expr1073744936 compare (@expr1073744937 str@var547 .@expr3107 size (@expr3108 ) -@expr1073744940 endlen@var549 , endlen@var549 , end@var548 ) ==@expr1073744941 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var550 , const char ( & end@var551 ) [ N ] )
85: {
86: return endsWith (@expr1073744943 str@var550 , end@var551 , N@expr1073744942 -@expr1073744944 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var552 , char q@var553 , const std :: string & p@var554 )
90: {
91: if (@expr1073744945 !@expr1073744946 endsWith (@expr1073744947 str@var552 , q@var553 ) ) {
92: return false ; }
93: if (@expr1073744948 (@expr1073744949 str@var552 .@expr1073744950 length (@expr1073744951 ) +@expr1073744952 1 ) >@expr1073744953 p@var554 .@expr1073744954 length (@expr1073744955 ) &&@expr1073744956 (@expr1073744957 str@var552 .@expr1073744958 compare (@expr1073744959 0 , p@var554 .@expr1073744960 size (@expr1073744961 ) +@expr1073744962 1 , p@var554 +@expr1073744963 q@var553 ) ==@expr1073744964 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var555 , char q@var556 )
99: {
100: static const std ::@expr3141 vector < std ::@expr3141 string > suffixes@var557 {@expr1073744967 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073744968 const std ::@expr3141 string &@expr1073744970 p@var558 :@expr1073744971 suffixes@var557 ) {
102: if (@expr1073744972 isPrefixStringCharLiteral (@expr1073744973 str@var555 , q@var556 , p@var558 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var559 )
109: {
110: return isStringCharLiteral (@expr1073744974 str@var559 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var560 )
114: {
115: return isStringCharLiteral (@expr1073744975 str@var560 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var561 , char q@var562 )
119: {
120: const unsigned long quotePos@var563 =@expr1073744976 str@var561 .@expr1073744977 find (@expr1073744978 q@var562 ) ;
121: return str@var561 .@expr1073744979 substr (@expr1073744980 quotePos@var563 +@expr1073744981 1U , str@var561 .@expr1073744982 size (@expr1073744983 ) -@expr1073744984 quotePos@var563 -@expr1073744985 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var564 )
125: {
126: if (@expr1073744986 isStringLiteral (@expr1073744987 str@var564 ) ) {
127: return getStringCharLiteral (@expr1073744988 str@var564 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var565 )
132: {
133: if (@expr1073744989 isCharLiteral (@expr1073744990 str@var565 ) ) {
134: return getStringCharLiteral (@expr1073744991 str@var565 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var566 )
139: {
140: if (@expr1073744992 i@var566 ==@expr1073744993 1 ) {
141: return "st" ; }
142: if (@expr1073744994 i@var566 ==@expr1073744995 2 ) {
143: return "nd" ; }
144: if (@expr1073744996 i@var566 ==@expr1073744997 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var567 , const std :: string & rhs@var568 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var569 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var570 , const std :: string & name@var571 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var572 , const std :: string & name@var573 ) ;
156:
157: void strTolower ( std :: string & str@var574 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var575 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var576 ;
42:
43:
44: std :: string stdValue@var577 ;
45:
46:
47: Standards ( ) : c@var575 ( CLatest ) , cpp@var576 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var578 ) {
50: stdValue@var577 =@expr1073744998 str@var578 ;
51: if (@expr1073744999 str@var578 ==@expr1073745000 "c89" ||@expr1073745001 str@var578 ==@expr1073745002 "C89" ) {
52: c@var575 =@expr1073745003 C89 ;
53: return true ;
54: }
55: if (@expr1073745004 str@var578 ==@expr1073745005 "c99" ||@expr1073745006 str@var578 ==@expr1073745007 "C99" ) {
56: c@var575 =@expr1073745008 C99 ;
57: return true ;
58: }
59: if (@expr1073745009 str@var578 ==@expr1073745010 "c11" ||@expr1073745011 str@var578 ==@expr1073745012 "C11" ) {
60: c@var575 =@expr1073745013 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073745014 c@var575 ) {
67: case C89 :@expr3191 ;
68: return "c89" ;
69: case C99 :@expr3191 ;
70: return "c99" ;
71: case C11 :@expr3191 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var579 ) {
77: if (@expr1073745018 std@var579 ==@expr1073745019 "c89" ) {
78: return Standards ::@expr1073745020 C89 ;
79: }
80: if (@expr1073745021 std@var579 ==@expr1073745022 "c99" ) {
81: return Standards ::@expr1073745023 C99 ;
82: }
83: if (@expr1073745024 std@var579 ==@expr1073745025 "c11" ) {
84: return Standards ::@expr1073745026 C11 ;
85: }
86: return Standards ::@expr1073745027 CLatest ;
87: }
88: bool setCPP ( std :: string str@var580 ) {
89: stdValue@var577 =@expr1073745028 str@var580 ;
90: strTolower (@expr1073745029 str@var580 ) ;
91: cpp@var576 =@expr1073745030 getCPP (@expr1073745031 str@var580 ) ;
92: return !@expr1073745032 stdValue@var577 .@expr1073745033 empty (@expr1073745034 ) &&@expr1073745035 str@var580 ==@expr1073745036 getCPP (@expr1073745037 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073745038 cpp@var576 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var581 ) {
98: switch (@expr1073745039 std@var581 ) {
99: case CPP03 :@expr3216 ;
100: return "c++03" ;
101: case CPP11 :@expr3216 ;
102: return "c++11" ;
103: case CPP14 :@expr3216 ;
104: return "c++14" ;
105: case CPP17 :@expr3216 ;
106: return "c++17" ;
107: case CPP20 :@expr3216 ;
108: return "c++20" ;
109: case CPP23 :@expr3216 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var582 ) {
115: if (@expr1073745046 std@var582 ==@expr1073745047 "c++03" ) {
116: return Standards ::@expr1073745048 CPP03 ;
117: }
118: if (@expr1073745049 std@var582 ==@expr1073745050 "c++11" ) {
119: return Standards ::@expr1073745051 CPP11 ;
120: }
121: if (@expr1073745052 std@var582 ==@expr1073745053 "c++14" ) {
122: return Standards ::@expr1073745054 CPP14 ;
123: }
124: if (@expr1073745055 std@var582 ==@expr1073745056 "c++17" ) {
125: return Standards ::@expr1073745057 CPP17 ;
126: }
127: if (@expr1073745058 std@var582 ==@expr1073745059 "c++20" ) {
128: return Standards ::@expr1073745060 CPP20 ;
129: }
130: if (@expr1073745061 std@var582 ==@expr1073745062 "c++23" ) {
131: return Standards ::@expr1073745063 CPP23 ;
132: }
133: return Standards ::@expr1073745064 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var586 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var583 ) : errorcode@var586 ( e@var583 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var584 , T && r@var585 ) : errorcode@var586 ( e@var584 ) , reason@var587 ( r@var585 ) { }
66: ErrorCode errorcode@var586 ;
67: std :: string reason@var587 ;
68: } ;
69:
70: Error load ( const char exename@var588 [ ] , const char path@var589 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var590 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var591 [ ] , unsigned long len@var592 ) ;
75:
76: struct AllocFunc {
77: int groupId@var593 ;
78: int arg@var594 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var595 ;
81: int bufferSizeArg1@var596 ;
82: int bufferSizeArg2@var597 ;
83: int reallocArg@var598 ;
84: bool initData@var599 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var600 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var601 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var602 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var603 , int arg@var604 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var605 , int arg@var606 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var607 , int arg@var608 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var609 [ ] ) const {
107: return getAllocDealloc (@expr1073745065 mAlloc@var875 , name@var609 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var610 [ ] ) const {
112: return getAllocDealloc (@expr1073745066 mDealloc@var876 , name@var610 ) ;
113: }
114:
115:
116: int allocId ( const char name@var611 [ ] ) const {
117: const AllocFunc * af@var612 ; af@var612 =@expr1073745067 getAllocDealloc (@expr1073745068 mAlloc@var875 , name@var611 ) ;
118: return af@var612 ?@expr1073745069 af@var612 .@expr1073745070 groupId@var613 :@expr1073745071 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var614 [ ] ) const {
123: const AllocFunc * af@var615 ; af@var615 =@expr1073745072 getAllocDealloc (@expr1073745073 mDealloc@var876 , name@var614 ) ;
124: return af@var615 ?@expr1073745074 af@var615 .@expr1073745075 groupId@var616 :@expr1073745076 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var617 , int id@var618 , int arg@var619 ) {
129: mAlloc@var875 [@expr3253 functionname@var617 ] .@expr1073745078 groupId@var2670 =@expr1073745079 id@var618 ;
130: mAlloc@var875 [@expr3253 functionname@var617 ] .@expr1073745081 arg@var2671 =@expr1073745082 arg@var619 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var620 , int id@var621 , int arg@var622 ) {
134: mDealloc@var876 [@expr3259 functionname@var620 ] .@expr1073745084 groupId@var2672 =@expr1073745085 id@var621 ;
135: mDealloc@var876 [@expr3259 functionname@var620 ] .@expr1073745087 arg@var2673 =@expr1073745088 arg@var622 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var623 , int id@var624 , int arg@var625 , int reallocArg@var626 = 1 ) {
139: mRealloc@var877 [@expr3265 functionname@var623 ] .@expr1073745090 groupId@var2674 =@expr1073745091 id@var624 ;
140: mRealloc@var877 [@expr3265 functionname@var623 ] .@expr1073745093 arg@var2675 =@expr1073745094 arg@var625 ;
141: mRealloc@var877 [@expr3265 functionname@var623 ] .@expr1073745096 reallocArg@var2676 =@expr1073745097 reallocArg@var626 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var627 , bool noreturn@var628 ) {
146: mNoReturn@var878 [@expr1073745098 funcname@var627 ] =@expr1073745099 noreturn@var628 ?@expr1073745100 FalseTrueMaybe ::@expr1073745101 True :@expr1073745102 FalseTrueMaybe ::@expr1073745103 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var629 ) ;
150:
151:
152: static bool ismemory ( const int id@var630 ) {
153: return (@expr3280 (@expr3280 id@var630 >@expr1073745106 0 ) &&@expr1073745107 (@expr3280 (@expr3280 id@var630 &@expr1073745110 1 ) ==@expr1073745111 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var631 ) {
156: return (@expr3288 (@expr3288 func@var631 .@expr3290 groupId@var632 >@expr1073745115 0 ) &&@expr1073745116 (@expr3288 (@expr3288 func@var631 .@expr3290 groupId@var632 &@expr1073745120 1 ) ==@expr1073745121 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var633 ) {
161: return (@expr3298 (@expr3298 id@var633 >@expr1073745124 0 ) &&@expr1073745125 (@expr3298 (@expr3298 id@var633 &@expr1073745128 1 ) ==@expr1073745129 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var634 ) {
164: return (@expr3306 (@expr3306 func@var634 .@expr3308 groupId@var635 >@expr1073745133 0 ) &&@expr1073745134 (@expr3306 (@expr3306 func@var634 .@expr3308 groupId@var635 &@expr1073745138 1 ) ==@expr1073745139 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var636 ) const ;
168: int formatstr_argno ( const Token * ftok@var637 ) const ;
169: bool formatstr_scan ( const Token * ftok@var638 ) const ;
170: bool formatstr_secure ( const Token * ftok@var639 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var640 ;
174: int ptr2Arg@var641 ;
175: int sizeArg@var642 ;
176: int strlenArg@var643 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var644 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var645 ;
182: Standards standards@var646 ;
183: Severity :: SeverityType severity@var647 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var648 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var649 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var650 ) const ;
191: bool matchArguments ( const Token * ftok@var651 , const std :: string & functionName@var652 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var653 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var654 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var655 ) const ;
198: int returnValueContainer ( const Token * ftok@var656 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var657 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var658 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var659 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var660 , std :: string * unknownFunc@var661 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var671 ( -1 ) ,
210: size_templateArgNo@var673 ( -1 ) ,
211: arrayLike_indexOp@var674 ( false ) ,
212: stdStringLike@var675 ( false ) ,
213: stdAssociativeLike@var676 ( false ) ,
214: opLessAllowed@var677 ( true ) ,
215: hasInitializerListConstructor@var678 ( false ) ,
216: unstableErase@var679 ( false ) ,
217: unstableInsert@var680 ( false ) ,
218: view@var681 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var662 ;
248: Yield yield@var663 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var664 ;
252: int templateParameter@var665 ;
253: } ;
254: std :: string startPattern@var666 ; std :: string startPattern2@var667 ; std :: string endPattern@var668 ; std :: string itEndPattern@var669 ;
255: std :: map < std :: string , Function > functions@var670 ;
256: int type_templateArgNo@var671 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var672 ;
258: int size_templateArgNo@var673 ;
259: bool arrayLike_indexOp@var674 ;
260: bool stdStringLike@var675 ;
261: bool stdAssociativeLike@var676 ;
262: bool opLessAllowed@var677 ;
263: bool hasInitializerListConstructor@var678 ;
264: bool unstableErase@var679 ;
265: bool unstableInsert@var680 ;
266: bool view@var681 ;
267:
268: Action getAction ( const std :: string & function@var682 ) const {
269: const std ::@expr1073745140 map < std ::@expr1073745141 string , Function > ::@expr1073745142 const_iterator i@var683 =@expr1073745143 functions@var670 .@expr1073745144 find (@expr1073745145 function@var682 ) ;
270: if (@expr1073745146 i@var683 !=@expr1073745147 functions@var670 .@expr1073745148 end (@expr1073745149 ) ) {
271: return i@var683 .@expr1073745150 second@var684 .@expr1073745151 action@var685 ; }
272: return Action ::@expr1073745152 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var686 ) const {
276: const std ::@expr1073745153 map < std ::@expr1073745154 string , Function > ::@expr1073745155 const_iterator i@var687 =@expr1073745156 functions@var670 .@expr1073745157 find (@expr1073745158 function@var686 ) ;
277: if (@expr1073745159 i@var687 !=@expr1073745160 functions@var670 .@expr1073745161 end (@expr1073745162 ) ) {
278: return i@var687 .@expr1073745163 second@var688 .@expr1073745164 yield@var689 ; }
279: return Yield ::@expr1073745165 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var690 ) ;
283: static Action actionFrom ( const std :: string & actionName@var691 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var692 ;
286: const Container * detectContainer ( const Token * typeStart@var693 , bool iterator@var694 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var695 , bool * isIterator@var696 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var697 ( false ) ,
293: notnull@var698 ( false ) ,
294: notuninit@var699 ( -1 ) ,
295: formatstr@var700 ( false ) ,
296: strz@var701 ( false ) ,
297: optional@var702 ( false ) ,
298: variadic@var703 ( false ) ,
299: iteratorInfo@var709 ( ) ,
300: direction@var717 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var697 ;
303: bool notnull@var698 ;
304: int notuninit@var699 ;
305: bool formatstr@var700 ;
306: bool strz@var701 ;
307: bool optional@var702 ;
308: bool variadic@var703 ;
309: std :: string valid@var704 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var705 ( 0 ) , it@var706 ( false ) , first@var707 ( false ) , last@var708 ( false ) { }
314:
315: int container@var705 ;
316: bool it@var706 ;
317: bool first@var707 ;
318: bool last@var708 ;
319: } ;
320: IteratorInfo iteratorInfo@var709 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var710 , int a@var711 ) : type@var712 ( t@var710 ) , arg@var713 ( a@var711 ) , arg2@var714 ( 0 ) , value@var715 ( 0 ) { }
326: Type type@var712 ;
327: int arg@var713 ;
328: int arg2@var714 ;
329: long long value@var715 ;
330: } ;
331: std :: vector < MinSize > minsizes@var716 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var717 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var718 ;
344: bool use@var719 ;
345: bool leakignore@var720 ;
346: bool isconst@var721 ;
347: bool ispure@var722 ;
348: UseRetValType useretval@var723 ;
349: bool ignore@var724 ;
350: bool formatstr@var725 ;
351: bool formatstr_scan@var726 ;
352: bool formatstr_secure@var727 ;
353: Container :: Action containerAction@var728 ;
354: Container :: Yield containerYield@var729 ;
355: Function ( )
356: : use@var719 ( false ) ,
357: leakignore@var720 ( false ) ,
358: isconst@var721 ( false ) ,
359: ispure@var722 ( false ) ,
360: useretval@var723 ( UseRetValType :: NONE ) ,
361: ignore@var724 ( false ) ,
362: formatstr@var725 ( false ) ,
363: formatstr_scan@var726 ( false ) ,
364: formatstr_secure@var727 ( false ) ,
365: containerAction@var728 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var729 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var730 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var731 ;
372: bool isUse ( const std :: string & functionName@var732 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var733 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var734 , bool pure@var735 ) const ;
375: bool isFunctionConst ( const Token * ftok@var736 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var737 , int argnr@var738 ) const {
378: const ArgumentChecks * arg@var739 ; arg@var739 =@expr1073745166 getarg (@expr1073745167 ftok@var737 , argnr@var738 ) ;
379: return arg@var739 &&@expr1073745168 arg@var739 .@expr1073745169 notbool@var740 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var741 , int argnr@var742 ) const ;
383: bool isuninitargbad ( const Token * ftok@var743 , int argnr@var744 , int indirect@var745 = 0 , bool * hasIndirect@var746 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var747 , int argnr@var748 ) const {
386: const ArgumentChecks * arg@var749 ; arg@var749 =@expr1073745170 getarg (@expr1073745171 ftok@var747 , argnr@var748 ) ;
387: return arg@var749 &&@expr1073745172 arg@var749 .@expr1073745173 formatstr@var750 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var751 , int argnr@var752 ) const {
391: const ArgumentChecks * arg@var753 ; arg@var753 =@expr1073745174 getarg (@expr1073745175 ftok@var751 , argnr@var752 ) ;
392: return arg@var753 &&@expr1073745176 arg@var753 .@expr1073745177 strz@var754 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var755 , int argnr@var756 , const long long argvalue@var757 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var758 , int argnr@var759 , double argvalue@var760 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var761 , int argnr@var762 ) const {
399: const ArgumentChecks * arg@var763 ; arg@var763 =@expr1073745178 getarg (@expr1073745179 ftok@var761 , argnr@var762 ) ;
400: return arg@var763 ?@expr1073745180 arg@var763 .@expr1073745181 valid@var764 :@expr1073745182 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var765 ;
405: std :: string op1@var766 ;
406: std :: string op2@var767 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073745183 isInt (@expr1073745184 op1@var766 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var768 , int argnr@var769 ) const {
413: const ArgumentChecks * arg@var770 ; arg@var770 =@expr1073745185 getarg (@expr1073745186 ftok@var768 , argnr@var769 ) ;
414: return arg@var770 &&@expr1073745187 arg@var770 .@expr3364 iteratorInfo@var771 .@expr1073745189 it@var772 ?@expr1073745190 &@expr1073745191 arg@var770 .@expr3364 iteratorInfo@var771 :@expr1073745193 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var773 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var774 , int argnr@var775 ) const {
420: const ArgumentChecks * arg@var776 ; arg@var776 =@expr1073745194 getarg (@expr1073745195 ftok@var774 , argnr@var775 ) ;
421: return arg@var776 ?@expr1073745196 &@expr1073745197 arg@var776 .@expr1073745198 minsizes@var777 :@expr1073745199 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var778 , int argnr@var779 ) const ;
425:
426: bool markupFile ( const std :: string & path@var780 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var781 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var885 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var782 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var783 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var784 , const std :: string & token@var785 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var786 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var787 ) const ;
443: const std :: string & blockend ( const std :: string & file@var788 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var789 , const std :: string & keyword@var790 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var791 ) const {
448: return mExporters@var888 .@expr1073745200 find (@expr1073745201 prefix@var791 ) !=@expr1073745202 mExporters@var888 .@expr1073745203 end (@expr1073745204 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var792 , const std :: string & token@var793 ) const {
452: const std ::@expr1073745205 map < std ::@expr1073745206 string , ExportedFunctions > ::@expr1073745207 const_iterator it@var794 =@expr1073745208 mExporters@var888 .@expr1073745209 find (@expr1073745210 prefix@var792 ) ;
453: return (@expr1073745211 it@var794 !=@expr1073745212 mExporters@var888 .@expr1073745213 end (@expr1073745214 ) &&@expr1073745215 it@var794 .@expr1073745216 second@var795 .@expr1073745217 isPrefix (@expr1073745218 token@var793 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var796 , const std :: string & token@var797 ) const {
457: const std ::@expr1073745219 map < std ::@expr1073745220 string , ExportedFunctions > ::@expr1073745221 const_iterator it@var798 =@expr1073745222 mExporters@var888 .@expr1073745223 find (@expr1073745224 prefix@var796 ) ;
458: return (@expr1073745225 it@var798 !=@expr1073745226 mExporters@var888 .@expr1073745227 end (@expr1073745228 ) &&@expr1073745229 it@var798 .@expr1073745230 second@var799 .@expr1073745231 isSuffix (@expr1073745232 token@var797 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var800 , const std :: string & importer@var801 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var802 , Container :: Yield yield@var803 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var804 , Container :: Action action@var805 ) const ;
465:
466: bool isreflection ( const std :: string & token@var806 ) const {
467: return mReflection@var890 .@expr1073745233 find (@expr1073745234 token@var806 ) !=@expr1073745235 mReflection@var890 .@expr1073745236 end (@expr1073745237 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var807 ) const {
471: const std ::@expr1073745238 map < std ::@expr1073745239 string , int > ::@expr1073745240 const_iterator it@var808 =@expr1073745241 mReflection@var890 .@expr1073745242 find (@expr1073745243 token@var807 ) ;
472: if (@expr1073745244 it@var808 !=@expr1073745245 mReflection@var890 .@expr1073745246 end (@expr1073745247 ) ) {
473: return it@var808 .@expr1073745248 second@var809 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var810 ;
478:
479: struct SmartPointer {
480: std :: string name@var811 ; name@var811 = "" ;
481: bool unique@var812 ; unique@var812 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var813 ;
485: bool isSmartPointer ( const Token * tok@var814 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var815 ) const ;
487:
488: struct PodType {
489: unsigned int size@var816 ;
490: char sign@var817 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var818 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var819 ) const {
494: const std ::@expr1073745249 unordered_map < std ::@expr1073745250 string , PodType > ::@expr1073745251 const_iterator it@var820 =@expr1073745252 mPodTypes@var891 .@expr1073745253 find (@expr1073745254 name@var819 ) ;
495: return (@expr3431 it@var820 !=@expr1073745256 mPodTypes@var891 .@expr1073745257 end (@expr1073745258 ) ) ?@expr1073745259 &@expr1073745260 (@expr3431 it@var820 .@expr1073745262 second@var821 ) :@expr1073745263 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var832 ( false )
501: , mUnsigned@var833 ( false )
502: , mLong@var834 ( false )
503: , mPointer@var835 ( false )
504: , mPtrPtr@var836 ( false )
505: , mConstPtr@var837 ( false ) { }
506: bool operator== ( const PlatformType & type@var822 ) const {
507: return (@expr1073745264 mSigned@var832 ==@expr1073745265 type@var822 .@expr1073745266 mSigned@var823 &&@expr1073745267
508: mUnsigned@var833 ==@expr1073745268 type@var822 .@expr1073745269 mUnsigned@var824 &&@expr1073745270
509: mLong@var834 ==@expr1073745271 type@var822 .@expr1073745272 mLong@var825 &&@expr1073745273
510: mPointer@var835 ==@expr1073745274 type@var822 .@expr1073745275 mPointer@var826 &&@expr1073745276
511: mPtrPtr@var836 ==@expr1073745277 type@var822 .@expr1073745278 mPtrPtr@var827 &&@expr1073745279
512: mConstPtr@var837 ==@expr1073745280 type@var822 .@expr1073745281 mConstPtr@var828 &&@expr1073745282
513: mType@var831 ==@expr1073745283 type@var822 .@expr1073745284 mType@var829 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var830 ) const {
516: return !@expr1073745285 (@expr1073745286 *@expr1073745287 this@expr1073745288 ==@expr1073745289 type@var830 ) ;
517: }
518: std :: string mType@var831 ;
519: bool mSigned@var832 ;
520: bool mUnsigned@var833 ;
521: bool mLong@var834 ;
522: bool mPointer@var835 ;
523: bool mPtrPtr@var836 ;
524: bool mConstPtr@var837 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var838 ) const {
529: const std ::@expr1073745290 map < std ::@expr1073745291 string , PlatformType > ::@expr1073745292 const_iterator it@var839 =@expr1073745293 mPlatformTypes@var841 .@expr1073745294 find (@expr1073745295 name@var838 ) ;
530: return (@expr3472 it@var839 !=@expr1073745297 mPlatformTypes@var841 .@expr1073745298 end (@expr1073745299 ) ) ?@expr1073745300 &@expr1073745301 (@expr3472 it@var839 .@expr1073745303 second@var840 ) :@expr1073745304 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var841 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var842 , const std :: string & platform@var843 ) const {
536: const std ::@expr1073745305 map < std ::@expr3482 string , Platform > ::@expr1073745307 const_iterator it@var844 =@expr1073745308 mPlatforms@var893 .@expr1073745309 find (@expr1073745310 platform@var843 ) ;
537: if (@expr1073745311 it@var844 !=@expr1073745312 mPlatforms@var893 .@expr1073745313 end (@expr1073745314 ) ) {
538: const PlatformType * const type@var845 ; type@var845 =@expr1073745315 it@var844 .@expr1073745316 second@var846 .@expr1073745317 platform_type (@expr1073745318 name@var842 ) ;
539: if (@expr1073745319 type@var845 ) {
540: return type@var845 ; }
541: }
542:
543: const std ::@expr1073745320 map < std ::@expr3482 string , PlatformType > ::@expr1073745322 const_iterator it2@var847 =@expr1073745323 mPlatformTypes@var892 .@expr1073745324 find (@expr1073745325 name@var842 ) ;
544: return (@expr3502 it2@var847 !=@expr1073745327 mPlatformTypes@var892 .@expr1073745328 end (@expr1073745329 ) ) ?@expr1073745330 &@expr1073745331 (@expr3502 it2@var847 .@expr1073745333 second@var848 ) :@expr1073745334 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var849 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var850 , Library :: Container :: Yield y@var851 , const std :: string & fallback@var852 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var853 , const std :: string & typeName@var854 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var855 , const std :: string & name@var856 , std :: set < std :: string > & unknown_elements@var857 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var858 ) {
565: mPrefixes@var862 .@expr1073745335 insert (@expr1073745336 prefix@var858 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var859 ) {
568: mSuffixes@var863 .@expr1073745337 insert (@expr1073745338 suffix@var859 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var860 ) const {
571: return (@expr1073745339 mPrefixes@var862 .@expr1073745340 find (@expr1073745341 prefix@var860 ) !=@expr1073745342 mPrefixes@var862 .@expr1073745343 end (@expr1073745344 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var861 ) const {
574: return (@expr1073745345 mSuffixes@var863 .@expr1073745346 find (@expr1073745347 suffix@var861 ) !=@expr1073745348 mSuffixes@var863 .@expr1073745349 end (@expr1073745350 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var862 ;
579: std :: set < std :: string > mSuffixes@var863 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var871 ( 0 ) { }
584:
585: void setStart ( const char * s@var864 ) {
586: mStart@var869 =@expr1073745351 s@var864 ;
587: }
588: void setEnd ( const char * e@var865 ) {
589: mEnd@var870 =@expr1073745352 e@var865 ;
590: }
591: void setOffset ( const int o@var866 ) {
592: mOffset@var871 =@expr1073745353 o@var866 ;
593: }
594: void addBlock ( const char * blockName@var867 ) {
595: mBlocks@var872 .@expr1073745354 insert (@expr1073745355 blockName@var867 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var869 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var870 ;
602: }
603: int offset ( ) const {
604: return mOffset@var871 ;
605: }
606: bool isBlock ( const std :: string & blockName@var868 ) const {
607: return mBlocks@var872 .@expr1073745356 find (@expr1073745357 blockName@var868 ) !=@expr1073745358 mBlocks@var872 .@expr1073745359 end (@expr1073745360 ) ;
608: }
609:
610: private:
611: std :: string mStart@var869 ;
612: std :: string mEnd@var870 ;
613: int mOffset@var871 ;
614: std :: set < std :: string > mBlocks@var872 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var873 ;
618: std :: set < std :: string > mFiles@var874 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var875 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var876 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var877 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var878 ;
623: std :: map < std :: string , std :: string > mReturnValue@var879 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var880 ;
625: std :: map < std :: string , int > mReturnValueContainer@var881 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var882 ;
627: std :: map < std :: string , bool > mReportErrors@var883 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var884 ;
629: std :: set < std :: string > mMarkupExtensions@var885 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var886 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var887 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var888 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var889 ;
634: std :: map < std :: string , int > mReflection@var890 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var891 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var892 ;
637: std :: map < std :: string , Platform > mPlatforms@var893 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var894 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var895 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var896 , int argnr@var897 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var898 , bool * error@var899 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var900 , const std :: string & name@var901 ) {
646: const std ::@expr1073745361 map < std ::@expr1073745362 string , AllocFunc > ::@expr1073745363 const_iterator it@var902 =@expr1073745364 data@var900 .@expr1073745365 find (@expr1073745366 name@var901 ) ;
647: return (@expr1073745367 it@var902 ==@expr1073745368 data@var900 .@expr1073745369 end (@expr1073745370 ) ) ?@expr1073745371 nullptr :@expr1073745372 &@expr1073745373 it@var902 .@expr1073745374 second@var903 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var904 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var905 ,
654: const Settings * settings@var906 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var907 = nullptr ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var908 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var909 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var910 ;
69: std :: string mScope@var911 ;
70: std :: string mName@var912 ;
71: std :: string mFullName@var913 ;
72: const Token * mNameToken@var914 ;
73: const Token * mParamEnd@var915 ;
74: unsigned int mFlags@var916 ;
75:
76: enum Anonymous1 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var917 ) {
90: setFlag (@expr1073745375 fIsClass , state@var917 ) ;
91: }
92: void isFunction ( bool state@var918 ) {
93: setFlag (@expr1073745376 fIsFunction , state@var918 ) ;
94: }
95: void isVariable ( bool state@var919 ) {
96: setFlag (@expr1073745377 fIsVariable , state@var919 ) ;
97: }
98: void isAlias ( bool state@var920 ) {
99: setFlag (@expr1073745378 fIsAlias , state@var920 ) ;
100: }
101: void isSpecialization ( bool state@var921 ) {
102: setFlag (@expr1073745379 fIsSpecialization , state@var921 ) ;
103: }
104: void isPartialSpecialization ( bool state@var922 ) {
105: setFlag (@expr1073745380 fIsPartialSpecialization , state@var922 ) ;
106: }
107: void isForwardDeclaration ( bool state@var923 ) {
108: setFlag (@expr1073745381 fIsForwardDeclaration , state@var923 ) ;
109: }
110: void isVariadic ( bool state@var924 ) {
111: setFlag (@expr1073745382 fIsVariadic , state@var924 ) ;
112: }
113: void isFriend ( bool state@var925 ) {
114: setFlag (@expr1073745383 fIsFriend , state@var925 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var926 ) const {
123: return (@expr3560 (@expr3560 mFlags@var916 &@expr1073745386 flag@var926 ) !=@expr1073745387 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var927 , bool state@var928 ) {
132: mFlags@var916 =@expr1073745388 state@var928 ?@expr1073745389 mFlags@var916 |@expr1073745390 flag@var927 :@expr1073745391 mFlags@var916 &@expr1073745392 ~@expr1073745393 flag@var927 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var929 , const std :: string & scope@var930 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var931 , const std :: string & scope@var932 , const Token * nameToken@var933 , const Token * paramEnd@var934 ) ;
150: TokenAndName ( const TokenAndName & other@var935 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var936 ) const {
154: return mToken@var910 ==@expr1073745394 rhs@var936 .@expr1073745395 mToken@var937 &&@expr1073745396 mScope@var911 ==@expr1073745397 rhs@var936 .@expr1073745398 mScope@var938 &&@expr1073745399 mName@var912 ==@expr1073745400 rhs@var936 .@expr1073745401 mName@var939 &&@expr1073745402 mFullName@var913 ==@expr1073745403 rhs@var936 .@expr1073745404 mFullName@var940 &&@expr1073745405
155: mNameToken@var914 ==@expr1073745406 rhs@var936 .@expr1073745407 mNameToken@var941 &&@expr1073745408 mParamEnd@var915 ==@expr1073745409 rhs@var936 .@expr1073745410 mParamEnd@var942 &&@expr1073745411 mFlags@var916 ==@expr1073745412 rhs@var936 .@expr1073745413 mFlags@var943 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var910 ;
160: }
161: void token ( Token * token@var944 ) {
162: mToken@var910 =@expr1073745414 token@var944 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var911 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var912 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var913 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var914 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var915 ;
178: }
179: void paramEnd ( const Token * end@var945 ) {
180: mParamEnd@var915 =@expr1073745415 end@var945 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073745416 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073745417 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073745418 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073745419 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073745420 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073745421 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073745422 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073745423 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073745424 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var946 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var947 ) const {
243:
244:
245: return (@expr3601 (@expr3601 mFlags@var916 &@expr1073745427 fFamilyMask ) &@expr1073745428 (@expr3601 decl@var947 .@expr1073745430 mFlags@var948 &@expr1073745431 fFamilyMask ) ) !=@expr1073745432 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var949 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var950 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var951 , const unsigned long numberOfArguments@var952 , bool variadic@var953 , const char patternAfter@var954 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var955 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var956 , int & namepos@var957 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var958 , int & namepos@var959 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var960 , int & namepos@var961 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var962 ,
306: bool & codeWithTemplates@var963 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var964 , bool isTemplate@var965 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var966 = nullptr , Token * backToken@var967 = nullptr , bool isTemplate@var968 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var969 , Token * end@var970 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var971 , const std :: string & scope@var972 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var973 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var974 ,
393: const std :: list < const Token * > & specializations@var975 ,
394: const std :: time_t maxtime@var976 ,
395: std :: set < std :: string > & expandedtemplates@var977 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var978 , const Token * tok@var979 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var980 , const Token * tok@var981 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var982 ,
422: const TokenAndName & templateInstantiation@var983 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var984 ,
424: const std :: string & newName@var985 ,
425: bool copy@var986 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var987 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var988 ,
435: const std :: string & newName@var989 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var990 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var991 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var992 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var993 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var994 ,
458: const Token * templateInstantiationNameToken@var995 ,
459: const std :: list < const Token * > & specializations@var996 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var997 , const Token * end@var998 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var999 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1000 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1001 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1002 ,
487: const std :: string & indent@var1003 = "    " ) const ;
488: void printOut ( const std :: string & text@var1004 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1005 ;
491: TokenList & mTokenList@var1006 ;
492: const Settings * mSettings@var1007 ;
493: ErrorLogger * mErrorLogger@var1008 ;
494: bool mChanged@var1009 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1010 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1011 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1012 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1013 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1014 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1015 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1016 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1017 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1018 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1019 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1020 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1021 ;
57: Token * back@var1022 ;
58: const TokenList * list@var1023 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1024 , const Token * bodyEnd_@var1025 , const std :: set < std :: string > & usingNamespaces_@var1026 = std :: set < std :: string > ( ) ) : name@var1027 ( name_@var1024 ) , bodyEnd@var1028 ( bodyEnd_@var1025 ) , usingNamespaces@var1029 ( usingNamespaces_@var1026 ) { }
63: std :: string name@var1027 ;
64: const Token * const bodyEnd@var1028 ;
65: std :: set < std :: string > usingNamespaces@var1029 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1030 ;
70: int mFileIndex@var1031 ;
71: int mLineNumber@var1032 ;
72: int mColumn@var1033 ;
73: int mExprId@var1034 ;
74:
75:
76: Token * mAstOperand1@var1035 ;
77: Token * mAstOperand2@var1036 ;
78: Token * mAstParent@var1037 ;
79:
80:
81: const Scope * mScope@var1038 ;
82: union {
83: const Function * mFunction@var1039 ;
84: const Variable * mVariable@var1040 ;
85: const :: Type * mType@var1041 ;
86: const Enumerator * mEnumerator@var1042 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1043 ;
94:
|
97:
98: int mIndex@var1044 ;
99:
100:
101: std :: string * mOriginalName@var1045 ;
102:
103:
104: ValueType * mValueType@var1046 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1047 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1048 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1049 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1050 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1051 ;
119: long long value@var1052 ;
120: struct CppcheckAttributes * next@var1053 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1054 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1055 ;
126:
127:
128: unsigned char mBits@var1056 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1057 , long long value@var1058 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1059 , long long * value@var1060 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1030 ( 0 )
135: , mFileIndex@var1031 ( 0 )
136: , mLineNumber@var1032 ( 0 )
137: , mColumn@var1033 ( 0 )
138: , mExprId@var1034 ( 0 )
139: , mAstOperand1@var1035 ( nullptr )
140: , mAstOperand2@var1036 ( nullptr )
141: , mAstParent@var1037 ( nullptr )
142: , mScope@var1038 ( nullptr )
143: , mFunction@var1039 ( nullptr )
144: , mProgressValue@var1043 ( 0 )
145: , mIndex@var1044 ( 0 )
146: , mOriginalName@var1045 ( nullptr )
147: , mValueType@var1046 ( nullptr )
148: , mValues@var1047 ( nullptr )
149: , mTemplateSimplifierPointers@var1049 ( nullptr )
150: , mScopeInfo@var1050 ( nullptr )
151: , mCppcheckAttributes@var1054 ( nullptr )
152: , mCpp11init@var1055 ( Cpp11init :: UNKNOWN )
153: , mBits@var1056 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1061 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1062 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1063 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1064 ) {
199: mStr@var1276 =@expr1073745433 s@var1064 ;
200: mImpl@var1282 .@expr1073745434 mVarId@var1313 =@expr1073745435 0 ;
201:
202: update_property_info (@expr1073745436 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1065 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1276 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1066 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1067 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1068 ) const ;
236: Token * tokAt ( int index@var1069 ) {
237: return const_cast < Token *@expr3613 > (@expr1073745438 const_cast < const Token *@expr3613 > (@expr1073745440 this@expr1073745441 ) .@expr1073745442 tokAt (@expr1073745443 index@var1069 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1070 ) const ;
245: Token * linkAt ( int index@var1071 ) {
246: return const_cast < Token *@expr3620 > (@expr1073745445 const_cast < const Token *@expr3620 > (@expr1073745447 this@expr1073745448 ) .@expr1073745449 linkAt (@expr1073745450 index@var1071 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1072 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1073 , const char ( & pattern@var1074 ) [ count ] ) {
276: return simpleMatch (@expr1073745452 tok@var1073 , pattern@var1074 , count@expr1073745451 -@expr1073745453 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1075 , const char pattern@var1076 [ ] , unsigned long pattern_len@var1077 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1078 , const char pattern@var1079 [ ] , int varid@var1080 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1081 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1082 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1083 , const Settings * const settings@var1084 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1085 , long long index@var1086 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1282 .@expr1073745454 mValueType@var1314 ;
366: }
367: void setValueType ( ValueType * vt@var1087 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1088 ; top@var1088 =@expr1073745455 this@expr1073745456 ;
371: while (@expr1073745457 top@var1088 &&@expr1073745458 !@expr1073745459 Token ::@expr1073745460 Match (@expr1073745461 top@var1088 .@expr3638 astParent (@expr3639 ) , ",|(" ) ) {
372: top@var1088 =@expr1073745464 top@var1088 .@expr3638 astParent (@expr3639 ) ; }
373: return top@var1088 ?@expr1073745467 top@var1088 .@expr1073745468 mImpl@var1089 .@expr1073745469 mValueType@var1090 :@expr1073745470 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1280 ;
378: }
379: void tokType ( Token :: Type t@var1091 ) {
380: mTokType@var1280 =@expr1073745471 t@var1091 ;
381:
382: const bool memoizedIsName@var1092 =@expr1073745472 mTokType@var1280 ==@expr1073745473 eName ||@expr1073745474 mTokType@var1280 ==@expr1073745475 eType ||@expr1073745476 mTokType@var1280 ==@expr1073745477 eVariable ||@expr1073745478
383: mTokType@var1280 ==@expr1073745479 eFunction ||@expr1073745480 mTokType@var1280 ==@expr1073745481 eKeyword ||@expr1073745482 mTokType@var1280 ==@expr3659 eBoolean ||@expr1073745484
384: mTokType@var1280 ==@expr3661 eEnumerator ;
385: setFlag (@expr1073745486 fIsName , memoizedIsName@var1092 ) ;
386:
387: const bool memoizedIsLiteral@var1093 =@expr1073745487 mTokType@var1280 ==@expr1073745488 eNumber ||@expr1073745489 mTokType@var1280 ==@expr1073745490 eString ||@expr1073745491 mTokType@var1280 ==@expr1073745492 eChar ||@expr1073745493
388: mTokType@var1280 ==@expr3659 eBoolean ||@expr1073745495 mTokType@var1280 ==@expr1073745496 eLiteral ||@expr1073745497 mTokType@var1280 ==@expr3661 eEnumerator ;
389: setFlag (@expr1073745499 fIsLiteral , memoizedIsLiteral@var1093 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1280 ==@expr1073745500 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073745501 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1281 ==@expr1073745502 fIsName &&@expr1073745503 mTokType@var1280 ==@expr1073745504 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073745505 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1280 ==@expr1073745506 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1280 ==@expr1073745507 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073745508 isConstOp (@expr1073745509 ) ||@expr1073745510
412: isAssignmentOp (@expr1073745511 ) ||@expr1073745512
413: mTokType@var1280 ==@expr1073745513 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073745514 isArithmeticalOp (@expr1073745515 ) ||@expr1073745516
417: mTokType@var1280 ==@expr1073745517 eLogicalOp ||@expr1073745518
418: mTokType@var1280 ==@expr1073745519 eComparisonOp ||@expr1073745520
419: mTokType@var1280 ==@expr1073745521 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073745522 ) ||@expr1073745523
423: mTokType@var1280 ==@expr1073745524 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1280 ==@expr1073745525 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1280 ==@expr1073745526 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1280 ==@expr1073745527 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1280 ==@expr1073745528 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1280 ==@expr1073745529 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073745530 ) !=@expr1073745531 nullptr &&@expr1073745532 astOperand2 (@expr1073745533 ) !=@expr1073745534 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1094 ) const {
444: return s@var1094 ==@expr1073745535 mStr@var1276 &&@expr1073745536 astOperand1 (@expr1073745537 ) !=@expr1073745538 nullptr &&@expr1073745539 astOperand2 (@expr1073745540 ) ==@expr1073745541 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1281 ;
450: }
451: void flags ( const unsigned int flags_@var1095 ) {
452: mFlags@var1281 =@expr1073745542 flags_@var1095 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073745543 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1096 ) {
458: setFlag (@expr1073745544 fIsUnsigned , sign@var1096 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073745545 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1097 ) {
464: setFlag (@expr1073745546 fIsSigned , sign@var1097 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073745547 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1098 ) {
470: setFlag (@expr1073745548 fIsPointerCompare , b@var1098 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073745549 fIsLong ) ;
474: }
475: void isLong ( bool size@var1099 ) {
476: setFlag (@expr1073745550 fIsLong , size@var1099 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073745551 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1100 ) {
482: setFlag (@expr1073745552 fIsStandardType , b@var1100 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073745553 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1101 ) {
488: setFlag (@expr1073745554 fIsExpandedMacro , m@var1101 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073745555 fIsCast ) ;
492: }
493: void isCast ( bool c@var1102 ) {
494: setFlag (@expr1073745556 fIsCast , c@var1102 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073745557 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1103 ) {
500: setFlag (@expr1073745558 fIsAttributeConstructor , ac@var1103 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073745559 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1104 ) {
506: setFlag (@expr1073745560 fIsAttributeDestructor , value@var1104 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073745561 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1105 ) {
512: setFlag (@expr1073745562 fIsAttributeUnused , unused@var1105 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073745563 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1106 ) {
518: setFlag (@expr1073745564 fIsAttributeUsed , unused@var1106 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073745565 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1107 ) {
524: setFlag (@expr1073745566 fIsAttributePure , value@var1107 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073745567 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1108 ) {
530: setFlag (@expr1073745568 fIsAttributeConst , value@var1108 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073745569 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1109 ) {
536: setFlag (@expr1073745570 fIsAttributeNoreturn , value@var1109 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073745571 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1110 ) {
542: setFlag (@expr1073745572 fIsAttributeNothrow , value@var1110 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073745573 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1111 ) {
548: setFlag (@expr1073745574 fIsAttributePacked , value@var1111 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073745575 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1112 ) {
554: setFlag (@expr1073745576 fIsAttributeNodiscard , value@var1112 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073745577 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1113 ) {
560: setFlag (@expr1073745578 fIsAttributeMaybeUnused , value@var1113 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1114 , long long value@var1115 ) {
563: mImpl@var1282 .@expr1073745579 setCppcheckAttribute (@expr1073745580 type@var1114 , value@var1115 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1116 , long long * value@var1117 ) const {
566: return mImpl@var1282 .@expr1073745581 getCppcheckAttribute (@expr1073745582 type@var1116 , value@var1117 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073745583 mImpl@var1282 .@expr1073745584 mCppcheckAttributes@var1315 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073745585 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073745586 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1118 ) {
578: setFlag (@expr1073745587 fIsOperatorKeyword , value@var1118 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073745588 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1119 ) {
584: setFlag (@expr1073745589 fIsComplex , value@var1119 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073745590 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1120 ) {
590: setFlag (@expr1073745591 fIsEnumType , value@var1120 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073745592 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1121 ) {
596: setFlag (@expr1073745593 fAtAddress , b@var1121 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073745594 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1122 ) {
602: setFlag (@expr1073745595 fIncompleteVar , b@var1122 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073745596 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1123 ) {
609: setFlag (@expr1073745597 fIsIncompleteConstant , b@var1123 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073745598 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1124 ) {
616: setFlag (@expr1073745599 fConstexpr , b@var1124 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073745600 fExternC ) ;
621: }
622: void isExternC ( bool b@var1125 ) {
623: setFlag (@expr1073745601 fExternC , b@var1125 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073745602 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1126 ) {
630: setFlag (@expr1073745603 fIsSplitVarDeclComma , b@var1126 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745604 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1127 ) {
637: setFlag (@expr1073745605 fIsSplitVarDeclEq , b@var1127 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745606 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1128 ) {
644: setFlag (@expr1073745607 fIsImplicitInt , b@var1128 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745608 fIsInline ) ;
649: }
650: void isInline ( bool b@var1129 ) {
651: setFlag (@expr1073745609 fIsInline , b@var1129 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745610 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1130 ) {
658: setFlag (@expr1073745611 fIsRemovedVoidParameter , b@var1130 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745612 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1131 ) {
665: setFlag (@expr1073745613 fIsTemplate , b@var1131 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745614 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1132 ) {
672: setFlag (@expr1073745615 fIsSimplifedScope , b@var1132 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1282 .@expr1073745616 mBits@var1316 >@expr1073745617 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1282 .@expr1073745618 mBits@var1316 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1282 .@expr1073745619 mTemplateSimplifierPointers@var1317 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1133 ) {
685: if (@expr1073745620 !@expr1073745621 mImpl@var1282 .@expr3798 mTemplateSimplifierPointers@var1317 ) {
686: mImpl@var1282 .@expr3798 mTemplateSimplifierPointers@var1317 =@expr1073745624 new std ::@expr1073745625 set < TemplateSimplifier ::@expr1073745626 TokenAndName *@expr1073745627 > ; }
687: mImpl@var1282 .@expr3798 mTemplateSimplifierPointers@var1317 .@expr1073745629 insert (@expr1073745630 tokenAndName@var1133 ) ;
688: }
689: void setBits ( const unsigned char b@var1134 ) {
690: mImpl@var1282 .@expr1073745631 mBits@var1316 =@expr1073745632 b@var1134 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3809 (@expr3809 (@expr3809 mTokType@var1280 ==@expr1073745636 eString ) &&@expr1073745637 isPrefixStringCharLiteral (@expr1073745638 mStr@var1276 , '"' , "u8" ) ) ||@expr1073745639
695: (@expr3809 (@expr3809 mTokType@var1280 ==@expr1073745642 eChar ) &&@expr1073745643 isPrefixStringCharLiteral (@expr1073745644 mStr@var1276 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3821 (@expr3821 (@expr3821 mTokType@var1280 ==@expr1073745648 eString ) &&@expr1073745649 isPrefixStringCharLiteral (@expr1073745650 mStr@var1276 , '"' , "u" ) ) ||@expr1073745651
700: (@expr3821 (@expr3821 mTokType@var1280 ==@expr1073745654 eChar ) &&@expr1073745655 isPrefixStringCharLiteral (@expr1073745656 mStr@var1276 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3833 (@expr3833 (@expr3833 mTokType@var1280 ==@expr1073745660 eString ) &&@expr1073745661 isPrefixStringCharLiteral (@expr1073745662 mStr@var1276 , '"' , "U" ) ) ||@expr1073745663
705: (@expr3833 (@expr3833 mTokType@var1280 ==@expr1073745666 eChar ) &&@expr1073745667 isPrefixStringCharLiteral (@expr1073745668 mStr@var1276 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3845 (@expr3845 (@expr3845 mTokType@var1280 ==@expr1073745672 eString ) &&@expr1073745673 isPrefixStringCharLiteral (@expr1073745674 mStr@var1276 , '"' , "" ) ) ||@expr1073745675
710: (@expr3845 (@expr3845 mTokType@var1280 ==@expr1073745678 eChar ) &&@expr1073745679 isPrefixStringCharLiteral (@expr1073745680 mStr@var1276 , '\'' , "" ) &&@expr1073745681 mStr@var1276 .@expr1073745682 length (@expr1073745683 ) ==@expr1073745684 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3861 (@expr3861 (@expr3861 mTokType@var1280 ==@expr1073745688 eChar ) &&@expr1073745689 isPrefixStringCharLiteral (@expr1073745690 mStr@var1276 , '\'' , "" ) ) &&@expr1073745691
715: (@expr3861 mStr@var1276 .@expr1073745693 length (@expr1073745694 ) >@expr1073745695 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745696 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1135 ) {
738: setFlag (@expr1073745697 fIsTemplateArg , value@var1135 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1136 , const char ( & pattern@var1137 ) [ count ] ) {
743: return findsimplematch (@expr1073745699 startTok@var1136 , pattern@var1137 , count@expr1073745698 -@expr1073745700 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1138 , const char pattern@var1139 [ ] , unsigned long pattern_len@var1140 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1141 , const char ( & pattern@var1142 ) [ count ] , const Token * const end@var1143 ) {
749: return findsimplematch (@expr1073745702 startTok@var1141 , pattern@var1142 , count@expr1073745701 -@expr1073745703 1 , end@var1143 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1144 , const char pattern@var1145 [ ] , unsigned long pattern_len@var1146 , const Token * const end@var1147 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1148 , const char pattern@var1149 [ ] , const int varId@var1150 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1151 , const char pattern@var1152 [ ] , const Token * const end@var1153 , const int varId@var1154 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1155 , const char ( & pattern@var1156 ) [ count ] ) {
758: return findsimplematch (@expr1073745705 startTok@var1155 , pattern@var1156 , count@expr1073745704 -@expr1073745706 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1157 , const char pattern@var1158 [ ] , unsigned long pattern_len@var1159 ) {
761: return const_cast < Token *@expr3883 > (@expr1073745708 findsimplematch (@expr1073745709 const_cast < const Token *@expr3883 > (@expr1073745711 startTok@var1157 ) , pattern@var1158 , pattern_len@var1159 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1160 , const char ( & pattern@var1161 ) [ count ] , const Token * const end@var1162 ) {
765: return findsimplematch (@expr1073745713 startTok@var1160 , pattern@var1161 , count@expr1073745712 -@expr1073745714 1 , end@var1162 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1163 , const char pattern@var1164 [ ] , unsigned long pattern_len@var1165 , const Token * const end@var1166 ) {
768: return const_cast < Token *@expr3891 > (@expr1073745716 findsimplematch (@expr1073745717 const_cast < const Token *@expr3891 > (@expr1073745719 startTok@var1163 ) , pattern@var1164 , pattern_len@var1165 , end@var1166 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1167 , const char pattern@var1168 [ ] , const int varId@var1169 = 0 ) {
772: return const_cast < Token *@expr3896 > (@expr1073745721 findmatch (@expr1073745722 const_cast < const Token *@expr3896 > (@expr1073745724 startTok@var1167 ) , pattern@var1168 , varId@var1169 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1170 , const char pattern@var1171 [ ] , const Token * const end@var1172 , const int varId@var1173 = 0 ) {
775: return const_cast < Token *@expr3901 > (@expr1073745726 findmatch (@expr1073745727 const_cast < const Token *@expr3901 > (@expr1073745729 startTok@var1170 ) , pattern@var1171 , end@var1172 , varId@var1173 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1174 , const char * haystack@var1175 , int varid@var1176 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1282 .@expr1073745730 mFileIndex@var1318 ;
796: }
797: void fileIndex ( int indexOfFile@var1177 ) {
798: mImpl@var1282 .@expr1073745731 mFileIndex@var1318 =@expr1073745732 indexOfFile@var1177 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1282 .@expr1073745733 mLineNumber@var1319 ;
803: }
804: void linenr ( int lineNumber@var1178 ) {
805: mImpl@var1282 .@expr1073745734 mLineNumber@var1319 =@expr1073745735 lineNumber@var1178 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1282 .@expr1073745736 mColumn@var1320 ;
810: }
811: void column ( int c@var1179 ) {
812: mImpl@var1282 .@expr1073745737 mColumn@var1320 =@expr1073745738 c@var1179 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1277 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1180 , const Token * end@var1181 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1182 , const std :: string & originalNameStr@var1183 = emptyString@var1 , bool prepend@var1184 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1185 , const std :: string & originalNameStr@var1186 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745739 tokenStr@var1185 , originalNameStr@var1186 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1278 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1282 .@expr1073745740 mVarId@var1313 ;
851: }
852: void varId ( int id@var1187 ) {
853: mImpl@var1282 .@expr1073745741 mVarId@var1313 =@expr1073745742 id@var1187 ;
854: if (@expr1073745743 id@var1187 !=@expr1073745744 0 ) {
855: tokType (@expr1073745745 eVariable ) ;
856: isStandardType (@expr1073745746 false ) ;
857: } else {
858: update_property_info (@expr1073745747 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745748 mImpl@var1282 .@expr3925 mExprId@var1321 ) {
864: return mImpl@var1282 .@expr3925 mExprId@var1321 ; }
865: return mImpl@var1282 .@expr1073745751 mVarId@var1313 ;
866: }
867: void exprId ( int id@var1188 ) {
868: mImpl@var1282 .@expr1073745752 mExprId@var1321 =@expr1073745753 id@var1188 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1189 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1190 , const std :: vector < std :: string > & fileNames@var1191 ) const ;
888:
|
891:
892: void printLines ( int lines@var1192 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1193 , Token * start@var1194 , Token * end@var1195 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1196 ; varid@var1196 = false ;
905: bool exprid@var1197 ; exprid@var1197 = false ;
906: bool idtype@var1198 ; idtype@var1198 = false ;
907: bool attributes@var1199 ; attributes@var1199 = false ;
908: bool macro@var1200 ; macro@var1200 = false ;
909: bool linenumbers@var1201 ; linenumbers@var1201 = false ;
910: bool linebreaks@var1202 ; linebreaks@var1202 = false ;
911: bool files@var1203 ; files@var1203 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1204 ;
914: options@var1204 .@expr1073745754 attributes@var1205 =@expr1073745755 true ;
915: options@var1204 .@expr1073745756 macro@var1206 =@expr1073745757 true ;
916: options@var1204 .@expr1073745758 linenumbers@var1207 =@expr1073745759 true ;
917: options@var1204 .@expr1073745760 linebreaks@var1208 =@expr1073745761 true ;
918: options@var1204 .@expr1073745762 files@var1209 =@expr1073745763 true ;
919: return options@var1204 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1210 ; options@var1210 =@expr1073745764 forDebug (@expr1073745765 ) ;
923: options@var1210 .@expr1073745766 varid@var1211 =@expr1073745767 true ;
924: return options@var1210 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1212 ; options@var1212 =@expr1073745768 forDebug (@expr1073745769 ) ;
928: options@var1212 .@expr1073745770 exprid@var1213 =@expr1073745771 true ;
929: return options@var1212 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1214 ; options@var1214 =@expr1073745772 forDebug (@expr1073745773 ) ;
933: options@var1214 .@expr1073745774 exprid@var1215 =@expr1073745775 true ;
934: options@var1214 .@expr1073745776 varid@var1216 =@expr1073745777 true ;
935: options@var1214 .@expr1073745778 idtype@var1217 =@expr1073745779 true ;
936: return options@var1214 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1218 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1219 , bool attributes@var1220 , bool macro@var1221 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1222 , const std :: vector < std :: string > * fileNames@var1223 = nullptr , const Token * end@var1224 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1225 , bool attributes@var1226 = true ) const ;
952: std :: string stringifyList ( bool varid@var1227 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1228 , bool attributes@var1229 , bool linenumbers@var1230 , bool linebreaks@var1231 , bool files@var1232 , const std :: vector < std :: string > * fileNames@var1233 = nullptr , const Token * end@var1234 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1235 ) {
983: mLink@var1279 =@expr1073745780 linkToToken@var1235 ;
984: if (@expr1073745781 mStr@var1276 ==@expr1073745782 "<" ||@expr1073745783 mStr@var1276 ==@expr1073745784 ">" ) {
985: update_property_info (@expr1073745785 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1279 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1236 ) {
1006: mImpl@var1282 .@expr1073745786 mScope@var1322 =@expr1073745787 s@var1236 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1282 .@expr1073745788 mScope@var1322 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1237 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1280 ==@expr1073745789 eFunction ||@expr1073745790 mTokType@var1280 ==@expr1073745791 eLambda ?@expr1073745792 mImpl@var1282 .@expr1073745793 mFunction@var1323 :@expr1073745794 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1238 ) {
1034: mImpl@var1282 .@expr1073745795 mVariable@var1324 =@expr1073745796 v@var1238 ;
1035: if (@expr1073745797 v@var1238 ||@expr1073745798 mImpl@var1282 .@expr1073745799 mVarId@var1313 ) {
1036: tokType (@expr1073745800 eVariable ) ; }
1037: else { if (@expr1073745801 mTokType@var1280 ==@expr1073745802 eVariable ) {
1038: tokType (@expr1073745803 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1280 ==@expr1073745804 eVariable ?@expr1073745805 mImpl@var1282 .@expr1073745806 mVariable@var1324 :@expr1073745807 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1239 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1280 ==@expr1073745808 eType ?@expr1073745809 mImpl@var1282 .@expr1073745810 mType@var1325 :@expr1073745811 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1240 , const Token * * typeTok@var1241 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1242 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1243 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1280 ==@expr1073745812 eEnumerator ?@expr1073745813 mImpl@var1282 .@expr1073745814 mEnumerator@var1326 :@expr1073745815 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1244 ) {
1079: mImpl@var1282 .@expr1073745816 mEnumerator@var1326 =@expr1073745817 e@var1244 ;
1080: if (@expr1073745818 e@var1244 ) {
1081: tokType (@expr1073745819 eEnumerator ) ; }
1082: else { if (@expr1073745820 mTokType@var1280 ==@expr1073745821 eEnumerator ) {
1083: tokType (@expr1073745822 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1245 , Token * end@var1246 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1247 , Token * srcEnd@var1248 , Token * newLocation@var1249 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1282 .@expr1073745823 mProgressValue@var1327 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1250 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1282 .@expr4000 mOriginalName@var1328 ?@expr1073745825 *@expr1073745826 mImpl@var1282 .@expr4000 mOriginalName@var1328 :@expr1073745828 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1282 .@expr4005 mValues@var1301 ?@expr1073745830 *@expr1073745831 mImpl@var1282 .@expr4005 mValues@var1301 :@expr1073745833 TokenImpl ::@expr1073745834 mEmptyValueList@var1048 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1251 ) {
1164: if (@expr1073745835 !@expr1073745836 mImpl@var1282 .@expr4013 mOriginalName@var1328 ) {
1165: mImpl@var1282 .@expr4013 mOriginalName@var1328 =@expr1073745839 new std ::@expr1073745840 string (@expr1073745841 name@var1251 ) ; }
1166: else {
1167: *@expr1073745842 mImpl@var1282 .@expr4013 mOriginalName@var1328 =@expr1073745844 name@var1251 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1252 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1253 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1254 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1282 .@expr1073745846 mValues@var1301 .@expr1073745847 front (@expr1073745848 ) .@expr1073745849 intvalue@expr1073745845 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1255 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1256 , long long path@var1257 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1258 , const Settings * settings@var1259 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1260 , const Settings * settings@var1261 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1262 , int argnr@var1263 , const Settings * settings@var1264 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1265 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1266 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1267 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1268 ) {
1200: if (@expr1073745850 mImpl@var1282 .@expr4027 mValues@var1301 ) {
1201: mImpl@var1282 .@expr4027 mValues@var1301 .@expr1073745853 remove_if (@expr1073745854 pred@var1268 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1282 .@expr1073745855 mIndex@var1329 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1269 ) {
1213: mNext@var1277 =@expr1073745856 nextToken@var1269 ;
1214: }
1215: void previous ( Token * previousToken@var1270 ) {
1216: mPrevious@var1278 =@expr1073745857 previousToken@var1270 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1271 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1272 , const char * word@var1273 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1274 , char c@var1275 ) ;
1235:
1236: std :: string mStr@var1276 ;
1237:
1238: Token * mNext@var1277 ;
1239: Token * mPrevious@var1278 ;
1240: Token * mLink@var1279 ;
1241:
1242: enum Anonymous2 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1280 ;
1283:
1284: uint64_t mFlags@var1281 ;
1285:
1286: TokenImpl * mImpl@var1282 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1283 ) const {
1294: return (@expr4034 (@expr4034 mFlags@var1281 &@expr1073745860 flag_@var1283 ) !=@expr1073745861 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1284 , bool state_@var1285 ) {
1303: mFlags@var1281 =@expr1073745862 state_@var1285 ?@expr1073745863 mFlags@var1281 |@expr1073745864 flag_@var1284 :@expr1073745865 mFlags@var1281 &@expr1073745866 ~@expr1073745867 flag_@var1284 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1286 , const int indent1@var1287 = 0 , const int indent2@var1288 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1289 ) ;
1321: void astOperand2 ( Token * tok@var1290 ) ;
1322: void astParent ( Token * tok@var1291 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1282 .@expr1073745868 mAstOperand1@var1292 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1282 .@expr1073745869 mAstOperand1@var1292 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1282 .@expr1073745870 mAstOperand2@var1293 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1282 .@expr1073745871 mAstOperand2@var1293 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1282 .@expr1073745872 mAstParent@var1294 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1282 .@expr1073745873 mAstParent@var1294 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745874 !@expr1073745875 astParent (@expr4052 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745877 this@expr4054 ==@expr1073745879 astParent (@expr4052 ) .@expr4057 astOperand1 (@expr4058 ) ) {
1346: return astParent (@expr4052 ) .@expr4060 astOperand2 (@expr4061 ) ; }
1347: else { if (@expr1073745886 this@expr4054 ==@expr1073745887 astParent (@expr4052 ) .@expr4060 astOperand2 (@expr4061 ) ) {
1348: return astParent (@expr4052 ) .@expr4057 astOperand1 (@expr4058 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745894 !@expr1073745895 astParent (@expr4072 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745897 this@expr4074 ==@expr1073745899 astParent (@expr4072 ) .@expr4077 astOperand1 (@expr4078 ) ) {
1356: return astParent (@expr4072 ) .@expr4080 astOperand2 (@expr4081 ) ; }
1357: else { if (@expr1073745906 this@expr4074 ==@expr1073745907 astParent (@expr4072 ) .@expr4080 astOperand2 (@expr4081 ) ) {
1358: return astParent (@expr4072 ) .@expr4077 astOperand1 (@expr4078 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1295 ; ret@var1295 =@expr1073745914 this@expr1073745915 ;
1364: while (@expr1073745916 ret@var1295 .@expr4093 mImpl@var1296 .@expr4094 mAstParent@var1297 ) {
1365: ret@var1295 =@expr1073745919 ret@var1295 .@expr4093 mImpl@var1296 .@expr4094 mAstParent@var1297 ; }
1366: return ret@var1295 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1298 ; ret@var1298 =@expr1073745922 this@expr1073745923 ;
1371: while (@expr1073745924 ret@var1298 .@expr4101 mImpl@var1299 .@expr4102 mAstParent@var1300 ) {
1372: ret@var1298 =@expr1073745927 ret@var1298 .@expr4101 mImpl@var1299 .@expr4102 mAstParent@var1300 ; }
1373: return ret@var1298 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1282 .@expr1073745930 mAstOperand1@var1292 =@expr1073745931 mImpl@var1282 .@expr1073745932 mAstOperand2@var1293 =@expr1073745933 mImpl@var1282 .@expr1073745934 mAstParent@var1294 =@expr1073745935 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1282 .@expr4112 mValues@var1301 ;
1393: mImpl@var1282 .@expr4112 mValues@var1301 =@expr1073745938 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1302 = "" ) const {
1397: std ::@expr1073745939 string ret@var1303 ;
1398: if (@expr1073745940 mImpl@var1282 .@expr4117 mAstOperand1@var1292 ) {
1399: ret@var1303 =@expr1073745942 mImpl@var1282 .@expr4117 mAstOperand1@var1292 .@expr1073745944 astString (@expr1073745945 sep@var1302 ) ; }
1400: if (@expr1073745946 mImpl@var1282 .@expr4123 mAstOperand2@var1293 ) {
1401: ret@var1303 +=@expr1073745948 mImpl@var1282 .@expr4123 mAstOperand2@var1293 .@expr1073745950 astString (@expr1073745951 sep@var1302 ) ; }
1402: return ret@var1303 +@expr1073745952 sep@var1302 +@expr1073745953 mStr@var1276 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1304 , bool xml@var1305 , const std :: vector < std :: string > & fileNames@var1306 , std :: ostream & out@var1307 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1308 , std :: ostream & out@var1309 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1310 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1311 ) const {
1419: mImpl@var1282 .@expr1073745954 mCpp11init@var1312 =@expr1073745955 cpp11init@var1311 ?@expr1073745956 TokenImpl ::@expr4133 Cpp11init ::@expr1073745958 CPP11INIT :@expr1073745959 TokenImpl ::@expr4133 Cpp11init ::@expr1073745961 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1282 .@expr1073745962 mCpp11init@var1312 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1330 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1331 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1332 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1333 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1334 ( nullptr ) , num@var1335 ( 0 ) , known@var1336 ( true ) { }
62:
63: const Token * tok@var1334 ;
64: long long num@var1335 ;
65: bool known@var1336 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1337 ;
72: const Scope * classScope@var1338 ;
73: const Scope * enclosingScope@var1339 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1340 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1342 ( nullptr ) , nameTok@var1343 ( nullptr ) , access@var1344 ( AccessControl :: Public ) , isVirtual@var1345 ( false ) { }
82:
83: std :: string name@var1341 ;
84: const Type * type@var1342 ;
85: const Token * nameTok@var1343 ;
86: AccessControl access@var1344 ;
87: bool isVirtual@var1345 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1346 ) const {
90: return this@expr1073745963 .@expr1073745964 type@var1342 <@expr1073745965 rhs@var1346 .@expr1073745966 type@var1347 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1348 ( nullptr ) , nameEnd@var1349 ( nullptr ) , type@var1350 ( nullptr ) { }
97:
98: const Token * nameStart@var1348 ;
99: const Token * nameEnd@var1349 ;
100: const Type * type@var1350 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1351 ;
104: std :: vector < FriendInfo > friendList@var1352 ;
105:
106: const Token * typeStart@var1353 ;
107: const Token * typeEnd@var1354 ;
108: long long sizeOf@var1355 ;
109:
110: Type ( const Token * classDef_@var1356 = nullptr , const Scope * classScope_@var1357 = nullptr , const Scope * enclosingScope_@var1358 = nullptr ) :
111: classDef@var1337 ( classDef_@var1356 ) ,
112: classScope@var1338 ( classScope_@var1357 ) ,
113: enclosingScope@var1339 ( enclosingScope_@var1358 ) ,
114: needInitialization@var1340 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1353 ( nullptr ) ,
116: typeEnd@var1354 ( nullptr ) ,
117: sizeOf@var1355 ( 0 ) {
118: if (@expr1073745967 classDef_@var1356 &&@expr1073745968 classDef_@var1356 .@expr4145 str (@expr4146 ) ==@expr1073745971 "enum" ) {
119: needInitialization@var1340 =@expr1073745972 NeedInitialization ::@expr1073745973 True ; }
120: else { if (@expr1073745974 classDef_@var1356 &&@expr1073745975 classDef_@var1356 .@expr4145 str (@expr4146 ) ==@expr1073745978 "using" ) {
121: typeStart@var1353 =@expr1073745979 classDef@var1337 .@expr1073745980 tokAt (@expr1073745981 3 ) ;
122: typeEnd@var1354 =@expr1073745982 typeStart@var1353 ;
123: while (@expr1073745983 typeEnd@var1354 .@expr4160 next (@expr4161 ) &&@expr1073745986 typeEnd@var1354 .@expr4160 next (@expr4161 ) .@expr1073745989 str (@expr1073745990 ) !=@expr1073745991 ";" ) {
124: typeEnd@var1354 =@expr1073745992 typeEnd@var1354 .@expr4160 next (@expr4161 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1337 ?@expr1073745995 classDef@var1337 .@expr1073745996 str (@expr1073745997 ) :@expr1073745998 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1337 &&@expr1073745999 classDef@var1337 .@expr1073746000 str (@expr1073746001 ) ==@expr1073746002 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1359 , const Token * tok1@var1360 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1361 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1362 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1363 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1364 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1365 ) : scope@var1366 ( scope_@var1365 ) , name@var1367 ( nullptr ) , value@var1368 ( 0 ) , start@var1369 ( nullptr ) , end@var1370 ( nullptr ) , value_known@var1371 ( false ) { }
167: const Scope * scope@var1366 ;
168: const Token * name@var1367 ;
169: long long value@var1368 ;
170: const Token * start@var1369 ;
171: const Token * end@var1370 ;
172: bool value_known@var1371 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous3 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1372 ) const {
204: return (@expr4179 (@expr4179 mFlags@var1408 &@expr1073746005 flag_@var1372 ) !=@expr1073746006 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1373 , bool state_@var1374 ) {
213: mFlags@var1408 =@expr1073746007 state_@var1374 ?@expr1073746008 mFlags@var1408 |@expr1073746009 flag_@var1373 :@expr1073746010 mFlags@var1408 &@expr1073746011 ~@expr1073746012 flag_@var1373 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1375 , bool * isContainer@var1376 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1377 , const Token * start_@var1378 , const Token * end_@var1379 ,
226: int index_@var1380 , AccessControl access_@var1381 , const Type * type_@var1382 ,
227: const Scope * scope_@var1383 , const Settings * settings@var1384 )
228: : mNameToken@var1403 ( name_@var1377 ) ,
229: mTypeStartToken@var1404 ( start_@var1378 ) ,
230: mTypeEndToken@var1405 ( end_@var1379 ) ,
231: mIndex@var1406 ( index_@var1380 ) ,
232: mAccess@var1407 ( access_@var1381 ) ,
233: mFlags@var1408 ( 0 ) ,
234: mType@var1409 ( type_@var1382 ) ,
235: mScope@var1410 ( scope_@var1383 ) ,
236: mValueType@var1411 ( nullptr ) {
237: evaluate (@expr1073746013 settings@var1384 ) ;
238: }
239:
240: Variable ( const Token * name_@var1385 , const std :: string & clangType@var1386 , const Token * typeStart@var1387 ,
241: const Token * typeEnd@var1388 , int index_@var1389 , AccessControl access_@var1390 ,
242: const Type * type_@var1391 , const Scope * scope_@var1392 ) ;
243:
244: Variable ( const Variable & var@var1393 , const Scope * scope@var1394 ) ;
245:
246: Variable ( const Variable & var@var1395 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1396 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1403 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1404 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1405 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073746014 mNameToken@var1403 ) {
300: return mNameToken@var1403 .@expr1073746015 str (@expr1073746016 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073746017 mNameToken@var1403 ) {
312: return mNameToken@var1403 .@expr1073746018 varId (@expr1073746019 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1406 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1407 ==@expr1073746020 AccessControl ::@expr1073746021 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1407 ==@expr1073746022 AccessControl ::@expr1073746023 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1407 ==@expr1073746024 AccessControl ::@expr1073746025 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1407 ==@expr1073746026 AccessControl ::@expr1073746027 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1407 ==@expr1073746028 AccessControl ::@expr1073746029 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1407 ==@expr1073746030 AccessControl ::@expr1073746031 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073746033 mAccess@var1407 ==@expr1073746034 AccessControl ::@expr1073746035 Local@expr1073746032 ) &&@expr1073746036 !@expr1073746037 isExtern (@expr1073746038 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073746039 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073746040 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073746041 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073746042 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073746043 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1407 ==@expr1073746044 AccessControl ::@expr1073746045 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073746046 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073746047 fIsArray ) &&@expr1073746048 !@expr1073746049 getFlag (@expr1073746050 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073746051 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073746052 ) &&@expr1073746053 getFlag (@expr1073746054 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073746055 fIsArray ) ||@expr1073746056 getFlag (@expr1073746057 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073746058 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073746059 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073746060 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073746061 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1409 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1409 ?@expr1073746062 mType@var1409 .@expr1073746063 classScope@var1414 :@expr1073746064 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1410 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1412 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1397 ) const {
550: return mDimensions@var1412 [@expr1073746065 index_@var1397 ] .@expr1073746066 num@var2677 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1398 ) const {
558: return mDimensions@var1412 [@expr1073746067 index_@var1398 ] .@expr1073746068 known@var2678 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073746069 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073746070 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073746071 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1399 ) const {
602: return isStlType (@expr1073746072 ) &&@expr1073746073 stlType@var1399 ==@expr1073746074 mTypeStartToken@var1404 .@expr1073746075 strAt (@expr1073746076 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1400 ) const {
616: return isStlType (@expr1073746077 ) &&@expr1073746078 stlTypes@var1400 .@expr1073746079 find (@expr1073746080 mTypeStartToken@var1404 .@expr1073746081 strAt (@expr1073746082 2 ) ) !=@expr1073746083 stlTypes@var1400 .@expr1073746084 end (@expr1073746085 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073746086 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr4263 ) &&@expr1073746088 type (@expr4263 ) .@expr1073746090 isEnumType (@expr1073746091 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073746092 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1411 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1401 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1407 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1402 ) {
660: mType@var1409 =@expr1073746093 t@var1402 ;
661: }
662:
663:
664: const Token * mNameToken@var1403 ;
665:
666:
667: const Token * mTypeStartToken@var1404 ;
668:
669:
670: const Token * mTypeEndToken@var1405 ;
671:
672:
673: int mIndex@var1406 ;
674:
675:
676: AccessControl mAccess@var1407 ;
677:
678:
679: unsigned int mFlags@var1408 ;
680:
681:
682: const Type * mType@var1409 ;
683:
684:
685: const Scope * mScope@var1410 ;
686:
687: ValueType * mValueType@var1411 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1412 ;
691:
692:
693: void evaluate ( const Settings * settings@var1413 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous4 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1415 ) const {
735: return (@expr4270 (@expr4270 mFlags@var1464 &@expr1073746096 flag@var1415 ) !=@expr1073746097 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1416 , bool state@var1417 ) {
744: mFlags@var1464 =@expr1073746098 state@var1417 ?@expr1073746099 mFlags@var1464 |@expr1073746100 flag@var1416 :@expr1073746101 mFlags@var1464 &@expr1073746102 ~@expr1073746103 flag@var1416 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1418 , const Token * tok@var1419 , const Scope * scope@var1420 , const Token * tokDef@var1421 , const Token * tokArgDef@var1422 ) ;
751: Function ( const Token * tokenDef@var1423 , const std :: string & clangType@var1424 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1434 .@expr1073746104 str (@expr1073746105 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1442 .@expr1073746106 size (@expr1073746107 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1442 .@expr1073746108 size (@expr1073746109 ) -@expr1073746110 initArgCount@var1443 ;
764: }
765: const Variable * getArgumentVar ( int num@var1425 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1443 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1426 , const Scope * scope@var1427 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1428 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1429 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1444 ==@expr1073746111 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1444 ==@expr1073746112 eConstructor ||@expr1073746113
785: type@var1444 ==@expr1073746114 eCopyConstructor ||@expr1073746115
786: type@var1444 ==@expr1073746116 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1444 ==@expr1073746117 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1434 .@expr1073746118 isAttributeConstructor (@expr1073746119 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1434 .@expr1073746120 isAttributeDestructor (@expr1073746121 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1434 .@expr1073746122 isAttributePure (@expr1073746123 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1434 .@expr1073746124 isAttributeConst (@expr1073746125 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1434 .@expr1073746126 isAttributeNoreturn (@expr1073746127 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1434 .@expr1073746128 isAttributeNothrow (@expr1073746129 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1434 .@expr1073746130 isAttributeNodiscard (@expr1073746131 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073746132 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073746133 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073746134 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073746135 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073746136 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073746137 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073746138 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073746139 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073746140 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073746141 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073746142 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073746143 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073746144 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073746145 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073746146 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073746147 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073746148 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073746149 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073746150 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073746151 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073746152 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073746153 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1430 ) {
881: setFlag (@expr1073746154 fHasBody , state@var1430 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073746155 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073746156 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1431 ) {
891: setFlag (@expr1073746157 fIsEscapeFunction , state@var1431 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073746158 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1432 ) {
898: setFlag (@expr1073746159 fIsConstexpr , state@var1432 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1433 ) const ;
901:
902: const Token * tokenDef@var1434 ;
903: const Token * argDef@var1435 ;
904: const Token * token@var1436 ;
905: const Token * arg@var1437 ;
906: const Token * retDef@var1438 ;
907: const :: Type * retType@var1439 ;
908: const Scope * functionScope@var1440 ;
909: const Scope * nestedIn@var1441 ;
910: std :: list < Variable > argumentList@var1442 ;
911: int initArgCount@var1443 ;
912: Type type@var1444 ;
913: AccessControl access@var1445 ;
914: const Token * noexceptArg@var1446 ;
915: const Token * throwArg@var1447 ;
916: const Token * templateDef@var1448 ;
917: const Token * functionPointerUsage@var1449 ;
918:
919: bool argsMatch ( const Scope * scope@var1450 , const Token * first@var1451 , const Token * second@var1452 , const std :: string & path@var1453 , int path_length@var1454 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1455 , bool unknown@var1456 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1457 , bool unknown@var1458 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1459 , bool unknown@var1460 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1461 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073746160 this@expr1073746161 .@expr1073746162 hasTrailingReturnType (@expr1073746163 ) ) {
931: return Token ::@expr1073746164 findmatch (@expr1073746165 retDef@var1438 , "{|;" ) ;
932: } else {
933: return tokenDef@var1434 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1462 , bool * foundAllBaseClasses@var1463 ) const ;
946:
947: unsigned int mFlags@var1464 ;
948:
949: void isInline ( bool state@var1465 ) {
950: setFlag (@expr1073746166 fIsInline , state@var1465 ) ;
951: }
952: void isConst ( bool state@var1466 ) {
953: setFlag (@expr1073746167 fIsConst , state@var1466 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1467 ) {
956: setFlag (@expr1073746168 fHasVirtualSpecifier , state@var1467 ) ;
957: }
958: void isPure ( bool state@var1468 ) {
959: setFlag (@expr1073746169 fIsPure , state@var1468 ) ;
960: }
961: void isStatic ( bool state@var1469 ) {
962: setFlag (@expr1073746170 fIsStatic , state@var1469 ) ;
963: }
964: void isStaticLocal ( bool state@var1470 ) {
965: setFlag (@expr1073746171 fIsStaticLocal , state@var1470 ) ;
966: }
967: void isExtern ( bool state@var1471 ) {
968: setFlag (@expr1073746172 fIsExtern , state@var1471 ) ;
969: }
970: void isFriend ( bool state@var1472 ) {
971: setFlag (@expr1073746173 fIsFriend , state@var1472 ) ;
972: }
973: void isExplicit ( bool state@var1473 ) {
974: setFlag (@expr1073746174 fIsExplicit , state@var1473 ) ;
975: }
976: void isDefault ( bool state@var1474 ) {
977: setFlag (@expr1073746175 fIsDefault , state@var1474 ) ;
978: }
979: void isDelete ( bool state@var1475 ) {
980: setFlag (@expr1073746176 fIsDelete , state@var1475 ) ;
981: }
982: void isNoExcept ( bool state@var1476 ) {
983: setFlag (@expr1073746177 fIsNoExcept , state@var1476 ) ;
984: }
985: void isThrow ( bool state@var1477 ) {
986: setFlag (@expr1073746178 fIsThrow , state@var1477 ) ;
987: }
988: void isOperator ( bool state@var1478 ) {
989: setFlag (@expr1073746179 fIsOperator , state@var1478 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1479 ) {
992: setFlag (@expr1073746180 fHasLvalRefQual , state@var1479 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1480 ) {
995: setFlag (@expr1073746181 fHasRvalRefQual , state@var1480 ) ;
996: }
997: void isVariadic ( bool state@var1481 ) {
998: setFlag (@expr1073746182 fIsVariadic , state@var1481 ) ;
999: }
1000: void isVolatile ( bool state@var1482 ) {
1001: setFlag (@expr1073746183 fIsVolatile , state@var1482 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1483 ) {
1004: return setFlag (@expr1073746184 fHasTrailingReturnType , state@var1483 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1484 ) {
1007: setFlag (@expr1073746185 fIsInlineKeyword , state@var1484 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1485 , const Scope * scope@var1486 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1487 ;
1019: const Scope * scope@var1488 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1489 , const Token * classDef_@var1490 , const Scope * nestedIn_@var1491 ) ;
1025: Scope ( const SymbolDatabase * check_@var1492 , const Token * classDef_@var1493 , const Scope * nestedIn_@var1494 , ScopeType type_@var1495 , const Token * start_@var1496 ) ;
1026:
1027: const SymbolDatabase * check@var1497 ;
1028: std :: string className@var1498 ;
1029: const Token * classDef@var1499 ;
1030: const Token * bodyStart@var1500 ;
1031: const Token * bodyEnd@var1501 ;
1032: std :: list < Function > functionList@var1502 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1503 ;
1034: std :: list < Variable > varlist@var1504 ;
1035: const Scope * nestedIn@var1505 ;
1036: std :: list < Scope * > nestedList@var1506 ;
1037: int numConstructors@var1507 ;
1038: int numCopyOrMoveConstructors@var1508 ;
1039: std :: list < UsingInfo > usingList@var1509 ;
1040: ScopeType type@var1510 ;
1041: Type * definedType@var1511 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1512 ;
1043: std :: vector < const Token * > bodyStartList@var1513 ;
1044:
1045:
1046: const Scope * functionOf@var1514 ;
1047: Function * function@var1515 ;
1048:
1049:
1050: const Token * enumType@var1516 ;
1051: bool enumClass@var1517 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1518 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1519 ) {
1056: bodyStart@var1500 =@expr1073746186 start@var1519 ;
1057: bodyEnd@var1501 =@expr1073746187 start@var1519 ?@expr1073746188 start@var1519 .@expr1073746189 link (@expr1073746190 ) :@expr1073746191 nullptr ;
1058: if (@expr1073746192 start@var1519 ) {
1059: bodyStartList@var1513 .@expr1073746193 push_back (@expr1073746194 start@var1519 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1498 .@expr1073746195 size (@expr1073746196 ) >@expr1073746197 9 &&@expr1073746198 className@var1498 .@expr1073746199 compare (@expr1073746200 0 , 9 , "Anonymous" ) ==@expr1073746201 0 &&@expr1073746202 std ::@expr1073746203 isdigit (@expr1073746204 className@var1498 [@expr1073746205 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1520 ) const {
1068: for (@expr1073746206 const Enumerator &@expr1073746207 i@var1521 :@expr1073746208 enumeratorList@var1518 ) {
1069: if (@expr1073746209 i@var1521 .@expr1073746210 name@var1522 .@expr1073746211 str (@expr1073746212 ) ==@expr1073746213 name@var1520 ) {
1070: return &@expr1073746214 i@var1521 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1523 ) const {
1076: if (@expr1073746215 !@expr1073746216 outer@var1523 ) {
1077: return false ; }
1078: if (@expr1073746217 outer@var1523 ==@expr1073746218 this@expr1073746219 ) {
1079: return true ; }
1080: const Scope * parent@var1524 ; parent@var1524 =@expr1073746220 nestedIn@var1505 ;
1081: while (@expr1073746221 outer@var1523 !=@expr1073746222 parent@var1524 &&@expr1073746223 parent@var1524 ) {
1082: parent@var1524 =@expr1073746224 parent@var1524 .@expr1073746225 nestedIn@var1525 ; }
1083: if (@expr1073746226 parent@var1524 &&@expr1073746227 parent@var1524 ==@expr1073746228 outer@var1523 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1526 ) {
1089: while (@expr1073746229 scope@var1526 ) {
1090: if (@expr1073746230 scope@var1526 .@expr1073746231 type@var1527 ==@expr1073746232 Scope ::@expr1073746233 eFunction ) {
1091: break ; }
1092: scope@var1526 =@expr1073746234 scope@var1526 .@expr1073746235 nestedIn@var1528 ;
1093: }
1094: if (@expr1073746236 !@expr1073746237 scope@var1526 ) {
1095: return nullptr ; }
1096: return scope@var1526 .@expr1073746238 function@var1529 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073746239 type@var1510 ==@expr1073746240 eClass ||@expr1073746241 type@var1510 ==@expr1073746242 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073746243 type@var1510 ==@expr1073746244 eClass ||@expr1073746245 type@var1510 ==@expr1073746246 eStruct ||@expr1073746247 type@var1510 ==@expr1073746248 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1510 !=@expr1073746249 eClass &&@expr1073746250 type@var1510 !=@expr1073746251 eStruct &&@expr1073746252 type@var1510 !=@expr1073746253 eUnion &&@expr1073746254 type@var1510 !=@expr1073746255 eGlobal &&@expr1073746256 type@var1510 !=@expr1073746257 eNamespace &&@expr1073746258 type@var1510 !=@expr1073746259 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1510 ==@expr1073746260 Scope ::@expr4437 ScopeType ::@expr1073746262 eFor ||@expr1073746263 type@var1510 ==@expr1073746264 Scope ::@expr4437 ScopeType ::@expr1073746266 eWhile ||@expr1073746267 type@var1510 ==@expr1073746268 Scope ::@expr4437 ScopeType ::@expr1073746270 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073746271 type@var1510 ==@expr1073746272 eIf ||@expr1073746273 type@var1510 ==@expr1073746274 eElse ||@expr1073746275
1117: type@var1510 ==@expr1073746276 eFor ||@expr1073746277 type@var1510 ==@expr1073746278 eWhile ||@expr1073746279 type@var1510 ==@expr1073746280 eDo ||@expr1073746281
1118: type@var1510 ==@expr1073746282 eSwitch ||@expr1073746283 type@var1510 ==@expr1073746284 eUnconditional ||@expr1073746285
1119: type@var1510 ==@expr1073746286 eTry ||@expr1073746287 type@var1510 ==@expr1073746288 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1530 , bool requireConst@var1531 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1532 , bool isC@var1533 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1534 ) {
1135: return const_cast < Scope *@expr4465 > (@expr1073746290 const_cast < const Scope *@expr4465 > (@expr1073746292 this@expr1073746293 ) .@expr1073746294 findRecordInNestedList (@expr1073746295 name@var1534 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1535 ) const ;
1139: Type * findType ( const std :: string & name@var1536 ) {
1140: return const_cast < Type *@expr4472 > (@expr1073746297 const_cast < const Scope *@expr4472 > (@expr1073746299 this@expr1073746300 ) .@expr1073746301 findType (@expr1073746302 name@var1536 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1537 ) ;
1148:
1149: void addVariable ( const Token * token_@var1538 , const Token * start_@var1539 ,
1150: const Token * end_@var1540 , AccessControl access_@var1541 , const Type * type_@var1542 ,
1151: const Scope * scope_@var1543 , const Settings * settings@var1544 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1545 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1546 ) {
1159: functionList@var1502 .@expr1073746303 push_back (@expr1073746304 func@var1546 ) ;
1160:
1161: const Function * back@var1547 ; back@var1547 =@expr1073746305 &@expr1073746306 functionList@var1502 .@expr1073746307 back (@expr1073746308 ) ;
1162:
1163: functionMap@var1503 .@expr1073746309 insert (@expr1073746310 make_pair (@expr1073746311 back@var1547 .@expr1073746312 tokenDef@var1548 .@expr1073746313 str (@expr1073746314 ) , back@var1547 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1549 , AccessControl varaccess@var1550 , const Settings * settings@var1551 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1552 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1553 , bool isCpp@var1554 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1555 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1556 , const Token * & vartok@var1557 , const Token * & typetok@var1558 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1559 , int args@var1560 , std :: vector < const Function * > & matches@var1561 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1562 , const Token * start@var1563 , const Token * end@var1564 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1565 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1566 ;
1239: int bits@var1567 ;
1240: int pointer@var1568 ;
1241: int constness@var1569 ;
1242: Reference reference@var1570 ; reference@var1570 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1571 ;
1245: const :: Type * smartPointerType@var1572 ;
1246: const Token * smartPointerTypeToken@var1573 ;
1247: const Library :: SmartPointer * smartPointer@var1574 ;
1248: const Library :: Container * container@var1575 ;
1249:
1250: const Token * containerTypeToken@var1576 ;
1251:
1252: std :: string originalTypeName@var1577 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1565 ( UNKNOWN_SIGN ) ,
1257: type@var1566 ( UNKNOWN_TYPE ) ,
1258: bits@var1567 ( 0 ) ,
1259: pointer@var1568 ( 0U ) ,
1260: constness@var1569 ( 0U ) ,
1261: typeScope@var1571 ( nullptr ) ,
1262: smartPointerType@var1572 ( nullptr ) ,
1263: smartPointerTypeToken@var1573 ( nullptr ) ,
1264: smartPointer@var1574 ( nullptr ) ,
1265: container@var1575 ( nullptr ) ,
1266: containerTypeToken@var1576 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1578 , enum Type t@var1579 , int p@var1580 )
1269: : sign@var1565 ( s@var1578 ) ,
1270: type@var1566 ( t@var1579 ) ,
1271: bits@var1567 ( 0 ) ,
1272: pointer@var1568 ( p@var1580 ) ,
1273: constness@var1569 ( 0U ) ,
1274: typeScope@var1571 ( nullptr ) ,
1275: smartPointerType@var1572 ( nullptr ) ,
1276: smartPointerTypeToken@var1573 ( nullptr ) ,
1277: smartPointer@var1574 ( nullptr ) ,
1278: container@var1575 ( nullptr ) ,
1279: containerTypeToken@var1576 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1581 , enum Type t@var1582 , int p@var1583 , int c@var1584 )
1282: : sign@var1565 ( s@var1581 ) ,
1283: type@var1566 ( t@var1582 ) ,
1284: bits@var1567 ( 0 ) ,
1285: pointer@var1568 ( p@var1583 ) ,
1286: constness@var1569 ( c@var1584 ) ,
1287: typeScope@var1571 ( nullptr ) ,
1288: smartPointerType@var1572 ( nullptr ) ,
1289: smartPointerTypeToken@var1573 ( nullptr ) ,
1290: smartPointer@var1574 ( nullptr ) ,
1291: container@var1575 ( nullptr ) ,
1292: containerTypeToken@var1576 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1585 , enum Type t@var1586 , int p@var1587 , int c@var1588 , const std :: string & otn@var1589 )
1295: : sign@var1565 ( s@var1585 ) ,
1296: type@var1566 ( t@var1586 ) ,
1297: bits@var1567 ( 0 ) ,
1298: pointer@var1568 ( p@var1587 ) ,
1299: constness@var1569 ( c@var1588 ) ,
1300: typeScope@var1571 ( nullptr ) ,
1301: smartPointerType@var1572 ( nullptr ) ,
1302: smartPointerTypeToken@var1573 ( nullptr ) ,
1303: smartPointer@var1574 ( nullptr ) ,
1304: container@var1575 ( nullptr ) ,
1305: containerTypeToken@var1576 ( nullptr ) ,
1306: originalTypeName@var1577 ( otn@var1589 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1590 , const Settings * settings@var1591 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1592 , bool longType@var1593 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1594 , const ValueType * func@var1595 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1596 , const Variable * callVar@var1597 , const Variable * funcVar@var1598 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073746315 type@var1566 >=@expr1073746316 ValueType ::@expr1073746317 Type ::@expr1073746318 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073746319 type@var1566 >=@expr1073746320 ValueType ::@expr4497 Type ::@expr1073746322 BOOL &&@expr1073746323 type@var1566 <=@expr1073746324 ValueType ::@expr4497 Type ::@expr1073746326 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073746327 type@var1566 >=@expr1073746328 ValueType ::@expr4505 Type ::@expr1073746330 FLOAT &&@expr1073746331 type@var1566 <=@expr1073746332 ValueType ::@expr4505 Type ::@expr1073746334 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1599 , const Settings * settings@var1600 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1571 &&@expr1073746335 typeScope@var1571 .@expr1073746336 type@var1601 ==@expr1073746337 Scope ::@expr1073746338 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1602 , bool p@var1603 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1604 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1605 , const Settings * settings@var1606 , ErrorLogger * errorLogger@var1607 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1608 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1609 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1610 ;
1359:
1360:
1361: std :: list < Type > typeList@var1611 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1612 , const Token * typeTok@var1613 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1614 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1615 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1616 , const Scope * startScope@var1617 , bool lookOutside@var1618 = false ) const ;
1382: Type * findType ( const Token * startTok@var1619 , Scope * startScope@var1620 , bool lookOutside@var1621 = false ) const {
1383: return const_cast < Type *@expr4515 > (@expr1073746340 this@expr1073746341 .@expr1073746342 findType (@expr1073746343 startTok@var1619 , const_cast < const Scope *@expr4515 > (@expr1073746345 startScope@var1620 ) , lookOutside@var1621 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1622 , const Scope * startScope@var1623 ) const ;
1387: Scope * findScope ( const Token * tok@var1624 , Scope * startScope@var1625 ) const {
1388: return const_cast < Scope *@expr4522 > (@expr1073746347 this@expr1073746348 .@expr1073746349 findScope (@expr1073746350 tok@var1624 , const_cast < const Scope *@expr4522 > (@expr1073746352 startScope@var1625 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1626 ) const {
1392: return varid@var1626 <@expr1073746353 mVariableList@var1683 .@expr1073746354 size (@expr1073746355 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1627 ) const {
1396: return mVariableList@var1683 .@expr1073746356 at (@expr1073746357 varId@var1627 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1683 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1628 , const std :: string & type@var1629 , const std :: string & msg@var1630 ) const ;
1407:
1408: void printOut ( const char * title@var1631 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1632 , const char * indent@var1633 ) const ;
1410: void printXml ( std :: ostream & out@var1634 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1635 , Token * tokens@var1636 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1637 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1638 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1639 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1640 , const Token * * tok@var1641 , const Token * argStart@var1642 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1643 , const Token * tok@var1644 , const Token * argStart@var1645 , const Token * funcStart@var1646 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1647 , const Token * & tok@var1648 , const Token * argStart@var1649 , const Token * funcStart@var1650 ) ;
1469: void addNewFunction ( Scope * * scope@var1651 , const Token * * tok@var1652 ) ;
1470: bool isFunction ( const Token * tok@var1653 , const Scope * outerScope@var1654 , const Token * * funcStart@var1655 , const Token * * argStart@var1656 , const Token * * declEnd@var1657 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1658 , const Scope * startScope@var1659 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1660 , const Scope * scope@var1661 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1662 , const Scope * ns@var1663 , const std :: string & path@var1664 , int path_length@var1665 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1666 , const Token * typeTok@var1667 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1668 , const Token * vartok@var1669 , Token * membertok@var1670 , const Variable * membervar@var1671 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1672 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1673 ) const ;
1485:
1486: void setValueType ( Token * tok@var1674 , const ValueType & valuetype@var1675 ) ;
1487: void setValueType ( Token * tok@var1676 , const Variable & var@var1677 ) ;
1488: void setValueType ( Token * tok@var1678 , const Enumerator & enumerator@var1679 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1680 ;
1491: const Settings * mSettings@var1681 ;
1492: ErrorLogger * mErrorLogger@var1682 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1683 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1684 ;
1499:
1500: bool mIsCpp@var1685 ;
1501: ValueType :: Sign mDefaultSignedness@var1686 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1687 ;
1505: } ;

##file cppcheck-2.8/lib/astutils.h

1:
|
34:
35: class Library ;
36: class Settings ;
37: class Token ;
38:
39: enum class ChildrenToVisit {
40: none ,
41: op1 ,
42: op2 ,
43: op1_and_op2 ,
44: done
45: } ;
46:
|
49:
50: template < class T , class TFunc , $class $= $typename $std $:: $enable_if $< std :: is_convertible < T * , const Token * > $:: $value $> $:: $type >
51: void visitAstNodes ( T * ast@var1688 , const TFunc & visitor@var1689 )
52: {
53: if (@expr1073746358 !@expr1073746359 ast@var1688 ) {
54: return ; }
55:
56: std ::@expr1073746360 stack < T *@expr4537 , std ::@expr1073746362 vector < T *@expr4537 > > tokens@var1690 ;
57: T * tok@var1691 ; tok@var1691 =@expr1073746364 ast@var1688 ;
58: do {
59: ChildrenToVisit c@var1692 ; c@var1692 =@expr1073746365 visitor@var1689 (@expr1073746366 tok@var1691 ) ;
60:
61: if (@expr1073746367 c@var1692 ==@expr1073746368 ChildrenToVisit ::@expr1073746369 done ) {
62: break ; }
63: if (@expr1073746370 c@var1692 ==@expr1073746371 ChildrenToVisit ::@expr1073746372 op2 ||@expr1073746373 c@var1692 ==@expr4550 ChildrenToVisit ::@expr4551 op1_and_op2 ) {
64: T * t2@var1693 ; t2@var1693 =@expr1073746376 tok@var1691 .@expr1073746377 astOperand2 (@expr1073746378 ) ;
65: if (@expr1073746379 t2@var1693 ) {
66: tokens@var1690 .@expr4556 push (@expr1073746381 t2@var1693 ) ; }
67: }
68: if (@expr1073746382 c@var1692 ==@expr1073746383 ChildrenToVisit ::@expr1073746384 op1 ||@expr1073746385 c@var1692 ==@expr4550 ChildrenToVisit ::@expr4551 op1_and_op2 ) {
69: T * t1@var1694 ; t1@var1694 =@expr1073746388 tok@var1691 .@expr1073746389 astOperand1 (@expr1073746390 ) ;
70: if (@expr1073746391 t1@var1694 ) {
71: tokens@var1690 .@expr4556 push (@expr1073746393 t1@var1694 ) ; }
72: }
73:
74: if (@expr1073746394 tokens@var1690 .@expr1073746395 empty (@expr1073746396 ) ) {
75: break ; }
76:
77: tok@var1691 =@expr1073746397 tokens@var1690 .@expr1073746398 top (@expr1073746399 ) ;
78: tokens@var1690 .@expr1073746400 pop (@expr1073746401 ) ;
79: } while (@expr1073746402 true ) ;
80: }
81:
82: const Token * findAstNode ( const Token * ast@var1695 , const std :: function < bool ( const Token * ) > & pred@var1696 ) ;
83: const Token * findExpression ( const int exprid@var1697 ,
84: const Token * start@var1698 ,
85: const Token * end@var1699 ,
86: const std :: function < bool ( const Token * ) > & pred@var1700 ) ;
87: const Token * findExpression ( const Token * start@var1701 , const int exprid@var1702 ) ;
88:
89: std :: vector < const Token * > astFlatten ( const Token * tok@var1703 , const char * op@var1704 ) ;
90: std :: vector < Token * > astFlatten ( Token * tok@var1705 , const char * op@var1706 ) ;
91:
92: int astCount ( const Token * tok@var1707 , const char * op@var1708 , int depth@var1709 = 100 ) ;
93:
94: bool astHasToken ( const Token * root@var1710 , const Token * tok@var1711 ) ;
95:
96: bool astHasVar ( const Token * tok@var1712 , int varid@var1713 ) ;
97:
98: bool astIsPrimitive ( const Token * tok@var1714 ) ;
99:
100: bool astIsSignedChar ( const Token * tok@var1715 ) ;
101:
102: bool astIsUnknownSignChar ( const Token * tok@var1716 ) ;
103:
104: bool astIsGenericChar ( const Token * tok@var1717 ) ;
105:
106: bool astIsIntegral ( const Token * tok@var1718 , bool unknown@var1719 ) ;
107: bool astIsUnsigned ( const Token * tok@var1720 ) ;
108:
109: bool astIsFloat ( const Token * tok@var1721 , bool unknown@var1722 ) ;
110:
111: bool astIsBool ( const Token * tok@var1723 ) ;
112:
113: bool astIsPointer ( const Token * tok@var1724 ) ;
114:
115: bool astIsSmartPointer ( const Token * tok@var1725 ) ;
116: bool astIsUniqueSmartPointer ( const Token * tok@var1726 ) ;
117:
118: bool astIsIterator ( const Token * tok@var1727 ) ;
119:
120: bool astIsContainer ( const Token * tok@var1728 ) ;
121:
122: bool astIsContainerView ( const Token * tok@var1729 ) ;
123: bool astIsContainerOwned ( const Token * tok@var1730 ) ;
124:
|
133:
134: std :: string astCanonicalType ( const Token * expr@var1731 ) ;
135:
136:
137: const Token * astIsVariableComparison ( const Token * tok@var1732 , const std :: string & comp@var1733 , const std :: string & rhs@var1734 , const Token * * vartok@var1735 = nullptr ) ;
138:
139: bool isVariableDecl ( const Token * tok@var1736 ) ;
140:
141: bool isTemporary ( bool cpp@var1737 , const Token * tok@var1738 , const Library * library@var1739 , bool unknown@var1740 = false ) ;
142:
143: const Token * previousBeforeAstLeftmostLeaf ( const Token * tok@var1741 ) ;
144: Token * previousBeforeAstLeftmostLeaf ( Token * tok@var1742 ) ;
145:
146: const Token * nextAfterAstRightmostLeaf ( const Token * tok@var1743 ) ;
147: Token * nextAfterAstRightmostLeaf ( Token * tok@var1744 ) ;
148:
149: Token * astParentSkipParens ( Token * tok@var1745 ) ;
150: const Token * astParentSkipParens ( const Token * tok@var1746 ) ;
151:
152: const Token * getParentMember ( const Token * tok@var1747 ) ;
153:
154: const Token * getParentLifetime ( const Token * tok@var1748 ) ;
155: const Token * getParentLifetime ( bool cpp@var1749 , const Token * tok@var1750 , const Library * library@var1751 ) ;
156:
157: bool astIsLHS ( const Token * tok@var1752 ) ;
158: bool astIsRHS ( const Token * tok@var1753 ) ;
159:
160: Token * getCondTok ( Token * tok@var1754 ) ;
161: const Token * getCondTok ( const Token * tok@var1755 ) ;
162:
163: Token * getInitTok ( Token * tok@var1756 ) ;
164: const Token * getInitTok ( const Token * tok@var1757 ) ;
165:
166: Token * getStepTok ( Token * tok@var1758 ) ;
167: const Token * getStepTok ( const Token * tok@var1759 ) ;
168:
169: Token * getCondTokFromEnd ( Token * endBlock@var1760 ) ;
170: const Token * getCondTokFromEnd ( const Token * endBlock@var1761 ) ;
171:
172:
173:
174: const Token * findNextTokenFromBreak ( const Token * breakToken@var1762 ) ;
175:
|
178:
179: bool extractForLoopValues ( const Token * forToken@var1763 ,
180: int * const varid@var1764 ,
181: bool * const knownInitValue@var1765 ,
182: long long * const initValue@var1766 ,
183: bool * const partialCond@var1767 ,
184: long long * const stepValue@var1768 ,
185: long long * const lastValue@var1769 ) ;
186:
187: bool precedes ( const Token * tok1@var1770 , const Token * tok2@var1771 ) ;
188: bool succeeds ( const Token * tok1@var1772 , const Token * tok2@var1773 ) ;
189:
190: bool exprDependsOnThis ( const Token * expr@var1774 , bool onVar@var1775 = true , int depth@var1776 = 0 ) ;
191:
192: struct ReferenceToken {
193: const Token * token@var1777 ;
194: std :: list < std :: pair < const Token * , std :: string > > errors@var1778 ;
195: } ;
196:
197: std :: vector < ReferenceToken > followAllReferences ( const Token * tok@var1779 ,
198: bool temporary@var1780 = true ,
199: bool inconclusive@var1781 = true ,
200: std :: list < std :: pair < const Token * , std :: string > > errors@var1782 = std :: list < std :: pair < const Token * , std :: string > > { } ,
201: int depth@var1783 = 20 ) ;
202: const Token * followReferences ( const Token * tok@var1784 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1785 = nullptr ) ;
203:
204: bool isSameExpression ( bool cpp@var1786 , bool macro@var1787 , const Token * tok1@var1788 , const Token * tok2@var1789 , const Library & library@var1790 , bool pure@var1791 , bool followVar@var1792 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1793 = nullptr ) ;
205:
206: bool isEqualKnownValue ( const Token * const tok1@var1794 , const Token * const tok2@var1795 ) ;
207:
|
210:
211: bool isUsedAsBool ( const Token * const tok@var1796 ) ;
212:
|
221:
222: bool isOppositeCond ( bool isNot@var1797 , bool cpp@var1798 , const Token * const cond1@var1799 , const Token * const cond2@var1800 , const Library & library@var1801 , bool pure@var1802 , bool followVar@var1803 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1804 = nullptr ) ;
223:
224: bool isOppositeExpression ( bool cpp@var1805 , const Token * const tok1@var1806 , const Token * const tok2@var1807 , const Library & library@var1808 , bool pure@var1809 , bool followVar@var1810 , std :: list < std :: pair < const Token * , std :: string > > * errors@var1811 = nullptr ) ;
225:
226: bool isConstFunctionCall ( const Token * ftok@var1812 , const Library & library@var1813 ) ;
227:
228: bool isConstExpression ( const Token * tok@var1814 , const Library & library@var1815 , bool pure@var1816 , bool cpp@var1817 ) ;
229:
230: bool isWithoutSideEffects ( bool cpp@var1818 , const Token * tok@var1819 , bool checkArrayAccess@var1820 = false , bool checkReference@var1821 = true ) ;
231:
232: bool isUniqueExpression ( const Token * tok@var1822 ) ;
233:
234: bool isEscapeFunction ( const Token * ftok@var1823 , const Library * library@var1824 ) ;
235:
236:
237: bool isReturnScope ( const Token * const endToken@var1825 ,
238: const Library * library@var1826 = nullptr ,
239: const Token * * unknownFunc@var1827 = nullptr ,
240: bool functionScope@var1828 = false ) ;
241:
242:
243: bool isWithinScope ( const Token * tok@var1829 ,
244: const Variable * var@var1830 ,
245: Scope :: ScopeType type@var1831 ) ;
246:
247:
248: const Token * getTokenArgumentFunction ( const Token * tok@var1832 , int & argn@var1833 ) ;
249: Token * getTokenArgumentFunction ( Token * tok@var1834 , int & argn@var1835 ) ;
250:
251: std :: vector < const Variable * > getArgumentVars ( const Token * tok@var1836 , int argnr@var1837 ) ;
252:
|
261:
262: bool isVariableChangedByFunctionCall ( const Token * tok@var1838 , int indirect@var1839 , int varid@var1840 , const Settings * settings@var1841 , bool * inconclusive@var1842 ) ;
263:
|
271:
272: bool isVariableChangedByFunctionCall ( const Token * tok@var1843 , int indirect@var1844 , const Settings * settings@var1845 , bool * inconclusive@var1846 ) ;
273:
274:
275: bool isVariableChanged ( const Token * start@var1847 , const Token * end@var1848 , const int exprid@var1849 , bool globalvar@var1850 , const Settings * settings@var1851 , bool cpp@var1852 , int depth@var1853 = 20 ) ;
276: bool isVariableChanged ( const Token * start@var1854 , const Token * end@var1855 , int indirect@var1856 , const int exprid@var1857 , bool globalvar@var1858 , const Settings * settings@var1859 , bool cpp@var1860 , int depth@var1861 = 20 ) ;
277:
278: bool isVariableChanged ( const Token * tok@var1862 , int indirect@var1863 , const Settings * settings@var1864 , bool cpp@var1865 , int depth@var1866 = 20 ) ;
279:
280: bool isVariableChanged ( const Variable * var@var1867 , const Settings * settings@var1868 , bool cpp@var1869 , int depth@var1870 = 20 ) ;
281:
282: bool isVariablesChanged ( const Token * start@var1871 ,
283: const Token * end@var1872 ,
284: int indirect@var1873 ,
285: std :: vector < const Variable * > vars@var1874 ,
286: const Settings * settings@var1875 ,
287: bool cpp@var1876 ) ;
288:
289: bool isThisChanged ( const Token * tok@var1877 , int indirect@var1878 , const Settings * settings@var1879 , bool cpp@var1880 ) ;
290: bool isThisChanged ( const Token * start@var1881 , const Token * end@var1882 , int indirect@var1883 , const Settings * settings@var1884 , bool cpp@var1885 ) ;
291:
292: const Token * findVariableChanged ( const Token * start@var1886 , const Token * end@var1887 , int indirect@var1888 , const int exprid@var1889 , bool globalvar@var1890 , const Settings * settings@var1891 , bool cpp@var1892 , int depth@var1893 = 20 ) ;
293: Token * findVariableChanged ( Token * start@var1894 , const Token * end@var1895 , int indirect@var1896 , const int exprid@var1897 , bool globalvar@var1898 , const Settings * settings@var1899 , bool cpp@var1900 , int depth@var1901 = 20 ) ;
294:
295: bool isExpressionChanged ( const Token * expr@var1902 ,
296: const Token * start@var1903 ,
297: const Token * end@var1904 ,
298: const Settings * settings@var1905 ,
299: bool cpp@var1906 ,
300: int depth@var1907 = 20 ) ;
301:
302: bool isExpressionChangedAt ( const Token * expr@var1908 ,
303: const Token * tok@var1909 ,
304: int indirect@var1910 ,
305: bool globalvar@var1911 ,
306: const Settings * settings@var1912 ,
307: bool cpp@var1913 ,
308: int depth@var1914 = 20 ) ;
309:
310:
311: bool isAliasOf ( const Token * tok@var1915 , int varid@var1916 , bool * inconclusive@var1917 = nullptr ) ;
312:
313: bool isAliased ( const Variable * var@var1918 ) ;
314:
315: const Token * getArgumentStart ( const Token * ftok@var1919 ) ;
316:
|
320:
321: int numberOfArguments ( const Token * ftok@var1920 ) ;
322:
323:
324: int numberOfArgumentsWithoutAst ( const Token * start@var1921 ) ;
325:
|
328:
329: std :: vector < const Token * > getArguments ( const Token * ftok@var1922 ) ;
330:
331: int getArgumentPos ( const Variable * var@var1923 , const Function * f@var1924 ) ;
332:
|
335:
336: bool isIteratorPair ( std :: vector < const Token * > args@var1925 ) ;
337:
338: const Token * findLambdaStartToken ( const Token * last@var1926 ) ;
339:
|
344:
345: const Token * findLambdaEndToken ( const Token * first@var1927 ) ;
346: Token * findLambdaEndToken ( Token * first@var1928 ) ;
347:
348: bool isLikelyStream ( bool cpp@var1929 , const Token * stream@var1930 ) ;
349:
|
354:
355: bool isLikelyStreamRead ( bool cpp@var1931 , const Token * op@var1932 ) ;
356:
357: bool isCPPCast ( const Token * tok@var1933 ) ;
358:
359: bool isConstVarExpression ( const Token * tok@var1934 , const char * skipMatch@var1935 = nullptr ) ;
360:
361: const Variable * getLHSVariable ( const Token * tok@var1936 ) ;
362:
363: const Token * getLHSVariableToken ( const Token * tok@var1937 ) ;
364:
365: std :: vector < const Variable * > getLHSVariables ( const Token * tok@var1938 ) ;
366:
367:
368: const Token * findAllocFuncCallToken ( const Token * expr@var1939 , const Library & library@var1940 ) ;
369:
370: bool isScopeBracket ( const Token * tok@var1941 ) ;
371:
372: bool isNullOperand ( const Token * expr@var1942 ) ;
373:
374: bool isGlobalData ( const Token * expr@var1943 , bool cpp@var1944 ) ;
375:
|
380:
381: class FwdAnalysis {
382: public:
383: FwdAnalysis ( bool cpp@var1945 , const Library & library@var1946 ) : mCpp@var1979 ( cpp@var1945 ) , mLibrary@var1980 ( library@var1946 ) , mWhat@var1981 ( What :: Reassign ) , mValueFlowKnown@var1983 ( true ) { }
384:
385: bool hasOperand ( const Token * tok@var1947 , const Token * lhs@var1948 ) const ;
386:
|
393:
394: const Token * reassign ( const Token * expr@var1949 , const Token * startToken@var1950 , const Token * endToken@var1951 ) ;
395:
|
402:
403: bool unusedValue ( const Token * expr@var1952 , const Token * startToken@var1953 , const Token * endToken@var1954 ) ;
404:
405: struct KnownAndToken {
406: bool known@var1955 ;
407: const Token * token@var1956 ;
408: } ;
409:
410:
411: bool possiblyAliased ( const Token * expr@var1957 , const Token * startToken@var1958 ) const ;
412:
413: std :: set < int > getExprVarIds ( const Token * expr@var1959 , bool * localOut@var1960 = nullptr , bool * unknownVarIdOut@var1961 = nullptr ) const ;
414: private:
415: static bool isEscapedAlias ( const Token * expr@var1962 ) ;
416:
417:
418: struct Result {
419: enum class Type { NONE , READ , WRITE , BREAK , RETURN , BAILOUT } ; enum Type type@var1963 ;
420: explicit Result ( Type type@var1964 ) : type@var1963 ( type@var1964 ) , token@var1967 ( nullptr ) { }
421: Result ( Type type@var1965 , const Token * token@var1966 ) : type@var1963 ( type@var1965 ) , token@var1967 ( token@var1966 ) { }
422: const Token * token@var1967 ;
423: } ;
424:
425: struct Result check ( const Token * expr@var1968 , const Token * startToken@var1969 , const Token * endToken@var1970 ) ;
426: struct Result checkRecursive ( const Token * expr@var1971 , const Token * startToken@var1972 , const Token * endToken@var1973 , const std :: set < int > & exprVarIds@var1974 , bool local@var1975 , bool inInnerClass@var1976 , int depth@var1977 = 0 ) ;
427:
428:
429: bool isGlobalData ( const Token * expr@var1978 ) const ;
430:
431: const bool mCpp@var1979 ;
432: const Library & mLibrary@var1980 ;
433: enum class What { Reassign , UnusedValue , ValueFlow } ; enum What mWhat@var1981 ;
434: std :: vector < KnownAndToken > mValueFlow@var1982 ;
435: bool mValueFlowKnown@var1983 ;
436: } ;
437:
438: bool isSizeOfEtc ( const Token * tok@var1984 ) ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var1985 ) {
44: if (@expr1073746403 bit@var1985 >=@expr1073746404 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073746405 (@expr1073746406 1LL <<@expr1073746407 (@expr1073746408 bit@var1985 -@expr1073746409 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var1986 ) {
50: if (@expr1073746410 bit@var1986 >=@expr1073746411 64 ) {
51: return (@expr4588 ~@expr1073746413 0ULL ) >>@expr1073746414 1 ; }
52: return (@expr4588 1LL <<@expr1073746416 (@expr4588 bit@var1986 -@expr1073746418 1 ) ) -@expr1073746419 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var1987 ) const {
59: return value@var1987 >=@expr1073746420 min_value (@expr1073746421 int_bit@var1997 ) &&@expr1073746422 value@var1987 <=@expr1073746423 max_value (@expr1073746424 int_bit@var1997 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var1988 ) const {
63: unsigned long long intMax@var1989 ; intMax@var1989 =@expr1073746425 max_value (@expr1073746426 int_bit@var1997 ) ;
64: return value@var1988 <=@expr1073746427 intMax@var1989 ;
65: }
66:
67: bool isLongValue ( long long value@var1990 ) const {
68: return value@var1990 >=@expr1073746428 min_value (@expr1073746429 long_bit@var1998 ) &&@expr1073746430 value@var1990 <=@expr1073746431 max_value (@expr1073746432 long_bit@var1998 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var1991 ) const {
72: unsigned long long longMax@var1992 ; longMax@var1992 =@expr1073746433 max_value (@expr1073746434 long_bit@var1998 ) ;
73: return value@var1991 <=@expr1073746435 longMax@var1992 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var1993 ) const {
77: unsigned long long longLongMax@var1994 ; longLongMax@var1994 =@expr1073746436 max_value (@expr1073746437 long_long_bit@var1999 ) ;
78: return value@var1993 <=@expr1073746438 longLongMax@var1994 ;
79: }
80:
81: int char_bit@var1995 ;
82: int short_bit@var1996 ;
83: int int_bit@var1997 ;
84: int long_bit@var1998 ;
85: int long_long_bit@var1999 ;
86:
87:
88: int sizeof_bool@var2000 ;
89: int sizeof_short@var2001 ;
90: int sizeof_int@var2002 ;
91: int sizeof_long@var2003 ;
92: int sizeof_long_long@var2004 ;
93: int sizeof_float@var2005 ;
94: int sizeof_double@var2006 ;
95: int sizeof_long_double@var2007 ;
96: int sizeof_wchar_t@var2008 ;
97: int sizeof_size_t@var2009 ;
98: int sizeof_pointer@var2010 ;
99:
100: char defaultSign@var2011 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var2012 ;
115:
116:
117: bool platform ( PlatformType type@var2013 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var2014 [ ] , const std :: string & filename@var2015 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var2016 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var2012 ==@expr1073746439 Win32A ||@expr1073746440
136: platformType@var2012 ==@expr1073746441 Win32W ||@expr1073746442
137: platformType@var2012 ==@expr1073746443 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073746444 platformType@var2012 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var2017 ) {
145: switch (@expr1073746445 pt@var2017 ) {
146: case Unspecified :@expr4622 ;
147: return "Unspecified" ;
148: case Native :@expr4622 ;
149: return "Native" ;
150: case Win32A :@expr4622 ;
151: return "win32A" ;
152: case Win32W :@expr4622 ;
153: return "win32W" ;
154: case Win64 :@expr4622 ;
155: return "win64" ;
156: case Unix32 :@expr4622 ;
157: return "unix32" ;
158: case Unix64 :@expr4622 ;
159: return "unix64" ;
160: case PlatformFile :@expr4622 ;
161: return "platformFile" ;
162: default :@expr4622 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073746455 char_bit@var1995 +@expr1073746456 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073746457 char_bit@var1995 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073746458 char_bit@var1995 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var2018 , const std :: string & rhs@var2019 ) const {
41: return caseInsensitiveStringCompare (@expr1073746459 lhs@var2018 , rhs@var2019 ) <@expr1073746460 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var2027 ( cppcheck :: Platform :: Unspecified ) , msc@var2028 ( false ) , useMfc@var2029 ( false ) { }
67: std :: string cfg@var2020 ;
68: std :: string filename@var2021 ;
69: std :: string defines@var2022 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var2022 +@expr1073746461 (@expr1073746462 msc@var2028 ?@expr1073746463 ";_MSC_VER=1900" :@expr1073746464 "" ) +@expr1073746465 (@expr1073746466 useMfc@var2029 ?@expr1073746467 ";__AFXWIN_H__=1" :@expr1073746468 "" ) ;
72: }
73: std :: set < std :: string > undefs@var2023 ;
74: std :: list < std :: string > includePaths@var2024 ;
75: std :: list < std :: string > systemIncludePaths@var2025 ;
76: std :: string standard@var2026 ;
77: cppcheck :: Platform :: PlatformType platformType@var2027 ;
78: bool msc@var2028 ;
79: bool useMfc@var2029 ;
80:
81: void parseCommand ( std :: string command@var2030 ) ;
82: void setDefines ( std :: string defs@var2031 ) ;
83: void setIncludePaths ( const std :: string & basepath@var2032 , const std :: list < std :: string > & in@var2033 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2034 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var2035 ;
86: Type projectType@var2036 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var2037 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous5 {
96: std :: string analyzeAllVsConfigs@var2038 ;
97: std :: vector < std :: string > pathNames@var2039 ;
98: std :: list < std :: string > libraries@var2040 ;
99: std :: list < std :: string > excludedPaths@var2041 ;
100: std :: list < std :: string > checkVsConfigs@var2042 ;
101: std :: string projectFile@var2043 ;
102: std :: string platform@var2044 ;
103: } ; struct Anonymous5 guiProject@var2045 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var2046 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var2047 ) ;
107:
108: Type import ( const std :: string & filename@var2048 , Settings * settings@var2049 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var2050 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var2051 , Settings * settings@var2052 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var2053 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var2054 , const std :: string & path@var2055 , const std :: vector < std :: string > & fileFilters@var2056 ) ;
115: bool importVcxproj ( const std :: string & filename@var2057 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var2058 , const std :: string & additionalIncludeDirectories@var2059 , const std :: vector < std :: string > & fileFilters@var2060 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var2061 ) ;
117:
118: static void printError ( const std :: string & message@var2062 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var2063 ) ;
121:
122: std :: string mPath@var2064 ;
123: std :: set < std :: string > mAllVSConfigs@var2065 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var2066 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var2067 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var2068 [ 2 ] = "1" ;
131: const char BuildDirElementName@var2069 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var2070 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var2071 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var2072 [ 7 ] = "parser" ;
135: const char BugHunting@var2073 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var2074 [ 11 ] = "includedir" ;
137: const char DirElementName@var2075 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var2076 [ 5 ] = "name" ;
139: const char DefinesElementName@var2077 [ 8 ] = "defines" ;
140: const char DefineName@var2078 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var2079 [ 5 ] = "name" ;
142: const char UndefinesElementName@var2080 [ 10 ] = "undefines" ;
143: const char UndefineName@var2081 [ 9 ] = "undefine" ;
144: const char PathsElementName@var2082 [ 6 ] = "paths" ;
145: const char PathName@var2083 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var2084 [ 5 ] = "name" ;
147: const char RootPathName@var2085 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var2086 [ 5 ] = "name" ;
149: const char IgnoreElementName@var2087 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var2088 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var2089 [ 5 ] = "name" ;
152: const char ExcludeElementName@var2090 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var2091 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var2092 [ 5 ] = "name" ;
155: const char FunctionContracts@var2093 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var2094 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var2095 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var2096 [ 8 ] = "library" ;
159: const char PlatformElementName@var2097 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var2098 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var2099 [ 12 ] = "suppression" ;
162: const char AddonElementName@var2100 [ 6 ] = "addon" ;
163: const char AddonsElementName@var2101 [ 7 ] = "addons" ;
164: const char ToolElementName@var2102 [ 5 ] = "tool" ;
165: const char ToolsElementName@var2103 [ 6 ] = "tools" ;
166: const char TagsElementName@var2104 [ 5 ] = "tags" ;
167: const char TagElementName@var2105 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var2106 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var2107 [ 4 ] = "tag" ;
170: const char WarningElementName@var2108 [ 8 ] = "warning" ;
171: const char HashAttributeName@var2109 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var2110 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var2111 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var2112 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var2113 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var2114 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var2115 [ 11 ] = "clang-tidy" ;
178: const char Name@var2116 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var2117 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var2118 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var2119 , std :: clock_t clocks@var2120 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var2121 ;
45: long mNumberOfResults@var2122 ;
46:
47: TimerResultsData ( )
48: : mClocks@var2121 ( 0 )
49: , mNumberOfResults@var2122 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var2123 =@expr1073746470 (@expr1073746471 double ) (@expr1073746472 (@expr1073746473 unsigned long ) mClocks@var2121 ) /@expr1073746474 (@expr1073746475 double ) CLOCKS_PER_SEC@expr1073746469 ;
53: return ret@var2123 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var2124 ) const ;
62: void addResults ( const std :: string & str@var2125 , std :: clock_t clocks@var2126 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var2127 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var2128 , SHOWTIME_MODES showtimeMode@var2129 , TimerResultsIntf * timerResults@var2130 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var2131 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var2132 ;
79: TimerResultsIntf * mTimerResults@var2133 ;
80: std :: clock_t mStart@var2134 ;
81: const SHOWTIME_MODES mShowTimeMode@var2135 ;
82: bool mStopped@var2136 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var2137 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var2138 ;
103:
104:
105: std :: string addonPython@var2139 ;
106:
107:
108: std :: vector < std :: string > basePaths@var2140 ;
109:
110:
111: std :: string buildDir@var2141 ;
112:
113:
114: bool checkAllConfigurations@var2142 ;
115:
116:
117: bool checkConfiguration@var2143 ;
118:
|
121:
122: bool checkHeaders@var2144 ;
123:
124:
125: bool checkLibrary@var2145 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var2146 ;
129:
130:
131: bool checkUnusedTemplates@var2147 ;
132:
133:
134: bool clang@var2148 ;
135:
136:
137: std :: string clangExecutable@var2149 ;
138:
139:
140: bool clangTidy@var2150 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var2151 ;
144:
145:
146: std :: string cppcheckCfgProductName@var2152 ;
147:
148:
149: std :: string cppcheckCfgAbout@var2153 ;
150:
151:
152: bool daca@var2154 ;
153:
154:
155: bool debugnormal@var2155 ;
156:
157:
158: bool debugSimplified@var2156 ;
159:
160:
161: bool debugtemplate@var2157 ;
162:
163:
164: bool debugwarnings@var2158 ;
165:
166:
167: bool dump@var2159 ;
168: std :: string dumpFile@var2160 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var2161 ;
176:
177:
178: bool exceptionHandling@var2162 ;
179:
180:
181: std :: string exename@var2163 ;
182:
183:
184:
185: int exitCode@var2164 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var2165 ;
189:
190:
191: bool force@var2166 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var2167 ;
196:
197:
198: bool inlineSuppressions@var2168 ;
199:
200:
201:
202: unsigned int jobs@var2169 ;
203:
|
206:
207: bool jointSuppressionReport@var2170 ;
208:
209:
210: std :: list < std :: string > libraries@var2171 ;
211:
212:
213: Library library@var2172 ;
214:
215:
216:
217: int loadAverage@var2173 ;
218:
|
221:
222: int maxConfigs@var2174 ;
223:
224:
225: int maxCtuDepth@var2175 ;
226:
227:
228: int maxTemplateRecursion@var2176 ;
229:
230:
231: Suppressions nofail@var2177 ;
232:
233:
234: Suppressions nomsg@var2178 ;
235:
236:
237: std :: string outputFile@var2179 ;
238:
239:
240: std :: string plistOutput@var2180 ;
241:
242:
243: bool preprocessOnly@var2181 ;
244:
245: ImportProject project@var2182 ;
246:
247:
248: bool quiet@var2183 ;
249:
250:
251: bool relativePaths@var2184 ;
252:
253:
254: bool reportProgress@var2185 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var2186 ( "simple" )
261: , id@var2188 ( "rule" )
262: , severity@var2190 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var2186 ;
266: std :: string pattern@var2187 ;
267: std :: string id@var2188 ;
268: std :: string summary@var2189 ;
269: Severity :: SeverityType severity@var2190 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var2191 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var2197 ( false ) , externalFunctions@var2198 ( false ) , internalFunctions@var2199 ( false ) , externalVariables@var2200 ( false ) { }
281:
282: static const char XmlRootName@var2192 [ ] ;
283: static const char XmlClasses@var2193 [ ] ;
284: static const char XmlExternalFunctions@var2194 [ ] ;
285: static const char XmlInternalFunctions@var2195 [ ] ;
286: static const char XmlExternalVariables@var2196 [ ] ;
287:
288: void clear ( ) {
289: classes@var2197 =@expr1073746476 externalFunctions@var2198 =@expr1073746477 internalFunctions@var2199 =@expr1073746478 externalVariables@var2200 =@expr1073746479 false ;
290: }
291:
|
297:
298: bool classes@var2197 ;
299:
|
304:
305: bool externalFunctions@var2198 ;
306:
|
310:
311: bool internalFunctions@var2199 ;
312:
|
316:
317: bool externalVariables@var2200 ;
318: } ;
319:
320: SafeChecks safeChecks@var2201 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var2202 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var2203 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var2204 ;
325:
326:
327: SHOWTIME_MODES showtime@var2205 ;
328:
329:
330: Standards standards@var2206 ;
331:
332:
333:
334: std :: string templateFormat@var2207 ;
335:
336:
337:
338: std :: string templateLocation@var2208 ;
339:
340:
341: std :: string userDefines@var2209 ;
342:
343:
344: std :: set < std :: string > userUndefs@var2210 ;
345:
346:
347: std :: list < std :: string > userIncludes@var2211 ;
348:
349:
350: bool verbose@var2212 ;
351:
352:
353: bool xml@var2213 ;
354:
355:
356: int xml_version@var2214 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var2215 ) const {
363: for (@expr1073746480 const std ::@expr1073746481 string &@expr1073746482 configExcludePath@var2216 :@expr1073746483 configExcludePaths@var2151 ) {
364: if (@expr1073746484 file@var2215 .@expr1073746485 length (@expr1073746486 ) >=@expr1073746487 configExcludePath@var2216 .@expr4664 length (@expr4665 ) &&@expr1073746490 file@var2215 .@expr1073746491 compare (@expr1073746492 0 , configExcludePath@var2216 .@expr4664 length (@expr4665 ) , configExcludePath@var2216 ) ==@expr1073746495 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var2217 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var2218 , bool inconclusiveCheck@var2219 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073746496 find (@expr1073746497 libraries@var2171 .@expr1073746498 begin (@expr1073746499 ) , libraries@var2171 .@expr4676 end (@expr4677 ) , "posix" ) !=@expr1073746502 libraries@var2171 .@expr4676 end (@expr4677 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var2220 = true ) {
392: Settings ::@expr1073746505 mTerminated@var2137 =@expr1073746506 t@var2220 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073746507 mTerminated@var2137 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var2221 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var2222 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var2223 ) {
47: mSettings@var2258 =@expr1073746508 settings@var2223 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var2258 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var2260 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var2261 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var2224 ) ;
72:
73: void addtoken ( const std :: string & str@var2225 , const int lineno@var2226 , const int column@var2227 , const int fileno@var2228 , bool split@var2229 = false ) ;
74: void addtoken ( const std :: string & str@var2230 , const Token * locationTok@var2231 ) ;
75:
76: void addtoken ( const Token * tok@var2232 , const int lineno@var2233 , const int column@var2234 , const int fileno@var2235 ) ;
77: void addtoken ( const Token * tok@var2236 , const Token * locationTok@var2237 ) ;
78: void addtoken ( const Token * tok@var2238 ) ;
79:
80: static void insertTokens ( Token * dest@var2239 , const Token * src@var2240 , int n@var2241 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var2242 , const Token * first@var2243 , const Token * last@var2244 , bool one_line@var2245 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var2246 , const std :: string & file0@var2247 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var2248 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var2249 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var2255 .@expr1073746509 front@var2262 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var2255 .@expr1073746510 front@var2262 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var2255 .@expr1073746511 back@var2263 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var2255 .@expr1073746512 back@var2263 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var2256 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var2250 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var2251 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var2252 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var2253 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var2254 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var2255 ;
206:
207:
208: std :: vector < std :: string > mFiles@var2256 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var2257 ;
212:
213:
214: const Settings * mSettings@var2258 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var2259 ;
217:
218:
219: bool mIsC@var2260 ;
220: bool mIsCpp@var2261 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var2264 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var2265 ;
67: mutable int mVarId@var2266 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var2267 ) ;
73: bool hasVariable ( const std :: string & varname@var2268 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var2269 ) const {
75: return mVariableId@var2264 .@expr1073746513 find (@expr1073746514 varname@var2269 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var2264 .@expr1073746515 end (@expr1073746516 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var2264 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073746517 mVarId@var2266 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var2270 , ErrorLogger * errorLogger@var2271 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var2272 ) {
95: mTimerResults@var2392 =@expr1073746518 tr@var2272 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var2370 .@expr1073746519 isC (@expr1073746520 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var2370 .@expr1073746521 isCPP (@expr1073746522 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var2273 , bool * unknown@var2274 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var2275 , const std :: string & FileName@var2276 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var2277 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var2278 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var2279 ,
142: const char FileName@var2280 [ ] ,
143: const std :: string & configuration@var2281 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var2282 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var2283 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var2284 , const Token * end@var2285 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var2286 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var2287 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var2288 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var2289 , const Token * const tokEnd@var2290 , const bool only_k_r_fpar@var2291 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var2292 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var2293 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var2294 , bool commandWithCondition@var2295 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var2296 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var2297 , Token * * _tok2@var2298 , Token * * _tok3@var2299 , std :: string & value@var2300 , int & valueVarId@var2301 , bool & valueIsPointer@var2302 , bool floatvar@var2303 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var2304 , Token * tok3@var2305 , int varid@var2306 , const std :: string & structname@var2307 , std :: string & value@var2308 , int valueVarId@var2309 , bool valueIsPointer@var2310 , const Token * const valueToken@var2311 , int indentlevel@var2312 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var2313 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var2314 , const std :: string & endsWith@var2315 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var2316 , const std :: string & endsWith@var2317 , bool cpp@var2318 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var2319 ) {
585: mPreprocessor@var2393 =@expr1073746523 preprocessor@var2319 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var2393 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var2320 , const Token * end@var2321 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var2322 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var2323 , const std :: string & code@var2324 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var2325 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var2326 , const std :: string & what@var2327 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var2328 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var2329 , const std :: string & msg@var2330 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var2331 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var2332 , const std :: string & macroName@var2333 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var2334 , const Token * end@var2335 , bool allowSemicolon@var2336 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var2337 , const Severity :: SeverityType severity@var2338 , const std :: string & id@var2339 , const std :: string & msg@var2340 , bool inconclusive@var2341 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var2342 , Severity :: SeverityType severity@var2343 , const std :: string & id@var2344 , const std :: string & msg@var2345 , bool inconclusive@var2346 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var2347 , const Token * name@var2348 , const Token * typeDef@var2349 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var2350 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var2351 ,
821: const VariableMap & variableMap@var2352 ,
822: const int scopeStartVarId@var2353 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var2354 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var2355 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var2356 ,
827: int * varId@var2357 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var2358 ,
830: Token * const startToken@var2359 ,
831: const Token * const endToken@var2360 ,
832: const std :: map < std :: string , int > & varlist@var2361 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var2362 ,
834: int * varId_@var2363 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var2364 ) ;
849:
850: bool operatorEnd ( const Token * tok@var2365 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var2391 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var2366 ) {
861: mSettings@var2377 =@expr1073746524 settings@var2366 ;
862: list@var2370 .@expr1073746525 setSettings (@expr1073746526 settings@var2366 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var2379 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var2367 ) const ;
877:
878: void dump ( std :: ostream & out@var2368 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var2369 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var2389 ;
888: }
889:
|
892:
893: TokenList list@var2370 ;
894:
895: const Token * tokens ( ) const {
896: return list@var2370 .@expr1073746527 front (@expr1073746528 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var2371 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var2372 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var2373 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var2374 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var2377 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var2375 , bool inOperator@var2376 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073746529 mVarId@var2389 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var2377 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var2378 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var2379 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var2380 ;
973:
974:
975:
976: std :: string mConfiguration@var2381 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var2382 ;
980:
981: struct TypedefInfo {
982: std :: string name@var2383 ;
983: std :: string filename@var2384 ;
984: int lineNumber@var2385 ;
985: int column@var2386 ;
986: bool used@var2387 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var2388 ;
989:
990:
991: int mVarId@var2389 ;
992:
993:
994: int mUnnamedCount@var2390 ;
995:
|
999:
1000: bool mCodeWithTemplates@var2391 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var2392 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var2393 ;
1013: } ;

##file cppcheck-2.8/lib/ctu.cpp

1:
|
40:
41: static const char ATTR_CALL_ID@var2394 [ 8 ] = "call-id" ;
42: static const char ATTR_CALL_FUNCNAME@var2395 [ 14 ] = "call-funcname" ;
43: static const char ATTR_CALL_ARGNR@var2396 [ 11 ] = "call-argnr" ;
44: static const char ATTR_CALL_ARGEXPR@var2397 [ 13 ] = "call-argexpr" ;
45: static const char ATTR_CALL_ARGVALUETYPE@var2398 [ 18 ] = "call-argvaluetype" ;
46: static const char ATTR_CALL_ARGVALUE@var2399 [ 14 ] = "call-argvalue" ;
47: static const char ATTR_WARNING@var2400 [ 8 ] = "warning" ;
48: static const char ATTR_LOC_FILENAME@var2401 [ 5 ] = "file" ;
49: static const char ATTR_LOC_LINENR@var2402 [ 5 ] = "line" ;
50: static const char ATTR_LOC_COLUMN@var2403 [ 4 ] = "col" ;
51: static const char ATTR_INFO@var2404 [ 5 ] = "info" ;
52: static const char ATTR_MY_ID@var2405 [ 6 ] = "my-id" ;
53: static const char ATTR_MY_ARGNR@var2406 [ 9 ] = "my-argnr" ;
54: static const char ATTR_MY_ARGNAME@var2407 [ 11 ] = "my-argname" ;
55: static const char ATTR_VALUE@var2408 [ 6 ] = "value" ;
56:
57: int CTU :: maxCtuDepth@var524 = 2 ;
58:
59: std :: string CTU :: getFunctionId ( const Tokenizer * tokenizer@var2409 , const Function * function@var2410 )
60: {
61: return tokenizer@var2409 .@expr1073746530 list@var2411 .@expr1073746531 file (@expr1073746532 function@var2410 .@expr4709 tokenDef@var2412 ) +@expr1073746534 ':' +@expr1073746535 MathLib ::@expr4712 toString (@expr1073746537 function@var2410 .@expr4709 tokenDef@var2412 .@expr1073746539 linenr (@expr1073746540 ) ) +@expr1073746541 ':' +@expr1073746542 MathLib ::@expr4712 toString (@expr1073746544 function@var2410 .@expr4709 tokenDef@var2412 .@expr1073746546 column (@expr1073746547 ) ) ;
62: }
63:
64: CTU :: FileInfo :: Location :: Location ( const Tokenizer * tokenizer@var2413 , const Token * tok@var2414 )
65: : fileName@var473 ( tokenizer@var2413 . list@var2415 . file ( tok@var2414 ) )
66: , lineNumber@var474 ( tok@var2414 . linenr ( ) )
67: , column@var475 ( tok@var2414 . column ( ) )
68: { }
69:
70: std :: string CTU :: FileInfo :: toString ( ) const
71: {
72: std ::@expr1073746548 ostringstream out@var2416 ;
73:
74:
75: for (@expr1073746549 const CTU ::@expr4726 FileInfo ::@expr4726 FunctionCall &@expr4728 functionCall@var2417 :@expr1073746553 functionCalls@var515 ) {
76: out@var2416 <<@expr1073746554 functionCall@var2417 .@expr1073746555 toXmlString (@expr1073746556 ) ;
77: }
78:
79:
80: for (@expr1073746557 const CTU ::@expr4726 FileInfo ::@expr4726 NestedCall &@expr4728 nestedCall@var2418 :@expr1073746561 nestedCalls@var516 ) {
81: out@var2416 <<@expr1073746562 nestedCall@var2418 .@expr1073746563 toXmlString (@expr1073746564 ) <<@expr1073746565 "\n" ;
82: }
83:
84: return out@var2416 .@expr1073746566 str (@expr1073746567 ) ;
85: }
86:
87: std :: string CTU :: FileInfo :: CallBase :: toBaseXmlString ( ) const
88: {
89: std ::@expr1073746568 ostringstream out@var2419 ;
90: out@var2419 <<@expr1073746569 " " <<@expr1073746570 ATTR_CALL_ID@var2394 <<@expr1073746571 "=\"" <<@expr1073746572 callId@var492 <<@expr1073746573 "\""
91: <<@expr1073746574 " " <<@expr1073746575 ATTR_CALL_FUNCNAME@var2395 <<@expr1073746576 "=\"" <<@expr1073746577 ErrorLogger ::@expr4754 toxml (@expr1073746579 callFunctionName@var494 ) <<@expr1073746580 "\""
92: <<@expr1073746581 " " <<@expr1073746582 ATTR_CALL_ARGNR@var2396 <<@expr1073746583 "=\"" <<@expr1073746584 callArgNr@var493 <<@expr1073746585 "\""
93: <<@expr1073746586 " " <<@expr1073746587 ATTR_LOC_FILENAME@var2401 <<@expr1073746588 "=\"" <<@expr1073746589 ErrorLogger ::@expr4754 toxml (@expr1073746591 location@var495 .@expr1073746592 fileName@var2661 ) <<@expr1073746593 "\""
94: <<@expr1073746594 " " <<@expr1073746595 ATTR_LOC_LINENR@var2402 <<@expr1073746596 "=\"" <<@expr1073746597 location@var495 .@expr1073746598 lineNumber@var2662 <<@expr1073746599 "\""
95: <<@expr1073746600 " " <<@expr1073746601 ATTR_LOC_COLUMN@var2403 <<@expr1073746602 "=\"" <<@expr1073746603 location@var495 .@expr1073746604 column@var2663 <<@expr1073746605 "\"" ;
96: return out@var2419 .@expr1073746606 str (@expr1073746607 ) ;
97: }
98:
99: std :: string CTU :: FileInfo :: FunctionCall :: toXmlString ( ) const
100: {
101: std ::@expr1073746608 ostringstream out@var2420 ;
102: out@var2420 <<@expr1073746609 "<function-call"
103: <<@expr1073746610 toBaseXmlString (@expr1073746611 )
104: <<@expr1073746612 " " <<@expr1073746613 ATTR_CALL_ARGEXPR@var2397 <<@expr1073746614 "=\"" <<@expr1073746615 ErrorLogger ::@expr4792 toxml (@expr1073746617 callArgumentExpression@var497 ) <<@expr1073746618 "\""
105: <<@expr1073746619 " " <<@expr1073746620 ATTR_CALL_ARGVALUETYPE@var2398 <<@expr1073746621 "=\"" <<@expr1073746622 static_cast < int > (@expr1073746623 callValueType@var499 ) <<@expr1073746624 "\""
106: <<@expr1073746625 " " <<@expr1073746626 ATTR_CALL_ARGVALUE@var2399 <<@expr1073746627 "=\"" <<@expr1073746628 callArgValue@var498 <<@expr1073746629 "\"" ;
107: if (@expr1073746630 warning@var501 ) {
108: out@var2420 <<@expr1073746631 " " <<@expr1073746632 ATTR_WARNING@var2400 <<@expr1073746633 "=\"true\"" ; }
109: if (@expr1073746634 callValuePath@var500 .@expr1073746635 empty (@expr1073746636 ) ) {
110: out@var2420 <<@expr1073746637 "/>" ; }
111: else {
112: out@var2420 <<@expr1073746638 ">\n" ;
113: for (@expr1073746639 const ErrorMessage ::@expr1073746640 FileLocation &@expr1073746641 loc@var2421 :@expr1073746642 callValuePath@var500 ) {
114: out@var2420 <<@expr1073746643 "  <path"
115: <<@expr1073746644 " " <<@expr1073746645 ATTR_LOC_FILENAME@var2401 <<@expr1073746646 "=\"" <<@expr1073746647 ErrorLogger ::@expr4792 toxml (@expr1073746649 loc@var2421 .@expr1073746650 getfile (@expr1073746651 ) ) <<@expr1073746652 "\""
116: <<@expr1073746653 " " <<@expr1073746654 ATTR_LOC_LINENR@var2402 <<@expr1073746655 "=\"" <<@expr1073746656 loc@var2421 .@expr1073746657 line@var2422 <<@expr1073746658 "\""
117: <<@expr1073746659 " " <<@expr1073746660 ATTR_LOC_COLUMN@var2403 <<@expr1073746661 "=\"" <<@expr1073746662 loc@var2421 .@expr1073746663 column@var2423 <<@expr1073746664 "\""
118: <<@expr1073746665 " " <<@expr1073746666 ATTR_INFO@var2404 <<@expr1073746667 "=\"" <<@expr1073746668 ErrorLogger ::@expr4792 toxml (@expr1073746670 loc@var2421 .@expr1073746671 getinfo (@expr1073746672 ) ) <<@expr1073746673 "\"/>\n" ; }
119: out@var2420 <<@expr1073746674 "</function-call>" ;
120: }
121: return out@var2420 .@expr1073746675 str (@expr1073746676 ) ;
122: }
123:
124: std :: string CTU :: FileInfo :: NestedCall :: toXmlString ( ) const
125: {
126: std ::@expr1073746677 ostringstream out@var2424 ;
127: out@var2424 <<@expr1073746678 "<function-call"
128: <<@expr1073746679 toBaseXmlString (@expr1073746680 )
129: <<@expr1073746681 " " <<@expr1073746682 ATTR_MY_ID@var2405 <<@expr1073746683 "=\"" <<@expr1073746684 myId@var513 <<@expr1073746685 "\""
130: <<@expr1073746686 " " <<@expr1073746687 ATTR_MY_ARGNR@var2406 <<@expr1073746688 "=\"" <<@expr1073746689 myArgNr@var514 <<@expr1073746690 "\""
131: <<@expr1073746691 "/>" ;
132: return out@var2424 .@expr1073746692 str (@expr1073746693 ) ;
133: }
134:
135: std :: string CTU :: FileInfo :: UnsafeUsage :: toString ( ) const
136: {
137: std ::@expr1073746694 ostringstream out@var2425 ;
138: out@var2425 <<@expr1073746695 "    <unsafe-usage"
139: <<@expr1073746696 " " <<@expr1073746697 ATTR_MY_ID@var2405 <<@expr1073746698 "=\"" <<@expr1073746699 myId@var481 <<@expr1073746700 '\"'
140: <<@expr1073746701 " " <<@expr1073746702 ATTR_MY_ARGNR@var2406 <<@expr1073746703 "=\"" <<@expr1073746704 myArgNr@var482 <<@expr1073746705 '\"'
141: <<@expr1073746706 " " <<@expr1073746707 ATTR_MY_ARGNAME@var2407 <<@expr1073746708 "=\"" <<@expr1073746709 myArgumentName@var483 <<@expr1073746710 '\"'
142: <<@expr1073746711 " " <<@expr1073746712 ATTR_LOC_FILENAME@var2401 <<@expr1073746713 "=\"" <<@expr1073746714 ErrorLogger ::@expr1073746715 toxml (@expr1073746716 location@var484 .@expr1073746717 fileName@var2658 ) <<@expr1073746718 '\"'
143: <<@expr1073746719 " " <<@expr1073746720 ATTR_LOC_LINENR@var2402 <<@expr1073746721 "=\"" <<@expr1073746722 location@var484 .@expr1073746723 lineNumber@var2659 <<@expr1073746724 '\"'
144: <<@expr1073746725 " " <<@expr1073746726 ATTR_LOC_COLUMN@var2403 <<@expr1073746727 "=\"" <<@expr1073746728 location@var484 .@expr1073746729 column@var2660 <<@expr1073746730 '\"'
145: <<@expr1073746731 " " <<@expr1073746732 ATTR_VALUE@var2408 <<@expr1073746733 "=\"" <<@expr1073746734 value@var485 <<@expr1073746735 "\""
146: <<@expr1073746736 "/>\n" ;
147: return out@var2425 .@expr1073746737 str (@expr1073746738 ) ;
148: }
149:
150: std :: string CTU :: toString ( const std :: list < CTU :: FileInfo :: UnsafeUsage > & unsafeUsage@var2426 )
151: {
152: std ::@expr1073746739 ostringstream ret@var2427 ;
153: for (@expr1073746740 const CTU ::@expr4917 FileInfo ::@expr4917 UnsafeUsage &@expr1073746743 u@var2428 :@expr1073746744 unsafeUsage@var2426 ) {
154: ret@var2427 <<@expr1073746745 u@var2428 .@expr1073746746 toString (@expr1073746747 ) ; }
155: return ret@var2427 .@expr1073746748 str (@expr1073746749 ) ;
156: }
157:
158: CTU :: FileInfo :: CallBase :: CallBase ( const Tokenizer * tokenizer@var2429 , const Token * callToken@var2430 )
159: : callId@var492 ( getFunctionId ( tokenizer@var2429 , callToken@var2430 . function ( ) ) )
160: , callArgNr@var493 ( 0 )
161: , callFunctionName@var494 ( callToken@var2430 . next ( ) . astOperand1 ( ) . expressionString ( ) )
162: , location@var495 ( CTU :: FileInfo :: Location ( tokenizer@var2429 , callToken@var2430 ) )
163: { }
164:
165: CTU :: FileInfo :: NestedCall :: NestedCall ( const Tokenizer * tokenizer@var2431 , const Function * myFunction@var2432 , const Token * callToken@var2433 )
166: : CallBase ( tokenizer@var2431 , callToken@var2433 )
167: , myId@var513 ( getFunctionId ( tokenizer@var2431 , myFunction@var2432 ) )
168: , myArgNr@var514 ( 0 )
169: { }
170:
171: static std :: string readAttrString ( const tinyxml2 :: XMLElement * e@var2434 , const char * attr@var2435 , bool * error@var2436 )
172: {
173: const char * value@var2437 ; value@var2437 =@expr1073746750 e@var2434 .@expr1073746751 Attribute (@expr1073746752 attr@var2435 ) ;
174: if (@expr1073746753 !@expr1073746754 value@var2437 &&@expr1073746755 error@var2436 ) {
175: *@expr1073746756 error@var2436 =@expr1073746757 true ; }
176: return value@var2437 ?@expr1073746758 value@var2437 :@expr1073746759 "" ;
177: }
178:
179: static long long readAttrInt ( const tinyxml2 :: XMLElement * e@var2438 , const char * attr@var2439 , bool * error@var2440 )
180: {
181: int64_t value@var2441 ; value@var2441 =@expr1073746761 0 ;
182: bool err@var2442 ; err@var2442 =@expr1073746762 e@var2438 .@expr1073746763 QueryInt64Attribute (@expr1073746764 attr@var2439 , &@expr1073746765 value@var2441 ) !=@expr1073746766 tinyxml2 ::@expr1073746767 XML_SUCCESS@expr1073746760 ;
183: if (@expr1073746768 error@var2440 ) {
184: *@expr1073746769 error@var2440 =@expr1073746770 err@var2442 ; }
185: return value@var2441 ;
186: }
187:
188: bool CTU :: FileInfo :: CallBase :: loadBaseFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2443 )
189: {
190: bool error@var2444 ; error@var2444 =@expr1073746771 false ;
191: callId@var492 =@expr1073746772 readAttrString (@expr1073746773 xmlElement@var2443 , ATTR_CALL_ID@var2394 , &@expr4950 error@var2444 ) ;
192: callFunctionName@var494 =@expr1073746775 readAttrString (@expr1073746776 xmlElement@var2443 , ATTR_CALL_FUNCNAME@var2395 , &@expr4950 error@var2444 ) ;
193: callArgNr@var493 =@expr1073746778 readAttrInt (@expr1073746779 xmlElement@var2443 , ATTR_CALL_ARGNR@var2396 , &@expr4950 error@var2444 ) ;
194: location@var495 .@expr1073746781 fileName@var2661 =@expr1073746782 readAttrString (@expr1073746783 xmlElement@var2443 , ATTR_LOC_FILENAME@var2401 , &@expr4950 error@var2444 ) ;
195: location@var495 .@expr1073746785 lineNumber@var2662 =@expr1073746786 readAttrInt (@expr1073746787 xmlElement@var2443 , ATTR_LOC_LINENR@var2402 , &@expr4950 error@var2444 ) ;
196: location@var495 .@expr1073746789 column@var2663 =@expr1073746790 readAttrInt (@expr1073746791 xmlElement@var2443 , ATTR_LOC_COLUMN@var2403 , &@expr4950 error@var2444 ) ;
197: return !@expr1073746793 error@var2444 ;
198: }
199:
200: bool CTU :: FileInfo :: FunctionCall :: loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2445 )
201: {
202: if (@expr1073746794 !@expr1073746795 loadBaseFromXml (@expr1073746796 xmlElement@var2445 ) ) {
203: return false ; }
204: bool error@var2446 ; error@var2446 =@expr1073746797 false ;
205: callArgumentExpression@var497 =@expr1073746798 readAttrString (@expr1073746799 xmlElement@var2445 , ATTR_CALL_ARGEXPR@var2397 , &@expr4976 error@var2446 ) ;
206: callValueType@var499 =@expr1073746801 (@expr1073746802 ValueFlow ::@expr4979 Value ::@expr4979 ValueType ) readAttrInt (@expr1073746805 xmlElement@var2445 , ATTR_CALL_ARGVALUETYPE@var2398 , &@expr4976 error@var2446 ) ;
207: callArgValue@var498 =@expr1073746807 readAttrInt (@expr1073746808 xmlElement@var2445 , ATTR_CALL_ARGVALUE@var2399 , &@expr4976 error@var2446 ) ;
208: const char * w@var2447 ; w@var2447 =@expr1073746810 xmlElement@var2445 .@expr1073746811 Attribute (@expr1073746812 ATTR_WARNING@var2400 ) ;
209: warning@var501 =@expr1073746813 w@var2447 &&@expr1073746814 std ::@expr4991 strcmp (@expr1073746816 w@var2447 , "true" ) ==@expr1073746817 0 ;
210: for (@expr1073746818 const tinyxml2 ::@expr4979 XMLElement *@expr1073746820 e2@var2448 =@expr1073746821 xmlElement@var2445 .@expr1073746822 FirstChildElement (@expr1073746823 ) ; !@expr5000 error@var2446 &&@expr1073746825 e2@var2448 ; e2@var2448 =@expr1073746826 e2@var2448 .@expr1073746827 NextSiblingElement (@expr1073746828 ) ) {
211: if (@expr1073746829 std ::@expr4991 strcmp (@expr1073746831 e2@var2448 .@expr1073746832 Name (@expr1073746833 ) , "path" ) !=@expr1073746834 0 ) {
212: continue ; }
213: ErrorMessage ::@expr1073746835 FileLocation loc@var2449 ;
214: loc@var2449 .@expr1073746836 setfile (@expr1073746837 readAttrString (@expr1073746838 e2@var2448 , ATTR_LOC_FILENAME@var2401 , &@expr4976 error@var2446 ) ) ;
215: loc@var2449 .@expr1073746840 line@var2450 =@expr1073746841 readAttrInt (@expr1073746842 e2@var2448 , ATTR_LOC_LINENR@var2402 , &@expr4976 error@var2446 ) ;
216: loc@var2449 .@expr1073746844 column@var2451 =@expr1073746845 readAttrInt (@expr1073746846 e2@var2448 , ATTR_LOC_COLUMN@var2403 , &@expr4976 error@var2446 ) ;
217: loc@var2449 .@expr1073746848 setinfo (@expr1073746849 readAttrString (@expr1073746850 e2@var2448 , ATTR_INFO@var2404 , &@expr4976 error@var2446 ) ) ;
218: }
219: return !@expr5000 error@var2446 ;
220: }
221:
222: bool CTU :: FileInfo :: NestedCall :: loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2452 )
223: {
224: if (@expr1073746853 !@expr1073746854 loadBaseFromXml (@expr1073746855 xmlElement@var2452 ) ) {
225: return false ; }
226: bool error@var2453 ; error@var2453 =@expr1073746856 false ;
227: myId@var513 =@expr1073746857 readAttrString (@expr1073746858 xmlElement@var2452 , ATTR_MY_ID@var2405 , &@expr5035 error@var2453 ) ;
228: myArgNr@var514 =@expr1073746860 readAttrInt (@expr1073746861 xmlElement@var2452 , ATTR_MY_ARGNR@var2406 , &@expr5035 error@var2453 ) ;
229: return !@expr1073746863 error@var2453 ;
230: }
231:
232: void CTU :: FileInfo :: loadFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2454 )
233: {
234: for (@expr1073746864 const tinyxml2 ::@expr1073746865 XMLElement *@expr1073746866 e@var2455 =@expr1073746867 xmlElement@var2454 .@expr1073746868 FirstChildElement (@expr1073746869 ) ; e@var2455 ; e@var2455 =@expr1073746870 e@var2455 .@expr1073746871 NextSiblingElement (@expr1073746872 ) ) {
235: if (@expr1073746873 std ::@expr5050 strcmp (@expr1073746875 e@var2455 .@expr5052 Name (@expr5053 ) , "function-call" ) ==@expr1073746878 0 ) {
236: FunctionCall functionCall@var2456 ;
237: if (@expr1073746879 functionCall@var2456 .@expr1073746880 loadFromXml (@expr1073746881 e@var2455 ) ) {
238: functionCalls@var515 .@expr1073746882 push_back (@expr1073746883 functionCall@var2456 ) ; }
239: } else { if (@expr1073746884 std ::@expr5050 strcmp (@expr1073746886 e@var2455 .@expr5052 Name (@expr5053 ) , "nested-call" ) ==@expr1073746889 0 ) {
240: NestedCall nestedCall@var2457 ;
241: if (@expr1073746890 nestedCall@var2457 .@expr1073746891 loadFromXml (@expr1073746892 e@var2455 ) ) {
242: nestedCalls@var516 .@expr1073746893 push_back (@expr1073746894 nestedCall@var2457 ) ; }
243: } }
244: }
245: }
246:
247: std :: map < std :: string , std :: list < const CTU :: FileInfo :: CallBase * > > CTU :: FileInfo :: getCallsMap ( ) const
248: {
249: std ::@expr1073746895 map < std ::@expr5072 string , std ::@expr5072 list < const CTU ::@expr5072 FileInfo ::@expr5072 CallBase *@expr1073746900 > > ret@var2458 ;
250: for (@expr1073746901 const CTU ::@expr5072 FileInfo ::@expr5072 NestedCall &@expr5080 nc@var2459 :@expr1073746905 nestedCalls@var516 ) {
251: ret@var2458 [@expr1073746906 nc@var2459 .@expr1073746907 callId@var2460 ] .@expr1073746908 push_back (@expr1073746909 &@expr1073746910 nc@var2459 ) ; }
252: for (@expr1073746911 const CTU ::@expr5072 FileInfo ::@expr5072 FunctionCall &@expr5080 fc@var2461 :@expr1073746915 functionCalls@var515 ) {
253: ret@var2458 [@expr1073746916 fc@var2461 .@expr1073746917 callId@var2462 ] .@expr1073746918 push_back (@expr1073746919 &@expr1073746920 fc@var2461 ) ; }
254: return ret@var2458 ;
255: }
256:
257: std :: list < CTU :: FileInfo :: UnsafeUsage > CTU :: loadUnsafeUsageListFromXml ( const tinyxml2 :: XMLElement * xmlElement@var2463 )
258: {
259: std ::@expr1073746921 list < CTU ::@expr5098 FileInfo ::@expr5098 UnsafeUsage > ret@var2464 ;
260: for (@expr1073746924 const tinyxml2 ::@expr5098 XMLElement *@expr1073746926 e@var2465 =@expr1073746927 xmlElement@var2463 .@expr1073746928 FirstChildElement (@expr1073746929 ) ; e@var2465 ; e@var2465 =@expr1073746930 e@var2465 .@expr1073746931 NextSiblingElement (@expr1073746932 ) ) {
261: if (@expr1073746933 std ::@expr1073746934 strcmp (@expr1073746935 e@var2465 .@expr1073746936 Name (@expr1073746937 ) , "unsafe-usage" ) !=@expr1073746938 0 ) {
262: continue ; }
263: bool error@var2466 ; error@var2466 =@expr1073746939 false ;
264: FileInfo ::@expr1073746940 UnsafeUsage unsafeUsage@var2467 ;
265: unsafeUsage@var2467 .@expr1073746941 myId@var2468 =@expr1073746942 readAttrString (@expr1073746943 e@var2465 , ATTR_MY_ID@var2405 , &@expr5120 error@var2466 ) ;
266: unsafeUsage@var2467 .@expr1073746945 myArgNr@var2469 =@expr1073746946 readAttrInt (@expr1073746947 e@var2465 , ATTR_MY_ARGNR@var2406 , &@expr5120 error@var2466 ) ;
267: unsafeUsage@var2467 .@expr1073746949 myArgumentName@var2470 =@expr1073746950 readAttrString (@expr1073746951 e@var2465 , ATTR_MY_ARGNAME@var2407 , &@expr5120 error@var2466 ) ;
268: unsafeUsage@var2467 .@expr5129 location@var2471 .@expr1073746954 fileName@var2472 =@expr1073746955 readAttrString (@expr1073746956 e@var2465 , ATTR_LOC_FILENAME@var2401 , &@expr5120 error@var2466 ) ;
269: unsafeUsage@var2467 .@expr5129 location@var2471 .@expr1073746959 lineNumber@var2473 =@expr1073746960 readAttrInt (@expr1073746961 e@var2465 , ATTR_LOC_LINENR@var2402 , &@expr5120 error@var2466 ) ;
270: unsafeUsage@var2467 .@expr5129 location@var2471 .@expr1073746964 column@var2474 =@expr1073746965 readAttrInt (@expr1073746966 e@var2465 , ATTR_LOC_COLUMN@var2403 , &@expr5120 error@var2466 ) ;
271: unsafeUsage@var2467 .@expr1073746968 value@var2475 =@expr1073746969 readAttrInt (@expr1073746970 e@var2465 , ATTR_VALUE@var2408 , &@expr5120 error@var2466 ) ;
272:
273: if (@expr1073746972 !@expr1073746973 error@var2466 ) {
274: ret@var2464 .@expr1073746974 push_back (@expr1073746975 unsafeUsage@var2467 ) ; }
275: }
276: return ret@var2464 ;
277: }
278:
279: static int isCallFunction ( const Scope * scope@var2476 , int argnr@var2477 , const Token * * tok@var2478 )
280: {
281: const Variable * const argvar@var2479 ; argvar@var2479 =@expr1073746976 scope@var2476 .@expr1073746977 function@var2480 .@expr1073746978 getArgumentVar (@expr1073746979 argnr@var2477 ) ;
282: if (@expr1073746980 !@expr1073746981 argvar@var2479 .@expr1073746982 isPointer (@expr1073746983 ) ) {
283: return -1 ; }
284: for (@expr1073746984 const Token *@expr1073746985 tok2@var2481 =@expr1073746986 scope@var2476 .@expr1073746987 bodyStart@var2482 ; tok2@var2481 !=@expr1073746988 scope@var2476 .@expr1073746989 bodyEnd@var2483 ; tok2@var2481 =@expr1073746990 tok2@var2481 .@expr1073746991 next (@expr1073746992 ) ) {
285: if (@expr1073746993 tok2@var2481 .@expr1073746994 variable (@expr1073746995 ) !=@expr1073746996 argvar@var2479 ) {
286: continue ; }
287: if (@expr1073746997 !@expr1073746998 Token ::@expr5175 Match (@expr1073747000 tok2@var2481 .@expr1073747001 previous (@expr1073747002 ) , "[(,] %var% [,)]" ) ) {
288: break ; }
289: int argnr2@var2484 ; argnr2@var2484 =@expr1073747003 1 ;
290: const Token * prev@var2485 ; prev@var2485 =@expr1073747004 tok2@var2481 ;
291: while (@expr1073747005 prev@var2485 &&@expr1073747006 prev@var2485 .@expr5183 str (@expr5184 ) !=@expr1073747009 "(" ) {
292: if (@expr1073747010 Token ::@expr5175 Match (@expr1073747012 prev@var2485 , "]|)" ) ) {
293: prev@var2485 =@expr1073747013 prev@var2485 .@expr1073747014 link (@expr1073747015 ) ; }
294: else { if (@expr1073747016 prev@var2485 .@expr5183 str (@expr5184 ) ==@expr1073747019 "," ) {
295: ++@expr1073747020 argnr2@var2484 ; } }
296: prev@var2485 =@expr1073747021 prev@var2485 .@expr5198 previous (@expr5199 ) ;
297: }
298: if (@expr1073747024 !@expr1073747025 prev@var2485 ||@expr1073747026 !@expr1073747027 Token ::@expr5175 Match (@expr1073747029 prev@var2485 .@expr5198 previous (@expr5199 ) , "%name% (" ) ) {
299: break ; }
300: if (@expr1073747032 !@expr1073747033 prev@var2485 .@expr5210 astOperand1 (@expr5211 ) ||@expr1073747036 !@expr1073747037 prev@var2485 .@expr5210 astOperand1 (@expr5211 ) .@expr1073747040 function (@expr1073747041 ) ) {
301: break ; }
302: *@expr1073747042 tok@var2478 =@expr1073747043 prev@var2485 .@expr5198 previous (@expr5199 ) ;
303: return argnr2@var2484 ;
304: }
305: return -1 ;
306: }
307:
308:
309: CTU :: FileInfo * CTU :: getFileInfo ( const Tokenizer * tokenizer@var2486 )
310: {
311: const SymbolDatabase * const symbolDatabase@var2487 ; symbolDatabase@var2487 =@expr1073747046 tokenizer@var2486 .@expr1073747047 getSymbolDatabase (@expr1073747048 ) ;
312:
313: FileInfo * fileInfo@var2488 ; fileInfo@var2488 =@expr1073747049 new FileInfo ;
314:
315:
316: for (@expr1073747050 const Scope &@expr5227 scope@var2489 :@expr1073747052 symbolDatabase@var2487 .@expr1073747053 scopeList@var2490 ) {
317: if (@expr1073747054 !@expr1073747055 scope@var2489 .@expr1073747056 isExecutable (@expr1073747057 ) ||@expr1073747058 scope@var2489 .@expr1073747059 type@var2491 !=@expr1073747060 Scope ::@expr1073747061 eFunction ||@expr1073747062 !@expr1073747063 scope@var2489 .@expr5240 function@var2492 ) {
318: continue ; }
319: const Function * const scopeFunction@var2493 ; scopeFunction@var2493 =@expr1073747065 scope@var2489 .@expr5240 function@var2492 ;
320:
321:
322: for (@expr1073747067 const Token *@expr5244 tok@var2494 =@expr1073747069 scope@var2489 .@expr1073747070 bodyStart@var2495 ; tok@var2494 !=@expr1073747071 scope@var2489 .@expr1073747072 bodyEnd@var2496 ; tok@var2494 =@expr1073747073 tok@var2494 .@expr1073747074 next (@expr1073747075 ) ) {
323: if (@expr1073747076 tok@var2494 .@expr1073747077 str (@expr1073747078 ) !=@expr1073747079 "(" ||@expr1073747080 !@expr1073747081 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) ||@expr1073747084 !@expr1073747085 tok@var2494 .@expr1073747086 astOperand2 (@expr1073747087 ) ) {
324: continue ; }
325: const Function * tokFunction@var2497 ; tokFunction@var2497 =@expr1073747088 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) .@expr1073747091 function (@expr1073747092 ) ;
326: if (@expr1073747093 !@expr1073747094 tokFunction@var2497 ) {
327: continue ; }
328: const std ::@expr1073747095 vector < const Token *@expr5244 > args@var2498 (@expr1073747097 getArguments (@expr1073747098 tok@var2494 .@expr1073747099 previous (@expr1073747100 ) ) ) ;
329: for (@expr1073747101 int argnr@var2499 =@expr1073747102 0 ; argnr@var2499 <@expr1073747103 args@var2498 .@expr1073747104 size (@expr1073747105 ) ; ++@expr1073747106 argnr@var2499 ) {
330: const Token * argtok@var2500 ; argtok@var2500 =@expr1073747107 args@var2498 [@expr1073747108 argnr@var2499 ] ;
331: if (@expr1073747109 !@expr1073747110 argtok@var2500 ) {
332: continue ; }
333: for (@expr1073747111 const ValueFlow ::@expr5288 Value &@expr5227 value@var2501 :@expr1073747114 argtok@var2500 .@expr1073747115 values (@expr1073747116 ) ) {
334: if (@expr1073747117 (@expr1073747118 !@expr1073747119 value@var2501 .@expr1073747120 isIntValue (@expr1073747121 ) ||@expr1073747122 value@var2501 .@expr5299 intvalue@var2502 !=@expr1073747124 0 ||@expr1073747125 value@var2501 .@expr1073747126 isInconclusive (@expr1073747127 ) ) &&@expr1073747128 !@expr1073747129 value@var2501 .@expr1073747130 isBufferSizeValue (@expr1073747131 ) ) {
335: continue ; }
336:
337: if (@expr1073747132 value@var2501 .@expr1073747133 isImpossible (@expr1073747134 ) ) {
338: continue ; }
339: FileInfo ::@expr1073747135 FunctionCall functionCall@var2503 ;
340: functionCall@var2503 .@expr1073747136 callValueType@var2504 =@expr1073747137 value@var2501 .@expr1073747138 valueType@var2505 ;
341: functionCall@var2503 .@expr1073747139 callId@var2506 =@expr1073747140 getFunctionId (@expr5317 tokenizer@var2486 , tokFunction@var2497 ) ;
342: functionCall@var2503 .@expr1073747142 callFunctionName@var2507 =@expr1073747143 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) .@expr5322 expressionString (@expr5323 ) ;
343: functionCall@var2503 .@expr1073747148 location@var2508 =@expr1073747149 FileInfo ::@expr5326 Location (@expr5327 tokenizer@var2486 , tok@var2494 ) ;
344: functionCall@var2503 .@expr1073747152 callArgNr@var2509 =@expr1073747153 argnr@var2499 +@expr5330 1 ;
345: functionCall@var2503 .@expr1073747155 callArgumentExpression@var2510 =@expr1073747156 argtok@var2500 .@expr5333 expressionString (@expr5334 ) ;
346: functionCall@var2503 .@expr1073747159 callArgValue@var2511 =@expr1073747160 value@var2501 .@expr5299 intvalue@var2502 ;
347: functionCall@var2503 .@expr1073747162 warning@var2512 =@expr1073747163 !@expr1073747164 value@var2501 .@expr1073747165 errorSeverity (@expr1073747166 ) ;
348: for (@expr1073747167 const std ::@expr5288 pair < const Token *@expr5244 , std ::@expr5288 string > &@expr5227 i@var2513 :@expr1073747172 value@var2501 .@expr1073747173 errorPath@var2514 ) {
349: ErrorMessage ::@expr1073747174 FileLocation loc@var2515 ;
350: loc@var2515 .@expr1073747175 setfile (@expr1073747176 tokenizer@var2486 .@expr1073747177 list@var2516 .@expr1073747178 file (@expr1073747179 i@var2513 .@expr5356 first@var2517 ) ) ;
351: loc@var2515 .@expr1073747181 line@var2518 =@expr1073747182 i@var2513 .@expr5356 first@var2517 .@expr1073747184 linenr (@expr1073747185 ) ;
352: loc@var2515 .@expr1073747186 column@var2519 =@expr1073747187 i@var2513 .@expr5356 first@var2517 .@expr1073747189 column (@expr1073747190 ) ;
353: loc@var2515 .@expr1073747191 setinfo (@expr1073747192 i@var2513 .@expr1073747193 second@var2520 ) ;
354: functionCall@var2503 .@expr1073747194 callValuePath@var2521 .@expr1073747195 push_back (@expr1073747196 loc@var2515 ) ;
355: }
356: fileInfo@var2488 .@expr5373 functionCalls@var2522 .@expr5374 push_back (@expr1073747199 functionCall@var2503 ) ;
357: }
358:
359: if (@expr1073747200 argtok@var2500 .@expr5377 variable (@expr5378 ) &&@expr1073747203 argtok@var2500 .@expr5377 variable (@expr5378 ) .@expr1073747206 isArray (@expr1073747207 ) &&@expr1073747208 argtok@var2500 .@expr5377 variable (@expr5378 ) .@expr1073747211 dimensions (@expr1073747212 ) .@expr1073747213 size (@expr1073747214 ) ==@expr1073747215 1 &&@expr1073747216 argtok@var2500 .@expr5377 variable (@expr5378 ) .@expr5395 dimension (@expr5396 0 ) >@expr1073747221 1 ) {
360: FileInfo ::@expr1073747222 FunctionCall functionCall@var2523 ;
361: functionCall@var2523 .@expr1073747223 callValueType@var2524 =@expr1073747224 ValueFlow ::@expr5401 Value ::@expr5402 ValueType ::@expr5403 BUFFER_SIZE ;
362: functionCall@var2523 .@expr1073747228 callId@var2525 =@expr1073747229 getFunctionId (@expr5317 tokenizer@var2486 , tokFunction@var2497 ) ;
363: functionCall@var2523 .@expr1073747231 callFunctionName@var2526 =@expr1073747232 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) .@expr5322 expressionString (@expr5323 ) ;
364: functionCall@var2523 .@expr1073747237 location@var2527 =@expr1073747238 FileInfo ::@expr5326 Location (@expr5327 tokenizer@var2486 , tok@var2494 ) ;
365: functionCall@var2523 .@expr1073747241 callArgNr@var2528 =@expr1073747242 argnr@var2499 +@expr5330 1 ;
366: functionCall@var2523 .@expr1073747244 callArgumentExpression@var2529 =@expr1073747245 argtok@var2500 .@expr5333 expressionString (@expr5334 ) ;
367: functionCall@var2523 .@expr1073747248 callArgValue@var2530 =@expr1073747249 argtok@var2500 .@expr5377 variable (@expr5378 ) .@expr5395 dimension (@expr5396 0 ) *@expr1073747254 argtok@var2500 .@expr1073747255 valueType (@expr1073747256 ) .@expr1073747257 typeSize (@expr1073747258 *@expr5435 tokenizer@var2486 .@expr5436 getSettings (@expr5437 ) ) ;
368: functionCall@var2523 .@expr1073747262 warning@var2531 =@expr1073747263 false ;
369: fileInfo@var2488 .@expr5373 functionCalls@var2522 .@expr5374 push_back (@expr1073747266 functionCall@var2523 ) ;
370: }
371:
372: if (@expr1073747267 argtok@var2500 .@expr1073747268 isUnaryOp (@expr1073747269 "&" ) &&@expr1073747270 argtok@var2500 .@expr5447 astOperand1 (@expr5448 ) .@expr5449 variable (@expr5450 ) &&@expr1073747275 argtok@var2500 .@expr5447 astOperand1 (@expr5448 ) .@expr5454 valueType (@expr5455 ) &&@expr1073747280 !@expr1073747281 argtok@var2500 .@expr5447 astOperand1 (@expr5448 ) .@expr5449 variable (@expr5450 ) .@expr1073747286 isArray (@expr1073747287 ) ) {
373: FileInfo ::@expr1073747288 FunctionCall functionCall@var2532 ;
374: functionCall@var2532 .@expr1073747289 callValueType@var2533 =@expr1073747290 ValueFlow ::@expr5401 Value ::@expr5402 ValueType ::@expr5403 BUFFER_SIZE ;
375: functionCall@var2532 .@expr1073747294 callId@var2534 =@expr1073747295 getFunctionId (@expr5317 tokenizer@var2486 , tokFunction@var2497 ) ;
376: functionCall@var2532 .@expr1073747297 callFunctionName@var2535 =@expr1073747298 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) .@expr5322 expressionString (@expr5323 ) ;
377: functionCall@var2532 .@expr1073747303 location@var2536 =@expr1073747304 FileInfo ::@expr5326 Location (@expr5327 tokenizer@var2486 , tok@var2494 ) ;
378: functionCall@var2532 .@expr1073747307 callArgNr@var2537 =@expr1073747308 argnr@var2499 +@expr5330 1 ;
379: functionCall@var2532 .@expr1073747310 callArgumentExpression@var2538 =@expr1073747311 argtok@var2500 .@expr5333 expressionString (@expr5334 ) ;
380: functionCall@var2532 .@expr1073747314 callArgValue@var2539 =@expr1073747315 argtok@var2500 .@expr5447 astOperand1 (@expr5448 ) .@expr5454 valueType (@expr5455 ) .@expr1073747320 typeSize (@expr1073747321 *@expr5435 tokenizer@var2486 .@expr5436 getSettings (@expr5437 ) ) ;
381: functionCall@var2532 .@expr1073747325 warning@var2540 =@expr1073747326 false ;
382: fileInfo@var2488 .@expr5373 functionCalls@var2522 .@expr5374 push_back (@expr1073747329 functionCall@var2532 ) ;
383: }
384:
385: auto isAddressOfArg@var2541 ; isAddressOfArg@var2541 =@expr1073747330 [@expr1073747331 ] (@expr1073747332 const Token *@expr5244 argtok@var2542 ) .@expr5510 const Token *@expr5244 {
386: if (@expr1073747336 !@expr1073747337 argtok@var2542 .@expr1073747338 isUnaryOp (@expr1073747339 "&" ) ) {
387: return nullptr ; }
388: argtok@var2542 =@expr1073747340 argtok@var2542 .@expr1073747341 astOperand1 (@expr1073747342 ) ;
389: if (@expr1073747343 !@expr1073747344 argtok@var2542 ||@expr1073747345 !@expr1073747346 argtok@var2542 .@expr5523 valueType (@expr5524 ) ||@expr1073747349 argtok@var2542 .@expr5523 valueType (@expr5524 ) .@expr1073747352 pointer@var2679 !=@expr1073747353 0 ) {
390: return nullptr ; }
391: return argtok@var2542 ;
392: } ;
393: auto isReferenceArg@var2543 ; isReferenceArg@var2543 =@expr1073747354 [@expr1073747355 &@expr5227 ] (@expr1073747357 const Token *@expr5244 argtok@var2544 ) .@expr5510 const Token *@expr5244 {
394: const Variable * argvar@var2545 ; argvar@var2545 =@expr1073747361 tokFunction@var2497 .@expr1073747362 getArgumentVar (@expr1073747363 argnr@var2499 ) ;
395: if (@expr1073747364 !@expr1073747365 argvar@var2545 ||@expr1073747366 !@expr1073747367 argvar@var2545 .@expr5544 valueType (@expr5545 ) ||@expr1073747370 argvar@var2545 .@expr5544 valueType (@expr5545 ) .@expr1073747373 reference@var2680 ==@expr1073747374 Reference ::@expr1073747375 None ) {
396: return nullptr ; }
397: return argtok@var2544 ;
398: } ;
399: const Token * addr@var2546 ; addr@var2546 =@expr1073747376 isAddressOfArg@var2541 (@expr1073747377 argtok@var2544 ) ;
400: argtok@var2544 =@expr1073747378 addr@var2546 ?@expr1073747379 addr@var2546 :@expr1073747380 isReferenceArg@var2543 (@expr1073747381 argtok@var2544 ) ;
401: if (@expr1073747382 !@expr1073747383 argtok@var2544 ||@expr1073747384 argtok@var2544 .@expr5561 values (@expr5562 ) .@expr1073747387 size (@expr1073747388 ) !=@expr1073747389 1U ) {
402: continue ; }
403:
404: const ValueFlow ::@expr5288 Value &@expr5227 v@var2547 =@expr1073747392 argtok@var2544 .@expr5561 values (@expr5562 ) .@expr1073747395 front (@expr1073747396 ) ;
405: if (@expr1073747397 v@var2547 .@expr1073747398 valueType@var2548 ==@expr1073747399 ValueFlow ::@expr5401 Value ::@expr5402 ValueType ::@expr5578 UNINIT &&@expr1073747403 !@expr1073747404 v@var2547 .@expr1073747405 isInconclusive (@expr1073747406 ) ) {
406: FileInfo ::@expr1073747407 FunctionCall functionCall@var2549 ;
407: functionCall@var2549 .@expr1073747408 callValueType@var2550 =@expr1073747409 ValueFlow ::@expr5401 Value ::@expr5402 ValueType ::@expr5578 UNINIT ;
408: functionCall@var2549 .@expr1073747413 callId@var2551 =@expr1073747414 getFunctionId (@expr5317 tokenizer@var2486 , tokFunction@var2497 ) ;
409: functionCall@var2549 .@expr1073747416 callFunctionName@var2552 =@expr1073747417 tok@var2494 .@expr5258 astOperand1 (@expr5259 ) .@expr5322 expressionString (@expr5323 ) ;
410: functionCall@var2549 .@expr1073747422 location@var2553 =@expr1073747423 FileInfo ::@expr5326 Location (@expr5327 tokenizer@var2486 , tok@var2494 ) ;
411: functionCall@var2549 .@expr1073747426 callArgNr@var2554 =@expr1073747427 argnr@var2499 +@expr5330 1 ;
412: functionCall@var2549 .@expr1073747429 callArgValue@var2555 =@expr1073747430 0 ;
413: functionCall@var2549 .@expr1073747431 callArgumentExpression@var2556 =@expr1073747432 argtok@var2544 .@expr1073747433 expressionString (@expr1073747434 ) ;
414: functionCall@var2549 .@expr1073747435 warning@var2557 =@expr1073747436 false ;
415: fileInfo@var2488 .@expr5373 functionCalls@var2522 .@expr5374 push_back (@expr1073747439 functionCall@var2549 ) ;
416: continue ;
417: }
418: }
419: }
420:
421:
422: for (@expr1073747440 int argnr@var2558 =@expr1073747441 0 ; argnr@var2558 <@expr1073747442 scopeFunction@var2493 .@expr1073747443 argCount (@expr1073747444 ) ; ++@expr1073747445 argnr@var2558 ) {
423: const Token * tok@var2559 ;
424: const int argnr2@var2560 =@expr1073747446 isCallFunction (@expr1073747447 &@expr1073747448 scope@var2489 , argnr@var2558 , &@expr1073747449 tok@var2559 ) ;
425: if (@expr1073747450 argnr2@var2560 >@expr1073747451 0 ) {
426: FileInfo ::@expr1073747452 NestedCall nestedCall@var2561 (@expr1073747453 tokenizer@var2486 , scopeFunction@var2493 , tok@var2559 ) ;
427: nestedCall@var2561 .@expr1073747454 myArgNr@var2562 =@expr1073747455 argnr@var2558 +@expr1073747456 1 ;
428: nestedCall@var2561 .@expr1073747457 callArgNr@var2563 =@expr1073747458 argnr2@var2560 ;
429: fileInfo@var2488 .@expr1073747459 nestedCalls@var2564 .@expr1073747460 push_back (@expr1073747461 nestedCall@var2561 ) ;
430: }
431: }
432: }
433:
434: return fileInfo@var2488 ;
435: }
436:
437: static std :: list < std :: pair < const Token * , long long > > getUnsafeFunction ( const Tokenizer * tokenizer@var2565 , const Settings * settings@var2566 , const Scope * scope@var2567 , int argnr@var2568 , const Check * check@var2569 , bool ( * isUnsafeUsage@var2570 ) ( const Check * , const Token * , long long * ) )
438: {
439: std ::@expr1073747463 list < std ::@expr1073747464 pair < const Token *@expr5641 , long long > > ret@var2571 ;
440: const Variable * const argvar@var2572 ; argvar@var2572 =@expr1073747466 scope@var2567 .@expr1073747467 function@var2573 .@expr1073747468 getArgumentVar (@expr1073747469 argnr@var2568 ) ;
441: if (@expr1073747470 !@expr1073747471 argvar@var2572 .@expr1073747472 isPointer (@expr1073747473 ) &&@expr1073747474 !@expr1073747475 argvar@var2572 .@expr1073747476 isReference (@expr1073747477 ) ) {
442: return ret@var2571 ; }
443: for (@expr1073747478 const Token *@expr5641 tok2@var2574 =@expr1073747480 scope@var2567 .@expr1073747481 bodyStart@var2575 ; tok2@var2574 !=@expr1073747482 scope@var2567 .@expr1073747483 bodyEnd@var2576 ; tok2@var2574 =@expr1073747484 tok2@var2574 .@expr1073747485 next (@expr1073747486 ) ) {
444: if (@expr1073747487 Token ::@expr5664 Match (@expr1073747489 tok2@var2574 , ")|else {" ) ) {
445: tok2@var2574 =@expr1073747490 tok2@var2574 .@expr1073747491 linkAt (@expr1073747492 1 ) ;
446: if (@expr1073747493 Token ::@expr1073747494 findmatch (@expr1073747495 tok2@var2574 .@expr5672 link (@expr5673 ) , "return|throw" , tok2@var2574 ) ) {
447: return ret@var2571 ; }
448: int indirect@var2577 ; indirect@var2577 =@expr1073747498 0 ;
449: if (@expr1073747499 argvar@var2572 .@expr5676 valueType (@expr5677 ) ) {
450: indirect@var2577 =@expr1073747502 argvar@var2572 .@expr5676 valueType (@expr5677 ) .@expr1073747505 pointer@var2679 ; }
451: if (@expr1073747506 isVariableChanged (@expr1073747507 tok2@var2574 .@expr5672 link (@expr5673 ) , tok2@var2574 , indirect@var2577 , argvar@var2572 .@expr1073747510 declarationId (@expr1073747511 ) , false , settings@var2566 , tokenizer@var2565 .@expr1073747512 isCPP (@expr1073747513 ) ) ) {
452: return ret@var2571 ; }
453: }
454: if (@expr1073747514 Token ::@expr5664 Match (@expr1073747516 tok2@var2574 , "%oror%|&&|?" ) ) {
455: tok2@var2574 =@expr1073747517 tok2@var2574 .@expr1073747518 findExpressionStartEndTokens (@expr1073747519 ) .@expr1073747520 second@expr1073747462 ;
456: continue ;
457: }
458: if (@expr1073747521 tok2@var2574 .@expr1073747522 variable (@expr1073747523 ) !=@expr1073747524 argvar@var2572 ) {
459: continue ; }
460: long long value@var2578 ; value@var2578 =@expr1073747525 0 ;
461: if (@expr1073747526 !@expr1073747527 isUnsafeUsage@var2570 (@expr1073747528 check@var2569 , tok2@var2574 , &@expr1073747529 value@var2578 ) ) {
462: return ret@var2571 ; }
463: ret@var2571 .@expr1073747530 emplace_back (@expr1073747531 tok2@var2574 , value@var2578 ) ;
464: return ret@var2571 ;
465: }
466: return ret@var2571 ;
467: }
468:
469: std :: list < CTU :: FileInfo :: UnsafeUsage > CTU :: getUnsafeUsage ( const Tokenizer * tokenizer@var2579 , const Settings * settings@var2580 , const Check * check@var2581 , bool ( * isUnsafeUsage@var2582 ) ( const Check * , const Token * , long long * ) )
470: {
471: std ::@expr1073747532 list < CTU ::@expr5709 FileInfo ::@expr5709 UnsafeUsage > unsafeUsage@var2583 ;
472:
473:
474: const SymbolDatabase * const symbolDatabase@var2584 ; symbolDatabase@var2584 =@expr1073747535 tokenizer@var2579 .@expr1073747536 getSymbolDatabase (@expr1073747537 ) ;
475:
476: for (@expr1073747538 const Scope &@expr5715 scope@var2585 :@expr1073747540 symbolDatabase@var2584 .@expr1073747541 scopeList@var2586 ) {
477: if (@expr1073747542 !@expr1073747543 scope@var2585 .@expr1073747544 isExecutable (@expr1073747545 ) ||@expr1073747546 scope@var2585 .@expr1073747547 type@var2587 !=@expr1073747548 Scope ::@expr1073747549 eFunction ||@expr1073747550 !@expr1073747551 scope@var2585 .@expr5728 function@var2588 ) {
478: continue ; }
479: const Function * const function@var2589 ; function@var2589 =@expr1073747553 scope@var2585 .@expr5728 function@var2588 ;
480:
481:
482: for (@expr1073747555 int argnr@var2590 =@expr1073747556 0 ; argnr@var2590 <@expr1073747557 function@var2589 .@expr1073747558 argCount (@expr1073747559 ) ; ++@expr1073747560 argnr@var2590 ) {
483: for (@expr1073747561 const std ::@expr5709 pair < const Token *@expr1073747563 , long long > &@expr5715 v@var2591 :@expr1073747565 getUnsafeFunction (@expr1073747566 tokenizer@var2579 , settings@var2580 , &@expr1073747567 scope@var2585 , argnr@var2590 , check@var2581 , isUnsafeUsage@var2582 ) ) {
484: const Token * tok@var2592 ; tok@var2592 =@expr1073747568 v@var2591 .@expr1073747569 first@var2593 ;
485: long long val@var2594 ; val@var2594 =@expr1073747570 v@var2591 .@expr1073747571 second@var2595 ;
486: unsafeUsage@var2583 .@expr1073747572 emplace_back (@expr1073747573 CTU ::@expr1073747574 getFunctionId (@expr1073747575 tokenizer@var2579 , function@var2589 ) , argnr@var2590 +@expr1073747576 1 , tok@var2592 .@expr1073747577 str (@expr1073747578 ) , CTU ::@expr1073747579 FileInfo ::@expr1073747580 Location (@expr1073747581 tokenizer@var2579 , tok@var2592 ) , val@var2594 ) ;
487: }
488: }
489: }
490:
491: return unsafeUsage@var2583 ;
492: }
493:
494: static bool findPath ( const std :: string & callId@var2596 ,
495: int callArgNr@var2597 ,
496: long long unsafeValue@var2598 ,
497: CTU :: FileInfo :: InvalidValueType invalidValue@var2599 ,
498: const std :: map < std :: string , std :: list < const CTU :: FileInfo :: CallBase * > > & callsMap@var2600 ,
499: const CTU :: FileInfo :: CallBase * path@var2601 [ 10 ] ,
500: int index@var2602 ,
501: bool warning@var2603 )
502: {
503: if (@expr1073747582 index@var2602 >=@expr1073747583 CTU ::@expr1073747584 maxCtuDepth@var524 ||@expr1073747585 index@var2602 >=@expr1073747586 10 ) {
504: return false ; }
505:
506: const std ::@expr1073747587 map < std ::@expr5764 string , std ::@expr5764 list < const CTU ::@expr5764 FileInfo ::@expr5764 CallBase *@expr5768 > > ::@expr1073747593 const_iterator it@var2604 =@expr1073747594 callsMap@var2600 .@expr1073747595 find (@expr1073747596 callId@var2596 ) ;
507: if (@expr1073747597 it@var2604 ==@expr1073747598 callsMap@var2600 .@expr1073747599 end (@expr1073747600 ) ) {
508: return false ; }
509:
510: for (@expr1073747601 const CTU ::@expr5764 FileInfo ::@expr5764 CallBase *@expr5768 c@var2605 :@expr1073747605 it@var2604 .@expr1073747606 second@var2606 ) {
511: if (@expr1073747607 c@var2605 .@expr1073747608 callArgNr@var2607 !=@expr1073747609 callArgNr@var2597 ) {
512: continue ; }
513:
514: const CTU ::@expr5786 FileInfo ::@expr1073747611 FunctionCall * functionCall@var2608 ; functionCall@var2608 =@expr1073747612 dynamic_cast < const CTU ::@expr5764 FileInfo ::@expr5764 FunctionCall *@expr5768 > (@expr1073747616 c@var2605 ) ;
515: if (@expr1073747617 functionCall@var2608 ) {
516: if (@expr1073747618 !@expr1073747619 warning@var2603 &&@expr1073747620 functionCall@var2608 .@expr1073747621 warning@var2609 ) {
517: continue ; }
518: switch (@expr1073747622 invalidValue@var2599 ) {
519: case CTU ::@expr5786 FileInfo ::@expr5800 InvalidValueType ::@expr1073747625 null :@expr5802 ;
520: if (@expr1073747627 functionCall@var2608 .@expr5804 callValueType@var2610 !=@expr1073747629 ValueFlow ::@expr5806 Value ::@expr5807 ValueType ::@expr1073747632 INT ||@expr1073747633 functionCall@var2608 .@expr5810 callArgValue@var2611 !=@expr1073747635 0 ) {
521: continue ; }
522: break ;
523: case CTU ::@expr5786 FileInfo ::@expr5800 InvalidValueType ::@expr1073747638 uninit :@expr5802 ;
524: if (@expr1073747640 functionCall@var2608 .@expr5804 callValueType@var2610 !=@expr1073747642 ValueFlow ::@expr5806 Value ::@expr5807 ValueType ::@expr1073747645 UNINIT ) {
525: continue ; }
526: break ;
527: case CTU ::@expr5786 FileInfo ::@expr5800 InvalidValueType ::@expr1073747648 bufferOverflow :@expr5802 ;
528: if (@expr1073747650 functionCall@var2608 .@expr5804 callValueType@var2610 !=@expr1073747652 ValueFlow ::@expr5806 Value ::@expr5807 ValueType ::@expr1073747655 BUFFER_SIZE ) {
529: continue ; }
530: if (@expr1073747656 unsafeValue@var2598 <@expr1073747657 0 ||@expr1073747658 unsafeValue@var2598 >=@expr1073747659 functionCall@var2608 .@expr5810 callArgValue@var2611 ) {
531: break ; }
532: continue ;
533: }
534: path@var2601 [@expr5837 index@var2602 ] =@expr1073747662 functionCall@var2608 ;
535: return true ;
536: }
537:
538: const CTU ::@expr5786 FileInfo ::@expr1073747664 NestedCall * nestedCall@var2612 ; nestedCall@var2612 =@expr1073747665 dynamic_cast < const CTU ::@expr5764 FileInfo ::@expr5764 NestedCall *@expr5768 > (@expr1073747669 c@var2605 ) ;
539: if (@expr1073747670 !@expr1073747671 nestedCall@var2612 ) {
540: continue ; }
541:
542: if (@expr1073747672 findPath (@expr1073747673 nestedCall@var2612 .@expr1073747674 myId@var2613 , nestedCall@var2612 .@expr1073747675 myArgNr@var2614 , unsafeValue@var2598 , invalidValue@var2599 , callsMap@var2600 , path@var2601 , index@var2602 +@expr1073747676 1 , warning@var2603 ) ) {
543: path@var2601 [@expr5837 index@var2602 ] =@expr1073747678 nestedCall@var2612 ;
544: return true ;
545: }
546: }
547:
548: return false ;
549: }
550:
551: std :: list < ErrorMessage :: FileLocation > CTU :: FileInfo :: getErrorPath ( InvalidValueType invalidValue@var2615 ,
552: const CTU :: FileInfo :: UnsafeUsage & unsafeUsage@var2616 ,
553: const std :: map < std :: string , std :: list < const CTU :: FileInfo :: CallBase * > > & callsMap@var2617 ,
554: const char info@var2618 [ ] ,
555: const FunctionCall * * const functionCallPtr@var2619 ,
556: bool warning@var2620 )
557: {
558: std ::@expr1073747680 list < ErrorMessage ::@expr5857 FileLocation > locationList@var2621 ;
559:
560: const CTU ::@expr5858 FileInfo ::@expr1073747683 CallBase * path@var2622 [@expr1073747684 10 ] =@expr1073747685 {@expr1073747686 nullptr } ;
561:
562: if (@expr1073747687 !@expr1073747688 findPath (@expr1073747689 unsafeUsage@var2616 .@expr1073747690 myId@var2623 , unsafeUsage@var2616 .@expr1073747691 myArgNr@var2624 , unsafeUsage@var2616 .@expr1073747692 value@var2625 , invalidValue@var2615 , callsMap@var2617 , path@var2622 , 0 , warning@var2620 ) ) {
563: return locationList@var2621 ; }
564:
565: const std ::@expr5857 string value1@var2626 =@expr1073747694 (@expr1073747695 invalidValue@var2615 ==@expr1073747696 InvalidValueType ::@expr1073747697 null@expr1073747679 ) ?@expr1073747698 "null" :@expr1073747699 "uninitialized" ;
566:
567: for (@expr1073747700 int index@var2627 =@expr1073747701 9 ; index@var2627 >=@expr1073747702 0 ; index@var2627 --@expr1073747703 ) {
568: if (@expr1073747704 !@expr1073747705 path@var2622 [@expr5882 index@var2627 ] ) {
569: continue ; }
570:
571: const CTU ::@expr5858 FileInfo ::@expr1073747708 FunctionCall * functionCall@var2628 ; functionCall@var2628 =@expr1073747709 dynamic_cast < const CTU ::@expr5857 FileInfo ::@expr5857 FunctionCall *@expr1073747712 > (@expr1073747713 path@var2622 [@expr5882 index@var2627 ] ) ;
572:
573: if (@expr1073747715 functionCall@var2628 ) {
574: if (@expr1073747716 functionCallPtr@var2619 ) {
575: *@expr1073747717 functionCallPtr@var2619 =@expr1073747718 functionCall@var2628 ; }
576: std ::@expr1073747719 copy (@expr1073747720 functionCall@var2628 .@expr5897 callValuePath@var2629 .@expr1073747722 cbegin (@expr1073747723 ) , functionCall@var2628 .@expr5897 callValuePath@var2629 .@expr1073747725 cend (@expr1073747726 ) , std ::@expr1073747727 back_inserter (@expr1073747728 locationList@var2621 ) ) ;
577: }
578:
579: ErrorMessage ::@expr1073747729 FileLocation fileLoc@var2630 (@expr1073747730 path@var2622 [@expr5882 index@var2627 ] .@expr5908 location@var2664 .@expr1073747733 fileName@var2665 , path@var2622 [@expr5882 index@var2627 ] .@expr5908 location@var2664 .@expr1073747736 lineNumber@var2666 , path@var2622 [@expr5882 index@var2627 ] .@expr5908 location@var2664 .@expr1073747739 column@var2667 ) ;
580: fileLoc@var2630 .@expr1073747740 setinfo (@expr1073747741 "Calling function " +@expr1073747742 path@var2622 [@expr5882 index@var2627 ] .@expr1073747744 callFunctionName@var2668 +@expr1073747745 ", " +@expr1073747746 MathLib ::@expr1073747747 toString (@expr1073747748 path@var2622 [@expr5882 index@var2627 ] .@expr5926 callArgNr@var2669 ) +@expr1073747751 getOrdinalText (@expr1073747752 path@var2622 [@expr5882 index@var2627 ] .@expr5926 callArgNr@var2669 ) +@expr1073747755 " argument is " +@expr1073747756 value1@var2626 ) ;
581: locationList@var2621 .@expr5933 push_back (@expr1073747758 fileLoc@var2630 ) ;
582: }
583:
584: ErrorMessage ::@expr1073747759 FileLocation fileLoc2@var2631 (@expr1073747760 unsafeUsage@var2616 .@expr5937 location@var2632 .@expr1073747762 fileName@var2633 , unsafeUsage@var2616 .@expr5937 location@var2632 .@expr1073747764 lineNumber@var2634 , unsafeUsage@var2616 .@expr5937 location@var2632 .@expr1073747766 column@var2635 ) ;
585: fileLoc2@var2631 .@expr1073747767 setinfo (@expr1073747768 replaceStr (@expr1073747769 info@var2618 , "ARG" , unsafeUsage@var2616 .@expr1073747770 myArgumentName@var2636 ) ) ;
586: locationList@var2621 .@expr5933 push_back (@expr1073747772 fileLoc2@var2631 ) ;
587:
588: return locationList@var2621 ;
589: }

##file cppcheck-2.8/lib/settings.h

9:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var2637 ; mFlags@var2637 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2637 ;
54: }
55: void clear ( ) {
56: mFlags@var2637 =@expr1073747773 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2637 =@expr1073747774 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2638 ) {
62: if (@expr1073747775 enabled@var2638 ) {
63: fill (@expr1073747776 ) ; }
64: else {
65: clear (@expr1073747777 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var2639 ) const {
68: return (@expr5954 mFlags@var2637 &@expr1073747779 (@expr5954 1U <<@expr1073747781 (@expr1073747782 uint32_t ) flag@var2639 ) ) !=@expr1073747783 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var2640 ) {
71: mFlags@var2637 |=@expr1073747784 (@expr1073747785 1U <<@expr1073747786 (@expr1073747787 uint32_t ) flag@var2640 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var2641 ) {
74: mFlags@var2637 &=@expr1073747788 ~@expr1073747789 (@expr1073747790 1U <<@expr1073747791 (@expr1073747792 uint32_t ) flag@var2641 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var2642 , bool enabled@var2643 ) {
77: if (@expr1073747793 enabled@var2643 ) {
78: enable (@expr1073747794 flag@var2642 ) ; }
79: else {
80: disable (@expr1073747795 flag@var2642 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var2644 ; mFlags@var2644 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2644 ;
54: }
55: void clear ( ) {
56: mFlags@var2644 =@expr1073747796 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2644 =@expr1073747797 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2645 ) {
62: if (@expr1073747798 enabled@var2645 ) {
63: fill (@expr1073747799 ) ; }
64: else {
65: clear (@expr1073747800 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var2646 ) const {
68: return (@expr5977 mFlags@var2644 &@expr1073747802 (@expr5977 1U <<@expr1073747804 (@expr1073747805 uint32_t ) flag@var2646 ) ) !=@expr1073747806 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var2647 ) {
71: mFlags@var2644 |=@expr1073747807 (@expr1073747808 1U <<@expr1073747809 (@expr1073747810 uint32_t ) flag@var2647 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var2648 ) {
74: mFlags@var2644 &=@expr1073747811 ~@expr1073747812 (@expr1073747813 1U <<@expr1073747814 (@expr1073747815 uint32_t ) flag@var2648 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var2649 , bool enabled@var2650 ) {
77: if (@expr1073747816 enabled@var2650 ) {
78: enable (@expr1073747817 flag@var2649 ) ; }
79: else {
80: disable (@expr1073747818 flag@var2649 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var2651 ; mFlags@var2651 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var2651 ;
54: }
55: void clear ( ) {
56: mFlags@var2651 =@expr1073747819 0 ;
57: }
58: void fill ( ) {
59: mFlags@var2651 =@expr1073747820 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var2652 ) {
62: if (@expr1073747821 enabled@var2652 ) {
63: fill (@expr1073747822 ) ; }
64: else {
65: clear (@expr1073747823 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var2653 ) const {
68: return (@expr6000 mFlags@var2651 &@expr1073747825 (@expr6000 1U <<@expr1073747827 (@expr1073747828 uint32_t ) flag@var2653 ) ) !=@expr1073747829 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var2654 ) {
71: mFlags@var2651 |=@expr1073747830 (@expr1073747831 1U <<@expr1073747832 (@expr1073747833 uint32_t ) flag@var2654 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var2655 ) {
74: mFlags@var2651 &=@expr1073747834 ~@expr1073747835 (@expr1073747836 1U <<@expr1073747837 (@expr1073747838 uint32_t ) flag@var2655 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var2656 , bool enabled@var2657 ) {
77: if (@expr1073747839 enabled@var2657 ) {
78: enable (@expr1073747840 flag@var2656 ) ; }
79: else {
80: disable (@expr1073747841 flag@var2656 ) ; }
81: }
82: } ;



##Value flow
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 65
  , inconclusive lifetime[SubObject]=(errorLogger)
  ( inconclusive lifetime[SubObject]=(errorLogger)
Line 68
  ! always {!<=-1,!>=2}
Line 69
  this always !0
Line 76
  = always 0
  0 always 0
Line 79
  = always 0
  0 always 0
Line 87
  = always 0
  0 always 0
Line 109
  nullptr always 0
Line 114
  nullptr always 0
Line 118
  ( always {!<=-1,!>=2}
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 135
  0U always 0
  :: always 0
  normal always 0
Line 140
  1 always 1
Line 141
  callstack always size=1
  certainty possible 0@169
Line 146
  0U always 0
  :: always 0
  normal always 0
Line 160
  ( always {!<=-1,!>=2}
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 54
  null always 0
  uninit always 1
  bufferOverflow always 2
Line 63
  { always 0
Line 64
  { always 0
Line 71
  { always 0
Line 74
  { always 0
Line 87
  { always 0
Line 92
  ( always {!<=-1,!>=2}
Line 101
  warning always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 122
  { always 0
Line 148
  ( always {!<=-1,!>=2}
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@7574,34@7830}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@29,34@30}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@29,""@30,""@31,"U"@32,"U"@33,"u"@34,"u"@35,"u8"@36,"u8"@37}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@147,34@148}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@144,34@146}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@119,128@120,64@121,32@122,16@123,8@124,4@125,2@126,1@127}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@128,128@129,64@130,32@131,16@132,8@133,4@134,2@135,1@136}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@128,4294967167@129,4294967231@130,4294967263@131,4294967279@132,4294967287@133,4294967291@134,4294967293@135,4294967294@136}
  flag {!<=-1,256@128,128@129,64@130,32@131,16@132,8@133,4@134,2@135,1@136}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@18,4@19,0@20}
  t possible {10@18,4@19,0@20}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@18,4@19,0@20}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@18,0@20}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@18,0@20}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@18}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@18}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@18}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@18}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@18}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  s possible {"&"@66,"&"@79}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@26}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@28,17179869184@39,8589934592@41,34359738368@43,4294967296@45,2147483648@47,1073741824@49,536870912@51,268435456@53}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@115,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@116}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@27,17179869184@38,8589934592@40,34359738368@42,4294967296@44,2147483648@46,1073741824@48,536870912@50,268435456@52}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@27,17179869184@38,8589934592@40,34359738368@42,4294967296@44,2147483648@46,1073741824@48,536870912@50,268435456@52}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@217,4096@220,16384@223,2048@224,1024@225,65536@226,512@227,256@228,128@229}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 550
  index_ possible 0@59
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@182,4194304@184,8388608@185,2097152@187,1048576@188,524288@189,262144@190,131072@191,65536@192}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@160,2097152@161,1048576@162,524288@163,262144@164,131072@165,65536@166,32768@167,16384@168}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@160,4292870143@161,4293918719@162,4294443007@163,4294705151@164,4294836223@165,4294901759@166,4294934527@167,4294950911@168}
  flag {!<=-1,8388608@160,2097152@161,1048576@162,524288@163,262144@164,131072@165,65536@166,32768@167,16384@168}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 40
  none always 0
Line 41
  op1 always 1
Line 42
  op2 always 2
Line 43
  op1_and_op2 always 3
Line 44
  done always 4
Line 53
  ! always {!<=-1,!>=2}
Line 57
  = always !0
  ast always !0
Line 59
  tok inconclusive symbolic=(ast)
Line 61
  c possible {2,3,1}
  == {!<=-1,!>=2,0}
  :: always 4
  done always 4
Line 63
  c {3,1,!4}
  == {!<=-1,!>=2,0}
  :: always 2
  op2 always 2
  || {!<=-1,!>=2,1}
  c {1,3,!4,!2}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 66
  t2 always !0
Line 68
  c {3,!4,2}
  == {!<=-1,!>=2,0}
  :: always 1
  op1 always 1
  || {!<=-1,!>=2,1}
  c {!4,2,3,!1}
  == {!<=-1,!>=2,0,1}
  :: always 3
  op1_and_op2 always 3
Line 71
  t1 always !0
Line 74
  ( always {!<=-1,!>=2}
Line 77
  tokens always !size=0
Line 78
  tokens always !size=0
Line 79
  true always 1
Line 82
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 92
  , always 100
  = always 100
  100 always 100
Line 94
  ( always {!<=-1,!>=2}
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 106
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 107
  ( always {!<=-1,!>=2}
Line 109
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  unknown always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 113
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 123
  ( always {!<=-1,!>=2}
Line 137
  , always 0
  = always 0
  nullptr always 0
Line 139
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 155
  cpp always {!<=-1,!>=2}
Line 157
  ( always {!<=-1,!>=2}
Line 158
  ( always {!<=-1,!>=2}
Line 179
  ( always {!<=-1,!>=2}
Line 187
  ( always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
  , always 1
  onVar always {!<=-1,!>=2}
  = always 1
  true always 1
  , always 0
  = always 0
  0 always 0
Line 198
  temporary always {!<=-1,!>=2}
  = always 1
  true always 1
Line 199
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 201
  = always 20
  20 always 20
Line 202
  , always 0
  = always 0
  nullptr always 0
Line 204
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 206
  ( always {!<=-1,!>=2}
Line 211
  ( always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
  isNot always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 224
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  followVar always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 226
  ( always {!<=-1,!>=2}
Line 228
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 230
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 0
  checkArrayAccess always {!<=-1,!>=2}
  = always 0
  false always 0
  , always 1
  checkReference always {!<=-1,!>=2}
  = always 1
  true always 1
Line 232
  ( always {!<=-1,!>=2}
Line 234
  ( always {!<=-1,!>=2}
Line 237
  ( always {!<=-1,!>=2}
  , always 0
Line 238
  = always 0
  nullptr always 0
  , always 0
Line 239
  = always 0
  nullptr always 0
  , always 0
Line 240
  functionScope always {!<=-1,!>=2}
  = always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
Line 262
  ( always {!<=-1,!>=2}
Line 272
  ( always {!<=-1,!>=2}
Line 275
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 276
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 278
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 280
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 282
  ( always {!<=-1,!>=2}
Line 286
  , always {!<=-1,!>=2}
Line 287
  cpp always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 290
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 292
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 293
  , always {!<=-1,!>=2}
  globalvar always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  , always 20
  = always 20
  20 always 20
Line 295
  ( always {!<=-1,!>=2}
Line 298
  , always {!<=-1,!>=2}
Line 299
  cpp always {!<=-1,!>=2}
  , always 20
Line 300
  = always 20
  20 always 20
Line 302
  ( always {!<=-1,!>=2}
Line 304
  , always {!<=-1,!>=2}
Line 305
  globalvar always {!<=-1,!>=2}
Line 306
  , always {!<=-1,!>=2}
Line 307
  cpp always {!<=-1,!>=2}
  , always 20
Line 308
  = always 20
  20 always 20
Line 311
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 313
  ( always {!<=-1,!>=2}
Line 336
  ( always {!<=-1,!>=2}
Line 348
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 355
  ( always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 357
  ( always {!<=-1,!>=2}
Line 359
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 370
  ( always {!<=-1,!>=2}
Line 372
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 383
  ( possible lifetime[SubObject]=(cpp)
  cpp always {!<=-1,!>=2}
  mCpp always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
  mValueFlowKnown always {!<=-1,!>=2}
  true always 1
Line 385
  ( always {!<=-1,!>=2}
Line 403
  ( always {!<=-1,!>=2}
Line 406
  known always {!<=-1,!>=2}
Line 411
  ( always {!<=-1,!>=2}
Line 413
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 415
  ( always {!<=-1,!>=2}
Line 419
  NONE always 0
  READ always 1
  WRITE always 2
  BREAK always 3
  RETURN always 4
  BAILOUT always 5
Line 420
  ( possible lifetime[SubObject]=(type)
  nullptr always 0
Line 421
  ( possible lifetime[SubObject]=(type)
Line 426
  , always {!<=-1,!>=2}
  local always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  inInnerClass always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 429
  ( always {!<=-1,!>=2}
Line 431
  mCpp always {!<=-1,!>=2}
Line 433
  Reassign always 0
  UnusedValue always 1
  ValueFlow always 2
Line 435
  mValueFlowKnown always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 41
  8 always 8
  = always "call-id"
  "call-id" always "call-id"
Line 42
  14 always 14
  = always "call-funcname"
  "call-funcname" always "call-funcname"
Line 43
  11 always 11
  = always "call-argnr"
  "call-argnr" always "call-argnr"
Line 44
  13 always 13
  = always "call-argexpr"
  "call-argexpr" always "call-argexpr"
Line 45
  18 always 18
  = always "call-argvaluetype"
  "call-argvaluetype" always "call-argvaluetype"
Line 46
  14 always 14
  = always "call-argvalue"
  "call-argvalue" always "call-argvalue"
Line 47
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 48
  5 always 5
  = always "file"
  "file" always "file"
Line 49
  5 always 5
  = always "line"
  "line" always "line"
Line 50
  4 always 4
  = always "col"
  "col" always "col"
Line 51
  5 always 5
  = always "info"
  "info" always "info"
Line 52
  6 always 6
  = always "my-id"
  "my-id" always "my-id"
Line 53
  9 always 9
  = always "my-argnr"
  "my-argnr" always "my-argnr"
Line 54
  11 always 11
  = always "my-argname"
  "my-argname" always "my-argname"
Line 55
  6 always 6
  = always "value"
  "value" always "value"
Line 57
  = always 2
  2 always 2
Line 61
  ':' always 58
  ':' always 58
Line 81
  "\n" always "\n"
Line 90
  " " always " "
  ATTR_CALL_ID {"call-id",lifetime[Object]=(ATTR_CALL_ID)}
  "=\"" always "=\""
  "\"" always "\""
Line 91
  " " always " "
  ATTR_CALL_FUNCNAME {"call-funcname",lifetime[Object]=(ATTR_CALL_FUNCNAME)}
  "=\"" always "=\""
  "\"" always "\""
Line 92
  " " always " "
  ATTR_CALL_ARGNR {"call-argnr",lifetime[Object]=(ATTR_CALL_ARGNR)}
  "=\"" always "=\""
  "\"" always "\""
Line 93
  " " always " "
  ATTR_LOC_FILENAME {"file",lifetime[Object]=(ATTR_LOC_FILENAME)}
  "=\"" always "=\""
  "\"" always "\""
Line 94
  " " always " "
  ATTR_LOC_LINENR {"line",lifetime[Object]=(ATTR_LOC_LINENR)}
  "=\"" always "=\""
  "\"" always "\""
Line 95
  " " always " "
  ATTR_LOC_COLUMN {"col",lifetime[Object]=(ATTR_LOC_COLUMN)}
  "=\"" always "=\""
  "\"" always "\""
Line 102
  "<function-call" always "<function-call"
Line 104
  " " always " "
  ATTR_CALL_ARGEXPR {"call-argexpr",lifetime[Object]=(ATTR_CALL_ARGEXPR)}
  "=\"" always "=\""
  "\"" always "\""
Line 105
  " " always " "
  ATTR_CALL_ARGVALUETYPE {"call-argvaluetype",lifetime[Object]=(ATTR_CALL_ARGVALUETYPE)}
  "=\"" always "=\""
  "\"" always "\""
Line 106
  " " always " "
  ATTR_CALL_ARGVALUE {"call-argvalue",lifetime[Object]=(ATTR_CALL_ARGVALUE)}
  "=\"" always "=\""
  "\"" always "\""
Line 107
  warning always {!<=-1,!>=2}
Line 108
  " " always " "
  ATTR_WARNING {"warning",lifetime[Object]=(ATTR_WARNING)}
  "=\"true\"" always "=\"true\""
Line 109
  ( always {!<=-1,!>=2}
Line 110
  "/>" always "/>"
Line 112
  ">\n" always ">\n"
Line 113
  callValuePath always !size=0
Line 114
  "  <path" always "  <path"
Line 115
  " " always " "
  ATTR_LOC_FILENAME {"file",lifetime[Object]=(ATTR_LOC_FILENAME)}
  "=\"" always "=\""
  "\"" always "\""
Line 116
  " " always " "
  ATTR_LOC_LINENR {"line",lifetime[Object]=(ATTR_LOC_LINENR)}
  "=\"" always "=\""
  "\"" always "\""
Line 117
  " " always " "
  ATTR_LOC_COLUMN {"col",lifetime[Object]=(ATTR_LOC_COLUMN)}
  "=\"" always "=\""
  . always !<=-1
  column always !<=-1
  "\"" always "\""
Line 118
  " " always " "
  ATTR_INFO {"info",lifetime[Object]=(ATTR_INFO)}
  "=\"" always "=\""
  "\"/>\n" always "\"/>\n"
Line 119
  "</function-call>" always "</function-call>"
Line 127
  "<function-call" always "<function-call"
Line 129
  " " always " "
  ATTR_MY_ID {"my-id",lifetime[Object]=(ATTR_MY_ID)}
  "=\"" always "=\""
  "\"" always "\""
Line 130
  " " always " "
  ATTR_MY_ARGNR {"my-argnr",lifetime[Object]=(ATTR_MY_ARGNR)}
  "=\"" always "=\""
  "\"" always "\""
Line 131
  "/>" always "/>"
Line 138
  "    <unsafe-usage" always "    <unsafe-usage"
Line 139
  " " always " "
  ATTR_MY_ID {"my-id",lifetime[Object]=(ATTR_MY_ID)}
  "=\"" always "=\""
  '\"' always 34
Line 140
  " " always " "
  ATTR_MY_ARGNR {"my-argnr",lifetime[Object]=(ATTR_MY_ARGNR)}
  "=\"" always "=\""
  '\"' always 34
Line 141
  " " always " "
  ATTR_MY_ARGNAME {"my-argname",lifetime[Object]=(ATTR_MY_ARGNAME)}
  "=\"" always "=\""
  '\"' always 34
Line 142
  " " always " "
  ATTR_LOC_FILENAME {"file",lifetime[Object]=(ATTR_LOC_FILENAME)}
  "=\"" always "=\""
  '\"' always 34
Line 143
  " " always " "
  ATTR_LOC_LINENR {"line",lifetime[Object]=(ATTR_LOC_LINENR)}
  "=\"" always "=\""
  '\"' always 34
Line 144
  " " always " "
  ATTR_LOC_COLUMN {"col",lifetime[Object]=(ATTR_LOC_COLUMN)}
  "=\"" always "=\""
  '\"' always 34
Line 145
  " " always " "
  ATTR_VALUE {"value",lifetime[Object]=(ATTR_VALUE)}
  "=\"" always "=\""
  "\"" always "\""
Line 146
  "/>\n" always "/>\n"
Line 160
  0 always 0
Line 168
  0 always 0
Line 173
  attr possible {"my-id"@105,"my-argname"@107,"file"@108,"call-argexpr"@118,"info"@125,"call-id"@126,"call-funcname"@127}
Line 174
  ! {!<=-1,!>=2,1}
  value possible 0
  && always {!<=-1,!>=2}
  error inconclusive {lifetime[Address]=(error)@105,lifetime[Address]=(error)@107,lifetime[Address]=(error)@108,lifetime[Address]=(error)@115,lifetime[Address]=(error)@118,lifetime[Address]=(error)@121,lifetime[Address]=(error)@125,lifetime[Address]=(error)@126,lifetime[Address]=(error)@127,lifetime[Address]=(error)@129}
Line 175
  * always {!<=-1,!>=2}
  error always !0
  = always 1
  true always 1
Line 176
  value possible 0
  ? possible {"",1}
  value always !0
  : always {1,""}
  "" always ""
Line 181
  = always 0
  0 always 0
Line 182
  err always {!<=-1,!>=2}
  err always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  attr possible {"my-argnr"@106,"line"@109,"col"@110,"value"@111,"call-argvaluetype"@119,"call-argvalue"@120,"call-argnr"@128}
  & {lifetime[Address]=(value),!0}
  value always 0
  != always {!<=-1,!>=2}
Line 183
  error inconclusive {lifetime[Address]=(error)@106,lifetime[Address]=(error)@109,lifetime[Address]=(error)@110,lifetime[Address]=(error)@111,lifetime[Address]=(error)@116,lifetime[Address]=(error)@119,lifetime[Address]=(error)@120,lifetime[Address]=(error)@122,lifetime[Address]=(error)@123,lifetime[Address]=(error)@128}
Line 184
  * always {!<=-1,!>=2}
  error {!0,lifetime[Address]=(error)@106,lifetime[Address]=(error)@109,lifetime[Address]=(error)@110,lifetime[Address]=(error)@111,lifetime[Address]=(error)@116,lifetime[Address]=(error)@119,lifetime[Address]=(error)@120,lifetime[Address]=(error)@122,lifetime[Address]=(error)@123}
  = always {!<=-1,!>=2}
  err always {!<=-1,!>=2}
Line 188
  ( always {!<=-1,!>=2}
Line 190
  error always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
  = always 0
  false always 0
Line 191
  ATTR_CALL_ID always "call-id"
  & {lifetime[Address]=(error),!0}
  error always 0
Line 192
  ATTR_CALL_FUNCNAME always "call-funcname"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 193
  ATTR_CALL_ARGNR always "call-argnr"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 194
  ATTR_LOC_FILENAME always "file"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 195
  ATTR_LOC_LINENR always "line"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 196
  ATTR_LOC_COLUMN always "col"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 197
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
Line 200
  ( always {!<=-1,!>=2}
Line 202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 203
  return always {!<=-1,!>=2}
  false always 0
Line 204
  error always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
  = always 0
  false always 0
Line 205
  ATTR_CALL_ARGEXPR always "call-argexpr"
  & {lifetime[Address]=(error),!0}
  error always 0
Line 206
  ATTR_CALL_ARGVALUETYPE always "call-argvaluetype"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 207
  ATTR_CALL_ARGVALUE always "call-argvalue"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 208
  ATTR_WARNING always "warning"
Line 209
  warning always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  w always !0
  "true" always "true"
  == always {!<=-1,!>=2}
  0 always 0
Line 210
  ! always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 211
  "path" always "path"
  != always {!<=-1,!>=2}
  0 always 0
Line 214
  ATTR_LOC_FILENAME always "file"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 215
  ATTR_LOC_LINENR always "line"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 216
  . always !<=-1
  column always !<=-1
  = always !<=-1
  ATTR_LOC_COLUMN always "col"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 217
  ATTR_INFO always "info"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 219
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
Line 222
  ( always {!<=-1,!>=2}
Line 224
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 225
  return always {!<=-1,!>=2}
  false always 0
Line 226
  error always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  ATTR_MY_ID always "my-id"
  & {lifetime[Address]=(error),!0}
  error always 0
Line 228
  ATTR_MY_ARGNR always "my-argnr"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 229
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
Line 235
  "function-call" always "function-call"
  == always {!<=-1,!>=2}
  0 always 0
Line 237
  functionCall always Uninit
  ( always {!<=-1,!>=2}
Line 239
  "nested-call" always "nested-call"
  == always {!<=-1,!>=2}
  0 always 0
Line 241
  ( always {!<=-1,!>=2}
Line 251
  ret possible size=0
  [ possible lifetime[Object]=(nestedCalls)
  & {lifetime[Address]=(nestedCalls),!0}
Line 253
  [ possible lifetime[Object]=(functionCalls)
  & {lifetime[Address]=(functionCalls),!0}
Line 261
  "unsafe-usage" always "unsafe-usage"
  != always {!<=-1,!>=2}
  0 always 0
Line 263
  error always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
  = always 0
  false always 0
Line 265
  ATTR_MY_ID always "my-id"
  & {lifetime[Address]=(error),!0}
  error always 0
Line 266
  ATTR_MY_ARGNR always "my-argnr"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 267
  ATTR_MY_ARGNAME always "my-argname"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 268
  ATTR_LOC_FILENAME always "file"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 269
  ATTR_LOC_LINENR always "line"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 270
  ATTR_LOC_COLUMN always "col"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 271
  ATTR_VALUE always "value"
  & {lifetime[Address]=(error),!0}
  error always {!<=-1,!>=2}
Line 273
  ! always {!<=-1,!>=2}
  error always {!<=-1,!>=2}
Line 281
  scope possible lifetime[Address]=(symbolDatabase->scopeList)@91
  argnr possible <=symbolic=(scopeFunction->argCount()-1)@91
Line 282
  ! always {!<=-1,!>=2}
  argvar possible symbolic=(tok2->variable())
  ( always {!<=-1,!>=2}
Line 283
  -1 always -1
Line 284
  != always {!<=-1,!>=2}
Line 285
  != always {!<=-1,!>=2}
Line 287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "[(,] %var% [,)]" always "[(,] %var% [,)]"
Line 289
  = always 1
  1 always 1
Line 291
  prev possible {symbolic=(tok2),0}
  && always {!<=-1,!>=2}
  prev {symbolic=(tok2),!0}
  != always {!<=-1,!>=2}
  "(" always "("
Line 292
  ( always {!<=-1,!>=2}
  prev always !0
  "]|)" always "]|)"
Line 293
  prev always !0
Line 294
  prev always !0
  == always {!<=-1,!>=2}
  "," always ","
Line 298
  ! always {!<=-1,!>=2}
  prev possible symbolic=(tok2)
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  prev always !0
  "%name% (" always "%name% ("
Line 300
  ! always {!<=-1,!>=2}
  prev always !0
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  prev always !0
  ( always !0
Line 302
  prev always !0
Line 305
  -1 always -1
Line 316
  symbolDatabase always symbolic=(tokenizer->getSymbolDatabase())
Line 317
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 319
  = always !0
  . always !0
Line 322
  != always {!<=-1,!>=2}
Line 323
  != always {!<=-1,!>=2}
  "(" always "("
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 325
  ( always !0
Line 326
  ! always {!<=-1,!>=2}
  tokFunction always symbolic=(tok->astOperand1()->function())
Line 329
  = always 0
  0 always 0
  argnr possible 0
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 331
  ! always {!<=-1,!>=2}
  argtok always symbolic=(args[argnr])
Line 333
  argtok {symbolic=(args[argnr]),!0}
Line 334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 337
  ( always {!<=-1,!>=2}
Line 344
  1 always 1
Line 347
  . always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 352
  . always !<=-1
  column always !<=-1
  = always !<=-1
Line 359
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
  && always {!<=-1,!>=2}
  0 always 0
  > always {!<=-1,!>=2}
  1 always 1
Line 361
  = always 7
  :: always 7
  BUFFER_SIZE always 7
Line 365
  1 always 1
Line 367
  ( always !0
  0 always 0
Line 368
  . always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
  = always 0
  false always 0
Line 372
  ( always {!<=-1,!>=2}
  "&" always "&"
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 374
  = always 7
  :: always 7
  BUFFER_SIZE always 7
Line 378
  1 always 1
Line 380
  ( always !0
Line 381
  . always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "&" always "&"
Line 387
  nullptr always 0
Line 389
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  argtok always !0
  || always {!<=-1,!>=2}
  argtok always !0
  ( always !0
  != always {!<=-1,!>=2}
  0 always 0
Line 390
  nullptr always 0
Line 391
  argtok always !0
Line 393
  = possible {lifetime[Lambda]=(tokFunction),lifetime[Lambda]=(argnr)}
  [ possible {lifetime[Lambda]=(tokFunction),lifetime[Lambda]=(argnr)}
Line 395
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  argvar always !0
  || always {!<=-1,!>=2}
  argvar always !0
  ( always !0
  == always {!<=-1,!>=2}
  :: always 0
  None always 0
Line 396
  nullptr always 0
Line 400
  = possible 1
  ? possible 1
  addr always !0
  : always 1
  isReferenceArg possible {lifetime[Lambda]=(tokFunction),lifetime[Lambda]=(argnr)}
Line 401
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  argtok always !0
  ( always !<=-1
  != always {!<=-1,!>=2}
  1U always 1
Line 404
  argtok always !0
  ( always size=1
Line 405
  v always symbolic=(argtok->values().front())
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  v always symbolic=(argtok->values().front())
  ( always {!<=-1,!>=2}
Line 407
  = always 4
  :: always 4
  UNINIT always 4
Line 411
  1 always 1
Line 412
  = always 0
  0 always 0
Line 413
  argtok always !0
Line 414
  . always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
  = always 0
  false always 0
Line 422
  = always 0
  0 always 0
  argnr possible 0
  < always {!<=-1,!>=2}
  scopeFunction possible symbolic=(scope.function)
  ( always !<=-1
Line 424
  & {lifetime[Address]=(symbolDatabase->scopeList),!0}
  argnr {<=symbolic=(scopeFunction->argCount()-1),!>=symbolic=(scopeFunction->argCount())}
  & {lifetime[Address]=(tok),!0,Uninit*}
  tok always Uninit
Line 425
  > always {!<=-1,!>=2}
  0 always 0
Line 427
  argnr always !>=symbolic=(scopeFunction->argCount())
  1 always 1
Line 428
  = {>=1,!<=0}
  argnr2 {>=1,!<=0}
Line 437
  ( always {!<=-1,!>=2}
  * always {!<=-1,!>=2}
Line 440
  scope possible lifetime[Address]=(symbolDatabase->scopeList)@22
  argnr possible <=symbolic=(function->argCount()-1)@22
Line 441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 443
  != always {!<=-1,!>=2}
Line 444
  ( always {!<=-1,!>=2}
  ")|else {" always ")|else {"
Line 445
  1 always 1
Line 446
  "return|throw" always "return|throw"
Line 448
  = always 0
  0 always 0
Line 450
  ( always !0
Line 451
  ( always {!<=-1,!>=2}
  indirect possible {symbolic=(argvar->valueType()->pointer),0}
  false always 0
  ( always {!<=-1,!>=2}
Line 454
  ( always {!<=-1,!>=2}
  "%oror%|&&|?" always "%oror%|&&|?"
Line 458
  != always {!<=-1,!>=2}
Line 460
  = always 0
  0 always 0
Line 461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(value),!0}
  value always 0
Line 464
  ret always !size=0
Line 469
  ( always {!<=-1,!>=2}
  * always {!<=-1,!>=2}
Line 476
  symbolDatabase always symbolic=(tokenizer->getSymbolDatabase())
Line 477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 479
  = always !0
  . always !0
Line 482
  = always 0
  0 always 0
  argnr possible 0
  < always {!<=-1,!>=2}
  function {symbolic=(scope.function),!0}
  ( always !<=-1
Line 483
  & {lifetime[Address]=(symbolDatabase->scopeList),!0}
  argnr {<=symbolic=(function->argCount()-1),!>=symbolic=(function->argCount())}
Line 486
  function always !0
  argnr {<=symbolic=(function->argCount()-1),!>=symbolic=(function->argCount())}
  1 always 1
Line 494
  ( always {!<=-1,!>=2}
Line 499
  10 always 10
Line 500
  , always {!<=-1,!>=2}
Line 501
  warning always {!<=-1,!>=2}
Line 503
  index possible {>=10,<=9,0@13}
  >= always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  index {!>=symbolic=(CTU::maxCtuDepth),<=symbolic=(CTU::maxCtuDepth-1),0@13}
  >= {!<=-1,!>=2,0}
  10 always 10
Line 504
  return always {!<=-1,!>=2}
  false always 0
Line 506
  :: possible {symbolic=(callsMap.end()),end=0}
  it possible {symbolic=(callsMap.end()),end=0}
  = possible lifetime[Iterator]=(callsMap)
  ( possible lifetime[Iterator]=(callsMap)
Line 507
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(callsMap),end=0}
Line 508
  return always {!<=-1,!>=2}
  false always 0
Line 510
  it always {!symbolic=(callsMap.end()),!end=0}
Line 511
  != always {!<=-1,!>=2}
Line 515
  functionCall always symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(c))
Line 516
  ! always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  functionCall {symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(c)),!0}
  . always {!<=-1,!>=2}
  warning always {!<=-1,!>=2}
Line 519
  :: always 0
  null always 0
Line 520
  != always {!<=-1,!>=2}
  :: always 0
  INT always 0
  || always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  0 always 0
Line 523
  :: always 1
  uninit always 1
Line 524
  != always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 527
  :: always 2
  bufferOverflow always 2
Line 528
  != always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 530
  unsafeValue possible {>=symbolic=(functionCall->callArgValue),<=symbolic=(functionCall->callArgValue-1)}
  < always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  unsafeValue {!<=-1,>=0}
  >= always {!<=-1,!>=2}
Line 535
  return always {!<=-1,!>=2}
  true always 1
Line 539
  ! always {!<=-1,!>=2}
  nestedCall always symbolic=(dynamic_cast<const CTU::FileInfo::NestedCall*>(c))
Line 542
  ( always {!<=-1,!>=2}
  nestedCall {symbolic=(dynamic_cast<const CTU::FileInfo::NestedCall*>(c)),!0}
  nestedCall {symbolic=(dynamic_cast<const CTU::FileInfo::NestedCall*>(c)),!0}
  1 always 1
  warning always {!<=-1,!>=2}
Line 543
  = {symbolic=(dynamic_cast<const CTU::FileInfo::NestedCall*>(c)),!0}
  nestedCall {symbolic=(dynamic_cast<const CTU::FileInfo::NestedCall*>(c)),!0}
Line 544
  return always {!<=-1,!>=2}
  true always 1
Line 548
  return always {!<=-1,!>=2}
  false always 0
Line 556
  warning always {!<=-1,!>=2}
Line 560
  10 always 10
  nullptr always 0
Line 562
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  0 always 0
  warning always {!<=-1,!>=2}
Line 565
  = possible {"null","uninitialized"}
  == always {!<=-1,!>=2}
  ? possible {"null","uninitialized"}
  "null" always "null"
  : always "uninitialized"
  "uninitialized" always "uninitialized"
Line 567
  = always 9
  9 always 9
  index possible 9
  >= {!<=-1,!>=2,1}
  0 always 0
Line 568
  ! always {!<=-1,!>=2}
  path possible lifetime[Object]=(path)
  index {9,>=0,!<=-1}
Line 571
  path possible lifetime[Object]=(path)
  [ always !0
Line 573
  functionCall always symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(path[index]))
Line 575
  functionCallPtr always !0
  = {symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(path[index])),!0}
  functionCall {symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(path[index])),!0}
Line 576
  ( possible lifetime[Object]=(locationList)
  functionCall {symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(path[index])),symbolic=(*functionCallPtr),!0}
  ( {lifetime[Iterator]=(functionCall->callValuePath),start=0}
  functionCall {symbolic=(dynamic_cast<const CTU::FileInfo::FunctionCall*>(path[index])),symbolic=(*functionCallPtr),!0}
  ( {lifetime[Iterator]=(functionCall->callValuePath),end=0}
  ( possible lifetime[Object]=(locationList)
Line 579
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
Line 580
  "Calling function " always "Calling function "
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
  ", " always ", "
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
  path possible lifetime[Object]=(path)
  [ possible lifetime[Lambda]=(mFlags)
  " argument is " always " argument is "
Line 585
  "ARG" always "ARG"
Line 588
  locationList always !size=0
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
