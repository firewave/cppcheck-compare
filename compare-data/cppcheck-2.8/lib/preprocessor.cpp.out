

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/preprocessor.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37:
|
46:
47: class Directive {
48: public:
49:
50: std :: string file@var2 ;
51:
52:
53: unsigned int linenr@var3 ;
54:
55:
56: std :: string str@var4 ;
57:
58:
59: Directive ( const std :: string & _file@var5 , const int _linenr@var6 , const std :: string & _str@var7 ) ;
60: } ;
61:
|
69:
70: class Preprocessor {
71: public:
72:
|
75:
76: enum HeaderTypes {
77: NoHeader = 0 ,
78: UserHeader ,
79: SystemHeader
80: } ;
81:
82:
83: static char macroChar@var8 ;
84:
85: explicit Preprocessor ( Settings & settings@var9 , ErrorLogger * errorLogger@var10 = nullptr ) ;
86: virtual ~ Preprocessor ( ) ;
87:
88: static std :: atomic < bool > missingIncludeFlag@var11 ;
89: static std :: atomic < bool > missingSystemIncludeFlag@var12 ;
90:
91: void inlineSuppressions ( const simplecpp :: TokenList & tokens@var13 ) ;
92:
93: void setDirectives ( const simplecpp :: TokenList & tokens@var14 ) ;
94: void setDirectives ( const std :: list < Directive > & directives@var15 ) {
95: mDirectives@var67 =@expr1073743195 directives@var15 ;
96: }
97:
98:
99: const std :: list < Directive > & getDirectives ( ) const {
100: return mDirectives@var67 ;
101: }
102:
103: std :: set < std :: string > getConfigs ( const simplecpp :: TokenList & tokens@var16 ) const ;
104:
105: void handleErrors ( const simplecpp :: OutputList & outputList@var17 , bool throwError@var18 ) ;
106:
107: bool loadFiles ( const simplecpp :: TokenList & rawtokens@var19 , std :: vector < std :: string > & files@var20 ) ;
108:
109: void removeComments ( ) ;
110:
111: void setPlatformInfo ( simplecpp :: TokenList * tokens@var21 ) const ;
112:
|
123:
124: void preprocess ( std :: istream & istr@var22 , std :: map < std :: string , std :: string > & result@var23 , const std :: string & filename@var24 , const std :: list < std :: string > & includePaths@var25 = std :: list < std :: string > ( ) ) ;
125:
|
142:
143: void preprocess ( std :: istream & srcCodeStream@var26 , std :: string & processedFile@var27 , std :: list < std :: string > & resultConfigurations@var28 , const std :: string & filename@var29 , const std :: list < std :: string > & includePaths@var30 ) ;
144:
145: simplecpp :: TokenList preprocess ( const simplecpp :: TokenList & tokens1@var31 , const std :: string & cfg@var32 , std :: vector < std :: string > & files@var33 , bool throwError@var34 = false ) ;
146:
147: std :: string getcode ( const simplecpp :: TokenList & tokens1@var35 , const std :: string & cfg@var36 , std :: vector < std :: string > & files@var37 , const bool writeLocations@var38 ) ;
148:
|
154:
155: std :: string getcode ( const std :: string & filedata@var39 , const std :: string & cfg@var40 , const std :: string & filename@var41 ) ;
156:
|
162:
163: bool validateCfg ( const std :: string & cfg@var42 , const std :: list < simplecpp :: MacroUsage > & macroUsageList@var43 ) ;
164: void validateCfgError ( const std :: string & file@var44 , const unsigned int line@var45 , const std :: string & cfg@var46 , const std :: string & macro@var47 ) ;
165:
|
172:
173: unsigned int calculateChecksum ( const simplecpp :: TokenList & tokens1@var48 , const std :: string & toolinfo@var49 ) const ;
174:
175: void simplifyPragmaAsm ( simplecpp :: TokenList * tokenList@var50 ) ;
176:
177: private:
178:
179: static void simplifyPragmaAsmPrivate ( simplecpp :: TokenList * tokenList@var51 ) ;
180:
181: public:
182:
183:
184: static void getErrorMessages ( ErrorLogger * errorLogger@var52 , const Settings * settings@var53 ) ;
185:
186: void setFile0 ( const std :: string & f@var54 ) {
187: mFile0@var69 =@expr1073743196 f@var54 ;
188: }
189:
|
192:
193: void dump ( std :: ostream & out@var55 ) const ;
194:
195: void reportOutput ( const simplecpp :: OutputList & outputList@var56 , bool showerror@var57 ) ;
196:
197: private:
198: void missingInclude ( const std :: string & filename@var58 , unsigned int linenr@var59 , const std :: string & header@var60 , HeaderTypes headerType@var61 ) ;
199: void error ( const std :: string & filename@var62 , unsigned int linenr@var63 , const std :: string & msg@var64 ) ;
200:
201: Settings & mSettings@var65 ;
202: ErrorLogger * mErrorLogger@var66 ;
203:
204:
205: std :: list < Directive > mDirectives@var67 ;
206:
207: std :: map < std :: string , simplecpp :: TokenList * > mTokenLists@var68 ;
208:
209:
210: std :: string mFile0@var69 ;
211:
212:
213: std :: list < simplecpp :: MacroUsage > mMacroUsage@var70 ;
214: std :: list < simplecpp :: IfCond > mIfCond@var71 ;
215: } ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var72 , const std :: string & errorMsg@var73 , Type type@var74 = INTERNAL ) ;
38: const Token * token@var75 ;
39: std :: string errorMessage@var76 ;
40: Type type@var77 ;
41: std :: string id@var78 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var79 ) ;
117: static SeverityType fromString ( const std :: string & severity@var80 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var81 ) : id@var82 ( cweId@var81 ) { }
122: unsigned short id@var82 ;
123: } ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var83 ;
43: std :: string errorId@var84 ;
44: void setFileName ( const std :: string & s@var85 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var89 ;
47: }
48: int lineNumber@var86 ;
49: Certainty :: CertaintyLevel certainty@var87 ;
50: std :: string symbolNames@var88 ;
51: private:
52: std :: string mFileName@var89 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var123 ( NO_LINE ) , hash@var125 ( 0 ) , thisAndNextLine@var126 ( false ) , matched@var127 ( false ) , checked@var128 ( false ) { }
57: Suppression ( const Suppression & other@var90 ) {
58: *@expr1073743197 this@expr1073743198 =@expr1073743199 other@var90 ;
59: }
60: Suppression ( const std :: string & id@var91 , const std :: string & file@var92 , int line@var93 = NO_LINE ) : errorId@var121 ( id@var91 ) , fileName@var122 ( file@var92 ) , lineNumber@var123 ( line@var93 ) , hash@var125 ( 0 ) , thisAndNextLine@var126 ( false ) , matched@var127 ( false ) , checked@var128 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var94 ) {
63: errorId@var121 =@expr1073743200 other@var94 .@expr1073743201 errorId@var95 ;
64: fileName@var122 =@expr1073743202 other@var94 .@expr1073743203 fileName@var96 ;
65: lineNumber@var123 =@expr1073743204 other@var94 .@expr1073743205 lineNumber@var97 ;
66: symbolName@var124 =@expr1073743206 other@var94 .@expr1073743207 symbolName@var98 ;
67: hash@var125 =@expr1073743208 other@var94 .@expr1073743209 hash@var99 ;
68: thisAndNextLine@var126 =@expr1073743210 other@var94 .@expr1073743211 thisAndNextLine@var100 ;
69: matched@var127 =@expr1073743212 other@var94 .@expr1073743213 matched@var101 ;
70: checked@var128 =@expr1073743214 other@var94 .@expr1073743215 checked@var102 ;
71: return *@expr1073743216 this@expr1073743217 ;
72: }
73:
74: bool operator< ( const Suppression & other@var103 ) const {
75: if (@expr1073743218 errorId@var121 !=@expr1073743219 other@var103 .@expr1396 errorId@var104 ) {
76: return errorId@var121 <@expr1073743221 other@var103 .@expr1396 errorId@var104 ; }
77: if (@expr1073743223 lineNumber@var123 <@expr1073743224 other@var103 .@expr1073743225 lineNumber@var105 ) {
78: return true ; }
79: if (@expr1073743226 fileName@var122 !=@expr1073743227 other@var103 .@expr1404 fileName@var106 ) {
80: return fileName@var122 <@expr1073743229 other@var103 .@expr1404 fileName@var106 ; }
81: if (@expr1073743231 symbolName@var124 !=@expr1073743232 other@var103 .@expr1409 symbolName@var107 ) {
82: return symbolName@var124 <@expr1073743234 other@var103 .@expr1409 symbolName@var107 ; }
83: if (@expr1073743236 hash@var125 !=@expr1073743237 other@var103 .@expr1414 hash@var108 ) {
84: return hash@var125 <@expr1073743239 other@var103 .@expr1414 hash@var108 ; }
85: if (@expr1073743241 thisAndNextLine@var126 !=@expr1073743242 other@var103 .@expr1073743243 thisAndNextLine@var109 ) {
86: return thisAndNextLine@var126 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var110 , std :: string * errorMessage@var111 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var112 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var113 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073743245 fileName@var122 .@expr1073743246 empty (@expr1073743247 ) &&@expr1073743248 fileName@var122 .@expr1073743249 find_first_of (@expr1073743250 "?*" ) ==@expr1073743251 std ::@expr1073743252 string ::@expr1073743253 npos@expr1073743244 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var114 ) const {
109: return errorId@var121 ==@expr1073743254 other@var114 .@expr1073743255 errorId@var115 &&@expr1073743256
110: fileName@var122 ==@expr1073743257 other@var114 .@expr1073743258 fileName@var116 &&@expr1073743259
111: lineNumber@var123 ==@expr1073743260 other@var114 .@expr1073743261 lineNumber@var117 &&@expr1073743262
112: symbolName@var124 ==@expr1073743263 other@var114 .@expr1073743264 symbolName@var118 &&@expr1073743265
113: hash@var125 ==@expr1073743266 other@var114 .@expr1073743267 hash@var119 &&@expr1073743268
114: thisAndNextLine@var126 ==@expr1073743269 other@var114 .@expr1073743270 thisAndNextLine@var120 ;
115: }
116:
117: std :: string errorId@var121 ;
118: std :: string fileName@var122 ;
119: int lineNumber@var123 ;
120: std :: string symbolName@var124 ;
121: unsigned long hash@var125 ;
122: bool thisAndNextLine@var126 ;
123: bool matched@var127 ;
124: bool checked@var128 ;
125:
126: enum Anonymous0 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var129 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var130 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var131 , std :: string * errorMessage@var132 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var133 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var134 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var135 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var136 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var137 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var138 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var139 , const bool unusedFunctionChecking@var140 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var141 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var142 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var143 ;
219: } ;

##file cppcheck-2.8/lib/color.h

1:
|
26:
27: enum class Color {
28: Reset = 0 ,
29: Bold = 1 ,
30: Dim = 2 ,
31: FgRed = 31 ,
32: FgGreen = 32 ,
33: FgBlue = 34 ,
34: FgMagenta = 35 ,
35: FgDefault = 39 ,
36: BgRed = 41 ,
37: BgGreen = 42 ,
38: BgBlue = 44 ,
39: BgDefault = 49
40: } ;
41: std :: ostream & operator<< ( std :: ostream & os@var144 , const Color & c@var145 ) ;
42:
43: std :: string toString ( const Color & c@var146 ) ;

##file cppcheck-2.8/lib/errorlogger.h

1:
|
39:
40: static const struct CWE CWE_USE_OF_UNINITIALIZED_VARIABLE@var147 ( 457U ) ;
41: static const struct CWE CWE_NULL_POINTER_DEREFERENCE@var148 ( 476U ) ;
42: static const struct CWE CWE_USE_OF_POTENTIALLY_DANGEROUS_FUNCTION@var149 ( 676U ) ;
43: static const struct CWE CWE_INCORRECT_CALCULATION@var150 ( 682U ) ;
44: static const struct CWE CWE_EXPIRED_POINTER_DEREFERENCE@var151 ( 825U ) ;
45:
46:
47: class Token ;
48: class TokenList ;
49:
50: namespace tinyxml2 {
51: class XMLElement ;
52: }
53:
|
59:
60: class ErrorMessage {
61: public:
62:
|
66:
67: class FileLocation {
68: public:
69: FileLocation ( )
70: : fileIndex@var167 ( 0 ) , line@var168 ( 0 ) , column@var169 ( 0 ) { }
71:
72: FileLocation ( const std :: string & file@var152 , int line@var153 , unsigned int column@var154 )
73: : fileIndex@var167 ( 0 ) , line@var168 ( line@var153 ) , column@var169 ( column@var154 ) , mOrigFileName@var171 ( file@var152 ) , mFileName@var172 ( file@var152 ) { }
74:
75: FileLocation ( const std :: string & file@var155 , const std :: string & info@var156 , int line@var157 , unsigned int column@var158 )
76: : fileIndex@var167 ( 0 ) , line@var168 ( line@var157 ) , column@var169 ( column@var158 ) , mOrigFileName@var171 ( file@var155 ) , mFileName@var172 ( file@var155 ) , mInfo@var173 ( info@var156 ) { }
77:
78: FileLocation ( const Token * tok@var159 , const TokenList * tokenList@var160 ) ;
79: FileLocation ( const Token * tok@var161 , const std :: string & info@var162 , const TokenList * tokenList@var163 ) ;
80:
|
85:
86: std :: string getfile ( bool convert@var164 = true ) const ;
87:
|
92:
93: std :: string getOrigFile ( bool convert@var165 = true ) const ;
94:
|
98:
99: void setfile ( const std :: string & file@var166 ) ;
100:
|
103:
104: std :: string stringify ( ) const ;
105:
106: unsigned int fileIndex@var167 ;
107: int line@var168 ;
108: unsigned int column@var169 ;
109:
110: std :: string getinfo ( ) const {
111: return mInfo@var173 ;
112: }
113: void setinfo ( const std :: string & i@var170 ) {
114: mInfo@var173 =@expr1073743271 i@var170 ;
115: }
116:
117: private:
118: std :: string mOrigFileName@var171 ;
119: std :: string mFileName@var172 ;
120: std :: string mInfo@var173 ;
121: } ;
122:
123: ErrorMessage ( const std :: list < FileLocation > & callStack@var174 ,
124: const std :: string & file1@var175 ,
125: Severity :: SeverityType severity@var176 ,
126: const std :: string & msg@var177 ,
127: const std :: string & id@var178 , Certainty :: CertaintyLevel certainty@var179 ) ;
128: ErrorMessage ( const std :: list < FileLocation > & callStack@var180 ,
129: const std :: string & file1@var181 ,
130: Severity :: SeverityType severity@var182 ,
131: const std :: string & msg@var183 ,
132: const std :: string & id@var184 ,
133: const CWE & cwe@var185 ,
134: Certainty :: CertaintyLevel certainty@var186 ) ;
135: ErrorMessage ( const std :: list < const Token * > & callstack@var187 ,
136: const TokenList * list@var188 ,
137: Severity :: SeverityType severity@var189 ,
138: const std :: string & id@var190 ,
139: const std :: string & msg@var191 ,
140: Certainty :: CertaintyLevel certainty@var192 ) ;
141: ErrorMessage ( const std :: list < const Token * > & callstack@var193 ,
142: const TokenList * list@var194 ,
143: Severity :: SeverityType severity@var195 ,
144: const std :: string & id@var196 ,
145: const std :: string & msg@var197 ,
146: const CWE & cwe@var198 ,
147: Certainty :: CertaintyLevel certainty@var199 ) ;
148: ErrorMessage ( const std :: list < std :: pair < const Token * , std :: string > > & errorPath@var200 ,
149: const TokenList * tokenList@var201 ,
150: Severity :: SeverityType severity@var202 ,
151: const char id@var203 [ ] ,
152: const std :: string & msg@var204 ,
153: const CWE & cwe@var205 ,
154: Certainty :: CertaintyLevel certainty@var206 ) ;
155: ErrorMessage ( ) ;
156: explicit ErrorMessage ( const tinyxml2 :: XMLElement * const errmsg@var207 ) ;
157:
|
160:
161: std :: string toXML ( ) const ;
162:
163: static std :: string getXMLHeader ( ) ;
164: static std :: string getXMLFooter ( ) ;
165:
|
174:
175: std :: string toString ( bool verbose@var208 ,
176: const std :: string & templateFormat@var209 = emptyString@var1 ,
177: const std :: string & templateLocation@var210 = emptyString@var1 ) const ;
178:
179: std :: string serialize ( ) const ;
180: bool deserialize ( const std :: string & data@var211 ) ;
181:
182: std :: list < FileLocation > callStack@var212 ;
183: std :: string id@var213 ;
184:
185:
186: std :: string file0@var214 ;
187:
188: std :: string function@var215 ;
189:
190: bool incomplete@var216 ;
191:
192: Severity :: SeverityType severity@var217 ;
193: CWE cwe@var218 ;
194: Certainty :: CertaintyLevel certainty@var219 ;
195:
196:
197: unsigned long hash@var220 ;
198:
199:
200: void setmsg ( const std :: string & msg@var221 ) ;
201:
202:
203: const std :: string & shortMessage ( ) const {
204: return mShortMessage@var223 ;
205: }
206:
207:
208: const std :: string & verboseMessage ( ) const {
209: return mVerboseMessage@var224 ;
210: }
211:
212:
213: const std :: string & symbolNames ( ) const {
214: return mSymbolNames@var225 ;
215: }
216:
217: Suppressions :: ErrorMessage toSuppressionsErrorMessage ( ) const ;
218:
219: private:
220: static std :: string fixInvalidChars ( const std :: string & raw@var222 ) ;
221:
222:
223: std :: string mShortMessage@var223 ;
224:
225:
226: std :: string mVerboseMessage@var224 ;
227:
228:
229: std :: string mSymbolNames@var225 ;
230: } ;
231:
|
235:
236: class ErrorLogger {
237: protected:
238: std :: ofstream plistFile@var226 ;
239: public:
240: ErrorLogger ( ) { }
241: virtual ~ ErrorLogger ( ) {
242: if (@expr1073743272 plistFile@var226 .@expr1073743273 is_open (@expr1073743274 ) ) {
243: plistFile@var226 <<@expr1073743275 ErrorLogger ::@expr1073743276 plistFooter (@expr1073743277 ) ;
244: plistFile@var226 .@expr1073743278 close (@expr1073743279 ) ;
245: }
246: }
247:
|
253:
254: virtual void reportOut ( const std :: string & outmsg@var227 , Color c@var228 = Color :: Reset ) = 0 ;
255:
|
261:
262: virtual void reportErr ( const ErrorMessage & msg@var229 ) = 0 ;
263:
|
269:
270: virtual void reportProgress ( const std :: string & filename@var230 , const char stage@var231 [ ] , const unsigned long value@var232 ) {
271: (@expr1073743280 void ) filename@var230 ;
272: (@expr1073743281 void ) stage@var231 ;
273: (@expr1073743282 void ) value@var232 ;
274: }
275:
|
279:
280: virtual void reportInfo ( const ErrorMessage & msg@var233 ) {
281: reportErr (@expr1073743283 msg@var233 ) ;
282: }
283:
|
288:
289: bool reportUnmatchedSuppressions ( const std :: list < Suppressions :: Suppression > & unmatched@var234 ) ;
290:
291: static std :: string callStackToString ( const std :: list < ErrorMessage :: FileLocation > & callStack@var235 ) ;
292:
|
297:
298: static std :: string toxml ( const std :: string & str@var236 ) ;
299:
300: static std :: string plistHeader ( const std :: string & version@var237 , const std :: vector < std :: string > & files@var238 ) ;
301: static std :: string plistData ( const ErrorMessage & msg@var239 ) ;
302: static const char * plistFooter ( ) {
303: return " </array>\r\n</dict>\r\n</plist>"
304:
305: ;
306: }
307: } ;
308:
309:
310: std :: string replaceStr ( std :: string s@var240 , const std :: string & from@var241 , const std :: string & to@var242 ) ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var243 ;
42: double mDoubleValue@var244 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var245 ;
44: bool mIsUnsigned@var246 ;
45:
46: void promote ( const value & v@var247 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var248 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var245 !=@expr1073743284 Type ::@expr1073743285 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var245 ==@expr1073743286 Type ::@expr1073743287 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073743288 ) ?@expr1073743289 mDoubleValue@var244 :@expr1073743290 (@expr1073743291 double ) mIntValue@var243 ;
60: }
61:
62: static value calc ( char op@var249 , const value & v1@var250 , const value & v2@var251 ) ;
63: int compare ( const value & v@var252 ) const ;
64: value add ( int v@var253 ) const ;
65: value shiftLeft ( const value & v@var254 ) const ;
66: value shiftRight ( const value & v@var255 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var256 ;
72:
73: static long long toLongNumber ( const std :: string & str@var257 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var258 ) ;
75:
76: template < class T > static std :: string toString ( T value@var259 ) {
77: std ::@expr1073743292 ostringstream result@var260 ;
78: result@var260 <<@expr1073743293 value@var259 ;
79: return result@var260 .@expr1073743294 str (@expr1073743295 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var261 ) ;
82:
83: static bool isInt ( const std :: string & str@var262 ) ;
84: static bool isFloat ( const std :: string & str@var263 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var264 ) ;
86: static bool isNegative ( const std :: string & str@var265 ) ;
87: static bool isPositive ( const std :: string & str@var266 ) ;
88: static bool isDec ( const std :: string & str@var267 ) ;
89: static bool isFloatHex ( const std :: string & str@var268 ) ;
90: static bool isIntHex ( const std :: string & str@var269 ) ;
91: static bool isOct ( const std :: string & str@var270 ) ;
92: static bool isBin ( const std :: string & str@var271 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var272 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var273 , bool supportMicrosoftExtensions@var274 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var275 , const std :: string & second@var276 ) ;
105: static std :: string subtract ( const std :: string & first@var277 , const std :: string & second@var278 ) ;
106: static std :: string multiply ( const std :: string & first@var279 , const std :: string & second@var280 ) ;
107: static std :: string divide ( const std :: string & first@var281 , const std :: string & second@var282 ) ;
108: static std :: string mod ( const std :: string & first@var283 , const std :: string & second@var284 ) ;
109: static std :: string incdec ( const std :: string & var@var285 , const std :: string & op@var286 ) ;
110: static std :: string calculate ( const std :: string & first@var287 , const std :: string & second@var288 , char action@var289 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var290 ) ;
113: static std :: string cos ( const std :: string & tok@var291 ) ;
114: static std :: string tan ( const std :: string & tok@var292 ) ;
115: static std :: string abs ( const std :: string & tok@var293 ) ;
116: static bool isEqual ( const std :: string & first@var294 , const std :: string & second@var295 ) ;
117: static bool isNotEqual ( const std :: string & first@var296 , const std :: string & second@var297 ) ;
118: static bool isGreater ( const std :: string & first@var298 , const std :: string & second@var299 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var300 , const std :: string & second@var301 ) ;
120: static bool isLess ( const std :: string & first@var302 , const std :: string & second@var303 ) ;
121: static bool isLessEqual ( const std :: string & first@var304 , const std :: string & second@var305 ) ;
122: static bool isNullValue ( const std :: string & str@var306 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var307 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var308 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var309 , std :: string :: size_type iPos@var310 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var311 , const MathLib :: value & v2@var312 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var313 , const MathLib :: value & v2@var314 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var315 , const MathLib :: value & v2@var316 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var317 , const MathLib :: value & v2@var318 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var319 , const MathLib :: value & v2@var320 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var321 , const MathLib :: value & v2@var322 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var323 , const MathLib :: value & v2@var324 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var325 , const MathLib :: value & v2@var326 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var327 , const MathLib :: value & v2@var328 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var329 , const MathLib :: value & v2@var330 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var331 ) ;

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var332 ) const {
35: return p@var332 .@expr1073743296 first@var333 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var334 ) const {
42: return p@var334 .@expr1073743297 second@var335 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var336 , const T & x@var337 )
48: {
49: return std ::@expr1073743298 find (@expr1073743299 r@var336 .@expr1073743300 begin (@expr1073743301 ) , r@var336 .@expr1478 end (@expr1479 ) , x@var337 ) !=@expr1073743304 r@var336 .@expr1478 end (@expr1479 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var338 , const T & x@var339 )
54: {
55: return std ::@expr1073743307 find (@expr1073743308 r@var338 .@expr1073743309 begin (@expr1073743310 ) , r@var338 .@expr1487 end (@expr1488 ) , x@var339 ) !=@expr1073743313 r@var338 .@expr1487 end (@expr1488 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var340 , const U & x@var341 )
60: {
61: return std ::@expr1073743316 find (@expr1073743317 r@var340 .@expr1073743318 begin (@expr1073743319 ) , r@var340 .@expr1496 end (@expr1497 ) , x@var341 ) !=@expr1073743322 r@var340 .@expr1496 end (@expr1497 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var342 ) const
68: {
69: return static_cast < unsigned long > (@expr1073743325 t@var342 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var343 , char c@var344 )
74: {
75: return !@expr1073743326 str@var343 .@expr1073743327 empty (@expr1073743328 ) &&@expr1073743329 str@var343 .@expr1073743330 back (@expr1073743331 ) ==@expr1073743332 c@var344 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var345 , const char end@var346 [ ] , unsigned long endlen@var347 )
79: {
80: return (@expr1509 str@var345 .@expr1510 size (@expr1511 ) >=@expr1073743336 endlen@var347 ) &&@expr1073743337 (@expr1509 str@var345 .@expr1073743339 compare (@expr1073743340 str@var345 .@expr1510 size (@expr1511 ) -@expr1073743343 endlen@var347 , endlen@var347 , end@var346 ) ==@expr1073743344 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var348 , const char ( & end@var349 ) [ N ] )
85: {
86: return endsWith (@expr1073743346 str@var348 , end@var349 , N@expr1073743345 -@expr1073743347 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var350 , char q@var351 , const std :: string & p@var352 )
90: {
91: if (@expr1073743348 !@expr1073743349 endsWith (@expr1073743350 str@var350 , q@var351 ) ) {
92: return false ; }
93: if (@expr1073743351 (@expr1073743352 str@var350 .@expr1073743353 length (@expr1073743354 ) +@expr1073743355 1 ) >@expr1073743356 p@var352 .@expr1073743357 length (@expr1073743358 ) &&@expr1073743359 (@expr1073743360 str@var350 .@expr1073743361 compare (@expr1073743362 0 , p@var352 .@expr1073743363 size (@expr1073743364 ) +@expr1073743365 1 , p@var352 +@expr1073743366 q@var351 ) ==@expr1073743367 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var353 , char q@var354 )
99: {
100: static const std ::@expr1544 vector < std ::@expr1544 string > suffixes@var355 {@expr1073743370 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073743371 const std ::@expr1544 string &@expr1073743373 p@var356 :@expr1073743374 suffixes@var355 ) {
102: if (@expr1073743375 isPrefixStringCharLiteral (@expr1073743376 str@var353 , q@var354 , p@var356 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var357 )
109: {
110: return isStringCharLiteral (@expr1073743377 str@var357 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var358 )
114: {
115: return isStringCharLiteral (@expr1073743378 str@var358 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var359 , char q@var360 )
119: {
120: const unsigned long quotePos@var361 =@expr1073743379 str@var359 .@expr1073743380 find (@expr1073743381 q@var360 ) ;
121: return str@var359 .@expr1073743382 substr (@expr1073743383 quotePos@var361 +@expr1073743384 1U , str@var359 .@expr1073743385 size (@expr1073743386 ) -@expr1073743387 quotePos@var361 -@expr1073743388 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var362 )
125: {
126: if (@expr1073743389 isStringLiteral (@expr1073743390 str@var362 ) ) {
127: return getStringCharLiteral (@expr1073743391 str@var362 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var363 )
132: {
133: if (@expr1073743392 isCharLiteral (@expr1073743393 str@var363 ) ) {
134: return getStringCharLiteral (@expr1073743394 str@var363 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var364 )
139: {
140: if (@expr1073743395 i@var364 ==@expr1073743396 1 ) {
141: return "st" ; }
142: if (@expr1073743397 i@var364 ==@expr1073743398 2 ) {
143: return "nd" ; }
144: if (@expr1073743399 i@var364 ==@expr1073743400 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var365 , const std :: string & rhs@var366 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var367 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var368 , const std :: string & name@var369 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var370 , const std :: string & name@var371 ) ;
156:
157: void strTolower ( std :: string & str@var372 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var373 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var374 ;
42:
43:
44: std :: string stdValue@var375 ;
45:
46:
47: Standards ( ) : c@var373 ( CLatest ) , cpp@var374 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var376 ) {
50: stdValue@var375 =@expr1073743401 str@var376 ;
51: if (@expr1073743402 str@var376 ==@expr1073743403 "c89" ||@expr1073743404 str@var376 ==@expr1073743405 "C89" ) {
52: c@var373 =@expr1073743406 C89 ;
53: return true ;
54: }
55: if (@expr1073743407 str@var376 ==@expr1073743408 "c99" ||@expr1073743409 str@var376 ==@expr1073743410 "C99" ) {
56: c@var373 =@expr1073743411 C99 ;
57: return true ;
58: }
59: if (@expr1073743412 str@var376 ==@expr1073743413 "c11" ||@expr1073743414 str@var376 ==@expr1073743415 "C11" ) {
60: c@var373 =@expr1073743416 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073743417 c@var373 ) {
67: case C89 :@expr1594 ;
68: return "c89" ;
69: case C99 :@expr1594 ;
70: return "c99" ;
71: case C11 :@expr1594 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var377 ) {
77: if (@expr1073743421 std@var377 ==@expr1073743422 "c89" ) {
78: return Standards ::@expr1073743423 C89 ;
79: }
80: if (@expr1073743424 std@var377 ==@expr1073743425 "c99" ) {
81: return Standards ::@expr1073743426 C99 ;
82: }
83: if (@expr1073743427 std@var377 ==@expr1073743428 "c11" ) {
84: return Standards ::@expr1073743429 C11 ;
85: }
86: return Standards ::@expr1073743430 CLatest ;
87: }
88: bool setCPP ( std :: string str@var378 ) {
89: stdValue@var375 =@expr1073743431 str@var378 ;
90: strTolower (@expr1073743432 str@var378 ) ;
91: cpp@var374 =@expr1073743433 getCPP (@expr1073743434 str@var378 ) ;
92: return !@expr1073743435 stdValue@var375 .@expr1073743436 empty (@expr1073743437 ) &&@expr1073743438 str@var378 ==@expr1073743439 getCPP (@expr1073743440 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073743441 cpp@var374 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var379 ) {
98: switch (@expr1073743442 std@var379 ) {
99: case CPP03 :@expr1619 ;
100: return "c++03" ;
101: case CPP11 :@expr1619 ;
102: return "c++11" ;
103: case CPP14 :@expr1619 ;
104: return "c++14" ;
105: case CPP17 :@expr1619 ;
106: return "c++17" ;
107: case CPP20 :@expr1619 ;
108: return "c++20" ;
109: case CPP23 :@expr1619 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var380 ) {
115: if (@expr1073743449 std@var380 ==@expr1073743450 "c++03" ) {
116: return Standards ::@expr1073743451 CPP03 ;
117: }
118: if (@expr1073743452 std@var380 ==@expr1073743453 "c++11" ) {
119: return Standards ::@expr1073743454 CPP11 ;
120: }
121: if (@expr1073743455 std@var380 ==@expr1073743456 "c++14" ) {
122: return Standards ::@expr1073743457 CPP14 ;
123: }
124: if (@expr1073743458 std@var380 ==@expr1073743459 "c++17" ) {
125: return Standards ::@expr1073743460 CPP17 ;
126: }
127: if (@expr1073743461 std@var380 ==@expr1073743462 "c++20" ) {
128: return Standards ::@expr1073743463 CPP20 ;
129: }
130: if (@expr1073743464 std@var380 ==@expr1073743465 "c++23" ) {
131: return Standards ::@expr1073743466 CPP23 ;
132: }
133: return Standards ::@expr1073743467 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var384 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var381 ) : errorcode@var384 ( e@var381 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var382 , T && r@var383 ) : errorcode@var384 ( e@var382 ) , reason@var385 ( r@var383 ) { }
66: ErrorCode errorcode@var384 ;
67: std :: string reason@var385 ;
68: } ;
69:
70: Error load ( const char exename@var386 [ ] , const char path@var387 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var388 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var389 [ ] , unsigned long len@var390 ) ;
75:
76: struct AllocFunc {
77: int groupId@var391 ;
78: int arg@var392 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var393 ;
81: int bufferSizeArg1@var394 ;
82: int bufferSizeArg2@var395 ;
83: int reallocArg@var396 ;
84: bool initData@var397 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var398 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var399 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var400 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var401 , int arg@var402 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var403 , int arg@var404 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var405 , int arg@var406 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var407 [ ] ) const {
107: return getAllocDealloc (@expr1073743468 mAlloc@var673 , name@var407 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var408 [ ] ) const {
112: return getAllocDealloc (@expr1073743469 mDealloc@var674 , name@var408 ) ;
113: }
114:
115:
116: int allocId ( const char name@var409 [ ] ) const {
117: const AllocFunc * af@var410 ; af@var410 =@expr1073743470 getAllocDealloc (@expr1073743471 mAlloc@var673 , name@var409 ) ;
118: return af@var410 ?@expr1073743472 af@var410 .@expr1073743473 groupId@var411 :@expr1073743474 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var412 [ ] ) const {
123: const AllocFunc * af@var413 ; af@var413 =@expr1073743475 getAllocDealloc (@expr1073743476 mDealloc@var674 , name@var412 ) ;
124: return af@var413 ?@expr1073743477 af@var413 .@expr1073743478 groupId@var414 :@expr1073743479 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var415 , int id@var416 , int arg@var417 ) {
129: mAlloc@var673 [@expr1656 functionname@var415 ] .@expr1073743481 groupId@var1389 =@expr1073743482 id@var416 ;
130: mAlloc@var673 [@expr1656 functionname@var415 ] .@expr1073743484 arg@var1390 =@expr1073743485 arg@var417 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var418 , int id@var419 , int arg@var420 ) {
134: mDealloc@var674 [@expr1662 functionname@var418 ] .@expr1073743487 groupId@var1391 =@expr1073743488 id@var419 ;
135: mDealloc@var674 [@expr1662 functionname@var418 ] .@expr1073743490 arg@var1392 =@expr1073743491 arg@var420 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var421 , int id@var422 , int arg@var423 , int reallocArg@var424 = 1 ) {
139: mRealloc@var675 [@expr1668 functionname@var421 ] .@expr1073743493 groupId@var1393 =@expr1073743494 id@var422 ;
140: mRealloc@var675 [@expr1668 functionname@var421 ] .@expr1073743496 arg@var1394 =@expr1073743497 arg@var423 ;
141: mRealloc@var675 [@expr1668 functionname@var421 ] .@expr1073743499 reallocArg@var1395 =@expr1073743500 reallocArg@var424 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var425 , bool noreturn@var426 ) {
146: mNoReturn@var676 [@expr1073743501 funcname@var425 ] =@expr1073743502 noreturn@var426 ?@expr1073743503 FalseTrueMaybe ::@expr1073743504 True :@expr1073743505 FalseTrueMaybe ::@expr1073743506 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var427 ) ;
150:
151:
152: static bool ismemory ( const int id@var428 ) {
153: return (@expr1683 (@expr1683 id@var428 >@expr1073743509 0 ) &&@expr1073743510 (@expr1683 (@expr1683 id@var428 &@expr1073743513 1 ) ==@expr1073743514 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var429 ) {
156: return (@expr1691 (@expr1691 func@var429 .@expr1693 groupId@var430 >@expr1073743518 0 ) &&@expr1073743519 (@expr1691 (@expr1691 func@var429 .@expr1693 groupId@var430 &@expr1073743523 1 ) ==@expr1073743524 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var431 ) {
161: return (@expr1701 (@expr1701 id@var431 >@expr1073743527 0 ) &&@expr1073743528 (@expr1701 (@expr1701 id@var431 &@expr1073743531 1 ) ==@expr1073743532 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var432 ) {
164: return (@expr1709 (@expr1709 func@var432 .@expr1711 groupId@var433 >@expr1073743536 0 ) &&@expr1073743537 (@expr1709 (@expr1709 func@var432 .@expr1711 groupId@var433 &@expr1073743541 1 ) ==@expr1073743542 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var434 ) const ;
168: int formatstr_argno ( const Token * ftok@var435 ) const ;
169: bool formatstr_scan ( const Token * ftok@var436 ) const ;
170: bool formatstr_secure ( const Token * ftok@var437 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var438 ;
174: int ptr2Arg@var439 ;
175: int sizeArg@var440 ;
176: int strlenArg@var441 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var442 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var443 ;
182: Standards standards@var444 ;
183: Severity :: SeverityType severity@var445 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var446 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var447 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var448 ) const ;
191: bool matchArguments ( const Token * ftok@var449 , const std :: string & functionName@var450 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var451 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var452 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var453 ) const ;
198: int returnValueContainer ( const Token * ftok@var454 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var455 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var456 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var457 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var458 , std :: string * unknownFunc@var459 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var469 ( -1 ) ,
210: size_templateArgNo@var471 ( -1 ) ,
211: arrayLike_indexOp@var472 ( false ) ,
212: stdStringLike@var473 ( false ) ,
213: stdAssociativeLike@var474 ( false ) ,
214: opLessAllowed@var475 ( true ) ,
215: hasInitializerListConstructor@var476 ( false ) ,
216: unstableErase@var477 ( false ) ,
217: unstableInsert@var478 ( false ) ,
218: view@var479 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var460 ;
248: Yield yield@var461 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var462 ;
252: int templateParameter@var463 ;
253: } ;
254: std :: string startPattern@var464 ; std :: string startPattern2@var465 ; std :: string endPattern@var466 ; std :: string itEndPattern@var467 ;
255: std :: map < std :: string , Function > functions@var468 ;
256: int type_templateArgNo@var469 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var470 ;
258: int size_templateArgNo@var471 ;
259: bool arrayLike_indexOp@var472 ;
260: bool stdStringLike@var473 ;
261: bool stdAssociativeLike@var474 ;
262: bool opLessAllowed@var475 ;
263: bool hasInitializerListConstructor@var476 ;
264: bool unstableErase@var477 ;
265: bool unstableInsert@var478 ;
266: bool view@var479 ;
267:
268: Action getAction ( const std :: string & function@var480 ) const {
269: const std ::@expr1073743543 map < std ::@expr1073743544 string , Function > ::@expr1073743545 const_iterator i@var481 =@expr1073743546 functions@var468 .@expr1073743547 find (@expr1073743548 function@var480 ) ;
270: if (@expr1073743549 i@var481 !=@expr1073743550 functions@var468 .@expr1073743551 end (@expr1073743552 ) ) {
271: return i@var481 .@expr1073743553 second@var482 .@expr1073743554 action@var483 ; }
272: return Action ::@expr1073743555 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var484 ) const {
276: const std ::@expr1073743556 map < std ::@expr1073743557 string , Function > ::@expr1073743558 const_iterator i@var485 =@expr1073743559 functions@var468 .@expr1073743560 find (@expr1073743561 function@var484 ) ;
277: if (@expr1073743562 i@var485 !=@expr1073743563 functions@var468 .@expr1073743564 end (@expr1073743565 ) ) {
278: return i@var485 .@expr1073743566 second@var486 .@expr1073743567 yield@var487 ; }
279: return Yield ::@expr1073743568 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var488 ) ;
283: static Action actionFrom ( const std :: string & actionName@var489 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var490 ;
286: const Container * detectContainer ( const Token * typeStart@var491 , bool iterator@var492 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var493 , bool * isIterator@var494 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var495 ( false ) ,
293: notnull@var496 ( false ) ,
294: notuninit@var497 ( -1 ) ,
295: formatstr@var498 ( false ) ,
296: strz@var499 ( false ) ,
297: optional@var500 ( false ) ,
298: variadic@var501 ( false ) ,
299: iteratorInfo@var507 ( ) ,
300: direction@var515 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var495 ;
303: bool notnull@var496 ;
304: int notuninit@var497 ;
305: bool formatstr@var498 ;
306: bool strz@var499 ;
307: bool optional@var500 ;
308: bool variadic@var501 ;
309: std :: string valid@var502 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var503 ( 0 ) , it@var504 ( false ) , first@var505 ( false ) , last@var506 ( false ) { }
314:
315: int container@var503 ;
316: bool it@var504 ;
317: bool first@var505 ;
318: bool last@var506 ;
319: } ;
320: IteratorInfo iteratorInfo@var507 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var508 , int a@var509 ) : type@var510 ( t@var508 ) , arg@var511 ( a@var509 ) , arg2@var512 ( 0 ) , value@var513 ( 0 ) { }
326: Type type@var510 ;
327: int arg@var511 ;
328: int arg2@var512 ;
329: long long value@var513 ;
330: } ;
331: std :: vector < MinSize > minsizes@var514 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var515 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var516 ;
344: bool use@var517 ;
345: bool leakignore@var518 ;
346: bool isconst@var519 ;
347: bool ispure@var520 ;
348: UseRetValType useretval@var521 ;
349: bool ignore@var522 ;
350: bool formatstr@var523 ;
351: bool formatstr_scan@var524 ;
352: bool formatstr_secure@var525 ;
353: Container :: Action containerAction@var526 ;
354: Container :: Yield containerYield@var527 ;
355: Function ( )
356: : use@var517 ( false ) ,
357: leakignore@var518 ( false ) ,
358: isconst@var519 ( false ) ,
359: ispure@var520 ( false ) ,
360: useretval@var521 ( UseRetValType :: NONE ) ,
361: ignore@var522 ( false ) ,
362: formatstr@var523 ( false ) ,
363: formatstr_scan@var524 ( false ) ,
364: formatstr_secure@var525 ( false ) ,
365: containerAction@var526 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var527 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var528 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var529 ;
372: bool isUse ( const std :: string & functionName@var530 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var531 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var532 , bool pure@var533 ) const ;
375: bool isFunctionConst ( const Token * ftok@var534 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var535 , int argnr@var536 ) const {
378: const ArgumentChecks * arg@var537 ; arg@var537 =@expr1073743569 getarg (@expr1073743570 ftok@var535 , argnr@var536 ) ;
379: return arg@var537 &&@expr1073743571 arg@var537 .@expr1073743572 notbool@var538 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var539 , int argnr@var540 ) const ;
383: bool isuninitargbad ( const Token * ftok@var541 , int argnr@var542 , int indirect@var543 = 0 , bool * hasIndirect@var544 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var545 , int argnr@var546 ) const {
386: const ArgumentChecks * arg@var547 ; arg@var547 =@expr1073743573 getarg (@expr1073743574 ftok@var545 , argnr@var546 ) ;
387: return arg@var547 &&@expr1073743575 arg@var547 .@expr1073743576 formatstr@var548 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var549 , int argnr@var550 ) const {
391: const ArgumentChecks * arg@var551 ; arg@var551 =@expr1073743577 getarg (@expr1073743578 ftok@var549 , argnr@var550 ) ;
392: return arg@var551 &&@expr1073743579 arg@var551 .@expr1073743580 strz@var552 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var553 , int argnr@var554 , const long long argvalue@var555 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var556 , int argnr@var557 , double argvalue@var558 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var559 , int argnr@var560 ) const {
399: const ArgumentChecks * arg@var561 ; arg@var561 =@expr1073743581 getarg (@expr1073743582 ftok@var559 , argnr@var560 ) ;
400: return arg@var561 ?@expr1073743583 arg@var561 .@expr1073743584 valid@var562 :@expr1073743585 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var563 ;
405: std :: string op1@var564 ;
406: std :: string op2@var565 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073743586 isInt (@expr1073743587 op1@var564 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var566 , int argnr@var567 ) const {
413: const ArgumentChecks * arg@var568 ; arg@var568 =@expr1073743588 getarg (@expr1073743589 ftok@var566 , argnr@var567 ) ;
414: return arg@var568 &&@expr1073743590 arg@var568 .@expr1767 iteratorInfo@var569 .@expr1073743592 it@var570 ?@expr1073743593 &@expr1073743594 arg@var568 .@expr1767 iteratorInfo@var569 :@expr1073743596 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var571 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var572 , int argnr@var573 ) const {
420: const ArgumentChecks * arg@var574 ; arg@var574 =@expr1073743597 getarg (@expr1073743598 ftok@var572 , argnr@var573 ) ;
421: return arg@var574 ?@expr1073743599 &@expr1073743600 arg@var574 .@expr1073743601 minsizes@var575 :@expr1073743602 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var576 , int argnr@var577 ) const ;
425:
426: bool markupFile ( const std :: string & path@var578 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var579 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var683 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var580 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var581 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var582 , const std :: string & token@var583 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var584 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var585 ) const ;
443: const std :: string & blockend ( const std :: string & file@var586 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var587 , const std :: string & keyword@var588 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var589 ) const {
448: return mExporters@var686 .@expr1073743603 find (@expr1073743604 prefix@var589 ) !=@expr1073743605 mExporters@var686 .@expr1073743606 end (@expr1073743607 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var590 , const std :: string & token@var591 ) const {
452: const std ::@expr1073743608 map < std ::@expr1073743609 string , ExportedFunctions > ::@expr1073743610 const_iterator it@var592 =@expr1073743611 mExporters@var686 .@expr1073743612 find (@expr1073743613 prefix@var590 ) ;
453: return (@expr1073743614 it@var592 !=@expr1073743615 mExporters@var686 .@expr1073743616 end (@expr1073743617 ) &&@expr1073743618 it@var592 .@expr1073743619 second@var593 .@expr1073743620 isPrefix (@expr1073743621 token@var591 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var594 , const std :: string & token@var595 ) const {
457: const std ::@expr1073743622 map < std ::@expr1073743623 string , ExportedFunctions > ::@expr1073743624 const_iterator it@var596 =@expr1073743625 mExporters@var686 .@expr1073743626 find (@expr1073743627 prefix@var594 ) ;
458: return (@expr1073743628 it@var596 !=@expr1073743629 mExporters@var686 .@expr1073743630 end (@expr1073743631 ) &&@expr1073743632 it@var596 .@expr1073743633 second@var597 .@expr1073743634 isSuffix (@expr1073743635 token@var595 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var598 , const std :: string & importer@var599 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var600 , Container :: Yield yield@var601 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var602 , Container :: Action action@var603 ) const ;
465:
466: bool isreflection ( const std :: string & token@var604 ) const {
467: return mReflection@var688 .@expr1073743636 find (@expr1073743637 token@var604 ) !=@expr1073743638 mReflection@var688 .@expr1073743639 end (@expr1073743640 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var605 ) const {
471: const std ::@expr1073743641 map < std ::@expr1073743642 string , int > ::@expr1073743643 const_iterator it@var606 =@expr1073743644 mReflection@var688 .@expr1073743645 find (@expr1073743646 token@var605 ) ;
472: if (@expr1073743647 it@var606 !=@expr1073743648 mReflection@var688 .@expr1073743649 end (@expr1073743650 ) ) {
473: return it@var606 .@expr1073743651 second@var607 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var608 ;
478:
479: struct SmartPointer {
480: std :: string name@var609 ; name@var609 = "" ;
481: bool unique@var610 ; unique@var610 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var611 ;
485: bool isSmartPointer ( const Token * tok@var612 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var613 ) const ;
487:
488: struct PodType {
489: unsigned int size@var614 ;
490: char sign@var615 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var616 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var617 ) const {
494: const std ::@expr1073743652 unordered_map < std ::@expr1073743653 string , PodType > ::@expr1073743654 const_iterator it@var618 =@expr1073743655 mPodTypes@var689 .@expr1073743656 find (@expr1073743657 name@var617 ) ;
495: return (@expr1834 it@var618 !=@expr1073743659 mPodTypes@var689 .@expr1073743660 end (@expr1073743661 ) ) ?@expr1073743662 &@expr1073743663 (@expr1834 it@var618 .@expr1073743665 second@var619 ) :@expr1073743666 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var630 ( false )
501: , mUnsigned@var631 ( false )
502: , mLong@var632 ( false )
503: , mPointer@var633 ( false )
504: , mPtrPtr@var634 ( false )
505: , mConstPtr@var635 ( false ) { }
506: bool operator== ( const PlatformType & type@var620 ) const {
507: return (@expr1073743667 mSigned@var630 ==@expr1073743668 type@var620 .@expr1073743669 mSigned@var621 &&@expr1073743670
508: mUnsigned@var631 ==@expr1073743671 type@var620 .@expr1073743672 mUnsigned@var622 &&@expr1073743673
509: mLong@var632 ==@expr1073743674 type@var620 .@expr1073743675 mLong@var623 &&@expr1073743676
510: mPointer@var633 ==@expr1073743677 type@var620 .@expr1073743678 mPointer@var624 &&@expr1073743679
511: mPtrPtr@var634 ==@expr1073743680 type@var620 .@expr1073743681 mPtrPtr@var625 &&@expr1073743682
512: mConstPtr@var635 ==@expr1073743683 type@var620 .@expr1073743684 mConstPtr@var626 &&@expr1073743685
513: mType@var629 ==@expr1073743686 type@var620 .@expr1073743687 mType@var627 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var628 ) const {
516: return !@expr1073743688 (@expr1073743689 *@expr1073743690 this@expr1073743691 ==@expr1073743692 type@var628 ) ;
517: }
518: std :: string mType@var629 ;
519: bool mSigned@var630 ;
520: bool mUnsigned@var631 ;
521: bool mLong@var632 ;
522: bool mPointer@var633 ;
523: bool mPtrPtr@var634 ;
524: bool mConstPtr@var635 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var636 ) const {
529: const std ::@expr1073743693 map < std ::@expr1073743694 string , PlatformType > ::@expr1073743695 const_iterator it@var637 =@expr1073743696 mPlatformTypes@var639 .@expr1073743697 find (@expr1073743698 name@var636 ) ;
530: return (@expr1875 it@var637 !=@expr1073743700 mPlatformTypes@var639 .@expr1073743701 end (@expr1073743702 ) ) ?@expr1073743703 &@expr1073743704 (@expr1875 it@var637 .@expr1073743706 second@var638 ) :@expr1073743707 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var639 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var640 , const std :: string & platform@var641 ) const {
536: const std ::@expr1073743708 map < std ::@expr1885 string , Platform > ::@expr1073743710 const_iterator it@var642 =@expr1073743711 mPlatforms@var691 .@expr1073743712 find (@expr1073743713 platform@var641 ) ;
537: if (@expr1073743714 it@var642 !=@expr1073743715 mPlatforms@var691 .@expr1073743716 end (@expr1073743717 ) ) {
538: const PlatformType * const type@var643 ; type@var643 =@expr1073743718 it@var642 .@expr1073743719 second@var644 .@expr1073743720 platform_type (@expr1073743721 name@var640 ) ;
539: if (@expr1073743722 type@var643 ) {
540: return type@var643 ; }
541: }
542:
543: const std ::@expr1073743723 map < std ::@expr1885 string , PlatformType > ::@expr1073743725 const_iterator it2@var645 =@expr1073743726 mPlatformTypes@var690 .@expr1073743727 find (@expr1073743728 name@var640 ) ;
544: return (@expr1905 it2@var645 !=@expr1073743730 mPlatformTypes@var690 .@expr1073743731 end (@expr1073743732 ) ) ?@expr1073743733 &@expr1073743734 (@expr1905 it2@var645 .@expr1073743736 second@var646 ) :@expr1073743737 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var647 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var648 , Library :: Container :: Yield y@var649 , const std :: string & fallback@var650 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var651 , const std :: string & typeName@var652 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var653 , const std :: string & name@var654 , std :: set < std :: string > & unknown_elements@var655 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var656 ) {
565: mPrefixes@var660 .@expr1073743738 insert (@expr1073743739 prefix@var656 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var657 ) {
568: mSuffixes@var661 .@expr1073743740 insert (@expr1073743741 suffix@var657 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var658 ) const {
571: return (@expr1073743742 mPrefixes@var660 .@expr1073743743 find (@expr1073743744 prefix@var658 ) !=@expr1073743745 mPrefixes@var660 .@expr1073743746 end (@expr1073743747 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var659 ) const {
574: return (@expr1073743748 mSuffixes@var661 .@expr1073743749 find (@expr1073743750 suffix@var659 ) !=@expr1073743751 mSuffixes@var661 .@expr1073743752 end (@expr1073743753 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var660 ;
579: std :: set < std :: string > mSuffixes@var661 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var669 ( 0 ) { }
584:
585: void setStart ( const char * s@var662 ) {
586: mStart@var667 =@expr1073743754 s@var662 ;
587: }
588: void setEnd ( const char * e@var663 ) {
589: mEnd@var668 =@expr1073743755 e@var663 ;
590: }
591: void setOffset ( const int o@var664 ) {
592: mOffset@var669 =@expr1073743756 o@var664 ;
593: }
594: void addBlock ( const char * blockName@var665 ) {
595: mBlocks@var670 .@expr1073743757 insert (@expr1073743758 blockName@var665 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var667 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var668 ;
602: }
603: int offset ( ) const {
604: return mOffset@var669 ;
605: }
606: bool isBlock ( const std :: string & blockName@var666 ) const {
607: return mBlocks@var670 .@expr1073743759 find (@expr1073743760 blockName@var666 ) !=@expr1073743761 mBlocks@var670 .@expr1073743762 end (@expr1073743763 ) ;
608: }
609:
610: private:
611: std :: string mStart@var667 ;
612: std :: string mEnd@var668 ;
613: int mOffset@var669 ;
614: std :: set < std :: string > mBlocks@var670 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var671 ;
618: std :: set < std :: string > mFiles@var672 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var673 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var674 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var675 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var676 ;
623: std :: map < std :: string , std :: string > mReturnValue@var677 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var678 ;
625: std :: map < std :: string , int > mReturnValueContainer@var679 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var680 ;
627: std :: map < std :: string , bool > mReportErrors@var681 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var682 ;
629: std :: set < std :: string > mMarkupExtensions@var683 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var684 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var685 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var686 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var687 ;
634: std :: map < std :: string , int > mReflection@var688 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var689 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var690 ;
637: std :: map < std :: string , Platform > mPlatforms@var691 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var692 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var693 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var694 , int argnr@var695 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var696 , bool * error@var697 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var698 , const std :: string & name@var699 ) {
646: const std ::@expr1073743764 map < std ::@expr1073743765 string , AllocFunc > ::@expr1073743766 const_iterator it@var700 =@expr1073743767 data@var698 .@expr1073743768 find (@expr1073743769 name@var699 ) ;
647: return (@expr1073743770 it@var700 ==@expr1073743771 data@var698 .@expr1073743772 end (@expr1073743773 ) ) ?@expr1073743774 nullptr :@expr1073743775 &@expr1073743776 it@var700 .@expr1073743777 second@var701 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var702 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var703 ,
654: const Settings * settings@var704 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var705 = nullptr ) ;

##file cppcheck-2.8/lib/path.h

1:
|
39:
40: class Path {
41: public:
42:
|
46:
47: static std :: string toNativeSeparators ( std :: string path@var706 ) ;
48:
|
53:
54: static std :: string fromNativeSeparators ( std :: string path@var707 ) ;
55:
|
60:
61: static std :: string simplifyPath ( std :: string originalPath@var708 ) ;
62:
|
67:
68: static std :: string getPathFromFilename ( const std :: string & filename@var709 ) ;
69:
|
76:
77: static bool sameFileName ( const std :: string & fname1@var710 , const std :: string & fname2@var711 ) ;
78:
|
83:
84: static std :: string removeQuotationMarks ( std :: string path@var712 ) ;
85:
|
90:
91: static std :: string getFilenameExtension ( const std :: string & path@var713 ) ;
92:
|
97:
98: static std :: string getFilenameExtensionInLowerCase ( const std :: string & path@var714 ) ;
99:
|
103:
104: static std :: string getCurrentPath ( ) ;
105:
|
110:
111: static bool isAbsolute ( const std :: string & path@var715 ) ;
112:
|
118:
119: static std :: string getRelativePath ( const std :: string & absolutePath@var716 , const std :: vector < std :: string > & basePaths@var717 ) ;
120:
|
125:
126: static std :: string getAbsoluteFilePath ( const std :: string & filePath@var718 ) ;
127:
|
133:
134: static bool acceptFile ( const std :: string & filename@var719 ) {
135: const std ::@expr1073743778 set < std ::@expr1073743779 string > extra@var720 ;
136: return acceptFile (@expr1073743780 filename@var719 , extra@var720 ) ;
137: }
138:
|
145:
146: static bool acceptFile ( const std :: string & path@var721 , const std :: set < std :: string > & extra@var722 ) ;
147:
|
152:
153: static bool isC ( const std :: string & path@var723 ) ;
154:
|
159:
160: static bool isCPP ( const std :: string & path@var724 ) ;
161:
|
166:
167: static bool isHeader ( const std :: string & path@var725 ) ;
168:
|
173:
174: static std :: string stripDirectoryPart ( const std :: string & file@var726 ) ;
175:
|
180:
181: static bool fileExists ( const std :: string & file@var727 ) ;
182: } ;

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var728 ) {
44: if (@expr1073743781 bit@var728 >=@expr1073743782 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073743783 (@expr1073743784 1LL <<@expr1073743785 (@expr1073743786 bit@var728 -@expr1073743787 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var729 ) {
50: if (@expr1073743788 bit@var729 >=@expr1073743789 64 ) {
51: return (@expr1966 ~@expr1073743791 0ULL ) >>@expr1073743792 1 ; }
52: return (@expr1966 1LL <<@expr1073743794 (@expr1966 bit@var729 -@expr1073743796 1 ) ) -@expr1073743797 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var730 ) const {
59: return value@var730 >=@expr1073743798 min_value (@expr1073743799 int_bit@var740 ) &&@expr1073743800 value@var730 <=@expr1073743801 max_value (@expr1073743802 int_bit@var740 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var731 ) const {
63: unsigned long long intMax@var732 ; intMax@var732 =@expr1073743803 max_value (@expr1073743804 int_bit@var740 ) ;
64: return value@var731 <=@expr1073743805 intMax@var732 ;
65: }
66:
67: bool isLongValue ( long long value@var733 ) const {
68: return value@var733 >=@expr1073743806 min_value (@expr1073743807 long_bit@var741 ) &&@expr1073743808 value@var733 <=@expr1073743809 max_value (@expr1073743810 long_bit@var741 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var734 ) const {
72: unsigned long long longMax@var735 ; longMax@var735 =@expr1073743811 max_value (@expr1073743812 long_bit@var741 ) ;
73: return value@var734 <=@expr1073743813 longMax@var735 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var736 ) const {
77: unsigned long long longLongMax@var737 ; longLongMax@var737 =@expr1073743814 max_value (@expr1073743815 long_long_bit@var742 ) ;
78: return value@var736 <=@expr1073743816 longLongMax@var737 ;
79: }
80:
81: int char_bit@var738 ;
82: int short_bit@var739 ;
83: int int_bit@var740 ;
84: int long_bit@var741 ;
85: int long_long_bit@var742 ;
86:
87:
88: int sizeof_bool@var743 ;
89: int sizeof_short@var744 ;
90: int sizeof_int@var745 ;
91: int sizeof_long@var746 ;
92: int sizeof_long_long@var747 ;
93: int sizeof_float@var748 ;
94: int sizeof_double@var749 ;
95: int sizeof_long_double@var750 ;
96: int sizeof_wchar_t@var751 ;
97: int sizeof_size_t@var752 ;
98: int sizeof_pointer@var753 ;
99:
100: char defaultSign@var754 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var755 ;
115:
116:
117: bool platform ( PlatformType type@var756 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var757 [ ] , const std :: string & filename@var758 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var759 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var755 ==@expr1073743817 Win32A ||@expr1073743818
136: platformType@var755 ==@expr1073743819 Win32W ||@expr1073743820
137: platformType@var755 ==@expr1073743821 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073743822 platformType@var755 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var760 ) {
145: switch (@expr1073743823 pt@var760 ) {
146: case Unspecified :@expr2000 ;
147: return "Unspecified" ;
148: case Native :@expr2000 ;
149: return "Native" ;
150: case Win32A :@expr2000 ;
151: return "win32A" ;
152: case Win32W :@expr2000 ;
153: return "win32W" ;
154: case Win64 :@expr2000 ;
155: return "win64" ;
156: case Unix32 :@expr2000 ;
157: return "unix32" ;
158: case Unix64 :@expr2000 ;
159: return "unix64" ;
160: case PlatformFile :@expr2000 ;
161: return "platformFile" ;
162: default :@expr2000 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073743833 char_bit@var738 +@expr1073743834 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073743835 char_bit@var738 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073743836 char_bit@var738 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var761 , const std :: string & rhs@var762 ) const {
41: return caseInsensitiveStringCompare (@expr1073743837 lhs@var761 , rhs@var762 ) <@expr1073743838 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var770 ( cppcheck :: Platform :: Unspecified ) , msc@var771 ( false ) , useMfc@var772 ( false ) { }
67: std :: string cfg@var763 ;
68: std :: string filename@var764 ;
69: std :: string defines@var765 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var765 +@expr1073743839 (@expr1073743840 msc@var771 ?@expr1073743841 ";_MSC_VER=1900" :@expr1073743842 "" ) +@expr1073743843 (@expr1073743844 useMfc@var772 ?@expr1073743845 ";__AFXWIN_H__=1" :@expr1073743846 "" ) ;
72: }
73: std :: set < std :: string > undefs@var766 ;
74: std :: list < std :: string > includePaths@var767 ;
75: std :: list < std :: string > systemIncludePaths@var768 ;
76: std :: string standard@var769 ;
77: cppcheck :: Platform :: PlatformType platformType@var770 ;
78: bool msc@var771 ;
79: bool useMfc@var772 ;
80:
81: void parseCommand ( std :: string command@var773 ) ;
82: void setDefines ( std :: string defs@var774 ) ;
83: void setIncludePaths ( const std :: string & basepath@var775 , const std :: list < std :: string > & in@var776 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var777 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var778 ;
86: Type projectType@var779 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var780 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous1 {
96: std :: string analyzeAllVsConfigs@var781 ;
97: std :: vector < std :: string > pathNames@var782 ;
98: std :: list < std :: string > libraries@var783 ;
99: std :: list < std :: string > excludedPaths@var784 ;
100: std :: list < std :: string > checkVsConfigs@var785 ;
101: std :: string projectFile@var786 ;
102: std :: string platform@var787 ;
103: } ; struct Anonymous1 guiProject@var788 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var789 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var790 ) ;
107:
108: Type import ( const std :: string & filename@var791 , Settings * settings@var792 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var793 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var794 , Settings * settings@var795 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var796 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var797 , const std :: string & path@var798 , const std :: vector < std :: string > & fileFilters@var799 ) ;
115: bool importVcxproj ( const std :: string & filename@var800 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var801 , const std :: string & additionalIncludeDirectories@var802 , const std :: vector < std :: string > & fileFilters@var803 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var804 ) ;
117:
118: static void printError ( const std :: string & message@var805 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var806 ) ;
121:
122: std :: string mPath@var807 ;
123: std :: set < std :: string > mAllVSConfigs@var808 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var809 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var810 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var811 [ 2 ] = "1" ;
131: const char BuildDirElementName@var812 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var813 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var814 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var815 [ 7 ] = "parser" ;
135: const char BugHunting@var816 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var817 [ 11 ] = "includedir" ;
137: const char DirElementName@var818 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var819 [ 5 ] = "name" ;
139: const char DefinesElementName@var820 [ 8 ] = "defines" ;
140: const char DefineName@var821 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var822 [ 5 ] = "name" ;
142: const char UndefinesElementName@var823 [ 10 ] = "undefines" ;
143: const char UndefineName@var824 [ 9 ] = "undefine" ;
144: const char PathsElementName@var825 [ 6 ] = "paths" ;
145: const char PathName@var826 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var827 [ 5 ] = "name" ;
147: const char RootPathName@var828 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var829 [ 5 ] = "name" ;
149: const char IgnoreElementName@var830 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var831 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var832 [ 5 ] = "name" ;
152: const char ExcludeElementName@var833 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var834 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var835 [ 5 ] = "name" ;
155: const char FunctionContracts@var836 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var837 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var838 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var839 [ 8 ] = "library" ;
159: const char PlatformElementName@var840 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var841 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var842 [ 12 ] = "suppression" ;
162: const char AddonElementName@var843 [ 6 ] = "addon" ;
163: const char AddonsElementName@var844 [ 7 ] = "addons" ;
164: const char ToolElementName@var845 [ 5 ] = "tool" ;
165: const char ToolsElementName@var846 [ 6 ] = "tools" ;
166: const char TagsElementName@var847 [ 5 ] = "tags" ;
167: const char TagElementName@var848 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var849 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var850 [ 4 ] = "tag" ;
170: const char WarningElementName@var851 [ 8 ] = "warning" ;
171: const char HashAttributeName@var852 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var853 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var854 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var855 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var856 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var857 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var858 [ 11 ] = "clang-tidy" ;
178: const char Name@var859 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var860 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var861 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var862 , std :: clock_t clocks@var863 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var864 ;
45: long mNumberOfResults@var865 ;
46:
47: TimerResultsData ( )
48: : mClocks@var864 ( 0 )
49: , mNumberOfResults@var865 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var866 =@expr1073743848 (@expr1073743849 double ) (@expr1073743850 (@expr1073743851 unsigned long ) mClocks@var864 ) /@expr1073743852 (@expr1073743853 double ) CLOCKS_PER_SEC@expr1073743847 ;
53: return ret@var866 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var867 ) const ;
62: void addResults ( const std :: string & str@var868 , std :: clock_t clocks@var869 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var870 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var871 , SHOWTIME_MODES showtimeMode@var872 , TimerResultsIntf * timerResults@var873 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var874 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var875 ;
79: TimerResultsIntf * mTimerResults@var876 ;
80: std :: clock_t mStart@var877 ;
81: const SHOWTIME_MODES mShowTimeMode@var878 ;
82: bool mStopped@var879 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var880 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var881 ;
103:
104:
105: std :: string addonPython@var882 ;
106:
107:
108: std :: vector < std :: string > basePaths@var883 ;
109:
110:
111: std :: string buildDir@var884 ;
112:
113:
114: bool checkAllConfigurations@var885 ;
115:
116:
117: bool checkConfiguration@var886 ;
118:
|
121:
122: bool checkHeaders@var887 ;
123:
124:
125: bool checkLibrary@var888 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var889 ;
129:
130:
131: bool checkUnusedTemplates@var890 ;
132:
133:
134: bool clang@var891 ;
135:
136:
137: std :: string clangExecutable@var892 ;
138:
139:
140: bool clangTidy@var893 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var894 ;
144:
145:
146: std :: string cppcheckCfgProductName@var895 ;
147:
148:
149: std :: string cppcheckCfgAbout@var896 ;
150:
151:
152: bool daca@var897 ;
153:
154:
155: bool debugnormal@var898 ;
156:
157:
158: bool debugSimplified@var899 ;
159:
160:
161: bool debugtemplate@var900 ;
162:
163:
164: bool debugwarnings@var901 ;
165:
166:
167: bool dump@var902 ;
168: std :: string dumpFile@var903 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var904 ;
176:
177:
178: bool exceptionHandling@var905 ;
179:
180:
181: std :: string exename@var906 ;
182:
183:
184:
185: int exitCode@var907 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var908 ;
189:
190:
191: bool force@var909 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var910 ;
196:
197:
198: bool inlineSuppressions@var911 ;
199:
200:
201:
202: unsigned int jobs@var912 ;
203:
|
206:
207: bool jointSuppressionReport@var913 ;
208:
209:
210: std :: list < std :: string > libraries@var914 ;
211:
212:
213: Library library@var915 ;
214:
215:
216:
217: int loadAverage@var916 ;
218:
|
221:
222: int maxConfigs@var917 ;
223:
224:
225: int maxCtuDepth@var918 ;
226:
227:
228: int maxTemplateRecursion@var919 ;
229:
230:
231: Suppressions nofail@var920 ;
232:
233:
234: Suppressions nomsg@var921 ;
235:
236:
237: std :: string outputFile@var922 ;
238:
239:
240: std :: string plistOutput@var923 ;
241:
242:
243: bool preprocessOnly@var924 ;
244:
245: ImportProject project@var925 ;
246:
247:
248: bool quiet@var926 ;
249:
250:
251: bool relativePaths@var927 ;
252:
253:
254: bool reportProgress@var928 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var929 ( "simple" )
261: , id@var931 ( "rule" )
262: , severity@var933 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var929 ;
266: std :: string pattern@var930 ;
267: std :: string id@var931 ;
268: std :: string summary@var932 ;
269: Severity :: SeverityType severity@var933 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var934 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var940 ( false ) , externalFunctions@var941 ( false ) , internalFunctions@var942 ( false ) , externalVariables@var943 ( false ) { }
281:
282: static const char XmlRootName@var935 [ ] ;
283: static const char XmlClasses@var936 [ ] ;
284: static const char XmlExternalFunctions@var937 [ ] ;
285: static const char XmlInternalFunctions@var938 [ ] ;
286: static const char XmlExternalVariables@var939 [ ] ;
287:
288: void clear ( ) {
289: classes@var940 =@expr1073743854 externalFunctions@var941 =@expr1073743855 internalFunctions@var942 =@expr1073743856 externalVariables@var943 =@expr1073743857 false ;
290: }
291:
|
297:
298: bool classes@var940 ;
299:
|
304:
305: bool externalFunctions@var941 ;
306:
|
310:
311: bool internalFunctions@var942 ;
312:
|
316:
317: bool externalVariables@var943 ;
318: } ;
319:
320: SafeChecks safeChecks@var944 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var945 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var946 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var947 ;
325:
326:
327: SHOWTIME_MODES showtime@var948 ;
328:
329:
330: Standards standards@var949 ;
331:
332:
333:
334: std :: string templateFormat@var950 ;
335:
336:
337:
338: std :: string templateLocation@var951 ;
339:
340:
341: std :: string userDefines@var952 ;
342:
343:
344: std :: set < std :: string > userUndefs@var953 ;
345:
346:
347: std :: list < std :: string > userIncludes@var954 ;
348:
349:
350: bool verbose@var955 ;
351:
352:
353: bool xml@var956 ;
354:
355:
356: int xml_version@var957 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var958 ) const {
363: for (@expr1073743858 const std ::@expr1073743859 string &@expr1073743860 configExcludePath@var959 :@expr1073743861 configExcludePaths@var894 ) {
364: if (@expr1073743862 file@var958 .@expr1073743863 length (@expr1073743864 ) >=@expr1073743865 configExcludePath@var959 .@expr2042 length (@expr2043 ) &&@expr1073743868 file@var958 .@expr1073743869 compare (@expr1073743870 0 , configExcludePath@var959 .@expr2042 length (@expr2043 ) , configExcludePath@var959 ) ==@expr1073743873 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var960 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var961 , bool inconclusiveCheck@var962 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073743874 find (@expr1073743875 libraries@var914 .@expr1073743876 begin (@expr1073743877 ) , libraries@var914 .@expr2054 end (@expr2055 ) , "posix" ) !=@expr1073743880 libraries@var914 .@expr2054 end (@expr2055 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var963 = true ) {
392: Settings ::@expr1073743883 mTerminated@var880 =@expr1073743884 t@var963 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073743885 mTerminated@var880 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var964 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/preprocessor.cpp

1:
|
38:
39: static bool sameline ( const simplecpp :: Token * tok1@var965 , const simplecpp :: Token * tok2@var966 )
40: {
41: return tok1@var965 &&@expr1073743886 tok2@var966 &&@expr1073743887 tok1@var965 .@expr1073743888 location@var967 .@expr1073743889 sameline (@expr1073743890 tok2@var966 .@expr1073743891 location@var968 ) ;
42: }
43:
|
48:
49: static std :: string trim ( const std :: string & s@var969 )
50: {
51: const std ::@expr2069 string ::@expr2069 size_type beg@var970 =@expr1073743895 s@var969 .@expr1073743896 find_first_not_of (@expr1073743897 " \t" ) ;
52: if (@expr1073743898 beg@var970 ==@expr1073743899 std ::@expr1073743900 string ::@expr1073743901 npos@expr1073743892 ) {
53: return "" ; }
54: const std ::@expr2069 string ::@expr2069 size_type end@var971 =@expr1073743904 s@var969 .@expr1073743905 find_last_not_of (@expr1073743906 " \t" ) ;
55: return s@var969 .@expr1073743907 substr (@expr1073743908 beg@var970 , end@var971 -@expr1073743909 beg@var970 +@expr1073743910 1 ) ;
56: }
57:
58: Directive :: Directive ( const std :: string & _file@var972 , const int _linenr@var973 , const std :: string & _str@var974 ) :
59: file@var2 ( _file@var972 ) ,
60: linenr@var3 ( _linenr@var973 ) ,
61: str@var4 ( trim ( _str@var974 ) )
62: { }
63:
64: std :: atomic < bool > Preprocessor :: missingIncludeFlag@var11 ;
65: std :: atomic < bool > Preprocessor :: missingSystemIncludeFlag@var12 ;
66:
67: char Preprocessor :: macroChar@var8 = char ( 1 ) ;
68:
69: Preprocessor :: Preprocessor ( Settings & settings@var975 , ErrorLogger * errorLogger@var976 ) : mSettings@var65 ( settings@var975 ) , mErrorLogger@var66 ( errorLogger@var976 )
70: { }
71:
72: Preprocessor :: ~ Preprocessor ( )
73: {
74: for (@expr1073743911 std ::@expr2088 pair < const std ::@expr2088 string , simplecpp ::@expr2088 TokenList *@expr1073743915 > &@expr1073743916 tokenList@var977 :@expr1073743917 mTokenLists@var68 ) {
75: delete tokenList@var977 .@expr1073743918 second@var978 ; }
76: }
77:
78: namespace {
79: struct BadInlineSuppression {
80: BadInlineSuppression ( const simplecpp :: Location & l@var979 , const std :: string & msg@var980 ) : location@var981 ( l@var979 ) , errmsg@var982 ( msg@var980 ) { }
81: simplecpp :: Location location@var981 ;
82: std :: string errmsg@var982 ;
83: } ;
84: }
85:
86: static bool parseInlineSuppressionCommentToken ( const simplecpp :: Token * tok@var983 , std :: list < Suppressions :: Suppression > & inlineSuppressions@var984 , std :: list < BadInlineSuppression > * bad@var985 )
87: {
88: const std ::@expr1073743920 string cppchecksuppress@var986 (@expr1073743921 "cppcheck-suppress" ) ;
89:
90: const std ::@expr2098 string &@expr2099 comment@var987 =@expr1073743924 tok@var983 .@expr1073743925 str (@expr1073743926 ) ;
91: if (@expr1073743927 comment@var987 .@expr2104 size (@expr2105 ) <@expr1073743930 cppchecksuppress@var986 .@expr2107 size (@expr2108 ) ) {
92: return false ; }
93: const std ::@expr2098 string ::@expr2098 size_type pos1@var988 =@expr1073743935 comment@var987 .@expr2112 find_first_not_of (@expr1073743937 "/* \t" ) ;
94: if (@expr1073743938 pos1@var988 ==@expr1073743939 std ::@expr2116 string ::@expr2117 npos@expr2095 ) {
95: return false ; }
96: if (@expr1073743942 pos1@var988 +@expr2119 cppchecksuppress@var986 .@expr2107 size (@expr2108 ) >=@expr1073743946 comment@var987 .@expr2104 size (@expr2105 ) ) {
97: return false ; }
98: if (@expr1073743949 comment@var987 .@expr1073743950 substr (@expr1073743951 pos1@var988 , cppchecksuppress@var986 .@expr2107 size (@expr2108 ) ) !=@expr1073743954 cppchecksuppress@var986 ) {
99: return false ; }
100:
101:
102: const std ::@expr2098 string ::@expr2098 size_type pos2@var989 =@expr1073743957 comment@var987 .@expr2112 find_first_not_of (@expr1073743959 " " , pos1@var988 +@expr2119 cppchecksuppress@var986 .@expr2107 size (@expr2108 ) ) ;
103: if (@expr1073743963 pos2@var989 ==@expr1073743964 std ::@expr2116 string ::@expr2117 npos@expr2095 ) {
104: return false ; }
105:
106: if (@expr1073743967 comment@var987 [@expr1073743968 pos2@var989 ] ==@expr1073743969 '[' ) {
107:
108: std ::@expr1073743970 string errmsg@var990 ;
109: std ::@expr1073743971 vector < Suppressions ::@expr2098 Suppression > suppressions@var991 ; suppressions@var991 =@expr1073743973 Suppressions ::@expr1073743974 parseMultiSuppressComment (@expr1073743975 comment@var987 , &@expr1073743976 errmsg@var990 ) ;
110:
111: if (@expr1073743977 !@expr1073743978 errmsg@var990 .@expr1073743979 empty (@expr1073743980 ) ) {
112: bad@var985 .@expr2157 push_back (@expr1073743982 BadInlineSuppression (@expr1073743983 tok@var983 .@expr2160 location@var992 , errmsg@var990 ) ) ; }
113:
114: for (@expr1073743985 const Suppressions ::@expr2098 Suppression &@expr2099 s@var993 :@expr1073743988 suppressions@var991 ) {
115: if (@expr1073743989 !@expr1073743990 s@var993 .@expr1073743991 errorId@var994 .@expr1073743992 empty (@expr1073743993 ) ) {
116: inlineSuppressions@var984 .@expr2170 push_back (@expr1073743995 s@var993 ) ; }
117: }
118: } else {
119:
120: std ::@expr1073743996 string errmsg@var995 ;
121: Suppressions ::@expr1073743997 Suppression s@var996 ;
122: if (@expr1073743998 !@expr1073743999 s@var996 .@expr1073744000 parseComment (@expr1073744001 comment@var987 , &@expr1073744002 errmsg@var995 ) ) {
123: return false ; }
124:
125: if (@expr1073744003 !@expr1073744004 s@var996 .@expr1073744005 errorId@var997 .@expr1073744006 empty (@expr1073744007 ) ) {
126: inlineSuppressions@var984 .@expr2170 push_back (@expr1073744009 s@var996 ) ; }
127:
128: if (@expr1073744010 !@expr1073744011 errmsg@var995 .@expr1073744012 empty (@expr1073744013 ) ) {
129: bad@var985 .@expr2157 push_back (@expr1073744015 BadInlineSuppression (@expr1073744016 tok@var983 .@expr2160 location@var992 , errmsg@var995 ) ) ; }
130: }
131:
132: return true ;
133: }
134:
135: static void addinlineSuppressions ( const simplecpp :: TokenList & tokens@var998 , Settings & mSettings@var999 , std :: list < BadInlineSuppression > * bad@var1000 )
136: {
137: for (@expr1073744018 const simplecpp ::@expr2195 Token *@expr1073744020 tok@var1001 =@expr1073744021 tokens@var998 .@expr1073744022 cfront (@expr1073744023 ) ; tok@var1001 ; tok@var1001 =@expr1073744024 tok@var1001 .@expr2201 next@var1002 ) {
138: if (@expr1073744026 !@expr1073744027 tok@var1001 .@expr2204 comment@var1003 ) {
139: continue ; }
140:
141: std ::@expr1073744029 list < Suppressions ::@expr2195 Suppression > inlineSuppressions@var1004 ;
142: if (@expr1073744031 !@expr1073744032 parseInlineSuppressionCommentToken (@expr2209 tok@var1001 , inlineSuppressions@var1004 , bad@var1000 ) ) {
143: continue ; }
144:
145: if (@expr1073744034 !@expr1073744035 sameline (@expr1073744036 tok@var1001 .@expr2213 previous@var1005 , tok@var1001 ) ) {
146:
147: tok@var1001 =@expr1073744038 tok@var1001 .@expr2201 next@var1002 ;
148: while (@expr1073744040 tok@var1001 &&@expr1073744041 tok@var1001 .@expr2204 comment@var1003 ) {
149: parseInlineSuppressionCommentToken (@expr2209 tok@var1001 , inlineSuppressions@var1004 , bad@var1000 ) ;
150: tok@var1001 =@expr1073744044 tok@var1001 .@expr2201 next@var1002 ;
151: }
152: if (@expr1073744046 !@expr1073744047 tok@var1001 ) {
153: break ; }
154: }
155:
156: if (@expr1073744048 inlineSuppressions@var1004 .@expr1073744049 empty (@expr1073744050 ) ) {
157: continue ; }
158:
159:
160: std ::@expr1073744051 string relativeFilename@var1006 (@expr1073744052 tok@var1001 .@expr2229 location@var1007 .@expr1073744054 file (@expr1073744055 ) ) ;
161: if (@expr1073744056 mSettings@var999 .@expr1073744057 relativePaths@var1008 ) {
162: for (@expr1073744058 const std ::@expr2195 string &@expr2236 basePath@var1009 :@expr1073744061 mSettings@var999 .@expr1073744062 basePaths@var1010 ) {
163: const std ::@expr2195 string bp@var1011 =@expr1073744064 basePath@var1009 +@expr1073744065 "/" ;
164: if (@expr1073744066 relativeFilename@var1006 .@expr1073744067 compare (@expr1073744068 0 , bp@var1011 .@expr2245 size (@expr2246 ) , bp@var1011 ) ==@expr1073744071 0 ) {
165: relativeFilename@var1006 =@expr1073744072 relativeFilename@var1006 .@expr1073744073 substr (@expr1073744074 bp@var1011 .@expr2245 size (@expr2246 ) ) ;
166: }
167: }
168: }
169: relativeFilename@var1006 =@expr1073744077 Path ::@expr1073744078 simplifyPath (@expr1073744079 relativeFilename@var1006 ) ;
170:
171:
172: const bool thisAndNextLine@var1012 =@expr1073744080 tok@var1001 .@expr2213 previous@var1005 &&@expr1073744082
173: tok@var1001 .@expr2213 previous@var1005 .@expr2260 previous@var1013 &&@expr1073744085
174: tok@var1001 .@expr2201 next@var1002 &&@expr1073744087
175: !@expr1073744088 sameline (@expr1073744089 tok@var1001 .@expr2213 previous@var1005 .@expr2260 previous@var1013 , tok@var1001 .@expr2213 previous@var1005 ) &&@expr1073744093
176: tok@var1001 .@expr2229 location@var1007 .@expr2271 line@var1014 +@expr1073744096 1 ==@expr1073744097 tok@var1001 .@expr2201 next@var1002 .@expr2275 location@var1015 .@expr1073744100 line@var1016 &&@expr1073744101
177: tok@var1001 .@expr2229 location@var1007 .@expr1073744103 fileIndex@var1017 ==@expr1073744104 tok@var1001 .@expr2201 next@var1002 .@expr2275 location@var1015 .@expr1073744107 fileIndex@var1018 &&@expr1073744108
178: tok@var1001 .@expr2213 previous@var1005 .@expr1073744110 str (@expr1073744111 ) ==@expr1073744112 "{" ;
179:
180:
181: for (@expr1073744113 Suppressions ::@expr2195 Suppression &@expr2236 suppr@var1019 :@expr1073744116 inlineSuppressions@var1004 ) {
182: suppr@var1019 .@expr1073744117 fileName@var1020 =@expr1073744118 relativeFilename@var1006 ;
183: suppr@var1019 .@expr1073744119 lineNumber@var1021 =@expr1073744120 tok@var1001 .@expr2229 location@var1007 .@expr2271 line@var1014 ;
184: suppr@var1019 .@expr1073744123 thisAndNextLine@var1022 =@expr1073744124 thisAndNextLine@var1012 ;
185: mSettings@var999 .@expr1073744125 nomsg@var1023 .@expr1073744126 addSuppression (@expr1073744127 suppr@var1019 ) ;
186: }
187: }
188: }
189:
190: void Preprocessor :: inlineSuppressions ( const simplecpp :: TokenList & tokens@var1024 )
191: {
192: if (@expr1073744128 !@expr1073744129 mSettings@var65 .@expr1073744130 inlineSuppressions@var1371 ) {
193: return ; }
194: std ::@expr1073744131 list < BadInlineSuppression > err@var1025 ;
195: ::@expr2308 addinlineSuppressions (@expr1073744133 tokens@var1024 , mSettings@var65 , &@expr2310 err@var1025 ) ;
196: for (@expr1073744135 std ::@expr2308 map < std ::@expr2308 string , simplecpp ::@expr2308 TokenList *@expr1073744139 > ::@expr2308 const_iterator it@var1026 =@expr1073744141 mTokenLists@var68 .@expr1073744142 begin (@expr1073744143 ) ; it@var1026 !=@expr1073744144 mTokenLists@var68 .@expr1073744145 end (@expr1073744146 ) ; ++@expr1073744147 it@var1026 ) {
197: if (@expr1073744148 it@var1026 .@expr2325 second@var1027 ) {
198: ::@expr2308 addinlineSuppressions (@expr1073744151 *@expr1073744152 it@var1026 .@expr2325 second@var1027 , mSettings@var65 , &@expr2310 err@var1025 ) ; }
199: }
200: for (@expr1073744155 const BadInlineSuppression &@expr1073744156 bad@var1028 :@expr1073744157 err@var1025 ) {
201: error (@expr1073744158 bad@var1028 .@expr2335 location@var1029 .@expr1073744160 file (@expr1073744161 ) , bad@var1028 .@expr2335 location@var1029 .@expr1073744163 line@var1030 , bad@var1028 .@expr1073744164 errmsg@var1031 ) ;
202: }
203: }
204:
205: void Preprocessor :: setDirectives ( const simplecpp :: TokenList & tokens@var1032 )
206: {
207:
208: mDirectives@var67 .@expr1073744165 clear (@expr1073744166 ) ;
209:
210: std ::@expr1073744167 vector < const simplecpp ::@expr2344 TokenList *@expr2345 > list@var1033 ;
211: list@var1033 .@expr1073744170 reserve (@expr1073744171 1U +@expr1073744172 mTokenLists@var68 .@expr1073744173 size (@expr1073744174 ) ) ;
212: list@var1033 .@expr2351 push_back (@expr1073744176 &@expr1073744177 tokens@var1032 ) ;
213: for (@expr1073744178 std ::@expr2344 map < std ::@expr2344 string , simplecpp ::@expr2344 TokenList *@expr2345 > ::@expr2344 const_iterator it@var1034 =@expr1073744184 mTokenLists@var68 .@expr1073744185 begin (@expr1073744186 ) ; it@var1034 !=@expr1073744187 mTokenLists@var68 .@expr1073744188 end (@expr1073744189 ) ; ++@expr1073744190 it@var1034 ) {
214: list@var1033 .@expr2351 push_back (@expr1073744192 it@var1034 .@expr1073744193 second@var1035 ) ;
215: }
216:
217: for (@expr1073744194 const simplecpp ::@expr2344 TokenList *@expr2345 tokenList@var1036 :@expr1073744197 list@var1033 ) {
218: for (@expr1073744198 const simplecpp ::@expr2344 Token *@expr2345 tok@var1037 =@expr1073744201 tokenList@var1036 .@expr1073744202 cfront (@expr1073744203 ) ; tok@var1037 ; tok@var1037 =@expr1073744204 tok@var1037 .@expr2381 next@var1038 ) {
219: if (@expr1073744206 (@expr1073744207 tok@var1037 .@expr1073744208 op@var1039 !=@expr1073744209 '#' ) ||@expr1073744210 (@expr1073744211 tok@var1037 .@expr2388 previous@var1040 &&@expr1073744213 tok@var1037 .@expr2388 previous@var1040 .@expr1073744215 location@var1041 .@expr1073744216 line@var1042 ==@expr1073744217 tok@var1037 .@expr2394 location@var1043 .@expr2395 line@var1044 ) ) {
220: continue ; }
221: if (@expr1073744220 tok@var1037 .@expr2381 next@var1038 &&@expr1073744222 tok@var1037 .@expr2381 next@var1038 .@expr1073744224 str (@expr1073744225 ) ==@expr1073744226 "endfile" ) {
222: continue ; }
223: Directive directive@var1045 (@expr1073744227 tok@var1037 .@expr2394 location@var1043 .@expr1073744229 file (@expr1073744230 ) , tok@var1037 .@expr2394 location@var1043 .@expr2395 line@var1044 , emptyString@var1 ) ;
224: for (@expr1073744233 const simplecpp ::@expr2344 Token *@expr2345 tok2@var1046 =@expr1073744236 tok@var1037 ; tok2@var1046 &&@expr1073744237 tok2@var1046 .@expr2414 location@var1047 .@expr1073744239 line@var1048 ==@expr1073744240 directive@var1045 .@expr1073744241 linenr@var1049 ; tok2@var1046 =@expr1073744242 tok2@var1046 .@expr1073744243 next@var1050 ) {
225: if (@expr1073744244 tok2@var1046 .@expr1073744245 comment@var1051 ) {
226: continue ; }
227: if (@expr1073744246 !@expr1073744247 directive@var1045 .@expr2424 str@var1052 .@expr1073744249 empty (@expr1073744250 ) &&@expr1073744251 (@expr1073744252 tok2@var1046 .@expr2414 location@var1047 .@expr1073744254 col@var1053 >@expr1073744255 tok2@var1046 .@expr2432 previous@var1054 .@expr1073744257 location@var1055 .@expr1073744258 col@var1056 +@expr1073744259 tok2@var1046 .@expr2432 previous@var1054 .@expr1073744261 str (@expr1073744262 ) .@expr1073744263 size (@expr1073744264 ) ) ) {
228: directive@var1045 .@expr2424 str@var1052 +=@expr1073744266 ' ' ; }
229: if (@expr1073744267 directive@var1045 .@expr2424 str@var1052 ==@expr1073744269 "#" &&@expr1073744270 tok2@var1046 .@expr2447 str (@expr2448 ) ==@expr1073744273 "file" ) {
230: directive@var1045 .@expr2424 str@var1052 +=@expr1073744275 "include" ; }
231: else {
232: directive@var1045 .@expr2424 str@var1052 +=@expr1073744277 tok2@var1046 .@expr2447 str (@expr2448 ) ; }
233: }
234: mDirectives@var67 .@expr1073744280 push_back (@expr1073744281 directive@var1045 ) ;
235: }
236: }
237: }
238:
239: static std :: string readcondition ( const simplecpp :: Token * iftok@var1057 , const std :: set < std :: string > & defined@var1058 , const std :: set < std :: string > & undefined@var1059 )
240: {
241: const simplecpp ::@expr2458 Token * cond@var1060 ; cond@var1060 =@expr1073744283 iftok@var1057 .@expr1073744284 next@var1061 ;
242: if (@expr1073744285 !@expr1073744286 sameline (@expr2463 iftok@var1057 , cond@var1060 ) ) {
243: return "" ; }
244:
245: const simplecpp ::@expr2458 Token * next1@var1062 ; next1@var1062 =@expr1073744289 cond@var1060 .@expr2466 next@var1063 ;
246: const simplecpp ::@expr2458 Token * next2@var1064 ; next2@var1064 =@expr1073744292 next1@var1062 ?@expr1073744293 next1@var1062 .@expr1073744294 next@var1065 :@expr1073744295 nullptr ;
247: const simplecpp ::@expr2458 Token * next3@var1066 ; next3@var1066 =@expr1073744297 next2@var1064 ?@expr1073744298 next2@var1064 .@expr1073744299 next@var1067 :@expr1073744300 nullptr ;
248:
249: unsigned int len@var1068 ; len@var1068 =@expr1073744301 1 ;
250: if (@expr1073744302 sameline (@expr1073744303 iftok@var1057 , next1@var1062 ) ) {
251: len@var1068 =@expr1073744304 2 ; }
252: if (@expr1073744305 sameline (@expr1073744306 iftok@var1057 , next2@var1064 ) ) {
253: len@var1068 =@expr1073744307 3 ; }
254: if (@expr1073744308 sameline (@expr1073744309 iftok@var1057 , next3@var1066 ) ) {
255: len@var1068 =@expr1073744310 4 ; }
256:
257: if (@expr1073744311 len@var1068 ==@expr2488 1 &&@expr1073744313 cond@var1060 .@expr2490 str (@expr2491 ) ==@expr1073744316 "0" ) {
258: return "0" ; }
259:
260: if (@expr1073744317 len@var1068 ==@expr2488 1 &&@expr1073744319 cond@var1060 .@expr2496 name@var1069 ) {
261: if (@expr2497 defined@var1058 .@expr2498 find (@expr2499 cond@var1060 .@expr2490 str (@expr2491 ) ) ==@expr2502 defined@var1058 .@expr2503 end (@expr2504 ) ) {
262: return cond@var1060 .@expr2490 str (@expr2491 ) ; }
263: }
264:
265: if (@expr1073744331 len@var1068 ==@expr1073744332 2 &&@expr1073744333 cond@var1060 .@expr2510 op@var1070 ==@expr2511 '!' &&@expr1073744336 next1@var1062 .@expr2513 name@var1071 ) {
266: if (@expr1073744338 defined@var1058 .@expr2498 find (@expr2516 next1@var1062 .@expr2517 str (@expr2518 ) ) ==@expr2519 defined@var1058 .@expr2503 end (@expr2504 ) ) {
267: return next1@var1062 .@expr2517 str (@expr2518 ) +@expr1073744348 "=0" ; }
268: }
269:
270: if (@expr1073744349 len@var1068 ==@expr2526 3 &&@expr1073744351 cond@var1060 .@expr2510 op@var1070 ==@expr1073744353 '(' &&@expr1073744354 next1@var1062 .@expr2513 name@var1071 &&@expr1073744356 next2@var1064 .@expr1073744357 op@var1072 ==@expr1073744358 ')' ) {
271: if (@expr1073744359 defined@var1058 .@expr2498 find (@expr2516 next1@var1062 .@expr2517 str (@expr2518 ) ) ==@expr2519 defined@var1058 .@expr2503 end (@expr2504 ) &&@expr1073744367 undefined@var1059 .@expr2544 find (@expr1073744369 next1@var1062 .@expr2517 str (@expr2518 ) ) ==@expr1073744372 undefined@var1059 .@expr2549 end (@expr2550 ) ) {
272: return next1@var1062 .@expr2517 str (@expr2518 ) ; }
273: }
274:
275: if (@expr1073744377 len@var1068 ==@expr2526 3 &&@expr1073744379 cond@var1060 .@expr2496 name@var1069 &&@expr1073744381 next1@var1062 .@expr2517 str (@expr2518 ) ==@expr1073744384 "==" &&@expr1073744385 next2@var1064 .@expr1073744386 number@var1073 ) {
276: if (@expr2497 defined@var1058 .@expr2498 find (@expr2499 cond@var1060 .@expr2490 str (@expr2491 ) ) ==@expr2502 defined@var1058 .@expr2503 end (@expr2504 ) ) {
277: return cond@var1060 .@expr2490 str (@expr2491 ) +@expr1073744397 '=' +@expr1073744398 cond@var1060 .@expr2466 next@var1063 .@expr1073744400 next@var1074 .@expr1073744401 str (@expr1073744402 ) ; }
278: }
279:
280: std ::@expr1073744403 set < std ::@expr2580 string > configset@var1075 ;
281: for (@expr1073744405 ; sameline (@expr2463 iftok@var1057 , cond@var1060 ) ; cond@var1060 =@expr1073744407 cond@var1060 .@expr2466 next@var1063 ) {
282: if (@expr1073744409 cond@var1060 .@expr2510 op@var1070 ==@expr2511 '!' ) {
283: if (@expr1073744412 !@expr1073744413 sameline (@expr1073744414 iftok@var1057 , cond@var1060 .@expr2466 next@var1063 ) ||@expr1073744416 !@expr1073744417 cond@var1060 .@expr2466 next@var1063 .@expr1073744419 name@var1076 ) {
284: break ; }
285: if (@expr1073744420 cond@var1060 .@expr2466 next@var1063 .@expr2598 str (@expr2599 ) ==@expr1073744424 "defined" ) {
286: continue ; }
287: configset@var1075 .@expr2601 insert (@expr1073744426 cond@var1060 .@expr2466 next@var1063 .@expr2598 str (@expr2599 ) +@expr1073744430 "=0" ) ;
288: continue ;
289: }
290: if (@expr1073744431 cond@var1060 .@expr2490 str (@expr2491 ) !=@expr1073744434 "defined" ) {
291: continue ; }
292: const simplecpp ::@expr2458 Token * dtok@var1077 ; dtok@var1077 =@expr1073744436 cond@var1060 .@expr2466 next@var1063 ;
293: if (@expr1073744438 !@expr1073744439 dtok@var1077 ) {
294: break ; }
295: if (@expr1073744440 dtok@var1077 .@expr1073744441 op@var1078 ==@expr1073744442 '(' ) {
296: dtok@var1077 =@expr1073744443 dtok@var1077 .@expr1073744444 next@var1079 ; }
297: if (@expr1073744445 sameline (@expr1073744446 iftok@var1057 , dtok@var1077 ) &&@expr1073744447 dtok@var1077 .@expr1073744448 name@var1080 &&@expr1073744449 defined@var1058 .@expr2498 find (@expr1073744451 dtok@var1077 .@expr2628 str (@expr2629 ) ) ==@expr1073744454 defined@var1058 .@expr2503 end (@expr2504 ) &&@expr1073744457 undefined@var1059 .@expr2544 find (@expr1073744459 dtok@var1077 .@expr2628 str (@expr2629 ) ) ==@expr1073744462 undefined@var1059 .@expr2549 end (@expr2550 ) ) {
298: configset@var1075 .@expr2601 insert (@expr1073744466 dtok@var1077 .@expr2628 str (@expr2629 ) ) ; }
299: }
300: std ::@expr1073744469 string cfgStr@var1081 ;
301: for (@expr1073744470 const std ::@expr2580 string &@expr1073744472 s@var1082 :@expr1073744473 configset@var1075 ) {
302: if (@expr1073744474 !@expr1073744475 cfgStr@var1081 .@expr1073744476 empty (@expr1073744477 ) ) {
303: cfgStr@var1081 +=@expr1073744478 ';' ; }
304: cfgStr@var1081 +=@expr1073744479 s@var1082 ;
305: }
306: return cfgStr@var1081 ;
307: }
308:
309: static bool hasDefine ( const std :: string & userDefines@var1083 , const std :: string & cfg@var1084 )
310: {
311: if (@expr1073744481 cfg@var1084 .@expr1073744482 empty (@expr1073744483 ) ) {
312: return false ;
313: }
314:
315: std ::@expr2660 string ::@expr1073744485 size_type pos@var1085 ; pos@var1085 =@expr1073744486 0 ;
316: while (@expr1073744487 pos@var1085 <@expr1073744488 userDefines@var1083 .@expr2665 size (@expr2666 ) ) {
317: pos@var1085 =@expr1073744491 userDefines@var1083 .@expr1073744492 find (@expr1073744493 cfg@var1084 , pos@var1085 ) ;
318: if (@expr1073744494 pos@var1085 ==@expr1073744495 std ::@expr2660 string ::@expr1073744497 npos@expr1073744480 ) {
319: break ; }
320: const std ::@expr2674 string ::@expr2674 size_type pos2@var1086 =@expr1073744500 pos@var1085 +@expr1073744501 cfg@var1084 .@expr1073744502 size (@expr1073744503 ) ;
321: if (@expr1073744504 (@expr1073744505 pos@var1085 ==@expr1073744506 0 ||@expr1073744507 userDefines@var1083 [@expr1073744508 pos@var1085 -@expr1073744509 1U ] ==@expr1073744510 ';' ) &&@expr1073744511 (@expr1073744512 pos2@var1086 ==@expr1073744513 userDefines@var1083 .@expr2665 size (@expr2666 ) ||@expr1073744516 userDefines@var1083 [@expr1073744517 pos2@var1086 ] ==@expr1073744518 '=' ) ) {
322: return true ; }
323: pos@var1085 =@expr1073744519 pos2@var1086 ;
324: }
325: return false ;
326: }
327:
328: static std :: string cfg ( const std :: vector < std :: string > & configs@var1087 , const std :: string & userDefines@var1088 )
329: {
330: std ::@expr1073744520 set < std ::@expr2697 string > configs2@var1089 (@expr1073744522 configs@var1087 .@expr1073744523 begin (@expr1073744524 ) , configs@var1087 .@expr1073744525 end (@expr1073744526 ) ) ;
331: std ::@expr1073744527 string ret@var1090 ;
332: for (@expr1073744528 const std ::@expr2697 string &@expr1073744530 c@var1091 :@expr1073744531 configs2@var1089 ) {
333: if (@expr1073744532 c@var1091 .@expr1073744533 empty (@expr1073744534 ) ) {
334: continue ; }
335: if (@expr1073744535 c@var1091 ==@expr1073744536 "0" ) {
336: return "" ; }
337: if (@expr1073744537 hasDefine (@expr1073744538 userDefines@var1088 , c@var1091 ) ) {
338: continue ; }
339: if (@expr1073744539 !@expr1073744540 ret@var1090 .@expr1073744541 empty (@expr1073744542 ) ) {
340: ret@var1090 +=@expr1073744543 ';' ; }
341: ret@var1090 +=@expr1073744544 c@var1091 ;
342: }
343: return ret@var1090 ;
344: }
345:
346: static bool isUndefined ( const std :: string & cfg@var1092 , const std :: set < std :: string > & undefined@var1093 )
347: {
348: for (@expr1073744546 std ::@expr2723 string ::@expr2723 size_type pos1@var1094 =@expr1073744549 0U ; pos1@var1094 <@expr1073744550 cfg@var1092 .@expr1073744551 size (@expr1073744552 ) ; ) {
349: const std ::@expr2723 string ::@expr2723 size_type pos2@var1095 =@expr1073744555 cfg@var1092 .@expr1073744556 find (@expr1073744557 ';' , pos1@var1094 ) ;
350: const std ::@expr2723 string def@var1096 =@expr1073744559 (@expr1073744560 pos2@var1095 ==@expr2737 std ::@expr2738 string ::@expr2739 npos@expr2721 ) ?@expr1073744564 cfg@var1092 .@expr2741 substr (@expr1073744566 pos1@var1094 ) :@expr1073744567 cfg@var1092 .@expr2741 substr (@expr1073744569 pos1@var1094 , pos2@var1095 -@expr1073744570 pos1@var1094 ) ;
351:
352: const std ::@expr2723 string ::@expr2723 size_type eq@var1097 =@expr1073744573 def@var1096 .@expr1073744574 find (@expr1073744575 '=' ) ;
353: if (@expr1073744576 eq@var1097 ==@expr1073744577 std ::@expr2738 string ::@expr2739 npos &&@expr1073744580 undefined@var1093 .@expr2757 find (@expr1073744582 def@var1096 ) !=@expr1073744583 undefined@var1093 .@expr2760 end (@expr2761 ) ) {
354: return true ; }
355: if (@expr1073744586 eq@var1097 !=@expr1073744587 std ::@expr2738 string ::@expr2739 npos &&@expr1073744590 undefined@var1093 .@expr2757 find (@expr1073744592 def@var1096 .@expr2769 substr (@expr1073744594 0 , eq@var1097 ) ) !=@expr1073744595 undefined@var1093 .@expr2760 end (@expr2761 ) &&@expr1073744598 def@var1096 .@expr2769 substr (@expr1073744600 eq@var1097 ) !=@expr1073744601 "=0" ) {
356: return true ; }
357:
358: pos1@var1094 =@expr1073744602 (@expr1073744603 pos2@var1095 ==@expr2737 std ::@expr2738 string ::@expr2739 npos@expr2721 ) ?@expr1073744607 pos2@var1095 :@expr1073744608 pos2@var1095 +@expr1073744609 1U ;
359: }
360: return false ;
361: }
362:
363: static bool getConfigsElseIsFalse ( const std :: vector < std :: string > & configs_if@var1098 , const std :: string & userDefines@var1099 )
364: {
365: return std ::@expr1073744610 any_of (@expr1073744611 configs_if@var1098 .@expr1073744612 cbegin (@expr1073744613 ) , configs_if@var1098 .@expr1073744614 cend (@expr1073744615 ) ,
366: [@expr1073744616 =@expr1073744617 ] (@expr1073744618 const std ::@expr1073744619 string &@expr1073744620 cfg@var1100 ) {
367: return hasDefine (@expr1073744621 userDefines@var1099 , cfg@var1100 ) ;
368: } ) ;
369: }
370:
371: static const simplecpp :: Token * gotoEndIf ( const simplecpp :: Token * cmdtok@var1101 )
372: {
373: int level@var1102 ; level@var1102 =@expr1073744622 0 ;
374: while (@expr1073744623 nullptr !=@expr1073744624 (@expr1073744625 cmdtok@var1101 =@expr1073744626 cmdtok@var1101 .@expr2803 next@var1103 ) ) {
375: if (@expr1073744628 cmdtok@var1101 .@expr1073744629 op@var1104 ==@expr1073744630 '#' &&@expr1073744631 !@expr1073744632 sameline (@expr1073744633 cmdtok@var1101 .@expr1073744634 previous@var1105 , cmdtok@var1101 ) &&@expr1073744635 sameline (@expr1073744636 cmdtok@var1101 , cmdtok@var1101 .@expr2803 next@var1103 ) ) {
376: if (@expr1073744638 cmdtok@var1101 .@expr2803 next@var1103 .@expr2816 str (@expr2817 ) .@expr1073744642 compare (@expr1073744643 0 , 2 , "if" ) ==@expr1073744644 0 ) {
377: ++@expr1073744645 level@var1102 ; }
378: else { if (@expr1073744646 cmdtok@var1101 .@expr2803 next@var1103 .@expr2816 str (@expr2817 ) ==@expr1073744650 "endif" ) {
379: --@expr1073744651 level@var1102 ;
380: if (@expr1073744652 level@var1102 <@expr1073744653 0 ) {
381: return cmdtok@var1101 ; }
382: } }
383: }
384: }
385: return nullptr ;
386: }
387:
388: static void getConfigs ( const simplecpp :: TokenList & tokens@var1106 , std :: set < std :: string > & defined@var1107 , const std :: string & userDefines@var1108 , const std :: set < std :: string > & undefined@var1109 , std :: set < std :: string > & ret@var1110 )
389: {
390: std ::@expr1073744655 vector < std ::@expr2832 string > configs_if@var1111 ;
391: std ::@expr1073744657 vector < std ::@expr2832 string > configs_ifndef@var1112 ;
392: std ::@expr1073744659 string elseError@var1113 ;
393:
394: for (@expr1073744660 const simplecpp ::@expr2832 Token *@expr2838 tok@var1114 =@expr1073744663 tokens@var1106 .@expr1073744664 cfront (@expr1073744665 ) ; tok@var1114 ; tok@var1114 =@expr1073744666 tok@var1114 .@expr2843 next@var1115 ) {
395: if (@expr1073744668 tok@var1114 .@expr1073744669 op@var1116 !=@expr1073744670 '#' ||@expr1073744671 sameline (@expr1073744672 tok@var1114 .@expr2849 previous@var1117 , tok@var1114 ) ) {
396: continue ; }
397: const simplecpp ::@expr2850 Token * cmdtok@var1118 ; cmdtok@var1118 =@expr1073744675 tok@var1114 .@expr2843 next@var1115 ;
398: if (@expr1073744677 !@expr1073744678 sameline (@expr1073744679 tok@var1114 , cmdtok@var1118 ) ) {
399: continue ; }
400: if (@expr1073744680 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2859 "ifdef" ||@expr2860 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2863 "ifndef" ||@expr1073744688 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2867 "if" ) {
401: std ::@expr1073744692 string config@var1119 ;
402: if (@expr1073744693 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2859 "ifdef" ||@expr2860 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2863 "ifndef" ) {
403: const simplecpp ::@expr2850 Token * expr1@var1120 ; expr1@var1120 =@expr1073744702 cmdtok@var1118 .@expr2879 next@var1121 ;
404: if (@expr1073744704 sameline (@expr1073744705 tok@var1114 , expr1@var1120 ) &&@expr1073744706 expr1@var1120 .@expr1073744707 name@var1122 &&@expr1073744708 !@expr1073744709 sameline (@expr1073744710 tok@var1114 , expr1@var1120 .@expr1073744711 next@var1123 ) ) {
405: config@var1119 =@expr1073744712 expr1@var1120 .@expr1073744713 str (@expr1073744714 ) ; }
406: if (@expr1073744715 defined@var1107 .@expr1073744716 find (@expr1073744717 config@var1119 ) !=@expr1073744718 defined@var1107 .@expr1073744719 end (@expr1073744720 ) ) {
407: config@var1119 .@expr2897 clear (@expr2898 ) ; }
408: } else { if (@expr1073744723 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2867 "if" ) {
409: config@var1119 =@expr1073744727 readcondition (@expr2904 cmdtok@var1118 , defined@var1107 , undefined@var1109 ) ;
410: } }
411:
412:
413: if (@expr1073744729 isUndefined (@expr1073744730 config@var1119 , undefined@var1109 ) ) {
414: config@var1119 .@expr2897 clear (@expr2898 ) ; }
415:
416: bool ifndef@var1124 ; ifndef@var1124 =@expr1073744733 false ;
417: if (@expr1073744734 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2863 "ifndef" ) {
418: ifndef@var1124 =@expr1073744738 true ; }
419: else {
420: const std ::@expr2832 vector < std ::@expr2832 string > match@var1125 {@expr1073744741 "if" , "!" , "defined" , "(" , config@var1119 , ")" } ;
421: int i@var1126 ; i@var1126 =@expr1073744742 0 ;
422: ifndef@var1124 =@expr1073744743 true ;
423: for (@expr1073744744 const simplecpp ::@expr2832 Token *@expr2838 t@var1127 =@expr1073744747 cmdtok@var1118 ; i@var1126 <@expr1073744748 match@var1125 .@expr1073744749 size (@expr1073744750 ) ; t@var1127 =@expr1073744751 t@var1127 .@expr1073744752 next@var1128 ) {
424: if (@expr1073744753 !@expr1073744754 t@var1127 ||@expr1073744755 t@var1127 .@expr1073744756 str (@expr1073744757 ) !=@expr1073744758 match@var1125 [@expr1073744759 i@var1126 ++@expr1073744760 ] ) {
425: ifndef@var1124 =@expr1073744761 false ;
426: break ;
427: }
428: }
429: }
430:
431:
432: if (@expr1073744762 ifndef@var1124 &&@expr1073744763 tok@var1114 .@expr2940 location@var1129 .@expr2941 fileIndex@var1130 >@expr1073744766 0 ) {
433: bool includeGuard@var1131 ; includeGuard@var1131 =@expr1073744767 true ;
434: for (@expr1073744768 const simplecpp ::@expr2832 Token *@expr2838 t@var1132 =@expr1073744771 tok@var1114 .@expr2849 previous@var1117 ; t@var1132 ; t@var1132 =@expr1073744773 t@var1132 .@expr1073744774 previous@var1133 ) {
435: if (@expr1073744775 t@var1132 .@expr1073744776 location@var1134 .@expr1073744777 fileIndex@var1135 ==@expr1073744778 tok@var1114 .@expr2940 location@var1129 .@expr2941 fileIndex@var1130 ) {
436: includeGuard@var1131 =@expr1073744781 false ;
437: break ;
438: }
439: }
440: if (@expr1073744782 includeGuard@var1131 ) {
441: configs_if@var1111 .@expr2959 push_back (@expr1073744784 std ::@expr2961 string (@expr2962 ) ) ;
442: configs_ifndef@var1112 .@expr2963 push_back (@expr1073744788 std ::@expr2961 string (@expr2962 ) ) ;
443: continue ;
444: }
445: }
446:
447: configs_if@var1111 .@expr2959 push_back (@expr1073744792 (@expr1073744793 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2863 "ifndef" ) ?@expr1073744797 std ::@expr2961 string (@expr2962 ) :@expr1073744800 config@var1119 ) ;
448: configs_ifndef@var1112 .@expr2963 push_back (@expr1073744802 (@expr1073744803 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2863 "ifndef" ) ?@expr1073744807 config@var1119 :@expr1073744808 std ::@expr2961 string (@expr2962 ) ) ;
449: ret@var1110 .@expr2987 insert (@expr2988 cfg (@expr2989 configs_if@var1111 , userDefines@var1108 ) ) ;
450: } else { if (@expr1073744814 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2993 "elif" ||@expr1073744818 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2997 "else" ) {
451: if (@expr1073744822 getConfigsElseIsFalse (@expr1073744823 configs_if@var1111 , userDefines@var1108 ) ) {
452: tok@var1114 =@expr1073744824 gotoEndIf (@expr1073744825 tok@var1114 ) ;
453: if (@expr1073744826 !@expr1073744827 tok@var1114 ) {
454: break ; }
455: tok@var1114 =@expr1073744828 tok@var1114 .@expr2849 previous@var1117 ;
456: continue ;
457: }
458: if (@expr1073744830 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2997 "else" &&@expr1073744834
459: cmdtok@var1118 .@expr2879 next@var1121 &&@expr1073744836
460: !@expr1073744837 sameline (@expr1073744838 cmdtok@var1118 , cmdtok@var1118 .@expr2879 next@var1121 ) &&@expr1073744840
461: sameline (@expr1073744841 cmdtok@var1118 .@expr2879 next@var1121 , cmdtok@var1118 .@expr2879 next@var1121 .@expr3020 next@var1136 ) &&@expr1073744845
462: cmdtok@var1118 .@expr2879 next@var1121 .@expr1073744847 op@var1137 ==@expr1073744848 '#' &&@expr1073744849
463: cmdtok@var1118 .@expr2879 next@var1121 .@expr3020 next@var1136 .@expr1073744852 str (@expr1073744853 ) ==@expr1073744854 "error" ) {
464: const std ::@expr2832 string &@expr3032 ifcfg@var1138 =@expr1073744857 cfg (@expr2989 configs_if@var1111 , userDefines@var1108 ) ;
465: if (@expr1073744859 !@expr1073744860 ifcfg@var1138 .@expr1073744861 empty (@expr1073744862 ) ) {
466: if (@expr3039 !@expr3040 elseError@var1113 .@expr3041 empty (@expr3042 ) ) {
467: elseError@var1113 +=@expr1073744867 ';' ; }
468: elseError@var1113 +=@expr1073744868 ifcfg@var1138 ;
469: }
470: }
471: if (@expr3045 !@expr3046 configs_if@var1111 .@expr3047 empty (@expr3048 ) ) {
472: configs_if@var1111 .@expr3049 pop_back (@expr3050 ) ; }
473: if (@expr1073744875 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr2993 "elif" ) {
474: std ::@expr1073744879 string config@var1139 ; config@var1139 =@expr1073744880 readcondition (@expr2904 cmdtok@var1118 , defined@var1107 , undefined@var1109 ) ;
475: if (@expr1073744882 isUndefined (@expr1073744883 config@var1139 , undefined@var1109 ) ) {
476: config@var1139 .@expr1073744884 clear (@expr1073744885 ) ; }
477: configs_if@var1111 .@expr2959 push_back (@expr1073744887 config@var1139 ) ;
478: ret@var1110 .@expr2987 insert (@expr2988 cfg (@expr2989 configs_if@var1111 , userDefines@var1108 ) ) ;
479: } else { if (@expr3067 !@expr3068 configs_ifndef@var1112 .@expr3069 empty (@expr3070 ) ) {
480: configs_if@var1111 .@expr2959 push_back (@expr1073744896 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) ) ;
481: ret@var1110 .@expr2987 insert (@expr2988 cfg (@expr2989 configs_if@var1111 , userDefines@var1108 ) ) ;
482: } }
483: } else { if (@expr1073744902 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr1073744905 "endif" &&@expr1073744906 !@expr1073744907 sameline (@expr3084 tok@var1114 , cmdtok@var1118 .@expr2879 next@var1121 ) ) {
484: if (@expr3045 !@expr3046 configs_if@var1111 .@expr3047 empty (@expr3048 ) ) {
485: configs_if@var1111 .@expr3049 pop_back (@expr3050 ) ; }
486: if (@expr3067 !@expr3068 configs_ifndef@var1112 .@expr3069 empty (@expr3070 ) ) {
487: configs_ifndef@var1112 .@expr1073744920 pop_back (@expr1073744921 ) ; }
488: } else { if (@expr1073744922 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr1073744925 "error" ) {
489: if (@expr1073744926 !@expr3068 configs_ifndef@var1112 .@expr3069 empty (@expr3070 ) &&@expr1073744930 !@expr1073744931 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) .@expr1073744934 empty (@expr1073744935 ) ) {
490: if (@expr1073744936 configs_ifndef@var1112 .@expr1073744937 size (@expr1073744938 ) ==@expr1073744939 1U ) {
491: ret@var1110 .@expr3116 erase (@expr3117 "" ) ; }
492: std ::@expr1073744942 vector < std ::@expr2832 string > configs@var1140 (@expr1073744944 configs_if@var1111 ) ;
493: configs@var1140 .@expr1073744945 push_back (@expr1073744946 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) ) ;
494: ret@var1110 .@expr3116 erase (@expr1073744950 cfg (@expr1073744951 configs@var1140 , userDefines@var1108 ) ) ;
495: std ::@expr1073744952 set < std ::@expr2832 string > temp@var1141 ;
496: temp@var1141 .@expr1073744954 swap (@expr1073744955 ret@var1110 ) ;
497: for (@expr1073744956 const std ::@expr2832 string &@expr3032 c@var1142 :@expr1073744959 temp@var1141 ) {
498: if (@expr1073744960 c@var1142 .@expr1073744961 find (@expr1073744962 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) ) !=@expr1073744965 std ::@expr2961 string ::@expr1073744967 npos@expr1073744654 ) {
499: ret@var1110 .@expr2987 insert (@expr1073744969 c@var1142 ) ; }
500: else { if (@expr1073744970 c@var1142 .@expr1073744971 empty (@expr1073744972 ) ) {
501: ret@var1110 .@expr2987 insert (@expr1073744974 configs@var1140 .@expr1073744975 empty (@expr1073744976 ) ?@expr1073744977 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) :@expr1073744980 "" ) ; }
502: else {
503: ret@var1110 .@expr2987 insert (@expr1073744982 c@var1142 +@expr1073744983 ";" +@expr1073744984 configs_ifndef@var1112 .@expr3073 back (@expr3074 ) ) ; } }
504: }
505: if (@expr3039 !@expr3040 elseError@var1113 .@expr3041 empty (@expr3042 ) ) {
506: elseError@var1113 +=@expr1073744991 ';' ; }
507: elseError@var1113 +=@expr1073744992 cfg (@expr1073744993 configs_ifndef@var1112 , userDefines@var1108 ) ;
508: }
509: if (@expr1073744994 !@expr3046 configs_if@var1111 .@expr3047 empty (@expr3048 ) &&@expr1073744998 !@expr1073744999 configs_if@var1111 .@expr3176 back (@expr3177 ) .@expr1073745002 empty (@expr1073745003 ) ) {
510: const std ::@expr2832 string &@expr3032 last@var1143 =@expr1073745006 configs_if@var1111 .@expr3176 back (@expr3177 ) ;
511: if (@expr1073745009 last@var1143 .@expr3186 size (@expr3187 ) >@expr1073745012 2U &&@expr1073745013 last@var1143 .@expr1073745014 compare (@expr1073745015 last@var1143 .@expr3186 size (@expr3187 ) -@expr3194 2U , 2 , "=0" ) ==@expr1073745019 0 ) {
512: std ::@expr1073745020 vector < std ::@expr2832 string > configs@var1144 (@expr1073745022 configs_if@var1111 ) ;
513: ret@var1110 .@expr3116 erase (@expr1073745024 cfg (@expr3201 configs@var1144 , userDefines@var1108 ) ) ;
514: configs@var1144 [@expr1073745026 configs@var1144 .@expr3203 size (@expr3204 ) -@expr1073745029 1U ] =@expr1073745030 last@var1143 .@expr1073745031 substr (@expr1073745032 0 , last@var1143 .@expr3186 size (@expr3187 ) -@expr3194 2U ) ;
515: if (@expr1073745036 configs@var1144 .@expr3203 size (@expr3204 ) ==@expr1073745039 1U ) {
516: ret@var1110 .@expr3116 erase (@expr3117 "" ) ; }
517: if (@expr3039 !@expr3040 elseError@var1113 .@expr3041 empty (@expr3042 ) ) {
518: elseError@var1113 +=@expr1073745046 ';' ; }
519: elseError@var1113 +=@expr1073745047 cfg (@expr3201 configs@var1144 , userDefines@var1108 ) ;
520: }
521: }
522: } else { if (@expr1073745049 cmdtok@var1118 .@expr2857 str (@expr2858 ) ==@expr1073745052 "define" &&@expr1073745053 sameline (@expr3084 tok@var1114 , cmdtok@var1118 .@expr2879 next@var1121 ) &&@expr1073745056 cmdtok@var1118 .@expr2879 next@var1121 .@expr1073745058 name@var1145 ) {
523: defined@var1107 .@expr1073745059 insert (@expr1073745060 cmdtok@var1118 .@expr2879 next@var1121 .@expr1073745062 str (@expr1073745063 ) ) ;
524: } } } } }
525: }
526: if (@expr3039 !@expr3040 elseError@var1113 .@expr3041 empty (@expr3042 ) ) {
527: ret@var1110 .@expr2987 insert (@expr1073745069 elseError@var1113 ) ; }
528: }
529:
530:
531: std :: set < std :: string > Preprocessor :: getConfigs ( const simplecpp :: TokenList & tokens@var1146 ) const
532: {
533: std ::@expr1073745070 set < std ::@expr3247 string > ret@var1147 ; ret@var1147 =@expr1073745072 {@expr1073745073 "" } ;
534: if (@expr1073745074 !@expr1073745075 tokens@var1146 .@expr1073745076 cfront (@expr1073745077 ) ) {
535: return ret@var1147 ; }
536:
537: std ::@expr1073745078 set < std ::@expr3247 string > defined@var1148 ; defined@var1148 =@expr1073745080 {@expr1073745081 "__cplusplus" } ;
538:
539: ::@expr3247 getConfigs (@expr1073745083 tokens@var1146 , defined@var1148 , mSettings@var65 .@expr3260 userDefines@var1372 , mSettings@var65 .@expr3261 userUndefs@var1373 , ret@var1147 ) ;
540:
541: for (@expr1073745086 std ::@expr3247 map < std ::@expr3247 string , simplecpp ::@expr3247 TokenList *@expr1073745090 > ::@expr3247 const_iterator it@var1149 =@expr1073745092 mTokenLists@var68 .@expr1073745093 begin (@expr1073745094 ) ; it@var1149 !=@expr1073745095 mTokenLists@var68 .@expr1073745096 end (@expr1073745097 ) ; ++@expr1073745098 it@var1149 ) {
542: if (@expr1073745099 !@expr1073745100 mSettings@var65 .@expr1073745101 configurationExcluded (@expr1073745102 it@var1149 .@expr1073745103 first@var1150 ) ) {
543: ::@expr3247 getConfigs (@expr1073745105 *@expr1073745106 it@var1149 .@expr1073745107 second@var1151 , defined@var1148 , mSettings@var65 .@expr3260 userDefines@var1372 , mSettings@var65 .@expr3261 userUndefs@var1373 , ret@var1147 ) ; }
544: }
545:
546: return ret@var1147 ;
547: }
548:
549:
550: void Preprocessor :: preprocess ( std :: istream & istr@var1152 , std :: map < std :: string , std :: string > & result@var1153 , const std :: string & filename@var1154 , const std :: list < std :: string > & includePaths@var1155 )
551: {
552: (@expr1073745110 void ) includePaths@var1155 ;
553:
554: simplecpp ::@expr1073745111 OutputList outputList@var1156 ;
555: std ::@expr1073745112 vector < std ::@expr3289 string > files@var1157 ;
556: const simplecpp ::@expr1073745114 TokenList tokens1@var1158 (@expr1073745115 istr@var1152 , files@var1157 , filename@var1154 , &@expr1073745116 outputList@var1156 ) ;
557:
558: const std ::@expr1073745117 set < std ::@expr3289 string > configs@var1159 =@expr1073745119 getConfigs (@expr1073745120 tokens1@var1158 ) ;
559:
560: for (@expr1073745121 const std ::@expr3289 string &@expr1073745123 c@var1160 :@expr1073745124 configs@var1159 ) {
561: if (@expr1073745125 mSettings@var65 .@expr3302 userUndefs@var1373 .@expr1073745127 find (@expr1073745128 c@var1160 ) ==@expr1073745129 mSettings@var65 .@expr3302 userUndefs@var1373 .@expr1073745131 end (@expr1073745132 ) ) {
562: result@var1153 [@expr1073745133 c@var1160 ] =@expr1073745134 getcode (@expr1073745135 tokens1@var1158 , c@var1160 , files@var1157 , false ) ;
563: }
564: }
565: }
566:
567: void Preprocessor :: preprocess ( std :: istream & srcCodeStream@var1161 , std :: string & processedFile@var1162 , std :: list < std :: string > & resultConfigurations@var1163 , const std :: string & filename@var1164 , const std :: list < std :: string > & includePaths@var1165 )
568: {
569: (@expr1073745136 void ) includePaths@var1165 ;
570:
571: if (@expr1073745137 mFile0@var69 .@expr1073745138 empty (@expr1073745139 ) ) {
572: mFile0@var69 =@expr1073745140 filename@var1164 ; }
573:
574: simplecpp ::@expr1073745141 OutputList outputList@var1166 ;
575: std ::@expr1073745142 vector < std ::@expr3319 string > files@var1167 ;
576: const simplecpp ::@expr1073745144 TokenList tokens1@var1168 (@expr1073745145 srcCodeStream@var1161 , files@var1167 , filename@var1164 , &@expr1073745146 outputList@var1166 ) ;
577:
578: const std ::@expr1073745147 set < std ::@expr3319 string > configs@var1169 =@expr1073745149 getConfigs (@expr1073745150 tokens1@var1168 ) ;
579: std ::@expr1073745151 copy (@expr1073745152 configs@var1169 .@expr1073745153 cbegin (@expr1073745154 ) , configs@var1169 .@expr1073745155 cend (@expr1073745156 ) , std ::@expr1073745157 back_inserter (@expr1073745158 resultConfigurations@var1163 ) ) ;
580:
581: processedFile@var1162 =@expr1073745159 tokens1@var1168 .@expr1073745160 stringify (@expr1073745161 ) ;
582: }
583:
584: static void splitcfg ( const std :: string & cfg@var1170 , std :: list < std :: string > & defines@var1171 , const std :: string & defaultValue@var1172 )
585: {
586: for (@expr1073745163 std ::@expr3340 string ::@expr3340 size_type defineStartPos@var1173 =@expr1073745166 0U ; defineStartPos@var1173 <@expr1073745167 cfg@var1170 .@expr1073745168 size (@expr1073745169 ) ; ) {
587: const std ::@expr3340 string ::@expr3340 size_type defineEndPos@var1174 =@expr1073745172 cfg@var1170 .@expr1073745173 find (@expr1073745174 ';' , defineStartPos@var1173 ) ;
588: std ::@expr1073745175 string def@var1175 ; def@var1175 =@expr1073745176 (@expr1073745177 defineEndPos@var1174 ==@expr3354 std ::@expr3355 string ::@expr3356 npos@expr3338 ) ?@expr1073745181 cfg@var1170 .@expr3358 substr (@expr1073745183 defineStartPos@var1173 ) :@expr1073745184 cfg@var1170 .@expr3358 substr (@expr1073745186 defineStartPos@var1173 , defineEndPos@var1174 -@expr1073745187 defineStartPos@var1173 ) ;
589: if (@expr1073745188 !@expr1073745189 defaultValue@var1172 .@expr1073745190 empty (@expr1073745191 ) &&@expr1073745192 def@var1175 .@expr1073745193 find (@expr1073745194 '=' ) ==@expr1073745195 std ::@expr3355 string ::@expr3356 npos@expr3338 ) {
590: def@var1175 +=@expr1073745198 '=' +@expr1073745199 defaultValue@var1172 ; }
591: defines@var1171 .@expr1073745200 push_back (@expr1073745201 def@var1175 ) ;
592: if (@expr1073745202 defineEndPos@var1174 ==@expr3354 std ::@expr3355 string ::@expr3356 npos@expr3338 ) {
593: break ; }
594: defineStartPos@var1173 =@expr1073745206 defineEndPos@var1174 +@expr1073745207 1U ;
595: }
596: }
597:
598: static simplecpp :: DUI createDUI ( const Settings & mSettings@var1176 , const std :: string & cfg@var1177 , const std :: string & filename@var1178 )
599: {
600: simplecpp ::@expr1073745209 DUI dui@var1179 ;
601:
602: splitcfg (@expr1073745210 mSettings@var1176 .@expr1073745211 userDefines@var1180 , dui@var1179 .@expr3388 defines@var1181 , "1" ) ;
603: if (@expr1073745213 !@expr1073745214 cfg@var1177 .@expr1073745215 empty (@expr1073745216 ) ) {
604: splitcfg (@expr1073745217 cfg@var1177 , dui@var1179 .@expr3388 defines@var1181 , emptyString@var1 ) ; }
605:
606: for (@expr1073745219 const std ::@expr3396 string &@expr1073745221 def@var1182 :@expr1073745222 mSettings@var1176 .@expr1073745223 library@var1183 .@expr1073745224 defines@var1184 ) {
607: const std ::@expr3396 string ::@expr3396 size_type pos@var1185 =@expr1073745227 def@var1182 .@expr1073745228 find_first_of (@expr1073745229 " (" ) ;
608: if (@expr1073745230 pos@var1185 ==@expr1073745231 std ::@expr1073745232 string ::@expr1073745233 npos@expr1073745208 ) {
609: dui@var1179 .@expr3388 defines@var1181 .@expr3411 push_back (@expr1073745236 def@var1182 ) ;
610: continue ;
611: }
612: std ::@expr1073745237 string s@var1186 ; s@var1186 =@expr1073745238 def@var1182 ;
613: if (@expr1073745239 s@var1186 [@expr3416 pos@var1185 ] ==@expr1073745241 ' ' ) {
614: s@var1186 [@expr3416 pos@var1185 ] =@expr1073745243 '=' ;
615: } else {
616: s@var1186 [@expr1073745244 s@var1186 .@expr1073745245 find (@expr1073745246 ')' ) +@expr1073745247 1 ] =@expr1073745248 '=' ;
617: }
618: dui@var1179 .@expr3388 defines@var1181 .@expr3411 push_back (@expr1073745251 s@var1186 ) ;
619: }
620:
621: dui@var1179 .@expr1073745252 undefined@var1187 =@expr1073745253 mSettings@var1176 .@expr1073745254 userUndefs@var1188 ;
622: dui@var1179 .@expr1073745255 includePaths@var1189 =@expr1073745256 mSettings@var1176 .@expr1073745257 includePaths@var1190 ;
623: dui@var1179 .@expr1073745258 includes@var1191 =@expr1073745259 mSettings@var1176 .@expr1073745260 userIncludes@var1192 ;
624:
625: if (@expr1073745261 Path ::@expr1073745262 isCPP (@expr1073745263 filename@var1178 ) ) {
626: dui@var1179 .@expr3440 std@var1193 =@expr1073745265 mSettings@var1176 .@expr3442 standards@var1194 .@expr1073745267 getCPP (@expr1073745268 ) ; }
627: else {
628: dui@var1179 .@expr3440 std@var1193 =@expr1073745270 mSettings@var1176 .@expr3442 standards@var1194 .@expr1073745272 getC (@expr1073745273 ) ; }
629: return dui@var1179 ;
630: }
631:
632: static bool hasErrors ( const simplecpp :: OutputList & outputList@var1195 )
633: {
634: for (@expr1073745274 simplecpp ::@expr3451 OutputList ::@expr3451 const_iterator it@var1196 =@expr1073745277 outputList@var1195 .@expr1073745278 begin (@expr1073745279 ) ; it@var1196 !=@expr1073745280 outputList@var1195 .@expr1073745281 end (@expr1073745282 ) ; ++@expr1073745283 it@var1196 ) {
635: switch (@expr1073745284 it@var1196 .@expr1073745285 type@var1197 ) {
636: case simplecpp ::@expr3462 Output ::@expr1073745287 ERROR :@expr3464
637: case simplecpp ::@expr3462 Output ::@expr1073745290 INCLUDE_NESTED_TOO_DEEPLY :@expr3464
638: case simplecpp ::@expr3462 Output ::@expr1073745293 SYNTAX_ERROR :@expr3464
639: case simplecpp ::@expr3462 Output ::@expr1073745296 UNHANDLED_CHAR_ERROR :@expr3464
640: case simplecpp ::@expr3462 Output ::@expr1073745299 EXPLICIT_INCLUDE_NOT_FOUND :@expr3464 ;
641: return true ;
642: case simplecpp ::@expr3462 Output ::@expr1073745302 WARNING :@expr3464
643: case simplecpp ::@expr3462 Output ::@expr1073745305 MISSING_HEADER :@expr3464
644: case simplecpp ::@expr3462 Output ::@expr1073745308 PORTABILITY_BACKSLASH :@expr3464 ;
645: break ;
646: }
647: }
648: return false ;
649: }
650:
651: void Preprocessor :: handleErrors ( const simplecpp :: OutputList & outputList@var1198 , bool throwError@var1199 )
652: {
653: const bool showerror@var1200 =@expr1073745310 !@expr1073745311 mSettings@var65 .@expr1073745312 userDefines@var1372 .@expr1073745313 empty (@expr1073745314 ) &&@expr1073745315 !@expr1073745316 mSettings@var65 .@expr1073745317 force@var1374 ;
654: reportOutput (@expr1073745318 outputList@var1198 , showerror@var1200 ) ;
655: if (@expr1073745319 throwError@var1199 ) {
656: for (@expr1073745320 const simplecpp ::@expr1073745321 Output &@expr1073745322 output@var1201 :@expr1073745323 outputList@var1198 ) {
657: switch (@expr1073745324 output@var1201 .@expr1073745325 type@var1202 ) {
658: case simplecpp ::@expr3502 Output ::@expr1073745327 ERROR :@expr3504
659: case simplecpp ::@expr3502 Output ::@expr1073745330 INCLUDE_NESTED_TOO_DEEPLY :@expr3504
660: case simplecpp ::@expr3502 Output ::@expr1073745333 SYNTAX_ERROR :@expr3504
661: case simplecpp ::@expr3502 Output ::@expr1073745336 UNHANDLED_CHAR_ERROR :@expr3504
662: case simplecpp ::@expr3502 Output ::@expr1073745339 EXPLICIT_INCLUDE_NOT_FOUND :@expr3504 ;
663: throw output@var1201 ;
664: case simplecpp ::@expr3502 Output ::@expr1073745342 WARNING :@expr3504
665: case simplecpp ::@expr3502 Output ::@expr1073745345 MISSING_HEADER :@expr3504
666: case simplecpp ::@expr3502 Output ::@expr1073745348 PORTABILITY_BACKSLASH :@expr3504 ;
667: break ;
668: }
669: }
670: }
671: }
672:
673: bool Preprocessor :: loadFiles ( const simplecpp :: TokenList & rawtokens@var1203 , std :: vector < std :: string > & files@var1204 )
674: {
675: const simplecpp ::@expr1073745350 DUI dui@var1205 =@expr1073745351 createDUI (@expr1073745352 mSettings@var65 , emptyString@var1 , files@var1204 [@expr1073745353 0 ] ) ;
676:
677: simplecpp ::@expr1073745354 OutputList outputList@var1206 ;
678: mTokenLists@var68 =@expr1073745355 simplecpp ::@expr1073745356 load (@expr1073745357 rawtokens@var1203 , files@var1204 , dui@var1205 , &@expr1073745358 outputList@var1206 ) ;
679: handleErrors (@expr1073745359 outputList@var1206 , false ) ;
680: return !@expr1073745360 hasErrors (@expr1073745361 outputList@var1206 ) ;
681: }
682:
683: void Preprocessor :: removeComments ( )
684: {
685: for (@expr1073745362 std ::@expr3539 pair < const std ::@expr3539 string , simplecpp ::@expr3539 TokenList *@expr1073745366 > &@expr1073745367 tokenList@var1207 :@expr1073745368 mTokenLists@var68 ) {
686: if (@expr1073745369 tokenList@var1207 .@expr3546 second@var1208 ) {
687: tokenList@var1207 .@expr3546 second@var1208 .@expr1073745372 removeComments (@expr1073745373 ) ; }
688: }
689: }
690:
691: void Preprocessor :: setPlatformInfo ( simplecpp :: TokenList * tokens@var1209 ) const
692: {
693: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745375 "bool" ] =@expr1073745376 mSettings@var65 .@expr1073745377 sizeof_bool@var1375 ;
694: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745379 "short" ] =@expr1073745380 mSettings@var65 .@expr1073745381 sizeof_short@var1376 ;
695: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745383 "int" ] =@expr1073745384 mSettings@var65 .@expr1073745385 sizeof_int@var1377 ;
696: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745387 "long" ] =@expr1073745388 mSettings@var65 .@expr1073745389 sizeof_long@var1378 ;
697: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745391 "long long" ] =@expr1073745392 mSettings@var65 .@expr1073745393 sizeof_long_long@var1379 ;
698: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745395 "float" ] =@expr1073745396 mSettings@var65 .@expr1073745397 sizeof_float@var1380 ;
699: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745399 "double" ] =@expr1073745400 mSettings@var65 .@expr1073745401 sizeof_double@var1381 ;
700: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745403 "long double" ] =@expr1073745404 mSettings@var65 .@expr1073745405 sizeof_long_double@var1382 ;
701: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745407 "bool *" ] =@expr1073745408 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
702: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745411 "short *" ] =@expr1073745412 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
703: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745415 "int *" ] =@expr1073745416 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
704: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745419 "long *" ] =@expr1073745420 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
705: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745423 "long long *" ] =@expr1073745424 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
706: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745427 "float *" ] =@expr1073745428 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
707: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745431 "double *" ] =@expr1073745432 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
708: tokens@var1209 .@expr3550 sizeOfType@var1210 [@expr1073745435 "long double *" ] =@expr1073745436 mSettings@var65 .@expr3585 sizeof_pointer@var1383 ;
709: }
710:
711: simplecpp :: TokenList Preprocessor :: preprocess ( const simplecpp :: TokenList & tokens1@var1211 , const std :: string & cfg@var1212 , std :: vector < std :: string > & files@var1213 , bool throwError@var1214 )
712: {
713: const simplecpp ::@expr3614 DUI dui@var1215 =@expr1073745439 createDUI (@expr1073745440 mSettings@var65 , cfg@var1212 , files@var1213 [@expr1073745441 0 ] ) ;
714:
715: simplecpp ::@expr1073745442 OutputList outputList@var1216 ;
716: std ::@expr1073745443 list < simplecpp ::@expr3614 MacroUsage > macroUsage@var1217 ;
717: std ::@expr1073745445 list < simplecpp ::@expr3614 IfCond > ifCond@var1218 ;
718: simplecpp ::@expr1073745447 TokenList tokens2@var1219 (@expr1073745448 files@var1213 ) ;
719: simplecpp ::@expr1073745449 preprocess (@expr1073745450 tokens2@var1219 , tokens1@var1211 , files@var1213 , mTokenLists@var68 , dui@var1215 , &@expr1073745451 outputList@var1216 , &@expr1073745452 macroUsage@var1217 , &@expr1073745453 ifCond@var1218 ) ;
720: mMacroUsage@var70 =@expr1073745454 macroUsage@var1217 ;
721: mIfCond@var71 =@expr1073745455 ifCond@var1218 ;
722:
723: handleErrors (@expr1073745456 outputList@var1216 , throwError@var1214 ) ;
724:
725: tokens2@var1219 .@expr1073745457 removeComments (@expr1073745458 ) ;
726:
727:
728: if (@expr1073745459 !@expr1073745460 validateCfg (@expr1073745461 cfg@var1212 , macroUsage@var1217 ) ) {
729: return simplecpp ::@expr1073745462 TokenList (@expr1073745463 files@var1213 ) ; }
730:
731: return tokens2@var1219 ;
732: }
733:
734: std :: string Preprocessor :: getcode ( const simplecpp :: TokenList & tokens1@var1220 , const std :: string & cfg@var1221 , std :: vector < std :: string > & files@var1222 , const bool writeLocations@var1223 )
735: {
736: simplecpp ::@expr1073745464 TokenList tokens2@var1224 ; tokens2@var1224 =@expr1073745465 preprocess (@expr1073745466 tokens1@var1220 , cfg@var1221 , files@var1222 , false ) ;
737: unsigned int prevfile@var1225 ; prevfile@var1225 =@expr1073745467 0 ;
738: unsigned int line@var1226 ; line@var1226 =@expr1073745468 1 ;
739: std ::@expr1073745469 ostringstream ret@var1227 ;
740: for (@expr1073745470 const simplecpp ::@expr1073745471 Token *@expr1073745472 tok@var1228 =@expr1073745473 tokens2@var1224 .@expr1073745474 cfront (@expr1073745475 ) ; tok@var1228 ; tok@var1228 =@expr1073745476 tok@var1228 .@expr1073745477 next@var1229 ) {
741: if (@expr1073745478 writeLocations@var1223 &&@expr1073745479 tok@var1228 .@expr3656 location@var1230 .@expr3657 fileIndex@var1231 !=@expr1073745482 prevfile@var1225 ) {
742: ret@var1227 <<@expr1073745483 "\n#line " <<@expr1073745484 tok@var1228 .@expr3656 location@var1230 .@expr3662 line@var1232 <<@expr1073745487 " \"" <<@expr1073745488 tok@var1228 .@expr3656 location@var1230 .@expr1073745490 file (@expr1073745491 ) <<@expr1073745492 "\"\n" ;
743: prevfile@var1225 =@expr1073745493 tok@var1228 .@expr3656 location@var1230 .@expr3657 fileIndex@var1231 ;
744: line@var1226 =@expr1073745496 tok@var1228 .@expr3656 location@var1230 .@expr3662 line@var1232 ;
745: }
746:
747: if (@expr1073745499 tok@var1228 .@expr1073745500 previous@var1233 &&@expr1073745501 line@var1226 >=@expr1073745502 tok@var1228 .@expr3656 location@var1230 .@expr3662 line@var1232 ) {
748: ret@var1227 <<@expr1073745505 ' ' ; }
749: while (@expr1073745506 tok@var1228 .@expr3656 location@var1230 .@expr3662 line@var1232 >@expr1073745509 line@var1226 ) {
750: ret@var1227 <<@expr1073745510 '\n' ;
751: line@var1226 ++@expr1073745511 ;
752: }
753: if (@expr1073745512 !@expr1073745513 tok@var1228 .@expr1073745514 macro@var1234 .@expr1073745515 empty (@expr1073745516 ) ) {
754: ret@var1227 <<@expr1073745517 Preprocessor ::@expr1073745518 macroChar@var8 ; }
755: ret@var1227 <<@expr1073745519 tok@var1228 .@expr1073745520 str (@expr1073745521 ) ;
756: }
757:
758: return ret@var1227 .@expr1073745522 str (@expr1073745523 ) ;
759: }
760:
761: std :: string Preprocessor :: getcode ( const std :: string & filedata@var1235 , const std :: string & cfg@var1236 , const std :: string & filename@var1237 )
762: {
763: simplecpp ::@expr1073745525 OutputList outputList@var1238 ;
764: std ::@expr1073745526 vector < std ::@expr1073745527 string > files@var1239 ;
765:
766: std ::@expr1073745528 istringstream istr@var1240 (@expr1073745529 filedata@var1235 ) ;
767: simplecpp ::@expr1073745530 TokenList tokens1@var1241 (@expr1073745531 istr@var1240 , files@var1239 , Path ::@expr1073745532 simplifyPath (@expr1073745533 filename@var1237 ) , &@expr1073745534 outputList@var1238 ) ;
768: inlineSuppressions (@expr1073745535 tokens1@var1241 ) ;
769: tokens1@var1241 .@expr1073745536 removeComments (@expr1073745537 ) ;
770: removeComments (@expr1073745538 ) ;
771: setDirectives (@expr1073745539 tokens1@var1241 ) ;
772:
773: reportOutput (@expr1073745540 outputList@var1238 , true ) ;
774:
775: if (@expr1073745541 hasErrors (@expr1073745542 outputList@var1238 ) ) {
776: return "" ; }
777:
778: std ::@expr1073745543 string ret@var1242 ;
779: try {
780: ret@var1242 =@expr1073745544 getcode (@expr1073745545 tokens1@var1241 , cfg@var1236 , files@var1239 , filedata@var1235 .@expr1073745546 find (@expr1073745547 "#file" ) !=@expr1073745548 std ::@expr1073745549 string ::@expr1073745550 npos@expr1073745524 ) ;
781:
782: mMacroUsage@var70 .@expr1073745551 clear (@expr1073745552 ) ;
783: mIfCond@var71 .@expr1073745553 clear (@expr1073745554 ) ;
784: } catch (@expr1073745555 const simplecpp ::@expr1073745556 Output &@expr1073745557 ) {
785: ret@var1242 .@expr1073745558 clear (@expr1073745559 ) ;
786: }
787: return ret@var1242 ;
788: }
789:
790: void Preprocessor :: reportOutput ( const simplecpp :: OutputList & outputList@var1243 , bool showerror@var1244 )
791: {
792: for (@expr1073745561 const simplecpp ::@expr3738 Output &@expr1073745563 out@var1245 :@expr1073745564 outputList@var1243 ) {
793: switch (@expr1073745565 out@var1245 .@expr1073745566 type@var1246 ) {
794: case simplecpp ::@expr3743 Output ::@expr1073745568 ERROR :@expr3745 ;
795: if (@expr1073745570 out@var1245 .@expr3747 msg@var1247 .@expr1073745572 compare (@expr1073745573 0 , 6 , "#error" ) !=@expr1073745574 0 ||@expr1073745575 showerror@var1244 ) {
796: error (@expr3752 out@var1245 .@expr3753 location@var1248 .@expr3754 file (@expr3755 ) , out@var1245 .@expr3753 location@var1248 .@expr3757 line@var1249 , out@var1245 .@expr3747 msg@var1247 ) ; }
797: break ;
798: case simplecpp ::@expr3743 Output ::@expr1073745584 WARNING :@expr3745
799: case simplecpp ::@expr3743 Output ::@expr1073745587 PORTABILITY_BACKSLASH :@expr3745 ;
800: break ;
801: case simplecpp ::@expr3743 Output ::@expr1073745590 MISSING_HEADER :@expr3745 ; {
802: const std ::@expr3738 string ::@expr3738 size_type pos1@var1250 =@expr1073745594 out@var1245 .@expr3747 msg@var1247 .@expr3772 find_first_of (@expr1073745597 "<\"" ) ;
803: const std ::@expr3738 string ::@expr3738 size_type pos2@var1251 =@expr1073745600 out@var1245 .@expr3747 msg@var1247 .@expr3772 find_first_of (@expr1073745603 ">\"" , pos1@var1250 +@expr1073745604 1U ) ;
804: if (@expr1073745605 pos1@var1250 <@expr1073745606 pos2@var1251 &&@expr1073745607 pos2@var1251 !=@expr1073745608 std ::@expr1073745609 string ::@expr1073745610 npos@expr1073745560 ) {
805: missingInclude (@expr1073745611 out@var1245 .@expr3753 location@var1248 .@expr3754 file (@expr3755 ) , out@var1245 .@expr3753 location@var1248 .@expr3757 line@var1249 , out@var1245 .@expr3747 msg@var1247 .@expr1073745618 substr (@expr1073745619 pos1@var1250 +@expr1073745620 1 , pos2@var1251 -@expr1073745621 pos1@var1250 -@expr1073745622 1 ) , out@var1245 .@expr3747 msg@var1247 [@expr1073745624 pos1@var1250 ] ==@expr1073745625 '\"' ?@expr1073745626 UserHeader :@expr1073745627 SystemHeader ) ; }
806: }
807: break ;
808: case simplecpp ::@expr3743 Output ::@expr1073745629 INCLUDE_NESTED_TOO_DEEPLY :@expr3745
809: case simplecpp ::@expr3743 Output ::@expr1073745632 SYNTAX_ERROR :@expr3745
810: case simplecpp ::@expr3743 Output ::@expr1073745635 UNHANDLED_CHAR_ERROR :@expr3745 ;
811: error (@expr3752 out@var1245 .@expr3753 location@var1248 .@expr3754 file (@expr3755 ) , out@var1245 .@expr3753 location@var1248 .@expr3757 line@var1249 , out@var1245 .@expr3747 msg@var1247 ) ;
812: break ;
813: case simplecpp ::@expr3743 Output ::@expr1073745645 EXPLICIT_INCLUDE_NOT_FOUND :@expr3745 ;
814: error (@expr1073745647 emptyString@var1 , 0 , out@var1245 .@expr3747 msg@var1247 ) ;
815: break ;
816: }
817: }
818: }
819:
820: void Preprocessor :: error ( const std :: string & filename@var1252 , unsigned int linenr@var1253 , const std :: string & msg@var1254 )
821: {
822: std ::@expr1073745649 list < ErrorMessage ::@expr1073745650 FileLocation > locationList@var1255 ;
823: if (@expr1073745651 !@expr1073745652 filename@var1252 .@expr1073745653 empty (@expr1073745654 ) ) {
824: std ::@expr1073745655 string file@var1256 ; file@var1256 =@expr1073745656 Path ::@expr1073745657 fromNativeSeparators (@expr1073745658 filename@var1252 ) ;
825: if (@expr1073745659 mSettings@var65 .@expr1073745660 relativePaths@var1384 ) {
826: file@var1256 =@expr1073745661 Path ::@expr1073745662 getRelativePath (@expr1073745663 file@var1256 , mSettings@var65 .@expr1073745664 basePaths@var1385 ) ; }
827:
828: const ErrorMessage ::@expr1073745665 FileLocation loc@var1257 (@expr1073745666 file@var1256 , linenr@var1253 , 0 ) ;
829: locationList@var1255 .@expr1073745667 push_back (@expr1073745668 loc@var1257 ) ;
830: }
831: mErrorLogger@var66 .@expr1073745669 reportErr (@expr1073745670 ErrorMessage (@expr1073745671 locationList@var1255 ,
832: mFile0@var69 ,
833: Severity ::@expr1073745672 error ,
834: msg@var1254 ,
835: "preprocessorErrorDirective" ,
836: Certainty ::@expr1073745673 normal ) ) ;
837: }
838:
839:
840: void Preprocessor :: missingInclude ( const std :: string & filename@var1258 , unsigned int linenr@var1259 , const std :: string & header@var1260 , HeaderTypes headerType@var1261 )
841: {
842: const std ::@expr3850 string fname@var1262 =@expr1073745675 Path ::@expr1073745676 fromNativeSeparators (@expr1073745677 filename@var1258 ) ;
843: Suppressions ::@expr1073745678 ErrorMessage errorMessage@var1263 ;
844: errorMessage@var1263 .@expr3855 errorId@var1264 =@expr1073745680 "missingInclude" ;
845: errorMessage@var1263 .@expr1073745681 setFileName (@expr1073745682 fname@var1262 ) ;
846: errorMessage@var1263 .@expr1073745683 lineNumber@var1265 =@expr1073745684 linenr@var1259 ;
847: if (@expr1073745685 mSettings@var65 .@expr3862 nomsg@var1386 .@expr3863 isSuppressed (@expr3864 errorMessage@var1263 ) ) {
848: return ; }
849: errorMessage@var1263 .@expr3855 errorId@var1264 =@expr1073745690 "missingIncludeSystem" ;
850: if (@expr1073745691 headerType@var1261 ==@expr3868 SystemHeader &&@expr1073745693 mSettings@var65 .@expr3862 nomsg@var1386 .@expr3863 isSuppressed (@expr3864 errorMessage@var1263 ) ) {
851: return ; }
852:
853: if (@expr1073745697 headerType@var1261 ==@expr3868 SystemHeader ) {
854: missingSystemIncludeFlag@var12 =@expr1073745699 true ; }
855: else {
856: missingIncludeFlag@var11 =@expr1073745700 true ; }
857: if (@expr1073745701 mErrorLogger@var66 &&@expr1073745702 mSettings@var65 .@expr1073745703 checkConfiguration@var1387 ) {
858:
859: std ::@expr1073745704 list < ErrorMessage ::@expr3850 FileLocation > locationList@var1266 ;
860: if (@expr1073745706 !@expr1073745707 filename@var1258 .@expr1073745708 empty (@expr1073745709 ) ) {
861: ErrorMessage ::@expr1073745710 FileLocation loc@var1267 ;
862: loc@var1267 .@expr1073745711 line@var1268 =@expr1073745712 linenr@var1259 ;
863: loc@var1267 .@expr1073745713 setfile (@expr1073745714 Path ::@expr1073745715 toNativeSeparators (@expr1073745716 filename@var1258 ) ) ;
864: locationList@var1266 .@expr1073745717 push_back (@expr1073745718 loc@var1267 ) ;
865: }
866: ErrorMessage errmsg@var1269 (@expr1073745719 locationList@var1266 , mFile0@var69 , Severity ::@expr1073745720 information ,
867: (@expr1073745721 headerType@var1261 ==@expr3868 SystemHeader ) ?@expr1073745723
868: "Include file: <" +@expr1073745724 header@var1260 +@expr1073745725 "> not found. Please note: Cppcheck does not need standard library headers to get proper results." :@expr1073745726
869: "Include file: \"" +@expr1073745727 header@var1260 +@expr1073745728 "\" not found." ,
870: (@expr1073745729 headerType@var1261 ==@expr3868 SystemHeader ) ?@expr1073745731 "missingIncludeSystem" :@expr1073745732 "missingInclude" ,
871: Certainty ::@expr1073745733 normal ) ;
872: mErrorLogger@var66 .@expr1073745734 reportInfo (@expr1073745735 errmsg@var1269 ) ;
873: }
874: }
875:
876: bool Preprocessor :: validateCfg ( const std :: string & cfg@var1270 , const std :: list < simplecpp :: MacroUsage > & macroUsageList@var1271 )
877: {
878: bool ret@var1272 ; ret@var1272 =@expr1073745737 true ;
879: std ::@expr1073745738 list < std ::@expr3915 string > defines@var1273 ;
880: splitcfg (@expr1073745740 cfg@var1270 , defines@var1273 , emptyString@var1 ) ;
881: for (@expr1073745741 const std ::@expr3915 string &@expr3919 define@var1274 :@expr1073745744 defines@var1273 ) {
882: if (@expr1073745745 define@var1274 .@expr3922 find (@expr1073745747 '=' ) !=@expr1073745748 std ::@expr1073745749 string ::@expr1073745750 npos@expr1073745736 ) {
883: continue ; }
884: const std ::@expr1073745751 string macroName@var1275 (@expr1073745752 define@var1274 .@expr1073745753 substr (@expr1073745754 0 , define@var1274 .@expr3922 find (@expr1073745756 '(' ) ) ) ;
885: for (@expr1073745757 const simplecpp ::@expr3915 MacroUsage &@expr3919 mu@var1276 :@expr1073745760 macroUsageList@var1271 ) {
886: if (@expr1073745761 mu@var1276 .@expr1073745762 macroValueKnown@var1277 ) {
887: continue ; }
888: if (@expr1073745763 mu@var1276 .@expr1073745764 macroName@var1278 !=@expr1073745765 macroName@var1275 ) {
889: continue ; }
890: bool directiveLocation@var1279 ; directiveLocation@var1279 =@expr1073745766 std ::@expr1073745767 any_of (@expr1073745768 mDirectives@var67 .@expr1073745769 cbegin (@expr1073745770 ) , mDirectives@var67 .@expr1073745771 cend (@expr1073745772 ) ,
891: [@expr1073745773 =@expr1073745774 ] (@expr1073745775 const Directive &@expr3919 dir@var1280 ) {
892: return mu@var1276 .@expr3953 useLocation@var1281 .@expr3954 file (@expr3955 ) ==@expr1073745780 dir@var1280 .@expr1073745781 file@var1282 &&@expr1073745782 mu@var1276 .@expr3953 useLocation@var1281 .@expr3960 line@var1283 ==@expr1073745785 dir@var1280 .@expr1073745786 linenr@var1284 ;
893: } ) ;
894:
895: if (@expr1073745787 !@expr1073745788 directiveLocation@var1279 ) {
896: if (@expr1073745789 mSettings@var65 .@expr1073745790 severity@var1388 .@expr1073745791 isEnabled (@expr1073745792 Severity ::@expr1073745793 information ) ) {
897: validateCfgError (@expr1073745794 mu@var1276 .@expr3953 useLocation@var1281 .@expr3954 file (@expr3955 ) , mu@var1276 .@expr3953 useLocation@var1281 .@expr3960 line@var1283 , cfg@var1270 , macroName@var1275 ) ; }
898: ret@var1272 =@expr1073745800 false ;
899: }
900: }
901: }
902:
903: return ret@var1272 ;
904: }
905:
906: void Preprocessor :: validateCfgError ( const std :: string & file@var1285 , const unsigned int line@var1286 , const std :: string & cfg@var1287 , const std :: string & macro@var1288 )
907: {
908: const std ::@expr3977 string id@var1289 =@expr1073745802 "ConfigurationNotChecked" ;
909: std ::@expr1073745803 list < ErrorMessage ::@expr3977 FileLocation > locationList@var1290 ;
910: const ErrorMessage ::@expr1073745805 FileLocation loc@var1291 (@expr1073745806 file@var1285 , line@var1286 , 0 ) ;
911: locationList@var1290 .@expr1073745807 push_back (@expr1073745808 loc@var1291 ) ;
912: const ErrorMessage errmsg@var1292 (@expr1073745809 locationList@var1290 , mFile0@var69 , Severity ::@expr1073745810 information , "Skipping configuration '" +@expr1073745811 cfg@var1287 +@expr1073745812 "' since the value of '" +@expr1073745813 macro@var1288 +@expr1073745814 "' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." , id@var1289 , Certainty ::@expr1073745815 normal ) ;
913: mErrorLogger@var66 .@expr1073745816 reportInfo (@expr1073745817 errmsg@var1292 ) ;
914: }
915:
916: void Preprocessor :: getErrorMessages ( ErrorLogger * errorLogger@var1293 , const Settings * settings@var1294 )
917: {
918: Settings settings2@var1295 (@expr1073745818 *@expr1073745819 settings@var1294 ) ;
919: Preprocessor preprocessor@var1296 (@expr1073745820 settings2@var1295 , errorLogger@var1293 ) ;
920: settings2@var1295 .@expr1073745821 checkConfiguration@var1297 =@expr1073745822 true ;
921: preprocessor@var1296 .@expr3999 missingInclude (@expr1073745824 emptyString@var1 , 1 , emptyString@var1 , UserHeader ) ;
922: preprocessor@var1296 .@expr3999 missingInclude (@expr1073745826 emptyString@var1 , 1 , emptyString@var1 , SystemHeader ) ;
923: preprocessor@var1296 .@expr1073745827 validateCfgError (@expr1073745828 emptyString@var1 , 1 , "X" , "X" ) ;
924: preprocessor@var1296 .@expr1073745829 error (@expr1073745830 emptyString@var1 , 1 , "#error message" ) ;
925: }
926:
927: void Preprocessor :: dump ( std :: ostream & out@var1298 ) const
928: {
929:
930:
931: out@var1298 <<@expr1073745832 "  <directivelist>" <<@expr1073745833 std ::@expr4010 endl@expr4007 ;
932: for (@expr1073745835 const Directive &@expr4012 dir@var1299 :@expr1073745837 mDirectives@var67 ) {
933: out@var1298 <<@expr1073745838 "    <directive "
934: <<@expr1073745839 "file=\"" <<@expr1073745840 ErrorLogger ::@expr4017 toxml (@expr1073745842 dir@var1299 .@expr1073745843 file@var1300 ) <<@expr1073745844 "\" "
935: <<@expr1073745845 "linenr=\"" <<@expr1073745846 dir@var1299 .@expr1073745847 linenr@var1301 <<@expr1073745848 "\" "
936:
937:
938: <<@expr1073745849 "str=\"" <<@expr1073745850 ErrorLogger ::@expr4017 toxml (@expr1073745852 dir@var1299 .@expr1073745853 str@var1302 ) <<@expr1073745854 "\"/>" <<@expr1073745855 std ::@expr4010 endl@expr4007 ;
939: }
940: out@var1298 <<@expr1073745857 "  </directivelist>" <<@expr1073745858 std ::@expr4010 endl@expr4007 ;
941:
942: if (@expr1073745860 !@expr1073745861 mMacroUsage@var70 .@expr1073745862 empty (@expr1073745863 ) ) {
943: out@var1298 <<@expr1073745864 "  <macro-usage>" <<@expr1073745865 std ::@expr4010 endl@expr4007 ;
944: for (@expr1073745867 const simplecpp ::@expr4044 MacroUsage &@expr4012 macroUsage@var1303 :@expr1073745870 mMacroUsage@var70 ) {
945: out@var1298 <<@expr1073745871 "    <macro"
946: <<@expr1073745872 " name=\"" <<@expr1073745873 macroUsage@var1303 .@expr1073745874 macroName@var1304 <<@expr1073745875 "\""
947: <<@expr1073745876 " file=\"" <<@expr1073745877 macroUsage@var1303 .@expr4054 macroLocation@var1305 .@expr1073745879 file (@expr1073745880 ) <<@expr1073745881 "\""
948: <<@expr1073745882 " line=\"" <<@expr1073745883 macroUsage@var1303 .@expr4054 macroLocation@var1305 .@expr1073745885 line@var1306 <<@expr1073745886 "\""
949: <<@expr1073745887 " column=\"" <<@expr1073745888 macroUsage@var1303 .@expr4054 macroLocation@var1305 .@expr1073745890 col@var1307 <<@expr1073745891 "\""
950: <<@expr1073745892 " usefile=\"" <<@expr1073745893 macroUsage@var1303 .@expr4070 useLocation@var1308 .@expr1073745895 file (@expr1073745896 ) <<@expr1073745897 "\""
951: <<@expr1073745898 " useline=\"" <<@expr1073745899 macroUsage@var1303 .@expr4070 useLocation@var1308 .@expr1073745901 line@var1309 <<@expr1073745902 "\""
952: <<@expr1073745903 " usecolumn=\"" <<@expr1073745904 macroUsage@var1303 .@expr4070 useLocation@var1308 .@expr1073745906 col@var1310 <<@expr1073745907 "\""
953: <<@expr1073745908 " is-known-value=\"" <<@expr1073745909 (@expr1073745910 macroUsage@var1303 .@expr1073745911 macroValueKnown@var1311 ?@expr1073745912 "true" :@expr1073745913 "false" ) <<@expr1073745914 "\""
954: <<@expr1073745915 "/>" <<@expr1073745916 std ::@expr4010 endl@expr4007 ;
955: }
956: out@var1298 <<@expr1073745918 "  </macro-usage>" <<@expr1073745919 std ::@expr4010 endl@expr4007 ;
957: }
958:
959: if (@expr1073745921 !@expr1073745922 mIfCond@var71 .@expr1073745923 empty (@expr1073745924 ) ) {
960: out@var1298 <<@expr1073745925 "  <simplecpp-if-cond>" <<@expr1073745926 std ::@expr4010 endl@expr4007 ;
961: for (@expr1073745928 const simplecpp ::@expr4044 IfCond &@expr4012 ifCond@var1312 :@expr1073745931 mIfCond@var71 ) {
962: out@var1298 <<@expr1073745932 "    <if-cond"
963: <<@expr1073745933 " file=\"" <<@expr1073745934 ErrorLogger ::@expr4017 toxml (@expr1073745936 ifCond@var1312 .@expr4113 location@var1313 .@expr1073745938 file (@expr1073745939 ) ) <<@expr1073745940 "\""
964: <<@expr1073745941 " line=\"" <<@expr1073745942 ifCond@var1312 .@expr4113 location@var1313 .@expr1073745944 line@var1314 <<@expr1073745945 "\""
965: <<@expr1073745946 " column=\"" <<@expr1073745947 ifCond@var1312 .@expr4113 location@var1313 .@expr1073745949 col@var1315 <<@expr1073745950 "\""
966: <<@expr1073745951 " E=\"" <<@expr1073745952 ErrorLogger ::@expr4017 toxml (@expr1073745954 ifCond@var1312 .@expr1073745955 E@var1316 ) <<@expr1073745956 "\""
967: <<@expr1073745957 " result=\"" <<@expr1073745958 ifCond@var1312 .@expr1073745959 result@var1317 <<@expr1073745960 "\""
968: <<@expr1073745961 "/>" <<@expr1073745962 std ::@expr4010 endl@expr4007 ;
969: }
970: out@var1298 <<@expr1073745964 "  </simplecpp-if-cond>" <<@expr1073745965 std ::@expr4010 endl@expr4007 ;
971: }
972: }
973:
974: static const std :: uint32_t crc32Table@var1318 [ 256 ] = {
975: 0x00000000 , 0x77073096 , 0xee0e612c , 0x990951ba , 0x076dc419 , 0x706af48f ,
976: 0xe963a535 , 0x9e6495a3 , 0x0edb8832 , 0x79dcb8a4 , 0xe0d5e91e , 0x97d2d988 ,
977: 0x09b64c2b , 0x7eb17cbd , 0xe7b82d07 , 0x90bf1d91 , 0x1db71064 , 0x6ab020f2 ,
978: 0xf3b97148 , 0x84be41de , 0x1adad47d , 0x6ddde4eb , 0xf4d4b551 , 0x83d385c7 ,
979: 0x136c9856 , 0x646ba8c0 , 0xfd62f97a , 0x8a65c9ec , 0x14015c4f , 0x63066cd9 ,
980: 0xfa0f3d63 , 0x8d080df5 , 0x3b6e20c8 , 0x4c69105e , 0xd56041e4 , 0xa2677172 ,
981: 0x3c03e4d1 , 0x4b04d447 , 0xd20d85fd , 0xa50ab56b , 0x35b5a8fa , 0x42b2986c ,
982: 0xdbbbc9d6 , 0xacbcf940 , 0x32d86ce3 , 0x45df5c75 , 0xdcd60dcf , 0xabd13d59 ,
983: 0x26d930ac , 0x51de003a , 0xc8d75180 , 0xbfd06116 , 0x21b4f4b5 , 0x56b3c423 ,
984: 0xcfba9599 , 0xb8bda50f , 0x2802b89e , 0x5f058808 , 0xc60cd9b2 , 0xb10be924 ,
985: 0x2f6f7c87 , 0x58684c11 , 0xc1611dab , 0xb6662d3d , 0x76dc4190 , 0x01db7106 ,
986: 0x98d220bc , 0xefd5102a , 0x71b18589 , 0x06b6b51f , 0x9fbfe4a5 , 0xe8b8d433 ,
987: 0x7807c9a2 , 0x0f00f934 , 0x9609a88e , 0xe10e9818 , 0x7f6a0dbb , 0x086d3d2d ,
988: 0x91646c97 , 0xe6635c01 , 0x6b6b51f4 , 0x1c6c6162 , 0x856530d8 , 0xf262004e ,
989: 0x6c0695ed , 0x1b01a57b , 0x8208f4c1 , 0xf50fc457 , 0x65b0d9c6 , 0x12b7e950 ,
990: 0x8bbeb8ea , 0xfcb9887c , 0x62dd1ddf , 0x15da2d49 , 0x8cd37cf3 , 0xfbd44c65 ,
991: 0x4db26158 , 0x3ab551ce , 0xa3bc0074 , 0xd4bb30e2 , 0x4adfa541 , 0x3dd895d7 ,
992: 0xa4d1c46d , 0xd3d6f4fb , 0x4369e96a , 0x346ed9fc , 0xad678846 , 0xda60b8d0 ,
993: 0x44042d73 , 0x33031de5 , 0xaa0a4c5f , 0xdd0d7cc9 , 0x5005713c , 0x270241aa ,
994: 0xbe0b1010 , 0xc90c2086 , 0x5768b525 , 0x206f85b3 , 0xb966d409 , 0xce61e49f ,
995: 0x5edef90e , 0x29d9c998 , 0xb0d09822 , 0xc7d7a8b4 , 0x59b33d17 , 0x2eb40d81 ,
996: 0xb7bd5c3b , 0xc0ba6cad , 0xedb88320 , 0x9abfb3b6 , 0x03b6e20c , 0x74b1d29a ,
997: 0xead54739 , 0x9dd277af , 0x04db2615 , 0x73dc1683 , 0xe3630b12 , 0x94643b84 ,
998: 0x0d6d6a3e , 0x7a6a5aa8 , 0xe40ecf0b , 0x9309ff9d , 0x0a00ae27 , 0x7d079eb1 ,
999: 0xf00f9344 , 0x8708a3d2 , 0x1e01f268 , 0x6906c2fe , 0xf762575d , 0x806567cb ,
1000: 0x196c3671 , 0x6e6b06e7 , 0xfed41b76 , 0x89d32be0 , 0x10da7a5a , 0x67dd4acc ,
1001: 0xf9b9df6f , 0x8ebeeff9 , 0x17b7be43 , 0x60b08ed5 , 0xd6d6a3e8 , 0xa1d1937e ,
1002: 0x38d8c2c4 , 0x4fdff252 , 0xd1bb67f1 , 0xa6bc5767 , 0x3fb506dd , 0x48b2364b ,
1003: 0xd80d2bda , 0xaf0a1b4c , 0x36034af6 , 0x41047a60 , 0xdf60efc3 , 0xa867df55 ,
1004: 0x316e8eef , 0x4669be79 , 0xcb61b38c , 0xbc66831a , 0x256fd2a0 , 0x5268e236 ,
1005: 0xcc0c7795 , 0xbb0b4703 , 0x220216b9 , 0x5505262f , 0xc5ba3bbe , 0xb2bd0b28 ,
1006: 0x2bb45a92 , 0x5cb36a04 , 0xc2d7ffa7 , 0xb5d0cf31 , 0x2cd99e8b , 0x5bdeae1d ,
1007: 0x9b64c2b0 , 0xec63f226 , 0x756aa39c , 0x026d930a , 0x9c0906a9 , 0xeb0e363f ,
1008: 0x72076785 , 0x05005713 , 0x95bf4a82 , 0xe2b87a14 , 0x7bb12bae , 0x0cb61b38 ,
1009: 0x92d28e9b , 0xe5d5be0d , 0x7cdcefb7 , 0x0bdbdf21 , 0x86d3d2d4 , 0xf1d4e242 ,
1010: 0x68ddb3f8 , 0x1fda836e , 0x81be16cd , 0xf6b9265b , 0x6fb077e1 , 0x18b74777 ,
1011: 0x88085ae6 , 0xff0f6a70 , 0x66063bca , 0x11010b5c , 0x8f659eff , 0xf862ae69 ,
1012: 0x616bffd3 , 0x166ccf45 , 0xa00ae278 , 0xd70dd2ee , 0x4e048354 , 0x3903b3c2 ,
1013: 0xa7672661 , 0xd06016f7 , 0x4969474d , 0x3e6e77db , 0xaed16a4a , 0xd9d65adc ,
1014: 0x40df0b66 , 0x37d83bf0 , 0xa9bcae53 , 0xdebb9ec5 , 0x47b2cf7f , 0x30b5ffe9 ,
1015: 0xbdbdf21c , 0xcabac28a , 0x53b39330 , 0x24b4a3a6 , 0xbad03605 , 0xcdd70693 ,
1016: 0x54de5729 , 0x23d967bf , 0xb3667a2e , 0xc4614ab8 , 0x5d681b02 , 0x2a6f2b94 ,
1017: 0xb40bbe37 , 0xc30c8ea1 , 0x5a05df1b , 0x2d02ef8d
1018: } ;
1019:
1020: static std :: uint32_t crc32 ( const std :: string & data@var1319 )
1021: {
1022: std ::@expr1073745967 uint32_t crc@var1320 ; crc@var1320 =@expr1073745968 ~@expr4145 0U ;
1023: for (@expr1073745970 char c@var1321 :@expr1073745971 data@var1319 ) {
1024: crc@var1320 =@expr1073745972 crc32Table@var1318 [@expr1073745973 (@expr1073745974 crc@var1320 ^@expr1073745975 (@expr1073745976 unsigned char ) c@var1321 ) &@expr1073745977 0xFF ] ^@expr1073745978 (@expr1073745979 crc@var1320 >>@expr1073745980 8 ) ;
1025: }
1026: return crc@var1320 ^@expr1073745981 ~@expr4145 0U ;
1027: }
1028:
1029: unsigned int Preprocessor :: calculateChecksum ( const simplecpp :: TokenList & tokens1@var1322 , const std :: string & toolinfo@var1323 ) const
1030: {
1031: std ::@expr1073745983 ostringstream ostr@var1324 ;
1032: ostr@var1324 <<@expr1073745984 toolinfo@var1323 <<@expr1073745985 '\n' ;
1033: for (@expr1073745986 const simplecpp ::@expr4163 Token *@expr4164 tok@var1325 =@expr1073745989 tokens1@var1322 .@expr1073745990 cfront (@expr1073745991 ) ; tok@var1325 ; tok@var1325 =@expr1073745992 tok@var1325 .@expr1073745993 next@var1326 ) {
1034: if (@expr1073745994 !@expr1073745995 tok@var1325 .@expr1073745996 comment@var1327 ) {
1035: ostr@var1324 <<@expr1073745997 tok@var1325 .@expr1073745998 str (@expr1073745999 ) ; }
1036: }
1037: for (@expr1073746000 std ::@expr4163 map < std ::@expr4163 string , simplecpp ::@expr4163 TokenList *@expr4164 > ::@expr4163 const_iterator it@var1328 =@expr1073746006 mTokenLists@var68 .@expr1073746007 begin (@expr1073746008 ) ; it@var1328 !=@expr1073746009 mTokenLists@var68 .@expr1073746010 end (@expr1073746011 ) ; ++@expr1073746012 it@var1328 ) {
1038: for (@expr1073746013 const simplecpp ::@expr4163 Token *@expr4164 tok@var1329 =@expr1073746016 it@var1328 .@expr1073746017 second@var1330 .@expr1073746018 cfront (@expr1073746019 ) ; tok@var1329 ; tok@var1329 =@expr1073746020 tok@var1329 .@expr1073746021 next@var1331 ) {
1039: if (@expr1073746022 !@expr1073746023 tok@var1329 .@expr1073746024 comment@var1332 ) {
1040: ostr@var1324 <<@expr1073746025 tok@var1329 .@expr1073746026 str (@expr1073746027 ) ; }
1041: }
1042: }
1043: return crc32 (@expr1073746028 ostr@var1324 .@expr1073746029 str (@expr1073746030 ) ) ;
1044: }
1045:
1046: void Preprocessor :: simplifyPragmaAsm ( simplecpp :: TokenList * tokenList@var1333 )
1047: {
1048: Preprocessor ::@expr4207 simplifyPragmaAsmPrivate (@expr1073746032 tokenList@var1333 ) ;
1049: for (@expr1073746033 std ::@expr4210 pair < const std ::@expr4210 string , simplecpp ::@expr4210 TokenList *@expr1073746037 > &@expr1073746038 list@var1334 :@expr1073746039 mTokenLists@var68 ) {
1050: Preprocessor ::@expr4207 simplifyPragmaAsmPrivate (@expr1073746041 list@var1334 .@expr1073746042 second@var1335 ) ;
1051: }
1052: }
1053:
1054: void Preprocessor :: simplifyPragmaAsmPrivate ( simplecpp :: TokenList * tokenList@var1336 )
1055: {
1056:
1057: for (@expr1073746044 simplecpp ::@expr4221 Token *@expr4222 tok@var1337 =@expr1073746047 tokenList@var1336 .@expr1073746048 front (@expr1073746049 ) ; tok@var1337 ; tok@var1337 =@expr1073746050 tok@var1337 .@expr1073746051 next@var1338 ) {
1058: if (@expr1073746052 tok@var1337 .@expr1073746053 op@var1339 !=@expr1073746054 '#' ) {
1059: continue ; }
1060: if (@expr1073746055 sameline (@expr1073746056 tok@var1337 , tok@var1337 .@expr1073746057 previousSkipComments (@expr1073746058 ) ) ) {
1061: continue ; }
1062:
1063: const simplecpp ::@expr4235 Token@expr4219 * const tok2@var1340 ; tok2@var1340 =@expr1073746060 tok@var1337 .@expr1073746061 nextSkipComments (@expr1073746062 ) ;
1064: if (@expr1073746063 !@expr1073746064 tok2@var1340 ||@expr1073746065 !@expr1073746066 sameline (@expr1073746067 tok@var1337 , tok2@var1340 ) ||@expr1073746068 tok2@var1340 .@expr1073746069 str (@expr1073746070 ) !=@expr1073746071 "pragma" ) {
1065: continue ; }
1066:
1067: const simplecpp ::@expr4235 Token@expr4219 * const tok3@var1341 ; tok3@var1341 =@expr1073746073 tok2@var1340 .@expr1073746074 nextSkipComments (@expr1073746075 ) ;
1068: if (@expr1073746076 !@expr1073746077 tok3@var1341 ||@expr1073746078 !@expr1073746079 sameline (@expr1073746080 tok@var1337 , tok3@var1341 ) ||@expr1073746081 tok3@var1341 .@expr1073746082 str (@expr1073746083 ) !=@expr1073746084 "asm" ) {
1069: continue ; }
1070:
1071: const simplecpp ::@expr4235 Token * endasm@var1342 ; endasm@var1342 =@expr1073746086 tok3@var1341 ;
1072: while (@expr1073746087 (@expr1073746088 endasm@var1342 =@expr1073746089 endasm@var1342 .@expr4266 next@var1343 ) !=@expr1073746091 nullptr ) {
1073: if (@expr1073746092 endasm@var1342 .@expr1073746093 op@var1344 !=@expr1073746094 '#' ||@expr1073746095 sameline (@expr1073746096 endasm@var1342 , endasm@var1342 .@expr1073746097 previousSkipComments (@expr1073746098 ) ) ) {
1074: continue ; }
1075: const simplecpp ::@expr4235 Token@expr4219 * const endasm2@var1345 ; endasm2@var1345 =@expr1073746100 endasm@var1342 .@expr1073746101 nextSkipComments (@expr1073746102 ) ;
1076: if (@expr1073746103 !@expr1073746104 endasm2@var1345 ||@expr1073746105 !@expr1073746106 sameline (@expr1073746107 endasm@var1342 , endasm2@var1345 ) ||@expr1073746108 endasm2@var1345 .@expr1073746109 str (@expr1073746110 ) !=@expr1073746111 "pragma" ) {
1077: continue ; }
1078: const simplecpp ::@expr4235 Token@expr4219 * const endasm3@var1346 ; endasm3@var1346 =@expr1073746113 endasm2@var1345 .@expr1073746114 nextSkipComments (@expr1073746115 ) ;
1079: if (@expr1073746116 !@expr1073746117 endasm3@var1346 ||@expr1073746118 !@expr1073746119 sameline (@expr1073746120 endasm2@var1345 , endasm3@var1346 ) ||@expr1073746121 endasm3@var1346 .@expr1073746122 str (@expr1073746123 ) !=@expr1073746124 "endasm" ) {
1080: continue ; }
1081: while (@expr1073746125 sameline (@expr1073746126 endasm@var1342 , endasm3@var1346 ) ) {
1082: endasm@var1342 =@expr1073746127 endasm@var1342 .@expr4266 next@var1343 ; }
1083: break ;
1084: }
1085:
1086: const simplecpp ::@expr4235 Token@expr4219 * const tok4@var1347 ; tok4@var1347 =@expr1073746130 tok3@var1341 .@expr1073746131 next@var1348 ;
1087: tok@var1337 .@expr1073746132 setstr (@expr1073746133 "asm" ) ;
1088: const_cast < simplecpp ::@expr4221 Token *@expr4222 > (@expr1073746136 tok2@var1340 ) .@expr1073746137 setstr (@expr1073746138 "(" ) ;
1089: const_cast < simplecpp ::@expr4221 Token *@expr4222 > (@expr1073746141 tok3@var1341 ) .@expr1073746142 setstr (@expr1073746143 ")" ) ;
1090: const_cast < simplecpp ::@expr4221 Token *@expr4222 > (@expr1073746146 tok4@var1347 ) .@expr1073746147 setstr (@expr1073746148 ";" ) ;
1091: while (@expr1073746149 tok4@var1347 .@expr4326 next@var1349 !=@expr1073746151 endasm@var1342 ) {
1092: tokenList@var1336 .@expr1073746152 deleteToken (@expr1073746153 tok4@var1347 .@expr4326 next@var1349 ) ; }
1093: }
1094: }

##file cppcheck-2.8/lib/settings.h

1:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var1350 ; mFlags@var1350 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1350 ;
54: }
55: void clear ( ) {
56: mFlags@var1350 =@expr1073746155 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1350 =@expr1073746156 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1351 ) {
62: if (@expr1073746157 enabled@var1351 ) {
63: fill (@expr1073746158 ) ; }
64: else {
65: clear (@expr1073746159 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var1352 ) const {
68: return (@expr4336 mFlags@var1350 &@expr1073746161 (@expr4336 1U <<@expr1073746163 (@expr1073746164 uint32_t ) flag@var1352 ) ) !=@expr1073746165 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var1353 ) {
71: mFlags@var1350 |=@expr1073746166 (@expr1073746167 1U <<@expr1073746168 (@expr1073746169 uint32_t ) flag@var1353 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var1354 ) {
74: mFlags@var1350 &=@expr1073746170 ~@expr1073746171 (@expr1073746172 1U <<@expr1073746173 (@expr1073746174 uint32_t ) flag@var1354 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var1355 , bool enabled@var1356 ) {
77: if (@expr1073746175 enabled@var1356 ) {
78: enable (@expr1073746176 flag@var1355 ) ; }
79: else {
80: disable (@expr1073746177 flag@var1355 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var1357 ; mFlags@var1357 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1357 ;
54: }
55: void clear ( ) {
56: mFlags@var1357 =@expr1073746178 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1357 =@expr1073746179 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1358 ) {
62: if (@expr1073746180 enabled@var1358 ) {
63: fill (@expr1073746181 ) ; }
64: else {
65: clear (@expr1073746182 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var1359 ) const {
68: return (@expr4359 mFlags@var1357 &@expr1073746184 (@expr4359 1U <<@expr1073746186 (@expr1073746187 uint32_t ) flag@var1359 ) ) !=@expr1073746188 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var1360 ) {
71: mFlags@var1357 |=@expr1073746189 (@expr1073746190 1U <<@expr1073746191 (@expr1073746192 uint32_t ) flag@var1360 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var1361 ) {
74: mFlags@var1357 &=@expr1073746193 ~@expr1073746194 (@expr1073746195 1U <<@expr1073746196 (@expr1073746197 uint32_t ) flag@var1361 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var1362 , bool enabled@var1363 ) {
77: if (@expr1073746198 enabled@var1363 ) {
78: enable (@expr1073746199 flag@var1362 ) ; }
79: else {
80: disable (@expr1073746200 flag@var1362 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var1364 ; mFlags@var1364 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1364 ;
54: }
55: void clear ( ) {
56: mFlags@var1364 =@expr1073746201 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1364 =@expr1073746202 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1365 ) {
62: if (@expr1073746203 enabled@var1365 ) {
63: fill (@expr1073746204 ) ; }
64: else {
65: clear (@expr1073746205 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var1366 ) const {
68: return (@expr4382 mFlags@var1364 &@expr1073746207 (@expr4382 1U <<@expr1073746209 (@expr1073746210 uint32_t ) flag@var1366 ) ) !=@expr1073746211 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var1367 ) {
71: mFlags@var1364 |=@expr1073746212 (@expr1073746213 1U <<@expr1073746214 (@expr1073746215 uint32_t ) flag@var1367 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var1368 ) {
74: mFlags@var1364 &=@expr1073746216 ~@expr1073746217 (@expr1073746218 1U <<@expr1073746219 (@expr1073746220 uint32_t ) flag@var1368 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var1369 , bool enabled@var1370 ) {
77: if (@expr1073746221 enabled@var1370 ) {
78: enable (@expr1073746222 flag@var1369 ) ; }
79: else {
80: disable (@expr1073746223 flag@var1369 ) ; }
81: }
82: } ;



##Value flow
Line 53
  linenr always !<=-1
Line 77
  NoHeader always 0
  = always 0
  0 always 0
  , always 1
Line 78
  UserHeader always 1
  , always 2
Line 79
  SystemHeader always 2
Line 85
  , always 0
  = always 0
  nullptr always 0
Line 107
  ( always {!<=-1,!>=2}
Line 145
  , always 0
  = always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
Line 173
  ( always !<=-1
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 28
  Reset always 0
  = always 0
  0 always 0
  , always 1
Line 29
  Bold always 1
  = always 1
  1 always 1
  , always 2
Line 30
  Dim always 2
  = always 2
  2 always 2
  , always 31
Line 31
  FgRed always 31
  = always 31
  31 always 31
  , always 32
Line 32
  FgGreen always 32
  = always 32
  32 always 32
  , always 34
Line 33
  FgBlue always 34
  = always 34
  34 always 34
  , always 35
Line 34
  FgMagenta always 35
  = always 35
  35 always 35
  , always 39
Line 35
  FgDefault always 39
  = always 39
  39 always 39
  , always 41
Line 36
  BgRed always 41
  = always 41
  41 always 41
  , always 42
Line 37
  BgGreen always 42
  = always 42
  42 always 42
  , always 44
Line 38
  BgBlue always 44
  = always 44
  44 always 44
  , always 49
Line 39
  BgDefault always 49
  = always 49
  49 always 49
Line 40
  457U always 457
Line 41
  476U always 476
Line 42
  676U always 676
Line 43
  682U always 682
Line 44
  825U always 825
Line 70
  fileIndex always !<=-1
  0 always 0
  0 always 0
  column always !<=-1
  0 always 0
Line 72
  column always !<=-1
Line 73
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 75
  column always !<=-1
Line 76
  fileIndex always !<=-1
  0 always 0
  column always !<=-1
  column always !<=-1
Line 86
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 93
  convert always {!<=-1,!>=2}
  = always 1
  true always 1
Line 106
  fileIndex always !<=-1
Line 108
  column always !<=-1
Line 175
  verbose always {!<=-1,!>=2}
Line 180
  ( always {!<=-1,!>=2}
Line 190
  incomplete always {!<=-1,!>=2}
Line 197
  hash always !<=-1
Line 243
  ( always " </array>\r\n</dict>\r\n</plist>"
Line 254
  = always 0
  :: always 0
  Reset always 0
  = always 0
  0 always 0
Line 262
  = always 0
  0 always 0
Line 270
  , always !<=-1
  value always !<=-1
Line 273
  ( always !<=-1
  value always !<=-1
Line 289
  ( always {!<=-1,!>=2}
Line 303
  " </array>\r\n</dict>\r\n</plist>" always " </array>\r\n</dict>\r\n</plist>"
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@31613,34@31869}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@123,34@124}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@120,34@122}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 77
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 136
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  extra always size=0
Line 146
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 160
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 181
  ( always {!<=-1,!>=2}
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 39
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  tok2 possible {symbolic=(tok->next)@61,symbolic=(cmdtok->next)@62,symbolic=(cond->next)@87,symbolic=(next1?next1->next:nullptr)@88,symbolic=(next2?next2->next:nullptr)@89}
  && always {!<=-1,!>=2}
  tok1 always !0
  tok2 {!0,symbolic=(tok->next)@61,symbolic=(cmdtok->next)@62,symbolic=(cond->next)@87,symbolic=(next1?next1->next:nullptr)@88,symbolic=(next2?next2->next:nullptr)@89}
Line 51
  beg always !<=-1
  = always !<=-1
  ( always !<=-1
  " \t" always " \t"
Line 52
  beg always !<=-1
  == always {!<=-1,!>=2}
Line 53
  "" always ""
Line 54
  end always !<=-1
  = always !<=-1
  ( always !<=-1
  " \t" always " \t"
Line 55
  beg always !<=-1
  end always !<=-1
  - always !<=-1
  beg always !<=-1
  + always !<=0
  1 always 1
Line 60
  linenr always !<=-1
Line 67
  = always 1
  ( always 1
  1 always 1
Line 86
  ( always {!<=-1,!>=2}
Line 88
  "cppcheck-suppress" always "cppcheck-suppress"
Line 91
  ( always !<=-1
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  pos1 always !<=-1
  = always !<=-1
  ( always !<=-1
  "/* \t" always "/* \t"
Line 94
  pos1 always !<=-1
  == always {!<=-1,!>=2}
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 96
  pos1 always !<=-1
  + always !<=-1
  ( always {!<=-1,!>=symbolic=(comment.size()+1)}
  >= always {!<=-1,!>=2}
  ( always {!<=-1,!<=symbolic=(cppchecksuppress.size()-1)}
Line 97
  return always {!<=-1,!>=2}
  false always 0
Line 98
  pos1 always !<=-1
  ( always !<=-1
  != always {!<=-1,!>=2}
Line 99
  return always {!<=-1,!>=2}
  false always 0
Line 102
  pos2 always !<=-1
  = always !<=-1
  ( always !<=-1
  " " always " "
  pos1 always !<=-1
  + always {!<=-1,!>=symbolic=(comment.size())}
  ( always !<=-1
Line 103
  pos2 always !<=-1
  == always {!<=-1,!>=2}
Line 104
  return always {!<=-1,!>=2}
  false always 0
Line 106
  pos2 always !<=-1
  == always {!<=-1,!>=2}
  '[' always 91
Line 109
  & {lifetime[Address]=(errmsg),!0}
  errmsg always size=0
Line 111
  ! {!<=-1,!>=2,0}
  errmsg possible size=0
  ( {!<=-1,!>=2,1}
Line 112
  errmsg always !size=0
Line 115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 122
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(errmsg),!0}
  errmsg always size=0
Line 123
  return always {!<=-1,!>=2}
  false always 0
Line 125
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 128
  ! {!<=-1,!>=2,0}
  errmsg possible size=0
  ( {!<=-1,!>=2,1}
Line 129
  errmsg always !size=0
Line 132
  return always {!<=-1,!>=2}
  true always 1
Line 138
  ! always {!<=-1,!>=2}
Line 142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  inlineSuppressions always size=0
  bad possible {lifetime[Address]=(err)@93,lifetime[Address]=(err)@94}
Line 145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 148
  tok possible 0
  && always {!<=-1,!>=2}
  tok always !0
Line 149
  ( always {!<=-1,!>=2}
  tok always !0
Line 150
  tok always !0
Line 152
  ! {!<=-1,!>=2,1}
  tok possible 0
Line 156
  ( always {!<=-1,!>=2}
Line 161
  . always {!<=-1,!>=2}
  relativePaths always {!<=-1,!>=2}
Line 163
  "/" always "/"
Line 164
  0 always 0
  bp always symbolic=(basePath+"/")
  ( always !<=-1
  bp always symbolic=(basePath+"/")
  == always {!<=-1,!>=2}
  0 always 0
Line 165
  bp always symbolic=(basePath+"/")
  ( always !<=-1
Line 172
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 173
  && always {!<=-1,!>=2}
Line 174
  && always {!<=-1,!>=2}
Line 175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 176
  1 always 1
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 177
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 178
  == always {!<=-1,!>=2}
  "{" always "{"
Line 181
  inlineSuppressions always !size=0
Line 184
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 192
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  inlineSuppressions always {!<=-1,!>=2}
Line 195
  & {lifetime[Address]=(err),!0}
  err always size=0
Line 196
  = {lifetime[Iterator]=(mTokenLists),start=0}
  ( {lifetime[Iterator]=(mTokenLists),start=0}
  it possible {lifetime[Iterator]=(mTokenLists),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mTokenLists),end=0}
  it possible lifetime[Iterator]=(mTokenLists)
Line 197
  it {lifetime[Iterator]=(mTokenLists),!symbolic=(mTokenLists.end()),!end=0}
Line 198
  it {lifetime[Iterator]=(mTokenLists),!symbolic=(mTokenLists.end()),!end=0}
  & {lifetime[Address]=(err),!0}
Line 211
  list always size=0
  1U always 1
  + always !<=0
  ( always !<=-1
Line 212
  list {lifetime[Object]=(tokens),size=0}
  & {lifetime[Address]=(tokens),!0}
Line 213
  = {lifetime[Iterator]=(mTokenLists),start=0}
  ( {lifetime[Iterator]=(mTokenLists),start=0}
  it possible {lifetime[Iterator]=(mTokenLists),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mTokenLists),end=0}
Line 214
  list possible lifetime[Object]=(tokens)
  it possible lifetime[Iterator]=(mTokenLists)
Line 217
  list possible lifetime[Object]=(tokens)
Line 219
  != always {!<=-1,!>=2}
  '#' always 35
  || always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 221
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "endfile" always "endfile"
Line 224
  && always {!<=-1,!>=2}
  tok2 always !0
  == always {!<=-1,!>=2}
  . always !<=-1
  linenr always !<=-1
Line 227
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
Line 228
  ' ' always 32
Line 229
  == always {!<=-1,!>=2}
  "#" always "#"
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "file" always "file"
Line 230
  "include" always "include"
Line 241
  iftok possible symbolic=(tok->next)@64
Line 242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  iftok possible symbolic=(tok->next)@64
  cond always symbolic=(iftok->next)
Line 243
  "" always ""
Line 245
  cond always symbolic=(iftok->next)
Line 246
  = possible 0
  next1 always symbolic=(cond->next)
  ? possible 0
  next1 {symbolic=(cond->next),!0}
  : always 0
  nullptr always 0
Line 247
  = possible 0
  next2 {symbolic=(next1?next1->next:nullptr),0}
  ? possible 0
  next2 {symbolic=(next1?next1->next:nullptr),!0}
  : always 0
  nullptr always 0
Line 249
  len {!<=-1,1}
  len always !<=-1
  = always 1
  1 always 1
Line 250
  ( always {!<=-1,!>=2}
  next1 always symbolic=(cond->next)
Line 251
  len always !<=-1
  = always 2
  2 always 2
Line 252
  ( always {!<=-1,!>=2}
  next2 always symbolic=(next1?next1->next:nullptr)
Line 253
  len always !<=-1
  = always 3
  3 always 3
Line 254
  ( always {!<=-1,!>=2}
  next3 always symbolic=(next2?next2->next:nullptr)
Line 255
  len always !<=-1
  = always 4
  4 always 4
Line 257
  len {!<=-1,4,1,2,3}
  == {!<=-1,!>=2,0,1}
  1 always 1
  && always {!<=-1,!>=2}
  cond always symbolic=(iftok->next)
  == always {!<=-1,!>=2}
  "0" always "0"
Line 258
  "0" always "0"
Line 260
  len {!<=-1,4,2,3}
  == {!<=-1,!>=2,0}
  1 always 1
  && always {!<=-1,!>=2}
Line 261
  ( possible lifetime[Iterator]=(defined)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
Line 265
  len {!<=-1,4,3,1}
  == {!<=-1,!>=2,0}
  2 always 2
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  '!' always 33
  && always {!<=-1,!>=2}
  next1 always symbolic=(cond->next)
Line 266
  ( possible lifetime[Iterator]=(defined)
  next1 always symbolic=(cond->next)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
Line 267
  next1 always symbolic=(cond->next)
  "=0" always "=0"
Line 270
  len {!<=-1,4,3,1,2}
  == {!<=-1,!>=2,0,1}
  3 always 3
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  '(' always 40
  && always {!<=-1,!>=2}
  next1 always symbolic=(cond->next)
  && always {!<=-1,!>=2}
  next2 always symbolic=(next1?next1->next:nullptr)
  == always {!<=-1,!>=2}
  ')' always 41
Line 271
  ( possible lifetime[Iterator]=(defined)
  next1 always symbolic=(cond->next)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(undefined)
  next1 always symbolic=(cond->next)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(undefined),end=0}
Line 272
  next1 always symbolic=(cond->next)
Line 275
  len {!<=-1,4,1,2,3}
  == {!<=-1,!>=2,0,1}
  3 always 3
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  next1 always symbolic=(cond->next)
  == always {!<=-1,!>=2}
  "==" always "=="
  && always {!<=-1,!>=2}
  next2 always symbolic=(next1?next1->next:nullptr)
Line 276
  ( possible lifetime[Iterator]=(defined)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
Line 277
  '=' always 61
  . always symbolic=(next1)
Line 281
  ( always {!<=-1,!>=2}
Line 282
  == always {!<=-1,!>=2}
  '!' always 33
Line 283
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 285
  == always {!<=-1,!>=2}
  "defined" always "defined"
Line 287
  "=0" always "=0"
Line 290
  != always {!<=-1,!>=2}
  "defined" always "defined"
Line 293
  ! {!<=-1,!>=2,1}
  dtok {symbolic=(cond->next),0}
Line 295
  dtok {symbolic=(cond->next),!0}
  == always {!<=-1,!>=2}
  '(' always 40
Line 296
  dtok {symbolic=(cond->next),!0}
Line 297
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(defined)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(undefined)
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(undefined),end=0}
Line 302
  ! {!<=-1,!>=2,0}
  cfgStr possible size=0
  ( {!<=-1,!>=2,1}
Line 303
  ';' always 59
Line 309
  ( always {!<=-1,!>=2}
Line 311
  ( always {!<=-1,!>=2}
Line 312
  return always {!<=-1,!>=2}
  false always 0
Line 315
  :: always !<=-1
  pos always !<=-1
  pos always !<=-1
  = always 0
  0 always 0
Line 316
  pos {symbolic=(pos2),!<=-1,0,symbolic=(pos+cfg.size())}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 317
  pos always !<=-1
  = always !<=-1
  ( always !<=-1
  pos {!<=-1,<=symbolic=(userDefines.size()-1),!>=symbolic=(userDefines.size())}
Line 318
  pos {!<=-1,0}
  == always {!<=-1,!>=2}
Line 320
  pos2 always !<=-1
  = always !<=-1
  pos {!<=-1,0}
  + always !<=-1
  ( always !<=-1
Line 321
  pos always !<=-1
  == always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  pos always !<=0
  - always !<=-1
  1U always 1
  == always {!<=-1,!>=2}
  ';' always 59
  && always {!<=-1,!>=2}
  pos2 {symbolic=(pos+cfg.size()),!<=-1}
  == always {!<=-1,!>=2}
  ( always !<=-1
  || always {!<=-1,!>=2}
  pos2 {symbolic=(pos+cfg.size()),!<=-1,!symbolic=(userDefines.size())}
  == always {!<=-1,!>=2}
  '=' always 61
Line 322
  return always {!<=-1,!>=2}
  true always 1
Line 323
  pos always !<=-1
  = {symbolic=(pos+cfg.size()),!<=-1}
  pos2 {symbolic=(pos+cfg.size()),!<=-1}
Line 325
  return always {!<=-1,!>=2}
  false always 0
Line 330
  configs possible size=1@79
  ( {lifetime[Iterator]=(configs),start=0}
  configs possible size=1@79
  ( {lifetime[Iterator]=(configs),end=0}
Line 332
  c possible {size=0,size=1}
Line 333
  c possible size=1
  ( {!<=-1,!>=2,0}
Line 335
  c always !size=0
  == always {!<=-1,!>=2}
  "0" always "0"
Line 336
  "" always ""
Line 337
  ( always {!<=-1,!>=2}
  c always !size=0
Line 339
  ! {!<=-1,!>=2,0}
  ret possible size=0
  ( {!<=-1,!>=2,1}
Line 340
  ';' always 59
Line 346
  ( always {!<=-1,!>=2}
Line 348
  pos1 always !<=-1
  = always 0
  0U always 0
  pos1 {!<=-1,0,1}
  < always {!<=-1,!>=2}
  cfg possible {NonMovedVariable@65,size=0@65}
  ( {!<=-1,0@65}
Line 349
  pos2 always !<=-1
  = always !<=-1
  ( always !<=-1
  ';' always 59
  pos1 {!<=-1,0}
Line 350
  pos2 always !<=-1
  == always {!<=-1,!>=2}
  pos1 {!<=-1,0}
  pos1 {!<=-1,0}
  pos2 always !<=-1
  - always !<=-1
  pos1 {!<=-1,0}
Line 352
  eq always !<=-1
  = always !<=-1
  ( always !<=-1
  '=' always 61
Line 353
  eq {!<=-1,symbolic=(std::string::npos)}
  == {!<=-1,!>=2,1}
  :: possible symbolic=(eq)
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(undefined)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(undefined),end=0}
Line 354
  return always {!<=-1,!>=2}
  true always 1
Line 355
  eq always !<=-1
  != always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(undefined)
  0 always 0
  eq always {!<=-1,!symbolic=(std::string::npos)}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(undefined),end=0}
  && always {!<=-1,!>=2}
  eq always {!<=-1,!symbolic=(std::string::npos)}
  != always {!<=-1,!>=2}
  "=0" always "=0"
Line 356
  return always {!<=-1,!>=2}
  true always 1
Line 358
  pos1 always !<=-1
  = {!<=-1,1}
  pos2 always !<=-1
  == always {!<=-1,!>=2}
  :: possible symbolic=(eq)
  ? {!<=-1,1}
  pos2 always !<=-1
  : always 1
  pos2 always !<=-1
  + always !<=0
  1U always 1
Line 360
  return always {!<=-1,!>=2}
  false always 0
Line 363
  ( always {!<=-1,!>=2}
Line 365
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(configs_if),start=0}
  ( {lifetime[Iterator]=(configs_if),end=0}
Line 366
  [ possible {lifetime[Lambda]=(userDefines),lifetime[Lambda]=(cfg)}
Line 367
  ( always {!<=-1,!>=2}
Line 373
  = always 0
  0 always 0
Line 374
  nullptr always 0
  != always {!<=-1,!>=2}
Line 375
  cmdtok always !0
  == always {!<=-1,!>=2}
  '#' always 35
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cmdtok always !0
  cmdtok always !0
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cmdtok always !0
  cmdtok always !0
Line 376
  cmdtok always !0
  0 always 0
  2 always 2
  "if" always "if"
  == always {!<=-1,!>=2}
  0 always 0
Line 378
  cmdtok always !0
  == always {!<=-1,!>=2}
  "endif" always "endif"
Line 380
  < always {!<=-1,!>=2}
  0 always 0
Line 381
  cmdtok always !0
Line 385
  nullptr always 0
Line 395
  != always {!<=-1,!>=2}
  '#' always 35
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
Line 400
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "ifdef" always "ifdef"
  || always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "ifndef" always "ifndef"
  || always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "if" always "if"
Line 402
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "ifdef" always "ifdef"
  || always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "ifndef" always "ifndef"
Line 403
  cmdtok always symbolic=(tok->next)
Line 404
  ( always {!<=-1,!>=2}
  expr1 always symbolic=(cmdtok->next)
  && always {!<=-1,!>=2}
  expr1 always symbolic=(cmdtok->next)
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  expr1 always symbolic=(cmdtok->next)
Line 405
  expr1 always symbolic=(cmdtok->next)
Line 406
  ( possible lifetime[Iterator]=(defined)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(defined),end=0}
Line 407
  config always NonMovedVariable
Line 408
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "if" always "if"
Line 409
  cmdtok always symbolic=(tok->next)
Line 413
  ( always {!<=-1,!>=2}
  config possible {NonMovedVariable,size=0}
Line 414
  config always NonMovedVariable
Line 416
  ifndef {!<=-1,!>=2,0}
  ifndef always {!<=-1,!>=2}
  = always 0
  false always 0
Line 417
  cmdtok inconclusive symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "ifndef" always "ifndef"
Line 418
  ifndef always {!<=-1,!>=2}
  = always 1
  true always 1
Line 420
  "if" always "if"
  "!" always "!"
  "defined" always "defined"
  "(" always "("
  ")" always ")"
Line 421
  = always 0
  0 always 0
Line 422
  ifndef always {!<=-1,!>=2}
  = always 1
  true always 1
Line 423
  i possible 0
  < {!<=-1,!>=2,1}
  match always {{,size=6}
  ( always 6
Line 424
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  t always !0
  != always {!<=-1,!>=2}
  match always {{,size=6}
Line 425
  ifndef always {!<=-1,!>=2}
  = always 0
  false always 0
Line 432
  ifndef {!<=-1,!>=2,1,0}
  && always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
Line 433
  includeGuard always {!<=-1,!>=2}
  includeGuard always {!<=-1,!>=2}
  = always 1
  true always 1
Line 435
  == always {!<=-1,!>=2}
  . always !<=0
Line 436
  includeGuard always {!<=-1,!>=2}
  = always 0
  false always 0
Line 440
  includeGuard {!<=-1,!>=2,1,0}
Line 447
  == always {!<=-1,!>=2}
  "ifndef" always "ifndef"
  : inconclusive NonMovedVariable
  config inconclusive NonMovedVariable
Line 448
  == always {!<=-1,!>=2}
  "ifndef" always "ifndef"
Line 449
  configs_if always !size=0
Line 450
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "elif" always "elif"
  || always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "else" always "else"
Line 451
  ( always {!<=-1,!>=2}
Line 453
  ! always {!<=-1,!>=2}
Line 455
  tok always !0
Line 458
  == always {!<=-1,!>=2}
  "else" always "else"
  && always {!<=-1,!>=2}
Line 459
  && always {!<=-1,!>=2}
Line 460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 461
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 462
  == always {!<=-1,!>=2}
  '#' always 35
  && always {!<=-1,!>=2}
Line 463
  == always {!<=-1,!>=2}
  "error" always "error"
Line 465
  ! {!<=-1,!>=2,0}
  ifcfg {symbolic=(cfg(configs_if,userDefines)),symbolic=(ifcfg),size=0}
  ( {!<=-1,!>=2,1}
Line 466
  ! {!<=-1,!>=2,0}
  elseError possible size=0
  ( {!<=-1,!>=2,1}
Line 467
  ';' always 59
Line 468
  ifcfg {symbolic=(cfg(configs_if,userDefines)),symbolic=(ifcfg),!size=0}
Line 471
  ! {!<=-1,!>=2,0}
  configs_if possible size=0
  ( {!<=-1,!>=2,1}
Line 472
  configs_if always !size=0
Line 473
  == always {!<=-1,!>=2}
  "elif" always "elif"
Line 475
  ( always {!<=-1,!>=2}
Line 476
  config always NonMovedVariable
Line 477
  config possible {NonMovedVariable,size=0}
Line 478
  configs_if always !size=0
Line 479
  ! {!<=-1,!>=2,0}
  configs_ifndef possible size=0
  ( {!<=-1,!>=2,1}
Line 480
  configs_ifndef always !size=0
Line 481
  configs_if always !size=0
Line 483
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "endif" always "endif"
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
Line 484
  ! {!<=-1,!>=2,0}
  configs_if possible size=0
  ( {!<=-1,!>=2,1}
Line 485
  configs_if always !size=0
Line 486
  ! {!<=-1,!>=2,0}
  configs_ifndef possible size=0
  ( {!<=-1,!>=2,1}
Line 487
  configs_ifndef always !size=0
Line 488
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "error" always "error"
Line 489
  ! {!<=-1,!>=2,0,1}
  configs_ifndef possible {size=0,size=1}
  ( {!<=-1,!>=2,1,0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  configs_ifndef {size=1,!size=0}
  ( always {!<=-1,!>=2}
Line 490
  configs_ifndef always !size=0
  ( always !<=0
  == always {!<=-1,!>=2}
  1U always 1
Line 491
  "" always ""
Line 493
  configs_ifndef {!size=0,size=1}
Line 494
  configs always !size=0
Line 496
  temp always size=0
Line 498
  c possible size=0
  ( always !<=-1
  configs_ifndef {!size=0,size=1}
  != always {!<=-1,!>=2}
Line 500
  ( always {!<=-1,!>=2}
Line 501
  configs always !size=0
  ( always 0
  ? always ""
  : always ""
  "" always ""
Line 503
  c always !size=0
  ";" always ";"
  configs_ifndef always !size=0
Line 505
  ! {!<=-1,!>=2,0}
  elseError possible size=0
  ( {!<=-1,!>=2,1}
Line 506
  ';' always 59
Line 507
  configs_ifndef always !size=0
Line 509
  ! {!<=-1,!>=2,0}
  configs_if possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  configs_if always !size=0
  ( always {!<=-1,!>=2}
Line 510
  = always !size=0
  configs_if always !size=0
  ( always !size=0
Line 511
  last {symbolic=(configs_if.back()),symbolic=(last),!size=0}
  ( always !<=0
  > always {!<=-1,!>=2}
  2U always 2
  && always {!<=-1,!>=2}
  last {symbolic=(configs_if.back()),symbolic=(last),!size=0,>=size=3,!<=size=2}
  last {symbolic=(configs_if.back()),symbolic=(last),!size=0,>=size=3,!<=size=2}
  ( {>=3,!<=2}
  - {>=1,!<=0,!-2}
  2U always 2
  2 always 2
  "=0" always "=0"
  == always {!<=-1,!>=2}
  0 always 0
Line 512
  configs possible size=1
  configs_if always !size=0
Line 513
  configs {size=1,!size=0}
Line 514
  configs {size=1,!size=0}
  configs {size=1,!size=0}
  ( {1,!<=0}
  - {!<=-1,0}
  1U always 1
  0 always 0
  ( always !<=-1
  - always !<=-1
  2U always 2
Line 515
  configs always !size=0
  ( always !<=0
  == always {!<=-1,!>=2}
  1U always 1
Line 516
  "" always ""
Line 517
  ! {!<=-1,!>=2,0}
  elseError possible size=0
  ( {!<=-1,!>=2,1}
Line 518
  ';' always 59
Line 519
  configs always !size=0
Line 522
  cmdtok always symbolic=(tok->next)
  == always {!<=-1,!>=2}
  "define" always "define"
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
  && always {!<=-1,!>=2}
  cmdtok always symbolic=(tok->next)
Line 523
  cmdtok always symbolic=(tok->next)
Line 526
  ! {!<=-1,!>=2,0}
  elseError possible size=0
  ( {!<=-1,!>=2,1}
Line 527
  elseError always !size=0
Line 533
  "" always ""
Line 534
  ! always {!<=-1,!>=2}
Line 537
  "__cplusplus" always "__cplusplus"
Line 539
  defined always {{,size=1}
Line 541
  = {lifetime[Iterator]=(mTokenLists),start=0}
  ( {lifetime[Iterator]=(mTokenLists),start=0}
  it possible {lifetime[Iterator]=(mTokenLists),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mTokenLists),end=0}
  it possible lifetime[Iterator]=(mTokenLists)
Line 542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  it {lifetime[Iterator]=(mTokenLists),!symbolic=(mTokenLists.end()),!end=0}
Line 543
  it {lifetime[Iterator]=(mTokenLists),!symbolic=(mTokenLists.end()),!end=0}
Line 556
  files always size=0
  & {lifetime[Address]=(outputList),!0}
Line 561
  ( possible {lifetime[Iterator]=(mSettings.userUndefs),lifetime[Object]=(userUndefs)}
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSettings.userUndefs),lifetime[Object]=(userUndefs),end=0}
Line 562
  false always 0
Line 571
  ( always {!<=-1,!>=2}
Line 576
  files always size=0
  & {lifetime[Address]=(outputList),!0}
Line 579
  ( possible lifetime[Object]=(resultConfigurations)
  ( {lifetime[Iterator]=(configs),start=0}
  ( {lifetime[Iterator]=(configs),end=0}
  ( possible lifetime[Object]=(resultConfigurations)
Line 586
  defineStartPos always !<=-1
  = always 0
  0U always 0
  defineStartPos {symbolic=(defineEndPos+1U),!<=-1,0}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 587
  defineEndPos always !<=-1
  = always !<=-1
  ( always !<=-1
  ';' always 59
  defineStartPos {!<=-1,0}
Line 588
  defineEndPos always !<=-1
  == always {!<=-1,!>=2}
  defineStartPos {!<=-1,0}
  defineStartPos {!<=-1,0}
  defineEndPos always !<=-1
  - always !<=-1
  defineStartPos {!<=-1,0}
Line 589
  ! {!<=-1,!>=2,0}
  defaultValue possible {"1"@50,size=0}
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  ( always !<=-1
  '=' always 61
  == always {!<=-1,!>=2}
Line 590
  '=' always 61
  defaultValue always !size=0
Line 592
  defineEndPos always !<=-1
  == always {!<=-1,!>=2}
Line 594
  defineStartPos always !<=-1
  = always !<=0
  defineEndPos always !<=-1
  + always !<=0
  1U always 1
Line 602
  "1" always "1"
Line 603
  ! {!<=-1,!>=2,0}
  cfg possible size=0
  ( {!<=-1,!>=2,1}
Line 607
  pos always !<=-1
  = always !<=-1
  ( always !<=-1
  " (" always " ("
Line 608
  pos always !<=-1
  == always {!<=-1,!>=2}
Line 613
  s always symbolic=(def)
  pos always !<=-1
  == always {!<=-1,!>=2}
  ' ' always 32
Line 614
  s always symbolic=(def)
  pos always !<=-1
  = always 61
  '=' always 61
Line 616
  s always symbolic=(def)
  ( always !<=-1
  ')' always 41
  + always !<=0
  1 always 1
  = always 61
  '=' always 61
Line 625
  ( always {!<=-1,!>=2}
Line 632
  ( always {!<=-1,!>=2}
Line 634
  != always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  true always 1
Line 648
  return always {!<=-1,!>=2}
  false always 0
Line 651
  , always {!<=-1,!>=2}
  throwError always {!<=-1,!>=2}
Line 653
  showerror always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  force always {!<=-1,!>=2}
Line 654
  showerror {symbolic=(!mSettings.userDefines.empty()&&!mSettings.force),!<=-1,!>=2}
Line 655
  throwError {!<=-1,!>=2,0@10796}
Line 673
  ( always {!<=-1,!>=2}
Line 675
  0 always 0
Line 678
  & {lifetime[Address]=(outputList),!0}
Line 679
  false always 0
Line 680
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 693
  "bool" always "bool"
Line 694
  "short" always "short"
Line 695
  "int" always "int"
Line 696
  "long" always "long"
Line 697
  "long long" always "long long"
Line 698
  "float" always "float"
Line 699
  "double" always "double"
Line 700
  "long double" always "long double"
Line 701
  "bool *" always "bool *"
Line 702
  "short *" always "short *"
  = always symbolic=(tokens->sizeOfType["bool *"])
  . always symbolic=(tokens->sizeOfType["bool *"])
Line 703
  "int *" always "int *"
  = always {symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 704
  "long *" always "long *"
  = always {symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 705
  "long long *" always "long long *"
  = always {symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 706
  "float *" always "float *"
  = always {symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 707
  "double *" always "double *"
  = always {symbolic=(tokens->sizeOfType["float *"]),symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["float *"]),symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 708
  "long double *" always "long double *"
  = always {symbolic=(tokens->sizeOfType["double *"]),symbolic=(tokens->sizeOfType["float *"]),symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
  . always {symbolic=(tokens->sizeOfType["double *"]),symbolic=(tokens->sizeOfType["float *"]),symbolic=(tokens->sizeOfType["long long *"]),symbolic=(tokens->sizeOfType["long *"]),symbolic=(tokens->sizeOfType["int *"]),symbolic=(tokens->sizeOfType["short *"]),symbolic=(tokens->sizeOfType["bool *"])}
Line 711
  , always {!<=-1,!>=2}
  throwError always {!<=-1,!>=2}
Line 713
  0 always 0
Line 719
  & {lifetime[Address]=(outputList),!0}
  & {lifetime[Address]=(macroUsage),!0}
  macroUsage always size=0
  & {lifetime[Address]=(ifCond),!0}
  ifCond always size=0
Line 723
  throwError {!<=-1,!>=2,0@42}
Line 728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 734
  , always {!<=-1,!>=2}
  writeLocations always {!<=-1,!>=2}
Line 736
  false always 0
Line 737
  prevfile always !<=-1
  prevfile always !<=-1
  = always 0
  0 always 0
Line 738
  line always !<=-1
  line always !<=-1
  = always 1
  1 always 1
Line 741
  writeLocations {!<=-1,!>=2,0@41,1@41}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  prevfile always !<=-1
Line 742
  "\n#line " always "\n#line "
  " \"" always " \""
  "\"\n" always "\"\n"
Line 743
  prevfile always !<=-1
  = always !<=-1
Line 744
  line always !<=-1
  = always !<=-1
Line 747
  && always {!<=-1,!>=2}
  line always !<=-1
  >= always {!<=-1,!>=2}
Line 748
  ' ' always 32
Line 749
  . possible {<=symbolic=(line),>=symbolic=(line+1)}
  > always {!<=-1,!>=2}
  line {!<=-1,>=symbolic=(tok->location.line),<=symbolic=(tok->location.line-1)}
Line 750
  '\n' always 10
Line 751
  line {!<=-1,<=symbolic=(tok->location.line-1),!>=symbolic=(tok->location.line)}
  ++ {!<=-1,<=symbolic=(tok->location.line-1),!>=symbolic=(tok->location.line)}
Line 753
  ! always {!<=-1,!>=2}
Line 767
  files always size=0
  & {lifetime[Address]=(outputList),!0}
Line 773
  true always 1
Line 775
  ( always {!<=-1,!>=2}
Line 776
  "" always ""
Line 780
  ( always !<=-1
  "#file" always "#file"
  != always {!<=-1,!>=2}
Line 785
  ret always NonMovedVariable
Line 787
  ret possible {NonMovedVariable,size=0}
Line 790
  , always {!<=-1,!>=2}
  showerror always {!<=-1,!>=2}
Line 795
  0 always 0
  6 always 6
  "#error" always "#error"
  != always {!<=-1,!>=2}
  0 always 0
  || always {!<=-1,!>=2}
  showerror always {!<=-1,!>=2}
Line 802
  pos1 always !<=-1
  = always !<=-1
  "<\"" always "<\""
Line 803
  pos2 always !<=-1
  = always !<=-1
  ">\"" always ">\""
  pos1 always !<=-1
  + always !<=0
  1U always 1
Line 804
  pos1 always !<=-1
  < always {!<=-1,!>=2}
  pos2 always !<=-1
  && always {!<=-1,!>=2}
  pos2 {!<=-1,>=symbolic=(pos1+1),!<=symbolic=(pos1)}
  != always {!<=-1,!>=2}
Line 805
  pos1 {!<=-1,<=symbolic=(pos2-1),!>=symbolic=(pos2)}
  + always !<=0
  1 always 1
  pos2 {!<=-1,>=symbolic=(pos1+1),!<=symbolic=(pos1)}
  - always !<=0
  pos1 {!<=-1,<=symbolic=(pos2-1),!>=symbolic=(pos2)}
  - always !<=-1
  1 always 1
  pos1 {!<=-1,<=symbolic=(pos2-1),!>=symbolic=(pos2)}
  == always {!<=-1,!>=2}
  '\"' always 34
  UserHeader always 1
  : always 2
  SystemHeader always 2
Line 814
  0 always 0
Line 820
  , always !<=-1
  linenr always !<=-1
Line 823
  ! {!<=-1,!>=2,0}
  filename possible size=0
  ( {!<=-1,!>=2,1}
Line 824
  filename always !size=0
Line 825
  . always {!<=-1,!>=2}
  relativePaths always {!<=-1,!>=2}
Line 828
  linenr always !<=-1
  0 always 0
Line 833
  :: always 1
  error always 1
Line 834
  msg possible "#error message"@26
Line 835
  "preprocessorErrorDirective" always "preprocessorErrorDirective"
Line 836
  :: always 0
  normal always 0
Line 840
  , always !<=-1
  linenr always !<=-1
Line 844
  = always "missingInclude"
  "missingInclude" always "missingInclude"
Line 845
  errorMessage always Uninit
Line 846
  = {!<=-1,1@23}
  linenr {!<=-1,1@23}
Line 847
  ( always {!<=-1,!>=2}
Line 849
  = always "missingIncludeSystem"
  "missingIncludeSystem" always "missingIncludeSystem"
Line 850
  headerType possible {2,1@23}
  == {!<=-1,!>=2,1}
  SystemHeader always 2
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 853
  headerType possible {2,1@23}
  == {!<=-1,!>=2,1}
  SystemHeader always 2
Line 854
  = always 1
  true always 1
Line 856
  = always 1
  true always 1
Line 857
  && always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checkConfiguration always {!<=-1,!>=2}
Line 860
  ! {!<=-1,!>=2,0}
  filename possible size=0
  ( {!<=-1,!>=2,1}
Line 862
  = always !<=-1
  linenr always !<=-1
Line 866
  :: always 6
  information always 6
Line 867
  == always {!<=-1,!>=2}
  SystemHeader always 2
Line 868
  "Include file: <" always "Include file: <"
  "> not found. Please note: Cppcheck does not need standard library headers to get proper results." always "> not found. Please note: Cppcheck does not need standard library headers to get proper results."
Line 869
  "Include file: \"" always "Include file: \""
  "\" not found." always "\" not found."
Line 870
  == always {!<=-1,!>=2}
  SystemHeader always 2
  ? possible {"missingIncludeSystem","missingInclude"}
  "missingIncludeSystem" always "missingIncludeSystem"
  : always "missingInclude"
  "missingInclude" always "missingInclude"
Line 871
  :: always 0
  normal always 0
Line 872
  mErrorLogger always !0
Line 876
  ( always {!<=-1,!>=2}
Line 878
  ret always {!<=-1,!>=2}
  ret always {!<=-1,!>=2}
  = always 1
  true always 1
Line 880
  defines always size=0
Line 882
  ( always !<=-1
  '=' always 61
  != always {!<=-1,!>=2}
Line 884
  0 always 0
  ( always !<=-1
  '(' always 40
Line 888
  != always {!<=-1,!>=2}
Line 890
  directiveLocation always {!<=-1,!>=2}
  directiveLocation always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mDirectives),start=0}
  ( {lifetime[Iterator]=(mDirectives),end=0}
Line 891
  [ possible {lifetime[Lambda]=(macroUsageList),lifetime[Lambda]=(dir),lifetime[Lambda]=(dir)}
Line 892
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always !<=-1
  linenr always !<=-1
Line 895
  ! always {!<=-1,!>=2}
  directiveLocation always {!<=-1,!>=2}
Line 896
  ( always {!<=-1,!>=2}
  :: always 6
  information always 6
Line 898
  ret always {!<=-1,!>=2}
  = always 0
  false always 0
Line 903
  return always {!<=-1,!>=2}
  ret always {!<=-1,!>=2}
Line 906
  , always !<=-1
  line always !<=-1
Line 908
  = always "ConfigurationNotChecked"
  "ConfigurationNotChecked" always "ConfigurationNotChecked"
Line 910
  line {!<=-1,1@25}
  0 always 0
Line 911
  locationList always size=0
Line 912
  locationList always size=1
  :: always 6
  information always 6
  "Skipping configuration '" always "Skipping configuration '"
  cfg possible "X"@25
  "' since the value of '" always "' since the value of '"
  macro possible "X"@25
  "' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly." always "' is unknown. Use -D if you want to check it. You can use -U to skip it explicitly."
  id always {"ConfigurationNotChecked",size=23}
  :: always 0
  normal always 0
Line 919
  ( possible lifetime[SubObject]=(settings2)
Line 920
  . always {!<=-1,!>=2}
  checkConfiguration always {!<=-1,!>=2}
  = always 1
  true always 1
Line 921
  preprocessor possible lifetime[SubObject]=(settings2)
  1 always 1
  UserHeader always 1
Line 922
  1 always 1
  SystemHeader always 2
Line 923
  1 always 1
  "X" always "X"
  "X" always "X"
Line 924
  1 always 1
  "#error message" always "#error message"
Line 931
  "  <directivelist>" always "  <directivelist>"
Line 933
  "    <directive " always "    <directive "
Line 934
  "file=\"" always "file=\""
  "\" " always "\" "
Line 935
  "linenr=\"" always "linenr=\""
  . always !<=-1
  linenr always !<=-1
  "\" " always "\" "
Line 938
  "str=\"" always "str=\""
  "\"/>" always "\"/>"
Line 940
  "  </directivelist>" always "  </directivelist>"
Line 942
  ! {!<=-1,!>=2,0}
  mMacroUsage possible size=0
  ( {!<=-1,!>=2,1}
Line 943
  "  <macro-usage>" always "  <macro-usage>"
Line 944
  mMacroUsage always !size=0
Line 945
  "    <macro" always "    <macro"
Line 946
  " name=\"" always " name=\""
  "\"" always "\""
Line 947
  " file=\"" always " file=\""
  "\"" always "\""
Line 948
  " line=\"" always " line=\""
  "\"" always "\""
Line 949
  " column=\"" always " column=\""
  "\"" always "\""
Line 950
  " usefile=\"" always " usefile=\""
  "\"" always "\""
Line 951
  " useline=\"" always " useline=\""
  "\"" always "\""
Line 952
  " usecolumn=\"" always " usecolumn=\""
  "\"" always "\""
Line 953
  " is-known-value=\"" always " is-known-value=\""
  "true" always "true"
  : always "false"
  "false" always "false"
  "\"" always "\""
Line 954
  "/>" always "/>"
Line 956
  "  </macro-usage>" always "  </macro-usage>"
Line 959
  ! {!<=-1,!>=2,0}
  mIfCond possible size=0
  ( {!<=-1,!>=2,1}
Line 960
  "  <simplecpp-if-cond>" always "  <simplecpp-if-cond>"
Line 961
  mIfCond always !size=0
Line 962
  "    <if-cond" always "    <if-cond"
Line 963
  " file=\"" always " file=\""
  "\"" always "\""
Line 964
  " line=\"" always " line=\""
  "\"" always "\""
Line 965
  " column=\"" always " column=\""
  "\"" always "\""
Line 966
  " E=\"" always " E=\""
  "\"" always "\""
Line 967
  " result=\"" always " result=\""
  "\"" always "\""
Line 968
  "/>" always "/>"
Line 970
  "  </simplecpp-if-cond>" always "  </simplecpp-if-cond>"
Line 974
  [ always !<=-1
  256 always 256
  = always !<=-1
Line 975
  0x00000000 always 0
  0x77073096 always 1996959894
  0xee0e612c always 3993919788
  0x990951ba always 2567524794
  0x076dc419 always 124634137
  0x706af48f always 1886057615
Line 976
  0xe963a535 always 3915621685
  0x9e6495a3 always 2657392035
  0x0edb8832 always 249268274
  0x79dcb8a4 always 2044508324
  0xe0d5e91e always 3772115230
  0x97d2d988 always 2547177864
Line 977
  0x09b64c2b always 162941995
  0x7eb17cbd always 2125561021
  0xe7b82d07 always 3887607047
  0x90bf1d91 always 2428444049
  0x1db71064 always 498536548
  0x6ab020f2 always 1789927666
Line 978
  0xf3b97148 always 4089016648
  0x84be41de always 2227061214
  0x1adad47d always 450548861
  0x6ddde4eb always 1843258603
  0xf4d4b551 always 4107580753
  0x83d385c7 always 2211677639
Line 979
  0x136c9856 always 325883990
  0x646ba8c0 always 1684777152
  0xfd62f97a always 4251122042
  0x8a65c9ec always 2321926636
  0x14015c4f always 335633487
  0x63066cd9 always 1661365465
Line 980
  0xfa0f3d63 always 4195302755
  0x8d080df5 always 2366115317
  0x3b6e20c8 always 997073096
  0x4c69105e always 1281953886
  0xd56041e4 always 3579855332
  0xa2677172 always 2724688242
Line 981
  0x3c03e4d1 always 1006888145
  0x4b04d447 always 1258607687
  0xd20d85fd always 3524101629
  0xa50ab56b always 2768942443
  0x35b5a8fa always 901097722
  0x42b2986c always 1119000684
Line 982
  0xdbbbc9d6 always 3686517206
  0xacbcf940 always 2898065728
  0x32d86ce3 always 853044451
  0x45df5c75 always 1172266101
  0xdcd60dcf always 3705015759
  0xabd13d59 always 2882616665
Line 983
  0x26d930ac always 651767980
  0x51de003a always 1373503546
  0xc8d75180 always 3369554304
  0xbfd06116 always 3218104598
  0x21b4f4b5 always 565507253
  0x56b3c423 always 1454621731
Line 984
  0xcfba9599 always 3485111705
  0xb8bda50f always 3099436303
  0x2802b89e always 671266974
  0x5f058808 always 1594198024
  0xc60cd9b2 always 3322730930
  0xb10be924 always 2970347812
Line 985
  0x2f6f7c87 always 795835527
  0x58684c11 always 1483230225
  0xc1611dab always 3244367275
  0xb6662d3d always 3060149565
  0x76dc4190 always 1994146192
  0x01db7106 always 31158534
Line 986
  0x98d220bc always 2563907772
  0xefd5102a always 4023717930
  0x71b18589 always 1907459465
  0x06b6b51f always 112637215
  0x9fbfe4a5 always 2680153253
  0xe8b8d433 always 3904427059
Line 987
  0x7807c9a2 always 2013776290
  0x0f00f934 always 251722036
  0x9609a88e always 2517215374
  0xe10e9818 always 3775830040
  0x7f6a0dbb always 2137656763
  0x086d3d2d always 141376813
Line 988
  0x91646c97 always 2439277719
  0xe6635c01 always 3865271297
  0x6b6b51f4 always 1802195444
  0x1c6c6162 always 476864866
  0x856530d8 always 2238001368
  0xf262004e always 4066508878
Line 989
  0x6c0695ed always 1812370925
  0x1b01a57b always 453092731
  0x8208f4c1 always 2181625025
  0xf50fc457 always 4111451223
  0x65b0d9c6 always 1706088902
  0x12b7e950 always 314042704
Line 990
  0x8bbeb8ea always 2344532202
  0xfcb9887c always 4240017532
  0x62dd1ddf always 1658658271
  0x15da2d49 always 366619977
  0x8cd37cf3 always 2362670323
  0xfbd44c65 always 4224994405
Line 991
  0x4db26158 always 1303535960
  0x3ab551ce always 984961486
  0xa3bc0074 always 2747007092
  0xd4bb30e2 always 3569037538
  0x4adfa541 always 1256170817
  0x3dd895d7 always 1037604311
Line 992
  0xa4d1c46d always 2765210733
  0xd3d6f4fb always 3554079995
  0x4369e96a always 1131014506
  0x346ed9fc always 879679996
  0xad678846 always 2909243462
  0xda60b8d0 always 3663771856
Line 993
  0x44042d73 always 1141124467
  0x33031de5 always 855842277
  0xaa0a4c5f always 2852801631
  0xdd0d7cc9 always 3708648649
  0x5005713c always 1342533948
  0x270241aa always 654459306
Line 994
  0xbe0b1010 always 3188396048
  0xc90c2086 always 3373015174
  0x5768b525 always 1466479909
  0x206f85b3 always 544179635
  0xb966d409 always 3110523913
  0xce61e49f always 3462522015
Line 995
  0x5edef90e always 1591671054
  0x29d9c998 always 702138776
  0xb0d09822 always 2966460450
  0xc7d7a8b4 always 3352799412
  0x59b33d17 always 1504918807
  0x2eb40d81 always 783551873
Line 996
  0xb7bd5c3b always 3082640443
  0xc0ba6cad always 3233442989
  0xedb88320 always 3988292384
  0x9abfb3b6 always 2596254646
  0x03b6e20c always 62317068
  0x74b1d29a always 1957810842
Line 997
  0xead54739 always 3939845945
  0x9dd277af always 2647816111
  0x04db2615 always 81470997
  0x73dc1683 always 1943803523
  0xe3630b12 always 3814918930
  0x94643b84 always 2489596804
Line 998
  0x0d6d6a3e always 225274430
  0x7a6a5aa8 always 2053790376
  0xe40ecf0b always 3826175755
  0x9309ff9d always 2466906013
  0x0a00ae27 always 167816743
  0x7d079eb1 always 2097651377
Line 999
  0xf00f9344 always 4027552580
  0x8708a3d2 always 2265490386
  0x1e01f268 always 503444072
  0x6906c2fe always 1762050814
  0xf762575d always 4150417245
  0x806567cb always 2154129355
Line 1000
  0x196c3671 always 426522225
  0x6e6b06e7 always 1852507879
  0xfed41b76 always 4275313526
  0x89d32be0 always 2312317920
  0x10da7a5a always 282753626
  0x67dd4acc always 1742555852
Line 1001
  0xf9b9df6f always 4189708143
  0x8ebeeff9 always 2394877945
  0x17b7be43 always 397917763
  0x60b08ed5 always 1622183637
  0xd6d6a3e8 always 3604390888
  0xa1d1937e always 2714866558
Line 1002
  0x38d8c2c4 always 953729732
  0x4fdff252 always 1340076626
  0xd1bb67f1 always 3518719985
  0xa6bc5767 always 2797360999
  0x3fb506dd always 1068828381
  0x48b2364b always 1219638859
Line 1003
  0xd80d2bda always 3624741850
  0xaf0a1b4c always 2936675148
  0x36034af6 always 906185462
  0x41047a60 always 1090812512
  0xdf60efc3 always 3747672003
  0xa867df55 always 2825379669
Line 1004
  0x316e8eef always 829329135
  0x4669be79 always 1181335161
  0xcb61b38c always 3412177804
  0xbc66831a always 3160834842
  0x256fd2a0 always 628085408
  0x5268e236 always 1382605366
Line 1005
  0xcc0c7795 always 3423369109
  0xbb0b4703 always 3138078467
  0x220216b9 always 570562233
  0x5505262f always 1426400815
  0xc5ba3bbe always 3317316542
  0xb2bd0b28 always 2998733608
Line 1006
  0x2bb45a92 always 733239954
  0x5cb36a04 always 1555261956
  0xc2d7ffa7 always 3268935591
  0xb5d0cf31 always 3050360625
  0x2cd99e8b always 752459403
  0x5bdeae1d always 1541320221
Line 1007
  0x9b64c2b0 always 2607071920
  0xec63f226 always 3965973030
  0x756aa39c always 1969922972
  0x026d930a always 40735498
  0x9c0906a9 always 2617837225
  0xeb0e363f always 3943577151
Line 1008
  0x72076785 always 1913087877
  0x05005713 always 83908371
  0x95bf4a82 always 2512341634
  0xe2b87a14 always 3803740692
  0x7bb12bae always 2075208622
  0x0cb61b38 always 213261112
Line 1009
  0x92d28e9b always 2463272603
  0xe5d5be0d always 3855990285
  0x7cdcefb7 always 2094854071
  0x0bdbdf21 always 198958881
  0x86d3d2d4 always 2262029012
  0xf1d4e242 always 4057260610
Line 1010
  0x68ddb3f8 always 1759359992
  0x1fda836e always 534414190
  0x81be16cd always 2176718541
  0xf6b9265b always 4139329115
  0x6fb077e1 always 1873836001
  0x18b74777 always 414664567
Line 1011
  0x88085ae6 always 2282248934
  0xff0f6a70 always 4279200368
  0x66063bca always 1711684554
  0x11010b5c always 285281116
  0x8f659eff always 2405801727
  0xf862ae69 always 4167216745
Line 1012
  0x616bffd3 always 1634467795
  0x166ccf45 always 376229701
  0xa00ae278 always 2685067896
  0xd70dd2ee always 3608007406
  0x4e048354 always 1308918612
  0x3903b3c2 always 956543938
Line 1013
  0xa7672661 always 2808555105
  0xd06016f7 always 3495958263
  0x4969474d always 1231636301
  0x3e6e77db always 1047427035
  0xaed16a4a always 2932959818
  0xd9d65adc always 3654703836
Line 1014
  0x40df0b66 always 1088359270
  0x37d83bf0 always 936918000
  0xa9bcae53 always 2847714899
  0xdebb9ec5 always 3736837829
  0x47b2cf7f always 1202900863
  0x30b5ffe9 always 817233897
Line 1015
  0xbdbdf21c always 3183342108
  0xcabac28a always 3401237130
  0x53b39330 always 1404277552
  0x24b4a3a6 always 615818150
  0xbad03605 always 3134207493
  0xcdd70693 always 3453421203
Line 1016
  0x54de5729 always 1423857449
  0x23d967bf always 601450431
  0xb3667a2e always 3009837614
  0xc4614ab8 always 3294710456
  0x5d681b02 always 1567103746
  0x2a6f2b94 always 711928724
Line 1017
  0xb40bbe37 always 3020668471
  0xc30c8ea1 always 3272380065
  0x5a05df1b always 1510334235
  0x2d02ef8d always 755167117
Line 1020
  ( always !<=-1
Line 1022
  :: always !<=-1
  crc always !<=-1
  crc always !<=-1
  = always 4294967295
  ~ always 4294967295
  0U always 0
Line 1024
  crc always !<=-1
  = always !<=-1
  crc32Table always {
  [ always !<=-1
  crc {!<=-1,4294967295}
  ^ always !<=-1
  ( always !<=-1
  & always !<=-1
  0xFF always 255
  ^ always !<=-1
  crc {!<=-1,4294967295}
  >> {!<=-1,16777215}
  8 always 8
Line 1026
  return always !<=-1
  crc always !<=-1
  ^ always !<=-1
  ~ always 4294967295
  0U always 0
Line 1029
  ( always !<=-1
Line 1032
  '\n' always 10
Line 1034
  ! always {!<=-1,!>=2}
Line 1037
  = {lifetime[Iterator]=(mTokenLists),start=0}
  ( {lifetime[Iterator]=(mTokenLists),start=0}
  it possible {lifetime[Iterator]=(mTokenLists),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mTokenLists),end=0}
  it inconclusive lifetime[Iterator]=(mTokenLists)
Line 1038
  it {lifetime[Iterator]=(mTokenLists),!symbolic=(mTokenLists.end()),!end=0}
Line 1039
  ! always {!<=-1,!>=2}
Line 1043
  return always !<=-1
  ( always !<=-1
Line 1058
  != always {!<=-1,!>=2}
  '#' always 35
Line 1060
  ( always {!<=-1,!>=2}
Line 1064
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok2 always !0
  || always {!<=-1,!>=2}
  tok2 always !0
  != always {!<=-1,!>=2}
  "pragma" always "pragma"
Line 1067
  tok2 always !0
Line 1068
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  tok3 always !0
  || always {!<=-1,!>=2}
  tok3 always !0
  != always {!<=-1,!>=2}
  "asm" always "asm"
Line 1071
  = always !0
  tok3 always !0
Line 1072
  endasm possible symbolic=(tok3)
  != always {!<=-1,!>=2}
  nullptr always 0
Line 1073
  endasm always !0
  != always {!<=-1,!>=2}
  '#' always 35
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  endasm always !0
  endasm always !0
Line 1075
  endasm always !0
Line 1076
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  endasm always !0
  endasm2 always !0
  || always {!<=-1,!>=2}
  endasm2 always !0
  != always {!<=-1,!>=2}
  "pragma" always "pragma"
Line 1078
  endasm2 always !0
Line 1079
  ! always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  endasm2 always !0
  endasm3 always !0
  || always {!<=-1,!>=2}
  endasm3 always !0
  != always {!<=-1,!>=2}
  "endasm" always "endasm"
Line 1081
  ( always {!<=-1,!>=2}
  endasm3 always !0
Line 1087
  "asm" always "asm"
Line 1088
  "(" always "("
Line 1089
  ")" always ")"
Line 1090
  ( always symbolic=(tok3->next)
  tok4 always symbolic=(tok3->next)
  ";" always ";"
Line 1091
  tok4 always symbolic=(tok3->next)
  != always {!<=-1,!>=2}
  endasm possible 0
Line 1092
  tok4 always symbolic=(tok3->next)
  . always !symbolic=(endasm)
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( {!<=-1,6@29}
  flag possible 6@29
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
