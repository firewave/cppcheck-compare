

##file cppcheck-2.8/lib/config.h

1:
|
78:
79: static const std :: string emptyString@var1 ;

##file cppcheck-2.8/lib/summaries.h

1:
|
28:
29: class Tokenizer ;
30:
31: namespace Summaries {
32: std :: string create ( const Tokenizer * tokenizer@var2 , const std :: string & cfg@var3 ) ;
33: void loadReturn ( const std :: string & buildDir@var4 , std :: set < std :: string > & summaryReturn@var5 ) ;
34: }

##file cppcheck-2.8/lib/platform.h

1:
|
31:
32: namespace tinyxml2 {
33: class XMLDocument ;
34: }
35:
36: namespace cppcheck {
37:
|
40:
41: class Platform {
42: private:
43: static long long min_value ( int bit@var6 ) {
44: if (@expr1073743810 bit@var6 >=@expr1073743811 64 ) {
45: return LLONG_MIN ; }
46: return -@expr1073743812 (@expr1073743813 1LL <<@expr1073743814 (@expr1073743815 bit@var6 -@expr1073743816 1 ) ) ;
47: }
48:
49: static long long max_value ( int bit@var7 ) {
50: if (@expr1073743817 bit@var7 >=@expr1073743818 64 ) {
51: return (@expr1995 ~@expr1073743820 0ULL ) >>@expr1073743821 1 ; }
52: return (@expr1995 1LL <<@expr1073743823 (@expr1995 bit@var7 -@expr1073743825 1 ) ) -@expr1073743826 1LL ;
53: }
54: public:
55: Platform ( ) ;
56: virtual ~ Platform ( ) { }
57:
58: bool isIntValue ( long long value@var8 ) const {
59: return value@var8 >=@expr1073743827 min_value (@expr1073743828 int_bit@var18 ) &&@expr1073743829 value@var8 <=@expr1073743830 max_value (@expr1073743831 int_bit@var18 ) ;
60: }
61:
62: bool isIntValue ( unsigned long long value@var9 ) const {
63: unsigned long long intMax@var10 ; intMax@var10 =@expr1073743832 max_value (@expr1073743833 int_bit@var18 ) ;
64: return value@var9 <=@expr1073743834 intMax@var10 ;
65: }
66:
67: bool isLongValue ( long long value@var11 ) const {
68: return value@var11 >=@expr1073743835 min_value (@expr1073743836 long_bit@var19 ) &&@expr1073743837 value@var11 <=@expr1073743838 max_value (@expr1073743839 long_bit@var19 ) ;
69: }
70:
71: bool isLongValue ( unsigned long long value@var12 ) const {
72: unsigned long long longMax@var13 ; longMax@var13 =@expr1073743840 max_value (@expr1073743841 long_bit@var19 ) ;
73: return value@var12 <=@expr1073743842 longMax@var13 ;
74: }
75:
76: bool isLongLongValue ( unsigned long long value@var14 ) const {
77: unsigned long long longLongMax@var15 ; longLongMax@var15 =@expr1073743843 max_value (@expr1073743844 long_long_bit@var20 ) ;
78: return value@var14 <=@expr1073743845 longLongMax@var15 ;
79: }
80:
81: int char_bit@var16 ;
82: int short_bit@var17 ;
83: int int_bit@var18 ;
84: int long_bit@var19 ;
85: int long_long_bit@var20 ;
86:
87:
88: int sizeof_bool@var21 ;
89: int sizeof_short@var22 ;
90: int sizeof_int@var23 ;
91: int sizeof_long@var24 ;
92: int sizeof_long_long@var25 ;
93: int sizeof_float@var26 ;
94: int sizeof_double@var27 ;
95: int sizeof_long_double@var28 ;
96: int sizeof_wchar_t@var29 ;
97: int sizeof_size_t@var30 ;
98: int sizeof_pointer@var31 ;
99:
100: char defaultSign@var32 ;
101:
102: enum PlatformType {
103: Unspecified ,
104: Native ,
105: Win32A ,
106: Win32W ,
107: Win64 ,
108: Unix32 ,
109: Unix64 ,
110: PlatformFile
111: } ;
112:
113:
114: PlatformType platformType@var33 ;
115:
116:
117: bool platform ( PlatformType type@var34 ) ;
118:
|
124:
125: bool loadPlatformFile ( const char exename@var35 [ ] , const std :: string & filename@var36 ) ;
126:
127:
128: bool loadFromXmlDocument ( const tinyxml2 :: XMLDocument * doc@var37 ) ;
129:
|
133:
134: bool isWindowsPlatform ( ) const {
135: return platformType@var33 ==@expr1073743846 Win32A ||@expr1073743847
136: platformType@var33 ==@expr1073743848 Win32W ||@expr1073743849
137: platformType@var33 ==@expr1073743850 Win64 ;
138: }
139:
140: const char * platformString ( ) const {
141: return platformString (@expr1073743851 platformType@var33 ) ;
142: }
143:
144: static const char * platformString ( PlatformType pt@var38 ) {
145: switch (@expr1073743852 pt@var38 ) {
146: case Unspecified :@expr2029 ;
147: return "Unspecified" ;
148: case Native :@expr2029 ;
149: return "Native" ;
150: case Win32A :@expr2029 ;
151: return "win32A" ;
152: case Win32W :@expr2029 ;
153: return "win32W" ;
154: case Win64 :@expr2029 ;
155: return "win64" ;
156: case Unix32 :@expr2029 ;
157: return "unix32" ;
158: case Unix64 :@expr2029 ;
159: return "unix64" ;
160: case PlatformFile :@expr2029 ;
161: return "platformFile" ;
162: default :@expr2029 ;
163: return "unknown" ;
164: }
165: }
166:
167: long long unsignedCharMax ( ) const {
168: return max_value (@expr1073743862 char_bit@var16 +@expr1073743863 1 ) ;
169: }
170:
171: long long signedCharMax ( ) const {
172: return max_value (@expr1073743864 char_bit@var16 ) ;
173: }
174:
175: long long signedCharMin ( ) const {
176: return min_value (@expr1073743865 char_bit@var16 ) ;
177: }
178: } ;
179:
180: }

##file cppcheck-2.8/lib/utils.h

1:
|
31:
32: struct SelectMapKeys {
33: template < class Pair >
34: Pair :: first_type operator() ( const Pair & p@var39 ) const {
35: return p@var39 .@expr1073743866 first@var40 ;
36: }
37: } ;
38:
39: struct SelectMapValues {
40: template < class Pair >
41: Pair :: second_type operator() ( const Pair & p@var41 ) const {
42: return p@var41 .@expr1073743867 second@var42 ;
43: }
44: } ;
45:
46: template < class Range , class T >
47: bool contains ( const Range & r@var43 , const T & x@var44 )
48: {
49: return std ::@expr1073743868 find (@expr1073743869 r@var43 .@expr1073743870 begin (@expr1073743871 ) , r@var43 .@expr2048 end (@expr2049 ) , x@var44 ) !=@expr1073743874 r@var43 .@expr2048 end (@expr2049 ) ;
50: }
51:
52: template < class T >
53: bool contains ( const std :: initializer_list < T > & r@var45 , const T & x@var46 )
54: {
55: return std ::@expr1073743877 find (@expr1073743878 r@var45 .@expr1073743879 begin (@expr1073743880 ) , r@var45 .@expr2057 end (@expr2058 ) , x@var46 ) !=@expr1073743883 r@var45 .@expr2057 end (@expr2058 ) ;
56: }
57:
58: template < class T , class U >
59: bool contains ( const std :: initializer_list < T > & r@var47 , const U & x@var48 )
60: {
61: return std ::@expr1073743886 find (@expr1073743887 r@var47 .@expr1073743888 begin (@expr1073743889 ) , r@var47 .@expr2066 end (@expr2067 ) , x@var48 ) !=@expr1073743892 r@var47 .@expr2066 end (@expr2067 ) ;
62: }
63:
64:
65: struct EnumClassHash {
66: template < typename T >
67: unsigned long operator() ( T t@var49 ) const
68: {
69: return static_cast < unsigned long > (@expr1073743895 t@var49 ) ;
70: }
71: } ;
72:
73: bool endsWith ( const std :: string & str@var50 , char c@var51 )
74: {
75: return !@expr1073743896 str@var50 .@expr1073743897 empty (@expr1073743898 ) &&@expr1073743899 str@var50 .@expr1073743900 back (@expr1073743901 ) ==@expr1073743902 c@var51 ;
76: }
77:
78: bool endsWith ( const std :: string & str@var52 , const char end@var53 [ ] , unsigned long endlen@var54 )
79: {
80: return (@expr2079 str@var52 .@expr2080 size (@expr2081 ) >=@expr1073743906 endlen@var54 ) &&@expr1073743907 (@expr2079 str@var52 .@expr1073743909 compare (@expr1073743910 str@var52 .@expr2080 size (@expr2081 ) -@expr1073743913 endlen@var54 , endlen@var54 , end@var53 ) ==@expr1073743914 0 ) ;
81: }
82:
83: template < unsigned long N >
84: bool endsWith ( const std :: string & str@var55 , const char ( & end@var56 ) [ N ] )
85: {
86: return endsWith (@expr1073743916 str@var55 , end@var56 , N@expr1073743915 -@expr1073743917 1 ) ;
87: }
88:
89: static bool isPrefixStringCharLiteral ( const std :: string & str@var57 , char q@var58 , const std :: string & p@var59 )
90: {
91: if (@expr1073743918 !@expr1073743919 endsWith (@expr1073743920 str@var57 , q@var58 ) ) {
92: return false ; }
93: if (@expr1073743921 (@expr1073743922 str@var57 .@expr1073743923 length (@expr1073743924 ) +@expr1073743925 1 ) >@expr1073743926 p@var59 .@expr1073743927 length (@expr1073743928 ) &&@expr1073743929 (@expr1073743930 str@var57 .@expr1073743931 compare (@expr1073743932 0 , p@var59 .@expr1073743933 size (@expr1073743934 ) +@expr1073743935 1 , p@var59 +@expr1073743936 q@var58 ) ==@expr1073743937 0 ) ) {
94: return true ; }
95: return false ;
96: }
97:
98: static bool isStringCharLiteral ( const std :: string & str@var60 , char q@var61 )
99: {
100: static const std ::@expr2114 vector < std ::@expr2114 string > suffixes@var62 {@expr1073743940 "" , "u8" , "u" , "U" , "L" } ;
101: for (@expr1073743941 const std ::@expr2114 string &@expr1073743943 p@var63 :@expr1073743944 suffixes@var62 ) {
102: if (@expr1073743945 isPrefixStringCharLiteral (@expr1073743946 str@var60 , q@var61 , p@var63 ) ) {
103: return true ; }
104: }
105: return false ;
106: }
107:
108: static bool isStringLiteral ( const std :: string & str@var64 )
109: {
110: return isStringCharLiteral (@expr1073743947 str@var64 , '"' ) ;
111: }
112:
113: static bool isCharLiteral ( const std :: string & str@var65 )
114: {
115: return isStringCharLiteral (@expr1073743948 str@var65 , '\'' ) ;
116: }
117:
118: static std :: string getStringCharLiteral ( const std :: string & str@var66 , char q@var67 )
119: {
120: const unsigned long quotePos@var68 =@expr1073743949 str@var66 .@expr1073743950 find (@expr1073743951 q@var67 ) ;
121: return str@var66 .@expr1073743952 substr (@expr1073743953 quotePos@var68 +@expr1073743954 1U , str@var66 .@expr1073743955 size (@expr1073743956 ) -@expr1073743957 quotePos@var68 -@expr1073743958 2U ) ;
122: }
123:
124: static std :: string getStringLiteral ( const std :: string & str@var69 )
125: {
126: if (@expr1073743959 isStringLiteral (@expr1073743960 str@var69 ) ) {
127: return getStringCharLiteral (@expr1073743961 str@var69 , '"' ) ; }
128: return "" ;
129: }
130:
131: static std :: string getCharLiteral ( const std :: string & str@var70 )
132: {
133: if (@expr1073743962 isCharLiteral (@expr1073743963 str@var70 ) ) {
134: return getStringCharLiteral (@expr1073743964 str@var70 , '\'' ) ; }
135: return "" ;
136: }
137:
138: static const char * getOrdinalText ( int i@var71 )
139: {
140: if (@expr1073743965 i@var71 ==@expr1073743966 1 ) {
141: return "st" ; }
142: if (@expr1073743967 i@var71 ==@expr1073743968 2 ) {
143: return "nd" ; }
144: if (@expr1073743969 i@var71 ==@expr1073743970 3 ) {
145: return "rd" ; }
146: return "th" ;
147: }
148:
149: int caseInsensitiveStringCompare ( const std :: string & lhs@var72 , const std :: string & rhs@var73 ) ;
150:
151: bool isValidGlobPattern ( const std :: string & pattern@var74 ) ;
152:
153: bool matchglob ( const std :: string & pattern@var75 , const std :: string & name@var76 ) ;
154:
155: bool matchglobs ( const std :: vector < std :: string > & patterns@var77 , const std :: string & name@var78 ) ;
156:
157: void strTolower ( std :: string & str@var79 ) ;

##file cppcheck-2.8/lib/importproject.h

1:
|
37:
38: namespace cppcheck {
39: struct stricmp {
40: bool operator() ( const std :: string & lhs@var80 , const std :: string & rhs@var81 ) const {
41: return caseInsensitiveStringCompare (@expr1073743971 lhs@var80 , rhs@var81 ) <@expr1073743972 0 ;
42: }
43: } ;
44: }
45:
46: class Settings ;
47:
|
50:
51: class ImportProject {
52: public:
53: enum class Type {
54: UNKNOWN ,
55: MISSING ,
56: FAILURE ,
57: COMPILE_DB ,
58: VS_SLN ,
59: VS_VCXPROJ ,
60: BORLAND ,
61: CPPCHECK_GUI
62: } ;
63:
64:
65: struct FileSettings {
66: FileSettings ( ) : platformType@var89 ( cppcheck :: Platform :: Unspecified ) , msc@var90 ( false ) , useMfc@var91 ( false ) { }
67: std :: string cfg@var82 ;
68: std :: string filename@var83 ;
69: std :: string defines@var84 ;
70: std :: string cppcheckDefines ( ) const {
71: return defines@var84 +@expr1073743973 (@expr1073743974 msc@var90 ?@expr1073743975 ";_MSC_VER=1900" :@expr1073743976 "" ) +@expr1073743977 (@expr1073743978 useMfc@var91 ?@expr1073743979 ";__AFXWIN_H__=1" :@expr1073743980 "" ) ;
72: }
73: std :: set < std :: string > undefs@var85 ;
74: std :: list < std :: string > includePaths@var86 ;
75: std :: list < std :: string > systemIncludePaths@var87 ;
76: std :: string standard@var88 ;
77: cppcheck :: Platform :: PlatformType platformType@var89 ;
78: bool msc@var90 ;
79: bool useMfc@var91 ;
80:
81: void parseCommand ( std :: string command@var92 ) ;
82: void setDefines ( std :: string defs@var93 ) ;
83: void setIncludePaths ( const std :: string & basepath@var94 , const std :: list < std :: string > & in@var95 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var96 ) ;
84: } ;
85: std :: list < FileSettings > fileSettings@var97 ;
86: Type projectType@var98 ;
87:
88: ImportProject ( ) ;
89:
90: void selectOneVsConfig ( cppcheck :: Platform :: PlatformType platform@var99 ) ;
91:
92: std :: list < std :: string > getVSConfigs ( ) ;
93:
94:
95: struct Anonymous0 {
96: std :: string analyzeAllVsConfigs@var100 ;
97: std :: vector < std :: string > pathNames@var101 ;
98: std :: list < std :: string > libraries@var102 ;
99: std :: list < std :: string > excludedPaths@var103 ;
100: std :: list < std :: string > checkVsConfigs@var104 ;
101: std :: string projectFile@var105 ;
102: std :: string platform@var106 ;
103: } ; struct Anonymous0 guiProject@var107 ;
104:
105: void ignorePaths ( const std :: vector < std :: string > & ipaths@var108 ) ;
106: void ignoreOtherConfigs ( const std :: string & cfg@var109 ) ;
107:
108: Type import ( const std :: string & filename@var110 , Settings * settings@var111 = nullptr ) ;
109: protected:
110: bool importCompileCommands ( std :: istream & istr@var112 ) ;
111: bool importCppcheckGuiProject ( std :: istream & istr@var113 , Settings * settings@var114 ) ;
112: virtual bool sourceFileExists ( const std :: string & file@var115 ) ;
113: private:
114: bool importSln ( std :: istream & istr@var116 , const std :: string & path@var117 , const std :: vector < std :: string > & fileFilters@var118 ) ;
115: bool importVcxproj ( const std :: string & filename@var119 , std :: map < std :: string , std :: string , cppcheck :: stricmp > & variables@var120 , const std :: string & additionalIncludeDirectories@var121 , const std :: vector < std :: string > & fileFilters@var122 ) ;
116: bool importBcb6Prj ( const std :: string & projectFilename@var123 ) ;
117:
118: static void printError ( const std :: string & message@var124 ) ;
119:
120: void setRelativePaths ( const std :: string & filename@var125 ) ;
121:
122: std :: string mPath@var126 ;
123: std :: set < std :: string > mAllVSConfigs@var127 ;
124: } ;
125:
126:
127: namespace CppcheckXml {
128: const char ProjectElementName@var128 [ 8 ] = "project" ;
129: const char ProjectVersionAttrib@var129 [ 8 ] = "version" ;
130: const char ProjectFileVersion@var130 [ 2 ] = "1" ;
131: const char BuildDirElementName@var131 [ 9 ] = "builddir" ;
132: const char ImportProjectElementName@var132 [ 14 ] = "importproject" ;
133: const char AnalyzeAllVsConfigsElementName@var133 [ 23 ] = "analyze-all-vs-configs" ;
134: const char Parser@var134 [ 7 ] = "parser" ;
135: const char BugHunting@var135 [ 12 ] = "bug-hunting" ;
136: const char IncludeDirElementName@var136 [ 11 ] = "includedir" ;
137: const char DirElementName@var137 [ 4 ] = "dir" ;
138: const char DirNameAttrib@var138 [ 5 ] = "name" ;
139: const char DefinesElementName@var139 [ 8 ] = "defines" ;
140: const char DefineName@var140 [ 7 ] = "define" ;
141: const char DefineNameAttrib@var141 [ 5 ] = "name" ;
142: const char UndefinesElementName@var142 [ 10 ] = "undefines" ;
143: const char UndefineName@var143 [ 9 ] = "undefine" ;
144: const char PathsElementName@var144 [ 6 ] = "paths" ;
145: const char PathName@var145 [ 4 ] = "dir" ;
146: const char PathNameAttrib@var146 [ 5 ] = "name" ;
147: const char RootPathName@var147 [ 5 ] = "root" ;
148: const char RootPathNameAttrib@var148 [ 5 ] = "name" ;
149: const char IgnoreElementName@var149 [ 7 ] = "ignore" ;
150: const char IgnorePathName@var150 [ 5 ] = "path" ;
151: const char IgnorePathNameAttrib@var151 [ 5 ] = "name" ;
152: const char ExcludeElementName@var152 [ 8 ] = "exclude" ;
153: const char ExcludePathName@var153 [ 5 ] = "path" ;
154: const char ExcludePathNameAttrib@var154 [ 5 ] = "name" ;
155: const char FunctionContracts@var155 [ 19 ] = "function-contracts" ;
156: const char VariableContractsElementName@var156 [ 19 ] = "variable-contracts" ;
157: const char LibrariesElementName@var157 [ 10 ] = "libraries" ;
158: const char LibraryElementName@var158 [ 8 ] = "library" ;
159: const char PlatformElementName@var159 [ 9 ] = "platform" ;
160: const char SuppressionsElementName@var160 [ 13 ] = "suppressions" ;
161: const char SuppressionElementName@var161 [ 12 ] = "suppression" ;
162: const char AddonElementName@var162 [ 6 ] = "addon" ;
163: const char AddonsElementName@var163 [ 7 ] = "addons" ;
164: const char ToolElementName@var164 [ 5 ] = "tool" ;
165: const char ToolsElementName@var165 [ 6 ] = "tools" ;
166: const char TagsElementName@var166 [ 5 ] = "tags" ;
167: const char TagElementName@var167 [ 4 ] = "tag" ;
168: const char TagWarningsElementName@var168 [ 13 ] = "tag-warnings" ;
169: const char TagAttributeName@var169 [ 4 ] = "tag" ;
170: const char WarningElementName@var170 [ 8 ] = "warning" ;
171: const char HashAttributeName@var171 [ 5 ] = "hash" ;
172: const char CheckHeadersElementName@var172 [ 14 ] = "check-headers" ;
173: const char CheckUnusedTemplatesElementName@var173 [ 23 ] = "check-unused-templates" ;
174: const char MaxCtuDepthElementName@var174 [ 14 ] = "max-ctu-depth" ;
175: const char MaxTemplateRecursionElementName@var175 [ 23 ] = "max-template-recursion" ;
176: const char CheckUnknownFunctionReturn@var176 [ 37 ] = "check-unknown-function-return-values" ;
177: const char ClangTidy@var177 [ 11 ] = "clang-tidy" ;
178: const char Name@var178 [ 5 ] = "name" ;
179: const char VSConfigurationElementName@var179 [ 18 ] = "vs-configurations" ;
180: const char VSConfigurationName@var180 [ 7 ] = "config" ;
181: }

##file cppcheck-2.8/lib/analyzerinfo.h

1:
|
30:
31: class ErrorMessage ;
32:
|
48:
49: class AnalyzerInformation {
50: public:
51: ~ AnalyzerInformation ( ) ;
52:
53: static void writeFilesTxt ( const std :: string & buildDir@var181 , const std :: list < std :: string > & sourcefiles@var182 , const std :: string & userDefines@var183 , const std :: list < ImportProject :: FileSettings > & fileSettings@var184 ) ;
54:
55:
56: void close ( ) ;
57: bool analyzeFile ( const std :: string & buildDir@var185 , const std :: string & sourcefile@var186 , const std :: string & cfg@var187 , unsigned long long checksum@var188 , std :: list < ErrorMessage > * errors@var189 ) ;
58: void reportErr ( const ErrorMessage & msg@var190 , bool verbose@var191 ) ;
59: void setFileInfo ( const std :: string & check@var192 , const std :: string & fileInfo@var193 ) ;
60: static std :: string getAnalyzerInfoFile ( const std :: string & buildDir@var194 , const std :: string & sourcefile@var195 , const std :: string & cfg@var196 ) ;
61: private:
62: std :: ofstream mOutputStream@var197 ;
63: std :: string mAnalyzerInfoFile@var198 ;
64: } ;

##file cppcheck-2.8/lib/errortypes.h

1:
|
31:
32: class Token ;
33:
34:
35: struct InternalError {
36: enum Type { AST , SYNTAX , UNKNOWN_MACRO , INTERNAL , LIMIT , INSTANTIATION } ;
37: InternalError ( const Token * tok@var199 , const std :: string & errorMsg@var200 , Type type@var201 = INTERNAL ) ;
38: const Token * token@var202 ;
39: std :: string errorMessage@var203 ;
40: Type type@var204 ;
41: std :: string id@var205 ;
42: } ;
43:
44: class Certainty {
45: public:
46: enum CertaintyLevel {
47: normal , inconclusive , safe , experimental
48: } ;
49: } ;
50:
51: class Checks {
52: public:
53: enum CheckList {
54: unusedFunction , missingInclude , internalCheck
55: } ;
56: } ;
57:
58:
59: class Severity {
60: public:
61:
62:
63:
64: enum SeverityType {
65:
66:
67:
68: none ,
69:
|
73:
74: error ,
75:
|
79:
80: warning ,
81:
|
86:
87: style ,
88:
|
92:
93: performance ,
94:
|
100:
101: portability ,
102:
|
107:
108: information ,
109:
|
112:
113: debug
114: } ;
115:
116: static std :: string toString ( SeverityType severity@var206 ) ;
117: static SeverityType fromString ( const std :: string & severity@var207 ) ;
118: } ;
119:
120: struct CWE {
121: explicit CWE ( unsigned short cweId@var208 ) : id@var209 ( cweId@var208 ) { }
122: unsigned short id@var209 ;
123: } ;

##file cppcheck-2.8/lib/mathlib.h

1:
|
33:
34: class MathLib {
35: friend class TestMathLib ;
36:
37: public:
38:
39: class value {
40: private:
41: long long mIntValue@var210 ;
42: double mDoubleValue@var211 ;
43: enum class Type { INT , LONG , LONGLONG , FLOAT } ; enum Type mType@var212 ;
44: bool mIsUnsigned@var213 ;
45:
46: void promote ( const value & v@var214 ) ;
47:
48: public:
49: explicit value ( const std :: string & s@var215 ) ;
50: std :: string str ( ) const ;
51: bool isInt ( ) const {
52: return mType@var212 !=@expr1073743981 Type ::@expr1073743982 FLOAT ;
53: }
54: bool isFloat ( ) const {
55: return mType@var212 ==@expr1073743983 Type ::@expr1073743984 FLOAT ;
56: }
57:
58: double getDoubleValue ( ) const {
59: return isFloat (@expr1073743985 ) ?@expr1073743986 mDoubleValue@var211 :@expr1073743987 (@expr1073743988 double ) mIntValue@var210 ;
60: }
61:
62: static value calc ( char op@var216 , const value & v1@var217 , const value & v2@var218 ) ;
63: int compare ( const value & v@var219 ) const ;
64: value add ( int v@var220 ) const ;
65: value shiftLeft ( const value & v@var221 ) const ;
66: value shiftRight ( const value & v@var222 ) const ;
67: } ;
68:
69:
70:
71: static const int bigint_bits@var223 ;
72:
73: static long long toLongNumber ( const std :: string & str@var224 ) ;
74: static unsigned long long toULongNumber ( const std :: string & str@var225 ) ;
75:
76: template < class T > static std :: string toString ( T value@var226 ) {
77: std ::@expr1073743989 ostringstream result@var227 ;
78: result@var227 <<@expr1073743990 value@var226 ;
79: return result@var227 .@expr1073743991 str (@expr1073743992 ) ;
80: }
81: static double toDoubleNumber ( const std :: string & str@var228 ) ;
82:
83: static bool isInt ( const std :: string & str@var229 ) ;
84: static bool isFloat ( const std :: string & str@var230 ) ;
85: static bool isDecimalFloat ( const std :: string & str@var231 ) ;
86: static bool isNegative ( const std :: string & str@var232 ) ;
87: static bool isPositive ( const std :: string & str@var233 ) ;
88: static bool isDec ( const std :: string & str@var234 ) ;
89: static bool isFloatHex ( const std :: string & str@var235 ) ;
90: static bool isIntHex ( const std :: string & str@var236 ) ;
91: static bool isOct ( const std :: string & str@var237 ) ;
92: static bool isBin ( const std :: string & str@var238 ) ;
93:
94: static std :: string getSuffix ( const std :: string & value@var239 ) ;
95:
|
101:
102: static bool isValidIntegerSuffix ( const std :: string & str@var240 , bool supportMicrosoftExtensions@var241 = true ) ;
103:
104: static std :: string add ( const std :: string & first@var242 , const std :: string & second@var243 ) ;
105: static std :: string subtract ( const std :: string & first@var244 , const std :: string & second@var245 ) ;
106: static std :: string multiply ( const std :: string & first@var246 , const std :: string & second@var247 ) ;
107: static std :: string divide ( const std :: string & first@var248 , const std :: string & second@var249 ) ;
108: static std :: string mod ( const std :: string & first@var250 , const std :: string & second@var251 ) ;
109: static std :: string incdec ( const std :: string & var@var252 , const std :: string & op@var253 ) ;
110: static std :: string calculate ( const std :: string & first@var254 , const std :: string & second@var255 , char action@var256 ) ;
111:
112: static std :: string sin ( const std :: string & tok@var257 ) ;
113: static std :: string cos ( const std :: string & tok@var258 ) ;
114: static std :: string tan ( const std :: string & tok@var259 ) ;
115: static std :: string abs ( const std :: string & tok@var260 ) ;
116: static bool isEqual ( const std :: string & first@var261 , const std :: string & second@var262 ) ;
117: static bool isNotEqual ( const std :: string & first@var263 , const std :: string & second@var264 ) ;
118: static bool isGreater ( const std :: string & first@var265 , const std :: string & second@var266 ) ;
119: static bool isGreaterEqual ( const std :: string & first@var267 , const std :: string & second@var268 ) ;
120: static bool isLess ( const std :: string & first@var269 , const std :: string & second@var270 ) ;
121: static bool isLessEqual ( const std :: string & first@var271 , const std :: string & second@var272 ) ;
122: static bool isNullValue ( const std :: string & str@var273 ) ;
123:
|
127:
128: static bool isOctalDigit ( char c@var274 ) ;
129:
130: static unsigned int encodeMultiChar ( const std :: string & str@var275 ) ;
131:
|
136:
137: static bool isDigitSeparator ( const std :: string & iCode@var276 , std :: string :: size_type iPos@var277 ) ;
138: } ;
139:
140: MathLib :: value operator+ ( const MathLib :: value & v1@var278 , const MathLib :: value & v2@var279 ) ;
141: MathLib :: value operator- ( const MathLib :: value & v1@var280 , const MathLib :: value & v2@var281 ) ;
142: MathLib :: value operator* ( const MathLib :: value & v1@var282 , const MathLib :: value & v2@var283 ) ;
143: MathLib :: value operator/ ( const MathLib :: value & v1@var284 , const MathLib :: value & v2@var285 ) ;
144: MathLib :: value operator% ( const MathLib :: value & v1@var286 , const MathLib :: value & v2@var287 ) ;
145: MathLib :: value operator& ( const MathLib :: value & v1@var288 , const MathLib :: value & v2@var289 ) ;
146: MathLib :: value operator| ( const MathLib :: value & v1@var290 , const MathLib :: value & v2@var291 ) ;
147: MathLib :: value operator^ ( const MathLib :: value & v1@var292 , const MathLib :: value & v2@var293 ) ;
148: MathLib :: value operator<< ( const MathLib :: value & v1@var294 , const MathLib :: value & v2@var295 ) ;
149: MathLib :: value operator>> ( const MathLib :: value & v1@var296 , const MathLib :: value & v2@var297 ) ;
150:
151: template < > std :: string MathLib :: toString < double > ( double value@var298 ) ;

##file cppcheck-2.8/lib/standards.h

1:
|
35:
36: struct Standards {
37:
38: enum cstd_t { C89 , C99 , C11 , CLatest = C11 } ; enum cstd_t c@var299 ;
39:
40:
41: enum cppstd_t { CPP03 , CPP11 , CPP14 , CPP17 , CPP20 , CPP23 , CPPLatest = CPP23 } ; enum cppstd_t cpp@var300 ;
42:
43:
44: std :: string stdValue@var301 ;
45:
46:
47: Standards ( ) : c@var299 ( CLatest ) , cpp@var300 ( CPPLatest ) { }
48:
49: bool setC ( const std :: string & str@var302 ) {
50: stdValue@var301 =@expr1073743993 str@var302 ;
51: if (@expr1073743994 str@var302 ==@expr1073743995 "c89" ||@expr1073743996 str@var302 ==@expr1073743997 "C89" ) {
52: c@var299 =@expr1073743998 C89 ;
53: return true ;
54: }
55: if (@expr1073743999 str@var302 ==@expr1073744000 "c99" ||@expr1073744001 str@var302 ==@expr1073744002 "C99" ) {
56: c@var299 =@expr1073744003 C99 ;
57: return true ;
58: }
59: if (@expr1073744004 str@var302 ==@expr1073744005 "c11" ||@expr1073744006 str@var302 ==@expr1073744007 "C11" ) {
60: c@var299 =@expr1073744008 C11 ;
61: return true ;
62: }
63: return false ;
64: }
65: const std :: string getC ( ) const {
66: switch (@expr1073744009 c@var299 ) {
67: case C89 :@expr2186 ;
68: return "c89" ;
69: case C99 :@expr2186 ;
70: return "c99" ;
71: case C11 :@expr2186 ;
72: return "c11" ;
73: }
74: return "" ;
75: }
76: static cstd_t getC ( const std :: string & std@var303 ) {
77: if (@expr1073744013 std@var303 ==@expr1073744014 "c89" ) {
78: return Standards ::@expr1073744015 C89 ;
79: }
80: if (@expr1073744016 std@var303 ==@expr1073744017 "c99" ) {
81: return Standards ::@expr1073744018 C99 ;
82: }
83: if (@expr1073744019 std@var303 ==@expr1073744020 "c11" ) {
84: return Standards ::@expr1073744021 C11 ;
85: }
86: return Standards ::@expr1073744022 CLatest ;
87: }
88: bool setCPP ( std :: string str@var304 ) {
89: stdValue@var301 =@expr1073744023 str@var304 ;
90: strTolower (@expr1073744024 str@var304 ) ;
91: cpp@var300 =@expr1073744025 getCPP (@expr1073744026 str@var304 ) ;
92: return !@expr1073744027 stdValue@var301 .@expr1073744028 empty (@expr1073744029 ) &&@expr1073744030 str@var304 ==@expr1073744031 getCPP (@expr1073744032 ) ;
93: }
94: std :: string getCPP ( ) const {
95: return getCPP (@expr1073744033 cpp@var300 ) ;
96: }
97: static std :: string getCPP ( cppstd_t std@var305 ) {
98: switch (@expr1073744034 std@var305 ) {
99: case CPP03 :@expr2211 ;
100: return "c++03" ;
101: case CPP11 :@expr2211 ;
102: return "c++11" ;
103: case CPP14 :@expr2211 ;
104: return "c++14" ;
105: case CPP17 :@expr2211 ;
106: return "c++17" ;
107: case CPP20 :@expr2211 ;
108: return "c++20" ;
109: case CPP23 :@expr2211 ;
110: return "c++23" ;
111: }
112: return "" ;
113: }
114: static cppstd_t getCPP ( const std :: string & std@var306 ) {
115: if (@expr1073744041 std@var306 ==@expr1073744042 "c++03" ) {
116: return Standards ::@expr1073744043 CPP03 ;
117: }
118: if (@expr1073744044 std@var306 ==@expr1073744045 "c++11" ) {
119: return Standards ::@expr1073744046 CPP11 ;
120: }
121: if (@expr1073744047 std@var306 ==@expr1073744048 "c++14" ) {
122: return Standards ::@expr1073744049 CPP14 ;
123: }
124: if (@expr1073744050 std@var306 ==@expr1073744051 "c++17" ) {
125: return Standards ::@expr1073744052 CPP17 ;
126: }
127: if (@expr1073744053 std@var306 ==@expr1073744054 "c++20" ) {
128: return Standards ::@expr1073744055 CPP20 ;
129: }
130: if (@expr1073744056 std@var306 ==@expr1073744057 "c++23" ) {
131: return Standards ::@expr1073744058 CPP23 ;
132: }
133: return Standards ::@expr1073744059 CPPLatest ;
134: }
135: } ;

##file cppcheck-2.8/lib/library.h

1:
|
37:
38: class Token ;
39: class Settings ;
40:
41: namespace tinyxml2 {
42: class XMLDocument ;
43: class XMLElement ;
44: }
45:
|
51:
52: class Library {
53: friend class TestSymbolDatabase ;
54:
55: public:
56: Library ( ) ;
57:
58: enum class ErrorCode { OK , FILE_NOT_FOUND , BAD_XML , UNKNOWN_ELEMENT , MISSING_ATTRIBUTE , BAD_ATTRIBUTE_VALUE , UNSUPPORTED_FORMAT , DUPLICATE_PLATFORM_TYPE , PLATFORM_TYPE_REDEFINED } ;
59:
60: class Error {
61: public:
62: Error ( ) : errorcode@var310 ( ErrorCode :: OK ) { }
63: explicit Error ( ErrorCode e@var307 ) : errorcode@var310 ( e@var307 ) { }
64: template < typename T >
65: Error ( ErrorCode e@var308 , T && r@var309 ) : errorcode@var310 ( e@var308 ) , reason@var311 ( r@var309 ) { }
66: ErrorCode errorcode@var310 ;
67: std :: string reason@var311 ;
68: } ;
69:
70: Error load ( const char exename@var312 [ ] , const char path@var313 [ ] ) ;
71: Error load ( const tinyxml2 :: XMLDocument & doc@var314 ) ;
72:
73:
74: bool loadxmldata ( const char xmldata@var315 [ ] , unsigned long len@var316 ) ;
75:
76: struct AllocFunc {
77: int groupId@var317 ;
78: int arg@var318 ;
79: enum class BufferSize { none , malloc , calloc , strdup } ;
80: BufferSize bufferSize@var319 ;
81: int bufferSizeArg1@var320 ;
82: int bufferSizeArg2@var321 ;
83: int reallocArg@var322 ;
84: bool initData@var323 ;
85: } ;
86:
87:
88: const AllocFunc * getAllocFuncInfo ( const Token * tok@var324 ) const ;
89:
90:
91: const AllocFunc * getDeallocFuncInfo ( const Token * tok@var325 ) const ;
92:
93:
94: const AllocFunc * getReallocFuncInfo ( const Token * tok@var326 ) const ;
95:
96:
97: int getAllocId ( const Token * tok@var327 , int arg@var328 ) const ;
98:
99:
100: int getDeallocId ( const Token * tok@var329 , int arg@var330 ) const ;
101:
102:
103: int getReallocId ( const Token * tok@var331 , int arg@var332 ) const ;
104:
105:
106: const AllocFunc * getAllocFuncInfo ( const char name@var333 [ ] ) const {
107: return getAllocDealloc (@expr1073744060 mAlloc@var599 , name@var333 ) ;
108: }
109:
110:
111: const AllocFunc * getDeallocFuncInfo ( const char name@var334 [ ] ) const {
112: return getAllocDealloc (@expr1073744061 mDealloc@var600 , name@var334 ) ;
113: }
114:
115:
116: int allocId ( const char name@var335 [ ] ) const {
117: const AllocFunc * af@var336 ; af@var336 =@expr1073744062 getAllocDealloc (@expr1073744063 mAlloc@var599 , name@var335 ) ;
118: return af@var336 ?@expr1073744064 af@var336 .@expr1073744065 groupId@var337 :@expr1073744066 0 ;
119: }
120:
121:
122: int deallocId ( const char name@var338 [ ] ) const {
123: const AllocFunc * af@var339 ; af@var339 =@expr1073744067 getAllocDealloc (@expr1073744068 mDealloc@var600 , name@var338 ) ;
124: return af@var339 ?@expr1073744069 af@var339 .@expr1073744070 groupId@var340 :@expr1073744071 0 ;
125: }
126:
127:
128: void setalloc ( const std :: string & functionname@var341 , int id@var342 , int arg@var343 ) {
129: mAlloc@var599 [@expr2248 functionname@var341 ] .@expr1073744073 groupId@var1986 =@expr1073744074 id@var342 ;
130: mAlloc@var599 [@expr2248 functionname@var341 ] .@expr1073744076 arg@var1987 =@expr1073744077 arg@var343 ;
131: }
132:
133: void setdealloc ( const std :: string & functionname@var344 , int id@var345 , int arg@var346 ) {
134: mDealloc@var600 [@expr2254 functionname@var344 ] .@expr1073744079 groupId@var1988 =@expr1073744080 id@var345 ;
135: mDealloc@var600 [@expr2254 functionname@var344 ] .@expr1073744082 arg@var1989 =@expr1073744083 arg@var346 ;
136: }
137:
138: void setrealloc ( const std :: string & functionname@var347 , int id@var348 , int arg@var349 , int reallocArg@var350 = 1 ) {
139: mRealloc@var601 [@expr2260 functionname@var347 ] .@expr1073744085 groupId@var1990 =@expr1073744086 id@var348 ;
140: mRealloc@var601 [@expr2260 functionname@var347 ] .@expr1073744088 arg@var1991 =@expr1073744089 arg@var349 ;
141: mRealloc@var601 [@expr2260 functionname@var347 ] .@expr1073744091 reallocArg@var1992 =@expr1073744092 reallocArg@var350 ;
142: }
143:
144:
145: void setnoreturn ( const std :: string & funcname@var351 , bool noreturn@var352 ) {
146: mNoReturn@var602 [@expr1073744093 funcname@var351 ] =@expr1073744094 noreturn@var352 ?@expr1073744095 FalseTrueMaybe ::@expr1073744096 True :@expr1073744097 FalseTrueMaybe ::@expr1073744098 False ;
147: }
148:
149: static bool isCompliantValidationExpression ( const char * p@var353 ) ;
150:
151:
152: static bool ismemory ( const int id@var354 ) {
153: return (@expr2275 (@expr2275 id@var354 >@expr1073744101 0 ) &&@expr1073744102 (@expr2275 (@expr2275 id@var354 &@expr1073744105 1 ) ==@expr1073744106 0 ) ) ;
154: }
155: static bool ismemory ( const AllocFunc * const func@var355 ) {
156: return (@expr2283 (@expr2283 func@var355 .@expr2285 groupId@var356 >@expr1073744110 0 ) &&@expr1073744111 (@expr2283 (@expr2283 func@var355 .@expr2285 groupId@var356 &@expr1073744115 1 ) ==@expr1073744116 0 ) ) ;
157: }
158:
159:
160: static bool isresource ( const int id@var357 ) {
161: return (@expr2293 (@expr2293 id@var357 >@expr1073744119 0 ) &&@expr1073744120 (@expr2293 (@expr2293 id@var357 &@expr1073744123 1 ) ==@expr1073744124 1 ) ) ;
162: }
163: static bool isresource ( const AllocFunc * const func@var358 ) {
164: return (@expr2301 (@expr2301 func@var358 .@expr2303 groupId@var359 >@expr1073744128 0 ) &&@expr1073744129 (@expr2301 (@expr2301 func@var358 .@expr2303 groupId@var359 &@expr1073744133 1 ) ==@expr1073744134 1 ) ) ;
165: }
166:
167: bool formatstr_function ( const Token * ftok@var360 ) const ;
168: int formatstr_argno ( const Token * ftok@var361 ) const ;
169: bool formatstr_scan ( const Token * ftok@var362 ) const ;
170: bool formatstr_secure ( const Token * ftok@var363 ) const ;
171:
172: struct NonOverlappingData {
173: int ptr1Arg@var364 ;
174: int ptr2Arg@var365 ;
175: int sizeArg@var366 ;
176: int strlenArg@var367 ;
177: } ;
178: const NonOverlappingData * getNonOverlappingData ( const Token * ftok@var368 ) const ;
179:
180: struct WarnInfo {
181: std :: string message@var369 ;
182: Standards standards@var370 ;
183: Severity :: SeverityType severity@var371 ;
184: } ;
185: std :: map < std :: string , WarnInfo > functionwarn@var372 ;
186:
187: const WarnInfo * getWarnInfo ( const Token * ftok@var373 ) const ;
188:
189:
190: bool isNotLibraryFunction ( const Token * ftok@var374 ) const ;
191: bool matchArguments ( const Token * ftok@var375 , const std :: string & functionName@var376 ) const ;
192:
193: enum class UseRetValType { NONE , DEFAULT , ERROR_CODE } ;
194: UseRetValType getUseRetValType ( const Token * ftok@var377 ) const ;
195:
196: const std :: string & returnValue ( const Token * ftok@var378 ) const ;
197: const std :: string & returnValueType ( const Token * ftok@var379 ) const ;
198: int returnValueContainer ( const Token * ftok@var380 ) const ;
199: std :: vector < long long > unknownReturnValues ( const Token * ftok@var381 ) const ;
200:
201: bool isnoreturn ( const Token * ftok@var382 ) const ;
202: bool isnotnoreturn ( const Token * ftok@var383 ) const ;
203:
204: bool isScopeNoReturn ( const Token * end@var384 , std :: string * unknownFunc@var385 ) const ;
205:
206: class Container {
207: public:
208: Container ( )
209: : type_templateArgNo@var395 ( -1 ) ,
210: size_templateArgNo@var397 ( -1 ) ,
211: arrayLike_indexOp@var398 ( false ) ,
212: stdStringLike@var399 ( false ) ,
213: stdAssociativeLike@var400 ( false ) ,
214: opLessAllowed@var401 ( true ) ,
215: hasInitializerListConstructor@var402 ( false ) ,
216: unstableErase@var403 ( false ) ,
217: unstableInsert@var404 ( false ) ,
218: view@var405 ( false )
219: { }
220:
221: enum class Action {
222: RESIZE ,
223: CLEAR ,
224: PUSH ,
225: POP ,
226: FIND ,
227: INSERT ,
228: ERASE ,
229: CHANGE_CONTENT ,
230: CHANGE ,
231: CHANGE_INTERNAL ,
232: NO_ACTION
233: } ;
234: enum class Yield {
235: AT_INDEX ,
236: ITEM ,
237: BUFFER ,
238: BUFFER_NT ,
239: START_ITERATOR ,
240: END_ITERATOR ,
241: ITERATOR ,
242: SIZE ,
243: EMPTY ,
244: NO_YIELD
245: } ;
246: struct Function {
247: Action action@var386 ;
248: Yield yield@var387 ;
249: } ;
250: struct RangeItemRecordTypeItem {
251: std :: string name@var388 ;
252: int templateParameter@var389 ;
253: } ;
254: std :: string startPattern@var390 ; std :: string startPattern2@var391 ; std :: string endPattern@var392 ; std :: string itEndPattern@var393 ;
255: std :: map < std :: string , Function > functions@var394 ;
256: int type_templateArgNo@var395 ;
257: std :: vector < RangeItemRecordTypeItem > rangeItemRecordType@var396 ;
258: int size_templateArgNo@var397 ;
259: bool arrayLike_indexOp@var398 ;
260: bool stdStringLike@var399 ;
261: bool stdAssociativeLike@var400 ;
262: bool opLessAllowed@var401 ;
263: bool hasInitializerListConstructor@var402 ;
264: bool unstableErase@var403 ;
265: bool unstableInsert@var404 ;
266: bool view@var405 ;
267:
268: Action getAction ( const std :: string & function@var406 ) const {
269: const std ::@expr1073744135 map < std ::@expr1073744136 string , Function > ::@expr1073744137 const_iterator i@var407 =@expr1073744138 functions@var394 .@expr1073744139 find (@expr1073744140 function@var406 ) ;
270: if (@expr1073744141 i@var407 !=@expr1073744142 functions@var394 .@expr1073744143 end (@expr1073744144 ) ) {
271: return i@var407 .@expr1073744145 second@var408 .@expr1073744146 action@var409 ; }
272: return Action ::@expr1073744147 NO_ACTION ;
273: }
274:
275: Yield getYield ( const std :: string & function@var410 ) const {
276: const std ::@expr1073744148 map < std ::@expr1073744149 string , Function > ::@expr1073744150 const_iterator i@var411 =@expr1073744151 functions@var394 .@expr1073744152 find (@expr1073744153 function@var410 ) ;
277: if (@expr1073744154 i@var411 !=@expr1073744155 functions@var394 .@expr1073744156 end (@expr1073744157 ) ) {
278: return i@var411 .@expr1073744158 second@var412 .@expr1073744159 yield@var413 ; }
279: return Yield ::@expr1073744160 NO_YIELD ;
280: }
281:
282: static Yield yieldFrom ( const std :: string & yieldName@var414 ) ;
283: static Action actionFrom ( const std :: string & actionName@var415 ) ;
284: } ;
285: std :: map < std :: string , Container > containers@var416 ;
286: const Container * detectContainer ( const Token * typeStart@var417 , bool iterator@var418 = false ) const ;
287: const Container * detectContainerOrIterator ( const Token * typeStart@var419 , bool * isIterator@var420 = nullptr ) const ;
288:
289: class ArgumentChecks {
290: public:
291: ArgumentChecks ( ) :
292: notbool@var421 ( false ) ,
293: notnull@var422 ( false ) ,
294: notuninit@var423 ( -1 ) ,
295: formatstr@var424 ( false ) ,
296: strz@var425 ( false ) ,
297: optional@var426 ( false ) ,
298: variadic@var427 ( false ) ,
299: iteratorInfo@var433 ( ) ,
300: direction@var441 ( Direction :: DIR_UNKNOWN ) { }
301:
302: bool notbool@var421 ;
303: bool notnull@var422 ;
304: int notuninit@var423 ;
305: bool formatstr@var424 ;
306: bool strz@var425 ;
307: bool optional@var426 ;
308: bool variadic@var427 ;
309: std :: string valid@var428 ;
310:
311: class IteratorInfo {
312: public:
313: IteratorInfo ( ) : container@var429 ( 0 ) , it@var430 ( false ) , first@var431 ( false ) , last@var432 ( false ) { }
314:
315: int container@var429 ;
316: bool it@var430 ;
317: bool first@var431 ;
318: bool last@var432 ;
319: } ;
320: IteratorInfo iteratorInfo@var433 ;
321:
322: class MinSize {
323: public:
324: enum class Type { NONE , STRLEN , ARGVALUE , SIZEOF , MUL , VALUE } ;
325: MinSize ( Type t@var434 , int a@var435 ) : type@var436 ( t@var434 ) , arg@var437 ( a@var435 ) , arg2@var438 ( 0 ) , value@var439 ( 0 ) { }
326: Type type@var436 ;
327: int arg@var437 ;
328: int arg2@var438 ;
329: long long value@var439 ;
330: } ;
331: std :: vector < MinSize > minsizes@var440 ;
332:
333: enum class Direction {
334: DIR_IN ,
335: DIR_OUT ,
336: DIR_INOUT ,
337: DIR_UNKNOWN
338: } ;
339: Direction direction@var441 ;
340: } ;
341:
342: struct Function {
343: std :: map < int , ArgumentChecks > argumentChecks@var442 ;
344: bool use@var443 ;
345: bool leakignore@var444 ;
346: bool isconst@var445 ;
347: bool ispure@var446 ;
348: UseRetValType useretval@var447 ;
349: bool ignore@var448 ;
350: bool formatstr@var449 ;
351: bool formatstr_scan@var450 ;
352: bool formatstr_secure@var451 ;
353: Container :: Action containerAction@var452 ;
354: Container :: Yield containerYield@var453 ;
355: Function ( )
356: : use@var443 ( false ) ,
357: leakignore@var444 ( false ) ,
358: isconst@var445 ( false ) ,
359: ispure@var446 ( false ) ,
360: useretval@var447 ( UseRetValType :: NONE ) ,
361: ignore@var448 ( false ) ,
362: formatstr@var449 ( false ) ,
363: formatstr_scan@var450 ( false ) ,
364: formatstr_secure@var451 ( false ) ,
365: containerAction@var452 ( Container :: Action :: NO_ACTION ) ,
366: containerYield@var453 ( Container :: Yield :: NO_YIELD )
367: { }
368: } ;
369:
370: const Function * getFunction ( const Token * ftok@var454 ) const ;
371: std :: unordered_map < std :: string , Function > functions@var455 ;
372: bool isUse ( const std :: string & functionName@var456 ) const ;
373: bool isLeakIgnore ( const std :: string & functionName@var457 ) const ;
374: bool isFunctionConst ( const std :: string & functionName@var458 , bool pure@var459 ) const ;
375: bool isFunctionConst ( const Token * ftok@var460 ) const ;
376:
377: bool isboolargbad ( const Token * ftok@var461 , int argnr@var462 ) const {
378: const ArgumentChecks * arg@var463 ; arg@var463 =@expr1073744161 getarg (@expr1073744162 ftok@var461 , argnr@var462 ) ;
379: return arg@var463 &&@expr1073744163 arg@var463 .@expr1073744164 notbool@var464 ;
380: }
381:
382: bool isnullargbad ( const Token * ftok@var465 , int argnr@var466 ) const ;
383: bool isuninitargbad ( const Token * ftok@var467 , int argnr@var468 , int indirect@var469 = 0 , bool * hasIndirect@var470 = nullptr ) const ;
384:
385: bool isargformatstr ( const Token * ftok@var471 , int argnr@var472 ) const {
386: const ArgumentChecks * arg@var473 ; arg@var473 =@expr1073744165 getarg (@expr1073744166 ftok@var471 , argnr@var472 ) ;
387: return arg@var473 &&@expr1073744167 arg@var473 .@expr1073744168 formatstr@var474 ;
388: }
389:
390: bool isargstrz ( const Token * ftok@var475 , int argnr@var476 ) const {
391: const ArgumentChecks * arg@var477 ; arg@var477 =@expr1073744169 getarg (@expr1073744170 ftok@var475 , argnr@var476 ) ;
392: return arg@var477 &&@expr1073744171 arg@var477 .@expr1073744172 strz@var478 ;
393: }
394:
395: bool isIntArgValid ( const Token * ftok@var479 , int argnr@var480 , const long long argvalue@var481 ) const ;
396: bool isFloatArgValid ( const Token * ftok@var482 , int argnr@var483 , double argvalue@var484 ) const ;
397:
398: const std :: string & validarg ( const Token * ftok@var485 , int argnr@var486 ) const {
399: const ArgumentChecks * arg@var487 ; arg@var487 =@expr1073744173 getarg (@expr1073744174 ftok@var485 , argnr@var486 ) ;
400: return arg@var487 ?@expr1073744175 arg@var487 .@expr1073744176 valid@var488 :@expr1073744177 emptyString@var1 ;
401: }
402:
403: struct InvalidArgValue {
404: enum class Type { le , lt , eq , ge , gt , range } ; enum Type type@var489 ;
405: std :: string op1@var490 ;
406: std :: string op2@var491 ;
407: bool isInt ( ) const {
408: return MathLib ::@expr1073744178 isInt (@expr1073744179 op1@var490 ) ;
409: }
410: } ;
411:
412: const ArgumentChecks :: IteratorInfo * getArgIteratorInfo ( const Token * ftok@var492 , int argnr@var493 ) const {
413: const ArgumentChecks * arg@var494 ; arg@var494 =@expr1073744180 getarg (@expr1073744181 ftok@var492 , argnr@var493 ) ;
414: return arg@var494 &&@expr1073744182 arg@var494 .@expr2359 iteratorInfo@var495 .@expr1073744184 it@var496 ?@expr1073744185 &@expr1073744186 arg@var494 .@expr2359 iteratorInfo@var495 :@expr1073744188 nullptr ;
415: }
416:
417: bool hasminsize ( const Token * ftok@var497 ) const ;
418:
419: const std :: vector < ArgumentChecks :: MinSize > * argminsizes ( const Token * ftok@var498 , int argnr@var499 ) const {
420: const ArgumentChecks * arg@var500 ; arg@var500 =@expr1073744189 getarg (@expr1073744190 ftok@var498 , argnr@var499 ) ;
421: return arg@var500 ?@expr1073744191 &@expr1073744192 arg@var500 .@expr1073744193 minsizes@var501 :@expr1073744194 nullptr ;
422: }
423:
424: ArgumentChecks :: Direction getArgDirection ( const Token * ftok@var502 , int argnr@var503 ) const ;
425:
426: bool markupFile ( const std :: string & path@var504 ) const ;
427:
428: bool processMarkupAfterCode ( const std :: string & path@var505 ) const ;
429:
430: const std :: set < std :: string > & markupExtensions ( ) const {
431: return mMarkupExtensions@var609 ;
432: }
433:
434: bool reportErrors ( const std :: string & path@var506 ) const ;
435:
436: bool ignorefunction ( const std :: string & functionName@var507 ) const ;
437:
438: bool isexecutableblock ( const std :: string & file@var508 , const std :: string & token@var509 ) const ;
439:
440: int blockstartoffset ( const std :: string & file@var510 ) const ;
441:
442: const std :: string & blockstart ( const std :: string & file@var511 ) const ;
443: const std :: string & blockend ( const std :: string & file@var512 ) const ;
444:
445: bool iskeyword ( const std :: string & file@var513 , const std :: string & keyword@var514 ) const ;
446:
447: bool isexporter ( const std :: string & prefix@var515 ) const {
448: return mExporters@var612 .@expr1073744195 find (@expr1073744196 prefix@var515 ) !=@expr1073744197 mExporters@var612 .@expr1073744198 end (@expr1073744199 ) ;
449: }
450:
451: bool isexportedprefix ( const std :: string & prefix@var516 , const std :: string & token@var517 ) const {
452: const std ::@expr1073744200 map < std ::@expr1073744201 string , ExportedFunctions > ::@expr1073744202 const_iterator it@var518 =@expr1073744203 mExporters@var612 .@expr1073744204 find (@expr1073744205 prefix@var516 ) ;
453: return (@expr1073744206 it@var518 !=@expr1073744207 mExporters@var612 .@expr1073744208 end (@expr1073744209 ) &&@expr1073744210 it@var518 .@expr1073744211 second@var519 .@expr1073744212 isPrefix (@expr1073744213 token@var517 ) ) ;
454: }
455:
456: bool isexportedsuffix ( const std :: string & prefix@var520 , const std :: string & token@var521 ) const {
457: const std ::@expr1073744214 map < std ::@expr1073744215 string , ExportedFunctions > ::@expr1073744216 const_iterator it@var522 =@expr1073744217 mExporters@var612 .@expr1073744218 find (@expr1073744219 prefix@var520 ) ;
458: return (@expr1073744220 it@var522 !=@expr1073744221 mExporters@var612 .@expr1073744222 end (@expr1073744223 ) &&@expr1073744224 it@var522 .@expr1073744225 second@var523 .@expr1073744226 isSuffix (@expr1073744227 token@var521 ) ) ;
459: }
460:
461: bool isimporter ( const std :: string & file@var524 , const std :: string & importer@var525 ) const ;
462:
463: const Token * getContainerFromYield ( const Token * tok@var526 , Container :: Yield yield@var527 ) const ;
464: const Token * getContainerFromAction ( const Token * tok@var528 , Container :: Action action@var529 ) const ;
465:
466: bool isreflection ( const std :: string & token@var530 ) const {
467: return mReflection@var614 .@expr1073744228 find (@expr1073744229 token@var530 ) !=@expr1073744230 mReflection@var614 .@expr1073744231 end (@expr1073744232 ) ;
468: }
469:
470: int reflectionArgument ( const std :: string & token@var531 ) const {
471: const std ::@expr1073744233 map < std ::@expr1073744234 string , int > ::@expr1073744235 const_iterator it@var532 =@expr1073744236 mReflection@var614 .@expr1073744237 find (@expr1073744238 token@var531 ) ;
472: if (@expr1073744239 it@var532 !=@expr1073744240 mReflection@var614 .@expr1073744241 end (@expr1073744242 ) ) {
473: return it@var532 .@expr1073744243 second@var533 ; }
474: return -1 ;
475: }
476:
477: std :: vector < std :: string > defines@var534 ;
478:
479: struct SmartPointer {
480: std :: string name@var535 ; name@var535 = "" ;
481: bool unique@var536 ; unique@var536 = false ;
482: } ;
483:
484: std :: map < std :: string , SmartPointer > smartPointers@var537 ;
485: bool isSmartPointer ( const Token * tok@var538 ) const ;
486: const SmartPointer * detectSmartPointer ( const Token * tok@var539 ) const ;
487:
488: struct PodType {
489: unsigned int size@var540 ;
490: char sign@var541 ;
491: enum class Type { NO , BOOL , CHAR , SHORT , INT , LONG , LONGLONG } ; enum Type stdtype@var542 ;
492: } ;
493: const struct PodType * podtype ( const std :: string & name@var543 ) const {
494: const std ::@expr1073744244 unordered_map < std ::@expr1073744245 string , PodType > ::@expr1073744246 const_iterator it@var544 =@expr1073744247 mPodTypes@var615 .@expr1073744248 find (@expr1073744249 name@var543 ) ;
495: return (@expr2426 it@var544 !=@expr1073744251 mPodTypes@var615 .@expr1073744252 end (@expr1073744253 ) ) ?@expr1073744254 &@expr1073744255 (@expr2426 it@var544 .@expr1073744257 second@var545 ) :@expr1073744258 nullptr ;
496: }
497:
498: struct PlatformType {
499: PlatformType ( )
500: : mSigned@var556 ( false )
501: , mUnsigned@var557 ( false )
502: , mLong@var558 ( false )
503: , mPointer@var559 ( false )
504: , mPtrPtr@var560 ( false )
505: , mConstPtr@var561 ( false ) { }
506: bool operator== ( const PlatformType & type@var546 ) const {
507: return (@expr1073744259 mSigned@var556 ==@expr1073744260 type@var546 .@expr1073744261 mSigned@var547 &&@expr1073744262
508: mUnsigned@var557 ==@expr1073744263 type@var546 .@expr1073744264 mUnsigned@var548 &&@expr1073744265
509: mLong@var558 ==@expr1073744266 type@var546 .@expr1073744267 mLong@var549 &&@expr1073744268
510: mPointer@var559 ==@expr1073744269 type@var546 .@expr1073744270 mPointer@var550 &&@expr1073744271
511: mPtrPtr@var560 ==@expr1073744272 type@var546 .@expr1073744273 mPtrPtr@var551 &&@expr1073744274
512: mConstPtr@var561 ==@expr1073744275 type@var546 .@expr1073744276 mConstPtr@var552 &&@expr1073744277
513: mType@var555 ==@expr1073744278 type@var546 .@expr1073744279 mType@var553 ) ;
514: }
515: bool operator!= ( const PlatformType & type@var554 ) const {
516: return !@expr1073744280 (@expr1073744281 *@expr1073744282 this@expr1073744283 ==@expr1073744284 type@var554 ) ;
517: }
518: std :: string mType@var555 ;
519: bool mSigned@var556 ;
520: bool mUnsigned@var557 ;
521: bool mLong@var558 ;
522: bool mPointer@var559 ;
523: bool mPtrPtr@var560 ;
524: bool mConstPtr@var561 ;
525: } ;
526:
527: struct Platform {
528: const PlatformType * platform_type ( const std :: string & name@var562 ) const {
529: const std ::@expr1073744285 map < std ::@expr1073744286 string , PlatformType > ::@expr1073744287 const_iterator it@var563 =@expr1073744288 mPlatformTypes@var565 .@expr1073744289 find (@expr1073744290 name@var562 ) ;
530: return (@expr2467 it@var563 !=@expr1073744292 mPlatformTypes@var565 .@expr1073744293 end (@expr1073744294 ) ) ?@expr1073744295 &@expr1073744296 (@expr2467 it@var563 .@expr1073744298 second@var564 ) :@expr1073744299 nullptr ;
531: }
532: std :: map < std :: string , PlatformType > mPlatformTypes@var565 ;
533: } ;
534:
535: const PlatformType * platform_type ( const std :: string & name@var566 , const std :: string & platform@var567 ) const {
536: const std ::@expr1073744300 map < std ::@expr2477 string , Platform > ::@expr1073744302 const_iterator it@var568 =@expr1073744303 mPlatforms@var617 .@expr1073744304 find (@expr1073744305 platform@var567 ) ;
537: if (@expr1073744306 it@var568 !=@expr1073744307 mPlatforms@var617 .@expr1073744308 end (@expr1073744309 ) ) {
538: const PlatformType * const type@var569 ; type@var569 =@expr1073744310 it@var568 .@expr1073744311 second@var570 .@expr1073744312 platform_type (@expr1073744313 name@var566 ) ;
539: if (@expr1073744314 type@var569 ) {
540: return type@var569 ; }
541: }
542:
543: const std ::@expr1073744315 map < std ::@expr2477 string , PlatformType > ::@expr1073744317 const_iterator it2@var571 =@expr1073744318 mPlatformTypes@var616 .@expr1073744319 find (@expr1073744320 name@var566 ) ;
544: return (@expr2497 it2@var571 !=@expr1073744322 mPlatformTypes@var616 .@expr1073744323 end (@expr1073744324 ) ) ?@expr1073744325 &@expr1073744326 (@expr2497 it2@var571 .@expr1073744328 second@var572 ) :@expr1073744329 nullptr ;
545: }
546:
|
549:
550: std :: string getFunctionName ( const Token * ftok@var573 ) const ;
551:
552: static bool isContainerYield ( const Token * const cond@var574 , Library :: Container :: Yield y@var575 , const std :: string & fallback@var576 = "" ) ;
553:
554:
555: enum class TypeCheck { def , check , suppress } ;
556: TypeCheck getTypeCheck ( const std :: string & check@var577 , const std :: string & typeName@var578 ) const ;
557:
558: private:
559:
560: Error loadFunction ( const tinyxml2 :: XMLElement * const node@var579 , const std :: string & name@var580 , std :: set < std :: string > & unknown_elements@var581 ) ;
561:
562: class ExportedFunctions {
563: public:
564: void addPrefix ( const std :: string & prefix@var582 ) {
565: mPrefixes@var586 .@expr1073744330 insert (@expr1073744331 prefix@var582 ) ;
566: }
567: void addSuffix ( const std :: string & suffix@var583 ) {
568: mSuffixes@var587 .@expr1073744332 insert (@expr1073744333 suffix@var583 ) ;
569: }
570: bool isPrefix ( const std :: string & prefix@var584 ) const {
571: return (@expr1073744334 mPrefixes@var586 .@expr1073744335 find (@expr1073744336 prefix@var584 ) !=@expr1073744337 mPrefixes@var586 .@expr1073744338 end (@expr1073744339 ) ) ;
572: }
573: bool isSuffix ( const std :: string & suffix@var585 ) const {
574: return (@expr1073744340 mSuffixes@var587 .@expr1073744341 find (@expr1073744342 suffix@var585 ) !=@expr1073744343 mSuffixes@var587 .@expr1073744344 end (@expr1073744345 ) ) ;
575: }
576:
577: private:
578: std :: set < std :: string > mPrefixes@var586 ;
579: std :: set < std :: string > mSuffixes@var587 ;
580: } ;
581: class CodeBlock {
582: public:
583: CodeBlock ( ) : mOffset@var595 ( 0 ) { }
584:
585: void setStart ( const char * s@var588 ) {
586: mStart@var593 =@expr1073744346 s@var588 ;
587: }
588: void setEnd ( const char * e@var589 ) {
589: mEnd@var594 =@expr1073744347 e@var589 ;
590: }
591: void setOffset ( const int o@var590 ) {
592: mOffset@var595 =@expr1073744348 o@var590 ;
593: }
594: void addBlock ( const char * blockName@var591 ) {
595: mBlocks@var596 .@expr1073744349 insert (@expr1073744350 blockName@var591 ) ;
596: }
597: const std :: string & start ( ) const {
598: return mStart@var593 ;
599: }
600: const std :: string & end ( ) const {
601: return mEnd@var594 ;
602: }
603: int offset ( ) const {
604: return mOffset@var595 ;
605: }
606: bool isBlock ( const std :: string & blockName@var592 ) const {
607: return mBlocks@var596 .@expr1073744351 find (@expr1073744352 blockName@var592 ) !=@expr1073744353 mBlocks@var596 .@expr1073744354 end (@expr1073744355 ) ;
608: }
609:
610: private:
611: std :: string mStart@var593 ;
612: std :: string mEnd@var594 ;
613: int mOffset@var595 ;
614: std :: set < std :: string > mBlocks@var596 ;
615: } ;
616: enum class FalseTrueMaybe { False , True , Maybe } ;
617: int mAllocId@var597 ;
618: std :: set < std :: string > mFiles@var598 ;
619: std :: map < std :: string , AllocFunc > mAlloc@var599 ;
620: std :: map < std :: string , AllocFunc > mDealloc@var600 ;
621: std :: map < std :: string , AllocFunc > mRealloc@var601 ;
622: std :: unordered_map < std :: string , FalseTrueMaybe > mNoReturn@var602 ;
623: std :: map < std :: string , std :: string > mReturnValue@var603 ;
624: std :: map < std :: string , std :: string > mReturnValueType@var604 ;
625: std :: map < std :: string , int > mReturnValueContainer@var605 ;
626: std :: map < std :: string , std :: vector < long long > > mUnknownReturnValues@var606 ;
627: std :: map < std :: string , bool > mReportErrors@var607 ;
628: std :: map < std :: string , bool > mProcessAfterCode@var608 ;
629: std :: set < std :: string > mMarkupExtensions@var609 ;
630: std :: map < std :: string , std :: set < std :: string > > mKeywords@var610 ;
631: std :: map < std :: string , CodeBlock > mExecutableBlocks@var611 ;
632: std :: map < std :: string , ExportedFunctions > mExporters@var612 ;
633: std :: map < std :: string , std :: set < std :: string > > mImporters@var613 ;
634: std :: map < std :: string , int > mReflection@var614 ;
635: std :: unordered_map < std :: string , PodType > mPodTypes@var615 ;
636: std :: map < std :: string , PlatformType > mPlatformTypes@var616 ;
637: std :: map < std :: string , Platform > mPlatforms@var617 ;
638: std :: map < std :: pair < std :: string , std :: string > , TypeCheck > mTypeChecks@var618 ;
639: std :: unordered_map < std :: string , NonOverlappingData > mNonOverlappingData@var619 ;
640:
641: const ArgumentChecks * getarg ( const Token * ftok@var620 , int argnr@var621 ) const ;
642:
643: std :: string getFunctionName ( const Token * ftok@var622 , bool * error@var623 ) const ;
644:
645: static const AllocFunc * getAllocDealloc ( const std :: map < std :: string , AllocFunc > & data@var624 , const std :: string & name@var625 ) {
646: const std ::@expr1073744356 map < std ::@expr1073744357 string , AllocFunc > ::@expr1073744358 const_iterator it@var626 =@expr1073744359 data@var624 .@expr1073744360 find (@expr1073744361 name@var625 ) ;
647: return (@expr1073744362 it@var626 ==@expr1073744363 data@var624 .@expr1073744364 end (@expr1073744365 ) ) ?@expr1073744366 nullptr :@expr1073744367 &@expr1073744368 it@var626 .@expr1073744369 second@var627 ;
648: }
649: } ;
650:
651: const Library :: Container * getLibraryContainer ( const Token * tok@var628 ) ;
652:
653: std :: shared_ptr < Token > createTokenFromExpression ( const std :: string & returnValue@var629 ,
654: const Settings * settings@var630 ,
655: std :: unordered_map < int , const Token * > * lookupVarId@var631 = nullptr ) ;

##file cppcheck-2.8/lib/suppressions.h

1:
|
34:
35: class Tokenizer ;
36:
37:
38: class Suppressions {
39: public:
40:
41: struct ErrorMessage {
42: unsigned long hash@var632 ;
43: std :: string errorId@var633 ;
44: void setFileName ( const std :: string & s@var634 ) ;
45: const std :: string & getFileName ( ) const {
46: return mFileName@var638 ;
47: }
48: int lineNumber@var635 ;
49: Certainty :: CertaintyLevel certainty@var636 ;
50: std :: string symbolNames@var637 ;
51: private:
52: std :: string mFileName@var638 ;
53: } ;
54:
55: struct Suppression {
56: Suppression ( ) : lineNumber@var672 ( NO_LINE ) , hash@var674 ( 0 ) , thisAndNextLine@var675 ( false ) , matched@var676 ( false ) , checked@var677 ( false ) { }
57: Suppression ( const Suppression & other@var639 ) {
58: *@expr1073744370 this@expr1073744371 =@expr1073744372 other@var639 ;
59: }
60: Suppression ( const std :: string & id@var640 , const std :: string & file@var641 , int line@var642 = NO_LINE ) : errorId@var670 ( id@var640 ) , fileName@var671 ( file@var641 ) , lineNumber@var672 ( line@var642 ) , hash@var674 ( 0 ) , thisAndNextLine@var675 ( false ) , matched@var676 ( false ) , checked@var677 ( false ) { }
61:
62: Suppression & operator= ( const Suppression & other@var643 ) {
63: errorId@var670 =@expr1073744373 other@var643 .@expr1073744374 errorId@var644 ;
64: fileName@var671 =@expr1073744375 other@var643 .@expr1073744376 fileName@var645 ;
65: lineNumber@var672 =@expr1073744377 other@var643 .@expr1073744378 lineNumber@var646 ;
66: symbolName@var673 =@expr1073744379 other@var643 .@expr1073744380 symbolName@var647 ;
67: hash@var674 =@expr1073744381 other@var643 .@expr1073744382 hash@var648 ;
68: thisAndNextLine@var675 =@expr1073744383 other@var643 .@expr1073744384 thisAndNextLine@var649 ;
69: matched@var676 =@expr1073744385 other@var643 .@expr1073744386 matched@var650 ;
70: checked@var677 =@expr1073744387 other@var643 .@expr1073744388 checked@var651 ;
71: return *@expr1073744389 this@expr1073744390 ;
72: }
73:
74: bool operator< ( const Suppression & other@var652 ) const {
75: if (@expr1073744391 errorId@var670 !=@expr1073744392 other@var652 .@expr2569 errorId@var653 ) {
76: return errorId@var670 <@expr1073744394 other@var652 .@expr2569 errorId@var653 ; }
77: if (@expr1073744396 lineNumber@var672 <@expr1073744397 other@var652 .@expr1073744398 lineNumber@var654 ) {
78: return true ; }
79: if (@expr1073744399 fileName@var671 !=@expr1073744400 other@var652 .@expr2577 fileName@var655 ) {
80: return fileName@var671 <@expr1073744402 other@var652 .@expr2577 fileName@var655 ; }
81: if (@expr1073744404 symbolName@var673 !=@expr1073744405 other@var652 .@expr2582 symbolName@var656 ) {
82: return symbolName@var673 <@expr1073744407 other@var652 .@expr2582 symbolName@var656 ; }
83: if (@expr1073744409 hash@var674 !=@expr1073744410 other@var652 .@expr2587 hash@var657 ) {
84: return hash@var674 <@expr1073744412 other@var652 .@expr2587 hash@var657 ; }
85: if (@expr1073744414 thisAndNextLine@var675 !=@expr1073744415 other@var652 .@expr1073744416 thisAndNextLine@var658 ) {
86: return thisAndNextLine@var675 ; }
87: return false ;
88: }
89:
|
95:
96: bool parseComment ( std :: string comment@var659 , std :: string * errorMessage@var660 ) ;
97:
98: bool isSuppressed ( const ErrorMessage & errmsg@var661 ) const ;
99:
100: bool isMatch ( const ErrorMessage & errmsg@var662 ) ;
101:
102: std :: string getText ( ) const ;
103:
104: bool isLocal ( ) const {
105: return !@expr1073744418 fileName@var671 .@expr1073744419 empty (@expr1073744420 ) &&@expr1073744421 fileName@var671 .@expr1073744422 find_first_of (@expr1073744423 "?*" ) ==@expr1073744424 std ::@expr1073744425 string ::@expr1073744426 npos@expr1073744417 ;
106: }
107:
108: bool isSameParameters ( const Suppression & other@var663 ) const {
109: return errorId@var670 ==@expr1073744427 other@var663 .@expr1073744428 errorId@var664 &&@expr1073744429
110: fileName@var671 ==@expr1073744430 other@var663 .@expr1073744431 fileName@var665 &&@expr1073744432
111: lineNumber@var672 ==@expr1073744433 other@var663 .@expr1073744434 lineNumber@var666 &&@expr1073744435
112: symbolName@var673 ==@expr1073744436 other@var663 .@expr1073744437 symbolName@var667 &&@expr1073744438
113: hash@var674 ==@expr1073744439 other@var663 .@expr1073744440 hash@var668 &&@expr1073744441
114: thisAndNextLine@var675 ==@expr1073744442 other@var663 .@expr1073744443 thisAndNextLine@var669 ;
115: }
116:
117: std :: string errorId@var670 ;
118: std :: string fileName@var671 ;
119: int lineNumber@var672 ;
120: std :: string symbolName@var673 ;
121: unsigned long hash@var674 ;
122: bool thisAndNextLine@var675 ;
123: bool matched@var676 ;
124: bool checked@var677 ;
125:
126: enum Anonymous1 { NO_LINE = -1 } ;
127: } ;
128:
|
133:
134: std :: string parseFile ( std :: istream & istr@var678 ) ;
135:
|
140:
141: std :: string parseXmlFile ( const char * filename@var679 ) ;
142:
|
148:
149: static std :: vector < Suppression > parseMultiSuppressComment ( const std :: string & comment@var680 , std :: string * errorMessage@var681 ) ;
150:
|
155:
156: std :: string addSuppressionLine ( const std :: string & line@var682 ) ;
157:
|
163:
164: std :: string addSuppression ( const Suppression & suppression@var683 ) ;
165:
|
170:
171: std :: string addSuppressions ( const std :: list < Suppression > & suppressions@var684 ) ;
172:
|
177:
178: bool isSuppressed ( const ErrorMessage & errmsg@var685 ) ;
179:
|
184:
185: bool isSuppressedLocal ( const ErrorMessage & errmsg@var686 ) ;
186:
|
190:
191: void dump ( std :: ostream & out@var687 ) const ;
192:
|
196:
197: std :: list < Suppression > getUnmatchedLocalSuppressions ( const std :: string & file@var688 , const bool unusedFunctionChecking@var689 ) const ;
198:
|
202:
203: std :: list < Suppression > getUnmatchedGlobalSuppressions ( const bool unusedFunctionChecking@var690 ) const ;
204:
|
208:
209: const std :: list < Suppression > & getSuppressions ( ) const ;
210:
|
213:
214: void markUnmatchedInlineSuppressionsAsChecked ( const Tokenizer & tokenizer@var691 ) ;
215:
216: private:
217:
218: std :: list < Suppression > mSuppressions@var692 ;
219: } ;

##file cppcheck-2.8/lib/timer.h

1:
|
28:
29: enum class SHOWTIME_MODES {
30: SHOWTIME_NONE = 0 ,
31: SHOWTIME_FILE ,
32: SHOWTIME_SUMMARY ,
33: SHOWTIME_TOP5
34: } ;
35:
36: class TimerResultsIntf {
37: public:
38: virtual ~ TimerResultsIntf ( ) { }
39:
40: virtual void addResults ( const std :: string & str@var693 , std :: clock_t clocks@var694 ) = 0 ;
41: } ;
42:
43: struct TimerResultsData {
44: std :: clock_t mClocks@var695 ;
45: long mNumberOfResults@var696 ;
46:
47: TimerResultsData ( )
48: : mClocks@var695 ( 0 )
49: , mNumberOfResults@var696 ( 0 ) { }
50:
51: double seconds ( ) const {
52: const double ret@var697 =@expr1073744445 (@expr1073744446 double ) (@expr1073744447 (@expr1073744448 unsigned long ) mClocks@var695 ) /@expr1073744449 (@expr1073744450 double ) CLOCKS_PER_SEC@expr1073744444 ;
53: return ret@var697 ;
54: }
55: } ;
56:
57: class TimerResults : public TimerResultsIntf {
58: public:
59: TimerResults ( ) { }
60:
61: void showResults ( SHOWTIME_MODES mode@var698 ) const ;
62: void addResults ( const std :: string & str@var699 , std :: clock_t clocks@var700 ) override ;
63:
64: private:
65: std :: map < std :: string , TimerResultsData > mResults@var701 ;
66: } ;
67:
68: class Timer {
69: public:
70: Timer ( const std :: string & str@var702 , SHOWTIME_MODES showtimeMode@var703 , TimerResultsIntf * timerResults@var704 = nullptr ) ;
71: ~ Timer ( ) ;
72: void stop ( ) ;
73:
74: private:
75: Timer ( const Timer & other@var705 ) ;
76: Timer & operator= ( const Timer & ) ;
77:
78: const std :: string mStr@var706 ;
79: TimerResultsIntf * mTimerResults@var707 ;
80: std :: clock_t mStart@var708 ;
81: const SHOWTIME_MODES mShowTimeMode@var709 ;
82: bool mStopped@var710 ;
83: } ;

##file cppcheck-2.8/lib/settings.h

1:
|
40:
41: namespace ValueFlow {
42: class Value ;
43: }
44:
|
47:
48: class SimpleEnableGroup<Severity::SeverityType> ; class SimpleEnableGroup<Certainty::CertaintyLevel> ; class SimpleEnableGroup<Checks::CheckList> ;
49:
|
89:
90: class Settings : public cppcheck :: Platform {
91: private:
92:
93:
94: static std :: atomic < bool > mTerminated@var711 ;
95:
96: public:
97: Settings ( ) ;
98:
99: void loadCppcheckCfg ( ) ;
100:
101:
102: std :: list < std :: string > addons@var712 ;
103:
104:
105: std :: string addonPython@var713 ;
106:
107:
108: std :: vector < std :: string > basePaths@var714 ;
109:
110:
111: std :: string buildDir@var715 ;
112:
113:
114: bool checkAllConfigurations@var716 ;
115:
116:
117: bool checkConfiguration@var717 ;
118:
|
121:
122: bool checkHeaders@var718 ;
123:
124:
125: bool checkLibrary@var719 ;
126:
127:
128: std :: set < std :: string > checkUnknownFunctionReturn@var720 ;
129:
130:
131: bool checkUnusedTemplates@var721 ;
132:
133:
134: bool clang@var722 ;
135:
136:
137: std :: string clangExecutable@var723 ;
138:
139:
140: bool clangTidy@var724 ;
141:
142:
143: std :: set < std :: string > configExcludePaths@var725 ;
144:
145:
146: std :: string cppcheckCfgProductName@var726 ;
147:
148:
149: std :: string cppcheckCfgAbout@var727 ;
150:
151:
152: bool daca@var728 ;
153:
154:
155: bool debugnormal@var729 ;
156:
157:
158: bool debugSimplified@var730 ;
159:
160:
161: bool debugtemplate@var731 ;
162:
163:
164: bool debugwarnings@var732 ;
165:
166:
167: bool dump@var733 ;
168: std :: string dumpFile@var734 ;
169:
170: enum Language {
171: None , C , CPP
172: } ;
173:
174:
175: Language enforcedLang@var735 ;
176:
177:
178: bool exceptionHandling@var736 ;
179:
180:
181: std :: string exename@var737 ;
182:
183:
184:
185: int exitCode@var738 ;
186:
187:
188: std :: vector < std :: string > fileFilters@var739 ;
189:
190:
191: bool force@var740 ;
192:
193:
194:
195: std :: list < std :: string > includePaths@var741 ;
196:
197:
198: bool inlineSuppressions@var742 ;
199:
200:
201:
202: unsigned int jobs@var743 ;
203:
|
206:
207: bool jointSuppressionReport@var744 ;
208:
209:
210: std :: list < std :: string > libraries@var745 ;
211:
212:
213: Library library@var746 ;
214:
215:
216:
217: int loadAverage@var747 ;
218:
|
221:
222: int maxConfigs@var748 ;
223:
224:
225: int maxCtuDepth@var749 ;
226:
227:
228: int maxTemplateRecursion@var750 ;
229:
230:
231: Suppressions nofail@var751 ;
232:
233:
234: Suppressions nomsg@var752 ;
235:
236:
237: std :: string outputFile@var753 ;
238:
239:
240: std :: string plistOutput@var754 ;
241:
242:
243: bool preprocessOnly@var755 ;
244:
245: ImportProject project@var756 ;
246:
247:
248: bool quiet@var757 ;
249:
250:
251: bool relativePaths@var758 ;
252:
253:
254: bool reportProgress@var759 ;
255:
256:
257: class Rule {
258: public:
259: Rule ( )
260: : tokenlist@var760 ( "simple" )
261: , id@var762 ( "rule" )
262: , severity@var764 ( Severity :: style ) {
263: }
264:
265: std :: string tokenlist@var760 ;
266: std :: string pattern@var761 ;
267: std :: string id@var762 ;
268: std :: string summary@var763 ;
269: Severity :: SeverityType severity@var764 ;
270: } ;
271:
|
274:
275: std :: list < Rule > rules@var765 ;
276:
277:
278: class SafeChecks {
279: public:
280: SafeChecks ( ) : classes@var771 ( false ) , externalFunctions@var772 ( false ) , internalFunctions@var773 ( false ) , externalVariables@var774 ( false ) { }
281:
282: static const char XmlRootName@var766 [ ] ;
283: static const char XmlClasses@var767 [ ] ;
284: static const char XmlExternalFunctions@var768 [ ] ;
285: static const char XmlInternalFunctions@var769 [ ] ;
286: static const char XmlExternalVariables@var770 [ ] ;
287:
288: void clear ( ) {
289: classes@var771 =@expr1073744451 externalFunctions@var772 =@expr1073744452 internalFunctions@var773 =@expr1073744453 externalVariables@var774 =@expr1073744454 false ;
290: }
291:
|
297:
298: bool classes@var771 ;
299:
|
304:
305: bool externalFunctions@var772 ;
306:
|
310:
311: bool internalFunctions@var773 ;
312:
|
316:
317: bool externalVariables@var774 ;
318: } ;
319:
320: SafeChecks safeChecks@var775 ;
321:
322: SimpleEnableGroup<Severity::SeverityType> severity@var776 ;
323: SimpleEnableGroup<Certainty::CertaintyLevel> certainty@var777 ;
324: SimpleEnableGroup<Checks::CheckList> checks@var778 ;
325:
326:
327: SHOWTIME_MODES showtime@var779 ;
328:
329:
330: Standards standards@var780 ;
331:
332:
333:
334: std :: string templateFormat@var781 ;
335:
336:
337:
338: std :: string templateLocation@var782 ;
339:
340:
341: std :: string userDefines@var783 ;
342:
343:
344: std :: set < std :: string > userUndefs@var784 ;
345:
346:
347: std :: list < std :: string > userIncludes@var785 ;
348:
349:
350: bool verbose@var786 ;
351:
352:
353: bool xml@var787 ;
354:
355:
356: int xml_version@var788 ;
357:
|
361:
362: bool configurationExcluded ( const std :: string & file@var789 ) const {
363: for (@expr1073744455 const std ::@expr1073744456 string &@expr1073744457 configExcludePath@var790 :@expr1073744458 configExcludePaths@var725 ) {
364: if (@expr1073744459 file@var789 .@expr1073744460 length (@expr1073744461 ) >=@expr1073744462 configExcludePath@var790 .@expr2639 length (@expr2640 ) &&@expr1073744465 file@var789 .@expr1073744466 compare (@expr1073744467 0 , configExcludePath@var790 .@expr2639 length (@expr2640 ) , configExcludePath@var790 ) ==@expr1073744470 0 ) {
365: return true ;
366: }
367: }
368: return false ;
369: }
370:
|
376:
377: std :: string addEnabled ( const std :: string & str@var791 ) ;
378:
|
382:
383: bool isEnabled ( const ValueFlow :: Value * value@var792 , bool inconclusiveCheck@var793 = false ) const ;
384:
385:
386: bool posix ( ) const {
387: return std ::@expr1073744471 find (@expr1073744472 libraries@var745 .@expr1073744473 begin (@expr1073744474 ) , libraries@var745 .@expr2651 end (@expr2652 ) , "posix" ) !=@expr1073744477 libraries@var745 .@expr2651 end (@expr2652 ) ;
388: }
389:
390:
391: static void terminate ( bool t@var794 = true ) {
392: Settings ::@expr1073744480 mTerminated@var711 =@expr1073744481 t@var794 ;
393: }
394:
395:
396: static bool terminated ( ) {
397: return Settings ::@expr1073744482 mTerminated@var711 ;
398: }
399:
400: std :: set < std :: string > summaryReturn@var795 ;
401:
402: void loadSummaries ( ) ;
403: } ;

##file cppcheck-2.8/lib/valueflow.h

1:
|
36:
37: class ErrorLogger ;
38: struct InferModel ;
39: class Settings ;
40: class SymbolDatabase ;
41: class Token ;
42: class TokenList ;
43: class ValueType ;
44: class Variable ;
45: class Scope ;
46:
47: template < class T >
48: class ValuePtr ;
49:
50: namespace ValueFlow {
51: struct increment {
52: template < class T >
53: void operator() ( T & x@var796 ) const {
54: x@var796 ++@expr1073744483 ;
55: }
56: } ;
57: struct decrement {
58: template < class T >
59: void operator() ( T & x@var797 ) const {
60: x@var797 --@expr1073744484 ;
61: }
62: } ;
63:
64: struct less {
65: template < class T , class U >
66: bool operator() ( const T & x@var798 , const U & y@var799 ) const {
67: return x@var798 <@expr1073744485 y@var799 ;
68: }
69: } ;
70:
71: struct adjacent {
72: template < class T , class U >
73: bool operator() ( const T & x@var800 , const U & y@var801 ) const {
74: return std ::@expr1073744486 abs (@expr1073744487 x@var800 -@expr1073744488 y@var801 ) ==@expr1073744489 1 ;
75: }
76: } ;
77:
78: struct equalVisitor {
79: template < class T , class U >
80: void operator() ( bool & result@var802 , T x@var803 , U y@var804 ) const {
81: result@var802 =@expr1073744490 !@expr1073744491 (@expr1073744492 x@var803 >@expr1073744493 y@var804 ||@expr1073744494 x@var803 <@expr1073744495 y@var804 ) ;
82: }
83: } ;
84: class Value {
85: public:
86:
87:
88: enum class Bound { Upper , Lower , Point } ;
89:
90: explicit Value ( long long val@var805 = 0 , Bound b@var806 = Bound :: Point )
91: : valueType@var846 ( ValueType :: INT ) ,
92: bound@var847 ( b@var806 ) ,
93: intvalue@var848 ( val@var805 ) ,
94: tokvalue@var849 ( nullptr ) ,
95: floatValue@var850 ( 0.0 ) ,
96: moveKind@var851 ( MoveKind :: NonMovedVariable ) ,
97: varvalue@var852 ( val@var805 ) ,
98: condition@var853 ( nullptr ) ,
99: varId@var855 ( 0U ) ,
100: safe@var856 ( false ) ,
101: conditional@var857 ( false ) ,
102: macro@var858 ( false ) ,
103: defaultArg@var859 ( false ) ,
104: indirect@var860 ( 0 ) ,
105: path@var861 ( 0 ) ,
106: wideintvalue@var862 ( val@var805 ) ,
107: subexpressions@var863 ( ) ,
108: capturetok@var864 ( nullptr ) ,
109: lifetimeKind@var865 ( LifetimeKind :: Object ) ,
110: lifetimeScope@var866 ( LifetimeScope :: Local ) ,
111: valueKind@var871 ( ValueKind :: Possible )
112: { }
113: Value ( const Token * c@var807 , long long val@var808 , Bound b@var809 = Bound :: Point ) ;
114:
115: static Value unknown ( ) ;
116:
117: bool equalValue ( const ValueFlow :: Value & rhs@var810 ) const {
118: if (@expr1073744496 valueType@var846 !=@expr1073744497 rhs@var810 .@expr1073744498 valueType@var811 ) {
119: return false ; }
120: switch (@expr1073744499 valueType@var846 ) {
121: case ValueType ::@expr1073744500 INT :@expr2677
122: case ValueType ::@expr1073744502 CONTAINER_SIZE :@expr2677
123: case ValueType ::@expr1073744504 BUFFER_SIZE :@expr2677
124: case ValueType ::@expr1073744506 ITERATOR_START :@expr2677
125: case ValueType ::@expr1073744508 ITERATOR_END :@expr2677 ;
126: if (@expr2686 intvalue@var848 !=@expr2687 rhs@var810 .@expr2688 intvalue@var812 ) {
127: return false ; }
128: break ;
129: case ValueType ::@expr1073744513 TOK :@expr2677 ;
130: if (@expr2691 tokvalue@var849 !=@expr2692 rhs@var810 .@expr2693 tokvalue@var813 ) {
131: return false ; }
132: break ;
133: case ValueType ::@expr1073744518 FLOAT :@expr2677 ;
134:
135: if (@expr1073744520 floatValue@var850 >@expr1073744521 rhs@var810 .@expr2698 floatValue@var814 ||@expr1073744523 floatValue@var850 <@expr1073744524 rhs@var810 .@expr2698 floatValue@var814 ) {
136: return false ; }
137: break ;
138: case ValueType ::@expr1073744526 MOVED :@expr2677 ;
139: if (@expr1073744528 moveKind@var851 !=@expr1073744529 rhs@var810 .@expr1073744530 moveKind@var815 ) {
140: return false ; }
141: break ;
142: case ValueType ::@expr1073744531 UNINIT :@expr2677 ;
143: break ;
144: case ValueType ::@expr1073744533 LIFETIME :@expr2677 ;
145: if (@expr2691 tokvalue@var849 !=@expr2692 rhs@var810 .@expr2693 tokvalue@var813 ) {
146: return false ; }
147: break ;
148: case ValueType ::@expr1073744538 SYMBOLIC :@expr2677 ;
149: if (@expr1073744540 !@expr1073744541 sameToken (@expr1073744542 tokvalue@var849 , rhs@var810 .@expr2693 tokvalue@var813 ) ) {
150: return false ; }
151: if (@expr2686 intvalue@var848 !=@expr2687 rhs@var810 .@expr2688 intvalue@var812 ) {
152: return false ; }
153: break ;
154: }
155: return true ;
156: }
157:
158: template < class T , class F >
159: static void visitValue ( T & self@var816 , F f@var817 ) {
160: switch (@expr1073744547 self@var816 .@expr1073744548 valueType@var818 ) {
161: case ValueType ::@expr1073744549 INT :@expr2726
162: case ValueType ::@expr1073744551 SYMBOLIC :@expr2726
163: case ValueType ::@expr1073744553 BUFFER_SIZE :@expr2726
164: case ValueType ::@expr1073744555 CONTAINER_SIZE :@expr2726
165: case ValueType ::@expr1073744557 ITERATOR_START :@expr2726
166: case ValueType ::@expr1073744559 ITERATOR_END :@expr2726 ; {
167: f@var817 (@expr1073744561 self@var816 .@expr1073744562 intvalue@var819 ) ;
168: break ;
169: }
170: case ValueType ::@expr1073744563 FLOAT :@expr2726 ; {
171: f@var817 (@expr1073744565 self@var816 .@expr1073744566 floatValue@var820 ) ;
172: break ;
173: }
174: case ValueType ::@expr1073744567 UNINIT :@expr2726
175: case ValueType ::@expr1073744569 TOK :@expr2726
176: case ValueType ::@expr1073744571 LIFETIME :@expr2726
177: case ValueType ::@expr1073744573 MOVED :@expr2726 ;
178: break ;
179: }
180: }
181:
182: struct compareVisitor {
183: struct innerVisitor {
184: template < class Compare , class T , class U >
185: void operator() ( bool & result@var821 , Compare compare@var822 , T x@var823 , U y@var824 ) const {
186: result@var821 =@expr1073744575 compare@var822 (@expr1073744576 x@var823 , y@var824 ) ;
187: }
188: } ;
189: template < class Compare , class T >
190: void operator() ( bool & result@var825 , const Value & rhs@var826 , Compare compare@var827 , T x@var828 ) const {
191: visitValue (@expr1073744578 rhs@var826 ,
192: std ::@expr1073744579 bind (@expr1073744580 innerVisitor {@expr1073744581 } , std ::@expr1073744582 ref (@expr1073744583 result@var825 ) , std ::@expr1073744584 move (@expr1073744585 compare@var827 ) , x@var828 , std ::@expr1073744586 placeholders ::@expr1073744587 _1@expr1073744577 ) ) ;
193: }
194: } ;
195:
196: template < class Compare >
197: bool compareValue ( const Value & rhs@var829 , Compare compare@var830 ) const {
198: assert (@expr1073744589 (@expr1073744590 !@expr1073744591 this@expr2768 .@expr1073744593 isSymbolicValue (@expr1073744594 ) &&@expr1073744595 !@expr1073744596 rhs@var829 .@expr1073744597 isSymbolicValue (@expr1073744598 ) ) ||@expr1073744599
199: (@expr1073744600 this@expr2768 .@expr1073744601 valueType@var846 ==@expr1073744602 rhs@var829 .@expr1073744603 valueType@var831 &&@expr1073744604 sameToken (@expr1073744605 this@expr2768 .@expr1073744606 tokvalue@var849 , rhs@var829 .@expr1073744607 tokvalue@var832 ) ) ) ;
200: bool result@var833 ; result@var833 =@expr1073744608 false ;
201: visitValue (@expr1073744609
202: *@expr1073744610 this@expr2768 ,
203: std ::@expr1073744611 bind (@expr1073744612 compareVisitor {@expr1073744613 } , std ::@expr2790 ref (@expr1073744615 result@var833 ) , std ::@expr2790 ref (@expr1073744617 rhs@var829 ) , std ::@expr1073744618 move (@expr1073744619 compare@var830 ) , std ::@expr1073744620 placeholders ::@expr1073744621 _1@expr1073744588 ) ) ;
204: return result@var833 ;
205: }
206:
207: bool operator== ( const Value & rhs@var834 ) const {
208: if (@expr1073744622 !@expr1073744623 equalValue (@expr1073744624 rhs@var834 ) ) {
209: return false ; }
210:
211: return varvalue@var852 ==@expr1073744625 rhs@var834 .@expr1073744626 varvalue@var835 &&@expr1073744627
212: condition@var853 ==@expr1073744628 rhs@var834 .@expr1073744629 condition@var836 &&@expr1073744630
213: varId@var855 ==@expr1073744631 rhs@var834 .@expr1073744632 varId@var837 &&@expr1073744633
214: conditional@var857 ==@expr1073744634 rhs@var834 .@expr1073744635 conditional@var838 &&@expr1073744636
215: defaultArg@var859 ==@expr1073744637 rhs@var834 .@expr1073744638 defaultArg@var839 &&@expr1073744639
216: indirect@var860 ==@expr1073744640 rhs@var834 .@expr1073744641 indirect@var840 &&@expr1073744642
217: valueKind@var871 ==@expr1073744643 rhs@var834 .@expr1073744644 valueKind@var841 ;
218: }
219:
220: bool operator!= ( const Value & rhs@var842 ) const {
221: return !@expr1073744645 (@expr1073744646 *@expr1073744647 this@expr1073744648 ==@expr1073744649 rhs@var842 ) ;
222: }
223:
224: template < class T , $class $= $typename $std $:: $enable_if $< std :: is_arithmetic < T > $:: $value $> $:: $type >
225: bool equalTo ( const T & x@var843 ) const {
226: bool result@var844 ; result@var844 =@expr1073744651 false ;
227: visitValue (@expr1073744652 *@expr1073744653 this@expr1073744654 , std ::@expr1073744655 bind (@expr1073744656 equalVisitor {@expr1073744657 } , std ::@expr1073744658 ref (@expr1073744659 result@var844 ) , x@var843 , std ::@expr1073744660 placeholders ::@expr1073744661 _1@expr1073744650 ) ) ;
228: return result@var844 ;
229: }
230:
231: void decreaseRange ( ) {
232: if (@expr1073744662 bound@var847 ==@expr1073744663 Bound ::@expr1073744664 Lower ) {
233: visitValue (@expr1073744665 *@expr2842 this@expr2843 , increment {@expr1073744668 } ) ; }
234: else { if (@expr1073744669 bound@var847 ==@expr1073744670 Bound ::@expr1073744671 Upper ) {
235: visitValue (@expr1073744672 *@expr2842 this@expr2843 , decrement {@expr1073744674 } ) ; } }
236: }
237:
238: void invertBound ( ) {
239: if (@expr1073744675 bound@var847 ==@expr1073744676 Bound ::@expr2853 Lower ) {
240: bound@var847 =@expr1073744678 Bound ::@expr2855 Upper ; }
241: else { if (@expr1073744680 bound@var847 ==@expr1073744681 Bound ::@expr2855 Upper ) {
242: bound@var847 =@expr1073744683 Bound ::@expr2853 Lower ; } }
243: }
244:
245: void invertRange ( ) {
246: invertBound (@expr1073744685 ) ;
247: decreaseRange (@expr1073744686 ) ;
248: }
249:
250: void assumeCondition ( const Token * tok@var845 ) ;
251:
252: std :: string infoString ( ) const ;
253:
254: enum class ValueType {
255: INT ,
256: TOK ,
257: FLOAT ,
258: MOVED ,
259: UNINIT ,
260: CONTAINER_SIZE ,
261: LIFETIME ,
262: BUFFER_SIZE ,
263: ITERATOR_START ,
264: ITERATOR_END ,
265: SYMBOLIC
266: } ; enum ValueType valueType@var846 ;
267: bool isIntValue ( ) const {
268: return valueType@var846 ==@expr1073744687 ValueType ::@expr1073744688 INT ;
269: }
270: bool isTokValue ( ) const {
271: return valueType@var846 ==@expr1073744689 ValueType ::@expr1073744690 TOK ;
272: }
273: bool isFloatValue ( ) const {
274: return valueType@var846 ==@expr1073744691 ValueType ::@expr1073744692 FLOAT ;
275: }
276: bool isMovedValue ( ) const {
277: return valueType@var846 ==@expr1073744693 ValueType ::@expr1073744694 MOVED ;
278: }
279: bool isUninitValue ( ) const {
280: return valueType@var846 ==@expr1073744695 ValueType ::@expr1073744696 UNINIT ;
281: }
282: bool isContainerSizeValue ( ) const {
283: return valueType@var846 ==@expr1073744697 ValueType ::@expr1073744698 CONTAINER_SIZE ;
284: }
285: bool isLifetimeValue ( ) const {
286: return valueType@var846 ==@expr1073744699 ValueType ::@expr1073744700 LIFETIME ;
287: }
288: bool isBufferSizeValue ( ) const {
289: return valueType@var846 ==@expr1073744701 ValueType ::@expr1073744702 BUFFER_SIZE ;
290: }
291: bool isIteratorValue ( ) const {
292: return valueType@var846 ==@expr1073744703 ValueType ::@expr1073744704 ITERATOR_START ||@expr1073744705 valueType@var846 ==@expr1073744706 ValueType ::@expr1073744707 ITERATOR_END ;
293: }
294: bool isIteratorStartValue ( ) const {
295: return valueType@var846 ==@expr1073744708 ValueType ::@expr1073744709 ITERATOR_START ;
296: }
297: bool isIteratorEndValue ( ) const {
298: return valueType@var846 ==@expr1073744710 ValueType ::@expr1073744711 ITERATOR_END ;
299: }
300: bool isSymbolicValue ( ) const {
301: return valueType@var846 ==@expr1073744712 ValueType ::@expr1073744713 SYMBOLIC ;
302: }
303:
304: bool isLocalLifetimeValue ( ) const {
305: return valueType@var846 ==@expr1073744715 ValueType ::@expr1073744716 LIFETIME &&@expr1073744717 lifetimeScope@var866 ==@expr1073744718 LifetimeScope ::@expr1073744719 Local@expr1073744714 ;
306: }
307:
308: bool isArgumentLifetimeValue ( ) const {
309: return valueType@var846 ==@expr1073744720 ValueType ::@expr1073744721 LIFETIME &&@expr1073744722 lifetimeScope@var866 ==@expr1073744723 LifetimeScope ::@expr1073744724 Argument ;
310: }
311:
312: bool isSubFunctionLifetimeValue ( ) const {
313: return valueType@var846 ==@expr1073744725 ValueType ::@expr1073744726 LIFETIME &&@expr1073744727 lifetimeScope@var866 ==@expr1073744728 LifetimeScope ::@expr1073744729 SubFunction ;
314: }
315:
316: bool isNonValue ( ) const {
317: return isMovedValue (@expr1073744730 ) ||@expr1073744731 isUninitValue (@expr1073744732 ) ||@expr1073744733 isLifetimeValue (@expr1073744734 ) ;
318: }
319:
320:
321: Bound bound@var847 ;
322:
323:
324: long long intvalue@var848 ;
325:
326:
327: const Token * tokvalue@var849 ;
328:
329:
330: double floatValue@var850 ;
331:
332:
333: enum class MoveKind { NonMovedVariable , MovedVariable , ForwardedVariable } ; enum MoveKind moveKind@var851 ;
334:
335:
336: long long varvalue@var852 ;
337:
338:
339: const Token * condition@var853 ;
340:
341: std :: list < std :: pair < const Token * , std :: string > > errorPath@var854 ;
342:
343:
344: int varId@var855 ;
345:
346:
347: bool safe@var856 ;
348:
349:
350: bool conditional@var857 ;
351:
352:
353: bool macro@var858 ;
354:
355:
356: bool defaultArg@var859 ;
357:
358: int indirect@var860 ;
359:
360:
361: long long path@var861 ;
362:
363:
364: long long wideintvalue@var862 ;
365:
366: std :: vector < std :: string > subexpressions@var863 ;
367:
368:
369: const Token * capturetok@var864 ;
370:
371: enum class LifetimeKind {
372:
373: Object ,
374:
375: SubObject ,
376:
377: Lambda ,
378:
379: Iterator ,
380:
381: Address
382: } ; enum LifetimeKind lifetimeKind@var865 ;
383:
384: enum class LifetimeScope { Local , Argument , SubFunction , ThisPointer , ThisValue } ; enum LifetimeScope lifetimeScope@var866 ;
385:
386: static const char * toString ( MoveKind moveKind@var867 ) ;
387: static const char * toString ( LifetimeKind lifetimeKind@var868 ) ;
388: static const char * toString ( LifetimeScope lifetimeScope@var869 ) ;
389: static const char * toString ( Bound bound@var870 ) ;
390:
391:
392: enum class ValueKind {
393:
394: Possible ,
395:
396: Known ,
397:
398: Inconclusive ,
399:
400: Impossible
401: } ; enum ValueKind valueKind@var871 ;
402:
403: void setKnown ( ) {
404: valueKind@var871 =@expr1073744735 ValueKind ::@expr1073744736 Known ;
405: }
406:
407: bool isKnown ( ) const {
408: return valueKind@var871 ==@expr1073744737 ValueKind ::@expr1073744738 Known ;
409: }
410:
411: void setPossible ( ) {
412: valueKind@var871 =@expr1073744740 ValueKind ::@expr1073744741 Possible@expr1073744739 ;
413: }
414:
415: bool isPossible ( ) const {
416: return valueKind@var871 ==@expr1073744743 ValueKind ::@expr1073744744 Possible@expr1073744742 ;
417: }
418:
419: bool isImpossible ( ) const {
420: return valueKind@var871 ==@expr1073744745 ValueKind ::@expr1073744746 Impossible ;
421: }
422:
423: void setImpossible ( ) {
424: valueKind@var871 =@expr1073744747 ValueKind ::@expr1073744748 Impossible ;
425: }
426:
427: void setInconclusive ( bool inconclusive@var872 = true ) {
428: if (@expr1073744749 inconclusive@var872 ) {
429: valueKind@var871 =@expr1073744750 ValueKind ::@expr1073744751 Inconclusive ; }
430: }
431:
432: bool isInconclusive ( ) const {
433: return valueKind@var871 ==@expr1073744752 ValueKind ::@expr1073744753 Inconclusive ;
434: }
435:
436: void changeKnownToPossible ( ) {
437: if (@expr1073744755 isKnown (@expr1073744756 ) ) {
438: valueKind@var871 =@expr1073744757 ValueKind ::@expr1073744758 Possible@expr1073744754 ; }
439: }
440:
441: bool errorSeverity ( ) const {
442: return !@expr1073744759 condition@var853 &&@expr1073744760 !@expr1073744761 defaultArg@var859 ;
443: }
444:
445: static bool sameToken ( const Token * tok1@var873 , const Token * tok2@var874 ) ;
446: } ;
447:
448:
449: const ValueFlow :: Value * valueFlowConstantFoldAST ( Token * expr@var875 , const Settings * settings@var876 ) ;
450:
451:
452: void setValues ( TokenList * tokenlist@var877 , SymbolDatabase * symboldatabase@var878 , ErrorLogger * errorLogger@var879 , const Settings * settings@var880 ) ;
453:
454: std :: string eitherTheConditionIsRedundant ( const Token * condition@var881 ) ;
455:
456: unsigned long getSizeOf ( const ValueType & vt@var882 , const Settings * settings@var883 ) ;
457:
458: const ValueFlow :: Value * findValue ( const std :: list < ValueFlow :: Value > & values@var884 ,
459: const Settings * settings@var885 ,
460: std :: function < bool ( const ValueFlow :: Value & ) > pred@var886 ) ;
461:
462: std :: vector < ValueFlow :: Value > isOutOfBounds ( const Value & size@var887 , const Token * indexTok@var888 , bool possible@var889 = true ) ;
463: }
464:
465: ValueFlow :: Value asImpossible ( ValueFlow :: Value v@var890 ) ;
466:
467: bool isContainerSizeChanged ( const Token * tok@var891 , const Settings * settings@var892 = nullptr , int depth@var893 = 20 ) ;
468:
469: struct LifetimeToken {
470: const Token * token@var894 ;
471: bool addressOf@var895 ;
472: std :: list < std :: pair < const Token * , std :: string > > errorPath@var896 ;
473: bool inconclusive@var897 ;
474:
475: LifetimeToken ( ) : token@var894 ( nullptr ) , addressOf@var895 ( false ) , errorPath@var896 ( ) , inconclusive@var897 ( false ) { }
476:
477: LifetimeToken ( const Token * token@var898 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var899 )
478: : token@var894 ( token@var898 ) , addressOf@var895 ( false ) , errorPath@var896 ( std :: move ( errorPath@var899 ) ) , inconclusive@var897 ( false )
479: { }
480:
481: LifetimeToken ( const Token * token@var900 , bool addressOf@var901 , std :: list < std :: pair < const Token * , std :: string > > errorPath@var902 )
482: : token@var894 ( token@var900 ) , addressOf@var895 ( addressOf@var901 ) , errorPath@var896 ( std :: move ( errorPath@var902 ) ) , inconclusive@var897 ( false )
483: { }
484:
485: static std :: vector < LifetimeToken > setAddressOf ( std :: vector < LifetimeToken > v@var903 , bool b@var904 ) {
486: for (@expr1073744762 LifetimeToken &@expr1073744763 x@var905 :@expr1073744764 v@var903 ) {
487: x@var905 .@expr1073744765 addressOf@var906 =@expr1073744766 b@var904 ; }
488: return v@var903 ;
489: }
490:
491: static std :: vector < LifetimeToken > setInconclusive ( std :: vector < LifetimeToken > v@var907 , bool b@var908 ) {
492: for (@expr1073744767 LifetimeToken &@expr1073744768 x@var909 :@expr1073744769 v@var907 ) {
493: x@var909 .@expr1073744770 inconclusive@var910 =@expr1073744771 b@var908 ; }
494: return v@var907 ;
495: }
496: } ;
497:
498: const Token * parseCompareInt ( const Token * tok@var911 , ValueFlow :: Value & true_value@var912 , ValueFlow :: Value & false_value@var913 , const std :: function < std :: vector < long long > ( const Token * ) > & evaluate@var914 ) ;
499: const Token * parseCompareInt ( const Token * tok@var915 , ValueFlow :: Value & true_value@var916 , ValueFlow :: Value & false_value@var917 ) ;
500:
501: ValueFlow :: Value inferCondition ( std :: string op@var918 , long long val@var919 , const Token * varTok@var920 ) ;
502: ValueFlow :: Value inferCondition ( const std :: string & op@var921 , const Token * varTok@var922 , long long val@var923 ) ;
503:
504: ValuePtr < InferModel > makeIntegralInferModel ( ) ;
505:
506: const Token * solveExprValue ( const Token * expr@var924 ,
507: const std :: function < std :: vector < long long > ( const Token * ) > & eval@var925 ,
508: ValueFlow :: Value & value@var926 ) ;
509:
510: std :: vector < LifetimeToken > getLifetimeTokens ( const Token * tok@var927 ,
511: bool escape@var928 = false ,
512: std :: list < std :: pair < const Token * , std :: string > > errorPath@var929 = std :: list < std :: pair < const Token * , std :: string > > { } ) ;
513:
514: bool hasLifetimeToken ( const Token * tok@var930 , const Token * lifetime@var931 ) ;
515:
516: const Variable * getLifetimeVariable ( const Token * tok@var932 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var933 , bool * addressOf@var934 = nullptr ) ;
517:
518: const Variable * getLifetimeVariable ( const Token * tok@var935 ) ;
519:
520: bool isLifetimeBorrowed ( const Token * tok@var936 , const Settings * settings@var937 ) ;
521:
522: std :: string lifetimeType ( const Token * tok@var938 , const ValueFlow :: Value * val@var939 ) ;
523:
524: std :: string lifetimeMessage ( const Token * tok@var940 , const ValueFlow :: Value * val@var941 , std :: list < std :: pair < const Token * , std :: string > > & errorPath@var942 ) ;
525:
526: ValueFlow :: Value getLifetimeObjValue ( const Token * tok@var943 , bool inconclusive@var944 = false ) ;
527:
528: std :: vector < ValueFlow :: Value > getLifetimeObjValues ( const Token * tok@var945 ,
529: bool inconclusive@var946 = false ,
530: long long path@var947 = 0 ) ;
531:
532: const Token * getEndOfExprScope ( const Token * tok@var948 , const Scope * defaultScope@var949 = nullptr , bool smallest@var950 = true ) ;

##file cppcheck-2.8/lib/templatesimplifier.h

1:
|
34:
35: class ErrorLogger ;
36: class Settings ;
37: class Token ;
38: class Tokenizer ;
39: class TokenList ;
40:
|
44:
45: class TemplateSimplifier {
46: friend class TestSimplifyTemplate ;
47:
48: public:
49: explicit TemplateSimplifier ( Tokenizer * tokenizer@var951 ) ;
50: ~ TemplateSimplifier ( ) ;
51:
52:
53:
54: void checkComplicatedSyntaxErrorsInTemplates ( ) ;
55:
|
61:
62: static unsigned int templateParameters ( const Token * tok@var952 ) ;
63:
|
66:
67: class TokenAndName {
68: Token * mToken@var953 ;
69: std :: string mScope@var954 ;
70: std :: string mName@var955 ;
71: std :: string mFullName@var956 ;
72: const Token * mNameToken@var957 ;
73: const Token * mParamEnd@var958 ;
74: unsigned int mFlags@var959 ;
75:
76: enum Anonymous2 {
77: fIsClass = ( 1 << 0 ) ,
78: fIsFunction = ( 1 << 1 ) ,
79: fIsVariable = ( 1 << 2 ) ,
80: fIsAlias = ( 1 << 3 ) ,
81: fIsSpecialization = ( 1 << 4 ) ,
82: fIsPartialSpecialization = ( 1 << 5 ) ,
83: fIsForwardDeclaration = ( 1 << 6 ) ,
84: fIsVariadic = ( 1 << 7 ) ,
85: fIsFriend = ( 1 << 8 ) ,
86: fFamilyMask = ( fIsClass | fIsFunction | fIsVariable )
87: } ;
88:
89: void isClass ( bool state@var960 ) {
90: setFlag (@expr1073744772 fIsClass , state@var960 ) ;
91: }
92: void isFunction ( bool state@var961 ) {
93: setFlag (@expr1073744773 fIsFunction , state@var961 ) ;
94: }
95: void isVariable ( bool state@var962 ) {
96: setFlag (@expr1073744774 fIsVariable , state@var962 ) ;
97: }
98: void isAlias ( bool state@var963 ) {
99: setFlag (@expr1073744775 fIsAlias , state@var963 ) ;
100: }
101: void isSpecialization ( bool state@var964 ) {
102: setFlag (@expr1073744776 fIsSpecialization , state@var964 ) ;
103: }
104: void isPartialSpecialization ( bool state@var965 ) {
105: setFlag (@expr1073744777 fIsPartialSpecialization , state@var965 ) ;
106: }
107: void isForwardDeclaration ( bool state@var966 ) {
108: setFlag (@expr1073744778 fIsForwardDeclaration , state@var966 ) ;
109: }
110: void isVariadic ( bool state@var967 ) {
111: setFlag (@expr1073744779 fIsVariadic , state@var967 ) ;
112: }
113: void isFriend ( bool state@var968 ) {
114: setFlag (@expr1073744780 fIsFriend , state@var968 ) ;
115: }
116:
|
121:
122: bool getFlag ( unsigned int flag@var969 ) const {
123: return (@expr2957 (@expr2957 mFlags@var959 &@expr1073744783 flag@var969 ) !=@expr1073744784 0 ) ;
124: }
125:
|
130:
131: void setFlag ( unsigned int flag@var970 , bool state@var971 ) {
132: mFlags@var959 =@expr1073744785 state@var971 ?@expr1073744786 mFlags@var959 |@expr1073744787 flag@var970 :@expr1073744788 mFlags@var959 &@expr1073744789 ~@expr1073744790 flag@var970 ;
133: }
134:
135: public:
136:
|
140:
141: TokenAndName ( Token * token@var972 , const std :: string & scope@var973 ) ;
142:
|
148:
149: TokenAndName ( Token * token@var974 , const std :: string & scope@var975 , const Token * nameToken@var976 , const Token * paramEnd@var977 ) ;
150: TokenAndName ( const TokenAndName & other@var978 ) ;
151: ~ TokenAndName ( ) ;
152:
153: bool operator== ( const TokenAndName & rhs@var979 ) const {
154: return mToken@var953 ==@expr1073744791 rhs@var979 .@expr1073744792 mToken@var980 &&@expr1073744793 mScope@var954 ==@expr1073744794 rhs@var979 .@expr1073744795 mScope@var981 &&@expr1073744796 mName@var955 ==@expr1073744797 rhs@var979 .@expr1073744798 mName@var982 &&@expr1073744799 mFullName@var956 ==@expr1073744800 rhs@var979 .@expr1073744801 mFullName@var983 &&@expr1073744802
155: mNameToken@var957 ==@expr1073744803 rhs@var979 .@expr1073744804 mNameToken@var984 &&@expr1073744805 mParamEnd@var958 ==@expr1073744806 rhs@var979 .@expr1073744807 mParamEnd@var985 &&@expr1073744808 mFlags@var959 ==@expr1073744809 rhs@var979 .@expr1073744810 mFlags@var986 ;
156: }
157:
158: Token * token ( ) const {
159: return mToken@var953 ;
160: }
161: void token ( Token * token@var987 ) {
162: mToken@var953 =@expr1073744811 token@var987 ;
163: }
164: const std :: string & scope ( ) const {
165: return mScope@var954 ;
166: }
167: const std :: string & name ( ) const {
168: return mName@var955 ;
169: }
170: const std :: string & fullName ( ) const {
171: return mFullName@var956 ;
172: }
173: const Token * nameToken ( ) const {
174: return mNameToken@var957 ;
175: }
176: const Token * paramEnd ( ) const {
177: return mParamEnd@var958 ;
178: }
179: void paramEnd ( const Token * end@var988 ) {
180: mParamEnd@var958 =@expr1073744812 end@var988 ;
181: }
182:
183: bool isClass ( ) const {
184: return getFlag (@expr1073744813 fIsClass ) ;
185: }
186: bool isFunction ( ) const {
187: return getFlag (@expr1073744814 fIsFunction ) ;
188: }
189: bool isVariable ( ) const {
190: return getFlag (@expr1073744815 fIsVariable ) ;
191: }
192: bool isAlias ( ) const {
193: return getFlag (@expr1073744816 fIsAlias ) ;
194: }
195: bool isSpecialization ( ) const {
196: return getFlag (@expr1073744817 fIsSpecialization ) ;
197: }
198: bool isPartialSpecialization ( ) const {
199: return getFlag (@expr1073744818 fIsPartialSpecialization ) ;
200: }
201: bool isForwardDeclaration ( ) const {
202: return getFlag (@expr1073744819 fIsForwardDeclaration ) ;
203: }
204: bool isVariadic ( ) const {
205: return getFlag (@expr1073744820 fIsVariadic ) ;
206: }
207: bool isFriend ( ) const {
208: return getFlag (@expr1073744821 fIsFriend ) ;
209: }
210:
|
216:
217: const Token * aliasStartToken ( ) const ;
218:
|
224:
225: const Token * aliasEndToken ( ) const ;
226:
|
233:
234: bool isAliasToken ( const Token * tok@var989 ) const ;
235:
|
241:
242: bool isSameFamily ( const TemplateSimplifier :: TokenAndName & decl@var990 ) const {
243:
244:
245: return (@expr2998 (@expr2998 mFlags@var959 &@expr1073744824 fFamilyMask ) &@expr1073744825 (@expr2998 decl@var990 .@expr1073744827 mFlags@var991 &@expr1073744828 fFamilyMask ) ) !=@expr1073744829 0 ;
246: }
247: } ;
248:
|
253:
254: static Token * findTemplateDeclarationEnd ( Token * tok@var992 ) ;
255: static const Token * findTemplateDeclarationEnd ( const Token * tok@var993 ) ;
256:
|
264:
265: static bool instantiateMatch ( const Token * instance@var994 , const unsigned long numberOfArguments@var995 , bool variadic@var996 , const char patternAfter@var997 [ ] ) ;
266:
|
272:
273: int getTemplateNamePosition ( const Token * tok@var998 ) ;
274:
|
280:
281: static bool getTemplateNamePositionTemplateClass ( const Token * tok@var999 , int & namepos@var1000 ) ;
282:
|
288:
289: static bool getTemplateNamePositionTemplateFunction ( const Token * tok@var1001 , int & namepos@var1002 ) ;
290:
|
296:
297: static bool getTemplateNamePositionTemplateVariable ( const Token * tok@var1003 , int & namepos@var1004 ) ;
298:
|
303:
304: void simplifyTemplates (
305: const std :: time_t maxtime@var1005 ,
306: bool & codeWithTemplates@var1006 ) ;
307:
|
313:
314: static bool simplifyNumericCalculations ( Token * tok@var1007 , bool isTemplate@var1008 = true ) ;
315:
|
321:
322: bool simplifyCalculations ( Token * frontToken@var1009 = nullptr , Token * backToken@var1010 = nullptr , bool isTemplate@var1011 = true ) ;
323:
|
327:
328: void simplifyTemplateArgs ( Token * start@var1012 , Token * end@var1013 ) ;
329:
330: private:
331:
|
334:
335: bool getTemplateDeclarations ( ) ;
336:
|
340:
341: void addInstantiation ( Token * token@var1014 , const std :: string & scope@var1015 ) ;
342:
|
345:
346: void getTemplateInstantiations ( ) ;
347:
|
351:
352: void fixForwardDeclaredDefaultArgumentValues ( ) ;
353:
|
356:
357: void useDefaultArgumentValues ( ) ;
358:
|
362:
363: void useDefaultArgumentValues ( TokenAndName & declaration@var1016 ) ;
364:
|
368:
369: void getSpecializations ( ) ;
370:
|
374:
375: void getPartialSpecializations ( ) ;
376:
|
379:
380: void simplifyTemplateAliases ( ) ;
381:
|
390:
391: bool simplifyTemplateInstantiations (
392: const TokenAndName & templateDeclaration@var1017 ,
393: const std :: list < const Token * > & specializations@var1018 ,
394: const std :: time_t maxtime@var1019 ,
395: std :: set < std :: string > & expandedtemplates@var1020 ) ;
396:
|
401:
402: void addNamespace ( const TokenAndName & templateDeclaration@var1021 , const Token * tok@var1022 ) ;
403:
|
409:
410: static bool alreadyHasNamespace ( const TokenAndName & templateDeclaration@var1023 , const Token * tok@var1024 ) ;
411:
|
419:
420: void expandTemplate (
421: const TokenAndName & templateDeclaration@var1025 ,
422: const TokenAndName & templateInstantiation@var1026 ,
423: const std :: vector < const Token * > & typeParametersInDeclaration@var1027 ,
424: const std :: string & newName@var1028 ,
425: bool copy@var1029 ) ;
426:
|
432:
433: void replaceTemplateUsage ( const TokenAndName & instantiation@var1030 ,
434: const std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1031 ,
435: const std :: string & newName@var1032 ) ;
436:
|
443:
444: static void getTemplateParametersInDeclaration (
445: const Token * tok@var1033 ,
446: std :: vector < const Token * > & typeParametersInDeclaration@var1034 ) ;
447:
|
450:
451: static bool removeTemplate ( Token * tok@var1035 ) ;
452:
453:
454: static void syntaxError ( const Token * tok@var1036 ) ;
455:
456: static bool matchSpecialization (
457: const Token * templateDeclarationNameToken@var1037 ,
458: const Token * templateInstantiationNameToken@var1038 ,
459: const std :: list < const Token * > & specializations@var1039 ) ;
460:
|
465:
466: static void eraseTokens ( Token * begin@var1040 , const Token * end@var1041 ) ;
467:
|
472:
473: static void deleteToken ( Token * tok@var1042 ) ;
474:
|
480:
481: std :: string getNewName (
482: Token * tok2@var1043 ,
483: std :: list < std :: string > & typeStringsUsedInTemplateInstantiation@var1044 ) ;
484:
485: void printOut (
486: const TokenAndName & tokenAndName@var1045 ,
487: const std :: string & indent@var1046 = "    " ) const ;
488: void printOut ( const std :: string & text@var1047 = "" ) const ;
489:
490: Tokenizer * mTokenizer@var1048 ;
491: TokenList & mTokenList@var1049 ;
492: const Settings * mSettings@var1050 ;
493: ErrorLogger * mErrorLogger@var1051 ;
494: bool mChanged@var1052 ;
495:
496: std :: list < TokenAndName > mTemplateDeclarations@var1053 ;
497: std :: list < TokenAndName > mTemplateForwardDeclarations@var1054 ;
498: std :: map < Token * , Token * > mTemplateForwardDeclarationsMap@var1055 ;
499: std :: map < Token * , Token * > mTemplateSpecializationMap@var1056 ;
500: std :: map < Token * , Token * > mTemplatePartialSpecializationMap@var1057 ;
501: std :: list < TokenAndName > mTemplateInstantiations@var1058 ;
502: std :: list < TokenAndName > mInstantiatedTemplates@var1059 ;
503: std :: list < TokenAndName > mMemberFunctionsToDelete@var1060 ;
504: std :: vector < TokenAndName > mExplicitInstantiationsToDelete@var1061 ;
505: std :: vector < TokenAndName > mTypesUsedInTemplateInstantiation@var1062 ;
506: std :: unordered_map < const Token * , int > mTemplateNamePos@var1063 ;
507: } ;

##file cppcheck-2.8/lib/token.h

1:
|
40:
41: class Enumerator ;
42: class Function ;
43: class Scope ;
44: class Settings ;
45: class Type ;
46: class ValueType ;
47: class Variable ;
48: class TokenList ;
49: class ConstTokenRange ;
50: class Token ;
51:
|
54:
55: struct TokensFrontBack {
56: Token * front@var1064 ;
57: Token * back@var1065 ;
58: const TokenList * list@var1066 ;
59: } ;
60:
61: struct ScopeInfo2 {
62: ScopeInfo2 ( const std :: string & name_@var1067 , const Token * bodyEnd_@var1068 , const std :: set < std :: string > & usingNamespaces_@var1069 = std :: set < std :: string > ( ) ) : name@var1070 ( name_@var1067 ) , bodyEnd@var1071 ( bodyEnd_@var1068 ) , usingNamespaces@var1072 ( usingNamespaces_@var1069 ) { }
63: std :: string name@var1070 ;
64: const Token * const bodyEnd@var1071 ;
65: std :: set < std :: string > usingNamespaces@var1072 ;
66: } ;
67:
68: struct TokenImpl {
69: int mVarId@var1073 ;
70: int mFileIndex@var1074 ;
71: int mLineNumber@var1075 ;
72: int mColumn@var1076 ;
73: int mExprId@var1077 ;
74:
75:
76: Token * mAstOperand1@var1078 ;
77: Token * mAstOperand2@var1079 ;
78: Token * mAstParent@var1080 ;
79:
80:
81: const Scope * mScope@var1081 ;
82: union {
83: const Function * mFunction@var1082 ;
84: const Variable * mVariable@var1083 ;
85: const :: Type * mType@var1084 ;
86: const Enumerator * mEnumerator@var1085 ;
87: } ;
88:
|
92:
93: int mProgressValue@var1086 ;
94:
|
97:
98: int mIndex@var1087 ;
99:
100:
101: std :: string * mOriginalName@var1088 ;
102:
103:
104: ValueType * mValueType@var1089 ;
105:
106:
107: std :: list < ValueFlow :: Value > * mValues@var1090 ;
108: static const std :: list < ValueFlow :: Value > mEmptyValueList@var1091 ;
109:
110:
111: std :: set < TemplateSimplifier :: TokenAndName * > * mTemplateSimplifierPointers@var1092 ;
112:
113:
114: std :: shared_ptr < ScopeInfo2 > mScopeInfo@var1093 ;
115:
116:
117: struct CppcheckAttributes {
118: enum Type { LOW , HIGH } ; enum Type type@var1094 ;
119: long long value@var1095 ;
120: struct CppcheckAttributes * next@var1096 ;
121: } ;
122: struct CppcheckAttributes * mCppcheckAttributes@var1097 ;
123:
124:
125: enum class Cpp11init { UNKNOWN , CPP11INIT , NOINIT } ; enum Cpp11init mCpp11init@var1098 ;
126:
127:
128: unsigned char mBits@var1099 ;
129:
130: void setCppcheckAttribute ( CppcheckAttributes :: Type type@var1100 , long long value@var1101 ) ;
131: bool getCppcheckAttribute ( CppcheckAttributes :: Type type@var1102 , long long * value@var1103 ) const ;
132:
133: TokenImpl ( )
134: : mVarId@var1073 ( 0 )
135: , mFileIndex@var1074 ( 0 )
136: , mLineNumber@var1075 ( 0 )
137: , mColumn@var1076 ( 0 )
138: , mExprId@var1077 ( 0 )
139: , mAstOperand1@var1078 ( nullptr )
140: , mAstOperand2@var1079 ( nullptr )
141: , mAstParent@var1080 ( nullptr )
142: , mScope@var1081 ( nullptr )
143: , mFunction@var1082 ( nullptr )
144: , mProgressValue@var1086 ( 0 )
145: , mIndex@var1087 ( 0 )
146: , mOriginalName@var1088 ( nullptr )
147: , mValueType@var1089 ( nullptr )
148: , mValues@var1090 ( nullptr )
149: , mTemplateSimplifierPointers@var1092 ( nullptr )
150: , mScopeInfo@var1093 ( nullptr )
151: , mCppcheckAttributes@var1097 ( nullptr )
152: , mCpp11init@var1098 ( Cpp11init :: UNKNOWN )
153: , mBits@var1099 ( 0 )
154: { }
155:
156: ~ TokenImpl ( ) ;
157: } ;
158:
|
171:
172: class Token {
173: private:
174: TokensFrontBack * mTokensFrontBack@var1104 ;
175:
176:
177: Token ( const Token & ) ;
178: Token operator= ( const Token & ) ;
179:
180: public:
181: enum Type {
182: eVariable , eType , eFunction , eKeyword , eName ,
183: eNumber , eString , eChar , eBoolean , eLiteral , eEnumerator ,
184: eArithmeticalOp , eComparisonOp , eAssignmentOp , eLogicalOp , eBitOp , eIncDecOp , eExtendedOp ,
185: eBracket ,
186: eLambda ,
187: eEllipsis ,
188: eOther ,
189: eNone
190: } ;
191:
192: explicit Token ( TokensFrontBack * tokensFrontBack@var1105 = nullptr ) ;
193: ~ Token ( ) ;
194:
195: ConstTokenRange until ( const Token * t@var1106 ) const ;
196:
197: template < typename T >
198: void str ( T && s@var1107 ) {
199: mStr@var1319 =@expr1073744830 s@var1107 ;
200: mImpl@var1325 .@expr1073744831 mVarId@var1356 =@expr1073744832 0 ;
201:
202: update_property_info (@expr1073744833 ) ;
203: }
204:
|
208:
209: void concatStr ( const std :: string & b@var1108 ) ;
210:
211: const std :: string & str ( ) const {
212: return mStr@var1319 ;
213: }
214:
|
217:
218: void deleteNext ( int count@var1109 = 1 ) ;
219:
|
222:
223: void deletePrevious ( int count@var1110 = 1 ) ;
224:
|
227:
228: void swapWithNext ( ) ;
229:
|
234:
235: const Token * tokAt ( int index@var1111 ) const ;
236: Token * tokAt ( int index@var1112 ) {
237: return const_cast < Token *@expr3010 > (@expr1073744835 const_cast < const Token *@expr3010 > (@expr1073744837 this@expr1073744838 ) .@expr1073744839 tokAt (@expr1073744840 index@var1112 ) ) ;
238: }
239:
|
243:
244: const Token * linkAt ( int index@var1113 ) const ;
245: Token * linkAt ( int index@var1114 ) {
246: return const_cast < Token *@expr3017 > (@expr1073744842 const_cast < const Token *@expr3017 > (@expr1073744844 this@expr1073744845 ) .@expr1073744846 linkAt (@expr1073744847 index@var1114 ) ) ;
247: }
248:
|
252:
253: const std :: string & strAt ( int index@var1115 ) const ;
254:
|
273:
274: template < unsigned long count >
275: static bool simpleMatch ( const Token * tok@var1116 , const char ( & pattern@var1117 ) [ count ] ) {
276: return simpleMatch (@expr1073744849 tok@var1116 , pattern@var1117 , count@expr1073744848 -@expr1073744850 1 ) ;
277: }
278:
279: static bool simpleMatch ( const Token * tok@var1118 , const char pattern@var1119 [ ] , unsigned long pattern_len@var1120 ) ;
280:
|
323:
324: static bool Match ( const Token * tok@var1121 , const char pattern@var1122 [ ] , int varid@var1123 = 0 ) ;
325:
|
332:
333: static int getStrLength ( const Token * tok@var1124 ) ;
334:
|
341:
342: static int getStrArraySize ( const Token * tok@var1125 ) ;
343:
|
351:
352: static int getStrSize ( const Token * tok@var1126 , const Settings * const settings@var1127 ) ;
353:
|
361:
362: static std :: string getCharAt ( const Token * tok@var1128 , long long index@var1129 ) ;
363:
364: const ValueType * valueType ( ) const {
365: return mImpl@var1325 .@expr1073744851 mValueType@var1357 ;
366: }
367: void setValueType ( ValueType * vt@var1130 ) ;
368:
369: const ValueType * argumentType ( ) const {
370: const Token * top@var1131 ; top@var1131 =@expr1073744852 this@expr1073744853 ;
371: while (@expr1073744854 top@var1131 &&@expr1073744855 !@expr1073744856 Token ::@expr1073744857 Match (@expr1073744858 top@var1131 .@expr3035 astParent (@expr3036 ) , ",|(" ) ) {
372: top@var1131 =@expr1073744861 top@var1131 .@expr3035 astParent (@expr3036 ) ; }
373: return top@var1131 ?@expr1073744864 top@var1131 .@expr1073744865 mImpl@var1132 .@expr1073744866 mValueType@var1133 :@expr1073744867 nullptr ;
374: }
375:
376: Token :: Type tokType ( ) const {
377: return mTokType@var1323 ;
378: }
379: void tokType ( Token :: Type t@var1134 ) {
380: mTokType@var1323 =@expr1073744868 t@var1134 ;
381:
382: const bool memoizedIsName@var1135 =@expr1073744869 mTokType@var1323 ==@expr1073744870 eName ||@expr1073744871 mTokType@var1323 ==@expr1073744872 eType ||@expr1073744873 mTokType@var1323 ==@expr1073744874 eVariable ||@expr1073744875
383: mTokType@var1323 ==@expr1073744876 eFunction ||@expr1073744877 mTokType@var1323 ==@expr1073744878 eKeyword ||@expr1073744879 mTokType@var1323 ==@expr3056 eBoolean ||@expr1073744881
384: mTokType@var1323 ==@expr3058 eEnumerator ;
385: setFlag (@expr1073744883 fIsName , memoizedIsName@var1135 ) ;
386:
387: const bool memoizedIsLiteral@var1136 =@expr1073744884 mTokType@var1323 ==@expr1073744885 eNumber ||@expr1073744886 mTokType@var1323 ==@expr1073744887 eString ||@expr1073744888 mTokType@var1323 ==@expr1073744889 eChar ||@expr1073744890
388: mTokType@var1323 ==@expr3056 eBoolean ||@expr1073744892 mTokType@var1323 ==@expr1073744893 eLiteral ||@expr1073744894 mTokType@var1323 ==@expr3058 eEnumerator ;
389: setFlag (@expr1073744896 fIsLiteral , memoizedIsLiteral@var1136 ) ;
390: }
391: bool isKeyword ( ) const {
392: return mTokType@var1323 ==@expr1073744897 eKeyword ;
393: }
394: bool isName ( ) const {
395: return getFlag (@expr1073744898 fIsName ) ;
396: }
397: bool isNameOnly ( ) const {
398: return mFlags@var1324 ==@expr1073744899 fIsName &&@expr1073744900 mTokType@var1323 ==@expr1073744901 eName ;
399: }
400: bool isUpperCaseName ( ) const ;
401: bool isLiteral ( ) const {
402: return getFlag (@expr1073744902 fIsLiteral ) ;
403: }
404: bool isNumber ( ) const {
405: return mTokType@var1323 ==@expr1073744903 eNumber ;
406: }
407: bool isEnumerator ( ) const {
408: return mTokType@var1323 ==@expr1073744904 eEnumerator ;
409: }
410: bool isOp ( ) const {
411: return (@expr1073744905 isConstOp (@expr1073744906 ) ||@expr1073744907
412: isAssignmentOp (@expr1073744908 ) ||@expr1073744909
413: mTokType@var1323 ==@expr1073744910 eIncDecOp ) ;
414: }
415: bool isConstOp ( ) const {
416: return (@expr1073744911 isArithmeticalOp (@expr1073744912 ) ||@expr1073744913
417: mTokType@var1323 ==@expr1073744914 eLogicalOp ||@expr1073744915
418: mTokType@var1323 ==@expr1073744916 eComparisonOp ||@expr1073744917
419: mTokType@var1323 ==@expr1073744918 eBitOp ) ;
420: }
421: bool isExtendedOp ( ) const {
422: return isConstOp (@expr1073744919 ) ||@expr1073744920
423: mTokType@var1323 ==@expr1073744921 eExtendedOp ;
424: }
425: bool isArithmeticalOp ( ) const {
426: return mTokType@var1323 ==@expr1073744922 eArithmeticalOp ;
427: }
428: bool isComparisonOp ( ) const {
429: return mTokType@var1323 ==@expr1073744923 eComparisonOp ;
430: }
431: bool isAssignmentOp ( ) const {
432: return mTokType@var1323 ==@expr1073744924 eAssignmentOp ;
433: }
434: bool isBoolean ( ) const {
435: return mTokType@var1323 ==@expr1073744925 eBoolean ;
436: }
437: bool isIncDecOp ( ) const {
438: return mTokType@var1323 ==@expr1073744926 eIncDecOp ;
439: }
440: bool isBinaryOp ( ) const {
441: return astOperand1 (@expr1073744927 ) !=@expr1073744928 nullptr &&@expr1073744929 astOperand2 (@expr1073744930 ) !=@expr1073744931 nullptr ;
442: }
443: bool isUnaryOp ( const std :: string & s@var1137 ) const {
444: return s@var1137 ==@expr1073744932 mStr@var1319 &&@expr1073744933 astOperand1 (@expr1073744934 ) !=@expr1073744935 nullptr &&@expr1073744936 astOperand2 (@expr1073744937 ) ==@expr1073744938 nullptr ;
445: }
446: bool isUnaryPreOp ( ) const ;
447:
448: unsigned int flags ( ) const {
449: return mFlags@var1324 ;
450: }
451: void flags ( const unsigned int flags_@var1138 ) {
452: mFlags@var1324 =@expr1073744939 flags_@var1138 ;
453: }
454: bool isUnsigned ( ) const {
455: return getFlag (@expr1073744940 fIsUnsigned ) ;
456: }
457: void isUnsigned ( const bool sign@var1139 ) {
458: setFlag (@expr1073744941 fIsUnsigned , sign@var1139 ) ;
459: }
460: bool isSigned ( ) const {
461: return getFlag (@expr1073744942 fIsSigned ) ;
462: }
463: void isSigned ( const bool sign@var1140 ) {
464: setFlag (@expr1073744943 fIsSigned , sign@var1140 ) ;
465: }
466: bool isPointerCompare ( ) const {
467: return getFlag (@expr1073744944 fIsPointerCompare ) ;
468: }
469: void isPointerCompare ( const bool b@var1141 ) {
470: setFlag (@expr1073744945 fIsPointerCompare , b@var1141 ) ;
471: }
472: bool isLong ( ) const {
473: return getFlag (@expr1073744946 fIsLong ) ;
474: }
475: void isLong ( bool size@var1142 ) {
476: setFlag (@expr1073744947 fIsLong , size@var1142 ) ;
477: }
478: bool isStandardType ( ) const {
479: return getFlag (@expr1073744948 fIsStandardType ) ;
480: }
481: void isStandardType ( const bool b@var1143 ) {
482: setFlag (@expr1073744949 fIsStandardType , b@var1143 ) ;
483: }
484: bool isExpandedMacro ( ) const {
485: return getFlag (@expr1073744950 fIsExpandedMacro ) ;
486: }
487: void isExpandedMacro ( const bool m@var1144 ) {
488: setFlag (@expr1073744951 fIsExpandedMacro , m@var1144 ) ;
489: }
490: bool isCast ( ) const {
491: return getFlag (@expr1073744952 fIsCast ) ;
492: }
493: void isCast ( bool c@var1145 ) {
494: setFlag (@expr1073744953 fIsCast , c@var1145 ) ;
495: }
496: bool isAttributeConstructor ( ) const {
497: return getFlag (@expr1073744954 fIsAttributeConstructor ) ;
498: }
499: void isAttributeConstructor ( const bool ac@var1146 ) {
500: setFlag (@expr1073744955 fIsAttributeConstructor , ac@var1146 ) ;
501: }
502: bool isAttributeDestructor ( ) const {
503: return getFlag (@expr1073744956 fIsAttributeDestructor ) ;
504: }
505: void isAttributeDestructor ( const bool value@var1147 ) {
506: setFlag (@expr1073744957 fIsAttributeDestructor , value@var1147 ) ;
507: }
508: bool isAttributeUnused ( ) const {
509: return getFlag (@expr1073744958 fIsAttributeUnused ) ;
510: }
511: void isAttributeUnused ( bool unused@var1148 ) {
512: setFlag (@expr1073744959 fIsAttributeUnused , unused@var1148 ) ;
513: }
514: bool isAttributeUsed ( ) const {
515: return getFlag (@expr1073744960 fIsAttributeUsed ) ;
516: }
517: void isAttributeUsed ( const bool unused@var1149 ) {
518: setFlag (@expr1073744961 fIsAttributeUsed , unused@var1149 ) ;
519: }
520: bool isAttributePure ( ) const {
521: return getFlag (@expr1073744962 fIsAttributePure ) ;
522: }
523: void isAttributePure ( const bool value@var1150 ) {
524: setFlag (@expr1073744963 fIsAttributePure , value@var1150 ) ;
525: }
526: bool isAttributeConst ( ) const {
527: return getFlag (@expr1073744964 fIsAttributeConst ) ;
528: }
529: void isAttributeConst ( bool value@var1151 ) {
530: setFlag (@expr1073744965 fIsAttributeConst , value@var1151 ) ;
531: }
532: bool isAttributeNoreturn ( ) const {
533: return getFlag (@expr1073744966 fIsAttributeNoreturn ) ;
534: }
535: void isAttributeNoreturn ( const bool value@var1152 ) {
536: setFlag (@expr1073744967 fIsAttributeNoreturn , value@var1152 ) ;
537: }
538: bool isAttributeNothrow ( ) const {
539: return getFlag (@expr1073744968 fIsAttributeNothrow ) ;
540: }
541: void isAttributeNothrow ( const bool value@var1153 ) {
542: setFlag (@expr1073744969 fIsAttributeNothrow , value@var1153 ) ;
543: }
544: bool isAttributePacked ( ) const {
545: return getFlag (@expr1073744970 fIsAttributePacked ) ;
546: }
547: void isAttributePacked ( const bool value@var1154 ) {
548: setFlag (@expr1073744971 fIsAttributePacked , value@var1154 ) ;
549: }
550: bool isAttributeNodiscard ( ) const {
551: return getFlag (@expr1073744972 fIsAttributeNodiscard ) ;
552: }
553: void isAttributeNodiscard ( const bool value@var1155 ) {
554: setFlag (@expr1073744973 fIsAttributeNodiscard , value@var1155 ) ;
555: }
556: bool isAttributeMaybeUnused ( ) const {
557: return getFlag (@expr1073744974 fIsAttributeMaybeUnused ) ;
558: }
559: void isAttributeMaybeUnused ( const bool value@var1156 ) {
560: setFlag (@expr1073744975 fIsAttributeMaybeUnused , value@var1156 ) ;
561: }
562: void setCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1157 , long long value@var1158 ) {
563: mImpl@var1325 .@expr1073744976 setCppcheckAttribute (@expr1073744977 type@var1157 , value@var1158 ) ;
564: }
565: bool getCppcheckAttribute ( TokenImpl :: CppcheckAttributes :: Type type@var1159 , long long * value@var1160 ) const {
566: return mImpl@var1325 .@expr1073744978 getCppcheckAttribute (@expr1073744979 type@var1159 , value@var1160 ) ;
567: }
568: bool hasCppcheckAttributes ( ) const {
569: return nullptr !=@expr1073744980 mImpl@var1325 .@expr1073744981 mCppcheckAttributes@var1358 ;
570: }
571: bool isControlFlowKeyword ( ) const {
572: return getFlag (@expr1073744982 fIsControlFlowKeyword ) ;
573: }
574: bool isOperatorKeyword ( ) const {
575: return getFlag (@expr1073744983 fIsOperatorKeyword ) ;
576: }
577: void isOperatorKeyword ( const bool value@var1161 ) {
578: setFlag (@expr1073744984 fIsOperatorKeyword , value@var1161 ) ;
579: }
580: bool isComplex ( ) const {
581: return getFlag (@expr1073744985 fIsComplex ) ;
582: }
583: void isComplex ( const bool value@var1162 ) {
584: setFlag (@expr1073744986 fIsComplex , value@var1162 ) ;
585: }
586: bool isEnumType ( ) const {
587: return getFlag (@expr1073744987 fIsEnumType ) ;
588: }
589: void isEnumType ( const bool value@var1163 ) {
590: setFlag (@expr1073744988 fIsEnumType , value@var1163 ) ;
591: }
592: bool isAtAddress ( ) const {
593: return getFlag (@expr1073744989 fAtAddress ) ;
594: }
595: void isAtAddress ( bool b@var1164 ) {
596: setFlag (@expr1073744990 fAtAddress , b@var1164 ) ;
597: }
598: bool isIncompleteVar ( ) const {
599: return getFlag (@expr1073744991 fIncompleteVar ) ;
600: }
601: void isIncompleteVar ( bool b@var1165 ) {
602: setFlag (@expr1073744992 fIncompleteVar , b@var1165 ) ;
603: }
604:
605: bool isIncompleteConstant ( ) const {
606: return getFlag (@expr1073744993 fIsIncompleteConstant ) ;
607: }
608: void isIncompleteConstant ( bool b@var1166 ) {
609: setFlag (@expr1073744994 fIsIncompleteConstant , b@var1166 ) ;
610: }
611:
612: bool isConstexpr ( ) const {
613: return getFlag (@expr1073744995 fConstexpr ) ;
614: }
615: void isConstexpr ( bool b@var1167 ) {
616: setFlag (@expr1073744996 fConstexpr , b@var1167 ) ;
617: }
618:
619: bool isExternC ( ) const {
620: return getFlag (@expr1073744997 fExternC ) ;
621: }
622: void isExternC ( bool b@var1168 ) {
623: setFlag (@expr1073744998 fExternC , b@var1168 ) ;
624: }
625:
626: bool isSplittedVarDeclComma ( ) const {
627: return getFlag (@expr1073744999 fIsSplitVarDeclComma ) ;
628: }
629: void isSplittedVarDeclComma ( bool b@var1169 ) {
630: setFlag (@expr1073745000 fIsSplitVarDeclComma , b@var1169 ) ;
631: }
632:
633: bool isSplittedVarDeclEq ( ) const {
634: return getFlag (@expr1073745001 fIsSplitVarDeclEq ) ;
635: }
636: void isSplittedVarDeclEq ( bool b@var1170 ) {
637: setFlag (@expr1073745002 fIsSplitVarDeclEq , b@var1170 ) ;
638: }
639:
640: bool isImplicitInt ( ) const {
641: return getFlag (@expr1073745003 fIsImplicitInt ) ;
642: }
643: void isImplicitInt ( bool b@var1171 ) {
644: setFlag (@expr1073745004 fIsImplicitInt , b@var1171 ) ;
645: }
646:
647: bool isInline ( ) const {
648: return getFlag (@expr1073745005 fIsInline ) ;
649: }
650: void isInline ( bool b@var1172 ) {
651: setFlag (@expr1073745006 fIsInline , b@var1172 ) ;
652: }
653:
654: bool isRemovedVoidParameter ( ) const {
655: return getFlag (@expr1073745007 fIsRemovedVoidParameter ) ;
656: }
657: void setRemovedVoidParameter ( bool b@var1173 ) {
658: setFlag (@expr1073745008 fIsRemovedVoidParameter , b@var1173 ) ;
659: }
660:
661: bool isTemplate ( ) const {
662: return getFlag (@expr1073745009 fIsTemplate ) ;
663: }
664: void isTemplate ( bool b@var1174 ) {
665: setFlag (@expr1073745010 fIsTemplate , b@var1174 ) ;
666: }
667:
668: bool isSimplifiedScope ( ) const {
669: return getFlag (@expr1073745011 fIsSimplifedScope ) ;
670: }
671: void isSimplifiedScope ( bool b@var1175 ) {
672: setFlag (@expr1073745012 fIsSimplifedScope , b@var1175 ) ;
673: }
674:
675: bool isBitfield ( ) const {
676: return mImpl@var1325 .@expr1073745013 mBits@var1359 >@expr1073745014 0 ;
677: }
678: unsigned char bits ( ) const {
679: return mImpl@var1325 .@expr1073745015 mBits@var1359 ;
680: }
681: std :: set < TemplateSimplifier :: TokenAndName * > * templateSimplifierPointers ( ) const {
682: return mImpl@var1325 .@expr1073745016 mTemplateSimplifierPointers@var1360 ;
683: }
684: void templateSimplifierPointer ( TemplateSimplifier :: TokenAndName * tokenAndName@var1176 ) {
685: if (@expr1073745017 !@expr1073745018 mImpl@var1325 .@expr3195 mTemplateSimplifierPointers@var1360 ) {
686: mImpl@var1325 .@expr3195 mTemplateSimplifierPointers@var1360 =@expr1073745021 new std ::@expr1073745022 set < TemplateSimplifier ::@expr1073745023 TokenAndName *@expr1073745024 > ; }
687: mImpl@var1325 .@expr3195 mTemplateSimplifierPointers@var1360 .@expr1073745026 insert (@expr1073745027 tokenAndName@var1176 ) ;
688: }
689: void setBits ( const unsigned char b@var1177 ) {
690: mImpl@var1325 .@expr1073745028 mBits@var1359 =@expr1073745029 b@var1177 ;
691: }
692:
693: bool isUtf8 ( ) const {
694: return (@expr3206 (@expr3206 (@expr3206 mTokType@var1323 ==@expr1073745033 eString ) &&@expr1073745034 isPrefixStringCharLiteral (@expr1073745035 mStr@var1319 , '"' , "u8" ) ) ||@expr1073745036
695: (@expr3206 (@expr3206 mTokType@var1323 ==@expr1073745039 eChar ) &&@expr1073745040 isPrefixStringCharLiteral (@expr1073745041 mStr@var1319 , '\'' , "u8" ) ) ) ;
696: }
697:
698: bool isUtf16 ( ) const {
699: return (@expr3218 (@expr3218 (@expr3218 mTokType@var1323 ==@expr1073745045 eString ) &&@expr1073745046 isPrefixStringCharLiteral (@expr1073745047 mStr@var1319 , '"' , "u" ) ) ||@expr1073745048
700: (@expr3218 (@expr3218 mTokType@var1323 ==@expr1073745051 eChar ) &&@expr1073745052 isPrefixStringCharLiteral (@expr1073745053 mStr@var1319 , '\'' , "u" ) ) ) ;
701: }
702:
703: bool isUtf32 ( ) const {
704: return (@expr3230 (@expr3230 (@expr3230 mTokType@var1323 ==@expr1073745057 eString ) &&@expr1073745058 isPrefixStringCharLiteral (@expr1073745059 mStr@var1319 , '"' , "U" ) ) ||@expr1073745060
705: (@expr3230 (@expr3230 mTokType@var1323 ==@expr1073745063 eChar ) &&@expr1073745064 isPrefixStringCharLiteral (@expr1073745065 mStr@var1319 , '\'' , "U" ) ) ) ;
706: }
707:
708: bool isCChar ( ) const {
709: return (@expr3242 (@expr3242 (@expr3242 mTokType@var1323 ==@expr1073745069 eString ) &&@expr1073745070 isPrefixStringCharLiteral (@expr1073745071 mStr@var1319 , '"' , "" ) ) ||@expr1073745072
710: (@expr3242 (@expr3242 mTokType@var1323 ==@expr1073745075 eChar ) &&@expr1073745076 isPrefixStringCharLiteral (@expr1073745077 mStr@var1319 , '\'' , "" ) &&@expr1073745078 mStr@var1319 .@expr1073745079 length (@expr1073745080 ) ==@expr1073745081 3 ) ) ;
711: }
712:
713: bool isCMultiChar ( ) const {
714: return (@expr3258 (@expr3258 (@expr3258 mTokType@var1323 ==@expr1073745085 eChar ) &&@expr1073745086 isPrefixStringCharLiteral (@expr1073745087 mStr@var1319 , '\'' , "" ) ) &&@expr1073745088
715: (@expr3258 mStr@var1319 .@expr1073745090 length (@expr1073745091 ) >@expr1073745092 3 ) ) ;
716: }
717:
|
733:
734: bool isTemplateArg ( ) const {
735: return getFlag (@expr1073745093 fIsTemplateArg ) ;
736: }
737: void isTemplateArg ( const bool value@var1178 ) {
738: setFlag (@expr1073745094 fIsTemplateArg , value@var1178 ) ;
739: }
740:
741: template < unsigned long count >
742: static const Token * findsimplematch ( const Token * const startTok@var1179 , const char ( & pattern@var1180 ) [ count ] ) {
743: return findsimplematch (@expr1073745096 startTok@var1179 , pattern@var1180 , count@expr1073745095 -@expr1073745097 1 ) ;
744: }
745: static const Token * findsimplematch ( const Token * const startTok@var1181 , const char pattern@var1182 [ ] , unsigned long pattern_len@var1183 ) ;
746:
747: template < unsigned long count >
748: static const Token * findsimplematch ( const Token * const startTok@var1184 , const char ( & pattern@var1185 ) [ count ] , const Token * const end@var1186 ) {
749: return findsimplematch (@expr1073745099 startTok@var1184 , pattern@var1185 , count@expr1073745098 -@expr1073745100 1 , end@var1186 ) ;
750: }
751: static const Token * findsimplematch ( const Token * const startTok@var1187 , const char pattern@var1188 [ ] , unsigned long pattern_len@var1189 , const Token * const end@var1190 ) ;
752:
753: static const Token * findmatch ( const Token * const startTok@var1191 , const char pattern@var1192 [ ] , const int varId@var1193 = 0 ) ;
754: static const Token * findmatch ( const Token * const startTok@var1194 , const char pattern@var1195 [ ] , const Token * const end@var1196 , const int varId@var1197 = 0 ) ;
755:
756: template < unsigned long count >
757: static Token * findsimplematch ( Token * const startTok@var1198 , const char ( & pattern@var1199 ) [ count ] ) {
758: return findsimplematch (@expr1073745102 startTok@var1198 , pattern@var1199 , count@expr1073745101 -@expr1073745103 1 ) ;
759: }
760: static Token * findsimplematch ( Token * const startTok@var1200 , const char pattern@var1201 [ ] , unsigned long pattern_len@var1202 ) {
761: return const_cast < Token *@expr3280 > (@expr1073745105 findsimplematch (@expr1073745106 const_cast < const Token *@expr3280 > (@expr1073745108 startTok@var1200 ) , pattern@var1201 , pattern_len@var1202 ) ) ;
762: }
763: template < unsigned long count >
764: static Token * findsimplematch ( Token * const startTok@var1203 , const char ( & pattern@var1204 ) [ count ] , const Token * const end@var1205 ) {
765: return findsimplematch (@expr1073745110 startTok@var1203 , pattern@var1204 , count@expr1073745109 -@expr1073745111 1 , end@var1205 ) ;
766: }
767: static Token * findsimplematch ( Token * const startTok@var1206 , const char pattern@var1207 [ ] , unsigned long pattern_len@var1208 , const Token * const end@var1209 ) {
768: return const_cast < Token *@expr3288 > (@expr1073745113 findsimplematch (@expr1073745114 const_cast < const Token *@expr3288 > (@expr1073745116 startTok@var1206 ) , pattern@var1207 , pattern_len@var1208 , end@var1209 ) ) ;
769: }
770:
771: static Token * findmatch ( Token * const startTok@var1210 , const char pattern@var1211 [ ] , const int varId@var1212 = 0 ) {
772: return const_cast < Token *@expr3293 > (@expr1073745118 findmatch (@expr1073745119 const_cast < const Token *@expr3293 > (@expr1073745121 startTok@var1210 ) , pattern@var1211 , varId@var1212 ) ) ;
773: }
774: static Token * findmatch ( Token * const startTok@var1213 , const char pattern@var1214 [ ] , const Token * const end@var1215 , const int varId@var1216 = 0 ) {
775: return const_cast < Token *@expr3298 > (@expr1073745123 findmatch (@expr1073745124 const_cast < const Token *@expr3298 > (@expr1073745126 startTok@var1213 ) , pattern@var1214 , end@var1215 , varId@var1216 ) ) ;
776: }
777:
|
791:
792: static int multiCompare ( const Token * tok@var1217 , const char * haystack@var1218 , int varid@var1219 ) ;
793:
794: int fileIndex ( ) const {
795: return mImpl@var1325 .@expr1073745127 mFileIndex@var1361 ;
796: }
797: void fileIndex ( int indexOfFile@var1220 ) {
798: mImpl@var1325 .@expr1073745128 mFileIndex@var1361 =@expr1073745129 indexOfFile@var1220 ;
799: }
800:
801: int linenr ( ) const {
802: return mImpl@var1325 .@expr1073745130 mLineNumber@var1362 ;
803: }
804: void linenr ( int lineNumber@var1221 ) {
805: mImpl@var1325 .@expr1073745131 mLineNumber@var1362 =@expr1073745132 lineNumber@var1221 ;
806: }
807:
808: int column ( ) const {
809: return mImpl@var1325 .@expr1073745133 mColumn@var1363 ;
810: }
811: void column ( int c@var1222 ) {
812: mImpl@var1325 .@expr1073745134 mColumn@var1363 =@expr1073745135 c@var1222 ;
813: }
814:
815: Token * next ( ) const {
816: return mNext@var1320 ;
817: }
818:
|
826:
827: static void eraseTokens ( Token * begin@var1223 , const Token * end@var1224 ) ;
828:
|
836:
837: Token * insertToken ( const std :: string & tokenStr@var1225 , const std :: string & originalNameStr@var1226 = emptyString@var1 , bool prepend@var1227 = false ) ;
838:
839: Token * insertTokenBefore ( const std :: string & tokenStr@var1228 , const std :: string & originalNameStr@var1229 = emptyString@var1 )
840: {
841: return insertToken (@expr1073745136 tokenStr@var1228 , originalNameStr@var1229 , true ) ;
842: }
843:
844: Token * previous ( ) const {
845: return mPrevious@var1321 ;
846: }
847:
848:
849: int varId ( ) const {
850: return mImpl@var1325 .@expr1073745137 mVarId@var1356 ;
851: }
852: void varId ( int id@var1230 ) {
853: mImpl@var1325 .@expr1073745138 mVarId@var1356 =@expr1073745139 id@var1230 ;
854: if (@expr1073745140 id@var1230 !=@expr1073745141 0 ) {
855: tokType (@expr1073745142 eVariable ) ;
856: isStandardType (@expr1073745143 false ) ;
857: } else {
858: update_property_info (@expr1073745144 ) ;
859: }
860: }
861:
862: int exprId ( ) const {
863: if (@expr1073745145 mImpl@var1325 .@expr3322 mExprId@var1364 ) {
864: return mImpl@var1325 .@expr3322 mExprId@var1364 ; }
865: return mImpl@var1325 .@expr1073745148 mVarId@var1356 ;
866: }
867: void exprId ( int id@var1231 ) {
868: mImpl@var1325 .@expr1073745149 mExprId@var1364 =@expr1073745150 id@var1231 ;
869: }
870:
|
876:
877: void printOut ( const char * title@var1232 = nullptr ) const ;
878:
|
886:
887: void printOut ( const char * title@var1233 , const std :: vector < std :: string > & fileNames@var1234 ) const ;
888:
|
891:
892: void printLines ( int lines@var1235 = 5 ) const ;
893:
|
900:
901: static void replace ( Token * replaceThis@var1236 , Token * start@var1237 , Token * end@var1238 ) ;
902:
903: struct stringifyOptions {
904: bool varid@var1239 ; varid@var1239 = false ;
905: bool exprid@var1240 ; exprid@var1240 = false ;
906: bool idtype@var1241 ; idtype@var1241 = false ;
907: bool attributes@var1242 ; attributes@var1242 = false ;
908: bool macro@var1243 ; macro@var1243 = false ;
909: bool linenumbers@var1244 ; linenumbers@var1244 = false ;
910: bool linebreaks@var1245 ; linebreaks@var1245 = false ;
911: bool files@var1246 ; files@var1246 = false ;
912: static stringifyOptions forDebug ( ) {
913: stringifyOptions options@var1247 ;
914: options@var1247 .@expr1073745151 attributes@var1248 =@expr1073745152 true ;
915: options@var1247 .@expr1073745153 macro@var1249 =@expr1073745154 true ;
916: options@var1247 .@expr1073745155 linenumbers@var1250 =@expr1073745156 true ;
917: options@var1247 .@expr1073745157 linebreaks@var1251 =@expr1073745158 true ;
918: options@var1247 .@expr1073745159 files@var1252 =@expr1073745160 true ;
919: return options@var1247 ;
920: }
921: static stringifyOptions forDebugVarId ( ) {
922: stringifyOptions options@var1253 ; options@var1253 =@expr1073745161 forDebug (@expr1073745162 ) ;
923: options@var1253 .@expr1073745163 varid@var1254 =@expr1073745164 true ;
924: return options@var1253 ;
925: }
926: static stringifyOptions forDebugExprId ( ) {
927: stringifyOptions options@var1255 ; options@var1255 =@expr1073745165 forDebug (@expr1073745166 ) ;
928: options@var1255 .@expr1073745167 exprid@var1256 =@expr1073745168 true ;
929: return options@var1255 ;
930: }
931: static stringifyOptions forPrintOut ( ) {
932: stringifyOptions options@var1257 ; options@var1257 =@expr1073745169 forDebug (@expr1073745170 ) ;
933: options@var1257 .@expr1073745171 exprid@var1258 =@expr1073745172 true ;
934: options@var1257 .@expr1073745173 varid@var1259 =@expr1073745174 true ;
935: options@var1257 .@expr1073745175 idtype@var1260 =@expr1073745176 true ;
936: return options@var1257 ;
937: }
938: } ;
939:
940: std :: string stringify ( const stringifyOptions & options@var1261 ) const ;
941:
|
947:
948: std :: string stringify ( bool varid@var1262 , bool attributes@var1263 , bool macro@var1264 ) const ;
949:
950: std :: string stringifyList ( const stringifyOptions & options@var1265 , const std :: vector < std :: string > * fileNames@var1266 = nullptr , const Token * end@var1267 = nullptr ) const ;
951: std :: string stringifyList ( const Token * end@var1268 , bool attributes@var1269 = true ) const ;
952: std :: string stringifyList ( bool varid@var1270 = false ) const ;
953:
|
964:
965: std :: string stringifyList ( bool varid@var1271 , bool attributes@var1272 , bool linenumbers@var1273 , bool linebreaks@var1274 , bool files@var1275 , const std :: vector < std :: string > * fileNames@var1276 = nullptr , const Token * end@var1277 = nullptr ) const ;
966:
|
974:
975: void deleteThis ( ) ;
976:
|
981:
982: void link ( Token * linkToToken@var1278 ) {
983: mLink@var1322 =@expr1073745177 linkToToken@var1278 ;
984: if (@expr1073745178 mStr@var1319 ==@expr1073745179 "<" ||@expr1073745180 mStr@var1319 ==@expr1073745181 ">" ) {
985: update_property_info (@expr1073745182 ) ; }
986: }
987:
|
996:
997: Token * link ( ) const {
998: return mLink@var1322 ;
999: }
1000:
|
1004:
1005: void scope ( const Scope * s@var1279 ) {
1006: mImpl@var1325 .@expr1073745183 mScope@var1365 =@expr1073745184 s@var1279 ;
1007: }
1008:
|
1011:
1012: const Scope * scope ( ) const {
1013: return mImpl@var1325 .@expr1073745185 mScope@var1365 ;
1014: }
1015:
|
1019:
1020: void function ( const Function * f@var1280 ) ;
1021:
|
1024:
1025: const Function * function ( ) const {
1026: return mTokType@var1323 ==@expr1073745186 eFunction ||@expr1073745187 mTokType@var1323 ==@expr1073745188 eLambda ?@expr1073745189 mImpl@var1325 .@expr1073745190 mFunction@var1366 :@expr1073745191 nullptr ;
1027: }
1028:
|
1032:
1033: void variable ( const Variable * v@var1281 ) {
1034: mImpl@var1325 .@expr1073745192 mVariable@var1367 =@expr1073745193 v@var1281 ;
1035: if (@expr1073745194 v@var1281 ||@expr1073745195 mImpl@var1325 .@expr1073745196 mVarId@var1356 ) {
1036: tokType (@expr1073745197 eVariable ) ; }
1037: else { if (@expr1073745198 mTokType@var1323 ==@expr1073745199 eVariable ) {
1038: tokType (@expr1073745200 eName ) ; } }
1039: }
1040:
|
1043:
1044: const Variable * variable ( ) const {
1045: return mTokType@var1323 ==@expr1073745201 eVariable ?@expr1073745202 mImpl@var1325 .@expr1073745203 mVariable@var1367 :@expr1073745204 nullptr ;
1046: }
1047:
|
1051:
1052: void type ( const :: Type * t@var1282 ) ;
1053:
|
1056:
1057: const :: Type * type ( ) const {
1058: return mTokType@var1323 ==@expr1073745205 eType ?@expr1073745206 mImpl@var1325 .@expr1073745207 mType@var1368 :@expr1073745208 nullptr ;
1059: }
1060:
1061: static const :: Type * typeOf ( const Token * tok@var1283 , const Token * * typeTok@var1284 = nullptr ) ;
1062:
1063: static std :: pair < const Token * , const Token * > typeDecl ( const Token * tok@var1285 ) ;
1064:
1065: static std :: string typeStr ( const Token * tok@var1286 ) ;
1066:
|
1069:
1070: const Enumerator * enumerator ( ) const {
1071: return mTokType@var1323 ==@expr1073745209 eEnumerator ?@expr1073745210 mImpl@var1325 .@expr1073745211 mEnumerator@var1369 :@expr1073745212 nullptr ;
1072: }
1073:
|
1077:
1078: void enumerator ( const Enumerator * e@var1287 ) {
1079: mImpl@var1325 .@expr1073745213 mEnumerator@var1369 =@expr1073745214 e@var1287 ;
1080: if (@expr1073745215 e@var1287 ) {
1081: tokType (@expr1073745216 eEnumerator ) ; }
1082: else { if (@expr1073745217 mTokType@var1323 ==@expr1073745218 eEnumerator ) {
1083: tokType (@expr1073745219 eName ) ; } }
1084: }
1085:
|
1088:
1089: static void createMutualLinks ( Token * begin@var1288 , Token * end@var1289 ) ;
1090:
|
1096:
1097: std :: string strValue ( ) const ;
1098:
|
1105:
1106: static void move ( Token * srcStart@var1290 , Token * srcEnd@var1291 , Token * newLocation@var1292 ) ;
1107:
1108:
1109: int progressValue ( ) const {
1110: return mImpl@var1325 .@expr1073745220 mProgressValue@var1370 ;
1111: }
1112:
1113:
1114: static void assignProgressValues ( Token * tok@var1293 ) ;
1115:
|
1120:
1121: Token * nextArgument ( ) const ;
1122:
|
1127:
1128: Token * nextArgumentBeforeCreateLinks2 ( ) const ;
1129:
|
1134:
1135: Token * nextTemplateArgument ( ) const ;
1136:
|
1141:
1142: const Token * findClosingBracket ( ) const ;
1143: Token * findClosingBracket ( ) ;
1144:
1145: const Token * findOpeningBracket ( ) const ;
1146: Token * findOpeningBracket ( ) ;
1147:
|
1150:
1151: const std :: string & originalName ( ) const {
1152: return mImpl@var1325 .@expr3397 mOriginalName@var1371 ?@expr1073745222 *@expr1073745223 mImpl@var1325 .@expr3397 mOriginalName@var1371 :@expr1073745225 emptyString@var1 ;
1153: }
1154:
1155: const std :: list < ValueFlow :: Value > & values ( ) const {
1156: return mImpl@var1325 .@expr3402 mValues@var1344 ?@expr1073745227 *@expr1073745228 mImpl@var1325 .@expr3402 mValues@var1344 :@expr1073745230 TokenImpl ::@expr1073745231 mEmptyValueList@var1091 ;
1157: }
1158:
|
1161:
1162: template < typename T >
1163: void originalName ( T && name@var1294 ) {
1164: if (@expr1073745232 !@expr1073745233 mImpl@var1325 .@expr3410 mOriginalName@var1371 ) {
1165: mImpl@var1325 .@expr3410 mOriginalName@var1371 =@expr1073745236 new std ::@expr1073745237 string (@expr1073745238 name@var1294 ) ; }
1166: else {
1167: *@expr1073745239 mImpl@var1325 .@expr3410 mOriginalName@var1371 =@expr1073745241 name@var1294 ; }
1168: }
1169:
1170: bool hasKnownIntValue ( ) const ;
1171: bool hasKnownValue ( ) const ;
1172: bool hasKnownValue ( ValueFlow :: Value :: ValueType t@var1295 ) const ;
1173: bool hasKnownSymbolicValue ( const Token * tok@var1296 ) const ;
1174:
1175: const ValueFlow :: Value * getKnownValue ( ValueFlow :: Value :: ValueType t@var1297 ) const ;
1176: long long getKnownIntValue ( ) const {
1177: return mImpl@var1325 .@expr1073745243 mValues@var1344 .@expr1073745244 front (@expr1073745245 ) .@expr1073745246 intvalue@expr1073745242 ;
1178: }
1179:
1180: const ValueFlow :: Value * getValue ( const long long val@var1298 ) const ;
1181:
1182: const ValueFlow :: Value * getMaxValue ( bool condition@var1299 , long long path@var1300 = 0 ) const ;
1183:
1184: const ValueFlow :: Value * getMovedValue ( ) const ;
1185:
1186: const ValueFlow :: Value * getValueLE ( const long long val@var1301 , const Settings * settings@var1302 ) const ;
1187: const ValueFlow :: Value * getValueGE ( const long long val@var1303 , const Settings * settings@var1304 ) const ;
1188:
1189: const ValueFlow :: Value * getInvalidValue ( const Token * ftok@var1305 , int argnr@var1306 , const Settings * settings@var1307 ) const ;
1190:
1191: const ValueFlow :: Value * getContainerSizeValue ( const long long val@var1308 ) const ;
1192:
1193: const Token * getValueTokenMaxStrLength ( ) const ;
1194: const Token * getValueTokenMinStrSize ( const Settings * settings@var1309 ) const ;
1195:
1196:
1197: bool addValue ( const ValueFlow :: Value & value@var1310 ) ;
1198:
1199: void removeValues ( std :: function < bool ( const ValueFlow :: Value & ) > pred@var1311 ) {
1200: if (@expr1073745247 mImpl@var1325 .@expr3424 mValues@var1344 ) {
1201: mImpl@var1325 .@expr3424 mValues@var1344 .@expr1073745250 remove_if (@expr1073745251 pred@var1311 ) ; }
1202: }
1203:
1204: int index ( ) const {
1205: return mImpl@var1325 .@expr1073745252 mIndex@var1372 ;
1206: }
1207:
1208: void assignIndexes ( ) ;
1209:
1210: private:
1211:
1212: void next ( Token * nextToken@var1312 ) {
1213: mNext@var1320 =@expr1073745253 nextToken@var1312 ;
1214: }
1215: void previous ( Token * previousToken@var1313 ) {
1216: mPrevious@var1321 =@expr1073745254 previousToken@var1313 ;
1217: }
1218:
1219:
1220: void takeData ( Token * fromToken@var1314 ) ;
1221:
|
1226:
1227: static bool firstWordEquals ( const char * str@var1315 , const char * word@var1316 ) ;
1228:
|
1233:
1234: static const char * chrInFirstWord ( const char * str@var1317 , char c@var1318 ) ;
1235:
1236: std :: string mStr@var1319 ;
1237:
1238: Token * mNext@var1320 ;
1239: Token * mPrevious@var1321 ;
1240: Token * mLink@var1322 ;
1241:
1242: enum Anonymous3 : uint64_t {
1243: fIsUnsigned = ( 1 << 0 ) ,
1244: fIsSigned = ( 1 << 1 ) ,
1245: fIsPointerCompare = ( 1 << 2 ) ,
1246: fIsLong = ( 1 << 3 ) ,
1247: fIsStandardType = ( 1 << 4 ) ,
1248: fIsExpandedMacro = ( 1 << 5 ) ,
1249: fIsCast = ( 1 << 6 ) ,
1250: fIsAttributeConstructor = ( 1 << 7 ) ,
1251: fIsAttributeDestructor = ( 1 << 8 ) ,
1252: fIsAttributeUnused = ( 1 << 9 ) ,
1253: fIsAttributePure = ( 1 << 10 ) ,
1254: fIsAttributeConst = ( 1 << 11 ) ,
1255: fIsAttributeNoreturn = ( 1 << 12 ) ,
1256: fIsAttributeNothrow = ( 1 << 13 ) ,
1257: fIsAttributeUsed = ( 1 << 14 ) ,
1258: fIsAttributePacked = ( 1 << 15 ) ,
1259: fIsAttributeMaybeUnused = ( 1 << 16 ) ,
1260: fIsControlFlowKeyword = ( 1 << 17 ) ,
1261: fIsOperatorKeyword = ( 1 << 18 ) ,
1262: fIsComplex = ( 1 << 19 ) ,
1263: fIsEnumType = ( 1 << 20 ) ,
1264: fIsName = ( 1 << 21 ) ,
1265: fIsLiteral = ( 1 << 22 ) ,
1266: fIsTemplateArg = ( 1 << 23 ) ,
1267: fIsAttributeNodiscard = ( 1 << 24 ) ,
1268: fAtAddress = ( 1 << 25 ) ,
1269: fIncompleteVar = ( 1 << 26 ) ,
1270: fConstexpr = ( 1 << 27 ) ,
1271: fExternC = ( 1 << 28 ) ,
1272: fIsSplitVarDeclComma = ( 1 << 29 ) ,
1273: fIsSplitVarDeclEq = ( 1 << 30 ) ,
1274: fIsImplicitInt = ( 1U << 31 ) ,
1275: fIsInline = ( 1ULL << 32 ) ,
1276: fIsTemplate = ( 1ULL << 33 ) ,
1277: fIsSimplifedScope = ( 1ULL << 34 ) ,
1278: fIsRemovedVoidParameter = ( 1ULL << 35 ) ,
1279: fIsIncompleteConstant = ( 1ULL << 36 ) ,
1280: } ;
1281:
1282: Token :: Type mTokType@var1323 ;
1283:
1284: uint64_t mFlags@var1324 ;
1285:
1286: TokenImpl * mImpl@var1325 ;
1287:
|
1292:
1293: bool getFlag ( uint64_t flag_@var1326 ) const {
1294: return (@expr3431 (@expr3431 mFlags@var1324 &@expr1073745257 flag_@var1326 ) !=@expr1073745258 0 ) ;
1295: }
1296:
|
1301:
1302: void setFlag ( uint64_t flag_@var1327 , bool state_@var1328 ) {
1303: mFlags@var1324 =@expr1073745259 state_@var1328 ?@expr1073745260 mFlags@var1324 |@expr1073745261 flag_@var1327 :@expr1073745262 mFlags@var1324 &@expr1073745263 ~@expr1073745264 flag_@var1327 ;
1304: }
1305:
1306:
1307:
1308: void update_property_info ( ) ;
1309:
1310:
1311: void update_property_isStandardType ( ) ;
1312:
1313:
1314: void update_property_char_string_literal ( ) ;
1315:
1316:
1317: void astStringVerboseRecursive ( std :: string & ret@var1329 , const int indent1@var1330 = 0 , const int indent2@var1331 = 0 ) const ;
1318:
1319: public:
1320: void astOperand1 ( Token * tok@var1332 ) ;
1321: void astOperand2 ( Token * tok@var1333 ) ;
1322: void astParent ( Token * tok@var1334 ) ;
1323:
1324: Token * astOperand1 ( ) {
1325: return mImpl@var1325 .@expr1073745265 mAstOperand1@var1335 ;
1326: }
1327: const Token * astOperand1 ( ) const {
1328: return mImpl@var1325 .@expr1073745266 mAstOperand1@var1335 ;
1329: }
1330: Token * astOperand2 ( ) {
1331: return mImpl@var1325 .@expr1073745267 mAstOperand2@var1336 ;
1332: }
1333: const Token * astOperand2 ( ) const {
1334: return mImpl@var1325 .@expr1073745268 mAstOperand2@var1336 ;
1335: }
1336: Token * astParent ( ) {
1337: return mImpl@var1325 .@expr1073745269 mAstParent@var1337 ;
1338: }
1339: const Token * astParent ( ) const {
1340: return mImpl@var1325 .@expr1073745270 mAstParent@var1337 ;
1341: }
1342: Token * astSibling ( ) {
1343: if (@expr1073745271 !@expr1073745272 astParent (@expr3449 ) ) {
1344: return nullptr ; }
1345: if (@expr1073745274 this@expr3451 ==@expr1073745276 astParent (@expr3449 ) .@expr3454 astOperand1 (@expr3455 ) ) {
1346: return astParent (@expr3449 ) .@expr3457 astOperand2 (@expr3458 ) ; }
1347: else { if (@expr1073745283 this@expr3451 ==@expr1073745284 astParent (@expr3449 ) .@expr3457 astOperand2 (@expr3458 ) ) {
1348: return astParent (@expr3449 ) .@expr3454 astOperand1 (@expr3455 ) ; } }
1349: return nullptr ;
1350:
1351: }
1352: const Token * astSibling ( ) const {
1353: if (@expr1073745291 !@expr1073745292 astParent (@expr3469 ) ) {
1354: return nullptr ; }
1355: if (@expr1073745294 this@expr3471 ==@expr1073745296 astParent (@expr3469 ) .@expr3474 astOperand1 (@expr3475 ) ) {
1356: return astParent (@expr3469 ) .@expr3477 astOperand2 (@expr3478 ) ; }
1357: else { if (@expr1073745303 this@expr3471 ==@expr1073745304 astParent (@expr3469 ) .@expr3477 astOperand2 (@expr3478 ) ) {
1358: return astParent (@expr3469 ) .@expr3474 astOperand1 (@expr3475 ) ; } }
1359: return nullptr ;
1360:
1361: }
1362: Token * astTop ( ) {
1363: Token * ret@var1338 ; ret@var1338 =@expr1073745311 this@expr1073745312 ;
1364: while (@expr1073745313 ret@var1338 .@expr3490 mImpl@var1339 .@expr3491 mAstParent@var1340 ) {
1365: ret@var1338 =@expr1073745316 ret@var1338 .@expr3490 mImpl@var1339 .@expr3491 mAstParent@var1340 ; }
1366: return ret@var1338 ;
1367: }
1368:
1369: const Token * astTop ( ) const {
1370: const Token * ret@var1341 ; ret@var1341 =@expr1073745319 this@expr1073745320 ;
1371: while (@expr1073745321 ret@var1341 .@expr3498 mImpl@var1342 .@expr3499 mAstParent@var1343 ) {
1372: ret@var1341 =@expr1073745324 ret@var1341 .@expr3498 mImpl@var1342 .@expr3499 mAstParent@var1343 ; }
1373: return ret@var1341 ;
1374: }
1375:
1376: std :: pair < const Token * , const Token * > findExpressionStartEndTokens ( ) const ;
1377:
|
1384:
1385: bool isCalculation ( ) const ;
1386:
1387: void clearAst ( ) {
1388: mImpl@var1325 .@expr1073745327 mAstOperand1@var1335 =@expr1073745328 mImpl@var1325 .@expr1073745329 mAstOperand2@var1336 =@expr1073745330 mImpl@var1325 .@expr1073745331 mAstParent@var1337 =@expr1073745332 nullptr ;
1389: }
1390:
1391: void clearValueFlow ( ) {
1392: delete mImpl@var1325 .@expr3509 mValues@var1344 ;
1393: mImpl@var1325 .@expr3509 mValues@var1344 =@expr1073745335 nullptr ;
1394: }
1395:
1396: std :: string astString ( const char * sep@var1345 = "" ) const {
1397: std ::@expr1073745336 string ret@var1346 ;
1398: if (@expr1073745337 mImpl@var1325 .@expr3514 mAstOperand1@var1335 ) {
1399: ret@var1346 =@expr1073745339 mImpl@var1325 .@expr3514 mAstOperand1@var1335 .@expr1073745341 astString (@expr1073745342 sep@var1345 ) ; }
1400: if (@expr1073745343 mImpl@var1325 .@expr3520 mAstOperand2@var1336 ) {
1401: ret@var1346 +=@expr1073745345 mImpl@var1325 .@expr3520 mAstOperand2@var1336 .@expr1073745347 astString (@expr1073745348 sep@var1345 ) ; }
1402: return ret@var1346 +@expr1073745349 sep@var1345 +@expr1073745350 mStr@var1319 ;
1403: }
1404:
1405: std :: string astStringVerbose ( ) const ;
1406:
1407: std :: string astStringZ3 ( ) const ;
1408:
1409: std :: string expressionString ( ) const ;
1410:
1411: void printAst ( bool verbose@var1347 , bool xml@var1348 , const std :: vector < std :: string > & fileNames@var1349 , std :: ostream & out@var1350 ) const ;
1412:
1413: void printValueFlow ( bool xml@var1351 , std :: ostream & out@var1352 ) const ;
1414:
1415: void scopeInfo ( std :: shared_ptr < ScopeInfo2 > newScopeInfo@var1353 ) ;
1416: std :: shared_ptr < ScopeInfo2 > scopeInfo ( ) const ;
1417:
1418: void setCpp11init ( bool cpp11init@var1354 ) const {
1419: mImpl@var1325 .@expr1073745351 mCpp11init@var1355 =@expr1073745352 cpp11init@var1354 ?@expr1073745353 TokenImpl ::@expr3530 Cpp11init ::@expr1073745355 CPP11INIT :@expr1073745356 TokenImpl ::@expr3530 Cpp11init ::@expr1073745358 NOINIT ;
1420: }
1421: TokenImpl :: Cpp11init isCpp11init ( ) const {
1422: return mImpl@var1325 .@expr1073745359 mCpp11init@var1355 ;
1423: }
1424: } ;
1425:
1426: Token * findTypeEnd ( Token * tok@var1373 ) ;
1427: const Token * findTypeEnd ( const Token * tok@var1374 ) ;
1428: Token * findLambdaEndScope ( Token * tok@var1375 ) ;
1429: const Token * findLambdaEndScope ( const Token * tok@var1376 ) ;

##file cppcheck-2.8/lib/symboldatabase.h

1:
|
39:
40: namespace cppcheck {
41: class Platform ;
42: }
43:
44: class ErrorLogger ;
45: class Function ;
46: class Scope ;
47: class Settings ;
48: class SymbolDatabase ;
49: class Tokenizer ;
50: class ValueType ;
51:
|
54:
55: enum class AccessControl { Public , Protected , Private , Global , Namespace , Argument , Local , Throw } ;
56:
|
59:
60: struct Dimension {
61: Dimension ( ) : tok@var1377 ( nullptr ) , num@var1378 ( 0 ) , known@var1379 ( true ) { }
62:
63: const Token * tok@var1377 ;
64: long long num@var1378 ;
65: bool known@var1379 ;
66: } ;
67:
68:
69: class Type {
70: public:
71: const Token * classDef@var1380 ;
72: const Scope * classScope@var1381 ;
73: const Scope * enclosingScope@var1382 ;
74: enum class NeedInitialization {
75: Unknown , True , False
76: } ; enum NeedInitialization needInitialization@var1383 ;
77:
78: class BaseInfo {
79: public:
80: BaseInfo ( ) :
81: type@var1385 ( nullptr ) , nameTok@var1386 ( nullptr ) , access@var1387 ( AccessControl :: Public ) , isVirtual@var1388 ( false ) { }
82:
83: std :: string name@var1384 ;
84: const Type * type@var1385 ;
85: const Token * nameTok@var1386 ;
86: AccessControl access@var1387 ;
87: bool isVirtual@var1388 ;
88:
89: bool operator< ( const BaseInfo & rhs@var1389 ) const {
90: return this@expr1073745360 .@expr1073745361 type@var1385 <@expr1073745362 rhs@var1389 .@expr1073745363 type@var1390 ;
91: }
92: } ;
93:
94: struct FriendInfo {
95: FriendInfo ( ) :
96: nameStart@var1391 ( nullptr ) , nameEnd@var1392 ( nullptr ) , type@var1393 ( nullptr ) { }
97:
98: const Token * nameStart@var1391 ;
99: const Token * nameEnd@var1392 ;
100: const Type * type@var1393 ;
101: } ;
102:
103: std :: vector < BaseInfo > derivedFrom@var1394 ;
104: std :: vector < FriendInfo > friendList@var1395 ;
105:
106: const Token * typeStart@var1396 ;
107: const Token * typeEnd@var1397 ;
108: long long sizeOf@var1398 ;
109:
110: Type ( const Token * classDef_@var1399 = nullptr , const Scope * classScope_@var1400 = nullptr , const Scope * enclosingScope_@var1401 = nullptr ) :
111: classDef@var1380 ( classDef_@var1399 ) ,
112: classScope@var1381 ( classScope_@var1400 ) ,
113: enclosingScope@var1382 ( enclosingScope_@var1401 ) ,
114: needInitialization@var1383 ( NeedInitialization :: Unknown ) ,
115: typeStart@var1396 ( nullptr ) ,
116: typeEnd@var1397 ( nullptr ) ,
117: sizeOf@var1398 ( 0 ) {
118: if (@expr1073745364 classDef_@var1399 &&@expr1073745365 classDef_@var1399 .@expr3542 str (@expr3543 ) ==@expr1073745368 "enum" ) {
119: needInitialization@var1383 =@expr1073745369 NeedInitialization ::@expr1073745370 True ; }
120: else { if (@expr1073745371 classDef_@var1399 &&@expr1073745372 classDef_@var1399 .@expr3542 str (@expr3543 ) ==@expr1073745375 "using" ) {
121: typeStart@var1396 =@expr1073745376 classDef@var1380 .@expr1073745377 tokAt (@expr1073745378 3 ) ;
122: typeEnd@var1397 =@expr1073745379 typeStart@var1396 ;
123: while (@expr1073745380 typeEnd@var1397 .@expr3557 next (@expr3558 ) &&@expr1073745383 typeEnd@var1397 .@expr3557 next (@expr3558 ) .@expr1073745386 str (@expr1073745387 ) !=@expr1073745388 ";" ) {
124: typeEnd@var1397 =@expr1073745389 typeEnd@var1397 .@expr3557 next (@expr3558 ) ; }
125: } }
126: }
127:
128: const std :: string & name ( ) const ;
129:
130: const std :: string & type ( ) const {
131: return classDef@var1380 ?@expr1073745392 classDef@var1380 .@expr1073745393 str (@expr1073745394 ) :@expr1073745395 emptyString@var1 ;
132: }
133:
134: bool isClassType ( ) const ;
135: bool isEnumType ( ) const ;
136: bool isStructType ( ) const ;
137: bool isUnionType ( ) const ;
138:
139: bool isTypeAlias ( ) const {
140: return classDef@var1380 &&@expr1073745396 classDef@var1380 .@expr1073745397 str (@expr1073745398 ) ==@expr1073745399 "using" ;
141: }
142:
143: const Token * initBaseInfo ( const Token * tok@var1402 , const Token * tok1@var1403 ) ;
144:
145: const Function * getFunction ( const std :: string & funcName@var1404 ) const ;
146:
|
151:
152: bool hasCircularDependencies ( std :: set < BaseInfo > * ancestors@var1405 = nullptr ) const ;
153:
|
158:
159: bool findDependency ( const Type * ancestor@var1406 ) const ;
160:
161: bool isDerivedFrom ( const std :: string & ancestor@var1407 ) const ;
162: } ;
163:
164: class Enumerator {
165: public:
166: explicit Enumerator ( const Scope * scope_@var1408 ) : scope@var1409 ( scope_@var1408 ) , name@var1410 ( nullptr ) , value@var1411 ( 0 ) , start@var1412 ( nullptr ) , end@var1413 ( nullptr ) , value_known@var1414 ( false ) { }
167: const Scope * scope@var1409 ;
168: const Token * name@var1410 ;
169: long long value@var1411 ;
170: const Token * start@var1412 ;
171: const Token * end@var1413 ;
172: bool value_known@var1414 ;
173: } ;
174:
175:
176: class Variable {
177:
178: enum Anonymous4 {
179: fIsMutable = ( 1 << 0 ) ,
180: fIsStatic = ( 1 << 1 ) ,
181: fIsConst = ( 1 << 2 ) ,
182: fIsExtern = ( 1 << 3 ) ,
183: fIsClass = ( 1 << 4 ) ,
184: fIsArray = ( 1 << 5 ) ,
185: fIsPointer = ( 1 << 6 ) ,
186: fIsReference = ( 1 << 7 ) ,
187: fIsRValueRef = ( 1 << 8 ) ,
188: fHasDefault = ( 1 << 9 ) ,
189: fIsStlType = ( 1 << 10 ) ,
190: fIsStlString = ( 1 << 11 ) ,
191: fIsFloatType = ( 1 << 12 ) ,
192: fIsVolatile = ( 1 << 13 ) ,
193: fIsSmartPointer = ( 1 << 14 ) ,
194: fIsMaybeUnused = ( 1 << 15 ) ,
195: fIsInit = ( 1 << 16 ) ,
196: } ;
197:
|
202:
203: bool getFlag ( unsigned int flag_@var1415 ) const {
204: return (@expr3576 (@expr3576 mFlags@var1451 &@expr1073745402 flag_@var1415 ) !=@expr1073745403 0 ) ;
205: }
206:
|
211:
212: void setFlag ( unsigned int flag_@var1416 , bool state_@var1417 ) {
213: mFlags@var1451 =@expr1073745404 state_@var1417 ?@expr1073745405 mFlags@var1451 |@expr1073745406 flag_@var1416 :@expr1073745407 mFlags@var1451 &@expr1073745408 ~@expr1073745409 flag_@var1416 ;
214: }
215:
|
221:
222: bool arrayDimensions ( const Settings * settings@var1418 , bool * isContainer@var1419 ) ;
223:
224: public:
225: Variable ( const Token * name_@var1420 , const Token * start_@var1421 , const Token * end_@var1422 ,
226: int index_@var1423 , AccessControl access_@var1424 , const Type * type_@var1425 ,
227: const Scope * scope_@var1426 , const Settings * settings@var1427 )
228: : mNameToken@var1446 ( name_@var1420 ) ,
229: mTypeStartToken@var1447 ( start_@var1421 ) ,
230: mTypeEndToken@var1448 ( end_@var1422 ) ,
231: mIndex@var1449 ( index_@var1423 ) ,
232: mAccess@var1450 ( access_@var1424 ) ,
233: mFlags@var1451 ( 0 ) ,
234: mType@var1452 ( type_@var1425 ) ,
235: mScope@var1453 ( scope_@var1426 ) ,
236: mValueType@var1454 ( nullptr ) {
237: evaluate (@expr1073745410 settings@var1427 ) ;
238: }
239:
240: Variable ( const Token * name_@var1428 , const std :: string & clangType@var1429 , const Token * typeStart@var1430 ,
241: const Token * typeEnd@var1431 , int index_@var1432 , AccessControl access_@var1433 ,
242: const Type * type_@var1434 , const Scope * scope_@var1435 ) ;
243:
244: Variable ( const Variable & var@var1436 , const Scope * scope@var1437 ) ;
245:
246: Variable ( const Variable & var@var1438 ) ;
247:
248: ~ Variable ( ) ;
249:
250: Variable & operator= ( const Variable & var@var1439 ) ;
251:
|
255:
256: const Token * nameToken ( ) const {
257: return mNameToken@var1446 ;
258: }
259:
|
267:
268: const Token * typeStartToken ( ) const {
269: return mTypeStartToken@var1447 ;
270: }
271:
|
279:
280: const Token * typeEndToken ( ) const {
281: return mTypeEndToken@var1448 ;
282: }
283:
|
290:
291: const Token * declEndToken ( ) const ;
292:
|
296:
297: const std :: string & name ( ) const {
298:
299: if (@expr1073745411 mNameToken@var1446 ) {
300: return mNameToken@var1446 .@expr1073745412 str (@expr1073745413 ) ; }
301:
302: return emptyString@var1 ;
303: }
304:
|
308:
309: int declarationId ( ) const {
310:
311: if (@expr1073745414 mNameToken@var1446 ) {
312: return mNameToken@var1446 .@expr1073745415 varId (@expr1073745416 ) ; }
313:
314: return 0 ;
315: }
316:
|
320:
321: int index ( ) const {
322: return mIndex@var1449 ;
323: }
324:
|
328:
329: bool isPublic ( ) const {
330: return mAccess@var1450 ==@expr1073745417 AccessControl ::@expr1073745418 Public ;
331: }
332:
|
336:
337: bool isProtected ( ) const {
338: return mAccess@var1450 ==@expr1073745419 AccessControl ::@expr1073745420 Protected ;
339: }
340:
|
344:
345: bool isPrivate ( ) const {
346: return mAccess@var1450 ==@expr1073745421 AccessControl ::@expr1073745422 Private ;
347: }
348:
|
352:
353: bool isGlobal ( ) const {
354: return mAccess@var1450 ==@expr1073745423 AccessControl ::@expr1073745424 Global ;
355: }
356:
|
360:
361: bool isNamespace ( ) const {
362: return mAccess@var1450 ==@expr1073745425 AccessControl ::@expr1073745426 Namespace ;
363: }
364:
|
368:
369: bool isArgument ( ) const {
370: return mAccess@var1450 ==@expr1073745427 AccessControl ::@expr1073745428 Argument ;
371: }
372:
|
376:
377: bool isLocal ( ) const {
378: return (@expr1073745430 mAccess@var1450 ==@expr1073745431 AccessControl ::@expr1073745432 Local@expr1073745429 ) &&@expr1073745433 !@expr1073745434 isExtern (@expr1073745435 ) ;
379: }
380:
|
384:
385: bool isMutable ( ) const {
386: return getFlag (@expr1073745436 fIsMutable ) ;
387: }
388:
|
392:
393: bool isVolatile ( ) const {
394: return getFlag (@expr1073745437 fIsVolatile ) ;
395: }
396:
|
400:
401: bool isStatic ( ) const {
402: return getFlag (@expr1073745438 fIsStatic ) ;
403: }
404:
|
408:
409: bool isExtern ( ) const {
410: return getFlag (@expr1073745439 fIsExtern ) ;
411: }
412:
|
416:
417: bool isConst ( ) const {
418: return getFlag (@expr1073745440 fIsConst ) ;
419: }
420:
|
424:
425: bool isThrow ( ) const {
426: return mAccess@var1450 ==@expr1073745441 AccessControl ::@expr1073745442 Throw ;
427: }
428:
|
432:
433: bool isClass ( ) const {
434: return getFlag (@expr1073745443 fIsClass ) ;
435: }
436:
|
440:
441: bool isArray ( ) const {
442: return getFlag (@expr1073745444 fIsArray ) &&@expr1073745445 !@expr1073745446 getFlag (@expr1073745447 fIsPointer ) ;
443: }
444:
|
448:
449: bool isPointer ( ) const {
450: return getFlag (@expr1073745448 fIsPointer ) ;
451: }
452:
|
456:
457: bool isPointerToArray ( ) const {
458: return isPointer (@expr1073745449 ) &&@expr1073745450 getFlag (@expr1073745451 fIsArray ) ;
459: }
460:
|
464:
465: bool isPointerArray ( ) const ;
466:
|
470:
471: bool isArrayOrPointer ( ) const {
472: return getFlag (@expr1073745452 fIsArray ) ||@expr1073745453 getFlag (@expr1073745454 fIsPointer ) ;
473: }
474:
|
478:
479: bool isReference ( ) const {
480: return getFlag (@expr1073745455 fIsReference ) ;
481: }
482:
|
486:
487: bool isRValueReference ( ) const {
488: return getFlag (@expr1073745456 fIsRValueRef ) ;
489: }
490:
|
494:
495: bool isUnsigned ( ) const ;
496:
|
500:
501: bool hasDefault ( ) const {
502: return getFlag (@expr1073745457 fHasDefault ) ;
503: }
504:
|
508:
509: bool isInit ( ) const {
510: return getFlag (@expr1073745458 fIsInit ) ;
511: }
512:
|
516:
517: const Type * type ( ) const {
518: return mType@var1452 ;
519: }
520:
|
524:
525: const Scope * typeScope ( ) const {
526: return mType@var1452 ?@expr1073745459 mType@var1452 .@expr1073745460 classScope@var1457 :@expr1073745461 nullptr ;
527: }
528:
|
532:
533: const Scope * scope ( ) const {
534: return mScope@var1453 ;
535: }
536:
|
540:
541: const std :: vector < Dimension > & dimensions ( ) const {
542: return mDimensions@var1455 ;
543: }
544:
|
548:
549: long long dimension ( int index_@var1440 ) const {
550: return mDimensions@var1455 [@expr1073745462 index_@var1440 ] .@expr1073745463 num@var1993 ;
551: }
552:
|
556:
557: bool dimensionKnown ( int index_@var1441 ) const {
558: return mDimensions@var1455 [@expr1073745464 index_@var1441 ] .@expr1073745465 known@var1994 ;
559: }
560:
|
568:
569: bool isStlType ( ) const {
570: return getFlag (@expr1073745466 fIsStlType ) ;
571: }
572:
|
580:
581: bool isStlStringType ( ) const {
582: return getFlag (@expr1073745467 fIsStlString ) ;
583: }
584:
585: bool isSmartPointer ( ) const {
586: return getFlag (@expr1073745468 fIsSmartPointer ) ;
587: }
588:
589: const Type * smartPointerType ( ) const ;
590:
|
600:
601: bool isStlType ( const std :: string & stlType@var1442 ) const {
602: return isStlType (@expr1073745469 ) &&@expr1073745470 stlType@var1442 ==@expr1073745471 mTypeStartToken@var1447 .@expr1073745472 strAt (@expr1073745473 2 ) ;
603: }
604:
|
614:
615: bool isStlType ( const std :: set < std :: string > & stlTypes@var1443 ) const {
616: return isStlType (@expr1073745474 ) &&@expr1073745475 stlTypes@var1443 .@expr1073745476 find (@expr1073745477 mTypeStartToken@var1447 .@expr1073745478 strAt (@expr1073745479 2 ) ) !=@expr1073745480 stlTypes@var1443 .@expr1073745481 end (@expr1073745482 ) ;
617: }
618:
|
622:
623: bool isFloatingType ( ) const {
624: return getFlag (@expr1073745483 fIsFloatType ) ;
625: }
626:
|
630:
631: bool isEnumType ( ) const {
632: return type (@expr3660 ) &&@expr1073745485 type (@expr3660 ) .@expr1073745487 isEnumType (@expr1073745488 ) ;
633: }
634:
635: bool isMaybeUnused ( ) const {
636: return getFlag (@expr1073745489 fIsMaybeUnused ) ;
637: }
638:
639: const ValueType * valueType ( ) const {
640: return mValueType@var1454 ;
641: }
642:
643: void setValueType ( const ValueType & valueType@var1444 ) ;
644:
645: AccessControl accessControl ( ) const {
646: return mAccess@var1450 ;
647: }
648:
649: std :: string getTypeName ( ) const ;
650:
651: private:
652:
653: friend class SymbolDatabase ;
654:
|
658:
659: void type ( const Type * t@var1445 ) {
660: mType@var1452 =@expr1073745490 t@var1445 ;
661: }
662:
663:
664: const Token * mNameToken@var1446 ;
665:
666:
667: const Token * mTypeStartToken@var1447 ;
668:
669:
670: const Token * mTypeEndToken@var1448 ;
671:
672:
673: int mIndex@var1449 ;
674:
675:
676: AccessControl mAccess@var1450 ;
677:
678:
679: unsigned int mFlags@var1451 ;
680:
681:
682: const Type * mType@var1452 ;
683:
684:
685: const Scope * mScope@var1453 ;
686:
687: ValueType * mValueType@var1454 ;
688:
689:
690: std :: vector < Dimension > mDimensions@var1455 ;
691:
692:
693: void evaluate ( const Settings * settings@var1456 ) ;
694: } ;
695:
696: class Function {
697:
698: friend class SymbolDatabase ;
699:
700:
701: enum Anonymous5 {
702: fHasBody = ( 1 << 0 ) ,
703: fIsInline = ( 1 << 1 ) ,
704: fIsConst = ( 1 << 2 ) ,
705: fHasVirtualSpecifier = ( 1 << 3 ) ,
706: fIsPure = ( 1 << 4 ) ,
707: fIsStatic = ( 1 << 5 ) ,
708: fIsStaticLocal = ( 1 << 6 ) ,
709: fIsExtern = ( 1 << 7 ) ,
710: fIsFriend = ( 1 << 8 ) ,
711: fIsExplicit = ( 1 << 9 ) ,
712: fIsDefault = ( 1 << 10 ) ,
713: fIsDelete = ( 1 << 11 ) ,
714: fHasOverrideSpecifier = ( 1 << 12 ) ,
715: fHasFinalSpecifier = ( 1 << 13 ) ,
716: fIsNoExcept = ( 1 << 14 ) ,
717: fIsThrow = ( 1 << 15 ) ,
718: fIsOperator = ( 1 << 16 ) ,
719: fHasLvalRefQual = ( 1 << 17 ) ,
720: fHasRvalRefQual = ( 1 << 18 ) ,
721: fIsVariadic = ( 1 << 19 ) ,
722: fIsVolatile = ( 1 << 20 ) ,
723: fHasTrailingReturnType = ( 1 << 21 ) ,
724: fIsEscapeFunction = ( 1 << 22 ) ,
725: fIsInlineKeyword = ( 1 << 23 ) ,
726: fIsConstexpr = ( 1 << 24 ) ,
727: } ;
728:
|
733:
734: bool getFlag ( unsigned int flag@var1458 ) const {
735: return (@expr3667 (@expr3667 mFlags@var1507 &@expr1073745493 flag@var1458 ) !=@expr1073745494 0 ) ;
736: }
737:
|
742:
743: void setFlag ( unsigned int flag@var1459 , bool state@var1460 ) {
744: mFlags@var1507 =@expr1073745495 state@var1460 ?@expr1073745496 mFlags@var1507 |@expr1073745497 flag@var1459 :@expr1073745498 mFlags@var1507 &@expr1073745499 ~@expr1073745500 flag@var1459 ;
745: }
746:
747: public:
748: enum Type { eConstructor , eCopyConstructor , eMoveConstructor , eOperatorEqual , eDestructor , eFunction , eLambda } ;
749:
750: Function ( const Tokenizer * mTokenizer@var1461 , const Token * tok@var1462 , const Scope * scope@var1463 , const Token * tokDef@var1464 , const Token * tokArgDef@var1465 ) ;
751: Function ( const Token * tokenDef@var1466 , const std :: string & clangType@var1467 ) ;
752:
753: const std :: string & name ( ) const {
754: return tokenDef@var1477 .@expr1073745501 str (@expr1073745502 ) ;
755: }
756:
757: std :: string fullName ( ) const ;
758:
759: int argCount ( ) const {
760: return argumentList@var1485 .@expr1073745503 size (@expr1073745504 ) ;
761: }
762: int minArgCount ( ) const {
763: return argumentList@var1485 .@expr1073745505 size (@expr1073745506 ) -@expr1073745507 initArgCount@var1486 ;
764: }
765: const Variable * getArgumentVar ( int num@var1468 ) const ;
766: int initializedArgCount ( ) const {
767: return initArgCount@var1486 ;
768: }
769: void addArguments ( const SymbolDatabase * symbolDatabase@var1469 , const Scope * scope@var1470 ) ;
770:
771:
772: bool isImplicitlyVirtual ( bool defaultVal@var1471 = false ) const ;
773:
774: std :: vector < const Function * > getOverloadedFunctions ( ) const ;
775:
776:
777: const Function * getOverriddenFunction ( bool * foundAllBaseClasses@var1472 = nullptr ) const ;
778:
779: bool isLambda ( ) const {
780: return type@var1487 ==@expr1073745508 eLambda ;
781: }
782:
783: bool isConstructor ( ) const {
784: return type@var1487 ==@expr1073745509 eConstructor ||@expr1073745510
785: type@var1487 ==@expr1073745511 eCopyConstructor ||@expr1073745512
786: type@var1487 ==@expr1073745513 eMoveConstructor ;
787: }
788:
789: bool isDestructor ( ) const {
790: return type@var1487 ==@expr1073745514 eDestructor ;
791: }
792: bool isAttributeConstructor ( ) const {
793: return tokenDef@var1477 .@expr1073745515 isAttributeConstructor (@expr1073745516 ) ;
794: }
795: bool isAttributeDestructor ( ) const {
796: return tokenDef@var1477 .@expr1073745517 isAttributeDestructor (@expr1073745518 ) ;
797: }
798: bool isAttributePure ( ) const {
799: return tokenDef@var1477 .@expr1073745519 isAttributePure (@expr1073745520 ) ;
800: }
801: bool isAttributeConst ( ) const {
802: return tokenDef@var1477 .@expr1073745521 isAttributeConst (@expr1073745522 ) ;
803: }
804: bool isAttributeNoreturn ( ) const {
805: return tokenDef@var1477 .@expr1073745523 isAttributeNoreturn (@expr1073745524 ) ;
806: }
807: bool isAttributeNothrow ( ) const {
808: return tokenDef@var1477 .@expr1073745525 isAttributeNothrow (@expr1073745526 ) ;
809: }
810: bool isAttributeNodiscard ( ) const {
811: return tokenDef@var1477 .@expr1073745527 isAttributeNodiscard (@expr1073745528 ) ;
812: }
813:
814: bool hasBody ( ) const {
815: return getFlag (@expr1073745529 fHasBody ) ;
816: }
817: bool isInline ( ) const {
818: return getFlag (@expr1073745530 fIsInline ) ;
819: }
820: bool isConst ( ) const {
821: return getFlag (@expr1073745531 fIsConst ) ;
822: }
823: bool hasVirtualSpecifier ( ) const {
824: return getFlag (@expr1073745532 fHasVirtualSpecifier ) ;
825: }
826: bool isPure ( ) const {
827: return getFlag (@expr1073745533 fIsPure ) ;
828: }
829: bool isStatic ( ) const {
830: return getFlag (@expr1073745534 fIsStatic ) ;
831: }
832: bool isStaticLocal ( ) const {
833: return getFlag (@expr1073745535 fIsStaticLocal ) ;
834: }
835: bool isExtern ( ) const {
836: return getFlag (@expr1073745536 fIsExtern ) ;
837: }
838: bool isFriend ( ) const {
839: return getFlag (@expr1073745537 fIsFriend ) ;
840: }
841: bool isExplicit ( ) const {
842: return getFlag (@expr1073745538 fIsExplicit ) ;
843: }
844: bool isDefault ( ) const {
845: return getFlag (@expr1073745539 fIsDefault ) ;
846: }
847: bool isDelete ( ) const {
848: return getFlag (@expr1073745540 fIsDelete ) ;
849: }
850: bool isNoExcept ( ) const {
851: return getFlag (@expr1073745541 fIsNoExcept ) ;
852: }
853: bool isThrow ( ) const {
854: return getFlag (@expr1073745542 fIsThrow ) ;
855: }
856: bool hasOverrideSpecifier ( ) const {
857: return getFlag (@expr1073745543 fHasOverrideSpecifier ) ;
858: }
859: bool hasFinalSpecifier ( ) const {
860: return getFlag (@expr1073745544 fHasFinalSpecifier ) ;
861: }
862: bool isOperator ( ) const {
863: return getFlag (@expr1073745545 fIsOperator ) ;
864: }
865: bool hasLvalRefQualifier ( ) const {
866: return getFlag (@expr1073745546 fHasLvalRefQual ) ;
867: }
868: bool hasRvalRefQualifier ( ) const {
869: return getFlag (@expr1073745547 fHasRvalRefQual ) ;
870: }
871: bool isVariadic ( ) const {
872: return getFlag (@expr1073745548 fIsVariadic ) ;
873: }
874: bool isVolatile ( ) const {
875: return getFlag (@expr1073745549 fIsVolatile ) ;
876: }
877: bool hasTrailingReturnType ( ) const {
878: return getFlag (@expr1073745550 fHasTrailingReturnType ) ;
879: }
880: void hasBody ( bool state@var1473 ) {
881: setFlag (@expr1073745551 fHasBody , state@var1473 ) ;
882: }
883: bool isInlineKeyword ( ) const {
884: return getFlag (@expr1073745552 fIsInlineKeyword ) ;
885: }
886:
887: bool isEscapeFunction ( ) const {
888: return getFlag (@expr1073745553 fIsEscapeFunction ) ;
889: }
890: void isEscapeFunction ( bool state@var1474 ) {
891: setFlag (@expr1073745554 fIsEscapeFunction , state@var1474 ) ;
892: }
893:
894: bool isConstexpr ( ) const {
895: return getFlag (@expr1073745555 fIsConstexpr ) ;
896: }
897: void isConstexpr ( bool state@var1475 ) {
898: setFlag (@expr1073745556 fIsConstexpr , state@var1475 ) ;
899: }
900: bool isSafe ( const Settings * settings@var1476 ) const ;
901:
902: const Token * tokenDef@var1477 ;
903: const Token * argDef@var1478 ;
904: const Token * token@var1479 ;
905: const Token * arg@var1480 ;
906: const Token * retDef@var1481 ;
907: const :: Type * retType@var1482 ;
908: const Scope * functionScope@var1483 ;
909: const Scope * nestedIn@var1484 ;
910: std :: list < Variable > argumentList@var1485 ;
911: int initArgCount@var1486 ;
912: Type type@var1487 ;
913: AccessControl access@var1488 ;
914: const Token * noexceptArg@var1489 ;
915: const Token * throwArg@var1490 ;
916: const Token * templateDef@var1491 ;
917: const Token * functionPointerUsage@var1492 ;
918:
919: bool argsMatch ( const Scope * scope@var1493 , const Token * first@var1494 , const Token * second@var1495 , const std :: string & path@var1496 , int path_length@var1497 ) const ;
920:
921: static bool returnsConst ( const Function * function@var1498 , bool unknown@var1499 = false ) ;
922:
923: static bool returnsReference ( const Function * function@var1500 , bool unknown@var1501 = false ) ;
924:
925: static bool returnsVoid ( const Function * function@var1502 , bool unknown@var1503 = false ) ;
926:
927: static std :: vector < const Token * > findReturns ( const Function * f@var1504 ) ;
928:
929: const Token * returnDefEnd ( ) const {
930: if (@expr1073745557 this@expr1073745558 .@expr1073745559 hasTrailingReturnType (@expr1073745560 ) ) {
931: return Token ::@expr1073745561 findmatch (@expr1073745562 retDef@var1481 , "{|;" ) ;
932: } else {
933: return tokenDef@var1477 ;
934: }
935: }
936:
|
940:
941: const Token * constructorMemberInitialization ( ) const ;
942:
943: private:
944:
945: const Function * getOverriddenFunctionRecursive ( const :: Type * baseType@var1505 , bool * foundAllBaseClasses@var1506 ) const ;
946:
947: unsigned int mFlags@var1507 ;
948:
949: void isInline ( bool state@var1508 ) {
950: setFlag (@expr1073745563 fIsInline , state@var1508 ) ;
951: }
952: void isConst ( bool state@var1509 ) {
953: setFlag (@expr1073745564 fIsConst , state@var1509 ) ;
954: }
955: void hasVirtualSpecifier ( bool state@var1510 ) {
956: setFlag (@expr1073745565 fHasVirtualSpecifier , state@var1510 ) ;
957: }
958: void isPure ( bool state@var1511 ) {
959: setFlag (@expr1073745566 fIsPure , state@var1511 ) ;
960: }
961: void isStatic ( bool state@var1512 ) {
962: setFlag (@expr1073745567 fIsStatic , state@var1512 ) ;
963: }
964: void isStaticLocal ( bool state@var1513 ) {
965: setFlag (@expr1073745568 fIsStaticLocal , state@var1513 ) ;
966: }
967: void isExtern ( bool state@var1514 ) {
968: setFlag (@expr1073745569 fIsExtern , state@var1514 ) ;
969: }
970: void isFriend ( bool state@var1515 ) {
971: setFlag (@expr1073745570 fIsFriend , state@var1515 ) ;
972: }
973: void isExplicit ( bool state@var1516 ) {
974: setFlag (@expr1073745571 fIsExplicit , state@var1516 ) ;
975: }
976: void isDefault ( bool state@var1517 ) {
977: setFlag (@expr1073745572 fIsDefault , state@var1517 ) ;
978: }
979: void isDelete ( bool state@var1518 ) {
980: setFlag (@expr1073745573 fIsDelete , state@var1518 ) ;
981: }
982: void isNoExcept ( bool state@var1519 ) {
983: setFlag (@expr1073745574 fIsNoExcept , state@var1519 ) ;
984: }
985: void isThrow ( bool state@var1520 ) {
986: setFlag (@expr1073745575 fIsThrow , state@var1520 ) ;
987: }
988: void isOperator ( bool state@var1521 ) {
989: setFlag (@expr1073745576 fIsOperator , state@var1521 ) ;
990: }
991: void hasLvalRefQualifier ( bool state@var1522 ) {
992: setFlag (@expr1073745577 fHasLvalRefQual , state@var1522 ) ;
993: }
994: void hasRvalRefQualifier ( bool state@var1523 ) {
995: setFlag (@expr1073745578 fHasRvalRefQual , state@var1523 ) ;
996: }
997: void isVariadic ( bool state@var1524 ) {
998: setFlag (@expr1073745579 fIsVariadic , state@var1524 ) ;
999: }
1000: void isVolatile ( bool state@var1525 ) {
1001: setFlag (@expr1073745580 fIsVolatile , state@var1525 ) ;
1002: }
1003: void hasTrailingReturnType ( bool state@var1526 ) {
1004: return setFlag (@expr1073745581 fHasTrailingReturnType , state@var1526 ) ;
1005: }
1006: void isInlineKeyword ( bool state@var1527 ) {
1007: setFlag (@expr1073745582 fIsInlineKeyword , state@var1527 ) ;
1008: }
1009: const Token * setFlags ( const Token * tok1@var1528 , const Scope * scope@var1529 ) ;
1010: } ;
1011:
1012: class Scope {
1013:
1014: friend class TestSymbolDatabase ;
1015:
1016: public:
1017: struct UsingInfo {
1018: const Token * start@var1530 ;
1019: const Scope * scope@var1531 ;
1020: } ;
1021:
1022: enum ScopeType { eGlobal , eClass , eStruct , eUnion , eNamespace , eFunction , eIf , eElse , eFor , eWhile , eDo , eSwitch , eUnconditional , eTry , eCatch , eLambda , eEnum } ;
1023:
1024: Scope ( const SymbolDatabase * check_@var1532 , const Token * classDef_@var1533 , const Scope * nestedIn_@var1534 ) ;
1025: Scope ( const SymbolDatabase * check_@var1535 , const Token * classDef_@var1536 , const Scope * nestedIn_@var1537 , ScopeType type_@var1538 , const Token * start_@var1539 ) ;
1026:
1027: const SymbolDatabase * check@var1540 ;
1028: std :: string className@var1541 ;
1029: const Token * classDef@var1542 ;
1030: const Token * bodyStart@var1543 ;
1031: const Token * bodyEnd@var1544 ;
1032: std :: list < Function > functionList@var1545 ;
1033: std :: multimap < std :: string , const Function * > functionMap@var1546 ;
1034: std :: list < Variable > varlist@var1547 ;
1035: const Scope * nestedIn@var1548 ;
1036: std :: list < Scope * > nestedList@var1549 ;
1037: int numConstructors@var1550 ;
1038: int numCopyOrMoveConstructors@var1551 ;
1039: std :: list < UsingInfo > usingList@var1552 ;
1040: ScopeType type@var1553 ;
1041: Type * definedType@var1554 ;
1042: std :: map < std :: string , Type * > definedTypesMap@var1555 ;
1043: std :: vector < const Token * > bodyStartList@var1556 ;
1044:
1045:
1046: const Scope * functionOf@var1557 ;
1047: Function * function@var1558 ;
1048:
1049:
1050: const Token * enumType@var1559 ;
1051: bool enumClass@var1560 ;
1052:
1053: std :: vector < Enumerator > enumeratorList@var1561 ;
1054:
1055: void setBodyStartEnd ( const Token * start@var1562 ) {
1056: bodyStart@var1543 =@expr1073745583 start@var1562 ;
1057: bodyEnd@var1544 =@expr1073745584 start@var1562 ?@expr1073745585 start@var1562 .@expr1073745586 link (@expr1073745587 ) :@expr1073745588 nullptr ;
1058: if (@expr1073745589 start@var1562 ) {
1059: bodyStartList@var1556 .@expr1073745590 push_back (@expr1073745591 start@var1562 ) ; }
1060: }
1061:
1062: bool isAnonymous ( ) const {
1063:
1064: return className@var1541 .@expr1073745592 size (@expr1073745593 ) >@expr1073745594 9 &&@expr1073745595 className@var1541 .@expr1073745596 compare (@expr1073745597 0 , 9 , "Anonymous" ) ==@expr1073745598 0 &&@expr1073745599 std ::@expr1073745600 isdigit (@expr1073745601 className@var1541 [@expr1073745602 9 ] ) ;
1065: }
1066:
1067: const Enumerator * findEnumerator ( const std :: string & name@var1563 ) const {
1068: for (@expr1073745603 const Enumerator &@expr1073745604 i@var1564 :@expr1073745605 enumeratorList@var1561 ) {
1069: if (@expr1073745606 i@var1564 .@expr1073745607 name@var1565 .@expr1073745608 str (@expr1073745609 ) ==@expr1073745610 name@var1563 ) {
1070: return &@expr1073745611 i@var1564 ; }
1071: }
1072: return nullptr ;
1073: }
1074:
1075: bool isNestedIn ( const Scope * outer@var1566 ) const {
1076: if (@expr1073745612 !@expr1073745613 outer@var1566 ) {
1077: return false ; }
1078: if (@expr1073745614 outer@var1566 ==@expr1073745615 this@expr1073745616 ) {
1079: return true ; }
1080: const Scope * parent@var1567 ; parent@var1567 =@expr1073745617 nestedIn@var1548 ;
1081: while (@expr1073745618 outer@var1566 !=@expr1073745619 parent@var1567 &&@expr1073745620 parent@var1567 ) {
1082: parent@var1567 =@expr1073745621 parent@var1567 .@expr1073745622 nestedIn@var1568 ; }
1083: if (@expr1073745623 parent@var1567 &&@expr1073745624 parent@var1567 ==@expr1073745625 outer@var1566 ) {
1084: return true ; }
1085: return false ;
1086: }
1087:
1088: static Function * nestedInFunction ( const Scope * scope@var1569 ) {
1089: while (@expr1073745626 scope@var1569 ) {
1090: if (@expr1073745627 scope@var1569 .@expr1073745628 type@var1570 ==@expr1073745629 Scope ::@expr1073745630 eFunction ) {
1091: break ; }
1092: scope@var1569 =@expr1073745631 scope@var1569 .@expr1073745632 nestedIn@var1571 ;
1093: }
1094: if (@expr1073745633 !@expr1073745634 scope@var1569 ) {
1095: return nullptr ; }
1096: return scope@var1569 .@expr1073745635 function@var1572 ;
1097: }
1098:
1099: bool isClassOrStruct ( ) const {
1100: return (@expr1073745636 type@var1553 ==@expr1073745637 eClass ||@expr1073745638 type@var1553 ==@expr1073745639 eStruct ) ;
1101: }
1102:
1103: bool isClassOrStructOrUnion ( ) const {
1104: return (@expr1073745640 type@var1553 ==@expr1073745641 eClass ||@expr1073745642 type@var1553 ==@expr1073745643 eStruct ||@expr1073745644 type@var1553 ==@expr1073745645 eUnion ) ;
1105: }
1106:
1107: bool isExecutable ( ) const {
1108: return type@var1553 !=@expr1073745646 eClass &&@expr1073745647 type@var1553 !=@expr1073745648 eStruct &&@expr1073745649 type@var1553 !=@expr1073745650 eUnion &&@expr1073745651 type@var1553 !=@expr1073745652 eGlobal &&@expr1073745653 type@var1553 !=@expr1073745654 eNamespace &&@expr1073745655 type@var1553 !=@expr1073745656 eEnum ;
1109: }
1110:
1111: bool isLoopScope ( ) const {
1112: return type@var1553 ==@expr1073745657 Scope ::@expr3834 ScopeType ::@expr1073745659 eFor ||@expr1073745660 type@var1553 ==@expr1073745661 Scope ::@expr3834 ScopeType ::@expr1073745663 eWhile ||@expr1073745664 type@var1553 ==@expr1073745665 Scope ::@expr3834 ScopeType ::@expr1073745667 eDo ;
1113: }
1114:
1115: bool isLocal ( ) const {
1116: return (@expr1073745668 type@var1553 ==@expr1073745669 eIf ||@expr1073745670 type@var1553 ==@expr1073745671 eElse ||@expr1073745672
1117: type@var1553 ==@expr1073745673 eFor ||@expr1073745674 type@var1553 ==@expr1073745675 eWhile ||@expr1073745676 type@var1553 ==@expr1073745677 eDo ||@expr1073745678
1118: type@var1553 ==@expr1073745679 eSwitch ||@expr1073745680 type@var1553 ==@expr1073745681 eUnconditional ||@expr1073745682
1119: type@var1553 ==@expr1073745683 eTry ||@expr1073745684 type@var1553 ==@expr1073745685 eCatch ) ;
1120: }
1121:
1122:
1123: bool hasInlineOrLambdaFunction ( ) const ;
1124:
|
1130:
1131: const Function * findFunction ( const Token * tok@var1573 , bool requireConst@var1574 = false ) const ;
1132:
1133: const Scope * findRecordInNestedList ( const std :: string & name@var1575 , bool isC@var1576 = false ) const ;
1134: Scope * findRecordInNestedList ( const std :: string & name@var1577 ) {
1135: return const_cast < Scope *@expr3862 > (@expr1073745687 const_cast < const Scope *@expr3862 > (@expr1073745689 this@expr1073745690 ) .@expr1073745691 findRecordInNestedList (@expr1073745692 name@var1577 ) ) ;
1136: }
1137:
1138: const Type * findType ( const std :: string & name@var1578 ) const ;
1139: Type * findType ( const std :: string & name@var1579 ) {
1140: return const_cast < Type *@expr3869 > (@expr1073745694 const_cast < const Scope *@expr3869 > (@expr1073745696 this@expr1073745697 ) .@expr1073745698 findType (@expr1073745699 name@var1579 ) ) ;
1141: }
1142:
|
1146:
1147: Scope * findInNestedListRecursive ( const std :: string & name@var1580 ) ;
1148:
1149: void addVariable ( const Token * token_@var1581 , const Token * start_@var1582 ,
1150: const Token * end_@var1583 , AccessControl access_@var1584 , const Type * type_@var1585 ,
1151: const Scope * scope_@var1586 , const Settings * settings@var1587 ) ;
1152:
1153:
1154: void getVariableList ( const Settings * settings@var1588 ) ;
1155:
1156: const Function * getDestructor ( ) const ;
1157:
1158: void addFunction ( const Function & func@var1589 ) {
1159: functionList@var1545 .@expr1073745700 push_back (@expr1073745701 func@var1589 ) ;
1160:
1161: const Function * back@var1590 ; back@var1590 =@expr1073745702 &@expr1073745703 functionList@var1545 .@expr1073745704 back (@expr1073745705 ) ;
1162:
1163: functionMap@var1546 .@expr1073745706 insert (@expr1073745707 make_pair (@expr1073745708 back@var1590 .@expr1073745709 tokenDef@var1591 .@expr1073745710 str (@expr1073745711 ) , back@var1590 ) ) ;
1164: }
1165:
1166: bool hasDefaultConstructor ( ) const ;
1167:
1168: AccessControl defaultAccess ( ) const ;
1169:
|
1176:
1177: const Token * checkVariable ( const Token * tok@var1592 , AccessControl varaccess@var1593 , const Settings * settings@var1594 ) ;
1178:
|
1183:
1184: const Variable * getVariable ( const std :: string & varname@var1595 ) const ;
1185:
1186: const Token * addEnum ( const Token * tok@var1596 , bool isCpp@var1597 ) ;
1187:
1188: const Scope * findRecordInBase ( const std :: string & name@var1598 ) const ;
1189:
1190: std :: vector < const Scope * > findAssociatedScopes ( ) const ;
1191:
1192: private:
1193:
|
1199:
1200: bool isVariableDeclaration ( const Token * const tok@var1599 , const Token * & vartok@var1600 , const Token * & typetok@var1601 ) const ;
1201:
1202: void findFunctionInBase ( const std :: string & name@var1602 , int args@var1603 , std :: vector < const Function * > & matches@var1604 ) const ;
1203:
1204:
1205: void getVariableList ( const Settings * settings@var1605 , const Token * start@var1606 , const Token * end@var1607 ) ;
1206: } ;
1207:
1208: enum class Reference {
1209: None ,
1210: LValue ,
1211: RValue
1212: } ;
1213:
1214:
1215: class ValueType {
1216:
1217: enum Sign { UNKNOWN_SIGN , SIGNED , UNSIGNED } ; public: enum Sign sign@var1608 ;
1218: enum Type {
1219: UNKNOWN_TYPE ,
1220: POD ,
1221: NONSTD ,
1222: RECORD ,
1223: SMART_POINTER ,
1224: CONTAINER ,
1225: ITERATOR ,
1226: VOID ,
1227: BOOL ,
1228: CHAR ,
1229: SHORT ,
1230: WCHAR_T ,
1231: INT ,
1232: LONG ,
1233: LONGLONG ,
1234: UNKNOWN_INT ,
1235: FLOAT ,
1236: DOUBLE ,
1237: LONGDOUBLE
1238: } ; enum Type type@var1609 ;
1239: int bits@var1610 ;
1240: int pointer@var1611 ;
1241: int constness@var1612 ;
1242: Reference reference@var1613 ; reference@var1613 = Reference :: None ;
1243:
1244: const Scope * typeScope@var1614 ;
1245: const :: Type * smartPointerType@var1615 ;
1246: const Token * smartPointerTypeToken@var1616 ;
1247: const Library :: SmartPointer * smartPointer@var1617 ;
1248: const Library :: Container * container@var1618 ;
1249:
1250: const Token * containerTypeToken@var1619 ;
1251:
1252: std :: string originalTypeName@var1620 ;
1253:
1254:
1255: ValueType ( )
1256: : sign@var1608 ( UNKNOWN_SIGN ) ,
1257: type@var1609 ( UNKNOWN_TYPE ) ,
1258: bits@var1610 ( 0 ) ,
1259: pointer@var1611 ( 0U ) ,
1260: constness@var1612 ( 0U ) ,
1261: typeScope@var1614 ( nullptr ) ,
1262: smartPointerType@var1615 ( nullptr ) ,
1263: smartPointerTypeToken@var1616 ( nullptr ) ,
1264: smartPointer@var1617 ( nullptr ) ,
1265: container@var1618 ( nullptr ) ,
1266: containerTypeToken@var1619 ( nullptr )
1267: { }
1268: ValueType ( enum Sign s@var1621 , enum Type t@var1622 , int p@var1623 )
1269: : sign@var1608 ( s@var1621 ) ,
1270: type@var1609 ( t@var1622 ) ,
1271: bits@var1610 ( 0 ) ,
1272: pointer@var1611 ( p@var1623 ) ,
1273: constness@var1612 ( 0U ) ,
1274: typeScope@var1614 ( nullptr ) ,
1275: smartPointerType@var1615 ( nullptr ) ,
1276: smartPointerTypeToken@var1616 ( nullptr ) ,
1277: smartPointer@var1617 ( nullptr ) ,
1278: container@var1618 ( nullptr ) ,
1279: containerTypeToken@var1619 ( nullptr )
1280: { }
1281: ValueType ( enum Sign s@var1624 , enum Type t@var1625 , int p@var1626 , int c@var1627 )
1282: : sign@var1608 ( s@var1624 ) ,
1283: type@var1609 ( t@var1625 ) ,
1284: bits@var1610 ( 0 ) ,
1285: pointer@var1611 ( p@var1626 ) ,
1286: constness@var1612 ( c@var1627 ) ,
1287: typeScope@var1614 ( nullptr ) ,
1288: smartPointerType@var1615 ( nullptr ) ,
1289: smartPointerTypeToken@var1616 ( nullptr ) ,
1290: smartPointer@var1617 ( nullptr ) ,
1291: container@var1618 ( nullptr ) ,
1292: containerTypeToken@var1619 ( nullptr )
1293: { }
1294: ValueType ( enum Sign s@var1628 , enum Type t@var1629 , int p@var1630 , int c@var1631 , const std :: string & otn@var1632 )
1295: : sign@var1608 ( s@var1628 ) ,
1296: type@var1609 ( t@var1629 ) ,
1297: bits@var1610 ( 0 ) ,
1298: pointer@var1611 ( p@var1630 ) ,
1299: constness@var1612 ( c@var1631 ) ,
1300: typeScope@var1614 ( nullptr ) ,
1301: smartPointerType@var1615 ( nullptr ) ,
1302: smartPointerTypeToken@var1616 ( nullptr ) ,
1303: smartPointer@var1617 ( nullptr ) ,
1304: container@var1618 ( nullptr ) ,
1305: containerTypeToken@var1619 ( nullptr ) ,
1306: originalTypeName@var1620 ( otn@var1632 )
1307: { }
1308:
1309: static ValueType parseDecl ( const Token * type@var1633 , const Settings * settings@var1634 ) ;
1310:
1311: static Type typeFromString ( const std :: string & typestr@var1635 , bool longType@var1636 ) ;
1312:
1313: enum class MatchResult { UNKNOWN , SAME , FALLBACK1 , FALLBACK2 , NOMATCH } ;
1314: static MatchResult matchParameter ( const ValueType * call@var1637 , const ValueType * func@var1638 ) ;
1315: static MatchResult matchParameter ( const ValueType * call@var1639 , const Variable * callVar@var1640 , const Variable * funcVar@var1641 ) ;
1316:
1317: bool isPrimitive ( ) const {
1318: return (@expr1073745712 type@var1609 >=@expr1073745713 ValueType ::@expr1073745714 Type ::@expr1073745715 BOOL ) ;
1319: }
1320:
1321: bool isIntegral ( ) const {
1322: return (@expr1073745716 type@var1609 >=@expr1073745717 ValueType ::@expr3894 Type ::@expr1073745719 BOOL &&@expr1073745720 type@var1609 <=@expr1073745721 ValueType ::@expr3894 Type ::@expr1073745723 UNKNOWN_INT ) ;
1323: }
1324:
1325: bool isFloat ( ) const {
1326: return (@expr1073745724 type@var1609 >=@expr1073745725 ValueType ::@expr3902 Type ::@expr1073745727 FLOAT &&@expr1073745728 type@var1609 <=@expr1073745729 ValueType ::@expr3902 Type ::@expr1073745731 LONGDOUBLE ) ;
1327: }
1328:
1329: bool fromLibraryType ( const std :: string & typestr@var1642 , const Settings * settings@var1643 ) ;
1330:
1331: bool isEnum ( ) const {
1332: return typeScope@var1614 &&@expr1073745732 typeScope@var1614 .@expr1073745733 type@var1644 ==@expr1073745734 Scope ::@expr1073745735 eEnum ;
1333: }
1334:
1335: long long typeSize ( const cppcheck :: Platform & platform@var1645 , bool p@var1646 = false ) const ;
1336:
1337:
1338: bool isTypeEqual ( const ValueType * that@var1647 ) const ;
1339:
1340: std :: string str ( ) const ;
1341: std :: string dump ( ) const ;
1342: } ;
1343:
1344:
1345: class SymbolDatabase {
1346: friend class TestSymbolDatabase ;
1347: public:
1348: SymbolDatabase ( const Tokenizer * tokenizer@var1648 , const Settings * settings@var1649 , ErrorLogger * errorLogger@var1650 ) ;
1349: ~ SymbolDatabase ( ) ;
1350:
1351:
1352: std :: list < Scope > scopeList@var1651 ;
1353:
1354:
1355: std :: vector < const Scope * > functionScopes@var1652 ;
1356:
1357:
1358: std :: vector < const Scope * > classAndStructScopes@var1653 ;
1359:
1360:
1361: std :: list < Type > typeList@var1654 ;
1362:
|
1368:
1369: const Type * findVariableType ( const Scope * start@var1655 , const Token * typeTok@var1656 ) const ;
1370:
|
1375:
1376: const Function * findFunction ( const Token * tok@var1657 ) const ;
1377:
1378:
1379: const Scope * findScopeByName ( const std :: string & name@var1658 ) const ;
1380:
1381: const Type * findType ( const Token * startTok@var1659 , const Scope * startScope@var1660 , bool lookOutside@var1661 = false ) const ;
1382: Type * findType ( const Token * startTok@var1662 , Scope * startScope@var1663 , bool lookOutside@var1664 = false ) const {
1383: return const_cast < Type *@expr3912 > (@expr1073745737 this@expr1073745738 .@expr1073745739 findType (@expr1073745740 startTok@var1662 , const_cast < const Scope *@expr3912 > (@expr1073745742 startScope@var1663 ) , lookOutside@var1664 ) ) ;
1384: }
1385:
1386: const Scope * findScope ( const Token * tok@var1665 , const Scope * startScope@var1666 ) const ;
1387: Scope * findScope ( const Token * tok@var1667 , Scope * startScope@var1668 ) const {
1388: return const_cast < Scope *@expr3919 > (@expr1073745744 this@expr1073745745 .@expr1073745746 findScope (@expr1073745747 tok@var1667 , const_cast < const Scope *@expr3919 > (@expr1073745749 startScope@var1668 ) ) ) ;
1389: }
1390:
1391: bool isVarId ( int varid@var1669 ) const {
1392: return varid@var1669 <@expr1073745750 mVariableList@var1726 .@expr1073745751 size (@expr1073745752 ) ;
1393: }
1394:
1395: const Variable * getVariableFromVarId ( int varId@var1670 ) const {
1396: return mVariableList@var1726 .@expr1073745753 at (@expr1073745754 varId@var1670 ) ;
1397: }
1398:
1399: const std :: vector < const Variable * > & variableList ( ) const {
1400: return mVariableList@var1726 ;
1401: }
1402:
|
1405:
1406: void debugMessage ( const Token * tok@var1671 , const std :: string & type@var1672 , const std :: string & msg@var1673 ) const ;
1407:
1408: void printOut ( const char * title@var1674 = nullptr ) const ;
1409: void printVariable ( const Variable * var@var1675 , const char * indent@var1676 ) const ;
1410: void printXml ( std :: ostream & out@var1677 ) const ;
1411:
1412: bool isCPP ( ) const ;
1413:
|
1416:
1417: void validate ( ) const ;
1418:
1419: void validateExecutableScopes ( ) const ;
1420:
1421:
1422:
1423: void validateVariables ( ) const ;
1424:
1425:
1426: void setValueTypeInTokenList ( bool reportDebugWarnings@var1678 , Token * tokens@var1679 = nullptr ) ;
1427:
|
1432:
1433: int sizeOfType ( const Token * type@var1680 ) const ;
1434:
1435:
1436: void setArrayDimensionsUsingValueFlow ( ) ;
1437:
1438: void clangSetVariables ( const std :: vector < const Variable * > & variableList@var1681 ) ;
1439: void createSymbolDatabaseExprIds ( ) ;
1440:
1441: private:
1442: friend class Scope ;
1443: friend class Function ;
1444:
1445:
1446: void createSymbolDatabaseFindAllScopes ( ) ;
1447: void createSymbolDatabaseClassInfo ( ) ;
1448: void createSymbolDatabaseVariableInfo ( ) ;
1449: void createSymbolDatabaseCopyAndMoveConstructors ( ) ;
1450: void createSymbolDatabaseFunctionScopes ( ) ;
1451: void createSymbolDatabaseClassAndStructScopes ( ) ;
1452: void createSymbolDatabaseFunctionReturnTypes ( ) ;
1453: void createSymbolDatabaseNeedInitialization ( ) ;
1454: void createSymbolDatabaseVariableSymbolTable ( ) ;
1455: void createSymbolDatabaseSetScopePointers ( ) ;
1456: void createSymbolDatabaseSetFunctionPointers ( bool firstPass@var1682 ) ;
1457: void createSymbolDatabaseSetVariablePointers ( ) ;
1458:
1459: void createSymbolDatabaseSetTypePointers ( ) ;
1460: void createSymbolDatabaseSetSmartPointerType ( ) ;
1461: void createSymbolDatabaseEnums ( ) ;
1462: void createSymbolDatabaseEscapeFunctions ( ) ;
1463:
1464: void createSymbolDatabaseIncompleteVars ( ) ;
1465:
1466: void addClassFunction ( Scope * * scope@var1683 , const Token * * tok@var1684 , const Token * argStart@var1685 ) ;
1467: Function * addGlobalFunctionDecl ( Scope * & scope@var1686 , const Token * tok@var1687 , const Token * argStart@var1688 , const Token * funcStart@var1689 ) ;
1468: Function * addGlobalFunction ( Scope * & scope@var1690 , const Token * & tok@var1691 , const Token * argStart@var1692 , const Token * funcStart@var1693 ) ;
1469: void addNewFunction ( Scope * * scope@var1694 , const Token * * tok@var1695 ) ;
1470: bool isFunction ( const Token * tok@var1696 , const Scope * outerScope@var1697 , const Token * * funcStart@var1698 , const Token * * argStart@var1699 , const Token * * declEnd@var1700 ) const ;
1471: const Type * findTypeInNested ( const Token * startTok@var1701 , const Scope * startScope@var1702 ) const ;
1472: const Scope * findNamespace ( const Token * tok@var1703 , const Scope * scope@var1704 ) const ;
1473: Function * findFunctionInScope ( const Token * func@var1705 , const Scope * ns@var1706 , const std :: string & path@var1707 , int path_length@var1708 ) ;
1474: const Type * findVariableTypeInBase ( const Scope * scope@var1709 , const Token * typeTok@var1710 ) const ;
1475:
|
1478:
1479: void fixVarId ( std :: map < unsigned int , std :: map < unsigned int , unsigned int > > & varIds@var1711 , const Token * vartok@var1712 , Token * membertok@var1713 , const Variable * membervar@var1714 ) ;
1480:
1481:
1482: bool isReservedName ( const std :: string & iName@var1715 ) const ;
1483:
1484: const Enumerator * findEnumerator ( const Token * tok@var1716 ) const ;
1485:
1486: void setValueType ( Token * tok@var1717 , const ValueType & valuetype@var1718 ) ;
1487: void setValueType ( Token * tok@var1719 , const Variable & var@var1720 ) ;
1488: void setValueType ( Token * tok@var1721 , const Enumerator & enumerator@var1722 ) ;
1489:
1490: const Tokenizer * mTokenizer@var1723 ;
1491: const Settings * mSettings@var1724 ;
1492: ErrorLogger * mErrorLogger@var1725 ;
1493:
1494:
1495: std :: vector < const Variable * > mVariableList@var1726 ;
1496:
1497:
1498: std :: list < Type > mBlankTypes@var1727 ;
1499:
1500: bool mIsCpp@var1728 ;
1501: ValueType :: Sign mDefaultSignedness@var1729 ;
1502:
1503:
1504: mutable std :: set < std :: string > mTokensThatAreNotEnumeratorValues@var1730 ;
1505: } ;

##file cppcheck-2.8/lib/tokenlist.h

1:
|
31:
32: class Settings ;
33:
34: namespace simplecpp {
35: class TokenList ;
36: }
37:
|
40:
41: class TokenList {
42: public:
43: explicit TokenList ( const Settings * settings@var1731 ) ;
44: ~ TokenList ( ) ;
45:
46: void setSettings ( const Settings * settings@var1732 ) {
47: mSettings@var1767 =@expr1073745755 settings@var1732 ;
48: }
49:
50: const Settings * getSettings ( ) const {
51: return mSettings@var1767 ;
52: }
53:
54:
55: const std :: string & getSourceFilePath ( ) const ;
56:
57:
58: bool isC ( ) const {
59: return mIsC@var1769 ;
60: }
61:
62:
63: bool isCPP ( ) const {
64: return mIsCpp@var1770 ;
65: }
66:
|
70:
71: static void deleteTokens ( Token * tok@var1733 ) ;
72:
73: void addtoken ( const std :: string & str@var1734 , const int lineno@var1735 , const int column@var1736 , const int fileno@var1737 , bool split@var1738 = false ) ;
74: void addtoken ( const std :: string & str@var1739 , const Token * locationTok@var1740 ) ;
75:
76: void addtoken ( const Token * tok@var1741 , const int lineno@var1742 , const int column@var1743 , const int fileno@var1744 ) ;
77: void addtoken ( const Token * tok@var1745 , const Token * locationTok@var1746 ) ;
78: void addtoken ( const Token * tok@var1747 ) ;
79:
80: static void insertTokens ( Token * dest@var1748 , const Token * src@var1749 , int n@var1750 ) ;
81:
|
89:
90: static Token * copyTokens ( Token * dest@var1751 , const Token * first@var1752 , const Token * last@var1753 , bool one_line@var1754 = true ) ;
91:
|
100:
101: bool createTokens ( std :: istream & code@var1755 , const std :: string & file0@var1756 = emptyString@var1 ) ;
102:
103: void createTokens ( simplecpp :: TokenList && tokenList@var1757 ) ;
104:
105:
106: void deallocateTokens ( ) ;
107:
108:
109: int appendFileIfNew ( const std :: string & fileName@var1758 ) ;
110:
111:
112: const Token * front ( ) const {
113: return mTokensFrontBack@var1764 .@expr1073745756 front@var1771 ;
114: }
115: Token * front ( ) {
116: return mTokensFrontBack@var1764 .@expr1073745757 front@var1771 ;
117: }
118:
119:
120: const Token * back ( ) const {
121: return mTokensFrontBack@var1764 .@expr1073745758 back@var1772 ;
122: }
123: Token * back ( ) {
124: return mTokensFrontBack@var1764 .@expr1073745759 back@var1772 ;
125: }
126:
|
131:
132: const std :: vector < std :: string > & getFiles ( ) const {
133: return mFiles@var1765 ;
134: }
135:
136: std :: string getOrigFile ( const Token * tok@var1759 ) const ;
137:
|
142:
143: const std :: string & file ( const Token * tok@var1760 ) const ;
144:
|
149:
150: std :: string fileLine ( const Token * tok@var1761 ) const ;
151:
|
155:
156: unsigned long long calculateChecksum ( ) const ;
157:
|
160:
161: void createAst ( ) const ;
162:
|
166:
167: void validateAst ( ) const ;
168:
|
174:
175: bool validateToken ( const Token * tok@var1762 ) const ;
176:
|
181:
182: void simplifyPlatformTypes ( ) ;
183:
|
187:
188: void simplifyStdType ( ) ;
189:
190: void clangSetOrigFiles ( ) ;
191:
192: bool isKeyword ( const std :: string & str@var1763 ) const ;
193:
194: private:
195:
196:
197: TokenList ( const TokenList & ) ;
198:
199:
200: TokenList & operator= ( const TokenList & ) ;
201:
202: void determineCppC ( ) ;
203:
204:
205: TokensFrontBack mTokensFrontBack@var1764 ;
206:
207:
208: std :: vector < std :: string > mFiles@var1765 ;
209:
210:
211: std :: vector < std :: string > mOrigFiles@var1766 ;
212:
213:
214: const Settings * mSettings@var1767 ;
215:
216: std :: unordered_set < std :: string > mKeywords@var1768 ;
217:
218:
219: bool mIsC@var1769 ;
220: bool mIsCpp@var1770 ;
221: } ;

##file cppcheck-2.8/lib/tokenize.h

1:
|
35:
36: class Settings ;
37: class SymbolDatabase ;
38: class TimerResults ;
39: class Token ;
40: class TemplateSimplifier ;
41: class ErrorLogger ;
42: class Preprocessor ;
43:
44: namespace simplecpp {
45: class TokenList ;
46: }
47:
|
51:
52: class Tokenizer {
53:
54: friend class TestSimplifyTokens ;
55: friend class TestSimplifyTypedef ;
56: friend class TestSimplifyUsing ;
57: friend class TestTokenizer ;
58: friend class SymbolDatabase ;
59: friend class TestSimplifyTemplate ;
60: friend class TemplateSimplifier ;
61:
62:
63: class VariableMap {
64: private:
65: std :: map < std :: string , int > mVariableId@var1773 ;
66: std :: stack < std :: list < std :: pair < std :: string , int > > > mScopeInfo@var1774 ;
67: mutable int mVarId@var1775 ;
68: public:
69: VariableMap ( ) ;
70: void enterScope ( ) ;
71: bool leaveScope ( ) ;
72: void addVariable ( const std :: string & varname@var1776 ) ;
73: bool hasVariable ( const std :: string & varname@var1777 ) const ;
74: std :: map < std :: string , int > :: const_iterator find ( const std :: string & varname@var1778 ) const {
75: return mVariableId@var1773 .@expr1073745760 find (@expr1073745761 varname@var1778 ) ;
76: }
77: std :: map < std :: string , int > :: const_iterator end ( ) const {
78: return mVariableId@var1773 .@expr1073745762 end (@expr1073745763 ) ;
79: }
80: const std :: map < std :: string , int > & map ( ) const {
81: return mVariableId@var1773 ;
82: }
83: int * getVarId ( ) const {
84: return &@expr1073745764 mVarId@var1775 ;
85: }
86: } ;
87:
88:
89: public:
90: Tokenizer ( ) ;
91: Tokenizer ( const Settings * settings@var1779 , ErrorLogger * errorLogger@var1780 ) ;
92: ~ Tokenizer ( ) ;
93:
94: void setTimerResults ( TimerResults * tr@var1781 ) {
95: mTimerResults@var1901 =@expr1073745765 tr@var1781 ;
96: }
97:
98:
99: bool isC ( ) const {
100: return list@var1879 .@expr1073745766 isC (@expr1073745767 ) ;
101: }
102:
103:
104: bool isCPP ( ) const {
105: return list@var1879 .@expr1073745768 isCPP (@expr1073745769 ) ;
106: }
107:
|
113:
114: bool isScopeNoReturn ( const Token * endScopeToken@var1782 , bool * unknown@var1783 = nullptr ) const ;
115:
116: bool createTokens ( std :: istream & code@var1784 , const std :: string & FileName@var1785 ) ;
117: void createTokens ( simplecpp :: TokenList && tokenList@var1786 ) ;
118:
119: bool simplifyTokens1 ( const std :: string & configuration@var1787 ) ;
120:
|
140:
141: bool tokenize ( std :: istream & code@var1788 ,
142: const char FileName@var1789 [ ] ,
143: const std :: string & configuration@var1790 = emptyString@var1 ) ;
144:
145:
146: void setVarId ( ) ;
147: void setVarIdPass1 ( ) ;
148: void setVarIdPass2 ( ) ;
149:
|
158:
159: bool simplifyTokenList1 ( const char FileName@var1791 [ ] ) ;
160:
|
166:
167: bool simplifyTokenList2 ( ) ;
168:
|
173:
174: void simplifyHeadersAndUnusedTemplates ( ) ;
175:
|
178:
179: void removeExtraTemplateKeywords ( ) ;
180:
|
184:
185: void splitTemplateRightAngleBrackets ( bool check@var1792 ) ;
186:
|
202:
203: static void eraseDeadCode ( Token * begin@var1793 , const Token * end@var1794 ) ;
204:
|
209:
210: int sizeOfType ( const Token * type@var1795 ) const ;
211:
|
217:
218: bool isFunctionParameterPassedByValue ( const Token * fpar@var1796 ) const ;
219:
220:
221:
222: void simplifyAssignmentInFunctionCall ( ) ;
223:
224:
225: void simplifyAssignmentBlock ( ) ;
226:
|
231:
232: bool simplifyCalculations ( ) ;
233:
|
238:
239: void simplifyOffsetPointerDereference ( ) ;
240:
|
244:
245: void simplifyOffsetPointerReference ( ) ;
246:
247:
248: void arraySize ( ) ;
249:
250:
251:
252: void simplifyLabelsCaseDefault ( ) ;
253:
254:
255:
256: void simplifyCaseRange ( ) ;
257:
258:
259: void removeMacrosInGlobalScope ( ) ;
260:
261: void addSemicolonAfterUnknownMacro ( ) ;
262:
263:
264: void removePragma ( ) ;
265:
|
269:
270: void removeMacroInClassDef ( ) ;
271:
272:
273: void removeMacroInVarDecl ( ) ;
274:
275:
276: void removeRedundantAssignment ( ) ;
277:
|
281:
282: void simplifyRealloc ( ) ;
283:
284:
285: void sizeofAddParentheses ( ) ;
286:
|
291:
292: bool simplifySizeof ( ) ;
293:
|
297:
298: void simplifyVarDecl ( const bool only_k_r_fpar@var1797 ) ;
299: void simplifyVarDecl ( Token * tokBegin@var1798 , const Token * const tokEnd@var1799 , const bool only_k_r_fpar@var1800 ) ;
300:
|
304:
305: void simplifyInitVar ( ) ;
306: static Token * initVar ( Token * tok@var1801 ) ;
307:
|
313:
314: bool simplifyConstTernaryOp ( ) ;
315:
|
319:
320: void simplifyCompoundAssignment ( ) ;
321:
|
327:
328: void simplifyStaticConst ( ) ;
329:
|
335:
336: void simplifyIfAndWhileAssign ( ) ;
337:
|
341:
342: void simplifyVariableMultipleAssign ( ) ;
343:
|
350:
351: bool simplifyCAlternativeTokens ( ) ;
352:
|
358:
359: void simplifyComma ( ) ;
360:
|
363:
364: bool simplifyAddBraces ( ) ;
365:
|
371:
372: Token * simplifyAddBracesToCommand ( Token * tok@var1802 ) ;
373:
|
379:
380: Token * simplifyAddBracesPair ( Token * tok@var1803 , bool commandWithCondition@var1804 ) ;
381:
382:
383: void simplifyUsingToTypedef ( ) ;
384:
|
392:
393: void simplifyTypedef ( ) ;
394:
395:
396:
397: bool isMemberFunction ( const Token * openParen@var1805 ) const ;
398:
399:
400:
401: bool simplifyUsing ( ) ;
402:
|
405:
406: void simplifyCasts ( ) ;
407:
|
410:
411: void simplifyUndefinedSizeArray ( ) ;
412:
|
419:
420: bool simplifyKnownVariables ( ) ;
421:
|
425:
426: static bool simplifyKnownVariablesGetData ( int varid@var1806 , Token * * _tok2@var1807 , Token * * _tok3@var1808 , std :: string & value@var1809 , int & valueVarId@var1810 , bool & valueIsPointer@var1811 , bool floatvar@var1812 ) ;
427:
|
431:
432: bool simplifyKnownVariablesSimplify ( Token * * tok2@var1813 , Token * tok3@var1814 , int varid@var1815 , const std :: string & structname@var1816 , std :: string & value@var1817 , int valueVarId@var1818 , bool valueIsPointer@var1819 , const Token * const valueToken@var1820 , int indentlevel@var1821 ) const ;
433:
434:
435: void simplifyEmptyNamespaces ( ) ;
436:
|
439:
440: void simplifyFlowControl ( ) ;
441:
442:
443: void simplifyNestedStrcat ( ) ;
444:
445:
446: void elseif ( ) ;
447:
448:
449: void simplifyIfSwitchForInit ( ) ;
450:
|
454:
455: bool simplifyConditions ( ) ;
456:
|
461:
462: bool removeRedundantConditions ( ) ;
463:
|
467:
468: void removeRedundantFor ( ) ;
469:
|
473:
474: void removeRedundantSemicolons ( ) ;
475:
|
479:
480: bool simplifyFunctionReturn ( ) ;
481:
|
485:
486: void simplifyStructDecl ( ) ;
487:
|
496:
497: bool simplifyRedundantParentheses ( ) ;
498:
499: void simplifyCharAt ( ) ;
500:
501:
502: void simplifyReference ( ) ;
503:
|
507:
508: void simplifyFunctionParameters ( ) ;
509:
|
513:
514: void simplifyFunctionTryCatch ( ) ;
515:
|
518:
519: void simplifyTemplates ( ) ;
520:
521: void simplifyDoublePlusAndDoubleMinus ( ) ;
522:
523: void simplifyRedundantConsecutiveBraces ( ) ;
524:
525: void simplifyArrayAccessSyntax ( ) ;
526:
527: void simplifyParameterVoid ( ) ;
528:
529: void fillTypeSizes ( ) ;
530:
531: void combineOperators ( ) ;
532:
533: void combineStringAndCharLiterals ( ) ;
534:
535: void concatenateNegativeNumberAndAnyPositive ( ) ;
536:
537: void simplifyExternC ( ) ;
538:
539: void simplifyRoundCurlyParentheses ( ) ;
540:
541: void simplifyTypeIntrinsics ( ) ;
542:
543: void simplifySQL ( ) ;
544:
545: void checkForEnumsWithTypedef ( ) ;
546:
547: void findComplicatedSyntaxErrorsInTemplates ( ) ;
548:
|
551:
552: void simplifyMathFunctions ( ) ;
553:
|
556:
557: void simplifyMathExpressions ( ) ;
558:
|
564:
565: static std :: string simplifyString ( const std :: string & source@var1822 ) ;
566:
|
572:
573: const Token * isFunctionHead ( const Token * tok@var1823 , const std :: string & endsWith@var1824 ) const ;
574:
|
581:
582: static const Token * isFunctionHead ( const Token * tok@var1825 , const std :: string & endsWith@var1826 , bool cpp@var1827 ) ;
583:
584: void setPreprocessor ( const Preprocessor * preprocessor@var1828 ) {
585: mPreprocessor@var1902 =@expr1073745770 preprocessor@var1828 ;
586: }
587: const Preprocessor * getPreprocessor ( ) const {
588: return mPreprocessor@var1902 ;
589: }
590:
591: bool hasIfdef ( const Token * start@var1829 , const Token * end@var1830 ) const ;
592:
593: private:
594:
|
597:
598: void simplifyWhile0 ( ) ;
599:
|
602:
603: void simplifyErrNoInWhile ( ) ;
604:
|
607:
608: void simplifyFuncInWhile ( ) ;
609:
|
612:
613: void simplifyStd ( ) ;
614:
615:
616: void simplifyPointerToStandardType ( ) ;
617:
618:
619: void simplifyFunctionPointers ( ) ;
620:
|
624:
625: void cppcheckError ( const Token * tok@var1831 ) const ;
626:
|
629:
630: void createLinks ( ) ;
631:
|
634:
635: void createLinks2 ( ) ;
636:
637: public:
638:
639:
640: void syntaxError ( const Token * tok@var1832 , const std :: string & code@var1833 = "" ) const ;
641:
642:
643: void unmatchedToken ( const Token * tok@var1834 ) const ;
644:
645:
646: void syntaxErrorC ( const Token * tok@var1835 , const std :: string & what@var1836 ) const ;
647:
648:
649: void unknownMacroError ( const Token * tok1@var1837 ) const ;
650:
651: void unhandledCharLiteral ( const Token * tok@var1838 , const std :: string & msg@var1839 ) const ;
652:
653: private:
654:
655:
656: void unhandled_macro_class_x_y ( const Token * tok@var1840 ) const ;
657:
658:
659: void checkConfiguration ( ) const ;
660: void macroWithSemicolonError ( const Token * tok@var1841 , const std :: string & macroName@var1842 ) const ;
661:
|
664:
665: void validateC ( ) const ;
666:
|
670:
671: void validate ( ) const ;
672:
673:
674: void reportUnknownMacros ( ) const ;
675:
676:
677: void findGarbageCode ( ) const ;
678:
679:
680: static bool isGarbageExpr ( const Token * start@var1843 , const Token * end@var1844 , bool allowSemicolon@var1845 ) ;
681:
|
684:
685: void simplifyDeclspec ( ) ;
686:
|
689:
690: void simplifyCallingConvention ( ) ;
691:
|
694:
695: void simplifyAttribute ( ) ;
696:
|
699:
700: void simplifyCppcheckAttribute ( ) ;
701:
702:
703: void removeAlignas ( ) ;
704:
705:
706: void simplifySpaceshipOperator ( ) ;
707:
|
710:
711: void simplifyKeyword ( ) ;
712:
|
715:
716: void simplifyAsm ( ) ;
717:
|
720:
721: void simplifyAsm2 ( ) ;
722:
|
725:
726: void simplifyAt ( ) ;
727:
|
730:
731: void simplifyBitfields ( ) ;
732:
|
735:
736: void removeUnnecessaryQualification ( ) ;
737:
|
740:
741: void simplifyNamespaceStd ( ) ;
742:
|
749:
750: void simplifyMicrosoftMemoryFunctions ( ) ;
751:
|
755:
756: void simplifyMicrosoftStringFunctions ( ) ;
757:
|
760:
761: void simplifyBorland ( ) ;
762:
|
765:
766: void simplifyQtSignalsSlots ( ) ;
767:
|
771:
772: void simplifyOperatorName ( ) ;
773:
774:
775: void simplifyOverloadedOperators ( ) ;
776:
|
779:
780: void simplifyCPPAttribute ( ) ;
781:
|
785:
786: bool simplifyStrlen ( ) ;
787:
|
790:
791: void simplifyNamespaceAliases ( ) ;
792:
|
795:
796: void simplifyNestedNamespace ( ) ;
797:
|
802:
803: void simplifyCoroutines ( ) ;
804:
|
807:
808: void prepareTernaryOpForAST ( ) ;
809:
|
812:
813: void reportError ( const Token * tok@var1846 , const Severity :: SeverityType severity@var1847 , const std :: string & id@var1848 , const std :: string & msg@var1849 , bool inconclusive@var1850 = false ) const ;
814: void reportError ( const std :: list < const Token * > & callstack@var1851 , Severity :: SeverityType severity@var1852 , const std :: string & id@var1853 , const std :: string & msg@var1854 , bool inconclusive@var1855 = false ) const ;
815:
816: bool duplicateTypedef ( Token * * tokPtr@var1856 , const Token * name@var1857 , const Token * typeDef@var1858 ) const ;
817:
818: void unsupportedTypedef ( const Token * tok@var1859 ) const ;
819:
820: void setVarIdClassDeclaration ( const Token * const startToken@var1860 ,
821: const VariableMap & variableMap@var1861 ,
822: const int scopeStartVarId@var1862 ,
823: std :: map < int , std :: map < std :: string , int > > & structMembers@var1863 ) ;
824:
825: void setVarIdStructMembers ( Token * * tok1@var1864 ,
826: std :: map < int , std :: map < std :: string , int > > & structMembers@var1865 ,
827: int * varId@var1866 ) const ;
828:
829: void setVarIdClassFunction ( const std :: string & classname@var1867 ,
830: Token * const startToken@var1868 ,
831: const Token * const endToken@var1869 ,
832: const std :: map < std :: string , int > & varlist@var1870 ,
833: std :: map < int , std :: map < std :: string , int > > & structMembers@var1871 ,
834: int * varId_@var1872 ) ;
835:
|
839:
840: void simplifyReturnStrncat ( ) ;
841:
|
844:
845: void printUnknownTypes ( ) const ;
846:
847:
848: static const Token * findSQLBlockEnd ( const Token * tokSQLStart@var1873 ) ;
849:
850: bool operatorEnd ( const Token * tok@var1874 ) const ;
851:
852: public:
853:
854:
855: bool codeWithTemplates ( ) const {
856: return mCodeWithTemplates@var1900 ;
857: }
858:
859:
860: void setSettings ( const Settings * settings@var1875 ) {
861: mSettings@var1886 =@expr1073745771 settings@var1875 ;
862: list@var1879 .@expr1073745772 setSettings (@expr1073745773 settings@var1875 ) ;
863: }
864:
865: const SymbolDatabase * getSymbolDatabase ( ) const {
866: return mSymbolDatabase@var1888 ;
867: }
868: void createSymbolDatabase ( ) ;
869: void deleteSymbolDatabase ( ) ;
870:
|
875:
876: void printDebugOutput ( int simplification@var1876 ) const ;
877:
878: void dump ( std :: ostream & out@var1877 ) const ;
879:
880: Token * deleteInvalidTypedef ( Token * typeDef@var1878 ) ;
881:
|
885:
886: int varIdCount ( ) const {
887: return mVarId@var1898 ;
888: }
889:
|
892:
893: TokenList list@var1879 ;
894:
895: const Token * tokens ( ) const {
896: return list@var1879 .@expr1073745774 front (@expr1073745775 ) ;
897: }
898:
|
903:
904: static bool isZeroNumber ( const std :: string & s@var1880 ) ;
905:
|
910:
911: static bool isOneNumber ( const std :: string & s@var1881 ) ;
912:
|
917:
918: static bool isTwoNumber ( const std :: string & s@var1882 ) ;
919:
|
925:
926: static const Token * startOfExecutableScope ( const Token * tok@var1883 ) ;
927:
|
931:
932: static bool isMaxTime ( ) {
933: return false ;
934:
935: }
936:
937: const Settings * getSettings ( ) const {
938: return mSettings@var1886 ;
939: }
940:
941: void calculateScopes ( ) ;
942:
943:
944: Tokenizer ( const Tokenizer & ) = delete ;
945:
946:
947: Tokenizer & operator= ( const Tokenizer & ) = delete ;
948:
949: private:
950: Token * processFunc ( Token * tok2@var1884 , bool inOperator@var1885 ) const ;
951:
|
955:
956: int newVarId ( ) {
957: return ++@expr1073745776 mVarId@var1898 ;
958: }
959:
960:
961: void setPodTypes ( ) ;
962:
963:
964: const Settings * mSettings@var1886 ;
965:
966:
967: ErrorLogger * const mErrorLogger@var1887 ;
968:
969:
970: SymbolDatabase * mSymbolDatabase@var1888 ;
971:
972: TemplateSimplifier * mTemplateSimplifier@var1889 ;
973:
974:
975:
976: std :: string mConfiguration@var1890 ;
977:
978:
979: std :: map < std :: string , int > mTypeSize@var1891 ;
980:
981: struct TypedefInfo {
982: std :: string name@var1892 ;
983: std :: string filename@var1893 ;
984: int lineNumber@var1894 ;
985: int column@var1895 ;
986: bool used@var1896 ;
987: } ;
988: std :: vector < TypedefInfo > mTypedefInfo@var1897 ;
989:
990:
991: int mVarId@var1898 ;
992:
993:
994: int mUnnamedCount@var1899 ;
995:
|
999:
1000: bool mCodeWithTemplates@var1900 ;
1001:
|
1004:
1005: TimerResults * mTimerResults@var1901 ;
1006:
|
1011:
1012: const Preprocessor * mPreprocessor@var1902 ;
1013: } ;

##file cppcheck-2.8/lib/summaries.cpp

1:
|
34:
35: std :: string Summaries :: create ( const Tokenizer * tokenizer@var1903 , const std :: string & cfg@var1904 )
36: {
37: const SymbolDatabase * symbolDatabase@var1905 ; symbolDatabase@var1905 =@expr1073745779 tokenizer@var1903 .@expr1073745780 getSymbolDatabase (@expr1073745781 ) ;
38: const Settings * settings@var1906 ; settings@var1906 =@expr1073745782 tokenizer@var1903 .@expr1073745783 getSettings (@expr1073745784 ) ;
39:
40: std ::@expr1073745785 ostringstream ostr@var1907 ;
41: for (@expr1073745786 const Scope *@expr3963 scope@var1908 :@expr1073745788 symbolDatabase@var1905 .@expr1073745789 functionScopes@var1909 ) {
42: const Function * f@var1910 ; f@var1910 =@expr1073745790 scope@var1908 .@expr1073745791 function@var1911 ;
43: if (@expr1073745792 !@expr1073745793 f@var1910 ) {
44: continue ; }
45:
46:
47: std ::@expr1073745794 set < std ::@expr3971 string > noreturn@var1912 ;
48: std ::@expr1073745796 set < std ::@expr3971 string > globalVars@var1913 ;
49: std ::@expr1073745798 set < std ::@expr3971 string > calledFunctions@var1914 ;
50: for (@expr1073745800 const Token *@expr3963 tok@var1915 =@expr1073745802 scope@var1908 .@expr1073745803 bodyStart@var1916 ; tok@var1915 !=@expr1073745804 scope@var1908 .@expr1073745805 bodyEnd@var1917 ; tok@var1915 =@expr1073745806 tok@var1915 .@expr1073745807 next (@expr1073745808 ) ) {
51: if (@expr1073745809 tok@var1915 .@expr3986 variable (@expr3987 ) &&@expr1073745812 tok@var1915 .@expr3986 variable (@expr3987 ) .@expr1073745815 isGlobal (@expr1073745816 ) ) {
52: globalVars@var1913 .@expr1073745817 insert (@expr1073745818 tok@var1915 .@expr3986 variable (@expr3987 ) .@expr1073745821 name (@expr1073745822 ) ) ; }
53: if (@expr1073745823 Token ::@expr1073745824 Match (@expr1073745825 tok@var1915 , "%name% (" ) &&@expr1073745826 !@expr1073745827 Token ::@expr4004 simpleMatch (@expr1073745829 tok@var1915 .@expr4006 linkAt (@expr4007 1 ) , ") {" ) ) {
54: calledFunctions@var1914 .@expr1073745832 insert (@expr1073745833 tok@var1915 .@expr4010 str (@expr4011 ) ) ;
55: if (@expr1073745836 Token ::@expr4004 simpleMatch (@expr1073745838 tok@var1915 .@expr4006 linkAt (@expr4007 1 ) , ") ; }" ) ) {
56: noreturn@var1912 .@expr1073745841 insert (@expr1073745842 tok@var1915 .@expr4010 str (@expr4011 ) ) ; }
57: }
58: }
59:
60:
61: auto join@var1918 ; join@var1918 =@expr1073745845 [@expr1073745846 ] (@expr1073745847 const std ::@expr3971 set < std ::@expr3971 string > &@expr4026 data@var1919 ) .@expr1073745851 std ::@expr3971 string {
62: std ::@expr1073745853 string ret@var1920 ;
63: const char *@expr3963 sep@var1921 =@expr1073745855 "" ;
64: for (@expr1073745856 const std ::@expr3971 string &@expr4026 d@var1922 :@expr1073745859 data@var1919 )
65: {
66: ret@var1920 +=@expr1073745860 sep@var1921 +@expr1073745861 d@var1922 ;
67: sep@var1921 =@expr1073745862 "," ;
68: }
69: return ret@var1920 ;
70: } ;
71:
72: ostr@var1907 <<@expr1073745863 f@var1910 .@expr1073745864 name (@expr1073745865 ) ;
73: if (@expr1073745866 !@expr1073745867 globalVars@var1913 .@expr1073745868 empty (@expr1073745869 ) ) {
74: ostr@var1907 <<@expr1073745870 " global:[" <<@expr1073745871 join@var1918 (@expr1073745872 globalVars@var1913 ) <<@expr1073745873 "]" ; }
75: if (@expr1073745874 !@expr1073745875 calledFunctions@var1914 .@expr1073745876 empty (@expr1073745877 ) ) {
76: ostr@var1907 <<@expr1073745878 " call:[" <<@expr1073745879 join@var1918 (@expr1073745880 calledFunctions@var1914 ) <<@expr1073745881 "]" ; }
77: if (@expr1073745882 !@expr1073745883 noreturn@var1912 .@expr1073745884 empty (@expr1073745885 ) ) {
78: ostr@var1907 <<@expr1073745886 " noreturn:[" <<@expr1073745887 join@var1918 (@expr1073745888 noreturn@var1912 ) <<@expr1073745889 "]" ; }
79: ostr@var1907 <<@expr1073745890 std ::@expr1073745891 endl@expr1073745777 ;
80: }
81:
82: if (@expr1073745892 !@expr1073745893 settings@var1906 .@expr4070 buildDir@var1923 .@expr1073745895 empty (@expr1073745896 ) ) {
83: std ::@expr1073745897 string filename@var1924 ; filename@var1924 =@expr1073745898 AnalyzerInformation ::@expr1073745899 getAnalyzerInfoFile (@expr1073745900 settings@var1906 .@expr4070 buildDir@var1923 , tokenizer@var1903 .@expr1073745902 list@var1925 .@expr1073745903 getSourceFilePath (@expr1073745904 ) , cfg@var1904 ) ;
84: std ::@expr4081 string ::@expr1073745906 size_type pos@var1926 ; pos@var1926 =@expr1073745907 filename@var1924 .@expr1073745908 rfind (@expr1073745909 ".a" ) ;
85: if (@expr1073745910 pos@var1926 !=@expr1073745911 std ::@expr4081 string ::@expr1073745913 npos@expr1073745778 ) {
86: filename@var1924 [@expr1073745914 pos@var1926 +@expr1073745915 1 ] =@expr1073745916 's' ;
87: std ::@expr1073745917 ofstream fout@var1927 (@expr1073745918 filename@var1924 ) ;
88: fout@var1927 <<@expr1073745919 ostr@var1907 .@expr4096 str (@expr4097 ) ;
89: }
90: }
91:
92: return ostr@var1907 .@expr4096 str (@expr4097 ) ;
93: }
94:
|
97:
98: static std :: vector < std :: string > getSummaryFiles ( const std :: string & filename@var1928 )
99: {
100: std ::@expr1073745924 vector < std ::@expr1073745925 string > ret@var1929 ;
101: std ::@expr1073745926 ifstream fin@var1930 (@expr1073745927 filename@var1928 ) ;
102: if (@expr1073745928 !@expr1073745929 fin@var1930 .@expr1073745930 is_open (@expr1073745931 ) ) {
103: return ret@var1929 ; }
104: std ::@expr1073745932 string line@var1931 ;
105: while (@expr1073745933 std ::@expr1073745934 getline (@expr1073745935 fin@var1930 , line@var1931 ) ) {
106: std ::@expr4112 string ::@expr1073745937 size_type dotA@var1932 ; dotA@var1932 =@expr1073745938 line@var1931 .@expr4115 find (@expr1073745940 ".a" ) ;
107: std ::@expr4112 string ::@expr1073745942 size_type colon@var1933 ; colon@var1933 =@expr1073745943 line@var1931 .@expr4115 find (@expr1073745945 ":" ) ;
108: if (@expr1073745946 colon@var1933 >@expr1073745947 line@var1931 .@expr1073745948 size (@expr1073745949 ) ||@expr1073745950 dotA@var1932 >@expr1073745951 colon@var1933 ) {
109: continue ; }
110: std ::@expr1073745952 string f@var1934 ; f@var1934 =@expr1073745953 line@var1931 .@expr1073745954 substr (@expr1073745955 0 , colon@var1933 ) ;
111: f@var1934 [@expr1073745956 dotA@var1932 +@expr1073745957 1 ] =@expr1073745958 's' ;
112: ret@var1929 .@expr1073745959 push_back (@expr1073745960 f@var1934 ) ;
113: }
114: return ret@var1929 ;
115: }
116:
117: static std :: vector < std :: string > getSummaryData ( const std :: string & line@var1935 , const std :: string & data@var1936 )
118: {
119: std ::@expr1073745962 vector < std ::@expr4139 string > ret@var1937 ;
120: const std ::@expr4139 string ::@expr4139 size_type start@var1938 =@expr1073745966 line@var1935 .@expr4143 find (@expr1073745968 " " +@expr1073745969 data@var1936 +@expr1073745970 ":[" ) ;
121: if (@expr1073745971 start@var1938 ==@expr1073745972 std ::@expr4149 string ::@expr1073745974 npos@expr1073745961 ) {
122: return ret@var1937 ; }
123: const std ::@expr4139 string ::@expr4139 size_type end@var1939 =@expr1073745977 line@var1935 .@expr4143 find (@expr1073745979 "]" , start@var1938 ) ;
124: if (@expr1073745980 end@var1939 >=@expr1073745981 line@var1935 .@expr1073745982 size (@expr1073745983 ) ) {
125: return ret@var1937 ; }
126:
127: std ::@expr4149 string ::@expr1073745985 size_type pos1@var1940 ; pos1@var1940 =@expr1073745986 start@var1938 +@expr1073745987 3 +@expr1073745988 data@var1936 .@expr1073745989 size (@expr1073745990 ) ;
128: while (@expr1073745991 pos1@var1940 <@expr1073745992 end@var1939 ) {
129: std ::@expr4149 string ::@expr1073745994 size_type pos2@var1941 ; pos2@var1941 =@expr1073745995 line@var1935 .@expr1073745996 find_first_of (@expr1073745997 ",]" , pos1@var1940 ) ;
130: ret@var1937 .@expr1073745998 push_back (@expr1073745999 line@var1935 .@expr1073746000 substr (@expr1073746001 pos1@var1940 , pos2@var1941 -@expr1073746002 pos1@var1940 -@expr1073746003 1 ) ) ;
131: pos1@var1940 =@expr1073746004 pos2@var1941 +@expr1073746005 1 ;
132: }
133:
134: return ret@var1937 ;
135: }
136:
137: static void removeFunctionCalls ( const std :: string & calledFunction@var1942 ,
138: std :: map < std :: string , std :: vector < std :: string > > & functionCalledBy@var1943 ,
139: std :: map < std :: string , std :: vector < std :: string > > & functionCalls@var1944 ,
140: std :: vector < std :: string > & add@var1945 )
141: {
142: std ::@expr1073746006 vector < std ::@expr4183 string > calledBy@var1946 ; calledBy@var1946 =@expr1073746008 functionCalledBy@var1943 [@expr1073746009 calledFunction@var1942 ] ;
143: functionCalledBy@var1943 .@expr1073746010 erase (@expr1073746011 calledFunction@var1942 ) ;
144: for (@expr1073746012 const std ::@expr4183 string &@expr1073746014 c@var1947 :@expr1073746015 calledBy@var1946 ) {
145: std ::@expr1073746016 vector < std ::@expr4183 string > & calls@var1948 =@expr1073746018 functionCalls@var1944 [@expr1073746019 c@var1947 ] ;
146: calls@var1948 .@expr1073746020 erase (@expr1073746021 std ::@expr1073746022 remove (@expr1073746023 calls@var1948 .@expr1073746024 begin (@expr1073746025 ) , calls@var1948 .@expr4202 end (@expr4203 ) , calledFunction@var1942 ) , calls@var1948 .@expr4202 end (@expr4203 ) ) ;
147: if (@expr1073746030 calls@var1948 .@expr1073746031 empty (@expr1073746032 ) ) {
148: add@var1945 .@expr1073746033 push_back (@expr1073746034 calledFunction@var1942 ) ;
149: removeFunctionCalls (@expr1073746035 c@var1947 , functionCalledBy@var1943 , functionCalls@var1944 , add@var1945 ) ;
150: }
151: }
152: }
153:
154: void Summaries :: loadReturn ( const std :: string & buildDir@var1949 , std :: set < std :: string > & summaryReturn@var1950 )
155: {
156: if (@expr1073746037 buildDir@var1949 .@expr1073746038 empty (@expr1073746039 ) ) {
157: return ; }
158:
159: std ::@expr1073746040 vector < std ::@expr4217 string > return1@var1951 ;
160: std ::@expr1073746042 map < std ::@expr4217 string , std ::@expr4217 vector < std ::@expr4217 string > > functionCalls@var1952 ;
161: std ::@expr1073746046 map < std ::@expr4217 string , std ::@expr4217 vector < std ::@expr4217 string > > functionCalledBy@var1953 ;
162:
163:
164: std ::@expr1073746050 vector < std ::@expr4217 string > summaryFiles@var1954 ; summaryFiles@var1954 =@expr1073746052 getSummaryFiles (@expr1073746053 buildDir@var1949 +@expr1073746054 "/files.txt" ) ;
165: for (@expr1073746055 const std ::@expr4217 string &@expr4233 filename@var1955 :@expr1073746058 summaryFiles@var1954 ) {
166: std ::@expr1073746059 ifstream fin@var1956 (@expr1073746060 buildDir@var1949 +@expr1073746061 '/' +@expr1073746062 filename@var1955 ) ;
167: if (@expr1073746063 !@expr1073746064 fin@var1956 .@expr1073746065 is_open (@expr1073746066 ) ) {
168: continue ; }
169: std ::@expr1073746067 string line@var1957 ;
170: while (@expr1073746068 std ::@expr1073746069 getline (@expr1073746070 fin@var1956 , line@var1957 ) ) {
171:
172: const std ::@expr4217 string ::@expr4217 size_type pos1@var1958 =@expr1073746073 0 ;
173: const std ::@expr4217 string ::@expr4217 size_type pos2@var1959 =@expr1073746076 line@var1957 .@expr1073746077 find (@expr1073746078 " " , pos1@var1958 ) ;
174: const std ::@expr4217 string functionName@var1960 =@expr1073746080 (@expr1073746081 pos2@var1959 ==@expr1073746082 std ::@expr1073746083 string ::@expr1073746084 npos@expr1073746036 ) ?@expr1073746085 line@var1957 :@expr1073746086 line@var1957 .@expr1073746087 substr (@expr1073746088 0 , pos2@var1959 ) ;
175: std ::@expr1073746089 vector < std ::@expr4217 string > call@var1961 ; call@var1961 =@expr1073746091 getSummaryData (@expr1073746092 line@var1957 , "call" ) ;
176: functionCalls@var1952 [@expr1073746093 functionName@var1960 ] =@expr1073746094 call@var1961 ;
177: if (@expr1073746095 call@var1961 .@expr1073746096 empty (@expr1073746097 ) ) {
178: return1@var1951 .@expr1073746098 push_back (@expr1073746099 functionName@var1960 ) ; }
179: else {
180: for (@expr1073746100 const std ::@expr4217 string &@expr4233 c@var1962 :@expr1073746103 call@var1961 ) {
181: functionCalledBy@var1953 [@expr1073746104 c@var1962 ] .@expr1073746105 push_back (@expr1073746106 functionName@var1960 ) ;
182: }
183: }
184: }
185: }
186: summaryReturn@var1950 .@expr4283 insert (@expr1073746108 return1@var1951 .@expr1073746109 cbegin (@expr1073746110 ) , return1@var1951 .@expr1073746111 cend (@expr1073746112 ) ) ;
187:
188:
189: for (@expr1073746113 const std ::@expr4217 string &@expr4233 f@var1963 :@expr1073746116 return1@var1951 ) {
190: std ::@expr1073746117 vector < std ::@expr4217 string > return2@var1964 ;
191: removeFunctionCalls (@expr1073746119 f@var1963 , functionCalledBy@var1953 , functionCalls@var1952 , return2@var1964 ) ;
192: summaryReturn@var1950 .@expr4283 insert (@expr1073746121 return2@var1964 .@expr1073746122 cbegin (@expr1073746123 ) , return2@var1964 .@expr1073746124 cend (@expr1073746125 ) ) ;
193: }
194: }

##file cppcheck-2.8/lib/settings.h

12:
|
48:
49: class SimpleEnableGroup<Severity::SeverityType> {
50: uint32_t mFlags@var1965 ; mFlags@var1965 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1965 ;
54: }
55: void clear ( ) {
56: mFlags@var1965 =@expr1073746126 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1965 =@expr1073746127 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1966 ) {
62: if (@expr1073746128 enabled@var1966 ) {
63: fill (@expr1073746129 ) ; }
64: else {
65: clear (@expr1073746130 ) ; }
66: }
67: bool isEnabled ( Severity :: SeverityType flag@var1967 ) const {
68: return (@expr4307 mFlags@var1965 &@expr1073746132 (@expr4307 1U <<@expr1073746134 (@expr1073746135 uint32_t ) flag@var1967 ) ) !=@expr1073746136 0 ;
69: }
70: void enable ( Severity :: SeverityType flag@var1968 ) {
71: mFlags@var1965 |=@expr1073746137 (@expr1073746138 1U <<@expr1073746139 (@expr1073746140 uint32_t ) flag@var1968 ) ;
72: }
73: void disable ( Severity :: SeverityType flag@var1969 ) {
74: mFlags@var1965 &=@expr1073746141 ~@expr1073746142 (@expr1073746143 1U <<@expr1073746144 (@expr1073746145 uint32_t ) flag@var1969 ) ;
75: }
76: void setEnabled ( Severity :: SeverityType flag@var1970 , bool enabled@var1971 ) {
77: if (@expr1073746146 enabled@var1971 ) {
78: enable (@expr1073746147 flag@var1970 ) ; }
79: else {
80: disable (@expr1073746148 flag@var1970 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Certainty::CertaintyLevel> {
50: uint32_t mFlags@var1972 ; mFlags@var1972 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1972 ;
54: }
55: void clear ( ) {
56: mFlags@var1972 =@expr1073746149 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1972 =@expr1073746150 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1973 ) {
62: if (@expr1073746151 enabled@var1973 ) {
63: fill (@expr1073746152 ) ; }
64: else {
65: clear (@expr1073746153 ) ; }
66: }
67: bool isEnabled ( Certainty :: CertaintyLevel flag@var1974 ) const {
68: return (@expr4330 mFlags@var1972 &@expr1073746155 (@expr4330 1U <<@expr1073746157 (@expr1073746158 uint32_t ) flag@var1974 ) ) !=@expr1073746159 0 ;
69: }
70: void enable ( Certainty :: CertaintyLevel flag@var1975 ) {
71: mFlags@var1972 |=@expr1073746160 (@expr1073746161 1U <<@expr1073746162 (@expr1073746163 uint32_t ) flag@var1975 ) ;
72: }
73: void disable ( Certainty :: CertaintyLevel flag@var1976 ) {
74: mFlags@var1972 &=@expr1073746164 ~@expr1073746165 (@expr1073746166 1U <<@expr1073746167 (@expr1073746168 uint32_t ) flag@var1976 ) ;
75: }
76: void setEnabled ( Certainty :: CertaintyLevel flag@var1977 , bool enabled@var1978 ) {
77: if (@expr1073746169 enabled@var1978 ) {
78: enable (@expr1073746170 flag@var1977 ) ; }
79: else {
80: disable (@expr1073746171 flag@var1977 ) ; }
81: }
82: } ;
49: class SimpleEnableGroup<Checks::CheckList> {
50: uint32_t mFlags@var1979 ; mFlags@var1979 = 0 ;
51: public:
52: uint32_t intValue ( ) const {
53: return mFlags@var1979 ;
54: }
55: void clear ( ) {
56: mFlags@var1979 =@expr1073746172 0 ;
57: }
58: void fill ( ) {
59: mFlags@var1979 =@expr1073746173 0xFFFFFFFF ;
60: }
61: void setEnabledAll ( bool enabled@var1980 ) {
62: if (@expr1073746174 enabled@var1980 ) {
63: fill (@expr1073746175 ) ; }
64: else {
65: clear (@expr1073746176 ) ; }
66: }
67: bool isEnabled ( Checks :: CheckList flag@var1981 ) const {
68: return (@expr4353 mFlags@var1979 &@expr1073746178 (@expr4353 1U <<@expr1073746180 (@expr1073746181 uint32_t ) flag@var1981 ) ) !=@expr1073746182 0 ;
69: }
70: void enable ( Checks :: CheckList flag@var1982 ) {
71: mFlags@var1979 |=@expr1073746183 (@expr1073746184 1U <<@expr1073746185 (@expr1073746186 uint32_t ) flag@var1982 ) ;
72: }
73: void disable ( Checks :: CheckList flag@var1983 ) {
74: mFlags@var1979 &=@expr1073746187 ~@expr1073746188 (@expr1073746189 1U <<@expr1073746190 (@expr1073746191 uint32_t ) flag@var1983 ) ;
75: }
76: void setEnabled ( Checks :: CheckList flag@var1984 , bool enabled@var1985 ) {
77: if (@expr1073746192 enabled@var1985 ) {
78: enable (@expr1073746193 flag@var1984 ) ; }
79: else {
80: disable (@expr1073746194 flag@var1984 ) ; }
81: }
82: } ;



##Value flow
Line 44
  >= always {!<=-1,!>=2}
  64 always 64
Line 46
  - possible >=-4611686018427387904
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
Line 50
  >= always {!<=-1,!>=2}
  64 always 64
Line 51
  ~ always !<=-1
  0ULL always 0
  >> always !<=-1
  1 always 1
Line 52
  1LL always 1
  << possible <=4611686018427387904
  bit {!>=64,<=63}
  - {!>=63,<=62}
  1 always 1
  - {<=4611686018427387903,!>=4611686018427387904}
  1LL always 1
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 62
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 63
  intMax always !<=-1
  intMax always !<=-1
  = always !<=-1
Line 64
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  intMax always !<=-1
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  <= always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 72
  longMax always !<=-1
  longMax always !<=-1
  = always !<=-1
Line 73
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longMax always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  value always !<=-1
Line 77
  longLongMax always !<=-1
  longLongMax always !<=-1
  = always !<=-1
Line 78
  return always {!<=-1,!>=2}
  value always !<=-1
  <= always {!<=-1,!>=2}
  longLongMax always !<=-1
Line 103
  Unspecified always 0
Line 104
  Native always 1
Line 105
  Win32A always 2
Line 106
  Win32W always 3
Line 107
  Win64 always 4
Line 108
  Unix32 always 5
Line 109
  Unix64 always 6
Line 110
  PlatformFile always 7
Line 117
  ( always {!<=-1,!>=2}
Line 125
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 134
  ( always {!<=-1,!>=2}
Line 135
  return always {!<=-1,!>=2}
  platformType possible {3,4}
  == {!<=-1,!>=2,0}
  Win32A always 2
  || always {!<=-1,!>=2}
Line 136
  platformType {4,!2}
  == {!<=-1,!>=2,0}
  Win32W always 3
  || always {!<=-1,!>=2}
Line 137
  platformType always {!2,!3}
  == always {!<=-1,!>=2}
  Win64 always 4
Line 146
  Unspecified always 0
Line 147
  "Unspecified" always "Unspecified"
Line 148
  Native always 1
Line 149
  "Native" always "Native"
Line 150
  Win32A always 2
Line 151
  "win32A" always "win32A"
Line 152
  Win32W always 3
Line 153
  "win32W" always "win32W"
Line 154
  Win64 always 4
Line 155
  "win64" always "win64"
Line 156
  Unix32 always 5
Line 157
  "unix32" always "unix32"
Line 158
  Unix64 always 6
Line 159
  "unix64" always "unix64"
Line 160
  PlatformFile always 7
Line 161
  "platformFile" always "platformFile"
Line 163
  "unknown" always "unknown"
Line 168
  1 always 1
Line 47
  ( always {!<=-1,!>=2}
Line 49
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 53
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 59
  ( always {!<=-1,!>=2}
Line 61
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
Line 67
  ( always !<=-1
Line 69
  return always !<=-1
  ( always !<=-1
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  str possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  str always !size=0
  == always {!<=-1,!>=2}
  c possible {39@41514,34@41770}
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  endlen always !<=-1
Line 80
  return always {!<=-1,!>=2}
  ( always !<=-1
  >= always {!<=-1,!>=2}
  endlen always !<=-1
  && always {!<=-1,!>=2}
  ( {!<=-1,>=symbolic=(endlen),!<=symbolic=(endlen-1)}
  - always !<=-1
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  endlen {!<=-1,<=symbolic=(str.size()),!>=symbolic=(str.size()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 84
  ( always {!<=-1,!>=2}
  ( always !0
  & always !0
Line 86
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
Line 89
  ( always {!<=-1,!>=2}
Line 91
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  q possible {39@162,34@163}
Line 92
  return always {!<=-1,!>=2}
  false always 0
Line 93
  ( always !<=-1
  + always !<=0
  1 always 1
  > always {!<=-1,!>=2}
  p possible {""@162,""@163,""@164,"U"@165,"U"@166,"u"@167,"u"@168,"u8"@169,"u8"@170}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( always !<=-1
  + always !<=0
  1 always 1
  == always {!<=-1,!>=2}
  0 always 0
Line 94
  return always {!<=-1,!>=2}
  true always 1
Line 95
  return always {!<=-1,!>=2}
  false always 0
Line 98
  ( always {!<=-1,!>=2}
Line 100
  "" always ""
  "u8" always "u8"
  "u" always "u"
  "U" always "U"
  "L" always "L"
Line 102
  ( always {!<=-1,!>=2}
  q possible {39@39,34@40}
Line 103
  return always {!<=-1,!>=2}
  true always 1
Line 105
  return always {!<=-1,!>=2}
  false always 0
Line 108
  ( always {!<=-1,!>=2}
Line 110
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
Line 113
  ( always {!<=-1,!>=2}
Line 115
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
Line 120
  quotePos always !<=-1
  = always !<=-1
  ( always !<=-1
  q possible {39@36,34@38}
Line 121
  quotePos {symbolic=(str.find(q)),!<=-1}
  + always !<=0
  1U always 1
  ( always !<=-1
  - always !<=-1
  quotePos {symbolic=(str.find(q)),!<=-1}
  - always !<=-1
  2U always 2
Line 126
  ( always {!<=-1,!>=2}
Line 127
  '"' always 34
Line 128
  "" always ""
Line 133
  ( always {!<=-1,!>=2}
Line 134
  '\'' always 39
Line 135
  "" always ""
Line 140
  i possible {2,3}
  == {!<=-1,!>=2,0}
  1 always 1
Line 141
  "st" always "st"
Line 142
  i {3,!1}
  == {!<=-1,!>=2,0}
  2 always 2
Line 143
  "nd" always "nd"
Line 144
  i always {!1,!2}
  == always {!<=-1,!>=2}
  3 always 3
Line 145
  "rd" always "rd"
Line 146
  "th" always "th"
Line 151
  ( always {!<=-1,!>=2}
Line 153
  ( always {!<=-1,!>=2}
Line 155
  ( always {!<=-1,!>=2}
Line 40
  ( always {!<=-1,!>=2}
Line 41
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  0 always 0
Line 54
  UNKNOWN always 0
Line 55
  MISSING always 1
Line 56
  FAILURE always 2
Line 57
  COMPILE_DB always 3
Line 58
  VS_SLN always 4
Line 59
  VS_VCXPROJ always 5
Line 60
  BORLAND always 6
Line 61
  CPPCHECK_GUI always 7
Line 66
  :: always 0
  Unspecified always 0
  msc always {!<=-1,!>=2}
  false always 0
  useMfc always {!<=-1,!>=2}
  false always 0
Line 71
  msc always {!<=-1,!>=2}
  ? possible {";_MSC_VER=1900",""}
  ";_MSC_VER=1900" always ";_MSC_VER=1900"
  : always ""
  "" always ""
  useMfc always {!<=-1,!>=2}
  ? possible {";__AFXWIN_H__=1",""}
  ";__AFXWIN_H__=1" always ";__AFXWIN_H__=1"
  : always ""
  "" always ""
Line 78
  msc always {!<=-1,!>=2}
Line 79
  useMfc always {!<=-1,!>=2}
Line 108
  , always 0
  = always 0
  nullptr always 0
Line 110
  ( always {!<=-1,!>=2}
Line 111
  ( always {!<=-1,!>=2}
Line 112
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
Line 115
  ( always {!<=-1,!>=2}
Line 116
  ( always {!<=-1,!>=2}
Line 128
  8 always 8
  = always "project"
  "project" always "project"
Line 129
  8 always 8
  = always "version"
  "version" always "version"
Line 130
  2 always 2
  = always "1"
  "1" always "1"
Line 131
  9 always 9
  = always "builddir"
  "builddir" always "builddir"
Line 132
  14 always 14
  = always "importproject"
  "importproject" always "importproject"
Line 133
  23 always 23
  = always "analyze-all-vs-configs"
  "analyze-all-vs-configs" always "analyze-all-vs-configs"
Line 134
  7 always 7
  = always "parser"
  "parser" always "parser"
Line 135
  12 always 12
  = always "bug-hunting"
  "bug-hunting" always "bug-hunting"
Line 136
  11 always 11
  = always "includedir"
  "includedir" always "includedir"
Line 137
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 138
  5 always 5
  = always "name"
  "name" always "name"
Line 139
  8 always 8
  = always "defines"
  "defines" always "defines"
Line 140
  7 always 7
  = always "define"
  "define" always "define"
Line 141
  5 always 5
  = always "name"
  "name" always "name"
Line 142
  10 always 10
  = always "undefines"
  "undefines" always "undefines"
Line 143
  9 always 9
  = always "undefine"
  "undefine" always "undefine"
Line 144
  6 always 6
  = always "paths"
  "paths" always "paths"
Line 145
  4 always 4
  = always "dir"
  "dir" always "dir"
Line 146
  5 always 5
  = always "name"
  "name" always "name"
Line 147
  5 always 5
  = always "root"
  "root" always "root"
Line 148
  5 always 5
  = always "name"
  "name" always "name"
Line 149
  7 always 7
  = always "ignore"
  "ignore" always "ignore"
Line 150
  5 always 5
  = always "path"
  "path" always "path"
Line 151
  5 always 5
  = always "name"
  "name" always "name"
Line 152
  8 always 8
  = always "exclude"
  "exclude" always "exclude"
Line 153
  5 always 5
  = always "path"
  "path" always "path"
Line 154
  5 always 5
  = always "name"
  "name" always "name"
Line 155
  19 always 19
  = always "function-contracts"
  "function-contracts" always "function-contracts"
Line 156
  19 always 19
  = always "variable-contracts"
  "variable-contracts" always "variable-contracts"
Line 157
  10 always 10
  = always "libraries"
  "libraries" always "libraries"
Line 158
  8 always 8
  = always "library"
  "library" always "library"
Line 159
  9 always 9
  = always "platform"
  "platform" always "platform"
Line 160
  13 always 13
  = always "suppressions"
  "suppressions" always "suppressions"
Line 161
  12 always 12
  = always "suppression"
  "suppression" always "suppression"
Line 162
  6 always 6
  = always "addon"
  "addon" always "addon"
Line 163
  7 always 7
  = always "addons"
  "addons" always "addons"
Line 164
  5 always 5
  = always "tool"
  "tool" always "tool"
Line 165
  6 always 6
  = always "tools"
  "tools" always "tools"
Line 166
  5 always 5
  = always "tags"
  "tags" always "tags"
Line 167
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 168
  13 always 13
  = always "tag-warnings"
  "tag-warnings" always "tag-warnings"
Line 169
  4 always 4
  = always "tag"
  "tag" always "tag"
Line 170
  8 always 8
  = always "warning"
  "warning" always "warning"
Line 171
  5 always 5
  = always "hash"
  "hash" always "hash"
Line 172
  14 always 14
  = always "check-headers"
  "check-headers" always "check-headers"
Line 173
  23 always 23
  = always "check-unused-templates"
  "check-unused-templates" always "check-unused-templates"
Line 174
  14 always 14
  = always "max-ctu-depth"
  "max-ctu-depth" always "max-ctu-depth"
Line 175
  23 always 23
  = always "max-template-recursion"
  "max-template-recursion" always "max-template-recursion"
Line 176
  37 always 37
  = always "check-unknown-function-return-values"
  "check-unknown-function-return-values" always "check-unknown-function-return-values"
Line 177
  11 always 11
  = always "clang-tidy"
  "clang-tidy" always "clang-tidy"
Line 178
  5 always 5
  = always "name"
  "name" always "name"
Line 179
  18 always 18
  = always "vs-configurations"
  "vs-configurations" always "vs-configurations"
Line 180
  7 always 7
  = always "config"
  "config" always "config"
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  checksum always !<=-1
Line 58
  , always {!<=-1,!>=2}
  verbose always {!<=-1,!>=2}
Line 36
  AST always 0
  SYNTAX always 1
  UNKNOWN_MACRO always 2
  INTERNAL always 3
  LIMIT always 4
  INSTANTIATION always 5
Line 37
  = always 3
  INTERNAL always 3
Line 47
  normal always 0
  inconclusive always 1
  safe always 2
  experimental always 3
Line 54
  unusedFunction always 0
  missingInclude always 1
  internalCheck always 2
Line 68
  none always 0
Line 74
  error always 1
Line 80
  warning always 2
Line 87
  style always 3
Line 93
  performance always 4
Line 101
  portability always 5
Line 108
  information always 6
Line 113
  debug always 7
Line 121
  ( possible lifetime[SubObject]=(cweId)
  cweId always !<=-1
  id always !<=-1
  cweId always !<=-1
Line 122
  id always !<=-1
Line 43
  INT always 0
  LONG always 1
  LONGLONG always 2
  FLOAT always 3
Line 44
  mIsUnsigned always {!<=-1,!>=2}
Line 51
  ( always {!<=-1,!>=2}
Line 52
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 54
  ( always {!<=-1,!>=2}
Line 55
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  FLOAT always 3
Line 59
  ( always {!<=-1,!>=2}
Line 74
  ( always !<=-1
Line 83
  ( always {!<=-1,!>=2}
Line 84
  ( always {!<=-1,!>=2}
Line 85
  ( always {!<=-1,!>=2}
Line 86
  ( always {!<=-1,!>=2}
Line 87
  ( always {!<=-1,!>=2}
Line 88
  ( always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  ( always {!<=-1,!>=2}
Line 91
  ( always {!<=-1,!>=2}
Line 92
  ( always {!<=-1,!>=2}
Line 102
  ( always {!<=-1,!>=2}
  , always 1
  supportMicrosoftExtensions always {!<=-1,!>=2}
  = always 1
  true always 1
Line 115
  ( always !<=-1
Line 116
  ( always {!<=-1,!>=2}
Line 117
  ( always {!<=-1,!>=2}
Line 118
  ( always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 120
  ( always {!<=-1,!>=2}
Line 121
  ( always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
Line 128
  ( always {!<=-1,!>=2}
Line 130
  ( always !<=-1
Line 137
  ( always {!<=-1,!>=2}
  , always !<=-1
  :: always !<=-1
  iPos always !<=-1
Line 38
  C89 always 0
  C99 always 1
  C11 always 2
  CLatest always 2
  = always 2
  C11 always 2
Line 41
  CPP03 always 0
  CPP11 always 1
  CPP14 always 2
  CPP17 always 3
  CPP20 always 4
  CPP23 always 5
  CPPLatest always 5
  = always 5
  CPP23 always 5
Line 47
  CLatest always 2
  CPPLatest always 5
Line 49
  ( always {!<=-1,!>=2}
Line 50
  = possible size=3
  str possible size=3
Line 51
  str possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C89" always "C89"
Line 52
  = always 0
  C89 always 0
Line 53
  return always {!<=-1,!>=2}
  true always 1
Line 55
  str possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C99" always "C99"
Line 56
  = always 1
  C99 always 1
Line 57
  return always {!<=-1,!>=2}
  true always 1
Line 59
  str possible size=3
  == always {!<=-1,!>=2}
  "c11" always "c11"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  "C11" always "C11"
Line 60
  = always 2
  C11 always 2
Line 61
  return always {!<=-1,!>=2}
  true always 1
Line 63
  return always {!<=-1,!>=2}
  false always 0
Line 67
  C89 always 0
Line 68
  "c89" always "c89"
Line 69
  C99 always 1
Line 70
  "c99" always "c99"
Line 71
  C11 always 2
Line 72
  "c11" always "c11"
Line 74
  "" always ""
Line 77
  std possible size=3
  == always {!<=-1,!>=2}
  "c89" always "c89"
Line 78
  :: always 0
  C89 always 0
Line 80
  std possible size=3
  == always {!<=-1,!>=2}
  "c99" always "c99"
Line 81
  :: always 1
  C99 always 1
Line 83
  == always {!<=-1,!>=2}
  "c11" always "c11"
Line 84
  :: always 2
  C11 always 2
Line 86
  :: always 2
  CLatest always 2
Line 88
  ( always {!<=-1,!>=2}
Line 92
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  stdValue possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 99
  CPP03 always 0
Line 100
  "c++03" always "c++03"
Line 101
  CPP11 always 1
Line 102
  "c++11" always "c++11"
Line 103
  CPP14 always 2
Line 104
  "c++14" always "c++14"
Line 105
  CPP17 always 3
Line 106
  "c++17" always "c++17"
Line 107
  CPP20 always 4
Line 108
  "c++20" always "c++20"
Line 109
  CPP23 always 5
Line 110
  "c++23" always "c++23"
Line 112
  "" always ""
Line 115
  std possible size=5
  == always {!<=-1,!>=2}
  "c++03" always "c++03"
Line 116
  :: always 0
  CPP03 always 0
Line 118
  std possible size=5
  == always {!<=-1,!>=2}
  "c++11" always "c++11"
Line 119
  :: always 1
  CPP11 always 1
Line 121
  std possible size=5
  == always {!<=-1,!>=2}
  "c++14" always "c++14"
Line 122
  :: always 2
  CPP14 always 2
Line 124
  std possible size=5
  == always {!<=-1,!>=2}
  "c++17" always "c++17"
Line 125
  :: always 3
  CPP17 always 3
Line 127
  std possible size=5
  == always {!<=-1,!>=2}
  "c++20" always "c++20"
Line 128
  :: always 4
  CPP20 always 4
Line 130
  == always {!<=-1,!>=2}
  "c++23" always "c++23"
Line 131
  :: always 5
  CPP23 always 5
Line 133
  :: always 5
  CPPLatest always 5
Line 58
  OK always 0
  FILE_NOT_FOUND always 1
  BAD_XML always 2
  UNKNOWN_ELEMENT always 3
  MISSING_ATTRIBUTE always 4
  BAD_ATTRIBUTE_VALUE always 5
  UNSUPPORTED_FORMAT always 6
  DUPLICATE_PLATFORM_TYPE always 7
  PLATFORM_TYPE_REDEFINED always 8
Line 62
  :: always 0
  OK always 0
Line 63
  ( possible lifetime[SubObject]=(e)
Line 65
  ( possible lifetime[SubObject]=(e)
  && always {!<=-1,!>=2}
Line 74
  ( always {!<=-1,!>=2}
  , always !<=-1
  len always !<=-1
Line 79
  none always 0
  malloc always 1
  calloc always 2
  strdup always 3
Line 84
  initData always {!<=-1,!>=2}
Line 118
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 124
  ? possible 0
  af always !0
  : always 0
  0 always 0
Line 138
  , always 1
  = always 1
  1 always 1
Line 141
  = possible 1
  reallocArg possible 1
Line 145
  , always {!<=-1,!>=2}
  noreturn always {!<=-1,!>=2}
Line 146
  = possible {1,0}
  noreturn always {!<=-1,!>=2}
  ? possible {1,0}
  :: always 1
  True always 1
  : always 0
  :: always 0
  False always 0
Line 149
  ( always {!<=-1,!>=2}
Line 152
  ( always {!<=-1,!>=2}
Line 153
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 155
  ( always {!<=-1,!>=2}
Line 156
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {1,0,!<=-1,!>=2}
  0 always 0
Line 160
  ( always {!<=-1,!>=2}
Line 161
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  id {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 163
  ( always {!<=-1,!>=2}
Line 164
  return always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  . {>=1,!<=0}
  & possible {0,1}
  1 always 1
  == {0,1,!<=-1,!>=2}
  1 always 1
Line 167
  ( always {!<=-1,!>=2}
Line 169
  ( always {!<=-1,!>=2}
Line 170
  ( always {!<=-1,!>=2}
Line 190
  ( always {!<=-1,!>=2}
Line 191
  ( always {!<=-1,!>=2}
Line 193
  NONE always 0
  DEFAULT always 1
  ERROR_CODE always 2
Line 201
  ( always {!<=-1,!>=2}
Line 202
  ( always {!<=-1,!>=2}
Line 204
  ( always {!<=-1,!>=2}
Line 209
  -1 always -1
Line 210
  -1 always -1
Line 211
  arrayLike_indexOp always {!<=-1,!>=2}
  false always 0
Line 212
  stdStringLike always {!<=-1,!>=2}
  false always 0
Line 213
  stdAssociativeLike always {!<=-1,!>=2}
  false always 0
Line 214
  opLessAllowed always {!<=-1,!>=2}
  true always 1
Line 215
  hasInitializerListConstructor always {!<=-1,!>=2}
  false always 0
Line 216
  unstableErase always {!<=-1,!>=2}
  false always 0
Line 217
  unstableInsert always {!<=-1,!>=2}
  false always 0
Line 218
  view always {!<=-1,!>=2}
  false always 0
Line 222
  RESIZE always 0
Line 223
  CLEAR always 1
Line 224
  PUSH always 2
Line 225
  POP always 3
Line 226
  FIND always 4
Line 227
  INSERT always 5
Line 228
  ERASE always 6
Line 229
  CHANGE_CONTENT always 7
Line 230
  CHANGE always 8
Line 231
  CHANGE_INTERNAL always 9
Line 232
  NO_ACTION always 10
Line 235
  AT_INDEX always 0
Line 236
  ITEM always 1
Line 237
  BUFFER always 2
Line 238
  BUFFER_NT always 3
Line 239
  START_ITERATOR always 4
Line 240
  END_ITERATOR always 5
Line 241
  ITERATOR always 6
Line 242
  SIZE always 7
Line 243
  EMPTY always 8
Line 244
  NO_YIELD always 9
Line 259
  arrayLike_indexOp always {!<=-1,!>=2}
Line 260
  stdStringLike always {!<=-1,!>=2}
Line 261
  stdAssociativeLike always {!<=-1,!>=2}
Line 262
  opLessAllowed always {!<=-1,!>=2}
Line 263
  hasInitializerListConstructor always {!<=-1,!>=2}
Line 264
  unstableErase always {!<=-1,!>=2}
Line 265
  unstableInsert always {!<=-1,!>=2}
Line 266
  view always {!<=-1,!>=2}
Line 269
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 270
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 271
  i always {!symbolic=(functions.end()),!end=0}
Line 272
  :: always 10
  NO_ACTION always 10
Line 276
  :: possible {symbolic=(functions.end()),end=0}
  i possible {symbolic=(functions.end()),end=0}
  = possible lifetime[Iterator]=(functions)
  ( possible lifetime[Iterator]=(functions)
Line 277
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(functions),end=0}
Line 278
  i always {!symbolic=(functions.end()),!end=0}
Line 279
  :: always 9
  NO_YIELD always 9
Line 286
  , always 0
  iterator always {!<=-1,!>=2}
  = always 0
  false always 0
Line 287
  , always 0
  = always 0
  nullptr always 0
Line 292
  notbool always {!<=-1,!>=2}
  false always 0
Line 293
  notnull always {!<=-1,!>=2}
  false always 0
Line 294
  -1 always -1
Line 295
  formatstr always {!<=-1,!>=2}
  false always 0
Line 296
  strz always {!<=-1,!>=2}
  false always 0
Line 297
  optional always {!<=-1,!>=2}
  false always 0
Line 298
  variadic always {!<=-1,!>=2}
  false always 0
Line 302
  notbool always {!<=-1,!>=2}
Line 303
  notnull always {!<=-1,!>=2}
Line 305
  formatstr always {!<=-1,!>=2}
Line 306
  strz always {!<=-1,!>=2}
Line 307
  optional always {!<=-1,!>=2}
Line 308
  variadic always {!<=-1,!>=2}
Line 313
  0 always 0
  it always {!<=-1,!>=2}
  false always 0
  first always {!<=-1,!>=2}
  false always 0
  last always {!<=-1,!>=2}
  false always 0
Line 316
  it always {!<=-1,!>=2}
Line 317
  first always {!<=-1,!>=2}
Line 318
  last always {!<=-1,!>=2}
Line 324
  NONE always 0
  STRLEN always 1
  ARGVALUE always 2
  SIZEOF always 3
  MUL always 4
  VALUE always 5
Line 325
  ( possible lifetime[SubObject]=(t)
  0 always 0
  0 always 0
Line 334
  DIR_IN always 0
Line 335
  DIR_OUT always 1
Line 336
  DIR_INOUT always 2
Line 337
  DIR_UNKNOWN always 3
Line 344
  use always {!<=-1,!>=2}
Line 345
  leakignore always {!<=-1,!>=2}
Line 346
  isconst always {!<=-1,!>=2}
Line 347
  ispure always {!<=-1,!>=2}
Line 349
  ignore always {!<=-1,!>=2}
Line 350
  formatstr always {!<=-1,!>=2}
Line 351
  formatstr_scan always {!<=-1,!>=2}
Line 352
  formatstr_secure always {!<=-1,!>=2}
Line 356
  use always {!<=-1,!>=2}
  false always 0
Line 357
  leakignore always {!<=-1,!>=2}
  false always 0
Line 358
  isconst always {!<=-1,!>=2}
  false always 0
Line 359
  ispure always {!<=-1,!>=2}
  false always 0
Line 360
  :: always 0
  NONE always 0
Line 361
  ignore always {!<=-1,!>=2}
  false always 0
Line 362
  formatstr always {!<=-1,!>=2}
  false always 0
Line 363
  formatstr_scan always {!<=-1,!>=2}
  false always 0
Line 364
  formatstr_secure always {!<=-1,!>=2}
  false always 0
Line 365
  :: always 10
  NO_ACTION always 10
Line 366
  :: always 9
  NO_YIELD always 9
Line 372
  ( always {!<=-1,!>=2}
Line 373
  ( always {!<=-1,!>=2}
Line 374
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  pure always {!<=-1,!>=2}
Line 375
  ( always {!<=-1,!>=2}
Line 377
  ( always {!<=-1,!>=2}
Line 379
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  notbool always {!<=-1,!>=2}
Line 382
  ( always {!<=-1,!>=2}
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  nullptr always 0
Line 385
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  formatstr always {!<=-1,!>=2}
Line 390
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  strz always {!<=-1,!>=2}
Line 395
  ( always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 400
  arg always !0
Line 404
  le always 0
  lt always 1
  eq always 2
  ge always 3
  gt always 4
  range always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 414
  && always {!<=-1,!>=2}
  arg always !0
  . always {!<=-1,!>=2}
  it always {!<=-1,!>=2}
  & {lifetime[Address]=(arg->iteratorInfo),!0}
  arg always !0
  nullptr always 0
Line 417
  ( always {!<=-1,!>=2}
Line 421
  ? possible 0
  & {lifetime[Address]=(arg->minsizes),!0}
  arg always !0
  nullptr always 0
Line 426
  ( always {!<=-1,!>=2}
Line 428
  ( always {!<=-1,!>=2}
Line 434
  ( always {!<=-1,!>=2}
Line 436
  ( always {!<=-1,!>=2}
Line 438
  ( always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 447
  ( always {!<=-1,!>=2}
Line 448
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mExporters)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
Line 451
  ( always {!<=-1,!>=2}
Line 452
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 453
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 456
  ( always {!<=-1,!>=2}
Line 457
  = possible lifetime[Iterator]=(mExporters)
  ( possible lifetime[Iterator]=(mExporters)
Line 458
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mExporters),end=0}
  && always {!<=-1,!>=2}
  it always {!symbolic=(mExporters.end()),!end=0}
Line 461
  ( always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mReflection)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 471
  :: possible {symbolic=(mReflection.end()),end=0}
  it possible {symbolic=(mReflection.end()),end=0}
  = possible lifetime[Iterator]=(mReflection)
  ( possible lifetime[Iterator]=(mReflection)
Line 472
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mReflection),end=0}
Line 473
  it always {!symbolic=(mReflection.end()),!end=0}
Line 474
  -1 always -1
Line 480
  = always ""
  "" always ""
Line 481
  unique always {!<=-1,!>=2}
  unique always {!<=-1,!>=2}
  = always 0
  false always 0
Line 485
  ( always {!<=-1,!>=2}
Line 489
  size always !<=-1
Line 491
  NO always 0
  BOOL always 1
  CHAR always 2
  SHORT always 3
  INT always 4
  LONG always 5
  LONGLONG always 6
Line 494
  = possible lifetime[Iterator]=(mPodTypes)
  ( possible lifetime[Iterator]=(mPodTypes)
Line 495
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPodTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPodTypes.end()),!end=0}
  nullptr always 0
Line 500
  mSigned always {!<=-1,!>=2}
  false always 0
Line 501
  mUnsigned always {!<=-1,!>=2}
  false always 0
Line 502
  mLong always {!<=-1,!>=2}
  false always 0
Line 503
  mPointer always {!<=-1,!>=2}
  false always 0
Line 504
  mPtrPtr always {!<=-1,!>=2}
  false always 0
Line 505
  mConstPtr always {!<=-1,!>=2}
  false always 0
Line 506
  ( always {!<=-1,!>=2}
Line 507
  return always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mSigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 508
  mUnsigned always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mUnsigned always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 509
  mLong always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mLong always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 510
  mPointer always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPointer always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 511
  mPtrPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mPtrPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 512
  mConstPtr always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  mConstPtr always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 513
  == always {!<=-1,!>=2}
Line 515
  ( always {!<=-1,!>=2}
Line 516
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 519
  mSigned always {!<=-1,!>=2}
Line 520
  mUnsigned always {!<=-1,!>=2}
Line 521
  mLong always {!<=-1,!>=2}
Line 522
  mPointer always {!<=-1,!>=2}
Line 523
  mPtrPtr always {!<=-1,!>=2}
Line 524
  mConstPtr always {!<=-1,!>=2}
Line 529
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 530
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 536
  :: possible {symbolic=(mPlatforms.end()),end=0}
  it possible {symbolic=(mPlatforms.end()),end=0}
  = possible lifetime[Iterator]=(mPlatforms)
  ( possible lifetime[Iterator]=(mPlatforms)
Line 537
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatforms),end=0}
Line 538
  it always {!symbolic=(mPlatforms.end()),!end=0}
Line 540
  type always !0
Line 543
  = possible lifetime[Iterator]=(mPlatformTypes)
  ( possible lifetime[Iterator]=(mPlatformTypes)
Line 544
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPlatformTypes),end=0}
  & {lifetime[Address]=(it2->second),!0}
  it2 always {!symbolic=(mPlatformTypes.end()),!end=0}
  nullptr always 0
Line 552
  ( always {!<=-1,!>=2}
  , always ""
  = always ""
  "" always ""
Line 555
  def always 0
  check always 1
  suppress always 2
Line 570
  ( always {!<=-1,!>=2}
Line 571
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mPrefixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mPrefixes),end=0}
Line 573
  ( always {!<=-1,!>=2}
Line 574
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mSuffixes)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mSuffixes),end=0}
Line 583
  0 always 0
Line 606
  ( always {!<=-1,!>=2}
Line 607
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(mBlocks)
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(mBlocks),end=0}
Line 616
  False always 0
  True always 1
  Maybe always 2
Line 646
  = possible lifetime[Iterator]=(data)
  ( possible lifetime[Iterator]=(data)
Line 647
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(data),end=0}
  nullptr always 0
  & {lifetime[Address]=(it->second),!0}
  it always {!symbolic=(data.end()),!end=0}
Line 655
  = always 0
  nullptr always 0
Line 42
  hash always !<=-1
Line 56
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 58
  this always !0
Line 60
  = always -1
  NO_LINE always -1
  hash always !<=-1
  0 always 0
  thisAndNextLine always {!<=-1,!>=2}
  false always 0
  matched always {!<=-1,!>=2}
  false always 0
  checked always {!<=-1,!>=2}
  false always 0
Line 67
  hash always !<=-1
  = always !<=-1
  . always !<=-1
  hash always !<=-1
Line 68
  thisAndNextLine always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 69
  matched always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  matched always {!<=-1,!>=2}
Line 70
  checked always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  checked always {!<=-1,!>=2}
Line 71
  this always !0
Line 74
  ( always {!<=-1,!>=2}
Line 75
  != always {!<=-1,!>=2}
Line 76
  return always {!<=-1,!>=2}
  errorId always !symbolic=(other.errorId)
  < always {!<=-1,!>=2}
  . always !symbolic=(errorId)
Line 77
  < always {!<=-1,!>=2}
Line 78
  return always {!<=-1,!>=2}
  true always 1
Line 79
  != always {!<=-1,!>=2}
Line 80
  return always {!<=-1,!>=2}
  fileName always !symbolic=(other.fileName)
  < always {!<=-1,!>=2}
  . always !symbolic=(fileName)
Line 81
  != always {!<=-1,!>=2}
Line 82
  return always {!<=-1,!>=2}
  symbolName always !symbolic=(other.symbolName)
  < always {!<=-1,!>=2}
  . always !symbolic=(symbolName)
Line 83
  hash always !<=-1
  != always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
Line 84
  return always {!<=-1,!>=2}
  hash always {!<=-1,!symbolic=(other.hash)}
  < always {!<=-1,!>=2}
  . always {!<=-1,!symbolic=(hash)}
  hash always !<=-1
Line 85
  thisAndNextLine always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 86
  return always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2,!symbolic=(other.thisAndNextLine)}
Line 87
  return always {!<=-1,!>=2}
  false always 0
Line 96
  ( always {!<=-1,!>=2}
Line 98
  ( always {!<=-1,!>=2}
Line 100
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ! {!<=-1,!>=2,0}
  fileName possible size=0
  ( {!<=-1,!>=2,1}
  && always {!<=-1,!>=2}
  fileName always !size=0
  ( always !<=-1
  "?*" always "?*"
  == always {!<=-1,!>=2}
Line 108
  ( always {!<=-1,!>=2}
Line 109
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 110
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 111
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 112
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 113
  hash always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  hash always !<=-1
  && always {!<=-1,!>=2}
Line 114
  thisAndNextLine always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  thisAndNextLine always {!<=-1,!>=2}
Line 121
  hash always !<=-1
Line 122
  thisAndNextLine always {!<=-1,!>=2}
Line 123
  matched always {!<=-1,!>=2}
Line 124
  checked always {!<=-1,!>=2}
Line 126
  NO_LINE always -1
  = always -1
  -1 always -1
Line 178
  ( always {!<=-1,!>=2}
Line 185
  ( always {!<=-1,!>=2}
Line 197
  unusedFunctionChecking always {!<=-1,!>=2}
Line 203
  unusedFunctionChecking always {!<=-1,!>=2}
Line 30
  SHOWTIME_NONE always 0
  = always 0
  0 always 0
  , always 1
Line 31
  SHOWTIME_FILE always 1
  , always 2
Line 32
  SHOWTIME_SUMMARY always 2
  , always 3
Line 33
  SHOWTIME_TOP5 always 3
Line 40
  = always 0
  0 always 0
Line 48
  0 always 0
Line 49
  0 always 0
Line 52
  ( always !<=-1
  ( always !<=-1
Line 70
  , always 0
  = always 0
  nullptr always 0
Line 82
  mStopped always {!<=-1,!>=2}
Line 114
  checkAllConfigurations always {!<=-1,!>=2}
Line 117
  checkConfiguration always {!<=-1,!>=2}
Line 122
  checkHeaders always {!<=-1,!>=2}
Line 125
  checkLibrary always {!<=-1,!>=2}
Line 131
  checkUnusedTemplates always {!<=-1,!>=2}
Line 134
  clang always {!<=-1,!>=2}
Line 140
  clangTidy always {!<=-1,!>=2}
Line 152
  daca always {!<=-1,!>=2}
Line 155
  debugnormal always {!<=-1,!>=2}
Line 158
  debugSimplified always {!<=-1,!>=2}
Line 161
  debugtemplate always {!<=-1,!>=2}
Line 164
  debugwarnings always {!<=-1,!>=2}
Line 167
  dump always {!<=-1,!>=2}
Line 171
  None always 0
  C always 1
  CPP always 2
Line 178
  exceptionHandling always {!<=-1,!>=2}
Line 191
  force always {!<=-1,!>=2}
Line 198
  inlineSuppressions always {!<=-1,!>=2}
Line 202
  jobs always !<=-1
Line 207
  jointSuppressionReport always {!<=-1,!>=2}
Line 243
  preprocessOnly always {!<=-1,!>=2}
Line 248
  quiet always {!<=-1,!>=2}
Line 251
  relativePaths always {!<=-1,!>=2}
Line 254
  reportProgress always {!<=-1,!>=2}
Line 260
  "simple" always "simple"
Line 261
  "rule" always "rule"
Line 262
  :: always 3
  style always 3
Line 280
  classes always {!<=-1,!>=2}
  false always 0
  externalFunctions always {!<=-1,!>=2}
  false always 0
  internalFunctions always {!<=-1,!>=2}
  false always 0
  externalVariables always {!<=-1,!>=2}
  false always 0
Line 289
  classes always {!<=-1,!>=2}
  = always 0
  externalFunctions always {!<=-1,!>=2}
  = always 0
  internalFunctions always {!<=-1,!>=2}
  = always 0
  externalVariables always {!<=-1,!>=2}
  = always 0
  false always 0
Line 298
  classes always {!<=-1,!>=2}
Line 305
  externalFunctions always {!<=-1,!>=2}
Line 311
  internalFunctions always {!<=-1,!>=2}
Line 317
  externalVariables always {!<=-1,!>=2}
Line 350
  verbose always {!<=-1,!>=2}
Line 353
  xml always {!<=-1,!>=2}
Line 362
  ( always {!<=-1,!>=2}
Line 364
  ( always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
  && always {!<=-1,!>=2}
  0 always 0
  ( {!<=-1,<=symbolic=(file.length()),!>=symbolic=(file.length()+1)}
  == always {!<=-1,!>=2}
  0 always 0
Line 365
  return always {!<=-1,!>=2}
  true always 1
Line 368
  return always {!<=-1,!>=2}
  false always 0
Line 383
  ( always {!<=-1,!>=2}
  , always 0
  inconclusiveCheck always {!<=-1,!>=2}
  = always 0
  false always 0
Line 386
  ( always {!<=-1,!>=2}
Line 387
  return always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(libraries)
  ( {lifetime[Iterator]=(libraries),start=0}
  ( {lifetime[Iterator]=(libraries),end=0}
  "posix" always "posix"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(libraries),end=0}
Line 391
  t always {!<=-1,!>=2}
  = always 1
  true always 1
Line 392
  = always {!<=-1,!>=2}
  t always {!<=-1,!>=2}
Line 396
  ( always {!<=-1,!>=2}
Line 397
  return always {!<=-1,!>=2}
Line 66
  ( always {!<=-1,!>=2}
Line 67
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 74
  return always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  1 always 1
Line 80
  result always {!<=-1,!>=2}
Line 81
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  x {!>=symbolic=(y+1),<=symbolic=(y)}
  < always {!<=-1,!>=2}
  y {!<=symbolic=(x-1),>=symbolic=(x)}
Line 88
  Upper always 0
  Lower always 1
  Point always 2
Line 90
  = always 0
  0 always 0
Line 91
  :: always 12
  INT always 12
Line 94
  nullptr always 0
Line 95
  0.0 always 0
Line 98
  nullptr always 0
Line 99
  0U always 0
Line 100
  safe always {!<=-1,!>=2}
  false always 0
Line 101
  conditional always {!<=-1,!>=2}
  false always 0
Line 102
  macro always {!<=-1,!>=2}
  false always 0
Line 103
  defaultArg always {!<=-1,!>=2}
  false always 0
Line 104
  0 always 0
Line 105
  0 always 0
Line 108
  nullptr always 0
Line 117
  ( always {!<=-1,!>=2}
Line 118
  != always {!<=-1,!>=2}
Line 119
  return always {!<=-1,!>=2}
  false always 0
Line 120
  valueType always symbolic=(rhs.valueType)
Line 121
  :: always 0
  INT always 0
Line 122
  :: always 5
  CONTAINER_SIZE always 5
Line 123
  :: always 7
  BUFFER_SIZE always 7
Line 124
  :: always 8
  ITERATOR_START always 8
Line 125
  :: always 9
  ITERATOR_END always 9
Line 126
  != always {!<=-1,!>=2}
Line 127
  return always {!<=-1,!>=2}
  false always 0
Line 129
  :: always 1
  TOK always 1
Line 130
  != always {!<=-1,!>=2}
Line 131
  return always {!<=-1,!>=2}
  false always 0
Line 133
  :: always 2
  FLOAT always 2
Line 135
  > always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  floatValue possible <=symbolic=(rhs.floatValue)
  < always {!<=-1,!>=2}
  . possible >=symbolic=(floatValue)
Line 136
  return always {!<=-1,!>=2}
  false always 0
Line 138
  :: always 3
  MOVED always 3
Line 139
  != always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  false always 0
Line 142
  :: always 4
  UNINIT always 4
Line 144
  :: always 6
  LIFETIME always 6
Line 145
  != always {!<=-1,!>=2}
Line 146
  return always {!<=-1,!>=2}
  false always 0
Line 148
  :: always 10
  SYMBOLIC always 10
Line 149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 150
  return always {!<=-1,!>=2}
  false always 0
Line 151
  != always {!<=-1,!>=2}
Line 152
  return always {!<=-1,!>=2}
  false always 0
Line 155
  return always {!<=-1,!>=2}
  true always 1
Line 161
  :: always 0
  INT always 0
Line 162
  :: always 10
  SYMBOLIC always 10
Line 163
  :: always 7
  BUFFER_SIZE always 7
Line 164
  :: always 5
  CONTAINER_SIZE always 5
Line 165
  :: always 8
  ITERATOR_START always 8
Line 166
  :: always 9
  ITERATOR_END always 9
Line 170
  :: always 2
  FLOAT always 2
Line 174
  :: always 4
  UNINIT always 4
Line 175
  :: always 1
  TOK always 1
Line 176
  :: always 6
  LIFETIME always 6
Line 177
  :: always 3
  MOVED always 3
Line 185
  result always {!<=-1,!>=2}
Line 186
  result always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
Line 190
  result always {!<=-1,!>=2}
Line 192
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always {!<=-1,!>=2}
  ( possible lifetime[Object]=(compare)
Line 197
  ( always {!<=-1,!>=2}
Line 198
  ! always {!<=-1,!>=2}
  this always !0
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 199
  this always !0
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  this always !0
Line 200
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 202
  this always !0
Line 203
  ( possible {lifetime[Object]=(result),lifetime[Object]=(rhs),lifetime[Object]=(compare)}
  ( possible lifetime[Object]=(result)
  result always 0
  ( possible lifetime[Object]=(rhs)
  ( possible lifetime[Object]=(compare)
Line 204
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 207
  ( always {!<=-1,!>=2}
Line 208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 209
  return always {!<=-1,!>=2}
  false always 0
Line 211
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 212
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 213
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 214
  conditional always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  conditional always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 215
  defaultArg always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 216
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 217
  == always {!<=-1,!>=2}
Line 220
  ( always {!<=-1,!>=2}
Line 221
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  this always !0
  == always {!<=-1,!>=2}
Line 225
  ( always {!<=-1,!>=2}
Line 226
  result always {!<=-1,!>=2}
  result always {!<=-1,!>=2}
  = always 0
  false always 0
Line 227
  this always !0
  ( possible {lifetime[Object]=(x),lifetime[Object]=(result)}
  ( possible lifetime[Object]=(result)
  result always 0
Line 228
  return always {!<=-1,!>=2}
  result {!<=-1,!>=2,0}
Line 232
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 233
  this always !0
Line 234
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 235
  this always !0
Line 239
  bound possible 0
  == {!<=-1,!>=2,0}
  :: always 1
  Lower always 1
Line 240
  = always 0
  :: always 0
  Upper always 0
Line 241
  bound always !1
  == always {!<=-1,!>=2}
  :: always 0
  Upper always 0
Line 242
  = always 1
  :: always 1
  Lower always 1
Line 255
  INT always 0
Line 256
  TOK always 1
Line 257
  FLOAT always 2
Line 258
  MOVED always 3
Line 259
  UNINIT always 4
Line 260
  CONTAINER_SIZE always 5
Line 261
  LIFETIME always 6
Line 262
  BUFFER_SIZE always 7
Line 263
  ITERATOR_START always 8
Line 264
  ITERATOR_END always 9
Line 265
  SYMBOLIC always 10
Line 267
  ( always {!<=-1,!>=2}
Line 268
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  INT always 0
Line 270
  ( always {!<=-1,!>=2}
Line 271
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  TOK always 1
Line 273
  ( always {!<=-1,!>=2}
Line 274
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  FLOAT always 2
Line 276
  ( always {!<=-1,!>=2}
Line 277
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  MOVED always 3
Line 279
  ( always {!<=-1,!>=2}
Line 280
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  UNINIT always 4
Line 282
  ( always {!<=-1,!>=2}
Line 283
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  CONTAINER_SIZE always 5
Line 285
  ( always {!<=-1,!>=2}
Line 286
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
Line 288
  ( always {!<=-1,!>=2}
Line 289
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  BUFFER_SIZE always 7
Line 291
  ( always {!<=-1,!>=2}
Line 292
  return always {!<=-1,!>=2}
  valueType possible 9
  == {!<=-1,!>=2,0}
  :: always 8
  ITERATOR_START always 8
  || always {!<=-1,!>=2}
  valueType always !8
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 294
  ( always {!<=-1,!>=2}
Line 295
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 8
  ITERATOR_START always 8
Line 297
  ( always {!<=-1,!>=2}
Line 298
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 9
  ITERATOR_END always 9
Line 300
  ( always {!<=-1,!>=2}
Line 301
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 10
  SYMBOLIC always 10
Line 304
  ( always {!<=-1,!>=2}
Line 305
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 308
  ( always {!<=-1,!>=2}
Line 309
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Argument always 1
Line 312
  ( always {!<=-1,!>=2}
Line 313
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 6
  LIFETIME always 6
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  SubFunction always 2
Line 316
  ( always {!<=-1,!>=2}
Line 317
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 333
  NonMovedVariable always 0
  MovedVariable always 1
  ForwardedVariable always 2
Line 347
  safe always {!<=-1,!>=2}
Line 350
  conditional always {!<=-1,!>=2}
Line 353
  macro always {!<=-1,!>=2}
Line 356
  defaultArg always {!<=-1,!>=2}
Line 373
  Object always 0
Line 375
  SubObject always 1
Line 377
  Lambda always 2
Line 379
  Iterator always 3
Line 381
  Address always 4
Line 384
  Local always 0
  Argument always 1
  SubFunction always 2
  ThisPointer always 3
  ThisValue always 4
Line 394
  Possible always 0
Line 396
  Known always 1
Line 398
  Inconclusive always 2
Line 400
  Impossible always 3
Line 404
  = always 1
  :: always 1
  Known always 1
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Known always 1
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 419
  ( always {!<=-1,!>=2}
Line 420
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Impossible always 3
Line 424
  = always 3
  :: always 3
  Impossible always 3
Line 427
  inconclusive always {!<=-1,!>=2}
  = always 1
  true always 1
Line 428
  inconclusive always {!<=-1,!>=2}
Line 429
  = always 2
  :: always 2
  Inconclusive always 2
Line 432
  ( always {!<=-1,!>=2}
Line 433
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Inconclusive always 2
Line 437
  ( always {!<=-1,!>=2}
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  defaultArg always {!<=-1,!>=2}
Line 445
  ( always {!<=-1,!>=2}
Line 456
  ( always !<=-1
Line 460
  ( always {!<=-1,!>=2}
Line 462
  possible always {!<=-1,!>=2}
  = always 1
  true always 1
Line 467
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
  , always 20
  = always 20
  20 always 20
Line 471
  addressOf always {!<=-1,!>=2}
Line 473
  inconclusive always {!<=-1,!>=2}
Line 475
  nullptr always 0
  addressOf always {!<=-1,!>=2}
  false always 0
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 478
  addressOf always {!<=-1,!>=2}
  false always 0
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 481
  addressOf always {!<=-1,!>=2}
Line 482
  addressOf always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  ( possible lifetime[Object]=(errorPath)
  inconclusive always {!<=-1,!>=2}
  false always 0
Line 485
  b always {!<=-1,!>=2}
Line 487
  . always {!<=-1,!>=2}
  addressOf always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 491
  b always {!<=-1,!>=2}
Line 493
  . always {!<=-1,!>=2}
  inconclusive always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  b always {!<=-1,!>=2}
Line 511
  escape always {!<=-1,!>=2}
  = always 0
  false always 0
Line 514
  ( always {!<=-1,!>=2}
Line 516
  , always 0
  = always 0
  nullptr always 0
Line 520
  ( always {!<=-1,!>=2}
Line 526
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 529
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 530
  = always 0
  0 always 0
Line 532
  , always 0
  = always 0
  nullptr always 0
  , always 1
  smallest always {!<=-1,!>=2}
  = always 1
  true always 1
Line 62
  ( always !<=-1
Line 74
  mFlags always !<=-1
Line 77
  fIsClass always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 78
  fIsFunction always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 79
  fIsVariable always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 80
  fIsAlias always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 81
  fIsSpecialization always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 82
  fIsPartialSpecialization always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 83
  fIsForwardDeclaration always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 84
  fIsVariadic always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 85
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 7
Line 86
  fFamilyMask always 7
  = always 7
  fIsClass always 1
  | always 3
  fIsFunction always 2
  | always 7
  fIsVariable always 4
Line 89
  state always {!<=-1,!>=2}
Line 90
  fIsClass always 1
  state always {!<=-1,!>=2}
Line 92
  state always {!<=-1,!>=2}
Line 93
  fIsFunction always 2
  state always {!<=-1,!>=2}
Line 95
  state always {!<=-1,!>=2}
Line 96
  fIsVariable always 4
  state always {!<=-1,!>=2}
Line 98
  state always {!<=-1,!>=2}
Line 99
  fIsAlias always 8
  state always {!<=-1,!>=2}
Line 101
  state always {!<=-1,!>=2}
Line 102
  fIsSpecialization always 16
  state always {!<=-1,!>=2}
Line 104
  state always {!<=-1,!>=2}
Line 105
  fIsPartialSpecialization always 32
  state always {!<=-1,!>=2}
Line 107
  state always {!<=-1,!>=2}
Line 108
  fIsForwardDeclaration always 64
  state always {!<=-1,!>=2}
Line 110
  state always {!<=-1,!>=2}
Line 111
  fIsVariadic always 128
  state always {!<=-1,!>=2}
Line 113
  state always {!<=-1,!>=2}
Line 114
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 122
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 123
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,256@252,128@253,64@254,32@255,16,8@1,4@2,2@3,1@4}
  != always {!<=-1,!>=2}
  0 always 0
Line 131
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 132
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,256@5,128@6,64@7,32@8,16@9,8@10,4@11,2@12,1@13}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4294967039@5,4294967167@6,4294967231@7,4294967263@8,4294967279@9,4294967287@10,4294967291@11,4294967293@12,4294967294@13}
  flag {!<=-1,256@5,128@6,64@7,32@8,16@9,8@10,4@11,2@12,1@13}
Line 153
  ( always {!<=-1,!>=2}
Line 154
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
Line 155
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  . always !<=-1
  mFlags always !<=-1
Line 183
  ( always {!<=-1,!>=2}
Line 184
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 1
Line 186
  ( always {!<=-1,!>=2}
Line 187
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFunction always 2
Line 189
  ( always {!<=-1,!>=2}
Line 190
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariable always 4
Line 192
  ( always {!<=-1,!>=2}
Line 193
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAlias always 8
Line 195
  ( always {!<=-1,!>=2}
Line 196
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSpecialization always 16
Line 198
  ( always {!<=-1,!>=2}
Line 199
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPartialSpecialization always 32
Line 201
  ( always {!<=-1,!>=2}
Line 202
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsForwardDeclaration always 64
Line 204
  ( always {!<=-1,!>=2}
Line 205
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 128
Line 207
  ( always {!<=-1,!>=2}
Line 208
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 234
  ( always {!<=-1,!>=2}
Line 242
  ( always {!<=-1,!>=2}
Line 245
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  & always !<=-1
  . always !<=-1
  mFlags always !<=-1
  & always !<=-1
  fFamilyMask always 7
  != always {!<=-1,!>=2}
  0 always 0
Line 265
  ( always {!<=-1,!>=2}
  , always !<=-1
  numberOfArguments always !<=-1
  , always {!<=-1,!>=2}
  variadic always {!<=-1,!>=2}
Line 281
  ( always {!<=-1,!>=2}
Line 289
  ( always {!<=-1,!>=2}
Line 297
  ( always {!<=-1,!>=2}
Line 306
  codeWithTemplates always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 322
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
  , always 1
  isTemplate always {!<=-1,!>=2}
  = always 1
  true always 1
Line 335
  ( always {!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 410
  ( always {!<=-1,!>=2}
Line 424
  , always {!<=-1,!>=2}
Line 425
  copy always {!<=-1,!>=2}
Line 451
  ( always {!<=-1,!>=2}
Line 456
  ( always {!<=-1,!>=2}
Line 486
  , always "    "
Line 487
  = always "    "
  "    " always "    "
Line 488
  = always ""
  "" always ""
Line 494
  mChanged always {!<=-1,!>=2}
Line 118
  LOW always 0
  HIGH always 1
Line 125
  UNKNOWN always 0
  CPP11INIT always 1
  NOINIT always 2
Line 128
  mBits always !<=-1
Line 131
  ( always {!<=-1,!>=2}
Line 134
  0 always 0
Line 135
  0 always 0
Line 136
  0 always 0
Line 137
  0 always 0
Line 138
  0 always 0
Line 139
  nullptr always 0
Line 140
  nullptr always 0
Line 141
  nullptr always 0
Line 142
  nullptr always 0
Line 143
  nullptr always 0
Line 144
  0 always 0
Line 145
  0 always 0
Line 146
  nullptr always 0
Line 147
  nullptr always 0
Line 148
  nullptr always 0
Line 149
  nullptr always 0
Line 150
  nullptr always 0
Line 151
  nullptr always 0
Line 153
  mBits always !<=-1
  0 always 0
Line 182
  eVariable always 0
  eType always 1
  eFunction always 2
  eKeyword always 3
  eName always 4
Line 183
  eNumber always 5
  eString always 6
  eChar always 7
  eBoolean always 8
  eLiteral always 9
  eEnumerator always 10
Line 184
  eArithmeticalOp always 11
  eComparisonOp always 12
  eAssignmentOp always 13
  eLogicalOp always 14
  eBitOp always 15
  eIncDecOp always 16
  eExtendedOp always 17
Line 185
  eBracket always 18
Line 186
  eLambda always 19
Line 187
  eEllipsis always 20
Line 188
  eOther always 21
Line 189
  eNone always 22
Line 192
  = always 0
  nullptr always 0
Line 198
  && always {!<=-1,!>=2}
Line 200
  = always 0
  0 always 0
Line 218
  = always 1
  1 always 1
Line 223
  = always 1
  1 always 1
Line 237
  ( always !0
  this always !0
Line 246
  ( always !0
  this always !0
Line 275
  ( always {!<=-1,!>=2}
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 276
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  pattern possible {") {"@25,") ; }"@27}
  1 always 1
Line 279
  ( always {!<=-1,!>=2}
  , always !<=-1
  pattern_len always !<=-1
Line 324
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  0 always 0
Line 370
  = always !0
  this always !0
Line 371
  top possible {symbolic=(this),0}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  top {symbolic=(this),!0}
  ",|(" always ",|("
Line 372
  top always !0
Line 373
  top possible {symbolic=(this),0}
  ? possible 0
  top always !0
  : always 0
  nullptr always 0
Line 380
  = possible {10@151,4@152,0@153}
  t possible {10@151,4@152,0@153}
Line 382
  memoizedIsName always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  mTokType possible {10@151,4@152,0@153}
  == always {!<=-1,!>=2}
  eName always 4
  || always {!<=-1,!>=2}
  mTokType {!4,10@151,0@153}
  == always {!<=-1,!>=2}
  eType always 1
  || always {!<=-1,!>=2}
  mTokType {!4,!1,10@151,0@153}
  == always {!<=-1,!>=2}
  eVariable always 0
  || always {!<=-1,!>=2}
Line 383
  mTokType {!1,!0,10@151}
  == always {!<=-1,!>=2}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType {!0,!2,10@151}
  == always {!<=-1,!>=2}
  eKeyword always 3
  || always {!<=-1,!>=2}
  mTokType {!2,!3,10@151}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
Line 384
  mTokType {!3,!8,10@151}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 385
  fIsName always 2097152
  memoizedIsName {symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator),!<=-1,!>=2,1@151}
Line 387
  memoizedIsLiteral always {!<=-1,!>=2}
  = always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
  || always {!<=-1,!>=2}
  mTokType always !5
  == always {!<=-1,!>=2}
  eString always 6
  || always {!<=-1,!>=2}
  mTokType always {!5,!6}
  == always {!<=-1,!>=2}
  eChar always 7
  || always {!<=-1,!>=2}
Line 388
  mTokType always {!6,!7}
  == always {!<=-1,!>=2}
  eBoolean always 8
  || always {!<=-1,!>=2}
  mTokType always {!7,!8}
  == always {!<=-1,!>=2}
  eLiteral always 9
  || always {!<=-1,!>=2}
  mTokType always {!8,!9}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 389
  fIsLiteral always 4194304
  memoizedIsLiteral {symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator),!<=-1,!>=2}
Line 391
  ( always {!<=-1,!>=2}
Line 392
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eKeyword always 3
Line 394
  ( always {!<=-1,!>=2}
Line 395
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsName always 2097152
Line 397
  ( always {!<=-1,!>=2}
Line 398
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  == always {!<=-1,!>=2}
  fIsName always 2097152
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eName always 4
Line 400
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLiteral always 4194304
Line 404
  ( always {!<=-1,!>=2}
Line 405
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eNumber always 5
Line 407
  ( always {!<=-1,!>=2}
Line 408
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 410
  ( always {!<=-1,!>=2}
Line 411
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 412
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 413
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 415
  ( always {!<=-1,!>=2}
Line 416
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 417
  == always {!<=-1,!>=2}
  eLogicalOp always 14
  || always {!<=-1,!>=2}
Line 418
  mTokType always !14
  == always {!<=-1,!>=2}
  eComparisonOp always 12
  || always {!<=-1,!>=2}
Line 419
  mTokType always {!14,!12}
  == always {!<=-1,!>=2}
  eBitOp always 15
Line 421
  ( always {!<=-1,!>=2}
Line 422
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  || always {!<=-1,!>=2}
Line 423
  == always {!<=-1,!>=2}
  eExtendedOp always 17
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eArithmeticalOp always 11
Line 428
  ( always {!<=-1,!>=2}
Line 429
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eComparisonOp always 12
Line 431
  ( always {!<=-1,!>=2}
Line 432
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eAssignmentOp always 13
Line 434
  ( always {!<=-1,!>=2}
Line 435
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eBoolean always 8
Line 437
  ( always {!<=-1,!>=2}
Line 438
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eIncDecOp always 16
Line 440
  ( always {!<=-1,!>=2}
Line 441
  return always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
Line 443
  ( always {!<=-1,!>=2}
Line 444
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  != always {!<=-1,!>=2}
  nullptr always 0
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  nullptr always 0
Line 446
  ( always {!<=-1,!>=2}
Line 448
  ( always !<=-1
Line 449
  return always !<=-1
  mFlags always !<=-1
Line 451
  flags_ always !<=-1
Line 452
  mFlags always !<=-1
  = always !<=-1
  flags_ always !<=-1
Line 454
  ( always {!<=-1,!>=2}
Line 455
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsUnsigned always 1
Line 457
  sign always {!<=-1,!>=2}
Line 458
  fIsUnsigned always 1
  sign always {!<=-1,!>=2}
Line 460
  ( always {!<=-1,!>=2}
Line 461
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSigned always 2
Line 463
  sign always {!<=-1,!>=2}
Line 464
  fIsSigned always 2
  sign always {!<=-1,!>=2}
Line 466
  ( always {!<=-1,!>=2}
Line 467
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointerCompare always 4
Line 469
  b always {!<=-1,!>=2}
Line 470
  fIsPointerCompare always 4
  b always {!<=-1,!>=2}
Line 472
  ( always {!<=-1,!>=2}
Line 473
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsLong always 8
Line 475
  size always {!<=-1,!>=2}
Line 476
  fIsLong always 8
  size always {!<=-1,!>=2}
Line 478
  ( always {!<=-1,!>=2}
Line 479
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStandardType always 16
Line 481
  b always {!<=-1,!>=2}
Line 482
  fIsStandardType always 16
  b {!<=-1,!>=2,0@159}
Line 484
  ( always {!<=-1,!>=2}
Line 485
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExpandedMacro always 32
Line 487
  m always {!<=-1,!>=2}
Line 488
  fIsExpandedMacro always 32
  m always {!<=-1,!>=2}
Line 490
  ( always {!<=-1,!>=2}
Line 491
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsCast always 64
Line 493
  c always {!<=-1,!>=2}
Line 494
  fIsCast always 64
  c always {!<=-1,!>=2}
Line 496
  ( always {!<=-1,!>=2}
Line 497
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConstructor always 128
Line 499
  ac always {!<=-1,!>=2}
Line 500
  fIsAttributeConstructor always 128
  ac always {!<=-1,!>=2}
Line 502
  ( always {!<=-1,!>=2}
Line 503
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeDestructor always 256
Line 505
  value always {!<=-1,!>=2}
Line 506
  fIsAttributeDestructor always 256
  value always {!<=-1,!>=2}
Line 508
  ( always {!<=-1,!>=2}
Line 509
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUnused always 512
Line 511
  unused always {!<=-1,!>=2}
Line 512
  fIsAttributeUnused always 512
  unused always {!<=-1,!>=2}
Line 514
  ( always {!<=-1,!>=2}
Line 515
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeUsed always 16384
Line 517
  unused always {!<=-1,!>=2}
Line 518
  fIsAttributeUsed always 16384
  unused always {!<=-1,!>=2}
Line 520
  ( always {!<=-1,!>=2}
Line 521
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePure always 1024
Line 523
  value always {!<=-1,!>=2}
Line 524
  fIsAttributePure always 1024
  value always {!<=-1,!>=2}
Line 526
  ( always {!<=-1,!>=2}
Line 527
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeConst always 2048
Line 529
  value always {!<=-1,!>=2}
Line 530
  fIsAttributeConst always 2048
  value always {!<=-1,!>=2}
Line 532
  ( always {!<=-1,!>=2}
Line 533
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNoreturn always 4096
Line 535
  value always {!<=-1,!>=2}
Line 536
  fIsAttributeNoreturn always 4096
  value always {!<=-1,!>=2}
Line 538
  ( always {!<=-1,!>=2}
Line 539
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNothrow always 8192
Line 541
  value always {!<=-1,!>=2}
Line 542
  fIsAttributeNothrow always 8192
  value always {!<=-1,!>=2}
Line 544
  ( always {!<=-1,!>=2}
Line 545
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributePacked always 32768
Line 547
  value always {!<=-1,!>=2}
Line 548
  fIsAttributePacked always 32768
  value always {!<=-1,!>=2}
Line 550
  ( always {!<=-1,!>=2}
Line 551
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeNodiscard always 16777216
Line 553
  value always {!<=-1,!>=2}
Line 554
  fIsAttributeNodiscard always 16777216
  value always {!<=-1,!>=2}
Line 556
  ( always {!<=-1,!>=2}
Line 557
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsAttributeMaybeUnused always 65536
Line 559
  value always {!<=-1,!>=2}
Line 560
  fIsAttributeMaybeUnused always 65536
  value always {!<=-1,!>=2}
Line 565
  ( always {!<=-1,!>=2}
Line 566
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 568
  ( always {!<=-1,!>=2}
Line 569
  return always {!<=-1,!>=2}
  nullptr always 0
  != always {!<=-1,!>=2}
Line 571
  ( always {!<=-1,!>=2}
Line 572
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsControlFlowKeyword always 131072
Line 574
  ( always {!<=-1,!>=2}
Line 575
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperatorKeyword always 262144
Line 577
  value always {!<=-1,!>=2}
Line 578
  fIsOperatorKeyword always 262144
  value always {!<=-1,!>=2}
Line 580
  ( always {!<=-1,!>=2}
Line 581
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsComplex always 524288
Line 583
  value always {!<=-1,!>=2}
Line 584
  fIsComplex always 524288
  value always {!<=-1,!>=2}
Line 586
  ( always {!<=-1,!>=2}
Line 587
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEnumType always 1048576
Line 589
  value always {!<=-1,!>=2}
Line 590
  fIsEnumType always 1048576
  value always {!<=-1,!>=2}
Line 592
  ( always {!<=-1,!>=2}
Line 593
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fAtAddress always 33554432
Line 595
  b always {!<=-1,!>=2}
Line 596
  fAtAddress always 33554432
  b always {!<=-1,!>=2}
Line 598
  ( always {!<=-1,!>=2}
Line 599
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIncompleteVar always 67108864
Line 601
  b always {!<=-1,!>=2}
Line 602
  fIncompleteVar always 67108864
  b always {!<=-1,!>=2}
Line 605
  ( always {!<=-1,!>=2}
Line 606
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsIncompleteConstant always 68719476736
Line 608
  b always {!<=-1,!>=2}
Line 609
  fIsIncompleteConstant always 68719476736
  b always {!<=-1,!>=2}
Line 612
  ( always {!<=-1,!>=2}
Line 613
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fConstexpr always 134217728
Line 615
  b always {!<=-1,!>=2}
Line 616
  fConstexpr always 134217728
  b always {!<=-1,!>=2}
Line 619
  ( always {!<=-1,!>=2}
Line 620
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fExternC always 268435456
Line 622
  b always {!<=-1,!>=2}
Line 623
  fExternC always 268435456
  b always {!<=-1,!>=2}
Line 626
  ( always {!<=-1,!>=2}
Line 627
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclComma always 536870912
Line 629
  b always {!<=-1,!>=2}
Line 630
  fIsSplitVarDeclComma always 536870912
  b always {!<=-1,!>=2}
Line 633
  ( always {!<=-1,!>=2}
Line 634
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSplitVarDeclEq always 1073741824
Line 636
  b always {!<=-1,!>=2}
Line 637
  fIsSplitVarDeclEq always 1073741824
  b always {!<=-1,!>=2}
Line 640
  ( always {!<=-1,!>=2}
Line 641
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsImplicitInt always 2147483648
Line 643
  b always {!<=-1,!>=2}
Line 644
  fIsImplicitInt always 2147483648
  b always {!<=-1,!>=2}
Line 647
  ( always {!<=-1,!>=2}
Line 648
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 4294967296
Line 650
  b always {!<=-1,!>=2}
Line 651
  fIsInline always 4294967296
  b always {!<=-1,!>=2}
Line 654
  ( always {!<=-1,!>=2}
Line 655
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRemovedVoidParameter always 34359738368
Line 657
  b always {!<=-1,!>=2}
Line 658
  fIsRemovedVoidParameter always 34359738368
  b always {!<=-1,!>=2}
Line 661
  ( always {!<=-1,!>=2}
Line 662
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplate always 8589934592
Line 664
  b always {!<=-1,!>=2}
Line 665
  fIsTemplate always 8589934592
  b always {!<=-1,!>=2}
Line 668
  ( always {!<=-1,!>=2}
Line 669
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSimplifedScope always 17179869184
Line 671
  b always {!<=-1,!>=2}
Line 672
  fIsSimplifedScope always 17179869184
  b always {!<=-1,!>=2}
Line 675
  ( always {!<=-1,!>=2}
Line 676
  return always {!<=-1,!>=2}
  . always !<=-1
  mBits always !<=-1
  > always {!<=-1,!>=2}
  0 always 0
Line 678
  ( always !<=-1
Line 679
  return always !<=-1
  . always !<=-1
  mBits always !<=-1
Line 685
  ! always {!<=-1,!>=2}
Line 687
  . possible lifetime[Object]=(tokenAndName)
Line 689
  b always !<=-1
Line 690
  . always !<=-1
  mBits always !<=-1
  = always !<=-1
  b always !<=-1
Line 693
  ( always {!<=-1,!>=2}
Line 694
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u8" always "u8"
  || always {!<=-1,!>=2}
Line 695
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u8" always "u8"
Line 698
  ( always {!<=-1,!>=2}
Line 699
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "u" always "u"
  || always {!<=-1,!>=2}
Line 700
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "u" always "u"
Line 703
  ( always {!<=-1,!>=2}
Line 704
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "U" always "U"
  || always {!<=-1,!>=2}
Line 705
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "U" always "U"
Line 708
  ( always {!<=-1,!>=2}
Line 709
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eString always 6
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '"' always 34
  "" always ""
  || always {!<=-1,!>=2}
Line 710
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
  ( always !<=-1
  == always {!<=-1,!>=2}
  3 always 3
Line 713
  ( always {!<=-1,!>=2}
Line 714
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eChar always 7
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  '\'' always 39
  "" always ""
  && always {!<=-1,!>=2}
Line 715
  ( always !<=-1
  > always {!<=-1,!>=2}
  3 always 3
Line 734
  ( always {!<=-1,!>=2}
Line 735
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsTemplateArg always 8388608
Line 737
  value always {!<=-1,!>=2}
Line 738
  fIsTemplateArg always 8388608
  value always {!<=-1,!>=2}
Line 742
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 743
  1 always 1
Line 745
  , always !<=-1
  pattern_len always !<=-1
Line 748
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 749
  1 always 1
Line 751
  , always !<=-1
  pattern_len always !<=-1
Line 753
  , always 0
  = always 0
  0 always 0
Line 754
  , always 0
  = always 0
  0 always 0
Line 757
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 758
  1 always 1
Line 760
  , always !<=-1
  pattern_len always !<=-1
Line 761
  pattern_len always !<=-1
Line 764
  ( always !0
  & {lifetime[Address]=(pattern),!0}
Line 765
  1 always 1
Line 767
  , always !<=-1
  pattern_len always !<=-1
Line 768
  pattern_len always !<=-1
Line 771
  , always 0
  = always 0
  0 always 0
Line 772
  varId possible 0
Line 774
  , always 0
  = always 0
  0 always 0
Line 775
  varId possible 0
Line 837
  , always 0
  prepend always {!<=-1,!>=2}
  = always 0
  false always 0
Line 841
  true always 1
Line 853
  = possible 0
  id possible 0
Line 854
  != always {!<=-1,!>=2}
  0 always 0
Line 855
  eVariable always 0
Line 856
  false always 0
Line 864
  . always !0
Line 877
  = always 0
  nullptr always 0
Line 892
  = always 5
  5 always 5
Line 904
  varid always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 905
  exprid always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 906
  idtype always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 0
  false always 0
Line 907
  attributes always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 0
  false always 0
Line 908
  macro always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 0
  false always 0
Line 909
  linenumbers always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 0
  false always 0
Line 910
  linebreaks always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 0
  false always 0
Line 911
  files always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  false always 0
Line 914
  . always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 915
  . always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
  = always 1
  true always 1
Line 916
  . always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  = always 1
  true always 1
Line 917
  . always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  = always 1
  true always 1
Line 918
  . always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 1
  true always 1
Line 923
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 928
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 933
  . always {!<=-1,!>=2}
  exprid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 934
  . always {!<=-1,!>=2}
  varid always {!<=-1,!>=2}
  = always 1
  true always 1
Line 935
  . always {!<=-1,!>=2}
  idtype always {!<=-1,!>=2}
  = always 1
  true always 1
Line 948
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  macro always {!<=-1,!>=2}
Line 950
  , always 0
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 951
  , always 1
  attributes always {!<=-1,!>=2}
  = always 1
  true always 1
Line 952
  varid always {!<=-1,!>=2}
  = always 0
  false always 0
Line 965
  varid always {!<=-1,!>=2}
  attributes always {!<=-1,!>=2}
  linenumbers always {!<=-1,!>=2}
  linebreaks always {!<=-1,!>=2}
  files always {!<=-1,!>=2}
  = always 0
  nullptr always 0
  , always 0
  = always 0
  nullptr always 0
Line 984
  mStr possible size=1
  == always {!<=-1,!>=2}
  "<" always "<"
  || always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  ">" always ">"
Line 1026
  mTokType possible 19
  == {!<=-1,!>=2,0}
  eFunction always 2
  || always {!<=-1,!>=2}
  mTokType always !2
  == always {!<=-1,!>=2}
  eLambda always 19
  : always 0
  nullptr always 0
Line 1034
  = possible 0
  v possible 0
Line 1035
  || always {!<=-1,!>=2}
Line 1036
  eVariable always 0
Line 1037
  == always {!<=-1,!>=2}
  eVariable always 0
Line 1038
  eName always 4
Line 1045
  == always {!<=-1,!>=2}
  eVariable always 0
  ? possible 0
  : always 0
  nullptr always 0
Line 1058
  == always {!<=-1,!>=2}
  eType always 1
  ? possible 0
  : always 0
  nullptr always 0
Line 1061
  , always 0
  = always 0
  nullptr always 0
Line 1071
  == always {!<=-1,!>=2}
  eEnumerator always 10
  ? possible 0
  : always 0
  nullptr always 0
Line 1079
  = possible 0
  e possible 0
Line 1081
  eEnumerator always 10
Line 1082
  == always {!<=-1,!>=2}
  eEnumerator always 10
Line 1083
  eName always 4
Line 1152
  . always !0
Line 1156
  . always !0
Line 1163
  && always {!<=-1,!>=2}
Line 1164
  ! always {!<=-1,!>=2}
Line 1170
  ( always {!<=-1,!>=2}
Line 1171
  ( always {!<=-1,!>=2}
Line 1172
  ( always {!<=-1,!>=2}
Line 1173
  ( always {!<=-1,!>=2}
Line 1182
  condition always {!<=-1,!>=2}
  = always 0
  0 always 0
Line 1197
  ( always {!<=-1,!>=2}
Line 1199
  ( always {!<=-1,!>=2}
Line 1227
  ( always {!<=-1,!>=2}
Line 1243
  fIsUnsigned always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 1244
  fIsSigned always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 1245
  fIsPointerCompare always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 1246
  fIsLong always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 1247
  fIsStandardType always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 1248
  fIsExpandedMacro always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 1249
  fIsCast always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 1250
  fIsAttributeConstructor always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 1251
  fIsAttributeDestructor always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 1252
  fIsAttributeUnused always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 1253
  fIsAttributePure always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 1254
  fIsAttributeConst always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 1255
  fIsAttributeNoreturn always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 1256
  fIsAttributeNothrow always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 1257
  fIsAttributeUsed always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 1258
  fIsAttributePacked always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 1259
  fIsAttributeMaybeUnused always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 1260
  fIsControlFlowKeyword always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 1261
  fIsOperatorKeyword always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 1262
  fIsComplex always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 1263
  fIsEnumType always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 1264
  fIsName always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 1265
  fIsLiteral always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 1266
  fIsTemplateArg always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 1267
  fIsAttributeNodiscard always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
  , always 33554432
Line 1268
  fAtAddress always 33554432
  = always 33554432
  1 always 1
  << always 33554432
  25 always 25
  , always 67108864
Line 1269
  fIncompleteVar always 67108864
  = always 67108864
  1 always 1
  << always 67108864
  26 always 26
  , always 134217728
Line 1270
  fConstexpr always 134217728
  = always 134217728
  1 always 1
  << always 134217728
  27 always 27
  , always 268435456
Line 1271
  fExternC always 268435456
  = always 268435456
  1 always 1
  << always 268435456
  28 always 28
  , always 536870912
Line 1272
  fIsSplitVarDeclComma always 536870912
  = always 536870912
  1 always 1
  << always 536870912
  29 always 29
  , always 1073741824
Line 1273
  fIsSplitVarDeclEq always 1073741824
  = always 1073741824
  1 always 1
  << always 1073741824
  30 always 30
  , always 2147483648
Line 1274
  fIsImplicitInt always 2147483648
  = always 2147483648
  1U always 1
  << always 2147483648
  31 always 31
  , always 4294967296
Line 1275
  fIsInline always 4294967296
  = always 4294967296
  1ULL always 1
  << always 4294967296
  32 always 32
  , always 8589934592
Line 1276
  fIsTemplate always 8589934592
  = always 8589934592
  1ULL always 1
  << always 8589934592
  33 always 33
  , always 17179869184
Line 1277
  fIsSimplifedScope always 17179869184
  = always 17179869184
  1ULL always 1
  << always 17179869184
  34 always 34
  , always 34359738368
Line 1278
  fIsRemovedVoidParameter always 34359738368
  = always 34359738368
  1ULL always 1
  << always 34359738368
  35 always 35
  , always 68719476736
Line 1279
  fIsIncompleteConstant always 68719476736
  = always 68719476736
  1ULL always 1
  << always 68719476736
  36 always 36
Line 1284
  mFlags always !<=-1
Line 1293
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 1294
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,8388608@161,17179869184@172,8589934592@174,34359738368@176,4294967296@178,2147483648@180,1073741824@182,536870912@184,268435456@186}
  != always {!<=-1,!>=2}
  0 always 0
Line 1302
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 1303
  mFlags always !<=-1
  = always !<=-1
  state_ {!<=-1,!>=2,symbolic=(mTokType==eName||mTokType==eType||mTokType==eVariable||mTokType==eFunction||mTokType==eKeyword||mTokType==eBoolean||mTokType==eEnumerator)@248,symbolic=(mTokType==eNumber||mTokType==eString||mTokType==eChar||mTokType==eBoolean||mTokType==eLiteral||mTokType==eEnumerator)@249}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ {!<=-1,8388608@160,17179869184@171,8589934592@173,34359738368@175,4294967296@177,2147483648@179,1073741824@181,536870912@183,268435456@185}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ {!<=-1,8388608@160,17179869184@171,8589934592@173,34359738368@175,4294967296@177,2147483648@179,1073741824@181,536870912@183,268435456@185}
Line 1317
  , always 0
  = always 0
  0 always 0
  , always 0
  = always 0
  0 always 0
Line 1343
  ! always {!<=-1,!>=2}
Line 1344
  nullptr always 0
Line 1345
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1346
  ( always !0
Line 1347
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1348
  ( always !0
Line 1349
  nullptr always 0
Line 1353
  ! always {!<=-1,!>=2}
Line 1354
  nullptr always 0
Line 1355
  this {!0,symbolic=(astParent()->astOperand2())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1356
  ( always !0
Line 1357
  this always {!0,!symbolic=(astParent()->astOperand1())}
  == always {!<=-1,!>=2}
  ( always !0
Line 1358
  ( always !0
Line 1359
  nullptr always 0
Line 1363
  = always !0
  this always !0
Line 1364
  ret possible symbolic=(this)
Line 1365
  = always !0
  . always !0
Line 1366
  ret possible symbolic=(this)
Line 1370
  = always !0
  this always !0
Line 1371
  ret possible symbolic=(this)
Line 1372
  = always !0
  . always !0
Line 1373
  ret possible symbolic=(this)
Line 1385
  ( always {!<=-1,!>=2}
Line 1388
  = always 0
  = always 0
  = always 0
  nullptr always 0
Line 1393
  = always 0
  nullptr always 0
Line 1396
  = always ""
  "" always ""
Line 1402
  sep possible ""
Line 1411
  verbose always {!<=-1,!>=2}
  xml always {!<=-1,!>=2}
Line 1413
  xml always {!<=-1,!>=2}
Line 1418
  cpp11init always {!<=-1,!>=2}
Line 1419
  = possible {1,2}
  cpp11init always {!<=-1,!>=2}
  ? possible {1,2}
  :: always 1
  CPP11INIT always 1
  : always 2
  :: always 2
  NOINIT always 2
Line 55
  Public always 0
  Protected always 1
  Private always 2
  Global always 3
  Namespace always 4
  Argument always 5
  Local always 6
  Throw always 7
Line 61
  nullptr always 0
  0 always 0
  known always {!<=-1,!>=2}
  true always 1
Line 65
  known always {!<=-1,!>=2}
Line 75
  Unknown always 0
  True always 1
  False always 2
Line 81
  nullptr always 0
  nullptr always 0
  :: always 0
  Public always 0
  isVirtual always {!<=-1,!>=2}
  false always 0
Line 87
  isVirtual always {!<=-1,!>=2}
Line 89
  ( always {!<=-1,!>=2}
Line 90
  return always {!<=-1,!>=2}
  this always !0
  < always {!<=-1,!>=2}
Line 96
  nullptr always 0
  nullptr always 0
  nullptr always 0
Line 110
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
  = always 0
  nullptr always 0
Line 111
  classDef_ inconclusive 0
Line 115
  nullptr always 0
Line 116
  nullptr always 0
Line 117
  0 always 0
Line 118
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "enum" always "enum"
Line 119
  = always 1
  :: always 1
  True always 1
Line 120
  classDef_ possible 0
  && always {!<=-1,!>=2}
  classDef_ always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 121
  3 always 3
Line 123
  && always {!<=-1,!>=2}
  ( always !0
  != always {!<=-1,!>=2}
  ";" always ";"
Line 124
  = always !0
  ( always !0
Line 131
  classDef always !0
Line 134
  ( always {!<=-1,!>=2}
Line 135
  ( always {!<=-1,!>=2}
Line 136
  ( always {!<=-1,!>=2}
Line 137
  ( always {!<=-1,!>=2}
Line 139
  ( always {!<=-1,!>=2}
Line 140
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  classDef always !0
  == always {!<=-1,!>=2}
  "using" always "using"
Line 152
  ( always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 159
  ( always {!<=-1,!>=2}
Line 161
  ( always {!<=-1,!>=2}
Line 166
  nullptr always 0
  0 always 0
  nullptr always 0
  nullptr always 0
  value_known always {!<=-1,!>=2}
  false always 0
Line 172
  value_known always {!<=-1,!>=2}
Line 179
  fIsMutable always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 180
  fIsStatic always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 181
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 182
  fIsExtern always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 183
  fIsClass always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 184
  fIsArray always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 185
  fIsPointer always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 186
  fIsReference always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 187
  fIsRValueRef always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 188
  fHasDefault always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 189
  fIsStlType always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 190
  fIsStlString always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 191
  fIsFloatType always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 192
  fIsVolatile always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 193
  fIsSmartPointer always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 194
  fIsMaybeUnused always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 195
  fIsInit always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
Line 203
  ( always {!<=-1,!>=2}
  flag_ always !<=-1
Line 204
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag_ {!<=-1,32768@94,4096@97,16384@100,2048@101,1024@102,65536@103,512@104,256@105,128@106}
  != always {!<=-1,!>=2}
  0 always 0
Line 212
  flag_ always !<=-1
  state_ always {!<=-1,!>=2}
Line 213
  mFlags always !<=-1
  = always !<=-1
  state_ always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag_ always !<=-1
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ always !<=0
  flag_ always !<=-1
Line 222
  ( always {!<=-1,!>=2}
Line 233
  mFlags always !<=-1
  0 always 0
  , possible lifetime[SubObject]=(type_)
Line 234
  ( possible lifetime[SubObject]=(type_)
Line 236
  nullptr always 0
Line 300
  mNameToken always !0
Line 312
  mNameToken always !0
Line 314
  0 always 0
Line 329
  ( always {!<=-1,!>=2}
Line 330
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 0
  Public always 0
Line 337
  ( always {!<=-1,!>=2}
Line 338
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 1
  Protected always 1
Line 345
  ( always {!<=-1,!>=2}
Line 346
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 2
  Private always 2
Line 353
  ( always {!<=-1,!>=2}
Line 354
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 3
  Global always 3
Line 361
  ( always {!<=-1,!>=2}
Line 362
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 4
  Namespace always 4
Line 369
  ( always {!<=-1,!>=2}
Line 370
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 5
  Argument always 5
Line 377
  ( always {!<=-1,!>=2}
Line 378
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 385
  ( always {!<=-1,!>=2}
Line 386
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMutable always 1
Line 393
  ( always {!<=-1,!>=2}
Line 394
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 8192
Line 401
  ( always {!<=-1,!>=2}
Line 402
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 2
Line 409
  ( always {!<=-1,!>=2}
Line 410
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 8
Line 417
  ( always {!<=-1,!>=2}
Line 418
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 425
  ( always {!<=-1,!>=2}
Line 426
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  :: always 7
  Throw always 7
Line 433
  ( always {!<=-1,!>=2}
Line 434
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsClass always 16
Line 441
  ( always {!<=-1,!>=2}
Line 442
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 449
  ( always {!<=-1,!>=2}
Line 450
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 457
  ( always {!<=-1,!>=2}
Line 458
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
Line 465
  ( always {!<=-1,!>=2}
Line 471
  ( always {!<=-1,!>=2}
Line 472
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsArray always 32
  || always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPointer always 64
Line 479
  ( always {!<=-1,!>=2}
Line 480
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsReference always 128
Line 487
  ( always {!<=-1,!>=2}
Line 488
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsRValueRef always 256
Line 495
  ( always {!<=-1,!>=2}
Line 501
  ( always {!<=-1,!>=2}
Line 502
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasDefault always 512
Line 509
  ( always {!<=-1,!>=2}
Line 510
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInit always 65536
Line 526
  ? possible 0
  mType always !0
  : always 0
  nullptr always 0
Line 557
  ( always {!<=-1,!>=2}
Line 558
  return always {!<=-1,!>=2}
  . always {!<=-1,!>=2}
  known always {!<=-1,!>=2}
Line 569
  ( always {!<=-1,!>=2}
Line 570
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlType always 1024
Line 581
  ( always {!<=-1,!>=2}
Line 582
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStlString always 2048
Line 585
  ( always {!<=-1,!>=2}
Line 586
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsSmartPointer always 16384
Line 601
  ( always {!<=-1,!>=2}
Line 602
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  2 always 2
Line 615
  ( always {!<=-1,!>=2}
Line 616
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( possible lifetime[Iterator]=(stlTypes)
  2 always 2
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(stlTypes),end=0}
Line 623
  ( always {!<=-1,!>=2}
Line 624
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFloatType always 4096
Line 631
  ( always {!<=-1,!>=2}
Line 632
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 635
  ( always {!<=-1,!>=2}
Line 636
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsMaybeUnused always 32768
Line 679
  mFlags always !<=-1
Line 702
  fHasBody always 1
  = always 1
  1 always 1
  << always 1
  0 always 0
  , always 2
Line 703
  fIsInline always 2
  = always 2
  1 always 1
  << always 2
  1 always 1
  , always 4
Line 704
  fIsConst always 4
  = always 4
  1 always 1
  << always 4
  2 always 2
  , always 8
Line 705
  fHasVirtualSpecifier always 8
  = always 8
  1 always 1
  << always 8
  3 always 3
  , always 16
Line 706
  fIsPure always 16
  = always 16
  1 always 1
  << always 16
  4 always 4
  , always 32
Line 707
  fIsStatic always 32
  = always 32
  1 always 1
  << always 32
  5 always 5
  , always 64
Line 708
  fIsStaticLocal always 64
  = always 64
  1 always 1
  << always 64
  6 always 6
  , always 128
Line 709
  fIsExtern always 128
  = always 128
  1 always 1
  << always 128
  7 always 7
  , always 256
Line 710
  fIsFriend always 256
  = always 256
  1 always 1
  << always 256
  8 always 8
  , always 512
Line 711
  fIsExplicit always 512
  = always 512
  1 always 1
  << always 512
  9 always 9
  , always 1024
Line 712
  fIsDefault always 1024
  = always 1024
  1 always 1
  << always 1024
  10 always 10
  , always 2048
Line 713
  fIsDelete always 2048
  = always 2048
  1 always 1
  << always 2048
  11 always 11
  , always 4096
Line 714
  fHasOverrideSpecifier always 4096
  = always 4096
  1 always 1
  << always 4096
  12 always 12
  , always 8192
Line 715
  fHasFinalSpecifier always 8192
  = always 8192
  1 always 1
  << always 8192
  13 always 13
  , always 16384
Line 716
  fIsNoExcept always 16384
  = always 16384
  1 always 1
  << always 16384
  14 always 14
  , always 32768
Line 717
  fIsThrow always 32768
  = always 32768
  1 always 1
  << always 32768
  15 always 15
  , always 65536
Line 718
  fIsOperator always 65536
  = always 65536
  1 always 1
  << always 65536
  16 always 16
  , always 131072
Line 719
  fHasLvalRefQual always 131072
  = always 131072
  1 always 1
  << always 131072
  17 always 17
  , always 262144
Line 720
  fHasRvalRefQual always 262144
  = always 262144
  1 always 1
  << always 262144
  18 always 18
  , always 524288
Line 721
  fIsVariadic always 524288
  = always 524288
  1 always 1
  << always 524288
  19 always 19
  , always 1048576
Line 722
  fIsVolatile always 1048576
  = always 1048576
  1 always 1
  << always 1048576
  20 always 20
  , always 2097152
Line 723
  fHasTrailingReturnType always 2097152
  = always 2097152
  1 always 1
  << always 2097152
  21 always 21
  , always 4194304
Line 724
  fIsEscapeFunction always 4194304
  = always 4194304
  1 always 1
  << always 4194304
  22 always 22
  , always 8388608
Line 725
  fIsInlineKeyword always 8388608
  = always 8388608
  1 always 1
  << always 8388608
  23 always 23
  , always 16777216
Line 726
  fIsConstexpr always 16777216
  = always 16777216
  1 always 1
  << always 16777216
  24 always 24
Line 734
  ( always {!<=-1,!>=2}
  flag always !<=-1
Line 735
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  flag {!<=-1,16777216@59,4194304@61,8388608@62,2097152@64,1048576@65,524288@66,262144@67,131072@68,65536@69}
  != always {!<=-1,!>=2}
  0 always 0
Line 743
  flag always !<=-1
  state always {!<=-1,!>=2}
Line 744
  mFlags always !<=-1
  = always !<=-1
  state always {!<=-1,!>=2}
  ? always !<=-1
  mFlags always !<=-1
  | always !<=-1
  flag {!<=-1,8388608@37,2097152@38,1048576@39,524288@40,262144@41,131072@42,65536@43,32768@44,16384@45}
  : always !<=-1
  mFlags always !<=-1
  & always !<=-1
  ~ {!<=0,4286578687@37,4292870143@38,4293918719@39,4294443007@40,4294705151@41,4294836223@42,4294901759@43,4294934527@44,4294950911@45}
  flag {!<=-1,8388608@37,2097152@38,1048576@39,524288@40,262144@41,131072@42,65536@43,32768@44,16384@45}
Line 748
  eConstructor always 0
  eCopyConstructor always 1
  eMoveConstructor always 2
  eOperatorEqual always 3
  eDestructor always 4
  eFunction always 5
  eLambda always 6
Line 760
  ( always !<=-1
Line 763
  ( always !<=-1
  - always !<=-1
Line 772
  ( always {!<=-1,!>=2}
  defaultVal always {!<=-1,!>=2}
  = always 0
  false always 0
Line 777
  = always 0
  nullptr always 0
Line 779
  ( always {!<=-1,!>=2}
Line 780
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eLambda always 6
Line 783
  ( always {!<=-1,!>=2}
Line 784
  return always {!<=-1,!>=2}
  type possible {1,2}
  == {!<=-1,!>=2,0}
  eConstructor always 0
  || always {!<=-1,!>=2}
Line 785
  type {2,!0}
  == {!<=-1,!>=2,0}
  eCopyConstructor always 1
  || always {!<=-1,!>=2}
Line 786
  type always {!0,!1}
  == always {!<=-1,!>=2}
  eMoveConstructor always 2
Line 789
  ( always {!<=-1,!>=2}
Line 790
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
  eDestructor always 4
Line 792
  ( always {!<=-1,!>=2}
Line 793
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 795
  ( always {!<=-1,!>=2}
Line 796
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 798
  ( always {!<=-1,!>=2}
Line 799
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 801
  ( always {!<=-1,!>=2}
Line 802
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 804
  ( always {!<=-1,!>=2}
Line 805
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 807
  ( always {!<=-1,!>=2}
Line 808
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 810
  ( always {!<=-1,!>=2}
Line 811
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 814
  ( always {!<=-1,!>=2}
Line 815
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasBody always 1
Line 817
  ( always {!<=-1,!>=2}
Line 818
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInline always 2
Line 820
  ( always {!<=-1,!>=2}
Line 821
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConst always 4
Line 823
  ( always {!<=-1,!>=2}
Line 824
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasVirtualSpecifier always 8
Line 826
  ( always {!<=-1,!>=2}
Line 827
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsPure always 16
Line 829
  ( always {!<=-1,!>=2}
Line 830
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStatic always 32
Line 832
  ( always {!<=-1,!>=2}
Line 833
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsStaticLocal always 64
Line 835
  ( always {!<=-1,!>=2}
Line 836
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExtern always 128
Line 838
  ( always {!<=-1,!>=2}
Line 839
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsFriend always 256
Line 841
  ( always {!<=-1,!>=2}
Line 842
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsExplicit always 512
Line 844
  ( always {!<=-1,!>=2}
Line 845
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDefault always 1024
Line 847
  ( always {!<=-1,!>=2}
Line 848
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsDelete always 2048
Line 850
  ( always {!<=-1,!>=2}
Line 851
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsNoExcept always 16384
Line 853
  ( always {!<=-1,!>=2}
Line 854
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsThrow always 32768
Line 856
  ( always {!<=-1,!>=2}
Line 857
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasOverrideSpecifier always 4096
Line 859
  ( always {!<=-1,!>=2}
Line 860
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasFinalSpecifier always 8192
Line 862
  ( always {!<=-1,!>=2}
Line 863
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsOperator always 65536
Line 865
  ( always {!<=-1,!>=2}
Line 866
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasLvalRefQual always 131072
Line 868
  ( always {!<=-1,!>=2}
Line 869
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasRvalRefQual always 262144
Line 871
  ( always {!<=-1,!>=2}
Line 872
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVariadic always 524288
Line 874
  ( always {!<=-1,!>=2}
Line 875
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsVolatile always 1048576
Line 877
  ( always {!<=-1,!>=2}
Line 878
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fHasTrailingReturnType always 2097152
Line 880
  state always {!<=-1,!>=2}
Line 881
  fHasBody always 1
  state always {!<=-1,!>=2}
Line 883
  ( always {!<=-1,!>=2}
Line 884
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsInlineKeyword always 8388608
Line 887
  ( always {!<=-1,!>=2}
Line 888
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsEscapeFunction always 4194304
Line 890
  state always {!<=-1,!>=2}
Line 891
  fIsEscapeFunction always 4194304
  state always {!<=-1,!>=2}
Line 894
  ( always {!<=-1,!>=2}
Line 895
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  fIsConstexpr always 16777216
Line 897
  state always {!<=-1,!>=2}
Line 898
  fIsConstexpr always 16777216
  state always {!<=-1,!>=2}
Line 900
  ( always {!<=-1,!>=2}
Line 919
  ( always {!<=-1,!>=2}
Line 921
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 923
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 925
  ( always {!<=-1,!>=2}
  , always 0
  unknown always {!<=-1,!>=2}
  = always 0
  false always 0
Line 930
  this always !0
  ( always {!<=-1,!>=2}
Line 931
  "{|;" always "{|;"
Line 947
  mFlags always !<=-1
Line 949
  state always {!<=-1,!>=2}
Line 950
  fIsInline always 2
  state always {!<=-1,!>=2}
Line 952
  state always {!<=-1,!>=2}
Line 953
  fIsConst always 4
  state always {!<=-1,!>=2}
Line 955
  state always {!<=-1,!>=2}
Line 956
  fHasVirtualSpecifier always 8
  state always {!<=-1,!>=2}
Line 958
  state always {!<=-1,!>=2}
Line 959
  fIsPure always 16
  state always {!<=-1,!>=2}
Line 961
  state always {!<=-1,!>=2}
Line 962
  fIsStatic always 32
  state always {!<=-1,!>=2}
Line 964
  state always {!<=-1,!>=2}
Line 965
  fIsStaticLocal always 64
  state always {!<=-1,!>=2}
Line 967
  state always {!<=-1,!>=2}
Line 968
  fIsExtern always 128
  state always {!<=-1,!>=2}
Line 970
  state always {!<=-1,!>=2}
Line 971
  fIsFriend always 256
  state always {!<=-1,!>=2}
Line 973
  state always {!<=-1,!>=2}
Line 974
  fIsExplicit always 512
  state always {!<=-1,!>=2}
Line 976
  state always {!<=-1,!>=2}
Line 977
  fIsDefault always 1024
  state always {!<=-1,!>=2}
Line 979
  state always {!<=-1,!>=2}
Line 980
  fIsDelete always 2048
  state always {!<=-1,!>=2}
Line 982
  state always {!<=-1,!>=2}
Line 983
  fIsNoExcept always 16384
  state always {!<=-1,!>=2}
Line 985
  state always {!<=-1,!>=2}
Line 986
  fIsThrow always 32768
  state always {!<=-1,!>=2}
Line 988
  state always {!<=-1,!>=2}
Line 989
  fIsOperator always 65536
  state always {!<=-1,!>=2}
Line 991
  state always {!<=-1,!>=2}
Line 992
  fHasLvalRefQual always 131072
  state always {!<=-1,!>=2}
Line 994
  state always {!<=-1,!>=2}
Line 995
  fHasRvalRefQual always 262144
  state always {!<=-1,!>=2}
Line 997
  state always {!<=-1,!>=2}
Line 998
  fIsVariadic always 524288
  state always {!<=-1,!>=2}
Line 1000
  state always {!<=-1,!>=2}
Line 1001
  fIsVolatile always 1048576
  state always {!<=-1,!>=2}
Line 1003
  state always {!<=-1,!>=2}
Line 1004
  fHasTrailingReturnType always 2097152
  state always {!<=-1,!>=2}
Line 1006
  state always {!<=-1,!>=2}
Line 1007
  fIsInlineKeyword always 8388608
  state always {!<=-1,!>=2}
Line 1022
  eGlobal always 0
  eClass always 1
  eStruct always 2
  eUnion always 3
  eNamespace always 4
  eFunction always 5
  eIf always 6
  eElse always 7
  eFor always 8
  eWhile always 9
  eDo always 10
  eSwitch always 11
  eUnconditional always 12
  eTry always 13
  eCatch always 14
  eLambda always 15
  eEnum always 16
Line 1051
  enumClass always {!<=-1,!>=2}
Line 1056
  = possible 0
  start possible 0
Line 1057
  = possible 0
  start possible 0
  ? possible 0
  start always !0
  : always 0
  nullptr always 0
Line 1059
  bodyStartList possible lifetime[Object]=(start)
  start always !0
Line 1062
  ( always {!<=-1,!>=2}
Line 1064
  return always {!<=-1,!>=2}
  ( always !<=-1
  > always {!<=-1,!>=2}
  9 always 9
  && always {!<=-1,!>=2}
  className {>=size=10,!<=size=9}
  0 always 0
  9 always 9
  "Anonymous" always "Anonymous"
  == always {!<=-1,!>=2}
  0 always 0
  && always {!<=-1,!>=2}
  9 always 9
Line 1069
  == always {!<=-1,!>=2}
Line 1070
  & {lifetime[Address]=(enumeratorList),!0}
Line 1072
  nullptr always 0
Line 1075
  ( always {!<=-1,!>=2}
Line 1076
  ! always {!<=-1,!>=2}
  outer possible symbolic=(this)
Line 1077
  return always {!<=-1,!>=2}
  false always 0
Line 1078
  outer always !0
  == always {!<=-1,!>=2}
  this always !0
Line 1079
  return always {!<=-1,!>=2}
  true always 1
Line 1081
  outer {symbolic=(parent),!symbolic=(this),!0}
  != {!<=-1,!>=2,0,1}
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && {!<=-1,!>=2,0}
  parent {symbolic=(nestedIn),!symbolic=(outer),0}
Line 1082
  parent {symbolic=(nestedIn),!symbolic=(outer),!0}
Line 1083
  parent possible {symbolic=(nestedIn),symbolic=(outer),0}
  && always {!<=-1,!>=2}
  parent always !0
  == always {!<=-1,!>=2}
  outer always {!symbolic=(this),!0}
Line 1084
  return always {!<=-1,!>=2}
  true always 1
Line 1085
  return always {!<=-1,!>=2}
  false always 0
Line 1090
  scope always !0
  == always {!<=-1,!>=2}
  :: always 5
  eFunction always 5
Line 1092
  scope always !0
Line 1094
  ! {!<=-1,!>=2,1}
  scope possible 0
Line 1095
  nullptr always 0
Line 1096
  scope always !0
Line 1099
  ( always {!<=-1,!>=2}
Line 1100
  return always {!<=-1,!>=2}
  type possible 2
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type always !1
  == always {!<=-1,!>=2}
  eStruct always 2
Line 1103
  ( always {!<=-1,!>=2}
Line 1104
  return always {!<=-1,!>=2}
  type possible {2,3}
  == {!<=-1,!>=2,0}
  eClass always 1
  || always {!<=-1,!>=2}
  type {3,!1}
  == {!<=-1,!>=2,0}
  eStruct always 2
  || always {!<=-1,!>=2}
  type always {!1,!2}
  == always {!<=-1,!>=2}
  eUnion always 3
Line 1107
  ( always {!<=-1,!>=2}
Line 1108
  return always {!<=-1,!>=2}
  type possible {2,3,0,4,16}
  != {!<=-1,!>=2,1}
  eClass always 1
  && always {!<=-1,!>=2}
  type {3,0,4,16,!1}
  != {!<=-1,!>=2,1}
  eStruct always 2
  && always {!<=-1,!>=2}
  type {0,4,16,!1,!2}
  != {!<=-1,!>=2,1}
  eUnion always 3
  && always {!<=-1,!>=2}
  type {4,16,!2,!3}
  != {!<=-1,!>=2,1}
  eGlobal always 0
  && always {!<=-1,!>=2}
  type {16,!3,!0}
  != {!<=-1,!>=2,1}
  eNamespace always 4
  && always {!<=-1,!>=2}
  type always {!0,!4}
  != always {!<=-1,!>=2}
  eEnum always 16
Line 1111
  ( always {!<=-1,!>=2}
Line 1112
  return always {!<=-1,!>=2}
  type possible {9,10}
  == {!<=-1,!>=2,0}
  :: always 8
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,!8}
  == {!<=-1,!>=2,0}
  :: always 9
  eWhile always 9
  || always {!<=-1,!>=2}
  type always {!8,!9}
  == always {!<=-1,!>=2}
  :: always 10
  eDo always 10
Line 1115
  ( always {!<=-1,!>=2}
Line 1116
  return always {!<=-1,!>=2}
  type possible {7,8,9,10,11,12,13,14}
  == {!<=-1,!>=2,0}
  eIf always 6
  || always {!<=-1,!>=2}
  type {8,9,10,11,12,13,14,!6}
  == {!<=-1,!>=2,0}
  eElse always 7
  || always {!<=-1,!>=2}
Line 1117
  type {9,10,11,12,13,14,!6,!7}
  == {!<=-1,!>=2,0}
  eFor always 8
  || always {!<=-1,!>=2}
  type {10,11,12,13,14,!7,!8}
  == {!<=-1,!>=2,0}
  eWhile always 9
  || always {!<=-1,!>=2}
  type {11,12,13,14,!8,!9}
  == {!<=-1,!>=2,0}
  eDo always 10
  || always {!<=-1,!>=2}
Line 1118
  type {12,13,14,!9,!10}
  == {!<=-1,!>=2,0}
  eSwitch always 11
  || always {!<=-1,!>=2}
  type {13,14,!10,!11}
  == {!<=-1,!>=2,0}
  eUnconditional always 12
  || always {!<=-1,!>=2}
Line 1119
  type {14,!11,!12}
  == {!<=-1,!>=2,0}
  eTry always 13
  || always {!<=-1,!>=2}
  type always {!12,!13}
  == always {!<=-1,!>=2}
  eCatch always 14
Line 1123
  ( always {!<=-1,!>=2}
Line 1131
  , always 0
  requireConst always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1133
  , always 0
  isC always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1135
  ( always !0
  this always !0
Line 1140
  ( always !0
  this always !0
Line 1159
  functionList possible lifetime[Object]=(func)
Line 1161
  = {lifetime[Object]=(functionList),!0}
  & {lifetime[Object]=(functionList),!0}
  functionList {lifetime[Object]=(func),!size=0}
Line 1163
  ( possible lifetime[Iterator]=(functionMap)
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
  back {lifetime[Object]=(functionList),symbolic=(&functionList.back()),!0}
Line 1166
  ( always {!<=-1,!>=2}
Line 1186
  , always {!<=-1,!>=2}
  isCpp always {!<=-1,!>=2}
Line 1200
  ( always {!<=-1,!>=2}
  & {lifetime[Address]=(vartok),!0}
  & {lifetime[Address]=(typetok),!0}
Line 1209
  None always 0
Line 1210
  LValue always 1
Line 1211
  RValue always 2
Line 1217
  UNKNOWN_SIGN always 0
  SIGNED always 1
  UNSIGNED always 2
Line 1219
  UNKNOWN_TYPE always 0
Line 1220
  POD always 1
Line 1221
  NONSTD always 2
Line 1222
  RECORD always 3
Line 1223
  SMART_POINTER always 4
Line 1224
  CONTAINER always 5
Line 1225
  ITERATOR always 6
Line 1226
  VOID always 7
Line 1227
  BOOL always 8
Line 1228
  CHAR always 9
Line 1229
  SHORT always 10
Line 1230
  WCHAR_T always 11
Line 1231
  INT always 12
Line 1232
  LONG always 13
Line 1233
  LONGLONG always 14
Line 1234
  UNKNOWN_INT always 15
Line 1235
  FLOAT always 16
Line 1236
  DOUBLE always 17
Line 1237
  LONGDOUBLE always 18
Line 1242
  = always 0
  :: always 0
  None always 0
Line 1256
  UNKNOWN_SIGN always 0
Line 1257
  UNKNOWN_TYPE always 0
Line 1258
  0 always 0
Line 1259
  0U always 0
Line 1260
  0U always 0
Line 1261
  nullptr always 0
Line 1262
  nullptr always 0
Line 1263
  nullptr always 0
Line 1264
  nullptr always 0
Line 1265
  nullptr always 0
Line 1266
  nullptr always 0
Line 1268
  ( possible lifetime[SubObject]=(s)
Line 1271
  0 always 0
Line 1273
  0U always 0
Line 1274
  nullptr always 0
Line 1275
  nullptr always 0
Line 1276
  nullptr always 0
Line 1277
  nullptr always 0
Line 1278
  nullptr always 0
Line 1279
  nullptr always 0
Line 1281
  ( possible lifetime[SubObject]=(s)
Line 1284
  0 always 0
Line 1287
  nullptr always 0
Line 1288
  nullptr always 0
Line 1289
  nullptr always 0
Line 1290
  nullptr always 0
Line 1291
  nullptr always 0
Line 1292
  nullptr always 0
Line 1294
  ( possible lifetime[SubObject]=(s)
Line 1297
  0 always 0
Line 1300
  nullptr always 0
Line 1301
  nullptr always 0
Line 1302
  nullptr always 0
Line 1303
  nullptr always 0
Line 1304
  nullptr always 0
Line 1305
  nullptr always 0
Line 1311
  , always {!<=-1,!>=2}
  longType always {!<=-1,!>=2}
Line 1313
  UNKNOWN always 0
  SAME always 1
  FALLBACK1 always 2
  FALLBACK2 always 3
  NOMATCH always 4
Line 1317
  ( always {!<=-1,!>=2}
Line 1318
  return always {!<=-1,!>=2}
  >= always {!<=-1,!>=2}
  :: always 8
  BOOL always 8
Line 1321
  ( always {!<=-1,!>=2}
Line 1322
  return always {!<=-1,!>=2}
  type possible {<=15,>=16}
  >= {!<=-1,!>=2,<=1}
  :: always 8
  BOOL always 8
  && always {!<=-1,!>=2}
  type {>=8,!<=7}
  <= {!<=-1,!>=2,>=1}
  :: always 15
  UNKNOWN_INT always 15
Line 1325
  ( always {!<=-1,!>=2}
Line 1326
  return always {!<=-1,!>=2}
  type possible {<=18,>=19}
  >= {!<=-1,!>=2,<=1}
  :: always 16
  FLOAT always 16
  && always {!<=-1,!>=2}
  type {>=16,!<=15}
  <= {!<=-1,!>=2,>=1}
  :: always 18
  LONGDOUBLE always 18
Line 1329
  ( always {!<=-1,!>=2}
Line 1331
  ( always {!<=-1,!>=2}
Line 1332
  return always {!<=-1,!>=2}
  && always {!<=-1,!>=2}
  typeScope always !0
  == always {!<=-1,!>=2}
  :: always 16
  eEnum always 16
Line 1335
  , always 0
  p always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1338
  ( always {!<=-1,!>=2}
Line 1381
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1382
  , always 0
  lookOutside always {!<=-1,!>=2}
  = always 0
  false always 0
Line 1383
  this always !0
  lookOutside always {!<=-1,!>=2}
Line 1388
  this always !0
Line 1391
  ( always {!<=-1,!>=2}
Line 1392
  return always {!<=-1,!>=2}
  < always {!<=-1,!>=2}
  ( always !<=-1
Line 1408
  = always 0
  nullptr always 0
Line 1412
  ( always {!<=-1,!>=2}
Line 1426
  reportDebugWarnings always {!<=-1,!>=2}
  = always 0
  nullptr always 0
Line 1456
  firstPass always {!<=-1,!>=2}
Line 1467
  & {lifetime[Address]=(scope),!0}
Line 1468
  & {lifetime[Address]=(scope),!0}
  & {lifetime[Address]=(tok),!0}
Line 1470
  ( always {!<=-1,!>=2}
Line 1482
  ( always {!<=-1,!>=2}
Line 1500
  mIsCpp always {!<=-1,!>=2}
Line 58
  ( always {!<=-1,!>=2}
Line 59
  return always {!<=-1,!>=2}
  mIsC always {!<=-1,!>=2}
Line 63
  ( always {!<=-1,!>=2}
Line 64
  return always {!<=-1,!>=2}
  mIsCpp always {!<=-1,!>=2}
Line 73
  , always 0
  split always {!<=-1,!>=2}
  = always 0
  false always 0
Line 90
  , always 1
  one_line always {!<=-1,!>=2}
  = always 1
  true always 1
Line 101
  ( always {!<=-1,!>=2}
Line 103
  && always {!<=-1,!>=2}
Line 156
  ( always !<=-1
Line 175
  ( always {!<=-1,!>=2}
Line 192
  ( always {!<=-1,!>=2}
Line 219
  mIsC always {!<=-1,!>=2}
Line 220
  mIsCpp always {!<=-1,!>=2}
Line 71
  ( always {!<=-1,!>=2}
Line 73
  ( always {!<=-1,!>=2}
Line 75
  return possible lifetime[Iterator]=(mVariableId)
  ( possible lifetime[Iterator]=(mVariableId)
Line 77
  ( always end=0
Line 78
  return possible lifetime[Iterator]=(mVariableId)
  ( {lifetime[Iterator]=(mVariableId),end=0}
Line 84
  & {lifetime[Address]=(mVarId),!0}
Line 99
  ( always {!<=-1,!>=2}
Line 100
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 104
  ( always {!<=-1,!>=2}
Line 105
  return always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 114
  ( always {!<=-1,!>=2}
  , always 0
  = always 0
  nullptr always 0
Line 116
  ( always {!<=-1,!>=2}
Line 117
  && always {!<=-1,!>=2}
Line 119
  ( always {!<=-1,!>=2}
Line 141
  ( always {!<=-1,!>=2}
Line 159
  ( always {!<=-1,!>=2}
Line 167
  ( always {!<=-1,!>=2}
Line 185
  check always {!<=-1,!>=2}
Line 218
  ( always {!<=-1,!>=2}
Line 232
  ( always {!<=-1,!>=2}
Line 292
  ( always {!<=-1,!>=2}
Line 298
  only_k_r_fpar always {!<=-1,!>=2}
Line 299
  , always {!<=-1,!>=2}
  only_k_r_fpar always {!<=-1,!>=2}
Line 314
  ( always {!<=-1,!>=2}
Line 351
  ( always {!<=-1,!>=2}
Line 364
  ( always {!<=-1,!>=2}
Line 380
  , always {!<=-1,!>=2}
  commandWithCondition always {!<=-1,!>=2}
Line 397
  ( always {!<=-1,!>=2}
Line 401
  ( always {!<=-1,!>=2}
Line 420
  ( always {!<=-1,!>=2}
Line 426
  ( always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  floatvar always {!<=-1,!>=2}
Line 432
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  valueIsPointer always {!<=-1,!>=2}
Line 455
  ( always {!<=-1,!>=2}
Line 462
  ( always {!<=-1,!>=2}
Line 480
  ( always {!<=-1,!>=2}
Line 497
  ( always {!<=-1,!>=2}
Line 582
  , always {!<=-1,!>=2}
  cpp always {!<=-1,!>=2}
Line 591
  ( always {!<=-1,!>=2}
Line 640
  , always ""
  = always ""
  "" always ""
Line 680
  ( always {!<=-1,!>=2}
  , always {!<=-1,!>=2}
  allowSemicolon always {!<=-1,!>=2}
Line 786
  ( always {!<=-1,!>=2}
Line 813
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 814
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 816
  ( always {!<=-1,!>=2}
Line 850
  ( always {!<=-1,!>=2}
Line 855
  ( always {!<=-1,!>=2}
Line 856
  return always {!<=-1,!>=2}
  mCodeWithTemplates always {!<=-1,!>=2}
Line 904
  ( always {!<=-1,!>=2}
Line 911
  ( always {!<=-1,!>=2}
Line 918
  ( always {!<=-1,!>=2}
Line 932
  ( always {!<=-1,!>=2}
Line 933
  return always {!<=-1,!>=2}
  false always 0
Line 950
  , always {!<=-1,!>=2}
  inOperator always {!<=-1,!>=2}
Line 986
  used always {!<=-1,!>=2}
Line 1000
  mCodeWithTemplates always {!<=-1,!>=2}
Line 41
  symbolDatabase always symbolic=(tokenizer->getSymbolDatabase())
Line 43
  ! always {!<=-1,!>=2}
  f always symbolic=(scope->function)
Line 50
  != always {!<=-1,!>=2}
Line 51
  && always {!<=-1,!>=2}
  ( always !0
  ( always {!<=-1,!>=2}
Line 52
  ( always !0
Line 53
  ( always {!<=-1,!>=2}
  "%name% (" always "%name% ("
  && always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  1 always 1
  ") {" always ") {"
Line 55
  ( always {!<=-1,!>=2}
  1 always 1
  ") ; }" always ") ; }"
Line 63
  = always ""
  "" always ""
Line 66
  sep possible {"",","}
Line 67
  = always ","
  "," always ","
Line 72
  f {symbolic=(scope->function),!0}
Line 73
  ! {!<=-1,!>=2,0}
  globalVars possible size=0
  ( {!<=-1,!>=2,1}
Line 74
  " global:[" always " global:["
  globalVars always !size=0
  "]" always "]"
Line 75
  ! {!<=-1,!>=2,0}
  calledFunctions possible size=0
  ( {!<=-1,!>=2,1}
Line 76
  " call:[" always " call:["
  calledFunctions always !size=0
  "]" always "]"
Line 77
  ! {!<=-1,!>=2,0}
  noreturn possible size=0
  ( {!<=-1,!>=2,1}
Line 78
  " noreturn:[" always " noreturn:["
  noreturn always !size=0
  "]" always "]"
Line 82
  ! {!<=-1,!>=2,0}
  . possible size=0
  ( {!<=-1,!>=2,1}
Line 83
  . always !size=0
Line 84
  :: always !<=-1
  pos always !<=-1
  pos always !<=-1
  = always !<=-1
  filename always symbolic=(AnalyzerInformation::getAnalyzerInfoFile(settings->buildDir,tokenizer->list.getSourceFilePath(),cfg))
  ( always !<=-1
  ".a" always ".a"
Line 85
  pos always !<=-1
  != always {!<=-1,!>=2}
Line 86
  filename always symbolic=(AnalyzerInformation::getAnalyzerInfoFile(settings->buildDir,tokenizer->list.getSourceFilePath(),cfg))
  pos always !<=-1
  + always !<=0
  1 always 1
  = always 115
  's' always 115
Line 102
  ! always {!<=-1,!>=2}
Line 105
  line possible size=0
Line 106
  :: always !<=-1
  dotA always !<=-1
  dotA always !<=-1
  = always !<=-1
  ( always !<=-1
  ".a" always ".a"
Line 107
  :: always !<=-1
  colon always !<=-1
  colon always !<=-1
  = always !<=-1
  ( always !<=-1
  ":" always ":"
Line 108
  colon {!<=-1,<=symbolic=(dotA-1),>=symbolic=(dotA)}
  > always {!<=-1,!>=2}
  ( always !<=-1
  || always {!<=-1,!>=2}
  dotA always !<=-1
  > always {!<=-1,!>=2}
  colon {!<=-1,!>=symbolic=(line.size()+1),<=symbolic=(line.size())}
Line 110
  0 always 0
  colon {!<=-1,!>=symbolic=(line.size()+1),<=symbolic=(line.size()),!<=symbolic=(dotA-1),>=symbolic=(dotA)}
Line 111
  dotA {!<=-1,!>=symbolic=(colon+1),<=symbolic=(colon)}
  + always !<=0
  1 always 1
  = always 115
  's' always 115
Line 120
  start always !<=-1
  = always !<=-1
  ( always !<=-1
  " " always " "
  data possible "call"@14
  ":[" always ":["
Line 121
  start always !<=-1
  == always {!<=-1,!>=2}
Line 122
  ret always size=0
Line 123
  end always !<=-1
  = always !<=-1
  ( always !<=-1
  "]" always "]"
  start always !<=-1
Line 124
  end always !<=-1
  >= always {!<=-1,!>=2}
  ( always !<=-1
Line 125
  ret always size=0
Line 127
  :: always !<=-1
  pos1 always !<=-1
  pos1 always !<=-1
  = always !<=2
  start always !<=-1
  + always !<=2
  3 always 3
  + always !<=2
  ( always !<=-1
Line 128
  pos1 {symbolic=(start+3+data.size()),symbolic=(pos2+1),!<=-1}
  < always {!<=-1,!>=2}
  end {!<=-1,!>=symbolic=(line.size()),<=symbolic=(line.size()-1)}
Line 129
  :: always !<=-1
  pos2 always !<=-1
  pos2 always !<=-1
  = always !<=-1
  ( always !<=-1
  ",]" always ",]"
  pos1 {symbolic=(start+3+data.size()),!<=-1,<=symbolic=(end-1),!>=symbolic=(end)}
Line 130
  pos1 {symbolic=(start+3+data.size()),!<=-1,<=symbolic=(end-1)}
  pos2 {!<=-1,<=symbolic=(end-2),>=symbolic=(end-1)}
  - always !<=-1
  pos1 {symbolic=(start+3+data.size()),!<=-1,<=symbolic=(end-1)}
  - always !<=-1
  1 always 1
Line 131
  pos1 always !<=-1
  = always !<=0
  pos2 always !<=-1
  + always !<=0
  1 always 1
Line 146
  ( possible {lifetime[Iterator]=(functionCalls[c]),lifetime[Object]=(functionCalls)}
  ( {lifetime[Iterator]=(functionCalls[c]),lifetime[Object]=(functionCalls),start=0}
  ( {lifetime[Iterator]=(functionCalls[c]),lifetime[Object]=(functionCalls),end=0}
  ( {lifetime[Iterator]=(functionCalls[c]),lifetime[Object]=(functionCalls),end=0}
Line 147
  ( always {!<=-1,!>=2}
Line 156
  ( always {!<=-1,!>=2}
Line 164
  buildDir always !size=0
  "/files.txt" always "/files.txt"
Line 165
  : always symbolic=(getSummaryFiles(buildDir+"/files.txt"))
  summaryFiles always symbolic=(getSummaryFiles(buildDir+"/files.txt"))
Line 166
  '/' always 47
Line 167
  ! always {!<=-1,!>=2}
Line 170
  line possible size=0
Line 172
  pos1 always 0
  = always 0
  0 always 0
Line 173
  pos2 always !<=-1
  = always !<=-1
  ( always !<=-1
  " " always " "
  pos1 always 0
Line 174
  pos2 always !<=-1
  == always {!<=-1,!>=2}
  0 always 0
  pos2 always !<=-1
Line 175
  "call" always "call"
Line 176
  = {symbolic=(getSummaryData(line,"call")),size=0}
  call {symbolic=(getSummaryData(line,"call")),size=0}
Line 177
  call {symbolic=(getSummaryData(line,"call")),symbolic=(functionCalls[functionName]),size=0}
  ( {!<=-1,!>=2,1}
Line 180
  : always {symbolic=(getSummaryData(line,"call")),symbolic=(functionCalls[functionName])}
  call {symbolic=(getSummaryData(line,"call")),symbolic=(functionCalls[functionName]),!size=0}
Line 186
  ( {lifetime[Iterator]=(return1),start=0}
  ( {lifetime[Iterator]=(return1),end=0}
Line 191
  return2 always size=0
Line 192
  ( {lifetime[Iterator]=(return2),start=0}
  ( {lifetime[Iterator]=(return2),end=0}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
Line 50
  mFlags always !<=-1
  mFlags always !<=-1
  = always 0
  0 always 0
Line 52
  ( always !<=-1
Line 53
  return always !<=-1
  mFlags always !<=-1
Line 56
  mFlags always !<=-1
  = always 0
  0 always 0
Line 59
  mFlags always !<=-1
  = always 4294967295
  0xFFFFFFFF always 4294967295
Line 61
  enabled always {!<=-1,!>=2}
Line 62
  enabled always {!<=-1,!>=2}
Line 67
  ( always {!<=-1,!>=2}
Line 68
  return always {!<=-1,!>=2}
  mFlags always !<=-1
  & always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
  != always {!<=-1,!>=2}
  0 always 0
Line 71
  mFlags always !<=-1
  |= always !<=-1
  1U always 1
  << always !<=0
  ( always !<=-1
Line 74
  mFlags always !<=-1
  &= always !<=-1
  ~ always !<=4294967295
  1U always 1
  << always !<=0
  ( always !<=-1
Line 76
  , always {!<=-1,!>=2}
  enabled always {!<=-1,!>=2}
Line 77
  enabled always {!<=-1,!>=2}
