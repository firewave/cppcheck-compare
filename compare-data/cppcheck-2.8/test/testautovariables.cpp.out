

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741939 expected@var22 !=@expr1073741940 actual@var23 ) {
62: std ::@expr1073741941 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741942 expected@var22 ;
64: std ::@expr1073741943 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741944 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741945 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741946 str (@expr1073741947 ) , actualStr@var26 .@expr1073741948 str (@expr1073741949 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741950 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741951 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741952 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741953 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testautovariables.cpp

1:
|
27:
28: class TestAutoVariables : public TestFixture {
29: public:
30: TestAutoVariables ( ) : TestFixture ( "TestAutoVariables" ) { }
31:
32: private:
33: Settings settings@var102 ;
34:
35:
36: void check_ ( const char * file@var103 , int line@var104 , const char code@var105 [ ] , bool inconclusive@var106 = false , const char * filename@var107 = "test.cpp" ) {
37:
38: errout@var100 .@expr1073741955 str (@expr1073741956 "" ) ;
39:
40: settings@var102 .@expr1073741957 certainty@var108 .@expr1073741958 setEnabled (@expr1073741959 Certainty ::@expr1073741960 inconclusive@expr1073741954 , inconclusive@var106 ) ;
41:
42:
43: Tokenizer tokenizer@var109 (@expr1073741961 &@expr138 settings@var102 , this@expr139 ) ;
44: std ::@expr1073741964 istringstream istr@var110 (@expr1073741965 code@var105 ) ;
45: $assert_ $(@expr1073741966 file@var103 $, line@var104 $, $(@expr1073741967 tokenizer@var109 .@expr1073741968 tokenize (@expr1073741969 istr@var110 , filename@var107 ) $) $) ;
46:
47: CheckAutoVariables checkAutoVariables@var111 ;
48: checkAutoVariables@var111 .@expr1073741970 runChecks (@expr1073741971 &@expr1073741972 tokenizer@var109 , &@expr138 settings@var102 , this@expr139 ) ;
49: }
50:
51: void run ( ) override {
52: settings@var102 .@expr152 severity@var112 .@expr153 enable (@expr1073741978 Severity ::@expr1073741979 warning@expr1073741974 ) ;
53: settings@var102 .@expr152 severity@var112 .@expr153 enable (@expr1073741982 Severity ::@expr1073741983 style@expr1073741975 ) ;
54: $do ${ $if $(@expr1073741984 settings@var102 .@expr161 library@var113 $.@expr1073741986 $load $(@expr1073741987 $exename@var11 $.@expr1073741988 $c_str $(@expr1073741989 $) $, "std.cfg" $) $.@expr1073741990 $errorcode $!=@expr1073741991 $Library $::@expr1073741992 $ErrorCode $::@expr1073741993 $OK $) ${ $complainMissingLib $(@expr1073741994 "std.cfg" $) $; $return $; $} $} $while $(@expr1073741995 $false $) ;
55: $do ${ $if $(@expr1073741996 settings@var102 .@expr161 library@var113 $.@expr1073741998 $load $(@expr1073741999 $exename@var11 $.@expr1073742000 $c_str $(@expr1073742001 $) $, "qt.cfg" $) $.@expr1073742002 $errorcode $!=@expr1073742003 $Library $::@expr1073742004 $ErrorCode $::@expr1073742005 $OK $) ${ $complainMissingLib $(@expr1073742006 "qt.cfg" $) $; $return $; $} $} $while $(@expr1073742007 $false $) ;
56:
57: $do ${ $if $(@expr1073742008 $prepareTest $(@expr1073742009 "testautovar1" $) $) ${ $setVerbose $(@expr1073742010 $false $) $; testautovar1 $(@expr1073742011 $) $; $} $} $while $(@expr1073742012 $false $) ;
58: $do ${ $if $(@expr1073742013 $prepareTest $(@expr1073742014 "testautovar2" $) $) ${ $setVerbose $(@expr1073742015 $false $) $; testautovar2 $(@expr1073742016 $) $; $} $} $while $(@expr1073742017 $false $) ;
59: $do ${ $if $(@expr1073742018 $prepareTest $(@expr1073742019 "testautovar3" $) $) ${ $setVerbose $(@expr1073742020 $false $) $; testautovar3 $(@expr1073742021 $) $; $} $} $while $(@expr1073742022 $false $) ;
60: $do ${ $if $(@expr1073742023 $prepareTest $(@expr1073742024 "testautovar4" $) $) ${ $setVerbose $(@expr1073742025 $false $) $; testautovar4 $(@expr1073742026 $) $; $} $} $while $(@expr1073742027 $false $) ;
61: $do ${ $if $(@expr1073742028 $prepareTest $(@expr1073742029 "testautovar5" $) $) ${ $setVerbose $(@expr1073742030 $false $) $; testautovar5 $(@expr1073742031 $) $; $} $} $while $(@expr1073742032 $false $) ;
62: $do ${ $if $(@expr1073742033 $prepareTest $(@expr1073742034 "testautovar6" $) $) ${ $setVerbose $(@expr1073742035 $false $) $; testautovar6 $(@expr1073742036 $) $; $} $} $while $(@expr1073742037 $false $) ;
63: $do ${ $if $(@expr1073742038 $prepareTest $(@expr1073742039 "testautovar7" $) $) ${ $setVerbose $(@expr1073742040 $false $) $; testautovar7 $(@expr1073742041 $) $; $} $} $while $(@expr1073742042 $false $) ;
64: $do ${ $if $(@expr1073742043 $prepareTest $(@expr1073742044 "testautovar8" $) $) ${ $setVerbose $(@expr1073742045 $false $) $; testautovar8 $(@expr1073742046 $) $; $} $} $while $(@expr1073742047 $false $) ;
65: $do ${ $if $(@expr1073742048 $prepareTest $(@expr1073742049 "testautovar9" $) $) ${ $setVerbose $(@expr1073742050 $false $) $; testautovar9 $(@expr1073742051 $) $; $} $} $while $(@expr1073742052 $false $) ;
66: $do ${ $if $(@expr1073742053 $prepareTest $(@expr1073742054 "testautovar10" $) $) ${ $setVerbose $(@expr1073742055 $false $) $; testautovar10 $(@expr1073742056 $) $; $} $} $while $(@expr1073742057 $false $) ;
67: $do ${ $if $(@expr1073742058 $prepareTest $(@expr1073742059 "testautovar11" $) $) ${ $setVerbose $(@expr1073742060 $false $) $; testautovar11 $(@expr1073742061 $) $; $} $} $while $(@expr1073742062 $false $) ;
68: $do ${ $if $(@expr1073742063 $prepareTest $(@expr1073742064 "testautovar12" $) $) ${ $setVerbose $(@expr1073742065 $false $) $; testautovar12 $(@expr1073742066 $) $; $} $} $while $(@expr1073742067 $false $) ;
69: $do ${ $if $(@expr1073742068 $prepareTest $(@expr1073742069 "testautovar13" $) $) ${ $setVerbose $(@expr1073742070 $false $) $; testautovar13 $(@expr1073742071 $) $; $} $} $while $(@expr1073742072 $false $) ;
70: $do ${ $if $(@expr1073742073 $prepareTest $(@expr1073742074 "testautovar14" $) $) ${ $setVerbose $(@expr1073742075 $false $) $; testautovar14 $(@expr1073742076 $) $; $} $} $while $(@expr1073742077 $false $) ;
71: $do ${ $if $(@expr1073742078 $prepareTest $(@expr1073742079 "testautovar15" $) $) ${ $setVerbose $(@expr1073742080 $false $) $; testautovar15 $(@expr1073742081 $) $; $} $} $while $(@expr1073742082 $false $) ;
72: $do ${ $if $(@expr1073742083 $prepareTest $(@expr1073742084 "testautovar16" $) $) ${ $setVerbose $(@expr1073742085 $false $) $; testautovar16 $(@expr1073742086 $) $; $} $} $while $(@expr1073742087 $false $) ;
73: $do ${ $if $(@expr1073742088 $prepareTest $(@expr1073742089 "testautovar_array1" $) $) ${ $setVerbose $(@expr1073742090 $false $) $; testautovar_array1 $(@expr1073742091 $) $; $} $} $while $(@expr1073742092 $false $) ;
74: $do ${ $if $(@expr1073742093 $prepareTest $(@expr1073742094 "testautovar_array2" $) $) ${ $setVerbose $(@expr1073742095 $false $) $; testautovar_array2 $(@expr1073742096 $) $; $} $} $while $(@expr1073742097 $false $) ;
75: $do ${ $if $(@expr1073742098 $prepareTest $(@expr1073742099 "testautovar_normal" $) $) ${ $setVerbose $(@expr1073742100 $false $) $; testautovar_normal $(@expr1073742101 $) $; $} $} $while $(@expr1073742102 $false $) ;
76: $do ${ $if $(@expr1073742103 $prepareTest $(@expr1073742104 "testautovar_ptrptr" $) $) ${ $setVerbose $(@expr1073742105 $false $) $; testautovar_ptrptr $(@expr1073742106 $) $; $} $} $while $(@expr1073742107 $false $) ;
77: $do ${ $if $(@expr1073742108 $prepareTest $(@expr1073742109 "testautovar_return1" $) $) ${ $setVerbose $(@expr1073742110 $false $) $; testautovar_return1 $(@expr1073742111 $) $; $} $} $while $(@expr1073742112 $false $) ;
78: $do ${ $if $(@expr1073742113 $prepareTest $(@expr1073742114 "testautovar_return2" $) $) ${ $setVerbose $(@expr1073742115 $false $) $; testautovar_return2 $(@expr1073742116 $) $; $} $} $while $(@expr1073742117 $false $) ;
79: $do ${ $if $(@expr1073742118 $prepareTest $(@expr1073742119 "testautovar_return3" $) $) ${ $setVerbose $(@expr1073742120 $false $) $; testautovar_return3 $(@expr1073742121 $) $; $} $} $while $(@expr1073742122 $false $) ;
80: $do ${ $if $(@expr1073742123 $prepareTest $(@expr1073742124 "testautovar_return4" $) $) ${ $setVerbose $(@expr1073742125 $false $) $; testautovar_return4 $(@expr1073742126 $) $; $} $} $while $(@expr1073742127 $false $) ;
81: $do ${ $if $(@expr1073742128 $prepareTest $(@expr1073742129 "testautovar_extern" $) $) ${ $setVerbose $(@expr1073742130 $false $) $; testautovar_extern $(@expr1073742131 $) $; $} $} $while $(@expr1073742132 $false $) ;
82: $do ${ $if $(@expr1073742133 $prepareTest $(@expr1073742134 "testautovar_reassigned" $) $) ${ $setVerbose $(@expr1073742135 $false $) $; testautovar_reassigned $(@expr1073742136 $) $; $} $} $while $(@expr1073742137 $false $) ;
83: $do ${ $if $(@expr1073742138 $prepareTest $(@expr1073742139 "testinvaliddealloc" $) $) ${ $setVerbose $(@expr1073742140 $false $) $; testinvaliddealloc $(@expr1073742141 $) $; $} $} $while $(@expr1073742142 $false $) ;
84: $do ${ $if $(@expr1073742143 $prepareTest $(@expr1073742144 "testinvaliddealloc_input" $) $) ${ $setVerbose $(@expr1073742145 $false $) $; testinvaliddealloc_input $(@expr1073742146 $) $; $} $} $while $(@expr1073742147 $false $) ;
85: $do ${ $if $(@expr1073742148 $prepareTest $(@expr1073742149 "testinvaliddealloc_string" $) $) ${ $setVerbose $(@expr1073742150 $false $) $; testinvaliddealloc_string $(@expr1073742151 $) $; $} $} $while $(@expr1073742152 $false $) ;
86: $do ${ $if $(@expr1073742153 $prepareTest $(@expr1073742154 "testinvaliddealloc_C" $) $) ${ $setVerbose $(@expr1073742155 $false $) $; testinvaliddealloc_C $(@expr1073742156 $) $; $} $} $while $(@expr1073742157 $false $) ;
87: $do ${ $if $(@expr1073742158 $prepareTest $(@expr1073742159 "testassign1" $) $) ${ $setVerbose $(@expr1073742160 $false $) $; testassign1 $(@expr1073742161 $) $; $} $} $while $(@expr1073742162 $false $) ;
88: $do ${ $if $(@expr1073742163 $prepareTest $(@expr1073742164 "testassign2" $) $) ${ $setVerbose $(@expr1073742165 $false $) $; testassign2 $(@expr1073742166 $) $; $} $} $while $(@expr1073742167 $false $) ;
89:
90: $do ${ $if $(@expr1073742168 $prepareTest $(@expr1073742169 "assignAddressOfLocalArrayToGlobalPointer" $) $) ${ $setVerbose $(@expr1073742170 $false $) $; assignAddressOfLocalArrayToGlobalPointer $(@expr1073742171 $) $; $} $} $while $(@expr1073742172 $false $) ;
91: $do ${ $if $(@expr1073742173 $prepareTest $(@expr1073742174 "assignAddressOfLocalVariableToGlobalPointer" $) $) ${ $setVerbose $(@expr1073742175 $false $) $; assignAddressOfLocalVariableToGlobalPointer $(@expr1073742176 $) $; $} $} $while $(@expr1073742177 $false $) ;
92: $do ${ $if $(@expr1073742178 $prepareTest $(@expr1073742179 "assignAddressOfLocalVariableToMemberVariable" $) $) ${ $setVerbose $(@expr1073742180 $false $) $; assignAddressOfLocalVariableToMemberVariable $(@expr1073742181 $) $; $} $} $while $(@expr1073742182 $false $) ;
93:
94: $do ${ $if $(@expr1073742183 $prepareTest $(@expr1073742184 "returnLocalVariable1" $) $) ${ $setVerbose $(@expr1073742185 $false $) $; returnLocalVariable1 $(@expr1073742186 $) $; $} $} $while $(@expr1073742187 $false $) ;
95: $do ${ $if $(@expr1073742188 $prepareTest $(@expr1073742189 "returnLocalVariable2" $) $) ${ $setVerbose $(@expr1073742190 $false $) $; returnLocalVariable2 $(@expr1073742191 $) $; $} $} $while $(@expr1073742192 $false $) ;
96: $do ${ $if $(@expr1073742193 $prepareTest $(@expr1073742194 "returnLocalVariable3" $) $) ${ $setVerbose $(@expr1073742195 $false $) $; returnLocalVariable3 $(@expr1073742196 $) $; $} $} $while $(@expr1073742197 $false $) ;
97: $do ${ $if $(@expr1073742198 $prepareTest $(@expr1073742199 "returnLocalVariable4" $) $) ${ $setVerbose $(@expr1073742200 $false $) $; returnLocalVariable4 $(@expr1073742201 $) $; $} $} $while $(@expr1073742202 $false $) ;
98: $do ${ $if $(@expr1073742203 $prepareTest $(@expr1073742204 "returnLocalVariable5" $) $) ${ $setVerbose $(@expr1073742205 $false $) $; returnLocalVariable5 $(@expr1073742206 $) $; $} $} $while $(@expr1073742207 $false $) ;
99: $do ${ $if $(@expr1073742208 $prepareTest $(@expr1073742209 "returnLocalVariable6" $) $) ${ $setVerbose $(@expr1073742210 $false $) $; returnLocalVariable6 $(@expr1073742211 $) $; $} $} $while $(@expr1073742212 $false $) ;
100:
101:
102: $do ${ $if $(@expr1073742213 $prepareTest $(@expr1073742214 "returnReference1" $) $) ${ $setVerbose $(@expr1073742215 $false $) $; returnReference1 $(@expr1073742216 $) $; $} $} $while $(@expr1073742217 $false $) ;
103: $do ${ $if $(@expr1073742218 $prepareTest $(@expr1073742219 "returnReference2" $) $) ${ $setVerbose $(@expr1073742220 $false $) $; returnReference2 $(@expr1073742221 $) $; $} $} $while $(@expr1073742222 $false $) ;
104: $do ${ $if $(@expr1073742223 $prepareTest $(@expr1073742224 "returnReference3" $) $) ${ $setVerbose $(@expr1073742225 $false $) $; returnReference3 $(@expr1073742226 $) $; $} $} $while $(@expr1073742227 $false $) ;
105: $do ${ $if $(@expr1073742228 $prepareTest $(@expr1073742229 "returnReference4" $) $) ${ $setVerbose $(@expr1073742230 $false $) $; returnReference4 $(@expr1073742231 $) $; $} $} $while $(@expr1073742232 $false $) ;
106: $do ${ $if $(@expr1073742233 $prepareTest $(@expr1073742234 "returnReference5" $) $) ${ $setVerbose $(@expr1073742235 $false $) $; returnReference5 $(@expr1073742236 $) $; $} $} $while $(@expr1073742237 $false $) ;
107: $do ${ $if $(@expr1073742238 $prepareTest $(@expr1073742239 "returnReference6" $) $) ${ $setVerbose $(@expr1073742240 $false $) $; returnReference6 $(@expr1073742241 $) $; $} $} $while $(@expr1073742242 $false $) ;
108: $do ${ $if $(@expr1073742243 $prepareTest $(@expr1073742244 "returnReference7" $) $) ${ $setVerbose $(@expr1073742245 $false $) $; returnReference7 $(@expr1073742246 $) $; $} $} $while $(@expr1073742247 $false $) ;
109: $do ${ $if $(@expr1073742248 $prepareTest $(@expr1073742249 "returnReference8" $) $) ${ $setVerbose $(@expr1073742250 $false $) $; returnReference8 $(@expr1073742251 $) $; $} $} $while $(@expr1073742252 $false $) ;
110: $do ${ $if $(@expr1073742253 $prepareTest $(@expr1073742254 "returnReference9" $) $) ${ $setVerbose $(@expr1073742255 $false $) $; returnReference9 $(@expr1073742256 $) $; $} $} $while $(@expr1073742257 $false $) ;
111: $do ${ $if $(@expr1073742258 $prepareTest $(@expr1073742259 "returnReference10" $) $) ${ $setVerbose $(@expr1073742260 $false $) $; returnReference10 $(@expr1073742261 $) $; $} $} $while $(@expr1073742262 $false $) ;
112: $do ${ $if $(@expr1073742263 $prepareTest $(@expr1073742264 "returnReference11" $) $) ${ $setVerbose $(@expr1073742265 $false $) $; returnReference11 $(@expr1073742266 $) $; $} $} $while $(@expr1073742267 $false $) ;
113: $do ${ $if $(@expr1073742268 $prepareTest $(@expr1073742269 "returnReference12" $) $) ${ $setVerbose $(@expr1073742270 $false $) $; returnReference12 $(@expr1073742271 $) $; $} $} $while $(@expr1073742272 $false $) ;
114: $do ${ $if $(@expr1073742273 $prepareTest $(@expr1073742274 "returnReference13" $) $) ${ $setVerbose $(@expr1073742275 $false $) $; returnReference13 $(@expr1073742276 $) $; $} $} $while $(@expr1073742277 $false $) ;
115: $do ${ $if $(@expr1073742278 $prepareTest $(@expr1073742279 "returnReference14" $) $) ${ $setVerbose $(@expr1073742280 $false $) $; returnReference14 $(@expr1073742281 $) $; $} $} $while $(@expr1073742282 $false $) ;
116: $do ${ $if $(@expr1073742283 $prepareTest $(@expr1073742284 "returnReference15" $) $) ${ $setVerbose $(@expr1073742285 $false $) $; returnReference15 $(@expr1073742286 $) $; $} $} $while $(@expr1073742287 $false $) ;
117: $do ${ $if $(@expr1073742288 $prepareTest $(@expr1073742289 "returnReference16" $) $) ${ $setVerbose $(@expr1073742290 $false $) $; returnReference16 $(@expr1073742291 $) $; $} $} $while $(@expr1073742292 $false $) ;
118: $do ${ $if $(@expr1073742293 $prepareTest $(@expr1073742294 "returnReference16" $) $) ${ $setVerbose $(@expr1073742295 $false $) $; returnReference16 $(@expr1073742296 $) $; $} $} $while $(@expr1073742297 $false $) ;
119: $do ${ $if $(@expr1073742298 $prepareTest $(@expr1073742299 "returnReference17" $) $) ${ $setVerbose $(@expr1073742300 $false $) $; returnReference17 $(@expr1073742301 $) $; $} $} $while $(@expr1073742302 $false $) ;
120: $do ${ $if $(@expr1073742303 $prepareTest $(@expr1073742304 "returnReference18" $) $) ${ $setVerbose $(@expr1073742305 $false $) $; returnReference18 $(@expr1073742306 $) $; $} $} $while $(@expr1073742307 $false $) ;
121: $do ${ $if $(@expr1073742308 $prepareTest $(@expr1073742309 "returnReference19" $) $) ${ $setVerbose $(@expr1073742310 $false $) $; returnReference19 $(@expr1073742311 $) $; $} $} $while $(@expr1073742312 $false $) ;
122: $do ${ $if $(@expr1073742313 $prepareTest $(@expr1073742314 "returnReference20" $) $) ${ $setVerbose $(@expr1073742315 $false $) $; returnReference20 $(@expr1073742316 $) $; $} $} $while $(@expr1073742317 $false $) ;
123: $do ${ $if $(@expr1073742318 $prepareTest $(@expr1073742319 "returnReference21" $) $) ${ $setVerbose $(@expr1073742320 $false $) $; returnReference21 $(@expr1073742321 $) $; $} $} $while $(@expr1073742322 $false $) ;
124: $do ${ $if $(@expr1073742323 $prepareTest $(@expr1073742324 "returnReference22" $) $) ${ $setVerbose $(@expr1073742325 $false $) $; returnReference22 $(@expr1073742326 $) $; $} $} $while $(@expr1073742327 $false $) ;
125: $do ${ $if $(@expr1073742328 $prepareTest $(@expr1073742329 "returnReference23" $) $) ${ $setVerbose $(@expr1073742330 $false $) $; returnReference23 $(@expr1073742331 $) $; $} $} $while $(@expr1073742332 $false $) ;
126: $do ${ $if $(@expr1073742333 $prepareTest $(@expr1073742334 "returnReference24" $) $) ${ $setVerbose $(@expr1073742335 $false $) $; returnReference24 $(@expr1073742336 $) $; $} $} $while $(@expr1073742337 $false $) ;
127: $do ${ $if $(@expr1073742338 $prepareTest $(@expr1073742339 "returnReference25" $) $) ${ $setVerbose $(@expr1073742340 $false $) $; returnReference25 $(@expr1073742341 $) $; $} $} $while $(@expr1073742342 $false $) ;
128: $do ${ $if $(@expr1073742343 $prepareTest $(@expr1073742344 "returnReferenceFunction" $) $) ${ $setVerbose $(@expr1073742345 $false $) $; returnReferenceFunction $(@expr1073742346 $) $; $} $} $while $(@expr1073742347 $false $) ;
129: $do ${ $if $(@expr1073742348 $prepareTest $(@expr1073742349 "returnReferenceContainer" $) $) ${ $setVerbose $(@expr1073742350 $false $) $; returnReferenceContainer $(@expr1073742351 $) $; $} $} $while $(@expr1073742352 $false $) ;
130: $do ${ $if $(@expr1073742353 $prepareTest $(@expr1073742354 "returnReferenceLiteral" $) $) ${ $setVerbose $(@expr1073742355 $false $) $; returnReferenceLiteral $(@expr1073742356 $) $; $} $} $while $(@expr1073742357 $false $) ;
131: $do ${ $if $(@expr1073742358 $prepareTest $(@expr1073742359 "returnReferenceCalculation" $) $) ${ $setVerbose $(@expr1073742360 $false $) $; returnReferenceCalculation $(@expr1073742361 $) $; $} $} $while $(@expr1073742362 $false $) ;
132: $do ${ $if $(@expr1073742363 $prepareTest $(@expr1073742364 "returnReferenceLambda" $) $) ${ $setVerbose $(@expr1073742365 $false $) $; returnReferenceLambda $(@expr1073742366 $) $; $} $} $while $(@expr1073742367 $false $) ;
133: $do ${ $if $(@expr1073742368 $prepareTest $(@expr1073742369 "returnReferenceInnerScope" $) $) ${ $setVerbose $(@expr1073742370 $false $) $; returnReferenceInnerScope $(@expr1073742371 $) $; $} $} $while $(@expr1073742372 $false $) ;
134: $do ${ $if $(@expr1073742373 $prepareTest $(@expr1073742374 "returnReferenceRecursive" $) $) ${ $setVerbose $(@expr1073742375 $false $) $; returnReferenceRecursive $(@expr1073742376 $) $; $} $} $while $(@expr1073742377 $false $) ;
135: $do ${ $if $(@expr1073742378 $prepareTest $(@expr1073742379 "extendedLifetime" $) $) ${ $setVerbose $(@expr1073742380 $false $) $; extendedLifetime $(@expr1073742381 $) $; $} $} $while $(@expr1073742382 $false $) ;
136:
137: $do ${ $if $(@expr1073742383 $prepareTest $(@expr1073742384 "danglingReference" $) $) ${ $setVerbose $(@expr1073742385 $false $) $; danglingReference $(@expr1073742386 $) $; $} $} $while $(@expr1073742387 $false $) ;
138: $do ${ $if $(@expr1073742388 $prepareTest $(@expr1073742389 "danglingTempReference" $) $) ${ $setVerbose $(@expr1073742390 $false $) $; danglingTempReference $(@expr1073742391 $) $; $} $} $while $(@expr1073742392 $false $) ;
139:
140:
141: $do ${ $if $(@expr1073742393 $prepareTest $(@expr1073742394 "testglobalnamespace" $) $) ${ $setVerbose $(@expr1073742395 $false $) $; testglobalnamespace $(@expr1073742396 $) $; $} $} $while $(@expr1073742397 $false $) ;
142:
143: $do ${ $if $(@expr1073742398 $prepareTest $(@expr1073742399 "returnParameterAddress" $) $) ${ $setVerbose $(@expr1073742400 $false $) $; returnParameterAddress $(@expr1073742401 $) $; $} $} $while $(@expr1073742402 $false $) ;
144:
145: $do ${ $if $(@expr1073742403 $prepareTest $(@expr1073742404 "testconstructor" $) $) ${ $setVerbose $(@expr1073742405 $false $) $; testconstructor $(@expr1073742406 $) $; $} $} $while $(@expr1073742407 $false $) ;
146:
147: $do ${ $if $(@expr1073742408 $prepareTest $(@expr1073742409 "variableIsUsedInScope" $) $) ${ $setVerbose $(@expr1073742410 $false $) $; variableIsUsedInScope $(@expr1073742411 $) $; $} $} $while $(@expr1073742412 $false $) ;
148:
149: $do ${ $if $(@expr1073742413 $prepareTest $(@expr1073742414 "danglingLifetimeLambda" $) $) ${ $setVerbose $(@expr1073742415 $false $) $; danglingLifetimeLambda $(@expr1073742416 $) $; $} $} $while $(@expr1073742417 $false $) ;
150: $do ${ $if $(@expr1073742418 $prepareTest $(@expr1073742419 "danglingLifetimeContainer" $) $) ${ $setVerbose $(@expr1073742420 $false $) $; danglingLifetimeContainer $(@expr1073742421 $) $; $} $} $while $(@expr1073742422 $false $) ;
151: $do ${ $if $(@expr1073742423 $prepareTest $(@expr1073742424 "danglingLifetimeContainerView" $) $) ${ $setVerbose $(@expr1073742425 $false $) $; danglingLifetimeContainerView $(@expr1073742426 $) $; $} $} $while $(@expr1073742427 $false $) ;
152: $do ${ $if $(@expr1073742428 $prepareTest $(@expr1073742429 "danglingLifetimeUniquePtr" $) $) ${ $setVerbose $(@expr1073742430 $false $) $; danglingLifetimeUniquePtr $(@expr1073742431 $) $; $} $} $while $(@expr1073742432 $false $) ;
153: $do ${ $if $(@expr1073742433 $prepareTest $(@expr1073742434 "danglingLifetime" $) $) ${ $setVerbose $(@expr1073742435 $false $) $; danglingLifetime $(@expr1073742436 $) $; $} $} $while $(@expr1073742437 $false $) ;
154: $do ${ $if $(@expr1073742438 $prepareTest $(@expr1073742439 "danglingLifetimeFunction" $) $) ${ $setVerbose $(@expr1073742440 $false $) $; danglingLifetimeFunction $(@expr1073742441 $) $; $} $} $while $(@expr1073742442 $false $) ;
155: $do ${ $if $(@expr1073742443 $prepareTest $(@expr1073742444 "danglingLifetimeUserConstructor" $) $) ${ $setVerbose $(@expr1073742445 $false $) $; danglingLifetimeUserConstructor $(@expr1073742446 $) $; $} $} $while $(@expr1073742447 $false $) ;
156: $do ${ $if $(@expr1073742448 $prepareTest $(@expr1073742449 "danglingLifetimeAggegrateConstructor" $) $) ${ $setVerbose $(@expr1073742450 $false $) $; danglingLifetimeAggegrateConstructor $(@expr1073742451 $) $; $} $} $while $(@expr1073742452 $false $) ;
157: $do ${ $if $(@expr1073742453 $prepareTest $(@expr1073742454 "danglingLifetimeInitList" $) $) ${ $setVerbose $(@expr1073742455 $false $) $; danglingLifetimeInitList $(@expr1073742456 $) $; $} $} $while $(@expr1073742457 $false $) ;
158: $do ${ $if $(@expr1073742458 $prepareTest $(@expr1073742459 "danglingLifetimeImplicitConversion" $) $) ${ $setVerbose $(@expr1073742460 $false $) $; danglingLifetimeImplicitConversion $(@expr1073742461 $) $; $} $} $while $(@expr1073742462 $false $) ;
159: $do ${ $if $(@expr1073742463 $prepareTest $(@expr1073742464 "danglingTemporaryLifetime" $) $) ${ $setVerbose $(@expr1073742465 $false $) $; danglingTemporaryLifetime $(@expr1073742466 $) $; $} $} $while $(@expr1073742467 $false $) ;
160: $do ${ $if $(@expr1073742468 $prepareTest $(@expr1073742469 "danglingLifetimeBorrowedMembers" $) $) ${ $setVerbose $(@expr1073742470 $false $) $; danglingLifetimeBorrowedMembers $(@expr1073742471 $) $; $} $} $while $(@expr1073742472 $false $) ;
161: $do ${ $if $(@expr1073742473 $prepareTest $(@expr1073742474 "danglingLifetimeClassMemberFunctions" $) $) ${ $setVerbose $(@expr1073742475 $false $) $; danglingLifetimeClassMemberFunctions $(@expr1073742476 $) $; $} $} $while $(@expr1073742477 $false $) ;
162: $do ${ $if $(@expr1073742478 $prepareTest $(@expr1073742479 "invalidLifetime" $) $) ${ $setVerbose $(@expr1073742480 $false $) $; invalidLifetime $(@expr1073742481 $) $; $} $} $while $(@expr1073742482 $false $) ;
163: $do ${ $if $(@expr1073742483 $prepareTest $(@expr1073742484 "deadPointer" $) $) ${ $setVerbose $(@expr1073742485 $false $) $; deadPointer $(@expr1073742486 $) $; $} $} $while $(@expr1073742487 $false $) ;
164: $do ${ $if $(@expr1073742488 $prepareTest $(@expr1073742489 "splitNamespaceAuto" $) $) ${ $setVerbose $(@expr1073742490 $false $) $; splitNamespaceAuto $(@expr1073742491 $) $; $} $} $while $(@expr1073742492 $false $) ;
165: }
166:
167:
168:
169: void testautovar1 ( ) {
170: $check_ $(@expr1073742493 "cppcheck-2.8/test/testautovariables.cpp" $, 170 $, "void func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}" $)
171:
172:
173:
174: ;
175: $if $(@expr1073742494 $!@expr1073742495 $assertEquals $(@expr1073742496 "cppcheck-2.8/test/testautovariables.cpp" $, 175 $, "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
176:
177: $check_ $(@expr1073742499 "cppcheck-2.8/test/testautovariables.cpp" $, 177 $, "void func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}" $)
178:
179:
180:
181: ;
182: $if $(@expr1073742500 $!@expr1073742501 $assertEquals $(@expr1073742502 "cppcheck-2.8/test/testautovariables.cpp" $, 182 $, "[test.cpp:4]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
183:
184: $check_ $(@expr1073742505 "cppcheck-2.8/test/testautovariables.cpp" $, 184 $, "void func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}" $)
185:
186:
187:
188: ;
189: $if $(@expr1073742506 $!@expr1073742507 $assertEquals $(@expr1073742508 "cppcheck-2.8/test/testautovariables.cpp" $, 189 $, "" $, errout@var100 .@expr673 str (@expr674 ) $) $) { $return ; }
190: }
191:
192: void testautovar2 ( ) {
193: $check_ $(@expr1073742511 "cppcheck-2.8/test/testautovariables.cpp" $, 193 $, "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}" $)
194:
|
199:
200: ;
201: $if $(@expr1073742512 $!@expr1073742513 $assertEquals $(@expr1073742514 "cppcheck-2.8/test/testautovariables.cpp" $, 201 $, "[test.cpp:7]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr691 str (@expr692 ) $) $) { $return ; }
202:
203: $check_ $(@expr1073742517 "cppcheck-2.8/test/testautovariables.cpp" $, 203 $, "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}" $)
204:
|
209:
210: ;
211: $if $(@expr1073742518 $!@expr1073742519 $assertEquals $(@expr1073742520 "cppcheck-2.8/test/testautovariables.cpp" $, 211 $, "[test.cpp:7]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr691 str (@expr692 ) $) $) { $return ; }
212:
213: $check_ $(@expr1073742523 "cppcheck-2.8/test/testautovariables.cpp" $, 213 $, "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}" $)
214:
|
219:
220: ;
221: $if $(@expr1073742524 $!@expr1073742525 $assertEquals $(@expr1073742526 "cppcheck-2.8/test/testautovariables.cpp" $, 221 $, "" $, errout@var100 .@expr691 str (@expr692 ) $) $) { $return ; }
222: }
223:
224: void testautovar3 ( ) {
225: $check_ $(@expr1073742529 "cppcheck-2.8/test/testautovariables.cpp" $, 225 $, "void foo(int **p)\n{\n    int x[100];\n    *p = x;\n}" $)
226:
227:
228:
229: ;
230: $if $(@expr1073742530 $!@expr1073742531 $assertEquals $(@expr1073742532 "cppcheck-2.8/test/testautovariables.cpp" $, 230 $, "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742533 str (@expr1073742534 ) $) $) { $return ; }
231: }
232:
233: void testautovar4 ( ) {
234: $check_ $(@expr1073742535 "cppcheck-2.8/test/testautovariables.cpp" $, 234 $, "void foo(int **p)\n{\n    static int x[100];\n    *p = x;\n}" $)
235:
236:
237:
238: ;
239: $if $(@expr1073742536 $!@expr1073742537 $assertEquals $(@expr1073742538 "cppcheck-2.8/test/testautovariables.cpp" $, 239 $, "" $, errout@var100 .@expr1073742539 str (@expr1073742540 ) $) $) { $return ; }
240: }
241:
242: void testautovar5 ( ) {
243: $check_ $(@expr1073742541 "cppcheck-2.8/test/testautovariables.cpp" $, 243 $, "void foo(struct AB *ab)\n{\n    char a;\n    ab->a = &a;\n}" $)
244:
245:
246:
247: ;
248: $if $(@expr1073742542 $!@expr1073742543 $assertEquals $(@expr1073742544 "cppcheck-2.8/test/testautovariables.cpp" $, 248 $, "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742545 str (@expr1073742546 ) $) $) { $return ; }
249: }
250:
251: void testautovar6 ( ) {
252: $check_ $(@expr1073742547 "cppcheck-2.8/test/testautovariables.cpp" $, 252 $, "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}" , false $)
253:
254:
255:
256: ;
257: $if $(@expr1073742548 $!@expr1073742549 $assertEquals $(@expr1073742550 "cppcheck-2.8/test/testautovariables.cpp" $, 257 $, "" $, errout@var100 .@expr727 str (@expr728 ) $) $) { $return ; }
258:
259: $check_ $(@expr1073742553 "cppcheck-2.8/test/testautovariables.cpp" $, 259 $, "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}" , true $)
260:
261:
262:
263: ;
264: $if $(@expr1073742554 $!@expr1073742555 $assertEquals $(@expr1073742556 "cppcheck-2.8/test/testautovariables.cpp" $, 264 $, "[test.cpp:4]: (error, inconclusive) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr727 str (@expr728 ) $) $) { $return ; }
265: }
266:
267: void testautovar7 ( ) {
268: $check_ $(@expr1073742559 "cppcheck-2.8/test/testautovariables.cpp" $, 268 $, "struct txt_scrollpane_s * TXT_NewScrollPane(struct txt_widget_s * target)\n{\n    struct txt_scrollpane_s * scrollpane;\n    target->parent = &scrollpane->widget;\n    return scrollpane;\n}" , false $)
269:
|
272:
273: ;
274: $if $(@expr1073742560 $!@expr1073742561 $assertEquals $(@expr1073742562 "cppcheck-2.8/test/testautovariables.cpp" $, 274 $, "" $, errout@var100 .@expr1073742563 str (@expr1073742564 ) $) $) { $return ; }
275: }
276:
277: void testautovar8 ( ) {
278: $check_ $(@expr1073742565 "cppcheck-2.8/test/testautovariables.cpp" $, 278 $, "void foo(int*& p) {\n    int i = 0;\n    p = &i;\n}" , false $)
279:
280:
281: ;
282: $if $(@expr1073742566 $!@expr1073742567 $assertEquals $(@expr1073742568 "cppcheck-2.8/test/testautovariables.cpp" $, 282 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr745 str (@expr746 ) $) $) { $return ; }
283:
284: $check_ $(@expr1073742571 "cppcheck-2.8/test/testautovariables.cpp" $, 284 $, "void foo(std::string& s) {\n    s = foo;\n}" , false $)
285:
286: ;
287: $if $(@expr1073742572 $!@expr1073742573 $assertEquals $(@expr1073742574 "cppcheck-2.8/test/testautovariables.cpp" $, 287 $, "" $, errout@var100 .@expr745 str (@expr746 ) $) $) { $return ; }
288: }
289:
290: void testautovar9 ( ) {
291: $check_ $(@expr1073742577 "cppcheck-2.8/test/testautovariables.cpp" $, 291 $, "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fn.i;\n}" , false $)
292:
|
296:
297: ;
298: $if $(@expr1073742578 $!@expr1073742579 $assertEquals $(@expr1073742580 "cppcheck-2.8/test/testautovariables.cpp" $, 298 $, "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr757 str (@expr758 ) $) $) { $return ; }
299:
300: $check_ $(@expr1073742583 "cppcheck-2.8/test/testautovariables.cpp" $, 300 $, "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &p_fp->i;\n}" , false $)
301:
|
305:
306: ;
307: $if $(@expr1073742584 $!@expr1073742585 $assertEquals $(@expr1073742586 "cppcheck-2.8/test/testautovariables.cpp" $, 307 $, "" $, errout@var100 .@expr757 str (@expr758 ) $) $) { $return ; }
308:
309: $check_ $(@expr1073742589 "cppcheck-2.8/test/testautovariables.cpp" $, 309 $, "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fp.f->i;\n}" , false $)
310:
|
314:
315: ;
316: $if $(@expr1073742590 $!@expr1073742591 $assertEquals $(@expr1073742592 "cppcheck-2.8/test/testautovariables.cpp" $, 316 $, "" $, errout@var100 .@expr757 str (@expr758 ) $) $) { $return ; }
317: }
318:
319: void testautovar10 ( ) {
320: $check_ $(@expr1073742595 "cppcheck-2.8/test/testautovariables.cpp" $, 320 $, "void foo(char* p) {\n    p = 0;\n}" $)
321:
322: ;
323: $if $(@expr1073742596 $!@expr1073742597 $assertEquals $(@expr1073742598 "cppcheck-2.8/test/testautovariables.cpp" $, 323 $, "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
324:
325: $check_ $(@expr1073742601 "cppcheck-2.8/test/testautovariables.cpp" $, 325 $, "void foo(int b) {\n    b = foo(b);\n}" $)
326:
327: ;
328: $if $(@expr1073742602 $!@expr1073742603 $assertEquals $(@expr1073742604 "cppcheck-2.8/test/testautovariables.cpp" $, 328 $, "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
329:
330: $check_ $(@expr1073742607 "cppcheck-2.8/test/testautovariables.cpp" $, 330 $, "void foo(int b) {\n    b += 1;\n}" $)
331:
332: ;
333: $if $(@expr1073742608 $!@expr1073742609 $assertEquals $(@expr1073742610 "cppcheck-2.8/test/testautovariables.cpp" $, 333 $, "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
334:
335: $check_ $(@expr1073742613 "cppcheck-2.8/test/testautovariables.cpp" $, 335 $, "void foo(std::string s) {\n    s = foo(b);\n}" $)
336:
337: ;
338: $if $(@expr1073742614 $!@expr1073742615 $assertEquals $(@expr1073742616 "cppcheck-2.8/test/testautovariables.cpp" $, 338 $, "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
339:
340: $check_ $(@expr1073742619 "cppcheck-2.8/test/testautovariables.cpp" $, 340 $, "void foo(char* p) {\n  p = p;\n}" $)
341:
342: ;
343: $if $(@expr1073742620 $!@expr1073742621 $assertEquals $(@expr1073742622 "cppcheck-2.8/test/testautovariables.cpp" $, 343 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
344:
345: $check_ $(@expr1073742625 "cppcheck-2.8/test/testautovariables.cpp" $, 345 $, "void foo(char* p) {\n    if (!p) p = buf;\n    *p = 0;\n}" $)
346:
347:
348: ;
349: $if $(@expr1073742626 $!@expr1073742627 $assertEquals $(@expr1073742628 "cppcheck-2.8/test/testautovariables.cpp" $, 349 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
350:
351: $check_ $(@expr1073742631 "cppcheck-2.8/test/testautovariables.cpp" $, 351 $, "void foo(char* p) {\n    if (!p) p = buf;\n    do_something(p);\n}" $)
352:
353:
354: ;
355: $if $(@expr1073742632 $!@expr1073742633 $assertEquals $(@expr1073742634 "cppcheck-2.8/test/testautovariables.cpp" $, 355 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
356:
357: $check_ $(@expr1073742637 "cppcheck-2.8/test/testautovariables.cpp" $, 357 $, "void foo(char* p) {\n    while (!p) p = buf;\n}" $)
358:
359: ;
360: $if $(@expr1073742638 $!@expr1073742639 $assertEquals $(@expr1073742640 "cppcheck-2.8/test/testautovariables.cpp" $, 360 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
361:
362: $check_ $(@expr1073742643 "cppcheck-2.8/test/testautovariables.cpp" $, 362 $, "void foo(char* p) {\n    p = 0;\n    asm(\"somecmd\");\n}" $)
363:
364:
365: ;
366: $if $(@expr1073742644 $!@expr1073742645 $assertEquals $(@expr1073742646 "cppcheck-2.8/test/testautovariables.cpp" $, 366 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
367:
368: $check_ $(@expr1073742649 "cppcheck-2.8/test/testautovariables.cpp" $, 368 $, "void foo(Foo* p) {\n    p = 0;\n}" $)
369:
370: ;
371: $if $(@expr1073742650 $!@expr1073742651 $assertEquals $(@expr1073742652 "cppcheck-2.8/test/testautovariables.cpp" $, 371 $, "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
372:
373: $check_ $(@expr1073742655 "cppcheck-2.8/test/testautovariables.cpp" $, 373 $, "class Foo {};\nvoid foo(Foo p) {\n    p = 0;\n}" $)
374:
375:
376: ;
377: $if $(@expr1073742656 $!@expr1073742657 $assertEquals $(@expr1073742658 "cppcheck-2.8/test/testautovariables.cpp" $, 377 $, "[test.cpp:3]: (style) Assignment of function parameter has no effect outside the function.\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
378:
379: $check_ $(@expr1073742661 "cppcheck-2.8/test/testautovariables.cpp" $, 379 $, "void foo(Foo p) {\n    p = 0;\n}" $)
380:
381: ;
382: $if $(@expr1073742662 $!@expr1073742663 $assertEquals $(@expr1073742664 "cppcheck-2.8/test/testautovariables.cpp" $, 382 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
383:
384: $check_ $(@expr1073742667 "cppcheck-2.8/test/testautovariables.cpp" $, 384 $, "void foo(int& p) {\n    p = 0;\n}" $)
385:
386: ;
387: $if $(@expr1073742668 $!@expr1073742669 $assertEquals $(@expr1073742670 "cppcheck-2.8/test/testautovariables.cpp" $, 387 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
388:
389: $check_ $(@expr1073742673 "cppcheck-2.8/test/testautovariables.cpp" $, 389 $, "double foo(double d) {\n    int i = d;\n    d = i;\n    return d;}" , false $)
390:
391:
392:
393: ;
394: $if $(@expr1073742674 $!@expr1073742675 $assertEquals $(@expr1073742676 "cppcheck-2.8/test/testautovariables.cpp" $, 394 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
395:
396: $check_ $(@expr1073742679 "cppcheck-2.8/test/testautovariables.cpp" $, 396 $, "void foo(int* ptr) {\n    ptr++;\n}" $)
397:
398: ;
399: $if $(@expr1073742680 $!@expr1073742681 $assertEquals $(@expr1073742682 "cppcheck-2.8/test/testautovariables.cpp" $, 399 $, "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
400:
401: $check_ $(@expr1073742685 "cppcheck-2.8/test/testautovariables.cpp" $, 401 $, "void foo(int* ptr) {\n    --ptr;\n}" $)
402:
403: ;
404: $if $(@expr1073742686 $!@expr1073742687 $assertEquals $(@expr1073742688 "cppcheck-2.8/test/testautovariables.cpp" $, 404 $, "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
405:
406: $check_ $(@expr1073742691 "cppcheck-2.8/test/testautovariables.cpp" $, 406 $, "void foo(struct S* const x) {\n    ++x->n;\n}" $)
407:
408: ;
409: $if $(@expr1073742692 $!@expr1073742693 $assertEquals $(@expr1073742694 "cppcheck-2.8/test/testautovariables.cpp" $, 409 $, "" $, errout@var100 .@expr775 str (@expr776 ) $) $) { $return ; }
410: }
411:
412: void testautovar11 ( ) {
413: $check_ $(@expr1073742697 "cppcheck-2.8/test/testautovariables.cpp" $, 413 $, "struct A {\n    char (*data)[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &(*a.data)[0];\n}" $)
414:
|
418:
419: ;
420: $if $(@expr1073742698 $!@expr1073742699 $assertEquals $(@expr1073742700 "cppcheck-2.8/test/testautovariables.cpp" $, 420 $, "" $, errout@var100 .@expr877 str (@expr878 ) $) $) { $return ; }
421:
422: $check_ $(@expr1073742703 "cppcheck-2.8/test/testautovariables.cpp" $, 422 $, "struct A {\n    char data[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &a.data[0];\n}" $)
423:
|
427:
428: ;
429: $if $(@expr1073742704 $!@expr1073742705 $assertEquals $(@expr1073742706 "cppcheck-2.8/test/testautovariables.cpp" $, 429 $, "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr877 str (@expr878 ) $) $) { $return ; }
430:
431: $check_ $(@expr1073742709 "cppcheck-2.8/test/testautovariables.cpp" $, 431 $, "void f(char **out) {\n  struct S *p = glob;\n  *out = &p->data;\n}" $)
432:
433:
434: ;
435: $if $(@expr1073742710 $!@expr1073742711 $assertEquals $(@expr1073742712 "cppcheck-2.8/test/testautovariables.cpp" $, 435 $, "" $, errout@var100 .@expr877 str (@expr878 ) $) $) { $return ; }
436:
437:
438: $check_ $(@expr1073742715 "cppcheck-2.8/test/testautovariables.cpp" $, 438 $, "void f(s8**out) {\n  s8 *p;\n  *out = &p[1];\n}" $)
439:
440:
441: ;
442: $if $(@expr1073742716 $!@expr1073742717 $assertEquals $(@expr1073742718 "cppcheck-2.8/test/testautovariables.cpp" $, 442 $, "" $, errout@var100 .@expr877 str (@expr878 ) $) $) { $return ; }
443:
444: $check_ $(@expr1073742721 "cppcheck-2.8/test/testautovariables.cpp" $, 444 $, "void f(s8**out) {\n  s8 p[10];\n  *out = &p[1];\n}" $)
445:
446:
447: ;
448: $if $(@expr1073742722 $!@expr1073742723 $assertEquals $(@expr1073742724 "cppcheck-2.8/test/testautovariables.cpp" $, 448 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr877 str (@expr878 ) $) $) { $return ; }
449: }
450:
451: void testautovar12 ( ) {
452: $do ${ $try ${ $check_ $(@expr1073742727 "cppcheck-2.8/test/testautovariables.cpp" $, 452 $, "void f(int* a) { a = }" $) $; $assertThrowFail $(@expr1073742728 "cppcheck-2.8/test/testautovariables.cpp" $, 452 $) $; $} $catch $(@expr1073742729 $const InternalError $&@expr1073742730 $) ${ $} $catch $(@expr1073742731 $... $) ${ $assertThrowFail $(@expr1073742732 "cppcheck-2.8/test/testautovariables.cpp" $, 452 $) $; $} $} $while $(@expr1073742733 $false $) ;
453: $check_ $(@expr1073742734 "cppcheck-2.8/test/testautovariables.cpp" $, 453 $, "struct custom_type { custom_type(int) {} };\nvoid func(int) {}\nint var;\nvoid init() { func(var); }\nUNKNOWN_MACRO_EXPANDING_TO_SIGNATURE { custom_type a(var); }" $)
454:
455:
456:
457: ;
458: }
459:
460: void testautovar13 ( ) {
461: $check_ $(@expr1073742735 "cppcheck-2.8/test/testautovariables.cpp" $, 461 $, "class FileManager {\n  FileManager() : UniqueRealDirs(*new UniqueDirContainer())\n  {}\n  ~FileManager() {\n    delete &UniqueRealDirs;\n   }\n};" $)
462:
|
466:
467: ;
468: }
469:
470: void testautovar14 ( ) {
471: $check_ $(@expr1073742736 "cppcheck-2.8/test/testautovariables.cpp" $, 471 $, "void f(int x) {\nlabel:  if (x>0) {\n    x = x >> 1;\n    goto label;\n  }\n}" $)
472:
|
476:
477: ;
478: $if $(@expr1073742737 $!@expr1073742738 $assertEquals $(@expr1073742739 "cppcheck-2.8/test/testautovariables.cpp" $, 478 $, "" $, errout@var100 .@expr1073742740 str (@expr1073742741 ) $) $) { $return ; }
479: }
480:
481: void testautovar15 ( ) {
482: $check_ $(@expr1073742742 "cppcheck-2.8/test/testautovariables.cpp" $, 482 $, "static const float4  darkOutline(0.05f, 0.05f, 0.05f, 0.95f);\nstatic const float darkLuminosity = 0.05 +\n                                    0.0722f * math::powf(darkOutline[2], 2.2);\nconst float4* ChooseOutlineColor(const float4& textColor)  {\n    const float lumdiff = something;\n    if (lumdiff > 5.0f)\n        return &darkOutline;\n    return 0;\n}" , false $)
483:
|
489:
490: ;
491: $if $(@expr1073742743 $!@expr1073742744 $assertEquals $(@expr1073742745 "cppcheck-2.8/test/testautovariables.cpp" $, 491 $, "" $, errout@var100 .@expr1073742746 str (@expr1073742747 ) $) $) { $return ; }
492: }
493:
494: void testautovar16 ( ) {
495: $check_ $(@expr1073742748 "cppcheck-2.8/test/testautovariables.cpp" $, 495 $, "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}" $)
496:
497:
498: ;
499: $if $(@expr1073742749 $!@expr1073742750 $assertEquals $(@expr1073742751 "cppcheck-2.8/test/testautovariables.cpp" $, 499 $, "" $, errout@var100 .@expr1073742752 str (@expr1073742753 ) $) $) { $return ; }
500: }
501:
502: void testautovar_array1 ( ) {
503: $check_ $(@expr1073742754 "cppcheck-2.8/test/testautovariables.cpp" $, 503 $, "void func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}" $)
504:
505:
506:
507: ;
508: $if $(@expr1073742755 $!@expr1073742756 $assertEquals $(@expr1073742757 "cppcheck-2.8/test/testautovariables.cpp" $, 508 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742758 str (@expr1073742759 ) $) $) { $return ; }
509: }
510:
511: void testautovar_array2 ( ) {
512: $check_ $(@expr1073742760 "cppcheck-2.8/test/testautovariables.cpp" $, 512 $, "class Fred {\n    void func1(int* arr[2]);\n}\nvoid Fred::func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}" $)
513:
|
518:
519: ;
520: $if $(@expr1073742761 $!@expr1073742762 $assertEquals $(@expr1073742763 "cppcheck-2.8/test/testautovariables.cpp" $, 520 $, "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742764 str (@expr1073742765 ) $) $) { $return ; }
521: }
522:
523: void testautovar_normal ( ) {
524: $check_ $(@expr1073742766 "cppcheck-2.8/test/testautovariables.cpp" $, 524 $, "void f(XmDestinationCallbackStruct *ds)\n{\n    XPoint DropPoint;\n    ds->location_data = (XtPointer *)&DropPoint;\n}" $)
525:
526:
527:
528: ;
529: $if $(@expr1073742767 $!@expr1073742768 $assertEquals $(@expr1073742769 "cppcheck-2.8/test/testautovariables.cpp" $, 529 $, "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742770 str (@expr1073742771 ) $) $) { $return ; }
530: }
531:
532: void testautovar_ptrptr ( ) {
533: $check_ $(@expr1073742772 "cppcheck-2.8/test/testautovariables.cpp" $, 533 $, "void remove_duplicate_matches (char **matches) {\n  char dead_slot;\n  matches[0] = (char *)&dead_slot;\n}" $)
534:
535:
536: ;
537: $if $(@expr1073742773 $!@expr1073742774 $assertEquals $(@expr1073742775 "cppcheck-2.8/test/testautovariables.cpp" $, 537 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr1073742776 str (@expr1073742777 ) $) $) { $return ; }
538: }
539:
540: void testautovar_return1 ( ) {
541: $check_ $(@expr1073742778 "cppcheck-2.8/test/testautovariables.cpp" $, 541 $, "int* func1()\n{\n    int num=2;    return &num;}" $)
542:
543:
544:
545: ;
546: $if $(@expr1073742779 $!@expr1073742780 $assertEquals $(@expr1073742781 "cppcheck-2.8/test/testautovariables.cpp" $, 546 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n" $, errout@var100 .@expr1073742782 str (@expr1073742783 ) $) $) { $return ; }
547: }
548:
549: void testautovar_return2 ( ) {
550: $check_ $(@expr1073742784 "cppcheck-2.8/test/testautovariables.cpp" $, 550 $, "class Fred {\n    int* func1();\n}\nint* Fred::func1()\n{\n    int num=2;    return &num;}" $)
551:
|
556:
557: ;
558: $if $(@expr1073742785 $!@expr1073742786 $assertEquals $(@expr1073742787 "cppcheck-2.8/test/testautovariables.cpp" $, 558 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n" $, errout@var100 .@expr1073742788 str (@expr1073742789 ) $) $) { $return ; }
559: }
560:
561: void testautovar_return3 ( ) {
562:
563: $check_ $(@expr1073742790 "cppcheck-2.8/test/testautovariables.cpp" $, 563 $, "void** f()\n{\n    void *&value = tls[id];    return &value;}" $)
564:
565:
566:
567: ;
568: $if $(@expr1073742791 $!@expr1073742792 $assertEquals $(@expr1073742793 "cppcheck-2.8/test/testautovariables.cpp" $, 568 $, "" $, errout@var100 .@expr1073742794 str (@expr1073742795 ) $) $) { $return ; }
569: }
570:
571: void testautovar_return4 ( ) {
572:
573: $check_ $(@expr1073742796 "cppcheck-2.8/test/testautovariables.cpp" $, 573 $, "void foo() {\n  int cond2;\n  dostuff([&cond2]() { return &cond2; });\n}" $)
574:
575:
576: ;
577: $if $(@expr1073742797 $!@expr1073742798 $assertEquals $(@expr1073742799 "cppcheck-2.8/test/testautovariables.cpp" $, 577 $, "" $, errout@var100 .@expr1073742800 str (@expr1073742801 ) $) $) { $return ; }
578: }
579:
580: void testautovar_extern ( ) {
581: $check_ $(@expr1073742802 "cppcheck-2.8/test/testautovariables.cpp" $, 581 $, "struct foo *f()\n{\n    extern struct foo f;\n    return &f;\n}" $)
582:
583:
584:
585: ;
586: $if $(@expr1073742803 $!@expr1073742804 $assertEquals $(@expr1073742805 "cppcheck-2.8/test/testautovariables.cpp" $, 586 $, "" $, errout@var100 .@expr1073742806 str (@expr1073742807 ) $) $) { $return ; }
587: }
588:
589: void testautovar_reassigned ( ) {
590: $check_ $(@expr1073742808 "cppcheck-2.8/test/testautovariables.cpp" $, 590 $, "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  pcb->root0 = 0;\n}" $)
591:
|
594:
595: ;
596: $if $(@expr1073742809 $!@expr1073742810 $assertEquals $(@expr1073742811 "cppcheck-2.8/test/testautovariables.cpp" $, 596 $, "" $, errout@var100 .@expr988 str (@expr989 ) $) $) { $return ; }
597:
598: $check_ $(@expr1073742814 "cppcheck-2.8/test/testautovariables.cpp" $, 598 $, "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition) return;\n  pcb->root0 = 0;\n}" $)
599:
|
603:
604: ;
605: $if $(@expr1073742815 $!@expr1073742816 $assertEquals $(@expr1073742817 "cppcheck-2.8/test/testautovariables.cpp" $, 605 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr988 str (@expr989 ) $) $) { $return ; }
606:
607: $check_ $(@expr1073742820 "cppcheck-2.8/test/testautovariables.cpp" $, 607 $, "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition)\n    pcb->root0 = 0;\n}" $)
608:
|
612:
613: ;
614: $if $(@expr1073742821 $!@expr1073742822 $assertEquals $(@expr1073742823 "cppcheck-2.8/test/testautovariables.cpp" $, 614 $, "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr988 str (@expr989 ) $) $) { $return ; }
615: }
616:
617: void testinvaliddealloc ( ) {
618: $check_ $(@expr1073742826 "cppcheck-2.8/test/testautovariables.cpp" $, 618 $, "void func1() {\n    char tmp1[256];\n    free(tmp1);\n    char tmp2[256];\n    delete tmp2;\n    char tmp3[256];\n    delete tmp3;\n    char tmp4[256];\n    delete[] (tmp4);\n    char tmp5[256];\n    delete[] tmp5;\n}" $)
619:
|
628:
629: ;
630: $if $(@expr1073742827 $!@expr1073742828 $assertEquals $(@expr1073742829 "cppcheck-2.8/test/testautovariables.cpp" $, 630 $, "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:7]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:11]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return
631:
632:
633:
634: ; }
635:
636: $check_ $(@expr1073742832 "cppcheck-2.8/test/testautovariables.cpp" $, 636 $, "void func1(char * ptr) {\n    free(ptr);\n}" $)
637:
638: ;
639: $if $(@expr1073742833 $!@expr1073742834 $assertEquals $(@expr1073742835 "cppcheck-2.8/test/testautovariables.cpp" $, 639 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
640:
641: $check_ $(@expr1073742838 "cppcheck-2.8/test/testautovariables.cpp" $, 641 $, "void func1() {\n    char* tmp1[256];\n    init(tmp1);\n    delete tmp1[34];\n}" $)
642:
643:
644:
645: ;
646: $if $(@expr1073742839 $!@expr1073742840 $assertEquals $(@expr1073742841 "cppcheck-2.8/test/testautovariables.cpp" $, 646 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
647:
648: $check_ $(@expr1073742844 "cppcheck-2.8/test/testautovariables.cpp" $, 648 $, "void func1() {\n    static char tmp1[256];\n    char *p = tmp1;\n    free(p);\n}" $)
649:
650:
651:
652: ;
653: $if $(@expr1073742845 $!@expr1073742846 $assertEquals $(@expr1073742847 "cppcheck-2.8/test/testautovariables.cpp" $, 653 $, "[test.cpp:4]: (error) Deallocation of a static variable (tmp1) results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
654:
655: $check_ $(@expr1073742850 "cppcheck-2.8/test/testautovariables.cpp" $, 655 $, "char tmp1[256];\nvoid func1() {\n    char *p; if (x) p = tmp1;\n    free(p);\n}" $)
656:
657:
658:
659: ;
660: $if $(@expr1073742851 $!@expr1073742852 $assertEquals $(@expr1073742853 "cppcheck-2.8/test/testautovariables.cpp" $, 660 $, "[test.cpp:4]: (error) Deallocation of a global variable (tmp1) results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
661:
662: $check_ $(@expr1073742856 "cppcheck-2.8/test/testautovariables.cpp" $, 662 $, "void f()\n{\n    char psz_title[10];\n    {\n        char *psz_title = 0;\n        abc(0, psz_title);\n        free(psz_title);\n    }\n}" $)
663:
|
669:
670: ;
671: $if $(@expr1073742857 $!@expr1073742858 $assertEquals $(@expr1073742859 "cppcheck-2.8/test/testautovariables.cpp" $, 671 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
672:
673:
674: $check_ $(@expr1073742862 "cppcheck-2.8/test/testautovariables.cpp" $, 674 $, "int main() {\n   int *p = malloc(4);\n   free(&p);\n   return 0;\n}" $)
675:
676:
677:
678: ;
679: $if $(@expr1073742863 $!@expr1073742864 $assertEquals $(@expr1073742865 "cppcheck-2.8/test/testautovariables.cpp" $, 679 $, "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
680: $check_ $(@expr1073742868 "cppcheck-2.8/test/testautovariables.cpp" $, 680 $, "int main() {\n   int i;\n   free(&i);\n   return 0;\n}" $)
681:
682:
683:
684: ;
685: $if $(@expr1073742869 $!@expr1073742870 $assertEquals $(@expr1073742871 "cppcheck-2.8/test/testautovariables.cpp" $, 685 $, "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
686:
687:
688: $check_ $(@expr1073742874 "cppcheck-2.8/test/testautovariables.cpp" $, 688 $, "int main() {\n   long (*pKoeff)[256] = new long[9][256];\n   delete[] pKoeff;\n}" $)
689:
690:
691: ;
692: $if $(@expr1073742875 $!@expr1073742876 $assertEquals $(@expr1073742877 "cppcheck-2.8/test/testautovariables.cpp" $, 692 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
693:
694: $check_ $(@expr1073742880 "cppcheck-2.8/test/testautovariables.cpp" $, 694 $, "int main() {\n   long *pKoeff[256];\n   delete[] pKoeff;\n}" $)
695:
696:
697: ;
698: $if $(@expr1073742881 $!@expr1073742882 $assertEquals $(@expr1073742883 "cppcheck-2.8/test/testautovariables.cpp" $, 698 $, "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
699:
700: $check_ $(@expr1073742886 "cppcheck-2.8/test/testautovariables.cpp" $, 700 $, "int main() {\n   long *pKoeff[256];\n   free (pKoeff);\n}" $)
701:
702:
703: ;
704: $if $(@expr1073742887 $!@expr1073742888 $assertEquals $(@expr1073742889 "cppcheck-2.8/test/testautovariables.cpp" $, 704 $, "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
705:
706: $check_ $(@expr1073742892 "cppcheck-2.8/test/testautovariables.cpp" $, 706 $, "void foo() {\n   const intPtr& intref = Getter();\n   delete intref;\n}" $)
707:
708:
709: ;
710: $if $(@expr1073742893 $!@expr1073742894 $assertEquals $(@expr1073742895 "cppcheck-2.8/test/testautovariables.cpp" $, 710 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
711:
712: $check_ $(@expr1073742898 "cppcheck-2.8/test/testautovariables.cpp" $, 712 $, "void test() {\n   MyObj& obj = *new MyObj;\n   delete &obj;\n}" $)
713:
714:
715: ;
716: $if $(@expr1073742899 $!@expr1073742900 $assertEquals $(@expr1073742901 "cppcheck-2.8/test/testautovariables.cpp" $, 716 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
717:
718:
719: $check_ $(@expr1073742904 "cppcheck-2.8/test/testautovariables.cpp" $, 719 $, "struct F {\n  void free(void*) {}\n};\nvoid foo() {\n  char c1[1];\n  F().free(c1);\n  char *c2 = 0;\n  F().free(&c2);\n}" $)
720:
|
726:
727: ;
728: $if $(@expr1073742905 $!@expr1073742906 $assertEquals $(@expr1073742907 "cppcheck-2.8/test/testautovariables.cpp" $, 728 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
729:
730: $check_ $(@expr1073742910 "cppcheck-2.8/test/testautovariables.cpp" $, 730 $, "class foo {\n  void free(void* );\n  void someMethod() {\n    char **dst_copy = NULL;\n    free(&dst_copy);\n  }\n};" $)
731:
|
735:
736: ;
737: $if $(@expr1073742911 $!@expr1073742912 $assertEquals $(@expr1073742913 "cppcheck-2.8/test/testautovariables.cpp" $, 737 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
738:
739:
740: $check_ $(@expr1073742916 "cppcheck-2.8/test/testautovariables.cpp" $, 740 $, "bool foo( ) {\n  SwTxtFld * pTxtFld = GetFldTxtAttrAt();\n  delete static_cast<SwFmtFld*>(&pTxtFld->GetAttr());\n}" $)
741:
742:
743: ;
744: $if $(@expr1073742917 $!@expr1073742918 $assertEquals $(@expr1073742919 "cppcheck-2.8/test/testautovariables.cpp" $, 744 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
745:
746:
747: $check_ $(@expr1073742922 "cppcheck-2.8/test/testautovariables.cpp" $, 747 $, "void f() {\n    char stack[512];\n    RGNDATA *data;\n    if (data_size > sizeof (stack)) data = malloc (data_size);\n    else data = (RGNDATA *)stack;\n    if ((char *)data != stack) free (data);\n}" $)
748:
|
752:
753: ;
754: $if $(@expr1073742923 $!@expr1073742924 $assertEquals $(@expr1073742925 "cppcheck-2.8/test/testautovariables.cpp" $, 754 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
755:
756:
757: $check_ $(@expr1073742928 "cppcheck-2.8/test/testautovariables.cpp" $, 757 $, "void f(char **args1, char *args2[]) {\n    free((char **)args1);\n    free((char **)args2);\n}" $)
758:
759:
760: ;
761: $if $(@expr1073742929 $!@expr1073742930 $assertEquals $(@expr1073742931 "cppcheck-2.8/test/testautovariables.cpp" $, 761 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
762:
763:
764: $check_ $(@expr1073742934 "cppcheck-2.8/test/testautovariables.cpp" $, 764 $, "struct Array {\n    ~Array() { delete m_Arr; }\n    std::array<long, 256>* m_Arr{};\n};\nArray arr;\n" $)
765:
766:
767:
768: ;
769: $if $(@expr1073742935 $!@expr1073742936 $assertEquals $(@expr1073742937 "cppcheck-2.8/test/testautovariables.cpp" $, 769 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
770: }
771:
772: void testinvaliddealloc_input ( ) {
773:
774: $check_ $(@expr1073742940 "cppcheck-2.8/test/testautovariables.cpp" $, 774 $, "void f(int* a[]) {\n    free(a);\n}\n" $)
775:
776: ;
777: $if $(@expr1073742941 $!@expr1073742942 $assertEquals $(@expr1073742943 "cppcheck-2.8/test/testautovariables.cpp" $, 777 $, "" $, errout@var100 .@expr1120 str (@expr1121 ) $) $) { $return ; }
778:
779: $check_ $(@expr1073742946 "cppcheck-2.8/test/testautovariables.cpp" $, 779 $, "void f(int a[]) {\n    free(a);\n}\n" $)
780:
781: ;
782: $if $(@expr1073742947 $!@expr1073742948 $assertEquals $(@expr1073742949 "cppcheck-2.8/test/testautovariables.cpp" $, 782 $, "" $, errout@var100 .@expr1120 str (@expr1121 ) $) $) { $return ; }
783:
784: $check_ $(@expr1073742952 "cppcheck-2.8/test/testautovariables.cpp" $, 784 $, "void f(int* a[]) {\n    int * p = *a;\n    free(p);\n    int ** q = a;\n    free(q);\n}\n" $)
785:
|
788:
789: ;
790: $if $(@expr1073742953 $!@expr1073742954 $assertEquals $(@expr1073742955 "cppcheck-2.8/test/testautovariables.cpp" $, 790 $, "" $, errout@var100 .@expr1120 str (@expr1121 ) $) $) { $return ; }
791:
792: $check_ $(@expr1073742958 "cppcheck-2.8/test/testautovariables.cpp" $, 792 $, "void f(int a[]) {\n    int * p = a;\n    free(p);\n}\n" $)
793:
794:
795: ;
796: $if $(@expr1073742959 $!@expr1073742960 $assertEquals $(@expr1073742961 "cppcheck-2.8/test/testautovariables.cpp" $, 796 $, "" $, errout@var100 .@expr1120 str (@expr1121 ) $) $) { $return ; }
797: }
798:
799: void testinvaliddealloc_string ( ) {
800:
801: $check_ $(@expr1073742964 "cppcheck-2.8/test/testautovariables.cpp" $, 801 $, "void f() {\n    char *ptr = \"a\";\n    free(\"a\");\n    delete \"a\";\n    free(ptr);\n    delete ptr;\n    char * p = malloc(1000);\n    p = \"abc\";\n    free(p);\n}\n" $)
802:
|
809:
810: ;
811: $if $(@expr1073742965 $!@expr1073742966 $assertEquals $(@expr1073742967 "cppcheck-2.8/test/testautovariables.cpp" $, 811 $, "[test.cpp:3]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:4]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:6]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of a pointer pointing to a string literal (\"abc\") results in undefined behaviour.\n" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return
812:
|
815:
816: ; }
817:
818: $check_ $(@expr1073742970 "cppcheck-2.8/test/testautovariables.cpp" $, 818 $, "void f() {\n   char *ptr = malloc(10);\n   char *empty_str = \"\";\n   if (ptr == NULL)\n      ptr = empty_str;\n   if (ptr != empty_str)\n      free(ptr);\n}\n" $)
819:
|
824:
825: ;
826: $if $(@expr1073742971 $!@expr1073742972 $assertEquals $(@expr1073742973 "cppcheck-2.8/test/testautovariables.cpp" $, 826 $, "" $, errout@var100 .@expr1144 str (@expr1145 ) $) $) { $return ; }
827: }
828:
829: void testinvaliddealloc_C ( ) {
830:
831: $check_ $(@expr1073742976 "cppcheck-2.8/test/testautovariables.cpp" $, 831 $, "void svn_repos_dir_delta2() {\n  struct context c;\n      SVN_ERR(delete(&c, root_baton, src_entry, pool));\n}\n" , false , "test.c" $)
832:
833:
834: ;
835: $if $(@expr1073742977 $!@expr1073742978 $assertEquals $(@expr1073742979 "cppcheck-2.8/test/testautovariables.cpp" $, 835 $, "" $, errout@var100 .@expr1073742980 str (@expr1073742981 ) $) $) { $return ; }
836: }
837:
838: void testassign1 ( ) {
839: $check_ $(@expr1073742982 "cppcheck-2.8/test/testautovariables.cpp" $, 839 $, "void f(EventPtr *eventP, ActionPtr **actionsP) {\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}" $)
840:
841:
842: ;
843: $if $(@expr1073742983 $!@expr1073742984 $assertEquals $(@expr1073742985 "cppcheck-2.8/test/testautovariables.cpp" $, 843 $, "" $, errout@var100 .@expr1073742986 str (@expr1073742987 ) $) $) { $return ; }
844: }
845:
846: void testassign2 ( ) {
847: $check_ $(@expr1073742988 "cppcheck-2.8/test/testautovariables.cpp" $, 847 $, "static void function(unsigned long **datap) {\n    struct my_s *mr = global_structure_pointer;\n    *datap = &mr->value;\n}" $)
848:
849:
850: ;
851: $if $(@expr1073742989 $!@expr1073742990 $assertEquals $(@expr1073742991 "cppcheck-2.8/test/testautovariables.cpp" $, 851 $, "" $, errout@var100 .@expr1073742992 str (@expr1073742993 ) $) $) { $return ; }
852: }
853:
854: void assignAddressOfLocalArrayToGlobalPointer ( ) {
855: $check_ $(@expr1073742994 "cppcheck-2.8/test/testautovariables.cpp" $, 855 $, "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n}" $)
856:
857:
858:
859: ;
860: $if $(@expr1073742995 $!@expr1073742996 $assertEquals $(@expr1073742997 "cppcheck-2.8/test/testautovariables.cpp" $, 860 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n" $, errout@var100 .@expr1174 str (@expr1175 ) $) $) { $return ; }
861:
862: $check_ $(@expr1073743000 "cppcheck-2.8/test/testautovariables.cpp" $, 862 $, "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n  p = 0;\n}" $)
863:
|
866:
867: ;
868: $if $(@expr1073743001 $!@expr1073743002 $assertEquals $(@expr1073743003 "cppcheck-2.8/test/testautovariables.cpp" $, 868 $, "" $, errout@var100 .@expr1174 str (@expr1175 ) $) $) { $return ; }
869: }
870:
871: void assignAddressOfLocalVariableToGlobalPointer ( ) {
872: $check_ $(@expr1073743006 "cppcheck-2.8/test/testautovariables.cpp" $, 872 $, "int *p;\nvoid f() {\n  int x;\n  p = &x;\n}" $)
873:
874:
875:
876: ;
877: $if $(@expr1073743007 $!@expr1073743008 $assertEquals $(@expr1073743009 "cppcheck-2.8/test/testautovariables.cpp" $, 877 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
878:
879: $check_ $(@expr1073743012 "cppcheck-2.8/test/testautovariables.cpp" $, 879 $, "int *p;\nvoid f() {\n  int x;\n  p = &x;\n  p = 0;\n}" $)
880:
|
883:
884: ;
885: $if $(@expr1073743013 $!@expr1073743014 $assertEquals $(@expr1073743015 "cppcheck-2.8/test/testautovariables.cpp" $, 885 $, "" $, errout@var100 .@expr1186 str (@expr1187 ) $) $) { $return ; }
886: }
887:
888: void assignAddressOfLocalVariableToMemberVariable ( ) {
889: $check_ $(@expr1073743018 "cppcheck-2.8/test/testautovariables.cpp" $, 889 $, "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n  }\n  int *ptr;\n};" $)
890:
|
894:
895: ;
896: $if $(@expr1073743019 $!@expr1073743020 $assertEquals $(@expr1073743021 "cppcheck-2.8/test/testautovariables.cpp" $, 896 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'ptr' will use pointer to local variable 'x'.\n" $, errout@var100 .@expr1198 str (@expr1199 ) $) $) { $return ; }
897:
898: $check_ $(@expr1073743024 "cppcheck-2.8/test/testautovariables.cpp" $, 898 $, "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n    ptr = 0;\n  }\n  int *ptr;\n};" $)
899:
|
904:
905: ;
906: $if $(@expr1073743025 $!@expr1073743026 $assertEquals $(@expr1073743027 "cppcheck-2.8/test/testautovariables.cpp" $, 906 $, "" $, errout@var100 .@expr1198 str (@expr1199 ) $) $) { $return ; }
907: }
908:
909: void returnLocalVariable1 ( ) {
910: $check_ $(@expr1073743030 "cppcheck-2.8/test/testautovariables.cpp" $, 910 $, "char *foo()\n{\n    char str[100] = {0};\n    return str;\n}" $)
911:
912:
913:
914: ;
915: $if $(@expr1073743031 $!@expr1073743032 $assertEquals $(@expr1073743033 "cppcheck-2.8/test/testautovariables.cpp" $, 915 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" $, errout@var100 .@expr1210 str (@expr1211 ) $) $) { $return
916:
917: ; }
918:
919: $check_ $(@expr1073743036 "cppcheck-2.8/test/testautovariables.cpp" $, 919 $, "char *foo()\n{\n    char str[100] = {0};\n    char *p = str;\n    return p;\n}" $)
920:
|
923:
924: ;
925: $if $(@expr1073743037 $!@expr1073743038 $assertEquals $(@expr1073743039 "cppcheck-2.8/test/testautovariables.cpp" $, 925 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" $, errout@var100 .@expr1210 str (@expr1211 ) $) $) { $return
926:
927: ; }
928:
929: $check_ $(@expr1073743042 "cppcheck-2.8/test/testautovariables.cpp" $, 929 $, "class Fred {\n    char *foo();\n};\nchar *Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}" $)
930:
|
935:
936: ;
937: $if $(@expr1073743043 $!@expr1073743044 $assertEquals $(@expr1073743045 "cppcheck-2.8/test/testautovariables.cpp" $, 937 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" $, errout@var100 .@expr1210 str (@expr1211 ) $) $) { $return
938:
939: ; }
940:
941: $check_ $(@expr1073743048 "cppcheck-2.8/test/testautovariables.cpp" $, 941 $, "char * format_reg(char *outbuffer_start) {\n    return outbuffer_start;\n}\nvoid print_with_operands() {\n    char temp[42];\n    char *tp = temp;\n    tp = format_reg(tp);\n}" $)
942:
|
947:
948: ;
949: $if $(@expr1073743049 $!@expr1073743050 $assertEquals $(@expr1073743051 "cppcheck-2.8/test/testautovariables.cpp" $, 949 $, "" $, errout@var100 .@expr1210 str (@expr1211 ) $) $) { $return ; }
950: }
951:
952: void returnLocalVariable2 ( ) {
953: $check_ $(@expr1073743054 "cppcheck-2.8/test/testautovariables.cpp" $, 953 $, "std::string foo()\n{\n    char str[100] = {0};\n    return str;\n}" $)
954:
955:
956:
957: ;
958: $if $(@expr1073743055 $!@expr1073743056 $assertEquals $(@expr1073743057 "cppcheck-2.8/test/testautovariables.cpp" $, 958 $, "" $, errout@var100 .@expr1234 str (@expr1235 ) $) $) { $return ; }
959:
960: $check_ $(@expr1073743060 "cppcheck-2.8/test/testautovariables.cpp" $, 960 $, "class Fred {\n    std::string foo();\n};\nstd::string Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}" $)
961:
|
966:
967: ;
968: $if $(@expr1073743061 $!@expr1073743062 $assertEquals $(@expr1073743063 "cppcheck-2.8/test/testautovariables.cpp" $, 968 $, "" $, errout@var100 .@expr1234 str (@expr1235 ) $) $) { $return ; }
969: }
970:
971:
972: void returnLocalVariable3 ( ) {
973:
974: $check_ $(@expr1073743066 "cppcheck-2.8/test/testautovariables.cpp" $, 974 $, "char *foo() {\n    char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}" $)
975:
976:
977: ;
978: $if $(@expr1073743067 $!@expr1073743068 $assertEquals $(@expr1073743069 "cppcheck-2.8/test/testautovariables.cpp" $, 978 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n" $, errout@var100 .@expr1246 str (@expr1247 ) $) $) { $return ; }
979:
980: $check_ $(@expr1073743072 "cppcheck-2.8/test/testautovariables.cpp" $, 980 $, "char *foo()\n{\n    static char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}" $)
981:
982:
983:
984: ;
985: $if $(@expr1073743073 $!@expr1073743074 $assertEquals $(@expr1073743075 "cppcheck-2.8/test/testautovariables.cpp" $, 985 $, "" $, errout@var100 .@expr1246 str (@expr1247 ) $) $) { $return ; }
986:
987: $check_ $(@expr1073743078 "cppcheck-2.8/test/testautovariables.cpp" $, 987 $, "char *foo()\n{\nchar q[] = \"AAAAAAAAAAAA\";\nchar *p;\np = &q[1];\nreturn p;\n}" $)
988:
|
992:
993: ;
994: $if $(@expr1073743079 $!@expr1073743080 $assertEquals $(@expr1073743081 "cppcheck-2.8/test/testautovariables.cpp" $, 994 $, "[test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n" $, errout@var100 .@expr1246 str (@expr1247 ) $) $) { $return ; }
995: }
996:
997: void returnLocalVariable4 ( ) {
998: $check_ $(@expr1073743084 "cppcheck-2.8/test/testautovariables.cpp" $, 998 $, "char *foo() {\n    char x[10] = {0};\n    return x+5;\n}" $)
999:
1000:
1001: ;
1002: $if $(@expr1073743085 $!@expr1073743086 $assertEquals $(@expr1073743087 "cppcheck-2.8/test/testautovariables.cpp" $, 1002 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1264 str (@expr1265 ) $) $) { $return
1003:
1004: ; }
1005:
1006: $check_ $(@expr1073743090 "cppcheck-2.8/test/testautovariables.cpp" $, 1006 $, "char *foo(int y) {\n    char x[10] = {0};\n    return (x+8)-y;\n}" $)
1007:
1008:
1009: ;
1010: $if $(@expr1073743091 $!@expr1073743092 $assertEquals $(@expr1073743093 "cppcheck-2.8/test/testautovariables.cpp" $, 1010 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1264 str (@expr1265 ) $) $) { $return
1011:
1012: ; }
1013: }
1014:
1015: void returnLocalVariable5 ( ) {
1016: $check_ $(@expr1073743096 "cppcheck-2.8/test/testautovariables.cpp" $, 1016 $, "char *foo() {\n    int x[10] = {0};\n    return (char *)x;\n}" $)
1017:
1018:
1019: ;
1020: $if $(@expr1073743097 $!@expr1073743098 $assertEquals $(@expr1073743099 "cppcheck-2.8/test/testautovariables.cpp" $, 1020 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1073743100 str (@expr1073743101 ) $) $) { $return
1021:
1022: ; }
1023: }
1024:
1025: void returnLocalVariable6 ( ) {
1026: $check_ $(@expr1073743102 "cppcheck-2.8/test/testautovariables.cpp" $, 1026 $, "int *foo() {\n    int x = 123;\n    int p = &x;\n    return p;\n}" $)
1027:
1028:
1029:
1030: ;
1031: $if $(@expr1073743103 $!@expr1073743104 $assertEquals $(@expr1073743105 "cppcheck-2.8/test/testautovariables.cpp" $, 1031 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1073743106 str (@expr1073743107 ) $) $) { $return ; }
1032: }
1033:
1034: void returnReference1 ( ) {
1035: $check_ $(@expr1073743108 "cppcheck-2.8/test/testautovariables.cpp" $, 1035 $, "int &foo()\n{\n    int s = 0;\n    int& x = s;\n    return x;\n}" $)
1036:
|
1039:
1040: ;
1041: $if $(@expr1073743109 $!@expr1073743110 $assertEquals $(@expr1073743111 "cppcheck-2.8/test/testautovariables.cpp" $, 1041 $, "[test.cpp:4] -> [test.cpp:5]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1042:
1043: $check_ $(@expr1073743114 "cppcheck-2.8/test/testautovariables.cpp" $, 1043 $, "std::string &foo()\n{\n    std::string s;\n    return s;\n}" $)
1044:
1045:
1046:
1047: ;
1048: $if $(@expr1073743115 $!@expr1073743116 $assertEquals $(@expr1073743117 "cppcheck-2.8/test/testautovariables.cpp" $, 1048 $, "[test.cpp:4]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1049:
1050: $check_ $(@expr1073743120 "cppcheck-2.8/test/testautovariables.cpp" $, 1050 $, "std::vector<int> &foo()\n{\n    std::vector<int> v;\n    return v;\n}" $)
1051:
1052:
1053:
1054: ;
1055: $if $(@expr1073743121 $!@expr1073743122 $assertEquals $(@expr1073743123 "cppcheck-2.8/test/testautovariables.cpp" $, 1055 $, "[test.cpp:4]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1056:
1057: $check_ $(@expr1073743126 "cppcheck-2.8/test/testautovariables.cpp" $, 1057 $, "std::vector<int> &foo()\n{\n    static std::vector<int> v;\n    return v;\n}" $)
1058:
1059:
1060:
1061: ;
1062: $if $(@expr1073743127 $!@expr1073743128 $assertEquals $(@expr1073743129 "cppcheck-2.8/test/testautovariables.cpp" $, 1062 $, "" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1063:
1064: $check_ $(@expr1073743132 "cppcheck-2.8/test/testautovariables.cpp" $, 1064 $, "std::vector<int> &foo()\n{\n    thread_local std::vector<int> v;\n    return v;\n}" $)
1065:
1066:
1067:
1068: ;
1069: $if $(@expr1073743133 $!@expr1073743134 $assertEquals $(@expr1073743135 "cppcheck-2.8/test/testautovariables.cpp" $, 1069 $, "" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1070:
1071: $check_ $(@expr1073743138 "cppcheck-2.8/test/testautovariables.cpp" $, 1071 $, "std::string hello()\n{\n     return \"hello\";\n}\n\nstd::string &f()\n{\n    return hello();\n}" $)
1072:
|
1078:
1079: ;
1080: $if $(@expr1073743139 $!@expr1073743140 $assertEquals $(@expr1073743141 "cppcheck-2.8/test/testautovariables.cpp" $, 1080 $, "[test.cpp:8]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1081:
1082:
1083: $check_ $(@expr1073743144 "cppcheck-2.8/test/testautovariables.cpp" $, 1083 $, "class Fred {\n    std::string hello() {\n        return std::string();\n    }\n};\nstd::string &f() {\n    return hello();\n}" $)
1084:
|
1089:
1090: ;
1091: $if $(@expr1073743145 $!@expr1073743146 $assertEquals $(@expr1073743147 "cppcheck-2.8/test/testautovariables.cpp" $, 1091 $, "" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1092:
1093: $check_ $(@expr1073743150 "cppcheck-2.8/test/testautovariables.cpp" $, 1093 $, "std::string hello() {\n     return std::string();\n}\n\nstd::string &f() {\n    return hello();\n}" $)
1094:
|
1098:
1099: ;
1100: $if $(@expr1073743151 $!@expr1073743152 $assertEquals $(@expr1073743153 "cppcheck-2.8/test/testautovariables.cpp" $, 1100 $, "[test.cpp:6]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1101:
1102: $check_ $(@expr1073743156 "cppcheck-2.8/test/testautovariables.cpp" $, 1102 $, "std::string hello() {\n     return \"foo\";\n}\n\nstd::string &f() {\n    return hello().substr(1);\n}" $)
1103:
|
1107:
1108: ;
1109: $if $(@expr1073743157 $!@expr1073743158 $assertEquals $(@expr1073743159 "cppcheck-2.8/test/testautovariables.cpp" $, 1109 $, "[test.cpp:6]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1110:
1111: $check_ $(@expr1073743162 "cppcheck-2.8/test/testautovariables.cpp" $, 1111 $, "class Foo;\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}" $)
1112:
|
1117:
1118: ;
1119: $if $(@expr1073743163 $!@expr1073743164 $assertEquals $(@expr1073743165 "cppcheck-2.8/test/testautovariables.cpp" $, 1119 $, "[test.cpp:7]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1120:
1121:
1122: $check_ $(@expr1073743168 "cppcheck-2.8/test/testautovariables.cpp" $, 1122 $, "class Foo;\nFoo & hello(bool) {\n     static Foo foo;\n     return foo;\n}\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello(true);\n}" $)
1123:
|
1132:
1133: ;
1134: $if $(@expr1073743169 $!@expr1073743170 $assertEquals $(@expr1073743171 "cppcheck-2.8/test/testautovariables.cpp" $, 1134 $, "" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1135:
1136: $check_ $(@expr1073743174 "cppcheck-2.8/test/testautovariables.cpp" $, 1136 $, "Foo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}" $)
1137:
|
1141:
1142: ;
1143: $if $(@expr1073743175 $!@expr1073743176 $assertEquals $(@expr1073743177 "cppcheck-2.8/test/testautovariables.cpp" $, 1143 $, "" $, errout@var100 .@expr1288 str (@expr1289 ) $) $) { $return ; }
1144: }
1145:
1146: void returnReference2 ( ) {
1147: $check_ $(@expr1073743180 "cppcheck-2.8/test/testautovariables.cpp" $, 1147 $, "class Fred {\n    std::string &foo();\n}\nstd::string &Fred::foo()\n{\n    std::string s;\n    return s;\n}" $)
1148:
|
1153:
1154: ;
1155: $if $(@expr1073743181 $!@expr1073743182 $assertEquals $(@expr1073743183 "cppcheck-2.8/test/testautovariables.cpp" $, 1155 $, "[test.cpp:7]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1156:
1157: $check_ $(@expr1073743186 "cppcheck-2.8/test/testautovariables.cpp" $, 1157 $, "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    std::vector<int> v;\n    return v;\n}" $)
1158:
|
1163:
1164: ;
1165: $if $(@expr1073743187 $!@expr1073743188 $assertEquals $(@expr1073743189 "cppcheck-2.8/test/testautovariables.cpp" $, 1165 $, "[test.cpp:7]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1166:
1167: $check_ $(@expr1073743192 "cppcheck-2.8/test/testautovariables.cpp" $, 1167 $, "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    static std::vector<int> v;\n    return v;\n}" $)
1168:
|
1173:
1174: ;
1175: $if $(@expr1073743193 $!@expr1073743194 $assertEquals $(@expr1073743195 "cppcheck-2.8/test/testautovariables.cpp" $, 1175 $, "" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1176:
1177: $check_ $(@expr1073743198 "cppcheck-2.8/test/testautovariables.cpp" $, 1177 $, "class Fred {\n    std::string &f();\n};\nstd::string hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}" $)
1178:
|
1186:
1187: ;
1188: $if $(@expr1073743199 $!@expr1073743200 $assertEquals $(@expr1073743201 "cppcheck-2.8/test/testautovariables.cpp" $, 1188 $, "[test.cpp:10]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1189:
1190: $check_ $(@expr1073743204 "cppcheck-2.8/test/testautovariables.cpp" $, 1190 $, "class Fred {\n    std::string hello();\n    std::string &f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}" $)
1191:
|
1200:
1201: ;
1202: $if $(@expr1073743205 $!@expr1073743206 $assertEquals $(@expr1073743207 "cppcheck-2.8/test/testautovariables.cpp" $, 1202 $, "[test.cpp:11]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1203:
1204: $check_ $(@expr1073743210 "cppcheck-2.8/test/testautovariables.cpp" $, 1204 $, "class Bar;\nBar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}" $)
1205:
|
1209:
1210: ;
1211: $if $(@expr1073743211 $!@expr1073743212 $assertEquals $(@expr1073743213 "cppcheck-2.8/test/testautovariables.cpp" $, 1211 $, "[test.cpp:6]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1212:
1213: $check_ $(@expr1073743216 "cppcheck-2.8/test/testautovariables.cpp" $, 1213 $, "std::map<int, string> foo() {\n     return something;\n}\nstd::map<int, string>& bar() {\n    return foo();\n}" $)
1214:
|
1217:
1218: ;
1219: $if $(@expr1073743217 $!@expr1073743218 $assertEquals $(@expr1073743219 "cppcheck-2.8/test/testautovariables.cpp" $, 1219 $, "[test.cpp:5]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1220:
1221: $check_ $(@expr1073743222 "cppcheck-2.8/test/testautovariables.cpp" $, 1221 $, "Bar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}" $)
1222:
|
1225:
1226: ;
1227: $if $(@expr1073743223 $!@expr1073743224 $assertEquals $(@expr1073743225 "cppcheck-2.8/test/testautovariables.cpp" $, 1227 $, "" $, errout@var100 .@expr1360 str (@expr1361 ) $) $) { $return ; }
1228:
1229: $check_ $(@expr1073743228 "cppcheck-2.8/test/testautovariables.cpp" $, 1229 $, "X& a::Bar() {}X& foo() {    return Bar();}" $)
1230:
1231:
1232: ;
1233: }
1234:
1235: void returnReference3 ( ) {
1236: $check_ $(@expr1073743229 "cppcheck-2.8/test/testautovariables.cpp" $, 1236 $, "double & f(double & rd) {\n    double ret = getValue();\n    rd = ret;\n    return rd;\n}" , false $)
1237:
1238:
1239:
1240: ;
1241: $if $(@expr1073743230 $!@expr1073743231 $assertEquals $(@expr1073743232 "cppcheck-2.8/test/testautovariables.cpp" $, 1241 $, "" $, errout@var100 .@expr1073743233 str (@expr1073743234 ) $) $) { $return ; }
1242: }
1243:
1244:
1245: void returnReference4 ( ) {
1246: $check_ $(@expr1073743235 "cppcheck-2.8/test/testautovariables.cpp" $, 1246 $, "double a;\ndouble & f() {\n    return a;\n}" $)
1247:
1248:
1249: ;
1250: $if $(@expr1073743236 $!@expr1073743237 $assertEquals $(@expr1073743238 "cppcheck-2.8/test/testautovariables.cpp" $, 1250 $, "" $, errout@var100 .@expr1073743239 str (@expr1073743240 ) $) $) { $return ; }
1251: }
1252:
1253: void returnReference5 ( ) {
1254: $check_ $(@expr1073743241 "cppcheck-2.8/test/testautovariables.cpp" $, 1254 $, "struct A {\n    int i;\n};\nstruct B {\n    A a;\n};\nstruct C {\n    B *b;\n    const A& a() const {\n        const B *pb = b;\n        const A &ra = pb->a;\n        return ra;\n    }\n};" $)
1255:
|
1268:
1269: ;
1270: $if $(@expr1073743242 $!@expr1073743243 $assertEquals $(@expr1073743244 "cppcheck-2.8/test/testautovariables.cpp" $, 1270 $, "" $, errout@var100 .@expr1073743245 str (@expr1073743246 ) $) $) { $return ; }
1271: }
1272:
1273: void returnReference6 ( ) {
1274: $check_ $(@expr1073743247 "cppcheck-2.8/test/testautovariables.cpp" $, 1274 $, "Fred & create() {\n    Fred &fred(*new Fred);\n    return fred;\n}" $)
1275:
1276:
1277: ;
1278: $if $(@expr1073743248 $!@expr1073743249 $assertEquals $(@expr1073743250 "cppcheck-2.8/test/testautovariables.cpp" $, 1278 $, "" $, errout@var100 .@expr1073743251 str (@expr1073743252 ) $) $) { $return ; }
1279: }
1280:
1281: void returnReference7 ( ) {
1282: $check_ $(@expr1073743253 "cppcheck-2.8/test/testautovariables.cpp" $, 1282 $, "std::string a();\nstd::string &a(int);\nstd::string &b() {\n    return a(12);\n}" $)
1283:
1284:
1285:
1286: ;
1287: $if $(@expr1073743254 $!@expr1073743255 $assertEquals $(@expr1073743256 "cppcheck-2.8/test/testautovariables.cpp" $, 1287 $, "" $, errout@var100 .@expr1433 str (@expr1434 ) $) $) { $return ; }
1288:
1289: $check_ $(@expr1073743259 "cppcheck-2.8/test/testautovariables.cpp" $, 1289 $, "std::string &a(int);\nstd::string a();\nstd::string &b() {\n    return a(12);\n}" $)
1290:
1291:
1292:
1293: ;
1294: $if $(@expr1073743260 $!@expr1073743261 $assertEquals $(@expr1073743262 "cppcheck-2.8/test/testautovariables.cpp" $, 1294 $, "" $, errout@var100 .@expr1433 str (@expr1434 ) $) $) { $return ; }
1295: }
1296:
1297: void returnReference8 ( ) {
1298: $check_ $(@expr1073743265 "cppcheck-2.8/test/testautovariables.cpp" $, 1298 $, "int& f(std::vector<int> &v) {\n    std::vector<int>::iterator it = v.begin();\n    int& value = *it;\n    return value;\n}" $)
1299:
1300:
1301:
1302: ;
1303: $if $(@expr1073743266 $!@expr1073743267 $assertEquals $(@expr1073743268 "cppcheck-2.8/test/testautovariables.cpp" $, 1303 $, "" $, errout@var100 .@expr1073743269 str (@expr1073743270 ) $) $) { $return ; }
1304: }
1305:
1306: void returnReference9 ( ) {
1307: $check_ $(@expr1073743271 "cppcheck-2.8/test/testautovariables.cpp" $, 1307 $, "int& f(bool b, int& x, int& y) {\n    return b ? x : y;\n}" $)
1308:
1309: ;
1310: $if $(@expr1073743272 $!@expr1073743273 $assertEquals $(@expr1073743274 "cppcheck-2.8/test/testautovariables.cpp" $, 1310 $, "" $, errout@var100 .@expr1073743275 str (@expr1073743276 ) $) $) { $return ; }
1311: }
1312:
1313: void returnReference10 ( ) {
1314: $check_ $(@expr1073743277 "cppcheck-2.8/test/testautovariables.cpp" $, 1314 $, "class A { int f() const; };\nint& g() {\n    A a;\n    return a.f();\n}" $)
1315:
1316:
1317:
1318: ;
1319: $if $(@expr1073743278 $!@expr1073743279 $assertEquals $(@expr1073743280 "cppcheck-2.8/test/testautovariables.cpp" $, 1319 $, "[test.cpp:4]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1457 str (@expr1458 ) $) $) { $return ; }
1320:
1321: $check_ $(@expr1073743283 "cppcheck-2.8/test/testautovariables.cpp" $, 1321 $, "class A { int& f() const; };\nint& g() {\n    A a;\n    return a.f();\n}" $)
1322:
1323:
1324:
1325: ;
1326: $if $(@expr1073743284 $!@expr1073743285 $assertEquals $(@expr1073743286 "cppcheck-2.8/test/testautovariables.cpp" $, 1326 $, "" $, errout@var100 .@expr1457 str (@expr1458 ) $) $) { $return ; }
1327: }
1328:
1329: void returnReference11 ( ) {
1330: $check_ $(@expr1073743289 "cppcheck-2.8/test/testautovariables.cpp" $, 1330 $, "class A { static int f(); };\nint& g() {\n    return A::f();\n}" $)
1331:
1332:
1333: ;
1334: $if $(@expr1073743290 $!@expr1073743291 $assertEquals $(@expr1073743292 "cppcheck-2.8/test/testautovariables.cpp" $, 1334 $, "[test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1469 str (@expr1470 ) $) $) { $return ; }
1335:
1336: $check_ $(@expr1073743295 "cppcheck-2.8/test/testautovariables.cpp" $, 1336 $, "class A { static int& f(); };\nint& g() {\n    return A::f();\n}" $)
1337:
1338:
1339: ;
1340: $if $(@expr1073743296 $!@expr1073743297 $assertEquals $(@expr1073743298 "cppcheck-2.8/test/testautovariables.cpp" $, 1340 $, "" $, errout@var100 .@expr1469 str (@expr1470 ) $) $) { $return ; }
1341:
1342: $check_ $(@expr1073743301 "cppcheck-2.8/test/testautovariables.cpp" $, 1342 $, "namespace A { int& f(); }\nint& g() {\n    return A::f();\n}" $)
1343:
1344:
1345: ;
1346: $if $(@expr1073743302 $!@expr1073743303 $assertEquals $(@expr1073743304 "cppcheck-2.8/test/testautovariables.cpp" $, 1346 $, "" $, errout@var100 .@expr1469 str (@expr1470 ) $) $) { $return ; }
1347: }
1348:
1349: void returnReference12 ( ) {
1350: $check_ $(@expr1073743307 "cppcheck-2.8/test/testautovariables.cpp" $, 1350 $, "class A { static int& f(); };\nauto g() {\n    return &A::f;\n}" $)
1351:
1352:
1353: ;
1354: $if $(@expr1073743308 $!@expr1073743309 $assertEquals $(@expr1073743310 "cppcheck-2.8/test/testautovariables.cpp" $, 1354 $, "" $, errout@var100 .@expr1487 str (@expr1488 ) $) $) { $return ; }
1355:
1356: $check_ $(@expr1073743313 "cppcheck-2.8/test/testautovariables.cpp" $, 1356 $, "class A { static int& f(); };\nauto g() {\n    auto x = &A::f;\n    return x;\n}" $)
1357:
1358:
1359:
1360: ;
1361: $if $(@expr1073743314 $!@expr1073743315 $assertEquals $(@expr1073743316 "cppcheck-2.8/test/testautovariables.cpp" $, 1361 $, "" $, errout@var100 .@expr1487 str (@expr1488 ) $) $) { $return ; }
1362: }
1363:
1364: void returnReference13 ( ) {
1365: $check_ $(@expr1073743319 "cppcheck-2.8/test/testautovariables.cpp" $, 1365 $, "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return ((std::vector<int>*)vp)->at(i);\n}" $)
1366:
1367:
1368:
1369: ;
1370: $if $(@expr1073743320 $!@expr1073743321 $assertEquals $(@expr1073743322 "cppcheck-2.8/test/testautovariables.cpp" $, 1370 $, "" $, errout@var100 .@expr1499 str (@expr1500 ) $) $) { $return ; }
1371:
1372: $check_ $(@expr1073743325 "cppcheck-2.8/test/testautovariables.cpp" $, 1372 $, "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return static_cast<std::vector<int>*>(vp)->at(i);\n}" $)
1373:
1374:
1375:
1376: ;
1377: $if $(@expr1073743326 $!@expr1073743327 $assertEquals $(@expr1073743328 "cppcheck-2.8/test/testautovariables.cpp" $, 1377 $, "" $, errout@var100 .@expr1499 str (@expr1500 ) $) $) { $return ; }
1378: }
1379:
1380: void returnReference14 ( ) {
1381: $check_ $(@expr1073743331 "cppcheck-2.8/test/testautovariables.cpp" $, 1381 $, "struct C { void* m; };\nstruct A { void* &f(); };\nC* g() {\n    static C c;\n    return &c;\n}\nvoid* &A::f() {\n    return g()->m;\n}" $)
1382:
|
1388:
1389: ;
1390: $if $(@expr1073743332 $!@expr1073743333 $assertEquals $(@expr1073743334 "cppcheck-2.8/test/testautovariables.cpp" $, 1390 $, "" $, errout@var100 .@expr1073743335 str (@expr1073743336 ) $) $) { $return ; }
1391: }
1392:
1393: void returnReference15 ( ) {
1394: $check_ $(@expr1073743337 "cppcheck-2.8/test/testautovariables.cpp" $, 1394 $, "template <class T>\nconst int& f() {\n    static int s;\n    return s;\n}\ntemplate <class T>\nconst int& f(const T&) {\n    return f<T>();\n}" $)
1395:
|
1401:
1402: ;
1403: $if $(@expr1073743338 $!@expr1073743339 $assertEquals $(@expr1073743340 "cppcheck-2.8/test/testautovariables.cpp" $, 1403 $, "" $, errout@var100 .@expr1517 str (@expr1518 ) $) $) { $return ; }
1404:
1405: $check_ $(@expr1073743343 "cppcheck-2.8/test/testautovariables.cpp" $, 1405 $, "template <class T>\nint g();\ntemplate <class T>\nconst int& f(const T&) {\n    return g<T>();\n}" $)
1406:
|
1409:
1410: ;
1411: $todoAssertEquals $(@expr1073743344 "cppcheck-2.8/test/testautovariables.cpp" $, 1411 $, "error" $, "" $, errout@var100 .@expr1517 str (@expr1518 ) $) ;
1412: }
1413:
1414: void returnReference16 ( ) {
1415: $check_ $(@expr1073743347 "cppcheck-2.8/test/testautovariables.cpp" $, 1415 $, "int& f(std::tuple<int>& x) {\n    return std::get<0>(x);\n}" $)
1416:
1417: ;
1418: $if $(@expr1073743348 $!@expr1073743349 $assertEquals $(@expr1073743350 "cppcheck-2.8/test/testautovariables.cpp" $, 1418 $, "" $, errout@var100 .@expr1527 str (@expr1528 ) $) $) { $return ; }
1419:
1420: $check_ $(@expr1073743353 "cppcheck-2.8/test/testautovariables.cpp" $, 1420 $, "int& f(int x) {\n    return std::get<0>(std::make_tuple(x));\n}" $)
1421:
1422: ;
1423: $todoAssertEquals $(@expr1073743354 "cppcheck-2.8/test/testautovariables.cpp" $, 1423 $, "error" $, "" $, errout@var100 .@expr1527 str (@expr1528 ) $) ;
1424: }
1425:
1426: void returnReference17 ( ) {
1427: $check_ $(@expr1073743357 "cppcheck-2.8/test/testautovariables.cpp" $, 1427 $, "auto g() -> int&;\nint& f() {\n    return g();\n}" $)
1428:
1429:
1430: ;
1431: $if $(@expr1073743358 $!@expr1073743359 $assertEquals $(@expr1073743360 "cppcheck-2.8/test/testautovariables.cpp" $, 1431 $, "" $, errout@var100 .@expr1073743361 str (@expr1073743362 ) $) $) { $return ; }
1432: }
1433:
1434: void returnReference18 ( ) {
1435: $check_ $(@expr1073743363 "cppcheck-2.8/test/testautovariables.cpp" $, 1435 $, "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}" $)
1436:
1437:
1438:
1439: ;
1440: $if $(@expr1073743364 $!@expr1073743365 $assertEquals $(@expr1073743366 "cppcheck-2.8/test/testautovariables.cpp" $, 1440 $, "" $, errout@var100 .@expr1073743367 str (@expr1073743368 ) $) $) { $return ; }
1441: }
1442:
1443:
1444: void returnReference19 ( ) {
1445: $check_ $(@expr1073743369 "cppcheck-2.8/test/testautovariables.cpp" $, 1445 $, "struct C : B {\n    const B &f() const { return (const B &)*this; }\n}" $)
1446:
1447: ;
1448: $if $(@expr1073743370 $!@expr1073743371 $assertEquals $(@expr1073743372 "cppcheck-2.8/test/testautovariables.cpp" $, 1448 $, "" $, errout@var100 .@expr1073743373 str (@expr1073743374 ) $) $) { $return ; }
1449: }
1450:
1451:
1452: void returnReference20 ( ) {
1453: $check_ $(@expr1073743375 "cppcheck-2.8/test/testautovariables.cpp" $, 1453 $, "struct a {\n    int& operator()() const;\n};\nint& b() {\n    return a()();\n}" $)
1454:
|
1457:
1458: ;
1459: $if $(@expr1073743376 $!@expr1073743377 $assertEquals $(@expr1073743378 "cppcheck-2.8/test/testautovariables.cpp" $, 1459 $, "" $, errout@var100 .@expr1555 str (@expr1556 ) $) $) { $return ; }
1460:
1461: $check_ $(@expr1073743381 "cppcheck-2.8/test/testautovariables.cpp" $, 1461 $, "auto a() {\n    return []() -> int& {\n        static int b;\n        return b;\n    };\n}\nconst int& c() {\n    return a()();\n}" $)
1462:
|
1468:
1469: ;
1470: $if $(@expr1073743382 $!@expr1073743383 $assertEquals $(@expr1073743384 "cppcheck-2.8/test/testautovariables.cpp" $, 1470 $, "" $, errout@var100 .@expr1555 str (@expr1556 ) $) $) { $return ; }
1471:
1472: $check_ $(@expr1073743387 "cppcheck-2.8/test/testautovariables.cpp" $, 1472 $, "std::function<int&()> a();\nint& b() {\n    return a()();\n}" $)
1473:
1474:
1475: ;
1476: $if $(@expr1073743388 $!@expr1073743389 $assertEquals $(@expr1073743390 "cppcheck-2.8/test/testautovariables.cpp" $, 1476 $, "" $, errout@var100 .@expr1555 str (@expr1556 ) $) $) { $return ; }
1477:
1478:
1479: $check_ $(@expr1073743393 "cppcheck-2.8/test/testautovariables.cpp" $, 1479 $, "int f(std::vector<std::function<int&()>>& v, int i) {\n    auto& j = v[i]();\n    return j;\n}\n" $)
1480:
1481:
1482: ;
1483: $if $(@expr1073743394 $!@expr1073743395 $assertEquals $(@expr1073743396 "cppcheck-2.8/test/testautovariables.cpp" $, 1483 $, "" $, errout@var100 .@expr1555 str (@expr1556 ) $) $) { $return ; }
1484: }
1485:
1486:
1487: void returnReference21 ( ) {
1488: $check_ $(@expr1073743399 "cppcheck-2.8/test/testautovariables.cpp" $, 1488 $, "int& f(int& x) {\n    return {x};\n}\n" $)
1489:
1490: ;
1491: $if $(@expr1073743400 $!@expr1073743401 $assertEquals $(@expr1073743402 "cppcheck-2.8/test/testautovariables.cpp" $, 1491 $, "" $, errout@var100 .@expr1073743403 str (@expr1073743404 ) $) $) { $return ; }
1492: }
1493:
1494: void returnReference22 ( ) {
1495: $check_ $(@expr1073743405 "cppcheck-2.8/test/testautovariables.cpp" $, 1495 $, "int& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    return *p;\n}\n" $)
1496:
1497:
1498: ;
1499: $if $(@expr1073743406 $!@expr1073743407 $assertEquals $(@expr1073743408 "cppcheck-2.8/test/testautovariables.cpp" $, 1499 $, "[test.cpp:3]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1500:
1501: $check_ $(@expr1073743411 "cppcheck-2.8/test/testautovariables.cpp" $, 1501 $, "void g(const std::unique_ptr<int>&);\nint& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    g(p);\n    return *p;\n}\n" $)
1502:
|
1505:
1506: ;
1507: $if $(@expr1073743412 $!@expr1073743413 $assertEquals $(@expr1073743414 "cppcheck-2.8/test/testautovariables.cpp" $, 1507 $, "[test.cpp:5]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1508:
1509: $check_ $(@expr1073743417 "cppcheck-2.8/test/testautovariables.cpp" $, 1509 $, "void g(std::shared_ptr<int>);\nint& f() {\n    std::shared_ptr<int> p = std::make_shared<int>(1);\n    g(p);\n    return *p;\n}\n" $)
1510:
|
1513:
1514: ;
1515: $if $(@expr1073743418 $!@expr1073743419 $assertEquals $(@expr1073743420 "cppcheck-2.8/test/testautovariables.cpp" $, 1515 $, "" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1516:
1517: $check_ $(@expr1073743423 "cppcheck-2.8/test/testautovariables.cpp" $, 1517 $, "std::shared_ptr<int> g();\nint& f() {\n    return *g();\n}\n" $)
1518:
1519:
1520: ;
1521: $if $(@expr1073743424 $!@expr1073743425 $assertEquals $(@expr1073743426 "cppcheck-2.8/test/testautovariables.cpp" $, 1521 $, "" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1522:
1523: $check_ $(@expr1073743429 "cppcheck-2.8/test/testautovariables.cpp" $, 1523 $, "std::unique_ptr<int> g();\nint& f() {\n    return *g();\n}\n" $)
1524:
1525:
1526: ;
1527: $if $(@expr1073743430 $!@expr1073743431 $assertEquals $(@expr1073743432 "cppcheck-2.8/test/testautovariables.cpp" $, 1527 $, "[test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1528:
1529: $check_ $(@expr1073743435 "cppcheck-2.8/test/testautovariables.cpp" $, 1529 $, "struct A { int x; };\nint& f() {\n    std::unique_ptr<A> p = std::make_unique<A>();\n    return p->x;\n}\n" $)
1530:
1531:
1532:
1533: ;
1534: $if $(@expr1073743436 $!@expr1073743437 $assertEquals $(@expr1073743438 "cppcheck-2.8/test/testautovariables.cpp" $, 1534 $, "[test.cpp:4]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1585 str (@expr1586 ) $) $) { $return ; }
1535: }
1536:
1537: void returnReference23 ( ) {
1538: $check_ $(@expr1073743441 "cppcheck-2.8/test/testautovariables.cpp" $, 1538 $, "const std::vector<int> * g();\nconst std::vector<int>& f() {\n    return *g();\n}\n" $)
1539:
1540:
1541: ;
1542: $if $(@expr1073743442 $!@expr1073743443 $assertEquals $(@expr1073743444 "cppcheck-2.8/test/testautovariables.cpp" $, 1542 $, "" $, errout@var100 .@expr1073743445 str (@expr1073743446 ) $) $) { $return ; }
1543: }
1544:
1545: void returnReference24 ( )
1546: {
1547: $check_ $(@expr1073743447 "cppcheck-2.8/test/testautovariables.cpp" $, 1547 $, "struct A {\n    A() {}\n};\nconst A& a() {\n    return A();\n}\n" $)
1548:
|
1551:
1552: ;
1553: $if $(@expr1073743448 $!@expr1073743449 $assertEquals $(@expr1073743450 "cppcheck-2.8/test/testautovariables.cpp" $, 1553 $, "[test.cpp:5]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1073743451 str (@expr1073743452 ) $) $) { $return ; }
1554: }
1555:
1556: void returnReference25 ( )
1557: {
1558: $check_ $(@expr1073743453 "cppcheck-2.8/test/testautovariables.cpp" $, 1558 $, "int& f();\n    auto g() -> decltype(f()) {\n    return f();\n}\nint& h() {\n    return g();\n}\n" $)
1559:
|
1563:
1564: ;
1565: $if $(@expr1073743454 $!@expr1073743455 $assertEquals $(@expr1073743456 "cppcheck-2.8/test/testautovariables.cpp" $, 1565 $, "" $, errout@var100 .@expr1073743457 str (@expr1073743458 ) $) $) { $return ; }
1566: }
1567:
1568: void returnReferenceFunction ( ) {
1569: $check_ $(@expr1073743459 "cppcheck-2.8/test/testautovariables.cpp" $, 1569 $, "int& f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" $)
1570:
|
1574:
1575: ;
1576: $if $(@expr1073743460 $!@expr1073743461 $assertEquals $(@expr1073743462 "cppcheck-2.8/test/testautovariables.cpp" $, 1576 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return
1577:
1578: ; }
1579:
1580: $check_ $(@expr1073743465 "cppcheck-2.8/test/testautovariables.cpp" $, 1580 $, "int& f(int& a) {\n    return a;\n}\nint* hello() {\n    int x = 0;\n    return &f(x);\n}" $)
1581:
|
1585:
1586: ;
1587: $if $(@expr1073743466 $!@expr1073743467 $assertEquals $(@expr1073743468 "cppcheck-2.8/test/testautovariables.cpp" $, 1587 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return
1588:
1589: ; }
1590:
1591: $check_ $(@expr1073743471 "cppcheck-2.8/test/testautovariables.cpp" $, 1591 $, "int* f(int * x) {\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}" $)
1592:
|
1595:
1596: ;
1597: $if $(@expr1073743472 $!@expr1073743473 $assertEquals $(@expr1073743474 "cppcheck-2.8/test/testautovariables.cpp" $, 1597 $, "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1598:
1599: $check_ $(@expr1073743477 "cppcheck-2.8/test/testautovariables.cpp" $, 1599 $, "int* f(int * x) {\n    x = nullptr;\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}" $)
1600:
|
1604:
1605: ;
1606: $if $(@expr1073743478 $!@expr1073743479 $assertEquals $(@expr1073743480 "cppcheck-2.8/test/testautovariables.cpp" $, 1606 $, "" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1607:
1608: $check_ $(@expr1073743483 "cppcheck-2.8/test/testautovariables.cpp" $, 1608 $, "int f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" $)
1609:
|
1613:
1614: ;
1615: $if $(@expr1073743484 $!@expr1073743485 $assertEquals $(@expr1073743486 "cppcheck-2.8/test/testautovariables.cpp" $, 1615 $, "[test.cpp:6]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1616:
1617: $check_ $(@expr1073743489 "cppcheck-2.8/test/testautovariables.cpp" $, 1617 $, "int& f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" $)
1618:
|
1622:
1623: ;
1624: $if $(@expr1073743490 $!@expr1073743491 $assertEquals $(@expr1073743492 "cppcheck-2.8/test/testautovariables.cpp" $, 1624 $, "[test.cpp:2]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1625:
1626: $check_ $(@expr1073743495 "cppcheck-2.8/test/testautovariables.cpp" $, 1626 $, "int f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" $)
1627:
|
1631:
1632: ;
1633: $if $(@expr1073743496 $!@expr1073743497 $assertEquals $(@expr1073743498 "cppcheck-2.8/test/testautovariables.cpp" $, 1633 $, "[test.cpp:6]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1634:
1635: $check_ $(@expr1073743501 "cppcheck-2.8/test/testautovariables.cpp" $, 1635 $, "template<class T>\nint& f(int& x, T y) {\n    x += y;\n    return x;\n}" $)
1636:
1637:
1638:
1639: ;
1640: $if $(@expr1073743502 $!@expr1073743503 $assertEquals $(@expr1073743504 "cppcheck-2.8/test/testautovariables.cpp" $, 1640 $, "" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1641: }
1642:
1643: void returnReferenceContainer ( ) {
1644: $check_ $(@expr1073743507 "cppcheck-2.8/test/testautovariables.cpp" $, 1644 $, "auto& f() {\n    std::vector<int> x;\n    return x[0];\n}" $)
1645:
1646:
1647: ;
1648: $if $(@expr1073743508 $!@expr1073743509 $assertEquals $(@expr1073743510 "cppcheck-2.8/test/testautovariables.cpp" $, 1648 $, "[test.cpp:3]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1649:
1650: $check_ $(@expr1073743513 "cppcheck-2.8/test/testautovariables.cpp" $, 1650 $, "auto& f() {\n    std::vector<int> x;\n    return x.front();\n}" $)
1651:
1652:
1653: ;
1654: $if $(@expr1073743514 $!@expr1073743515 $assertEquals $(@expr1073743516 "cppcheck-2.8/test/testautovariables.cpp" $, 1654 $, "[test.cpp:3] -> [test.cpp:3]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1655:
1656: $check_ $(@expr1073743519 "cppcheck-2.8/test/testautovariables.cpp" $, 1656 $, "std::vector<int> g();\nauto& f() {\n    return g().front();\n}" $)
1657:
1658:
1659: ;
1660: $if $(@expr1073743520 $!@expr1073743521 $assertEquals $(@expr1073743522 "cppcheck-2.8/test/testautovariables.cpp" $, 1660 $, "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1661:
1662: $check_ $(@expr1073743525 "cppcheck-2.8/test/testautovariables.cpp" $, 1662 $, "auto& f() {\n    return std::vector<int>{1}.front();\n}" $)
1663:
1664: ;
1665: $if $(@expr1073743526 $!@expr1073743527 $assertEquals $(@expr1073743528 "cppcheck-2.8/test/testautovariables.cpp" $, 1665 $, "[test.cpp:2] -> [test.cpp:2]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1666:
1667: $check_ $(@expr1073743531 "cppcheck-2.8/test/testautovariables.cpp" $, 1667 $, "struct A { int foo; };\nint& f(std::vector<A> v) {\n    auto it = v.begin();\n    return it->foo;\n}" $)
1668:
1669:
1670:
1671: ;
1672: $if $(@expr1073743532 $!@expr1073743533 $assertEquals $(@expr1073743534 "cppcheck-2.8/test/testautovariables.cpp" $, 1672 $, "[test.cpp:3] -> [test.cpp:4]: (error) Reference to local variable returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1673:
1674: $check_ $(@expr1073743537 "cppcheck-2.8/test/testautovariables.cpp" $, 1674 $, "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, x);\n}\n" , true $)
1675:
|
1683:
1684: ;
1685: $if $(@expr1073743538 $!@expr1073743539 $assertEquals $(@expr1073743540 "cppcheck-2.8/test/testautovariables.cpp" $, 1685 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:9] -> [test.cpp:9]: (error, inconclusive) Reference to local variable returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return
1686:
1687: ; }
1688:
1689: $check_ $(@expr1073743543 "cppcheck-2.8/test/testautovariables.cpp" $, 1689 $, "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    return get_default(m, k, 0);\n}\n" , true $)
1690:
|
1697:
1698: ;
1699: $if $(@expr1073743544 $!@expr1073743545 $assertEquals $(@expr1073743546 "cppcheck-2.8/test/testautovariables.cpp" $, 1699 $, "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error, inconclusive) Reference to temporary returned.\n" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return
1700:
1701: ; }
1702:
1703: $check_ $(@expr1073743549 "cppcheck-2.8/test/testautovariables.cpp" $, 1703 $, "struct A { int foo; };\nint& f(std::vector<A>& v) {\n    auto it = v.begin();\n    return it->foo;\n}" $)
1704:
1705:
1706:
1707: ;
1708: $if $(@expr1073743550 $!@expr1073743551 $assertEquals $(@expr1073743552 "cppcheck-2.8/test/testautovariables.cpp" $, 1708 $, "" $, errout@var100 .@expr1687 str (@expr1688 ) $) $) { $return ; }
1709: }
1710:
1711: void returnReferenceLiteral ( ) {
1712: $check_ $(@expr1073743555 "cppcheck-2.8/test/testautovariables.cpp" $, 1712 $, "const std::string &a() {\n    return \"foo\";\n}" $)
1713:
1714: ;
1715: $if $(@expr1073743556 $!@expr1073743557 $assertEquals $(@expr1073743558 "cppcheck-2.8/test/testautovariables.cpp" $, 1715 $, "[test.cpp:2]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1716:
1717: $check_ $(@expr1073743561 "cppcheck-2.8/test/testautovariables.cpp" $, 1717 $, "const std::string a() {\n    return \"foo\";\n}" $)
1718:
1719: ;
1720: $if $(@expr1073743562 $!@expr1073743563 $assertEquals $(@expr1073743564 "cppcheck-2.8/test/testautovariables.cpp" $, 1720 $, "" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1721:
1722: $check_ $(@expr1073743567 "cppcheck-2.8/test/testautovariables.cpp" $, 1722 $, "const std::string& f(const std::string& x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}" $)
1723:
1724:
1725: ;
1726: $if $(@expr1073743568 $!@expr1073743569 $assertEquals $(@expr1073743570 "cppcheck-2.8/test/testautovariables.cpp" $, 1726 $, "[test.cpp:1] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return
1727:
1728: ; }
1729:
1730: $check_ $(@expr1073743573 "cppcheck-2.8/test/testautovariables.cpp" $, 1730 $, "const char * f(const char * x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}" $)
1731:
1732:
1733: ;
1734: $if $(@expr1073743574 $!@expr1073743575 $assertEquals $(@expr1073743576 "cppcheck-2.8/test/testautovariables.cpp" $, 1734 $, "[test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1735 str (@expr1736 ) $) $) { $return ; }
1735: }
1736:
1737: void returnReferenceCalculation ( ) {
1738: $check_ $(@expr1073743579 "cppcheck-2.8/test/testautovariables.cpp" $, 1738 $, "const std::string &a(const std::string& str) {\n    return \"foo\" + str;\n}" $)
1739:
1740: ;
1741: $if $(@expr1073743580 $!@expr1073743581 $assertEquals $(@expr1073743582 "cppcheck-2.8/test/testautovariables.cpp" $, 1741 $, "[test.cpp:2]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1742:
1743: $check_ $(@expr1073743585 "cppcheck-2.8/test/testautovariables.cpp" $, 1743 $, "int& operator<<(int out, int path) {\n    return out << path;\n}" $)
1744:
1745: ;
1746: $if $(@expr1073743586 $!@expr1073743587 $assertEquals $(@expr1073743588 "cppcheck-2.8/test/testautovariables.cpp" $, 1746 $, "[test.cpp:2]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1747:
1748: $check_ $(@expr1073743591 "cppcheck-2.8/test/testautovariables.cpp" $, 1748 $, "std::ostream& operator<<(std::ostream& out, const std::string& path) {\n    return out << path;\n}" $)
1749:
1750: ;
1751: $if $(@expr1073743592 $!@expr1073743593 $assertEquals $(@expr1073743594 "cppcheck-2.8/test/testautovariables.cpp" $, 1751 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1752:
1753: $check_ $(@expr1073743597 "cppcheck-2.8/test/testautovariables.cpp" $, 1753 $, "std::ostream& operator<<(std::ostream* out, const std::string& path) {\n    return *out << path;\n}" $)
1754:
1755: ;
1756: $if $(@expr1073743598 $!@expr1073743599 $assertEquals $(@expr1073743600 "cppcheck-2.8/test/testautovariables.cpp" $, 1756 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1757:
1758: $check_ $(@expr1073743603 "cppcheck-2.8/test/testautovariables.cpp" $, 1758 $, "Unknown1& operator<<(Unknown1 out, Unknown2 path) {\n    return out << path;\n}" $)
1759:
1760: ;
1761: $if $(@expr1073743604 $!@expr1073743605 $assertEquals $(@expr1073743606 "cppcheck-2.8/test/testautovariables.cpp" $, 1761 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1762:
1763: $check_ $(@expr1073743609 "cppcheck-2.8/test/testautovariables.cpp" $, 1763 $, "int& a(int b) {\n    return 2*(b+1);\n}" $)
1764:
1765: ;
1766: $if $(@expr1073743610 $!@expr1073743611 $assertEquals $(@expr1073743612 "cppcheck-2.8/test/testautovariables.cpp" $, 1766 $, "[test.cpp:2]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1767:
1768: $check_ $(@expr1073743615 "cppcheck-2.8/test/testautovariables.cpp" $, 1768 $, "const std::string &a(const std::string& str) {\n    return str;\n}" $)
1769:
1770: ;
1771: $if $(@expr1073743616 $!@expr1073743617 $assertEquals $(@expr1073743618 "cppcheck-2.8/test/testautovariables.cpp" $, 1771 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1772:
1773: $check_ $(@expr1073743621 "cppcheck-2.8/test/testautovariables.cpp" $, 1773 $, "const std::string &a(int bar) {\n    return foo(bar + 1);\n}" $)
1774:
1775: ;
1776: $if $(@expr1073743622 $!@expr1073743623 $assertEquals $(@expr1073743624 "cppcheck-2.8/test/testautovariables.cpp" $, 1776 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1777:
1778: $check_ $(@expr1073743627 "cppcheck-2.8/test/testautovariables.cpp" $, 1778 $, "const std::string a(const std::string& str) {\n    return \"foo\" + str;\n}" $)
1779:
1780: ;
1781: $if $(@expr1073743628 $!@expr1073743629 $assertEquals $(@expr1073743630 "cppcheck-2.8/test/testautovariables.cpp" $, 1781 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1782:
1783: $check_ $(@expr1073743633 "cppcheck-2.8/test/testautovariables.cpp" $, 1783 $, "int& incValue(int& value) {\n    return ++value;\n}" $)
1784:
1785: ;
1786: $if $(@expr1073743634 $!@expr1073743635 $assertEquals $(@expr1073743636 "cppcheck-2.8/test/testautovariables.cpp" $, 1786 $, "" $, errout@var100 .@expr1759 str (@expr1760 ) $) $) { $return ; }
1787: }
1788:
1789: void returnReferenceLambda ( ) {
1790:
1791: $check_ $(@expr1073743639 "cppcheck-2.8/test/testautovariables.cpp" $, 1791 $, "const Item& foo(const Container& items) const {\n    return bar(items.begin(), items.end(),\n    [](const Item& lhs, const Item& rhs) {\n        return false;\n    });\n}" $)
1792:
|
1795:
1796: ;
1797: $if $(@expr1073743640 $!@expr1073743641 $assertEquals $(@expr1073743642 "cppcheck-2.8/test/testautovariables.cpp" $, 1797 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1798:
1799:
1800: $check_ $(@expr1073743645 "cppcheck-2.8/test/testautovariables.cpp" $, 1800 $, "map<string,string> const &getVariableTable() {\nstatic map<string,string> const s_var = []{\n    map<string,string> var;\n    return var;\n  }();\nreturn s_var;\n}" $)
1801:
|
1805:
1806: ;
1807: $if $(@expr1073743646 $!@expr1073743647 $assertEquals $(@expr1073743648 "cppcheck-2.8/test/testautovariables.cpp" $, 1807 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1808:
1809:
1810: $check_ $(@expr1073743651 "cppcheck-2.8/test/testautovariables.cpp" $, 1810 $, "Command& foo() {\n  return f([]() -> int { return 1; });\n}" $)
1811:
1812: ;
1813: $if $(@expr1073743652 $!@expr1073743653 $assertEquals $(@expr1073743654 "cppcheck-2.8/test/testautovariables.cpp" $, 1813 $, "" $, errout@var100 .@expr1819 str (@expr1820 ) $) $) { $return ; }
1814: }
1815:
1816: void returnReferenceInnerScope ( ) {
1817:
1818: $check_ $(@expr1073743657 "cppcheck-2.8/test/testautovariables.cpp" $, 1818 $, "const Callback& make() {\n    struct _Wrapper {\n        static ulong call(void* o, const void* f, const void*[]) {\n            return 1;\n        }\n    };\n    return _make(_Wrapper::call, pmf);\n}" $)
1819:
|
1824:
1825: ;
1826: $if $(@expr1073743658 $!@expr1073743659 $assertEquals $(@expr1073743660 "cppcheck-2.8/test/testautovariables.cpp" $, 1826 $, "" $, errout@var100 .@expr1073743661 str (@expr1073743662 ) $) $) { $return ; }
1827: }
1828:
1829: void returnReferenceRecursive ( ) {
1830: $check_ $(@expr1073743663 "cppcheck-2.8/test/testautovariables.cpp" $, 1830 $, "int& f() { return f(); }" $) ;
1831: $if $(@expr1073743664 $!@expr1073743665 $assertEquals $(@expr1073743666 "cppcheck-2.8/test/testautovariables.cpp" $, 1831 $, "" $, errout@var100 .@expr1843 str (@expr1844 ) $) $) { $return ; }
1832:
1833: $check_ $(@expr1073743669 "cppcheck-2.8/test/testautovariables.cpp" $, 1833 $, "int& g(int& i) { return i; }\nint& f() { return g(f()); }" $)
1834: ;
1835: $if $(@expr1073743670 $!@expr1073743671 $assertEquals $(@expr1073743672 "cppcheck-2.8/test/testautovariables.cpp" $, 1835 $, "" $, errout@var100 .@expr1843 str (@expr1844 ) $) $) { $return ; }
1836: }
1837:
1838: void extendedLifetime ( ) {
1839: $check_ $(@expr1073743675 "cppcheck-2.8/test/testautovariables.cpp" $, 1839 $, "void g(int*);\nint h();\nauto f() {\n    const int& x = h();\n    return [&] { return x; };\n}" $)
1840:
|
1843:
1844: ;
1845: $if $(@expr1073743676 $!@expr1073743677 $assertEquals $(@expr1073743678 "cppcheck-2.8/test/testautovariables.cpp" $, 1845 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning lambda that captures local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1855 str (@expr1856 ) $) $) { $return ; }
1846:
1847: $check_ $(@expr1073743681 "cppcheck-2.8/test/testautovariables.cpp" $, 1847 $, "void g(int*);\nint h();\nint* f() {\n    const int& x = h();\n    return &x;\n}" $)
1848:
|
1851:
1852: ;
1853: $if $(@expr1073743682 $!@expr1073743683 $assertEquals $(@expr1073743684 "cppcheck-2.8/test/testautovariables.cpp" $, 1853 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr1855 str (@expr1856 ) $) $) { $return ; }
1854:
1855: $check_ $(@expr1073743687 "cppcheck-2.8/test/testautovariables.cpp" $, 1855 $, "void g(int*);\nint h();\nvoid f() {\n    int& x = h();\n    g(&x);\n}" $)
1856:
|
1859:
1860: ;
1861: $if $(@expr1073743688 $!@expr1073743689 $assertEquals $(@expr1073743690 "cppcheck-2.8/test/testautovariables.cpp" $, 1861 $, "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n[test.cpp:4] -> [test.cpp:5]: (error) Using reference to dangling temporary.\n" $, errout@var100 .@expr1855 str (@expr1856 ) $) $) { $return
1862:
1863:
1864: ; }
1865:
1866: $check_ $(@expr1073743693 "cppcheck-2.8/test/testautovariables.cpp" $, 1866 $, "void g(int*);\nint h();\nvoid f() {\n    const int& x = h();\n    g(&x);\n}" $)
1867:
|
1870:
1871: ;
1872: $if $(@expr1073743694 $!@expr1073743695 $assertEquals $(@expr1073743696 "cppcheck-2.8/test/testautovariables.cpp" $, 1872 $, "" $, errout@var100 .@expr1855 str (@expr1856 ) $) $) { $return ; }
1873:
1874: $check_ $(@expr1073743699 "cppcheck-2.8/test/testautovariables.cpp" $, 1874 $, "struct Data {\n    std::string path;\n};\nconst char* foo() {\n    const Data& data = getData();\n    return data.path.c_str();\n}" $)
1875:
|
1879:
1880: ;
1881: $if $(@expr1073743700 $!@expr1073743701 $assertEquals $(@expr1073743702 "cppcheck-2.8/test/testautovariables.cpp" $, 1881 $, "" $, errout@var100 .@expr1855 str (@expr1856 ) $) $) { $return ; }
1882: }
1883:
1884: void danglingReference ( ) {
1885: $check_ $(@expr1073743705 "cppcheck-2.8/test/testautovariables.cpp" $, 1885 $, "int f( int k )\n{\n    static int &r = k;\n    return r;\n}" $)
1886:
1887:
1888:
1889: ;
1890: $if $(@expr1073743706 $!@expr1073743707 $assertEquals $(@expr1073743708 "cppcheck-2.8/test/testautovariables.cpp" $, 1890 $, "[test.cpp:3] -> [test.cpp:3]: (error) Non-local reference variable 'r' to local variable 'k'\n" $, errout@var100 .@expr1885 str (@expr1886 ) $) $) { $return
1891: ; }
1892:
1893: $check_ $(@expr1073743711 "cppcheck-2.8/test/testautovariables.cpp" $, 1893 $, "int &f( int & k )\n{\n    static int &r = k;\n    return r;\n}" $)
1894:
1895:
1896:
1897: ;
1898: $if $(@expr1073743712 $!@expr1073743713 $assertEquals $(@expr1073743714 "cppcheck-2.8/test/testautovariables.cpp" $, 1898 $, "" $, errout@var100 .@expr1885 str (@expr1886 ) $) $) { $return ; }
1899: }
1900:
1901: void danglingTempReference ( ) {
1902: $check_ $(@expr1073743717 "cppcheck-2.8/test/testautovariables.cpp" $, 1902 $, "const std::string& g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n" $)
1903:
|
1907:
1908: ;
1909: $if $(@expr1073743718 $!@expr1073743719 $assertEquals $(@expr1073743720 "cppcheck-2.8/test/testautovariables.cpp" $, 1909 $, "[test.cpp:5] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:6]: (error) Using reference to dangling temporary.\n" $, errout@var100 .@expr1897 str (@expr1898 ) $) $) { $return ; }
1910:
1911:
1912: $check_ $(@expr1073743723 "cppcheck-2.8/test/testautovariables.cpp" $, 1912 $, "std::string g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n" $)
1913:
|
1917:
1918: ;
1919: $if $(@expr1073743724 $!@expr1073743725 $assertEquals $(@expr1073743726 "cppcheck-2.8/test/testautovariables.cpp" $, 1919 $, "" $, errout@var100 .@expr1897 str (@expr1898 ) $) $) { $return ; }
1920:
1921: $check_ $(@expr1073743729 "cppcheck-2.8/test/testautovariables.cpp" $, 1921 $, "char f() {\n    char c = 0;\n    char&& cr = std::move(c);\n    return cr;\n}\n" $)
1922:
1923:
1924:
1925: ;
1926: $if $(@expr1073743730 $!@expr1073743731 $assertEquals $(@expr1073743732 "cppcheck-2.8/test/testautovariables.cpp" $, 1926 $, "" $, errout@var100 .@expr1897 str (@expr1898 ) $) $) { $return ; }
1927:
1928:
1929: $check_ $(@expr1073743735 "cppcheck-2.8/test/testautovariables.cpp" $, 1929 $, "void g(std::vector<int>);\nvoid f() {\n    std::vector<int>&& v = {};\n    g(std::move(v));\n}\n" $)
1930:
1931:
1932:
1933: ;
1934: $if $(@expr1073743736 $!@expr1073743737 $assertEquals $(@expr1073743738 "cppcheck-2.8/test/testautovariables.cpp" $, 1934 $, "" $, errout@var100 .@expr1897 str (@expr1898 ) $) $) { $return ; }
1935:
1936: $check_ $(@expr1073743741 "cppcheck-2.8/test/testautovariables.cpp" $, 1936 $, "void g(std::vector<int>);\nstd::vector<int> h();\nvoid f() {\n    std::vector<int>&& v = h();\n    g(std::move(v));\n}\n" $)
1937:
|
1940:
1941: ;
1942: $if $(@expr1073743742 $!@expr1073743743 $assertEquals $(@expr1073743744 "cppcheck-2.8/test/testautovariables.cpp" $, 1942 $, "" $, errout@var100 .@expr1897 str (@expr1898 ) $) $) { $return ; }
1943: }
1944:
1945: void testglobalnamespace ( ) {
1946: $check_ $(@expr1073743747 "cppcheck-2.8/test/testautovariables.cpp" $, 1946 $, "class SharedPtrHolder\n{\n   ::std::tr1::shared_ptr<int> pNum;\npublic:\n   void SetNum(const ::std::tr1::shared_ptr<int> & apNum)\n   {\n      pNum = apNum;\n   }\n}" $)
1947:
|
1953:
1954: ;
1955:
1956: $if $(@expr1073743748 $!@expr1073743749 $assertEquals $(@expr1073743750 "cppcheck-2.8/test/testautovariables.cpp" $, 1956 $, "" $, errout@var100 .@expr1073743751 str (@expr1073743752 ) $) $) { $return ; }
1957: }
1958:
1959: void returnParameterAddress ( ) {
1960: $check_ $(@expr1073743753 "cppcheck-2.8/test/testautovariables.cpp" $, 1960 $, "int* foo(int y)\n{\n  return &y;\n}" $)
1961:
1962:
1963: ;
1964:
1965: $if $(@expr1073743754 $!@expr1073743755 $assertEquals $(@expr1073743756 "cppcheck-2.8/test/testautovariables.cpp" $, 1965 $, "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n" $, errout@var100 .@expr1933 str (@expr1934 ) $) $) { $return ; }
1966:
1967: $check_ $(@expr1073743759 "cppcheck-2.8/test/testautovariables.cpp" $, 1967 $, "int ** foo(int * y)\n{\n  return &y;\n}" $)
1968:
1969:
1970: ;
1971:
1972: $if $(@expr1073743760 $!@expr1073743761 $assertEquals $(@expr1073743762 "cppcheck-2.8/test/testautovariables.cpp" $, 1972 $, "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n" $, errout@var100 .@expr1933 str (@expr1934 ) $) $) { $return ; }
1973:
1974: $check_ $(@expr1073743765 "cppcheck-2.8/test/testautovariables.cpp" $, 1974 $, "const int * foo(const int & y)\n{\n  return &y;\n}" $)
1975:
1976:
1977: ;
1978:
1979: $if $(@expr1073743766 $!@expr1073743767 $assertEquals $(@expr1073743768 "cppcheck-2.8/test/testautovariables.cpp" $, 1979 $, "" $, errout@var100 .@expr1933 str (@expr1934 ) $) $) { $return ; }
1980:
1981: $check_ $(@expr1073743771 "cppcheck-2.8/test/testautovariables.cpp" $, 1981 $, "int * foo(int * y)\n{\n  return y;\n}" $)
1982:
1983:
1984: ;
1985:
1986: $if $(@expr1073743772 $!@expr1073743773 $assertEquals $(@expr1073743774 "cppcheck-2.8/test/testautovariables.cpp" $, 1986 $, "" $, errout@var100 .@expr1933 str (@expr1934 ) $) $) { $return ; }
1987:
1988: $check_ $(@expr1073743777 "cppcheck-2.8/test/testautovariables.cpp" $, 1988 $, "struct s { void *p; };\nextern struct s* f(void);\nvoid g(void **q)\n{\n    struct s *r = f();\n    *q = &r->p;\n}" $)
1989:
|
1993:
1994: ;
1995:
1996: $if $(@expr1073743778 $!@expr1073743779 $assertEquals $(@expr1073743780 "cppcheck-2.8/test/testautovariables.cpp" $, 1996 $, "" $, errout@var100 .@expr1933 str (@expr1934 ) $) $) { $return ; }
1997: }
1998:
1999: void testconstructor ( ) {
2000: $check_ $(@expr1073743783 "cppcheck-2.8/test/testautovariables.cpp" $, 2000 $, "class const_tree_iterator {\n  const_tree_iterator(bool (*_incream)(node_type*&)) {}\n  const_tree_iterator& parent() {\n    return const_tree_iterator(foo);\n  }\n};" $)
2001:
|
2004:
2005: ;
2006: }
2007:
2008: void variableIsUsedInScope ( ) {
2009: $check_ $(@expr1073743784 "cppcheck-2.8/test/testautovariables.cpp" $, 2009 $, "void removed_cb (GList *uids) {\nfor (; uids; uids = uids->next) {\n}\n}\nvoid opened_cb () {\n	g_signal_connect (G_CALLBACK (removed_cb));\n}" $)
2010:
|
2014:
2015: ;
2016: }
2017:
2018: void danglingLifetimeLambda ( ) {
2019: $check_ $(@expr1073743785 "cppcheck-2.8/test/testautovariables.cpp" $, 2019 $, "auto f() {\n    int a = 1;\n    auto l = [&](){ return a; };\n    return l;\n}" $)
2020:
2021:
2022:
2023: ;
2024: $if $(@expr1073743786 $!@expr1073743787 $assertEquals $(@expr1073743788 "cppcheck-2.8/test/testautovariables.cpp" $, 2024 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2025:
2026: $check_ $(@expr1073743791 "cppcheck-2.8/test/testautovariables.cpp" $, 2026 $, "auto f() {\n    int a = 1;\n    return [&](){ return a; };\n}" $)
2027:
2028:
2029: ;
2030: $if $(@expr1073743792 $!@expr1073743793 $assertEquals $(@expr1073743794 "cppcheck-2.8/test/testautovariables.cpp" $, 2030 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2031:
2032: $check_ $(@expr1073743797 "cppcheck-2.8/test/testautovariables.cpp" $, 2032 $, "auto f(int a) {\n    return [&](){ return a; };\n}" $)
2033:
2034: ;
2035: $if $(@expr1073743798 $!@expr1073743799 $assertEquals $(@expr1073743800 "cppcheck-2.8/test/testautovariables.cpp" $, 2035 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2036:
2037: $check_ $(@expr1073743803 "cppcheck-2.8/test/testautovariables.cpp" $, 2037 $, "auto f(int a) {\n    auto p = &a;\n    return [=](){ return p; };\n}" $)
2038:
2039:
2040: ;
2041: $if $(@expr1073743804 $!@expr1073743805 $assertEquals $(@expr1073743806 "cppcheck-2.8/test/testautovariables.cpp" $, 2041 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2042:
2043: $check_ $(@expr1073743809 "cppcheck-2.8/test/testautovariables.cpp" $, 2043 $, "auto g(int& a) {\n    int p = a;\n    return [&](){ return p; };\n}" $)
2044:
2045:
2046: ;
2047: $if $(@expr1073743810 $!@expr1073743811 $assertEquals $(@expr1073743812 "cppcheck-2.8/test/testautovariables.cpp" $, 2047 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'p' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2048:
2049: $check_ $(@expr1073743815 "cppcheck-2.8/test/testautovariables.cpp" $, 2049 $, "auto f() {\n    return [=](){\n        int a = 1;\n        return [&](){ return a; };\n    };\n}" $)
2050:
|
2053:
2054: ;
2055: $if $(@expr1073743816 $!@expr1073743817 $assertEquals $(@expr1073743818 "cppcheck-2.8/test/testautovariables.cpp" $, 2055 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2056:
2057: $check_ $(@expr1073743821 "cppcheck-2.8/test/testautovariables.cpp" $, 2057 $, "auto f(int b) {\n    return [=](int a){\n        a += b;\n        return [&](){ return a; };\n    };\n}" $)
2058:
|
2061:
2062: ;
2063: $if $(@expr1073743822 $!@expr1073743823 $assertEquals $(@expr1073743824 "cppcheck-2.8/test/testautovariables.cpp" $, 2063 $, "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2064:
2065: $check_ $(@expr1073743827 "cppcheck-2.8/test/testautovariables.cpp" $, 2065 $, "auto g(int& a) {\n    return [&](){ return a; };\n}" $)
2066:
2067: ;
2068: $if $(@expr1073743828 $!@expr1073743829 $assertEquals $(@expr1073743830 "cppcheck-2.8/test/testautovariables.cpp" $, 2068 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2069:
2070: $check_ $(@expr1073743833 "cppcheck-2.8/test/testautovariables.cpp" $, 2070 $, "auto g(int a) {\n    auto p = a;\n    return [=](){ return p; };\n}" $)
2071:
2072:
2073: ;
2074: $if $(@expr1073743834 $!@expr1073743835 $assertEquals $(@expr1073743836 "cppcheck-2.8/test/testautovariables.cpp" $, 2074 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2075:
2076: $check_ $(@expr1073743839 "cppcheck-2.8/test/testautovariables.cpp" $, 2076 $, "auto g(int& a) {\n    auto p = a;\n    return [=](){ return p; };\n}" $)
2077:
2078:
2079: ;
2080: $if $(@expr1073743840 $!@expr1073743841 $assertEquals $(@expr1073743842 "cppcheck-2.8/test/testautovariables.cpp" $, 2080 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2081:
2082: $check_ $(@expr1073743845 "cppcheck-2.8/test/testautovariables.cpp" $, 2082 $, "auto g(int& a) {\n    int& p = a;\n    return [&](){ return p; };\n}" $)
2083:
2084:
2085: ;
2086: $if $(@expr1073743846 $!@expr1073743847 $assertEquals $(@expr1073743848 "cppcheck-2.8/test/testautovariables.cpp" $, 2086 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2087:
2088: $check_ $(@expr1073743851 "cppcheck-2.8/test/testautovariables.cpp" $, 2088 $, "template<class F>\nvoid g(F);\nauto f() {\n    int x;\n    return g([&]() { return x; });\n}" $)
2089:
|
2092:
2093: ;
2094: $if $(@expr1073743852 $!@expr1073743853 $assertEquals $(@expr1073743854 "cppcheck-2.8/test/testautovariables.cpp" $, 2094 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2095:
2096: $check_ $(@expr1073743857 "cppcheck-2.8/test/testautovariables.cpp" $, 2096 $, "auto f() {\n    int i = 0;\n    return [&i] {};\n}\n" $)
2097:
2098:
2099: ;
2100: $if $(@expr1073743858 $!@expr1073743859 $assertEquals $(@expr1073743860 "cppcheck-2.8/test/testautovariables.cpp" $, 2100 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2101:
2102: $check_ $(@expr1073743863 "cppcheck-2.8/test/testautovariables.cpp" $, 2102 $, "auto f() {\n    int i = 0;\n    return [i] {};\n}\n" $)
2103:
2104:
2105: ;
2106: $if $(@expr1073743864 $!@expr1073743865 $assertEquals $(@expr1073743866 "cppcheck-2.8/test/testautovariables.cpp" $, 2106 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2107:
2108: $check_ $(@expr1073743869 "cppcheck-2.8/test/testautovariables.cpp" $, 2108 $, "auto f() {\n    int i = 0;\n    return [=, &i] {};\n}\n" $)
2109:
2110:
2111: ;
2112: $if $(@expr1073743870 $!@expr1073743871 $assertEquals $(@expr1073743872 "cppcheck-2.8/test/testautovariables.cpp" $, 2112 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2113:
2114: $check_ $(@expr1073743875 "cppcheck-2.8/test/testautovariables.cpp" $, 2114 $, "auto f() {\n    int i = 0;\n    int j = 0;\n    return [=, &i] { return j; };\n}\n" $)
2115:
2116:
2117:
2118: ;
2119: $if $(@expr1073743876 $!@expr1073743877 $assertEquals $(@expr1073743878 "cppcheck-2.8/test/testautovariables.cpp" $, 2119 $, "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2120:
2121: $check_ $(@expr1073743881 "cppcheck-2.8/test/testautovariables.cpp" $, 2121 $, "auto f() {\n    int i = 0;\n    return [&, i] {};\n}\n" $)
2122:
2123:
2124: ;
2125: $if $(@expr1073743882 $!@expr1073743883 $assertEquals $(@expr1073743884 "cppcheck-2.8/test/testautovariables.cpp" $, 2125 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2126:
2127: $check_ $(@expr1073743887 "cppcheck-2.8/test/testautovariables.cpp" $, 2127 $, "auto f() {\n    int i = 0;\n    int j = 0;\n    return [&, i] { return j; };\n}\n" $)
2128:
2129:
2130:
2131: ;
2132: $if $(@expr1073743888 $!@expr1073743889 $assertEquals $(@expr1073743890 "cppcheck-2.8/test/testautovariables.cpp" $, 2132 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'j' that will be invalid when returning.\n" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2133:
2134: $check_ $(@expr1073743893 "cppcheck-2.8/test/testautovariables.cpp" $, 2134 $, "auto f(int& i) {\n    int j = 0;\n    return [=, &i] { return j; };\n}\n" $)
2135:
2136:
2137: ;
2138: $if $(@expr1073743894 $!@expr1073743895 $assertEquals $(@expr1073743896 "cppcheck-2.8/test/testautovariables.cpp" $, 2138 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2139:
2140: $check_ $(@expr1073743899 "cppcheck-2.8/test/testautovariables.cpp" $, 2140 $, "void f(int*);\nauto g(int y) {\n    int x = y;\n    return [=] {\n        g(&x);\n    };\n}\n" $)
2141:
|
2145:
2146: ;
2147: $if $(@expr1073743900 $!@expr1073743901 $assertEquals $(@expr1073743902 "cppcheck-2.8/test/testautovariables.cpp" $, 2147 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2148:
2149: $check_ $(@expr1073743905 "cppcheck-2.8/test/testautovariables.cpp" $, 2149 $, "struct A {\n    int x;\n};\nauto f() {\n    A a;\n    return [=] {\n        const A* ap = &a;\n        ap->x;\n    };\n}\n" $)
2150:
|
2157:
2158: ;
2159: $if $(@expr1073743906 $!@expr1073743907 $assertEquals $(@expr1073743908 "cppcheck-2.8/test/testautovariables.cpp" $, 2159 $, "" $, errout@var100 .@expr1965 str (@expr1966 ) $) $) { $return ; }
2160: }
2161:
2162: void danglingLifetimeContainer ( ) {
2163: $check_ $(@expr1073743911 "cppcheck-2.8/test/testautovariables.cpp" $, 2163 $, "auto f(const std::vector<int>& x) {\n    auto it = x.begin();\n    return it;\n}" $)
2164:
2165:
2166: ;
2167: $if $(@expr1073743912 $!@expr1073743913 $assertEquals $(@expr1073743914 "cppcheck-2.8/test/testautovariables.cpp" $, 2167 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2168:
2169: $check_ $(@expr1073743917 "cppcheck-2.8/test/testautovariables.cpp" $, 2169 $, "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it;\n}" $)
2170:
2171:
2172:
2173: ;
2174: $if $(@expr1073743918 $!@expr1073743919 $assertEquals $(@expr1073743920 "cppcheck-2.8/test/testautovariables.cpp" $, 2174 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2175:
2176: $check_ $(@expr1073743923 "cppcheck-2.8/test/testautovariables.cpp" $, 2176 $, "auto f() {\n    std::vector<int> x;\n    auto p = x.data();\n    return p;\n}" $)
2177:
2178:
2179:
2180: ;
2181: $if $(@expr1073743924 $!@expr1073743925 $assertEquals $(@expr1073743926 "cppcheck-2.8/test/testautovariables.cpp" $, 2181 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2182:
2183: ; }
2184:
2185: $check_ $(@expr1073743929 "cppcheck-2.8/test/testautovariables.cpp" $, 2185 $, "auto f() {\n    std::vector<int> x;\n    auto p = &x[0];\n    return p;\n}" $)
2186:
2187:
2188:
2189: ;
2190: $if $(@expr1073743930 $!@expr1073743931 $assertEquals $(@expr1073743932 "cppcheck-2.8/test/testautovariables.cpp" $, 2190 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2191:
2192: ; }
2193:
2194: $check_ $(@expr1073743935 "cppcheck-2.8/test/testautovariables.cpp" $, 2194 $, "struct A { int foo; };\nint* f(std::vector<A> v) {\n    auto it = v.begin();\n    return &it->foo;\n}" $)
2195:
2196:
2197:
2198: ;
2199: $if $(@expr1073743936 $!@expr1073743937 $assertEquals $(@expr1073743938 "cppcheck-2.8/test/testautovariables.cpp" $, 2199 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2200:
2201: ; }
2202:
2203: $check_ $(@expr1073743941 "cppcheck-2.8/test/testautovariables.cpp" $, 2203 $, "auto f(std::vector<int> x) {\n    auto it = x.begin();\n    return it;\n}" $)
2204:
2205:
2206: ;
2207: $if $(@expr1073743942 $!@expr1073743943 $assertEquals $(@expr1073743944 "cppcheck-2.8/test/testautovariables.cpp" $, 2207 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2208:
2209: $check_ $(@expr1073743947 "cppcheck-2.8/test/testautovariables.cpp" $, 2209 $, "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it);\n}" $)
2210:
2211:
2212:
2213: ;
2214: $if $(@expr1073743948 $!@expr1073743949 $assertEquals $(@expr1073743950 "cppcheck-2.8/test/testautovariables.cpp" $, 2214 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2215:
2216: ; }
2217:
2218: $check_ $(@expr1073743953 "cppcheck-2.8/test/testautovariables.cpp" $, 2218 $, "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it + 1;\n}" $)
2219:
2220:
2221:
2222: ;
2223: $if $(@expr1073743954 $!@expr1073743955 $assertEquals $(@expr1073743956 "cppcheck-2.8/test/testautovariables.cpp" $, 2223 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2224:
2225: ; }
2226:
2227: $check_ $(@expr1073743959 "cppcheck-2.8/test/testautovariables.cpp" $, 2227 $, "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it + 1);\n}" $)
2228:
2229:
2230:
2231: ;
2232: $if $(@expr1073743960 $!@expr1073743961 $assertEquals $(@expr1073743962 "cppcheck-2.8/test/testautovariables.cpp" $, 2232 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2233:
2234: ; }
2235:
2236: $check_ $(@expr1073743965 "cppcheck-2.8/test/testautovariables.cpp" $, 2236 $, "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    return v;\n}" $)
2237:
|
2240:
2241: ;
2242: $if $(@expr1073743966 $!@expr1073743967 $assertEquals $(@expr1073743968 "cppcheck-2.8/test/testautovariables.cpp" $, 2242 $, "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2243:
2244: ; }
2245:
2246: $check_ $(@expr1073743971 "cppcheck-2.8/test/testautovariables.cpp" $, 2246 $, "std::vector<int*> f() {\n    std::vector<int*> r;\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    r.assign(v.begin(), v.end());\n    return r;\n}" $)
2247:
|
2252:
2253: ;
2254: $if $(@expr1073743972 $!@expr1073743973 $assertEquals $(@expr1073743974 "cppcheck-2.8/test/testautovariables.cpp" $, 2254 $, "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2255:
2256: ; }
2257:
2258: $check_ $(@expr1073743977 "cppcheck-2.8/test/testautovariables.cpp" $, 2258 $, "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        v.push_back(&i);\n    }\n};" $)
2259:
|
2263:
2264: ;
2265: $if $(@expr1073743978 $!@expr1073743979 $assertEquals $(@expr1073743980 "cppcheck-2.8/test/testautovariables.cpp" $, 2265 $, "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2266:
2267: ; }
2268:
2269: $check_ $(@expr1073743983 "cppcheck-2.8/test/testautovariables.cpp" $, 2269 $, "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        int * p = &i;\n        v.push_back(p);\n    }\n};" $)
2270:
|
2275:
2276: ;
2277: $if $(@expr1073743984 $!@expr1073743985 $assertEquals $(@expr1073743986 "cppcheck-2.8/test/testautovariables.cpp" $, 2277 $, "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:6]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2278:
2279: ; }
2280:
2281: $check_ $(@expr1073743989 "cppcheck-2.8/test/testautovariables.cpp" $, 2281 $, "struct A {\n    std::vector<int*> m;\n    void f() {\n        int x;\n        std::vector<int*> v;\n        v.push_back(&x);\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};" $)
2282:
|
2288:
2289: ;
2290: $if $(@expr1073743990 $!@expr1073743991 $assertEquals $(@expr1073743992 "cppcheck-2.8/test/testautovariables.cpp" $, 2290 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:7]: (error) Non-local variable 'm' will use object that points to local variable 'x'.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2291:
2292: ; }
2293:
2294: $check_ $(@expr1073743995 "cppcheck-2.8/test/testautovariables.cpp" $, 2294 $, "std::vector<int>::iterator f(std::vector<int> v) {\n    for(auto it = v.begin();it != v.end();it++) {\n        return it;\n    }\n    return {};\n}" $)
2295:
|
2298:
2299: ;
2300: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testautovariables.cpp" $, 2300 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2301:
2302: ; }
2303:
2304: $check_ $(@expr1073744001 "cppcheck-2.8/test/testautovariables.cpp" $, 2304 $, "const char * f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}" $)
2305:
2306:
2307: ;
2308: $if $(@expr1073744002 $!@expr1073744003 $assertEquals $(@expr1073744004 "cppcheck-2.8/test/testautovariables.cpp" $, 2308 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'ba' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2309:
2310: ; }
2311:
2312: $check_ $(@expr1073744007 "cppcheck-2.8/test/testautovariables.cpp" $, 2312 $, "template <class T, class K, class V>\nconst V* get_default(const T& t, const K& k, const V* v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return &it->second;\n}\nconst int* bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, &x);\n}\n" , true $)
2313:
|
2321:
2322: ;
2323: $if $(@expr1073744008 $!@expr1073744009 $assertEquals $(@expr1073744010 "cppcheck-2.8/test/testautovariables.cpp" $, 2323 $, "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error, inconclusive) Returning pointer to local variable 'x' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2324:
2325: ; }
2326:
2327: $check_ $(@expr1073744013 "cppcheck-2.8/test/testautovariables.cpp" $, 2327 $, "std::vector<int> g();\nauto f() {\n    return g().begin();\n}" $)
2328:
2329:
2330: ;
2331: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testautovariables.cpp" $, 2331 $, "[test.cpp:3] -> [test.cpp:3]: (error) Returning iterator that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2332: ; }
2333:
2334: $check_ $(@expr1073744019 "cppcheck-2.8/test/testautovariables.cpp" $, 2334 $, "std::vector<int> g();\nauto f() {\n    auto it = g().begin();\n    return it;\n}" $)
2335:
2336:
2337:
2338: ;
2339: $if $(@expr1073744020 $!@expr1073744021 $assertEquals $(@expr1073744022 "cppcheck-2.8/test/testautovariables.cpp" $, 2339 $, "[test.cpp:3] -> [test.cpp:4]: (error) Returning iterator that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2340: ; }
2341:
2342: $check_ $(@expr1073744025 "cppcheck-2.8/test/testautovariables.cpp" $, 2342 $, "std::vector<int> g();\nint& f() {\n    return *g().begin();\n}" $)
2343:
2344:
2345: ;
2346: $if $(@expr1073744026 $!@expr1073744027 $assertEquals $(@expr1073744028 "cppcheck-2.8/test/testautovariables.cpp" $, 2346 $, "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2347:
2348: $check_ $(@expr1073744031 "cppcheck-2.8/test/testautovariables.cpp" $, 2348 $, "struct A {\n    std::vector<std::string> v;\n    void f() {\n        char s[3];\n        v.push_back(s);\n    }\n};" $)
2349:
|
2353:
2354: ;
2355: $if $(@expr1073744032 $!@expr1073744033 $assertEquals $(@expr1073744034 "cppcheck-2.8/test/testautovariables.cpp" $, 2355 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2356:
2357: $check_ $(@expr1073744037 "cppcheck-2.8/test/testautovariables.cpp" $, 2357 $, "std::vector<std::string> f() {\n    const char * s = \"hello\";\n    std::vector<std::string> v;\n    v.push_back(s);\n    return v;\n}" $)
2358:
|
2361:
2362: ;
2363: $if $(@expr1073744038 $!@expr1073744039 $assertEquals $(@expr1073744040 "cppcheck-2.8/test/testautovariables.cpp" $, 2363 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2364:
2365: $check_ $(@expr1073744043 "cppcheck-2.8/test/testautovariables.cpp" $, 2365 $, "auto f() {\n  static std::vector<int> x;\n  return x.begin();\n}" $)
2366:
2367:
2368: ;
2369: $if $(@expr1073744044 $!@expr1073744045 $assertEquals $(@expr1073744046 "cppcheck-2.8/test/testautovariables.cpp" $, 2369 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2370:
2371: $check_ $(@expr1073744049 "cppcheck-2.8/test/testautovariables.cpp" $, 2371 $, "std::string g() {\n    std::vector<char> v;\n    return v.data();\n}" $)
2372:
2373:
2374: ;
2375: $if $(@expr1073744050 $!@expr1073744051 $assertEquals $(@expr1073744052 "cppcheck-2.8/test/testautovariables.cpp" $, 2375 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2376:
2377: $check_ $(@expr1073744055 "cppcheck-2.8/test/testautovariables.cpp" $, 2377 $, "std::vector<int>::iterator f(std::vector<int>* v) {\n    return v->begin();\n}" $)
2378:
2379: ;
2380: $if $(@expr1073744056 $!@expr1073744057 $assertEquals $(@expr1073744058 "cppcheck-2.8/test/testautovariables.cpp" $, 2380 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2381:
2382: $check_ $(@expr1073744061 "cppcheck-2.8/test/testautovariables.cpp" $, 2382 $, "std::vector<int>::iterator f(std::vector<int>* v) {\n    std::vector<int>* v = new std::vector<int>();\n    return v->begin();\n}" $)
2383:
2384:
2385: ;
2386: $if $(@expr1073744062 $!@expr1073744063 $assertEquals $(@expr1073744064 "cppcheck-2.8/test/testautovariables.cpp" $, 2386 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2387:
2388: $check_ $(@expr1073744067 "cppcheck-2.8/test/testautovariables.cpp" $, 2388 $, "int f(std::vector<int> v) {\n    return *v.begin();\n}" $)
2389:
2390: ;
2391: $if $(@expr1073744068 $!@expr1073744069 $assertEquals $(@expr1073744070 "cppcheck-2.8/test/testautovariables.cpp" $, 2391 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2392:
2393: $check_ $(@expr1073744073 "cppcheck-2.8/test/testautovariables.cpp" $, 2393 $, "int f(std::vector<int> v) {\n    return v.end() - v.begin();\n}" $)
2394:
2395: ;
2396: $if $(@expr1073744074 $!@expr1073744075 $assertEquals $(@expr1073744076 "cppcheck-2.8/test/testautovariables.cpp" $, 2396 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2397:
2398: $check_ $(@expr1073744079 "cppcheck-2.8/test/testautovariables.cpp" $, 2398 $, "auto g() {\n    std::vector<char> v;\n    return {v, [v]() { return v.data(); }};\n}" $)
2399:
2400:
2401: ;
2402: $if $(@expr1073744080 $!@expr1073744081 $assertEquals $(@expr1073744082 "cppcheck-2.8/test/testautovariables.cpp" $, 2402 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2403:
2404: $check_ $(@expr1073744085 "cppcheck-2.8/test/testautovariables.cpp" $, 2404 $, "template<class F>\nvoid g(F);\nauto f() {\n    std::vector<char> v;\n    return g([&]() { return v.data(); });\n}" $)
2405:
|
2408:
2409: ;
2410: $if $(@expr1073744086 $!@expr1073744087 $assertEquals $(@expr1073744088 "cppcheck-2.8/test/testautovariables.cpp" $, 2410 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2411:
2412: $check_ $(@expr1073744091 "cppcheck-2.8/test/testautovariables.cpp" $, 2412 $, "std::vector<int> g();\nstruct A {\n    std::vector<int> m;\n    void f() {\n        std::vector<int> v = g();\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};" $)
2413:
|
2418:
2419: ;
2420: $if $(@expr1073744092 $!@expr1073744093 $assertEquals $(@expr1073744094 "cppcheck-2.8/test/testautovariables.cpp" $, 2420 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2421:
2422: $check_ $(@expr1073744097 "cppcheck-2.8/test/testautovariables.cpp" $, 2422 $, "void f(bool b) {\n    std::vector<int> v = {1};\n    if (b) {\n        int a[] = {0};\n        v.insert(a, a+1);\n    }\n    return v.back() == 0;\n}" $)
2423:
|
2428:
2429: ;
2430: $if $(@expr1073744098 $!@expr1073744099 $assertEquals $(@expr1073744100 "cppcheck-2.8/test/testautovariables.cpp" $, 2430 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2431:
2432: $check_ $(@expr1073744103 "cppcheck-2.8/test/testautovariables.cpp" $, 2432 $, "class A {\n    int f( P p ) {\n        std::vector< S > maps;\n        m2.insert( m1.begin(), m1.end() );\n    }\n    struct B {};\n    std::map< S, B > m1;\n    std::map< S, B > m2;\n};" $)
2433:
|
2439:
2440: ;
2441: $if $(@expr1073744104 $!@expr1073744105 $assertEquals $(@expr1073744106 "cppcheck-2.8/test/testautovariables.cpp" $, 2441 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2442:
2443: $check_ $(@expr1073744109 "cppcheck-2.8/test/testautovariables.cpp" $, 2443 $, "struct A {\n    std::vector<int*> v;\n    int x;\n    void f() {\n        v.push_back(&x);\n    }\n};" $)
2444:
|
2448:
2449: ;
2450: $if $(@expr1073744110 $!@expr1073744111 $assertEquals $(@expr1073744112 "cppcheck-2.8/test/testautovariables.cpp" $, 2450 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2451:
2452: $check_ $(@expr1073744115 "cppcheck-2.8/test/testautovariables.cpp" $, 2452 $, "size_t f(const std::string& x) {\n    std::string y = \"x\";\n    return y.find(x);\n}" $)
2453:
2454:
2455: ;
2456: $if $(@expr1073744116 $!@expr1073744117 $assertEquals $(@expr1073744118 "cppcheck-2.8/test/testautovariables.cpp" $, 2456 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2457:
2458: $check_ $(@expr1073744121 "cppcheck-2.8/test/testautovariables.cpp" $, 2458 $, "std::string* f();\nconst char* g() {\n    std::string* var = f();\n    return var->c_str();\n}" $)
2459:
2460:
2461:
2462: ;
2463: $if $(@expr1073744122 $!@expr1073744123 $assertEquals $(@expr1073744124 "cppcheck-2.8/test/testautovariables.cpp" $, 2463 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2464:
2465: $check_ $(@expr1073744127 "cppcheck-2.8/test/testautovariables.cpp" $, 2465 $, "std::string f() {\n    std::vector<char> data{};\n    data.push_back('a');\n    return std::string{ data.data(), data.size() };\n}" $)
2466:
2467:
2468:
2469: ;
2470: $if $(@expr1073744128 $!@expr1073744129 $assertEquals $(@expr1073744130 "cppcheck-2.8/test/testautovariables.cpp" $, 2470 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2471:
2472: $check_ $(@expr1073744133 "cppcheck-2.8/test/testautovariables.cpp" $, 2472 $, "std::vector<char*> f() {\n    char a = 0;\n    return std::vector<char*>{&a};\n}" $)
2473:
2474:
2475: ;
2476: $if $(@expr1073744134 $!@expr1073744135 $assertEquals $(@expr1073744136 "cppcheck-2.8/test/testautovariables.cpp" $, 2476 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2477:
2478: $check_ $(@expr1073744139 "cppcheck-2.8/test/testautovariables.cpp" $, 2478 $, "std::vector<int>* g();\nint& f() {\n    auto* p = g();\n    return p->front();\n}\n" $)
2479:
2480:
2481:
2482: ;
2483: $if $(@expr1073744140 $!@expr1073744141 $assertEquals $(@expr1073744142 "cppcheck-2.8/test/testautovariables.cpp" $, 2483 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2484:
2485: $check_ $(@expr1073744145 "cppcheck-2.8/test/testautovariables.cpp" $, 2485 $, "std::vector<std::vector<int>> g();\nvoid f() {\n    for(auto& x:g())\n        std::sort(x.begin(), x.end());\n}\n" $)
2486:
2487:
2488:
2489: ;
2490: $if $(@expr1073744146 $!@expr1073744147 $assertEquals $(@expr1073744148 "cppcheck-2.8/test/testautovariables.cpp" $, 2490 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2491:
2492: $check_ $(@expr1073744151 "cppcheck-2.8/test/testautovariables.cpp" $, 2492 $, "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        int i = 0;\n        add(&i);\n    }\n};\n" $)
2493:
|
2500:
2501: ;
2502: $if $(@expr1073744152 $!@expr1073744153 $assertEquals $(@expr1073744154 "cppcheck-2.8/test/testautovariables.cpp" $, 2502 $, "[test.cpp:8] -> [test.cpp:8] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:4]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return
2503:
2504: ; }
2505:
2506: $check_ $(@expr1073744157 "cppcheck-2.8/test/testautovariables.cpp" $, 2506 $, "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n};\nvoid f() {\n    A a;\n    int i = 0;\n    a.add(&i);\n}\n" $)
2507:
|
2515:
2516: ;
2517: $if $(@expr1073744158 $!@expr1073744159 $assertEquals $(@expr1073744160 "cppcheck-2.8/test/testautovariables.cpp" $, 2517 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2518:
2519: $check_ $(@expr1073744163 "cppcheck-2.8/test/testautovariables.cpp" $, 2519 $, "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        A a;\n        int i = 0;\n        a.add(&i);\n    }\n};\n" $)
2520:
|
2528:
2529: ;
2530: $if $(@expr1073744164 $!@expr1073744165 $assertEquals $(@expr1073744166 "cppcheck-2.8/test/testautovariables.cpp" $, 2530 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2531:
2532: $check_ $(@expr1073744169 "cppcheck-2.8/test/testautovariables.cpp" $, 2532 $, "int f() {\n    int i;\n    {\n        std::vector<int> vec;\n        const auto iter = vec.begin();\n        i = (int)(iter - vec.begin());\n    }\n    return i;\n}\n" $)
2533:
|
2539:
2540: ;
2541: $if $(@expr1073744170 $!@expr1073744171 $assertEquals $(@expr1073744172 "cppcheck-2.8/test/testautovariables.cpp" $, 2541 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2542:
2543: $check_ $(@expr1073744175 "cppcheck-2.8/test/testautovariables.cpp" $, 2543 $, "int* get(std::vector<int>& container) {\n    Sequence seq(container);\n    for (auto& r : seq) {\n        return &r;\n    }\n    return &*seq.begin();\n}\n" $)
2544:
|
2548:
2549: ;
2550: $if $(@expr1073744176 $!@expr1073744177 $assertEquals $(@expr1073744178 "cppcheck-2.8/test/testautovariables.cpp" $, 2550 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2551:
2552: $check_ $(@expr1073744181 "cppcheck-2.8/test/testautovariables.cpp" $, 2552 $, "std::string f(std::string Str, int first, int last) {\n    return { Str.begin() + first, Str.begin() + last + 1 };\n}\n" , true $)
2553:
2554:
2555: ;
2556: $if $(@expr1073744182 $!@expr1073744183 $assertEquals $(@expr1073744184 "cppcheck-2.8/test/testautovariables.cpp" $, 2556 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2557:
2558: $check_ $(@expr1073744187 "cppcheck-2.8/test/testautovariables.cpp" $, 2558 $, "std::string f(std::string s) {\n    std::string r = { s.begin(), s.end() };\n    return r;\n}\n" , true $)
2559:
2560:
2561:
2562: ;
2563: $if $(@expr1073744188 $!@expr1073744189 $assertEquals $(@expr1073744190 "cppcheck-2.8/test/testautovariables.cpp" $, 2563 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2564:
2565: $check_ $(@expr1073744193 "cppcheck-2.8/test/testautovariables.cpp" $, 2565 $, "struct A {\n    std::vector<std::unique_ptr<int>> mA;\n    void f(std::unique_ptr<int> a) {\n        auto x = a.get();\n        mA.push_back(std::move(a));\n    }\n};\n" $)
2566:
|
2570:
2571: ;
2572: $if $(@expr1073744194 $!@expr1073744195 $assertEquals $(@expr1073744196 "cppcheck-2.8/test/testautovariables.cpp" $, 2572 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2573:
2574: $check_ $(@expr1073744199 "cppcheck-2.8/test/testautovariables.cpp" $, 2574 $, "struct A {\n    std::map<std::string, int> m;\n    int* f(std::string s) {\n        auto r = m.emplace(name, name);\n        return &(r.first->second);\n    }\n};\n" $)
2575:
|
2579:
2580: ;
2581: $if $(@expr1073744200 $!@expr1073744201 $assertEquals $(@expr1073744202 "cppcheck-2.8/test/testautovariables.cpp" $, 2581 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2582:
2583: $check_ $(@expr1073744205 "cppcheck-2.8/test/testautovariables.cpp" $, 2583 $, "void f() {\n	std::queue<int> q;\n	auto& h = q.emplace();\n    h = 1;\n}\n" $)
2584:
2585:
2586:
2587: ;
2588: $if $(@expr1073744206 $!@expr1073744207 $assertEquals $(@expr1073744208 "cppcheck-2.8/test/testautovariables.cpp" $, 2588 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2589:
2590: $check_ $(@expr1073744211 "cppcheck-2.8/test/testautovariables.cpp" $, 2590 $, "std::string f(std::string s) {\n    std::string ss = (\":\" + s).c_str();\n    return ss;\n}\n" $)
2591:
2592:
2593: ;
2594: $if $(@expr1073744212 $!@expr1073744213 $assertEquals $(@expr1073744214 "cppcheck-2.8/test/testautovariables.cpp" $, 2594 $, "" $, errout@var100 .@expr2091 str (@expr2092 ) $) $) { $return ; }
2595: }
2596:
2597: void danglingLifetimeContainerView ( )
2598: {
2599: $check_ $(@expr1073744217 "cppcheck-2.8/test/testautovariables.cpp" $, 2599 $, "std::string_view f() {\n    std::string s = \"\";\n    return s;\n}\n" $)
2600:
2601:
2602: ;
2603: $if $(@expr1073744218 $!@expr1073744219 $assertEquals $(@expr1073744220 "cppcheck-2.8/test/testautovariables.cpp" $, 2603 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2604:
2605: ; }
2606:
2607: $check_ $(@expr1073744223 "cppcheck-2.8/test/testautovariables.cpp" $, 2607 $, "std::string_view f() {\n    std::string s = \"\";\n    std::string_view sv = s;\n    return sv;\n}\n" $)
2608:
2609:
2610:
2611: ;
2612: $if $(@expr1073744224 $!@expr1073744225 $assertEquals $(@expr1073744226 "cppcheck-2.8/test/testautovariables.cpp" $, 2612 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2613:
2614: ; }
2615:
2616: $check_ $(@expr1073744229 "cppcheck-2.8/test/testautovariables.cpp" $, 2616 $, "std::string_view f() {\n    std::string s = \"\";\n    return std::string_view{s};\n}\n" $)
2617:
2618:
2619: ;
2620: $if $(@expr1073744230 $!@expr1073744231 $assertEquals $(@expr1073744232 "cppcheck-2.8/test/testautovariables.cpp" $, 2620 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2621:
2622: ; }
2623:
2624: $check_ $(@expr1073744235 "cppcheck-2.8/test/testautovariables.cpp" $, 2624 $, "std::string_view f(std::string_view s) {\n    return s;\n}\nstd::string_view g() {\n    std::string s = \"\";\n    return f(s);\n}\n" $)
2625:
|
2629:
2630: ;
2631: $if $(@expr1073744236 $!@expr1073744237 $assertEquals $(@expr1073744238 "cppcheck-2.8/test/testautovariables.cpp" $, 2631 $, "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2632:
2633: ; }
2634:
2635: $check_ $(@expr1073744241 "cppcheck-2.8/test/testautovariables.cpp" $, 2635 $, "const char * f() {\n    std::string s;\n    std::string_view sv = s;\n    return sv.begin();\n}\n" $)
2636:
2637:
2638:
2639: ;
2640: $if $(@expr1073744242 $!@expr1073744243 $assertEquals $(@expr1073744244 "cppcheck-2.8/test/testautovariables.cpp" $, 2640 $, "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2641:
2642: ; }
2643:
2644: $check_ $(@expr1073744247 "cppcheck-2.8/test/testautovariables.cpp" $, 2644 $, "const char * f() {\n    std::string s;\n    return std::string_view{s}.begin();\n}\n" $)
2645:
2646:
2647: ;
2648: $if $(@expr1073744248 $!@expr1073744249 $assertEquals $(@expr1073744250 "cppcheck-2.8/test/testautovariables.cpp" $, 2648 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2649:
2650: ; }
2651:
2652: $check_ $(@expr1073744253 "cppcheck-2.8/test/testautovariables.cpp" $, 2652 $, "const char * f() {\n    std::string s;\n    return std::string_view(s).begin();\n}\n" $)
2653:
2654:
2655: ;
2656: $todoAssertEquals $(@expr1073744254 "cppcheck-2.8/test/testautovariables.cpp" $, 2656 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" $, "" $, errout@var100 .@expr2397 str (@expr2398 ) $)
2657:
2658:
2659: ;
2660:
2661: $check_ $(@expr1073744257 "cppcheck-2.8/test/testautovariables.cpp" $, 2661 $, "const char * f(std::string_view sv) {\n    return sv.begin();\n}\n" $)
2662:
2663: ;
2664: $if $(@expr1073744258 $!@expr1073744259 $assertEquals $(@expr1073744260 "cppcheck-2.8/test/testautovariables.cpp" $, 2664 $, "" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return ; }
2665:
2666: $check_ $(@expr1073744263 "cppcheck-2.8/test/testautovariables.cpp" $, 2666 $, "const char * f(std::string s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n" $)
2667:
2668:
2669: ;
2670: $if $(@expr1073744264 $!@expr1073744265 $assertEquals $(@expr1073744266 "cppcheck-2.8/test/testautovariables.cpp" $, 2670 $, "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2671:
2672: ; }
2673:
2674: $check_ $(@expr1073744269 "cppcheck-2.8/test/testautovariables.cpp" $, 2674 $, "std::string_view f(std::string s) {\n    return s;\n}\n" $)
2675:
2676: ;
2677: $if $(@expr1073744270 $!@expr1073744271 $assertEquals $(@expr1073744272 "cppcheck-2.8/test/testautovariables.cpp" $, 2677 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return
2678:
2679: ; }
2680:
2681: $check_ $(@expr1073744275 "cppcheck-2.8/test/testautovariables.cpp" $, 2681 $, "const char * f(const std::string& s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n" $)
2682:
2683:
2684: ;
2685: $if $(@expr1073744276 $!@expr1073744277 $assertEquals $(@expr1073744278 "cppcheck-2.8/test/testautovariables.cpp" $, 2685 $, "" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return ; }
2686:
2687: $check_ $(@expr1073744281 "cppcheck-2.8/test/testautovariables.cpp" $, 2687 $, "std::string_view f(const std::string_view& sv) {\n    return sv;\n}\n" $)
2688:
2689: ;
2690: $if $(@expr1073744282 $!@expr1073744283 $assertEquals $(@expr1073744284 "cppcheck-2.8/test/testautovariables.cpp" $, 2690 $, "" $, errout@var100 .@expr2397 str (@expr2398 ) $) $) { $return ; }
2691: }
2692:
2693: void danglingLifetimeUniquePtr ( )
2694: {
2695: $check_ $(@expr1073744287 "cppcheck-2.8/test/testautovariables.cpp" $, 2695 $, "int* f(std::unique_ptr<int> p) {\n    int * rp = p.get();\n    return rp;\n}\n" $)
2696:
2697:
2698: ;
2699: $if $(@expr1073744288 $!@expr1073744289 $assertEquals $(@expr1073744290 "cppcheck-2.8/test/testautovariables.cpp" $, 2699 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'p' that will be invalid when returning.\n" $, errout@var100 .@expr1073744291 str (@expr1073744292 ) $) $) { $return
2700:
2701: ; }
2702: }
2703: void danglingLifetime ( ) {
2704: $check_ $(@expr1073744293 "cppcheck-2.8/test/testautovariables.cpp" $, 2704 $, "auto f() {\n    std::vector<int> a;\n    auto it = a.begin();\n    return [=](){ return it; };\n}" $)
2705:
2706:
2707:
2708: ;
2709: $if $(@expr1073744294 $!@expr1073744295 $assertEquals $(@expr1073744296 "cppcheck-2.8/test/testautovariables.cpp" $, 2709 $, "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2710:
2711: $check_ $(@expr1073744299 "cppcheck-2.8/test/testautovariables.cpp" $, 2711 $, "auto f(std::vector<int> a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}" $)
2712:
2713:
2714: ;
2715: $if $(@expr1073744300 $!@expr1073744301 $assertEquals $(@expr1073744302 "cppcheck-2.8/test/testautovariables.cpp" $, 2715 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2716:
2717: $check_ $(@expr1073744305 "cppcheck-2.8/test/testautovariables.cpp" $, 2717 $, "struct e {};\ne * j() {\n    e c[20];\n    return c;\n}" $)
2718:
2719:
2720:
2721: ;
2722: $if $(@expr1073744306 $!@expr1073744307 $assertEquals $(@expr1073744308 "cppcheck-2.8/test/testautovariables.cpp" $, 2722 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'c' that will be invalid when returning.\n" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return
2723:
2724: ; }
2725:
2726: $check_ $(@expr1073744311 "cppcheck-2.8/test/testautovariables.cpp" $, 2726 $, "auto f(std::vector<int>& a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}" $)
2727:
2728:
2729: ;
2730: $if $(@expr1073744312 $!@expr1073744313 $assertEquals $(@expr1073744314 "cppcheck-2.8/test/testautovariables.cpp" $, 2730 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2731:
2732: $check_ $(@expr1073744317 "cppcheck-2.8/test/testautovariables.cpp" $, 2732 $, "int * f(int a[]) {\n    return a;\n}" $)
2733:
2734: ;
2735: $if $(@expr1073744318 $!@expr1073744319 $assertEquals $(@expr1073744320 "cppcheck-2.8/test/testautovariables.cpp" $, 2735 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2736:
2737: $check_ $(@expr1073744323 "cppcheck-2.8/test/testautovariables.cpp" $, 2737 $, "void f() {\n    struct b {\n        uint32_t f[6];\n    } d;\n    uint32_t *a = d.f;\n}" $)
2738:
|
2741:
2742: ;
2743: $if $(@expr1073744324 $!@expr1073744325 $assertEquals $(@expr1073744326 "cppcheck-2.8/test/testautovariables.cpp" $, 2743 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2744:
2745:
2746: $check_ $(@expr1073744329 "cppcheck-2.8/test/testautovariables.cpp" $, 2746 $, "std::array<char, 1> f() {\n    std::array<char, 1> x;\n    return x;\n}" $)
2747:
2748:
2749: ;
2750: $if $(@expr1073744330 $!@expr1073744331 $assertEquals $(@expr1073744332 "cppcheck-2.8/test/testautovariables.cpp" $, 2750 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2751:
2752:
2753: $check_ $(@expr1073744335 "cppcheck-2.8/test/testautovariables.cpp" $, 2753 $, "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}" $)
2754:
2755:
2756:
2757: ;
2758: $if $(@expr1073744336 $!@expr1073744337 $assertEquals $(@expr1073744338 "cppcheck-2.8/test/testautovariables.cpp" $, 2758 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2759:
2760:
2761: $check_ $(@expr1073744341 "cppcheck-2.8/test/testautovariables.cpp" $, 2761 $, "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}" $)
2762:
2763:
2764:
2765: ;
2766: $if $(@expr1073744342 $!@expr1073744343 $assertEquals $(@expr1073744344 "cppcheck-2.8/test/testautovariables.cpp" $, 2766 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2767:
2768:
2769: $check_ $(@expr1073744347 "cppcheck-2.8/test/testautovariables.cpp" $, 2769 $, "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}" $)
2770:
2771:
2772:
2773: ;
2774: $if $(@expr1073744348 $!@expr1073744349 $assertEquals $(@expr1073744350 "cppcheck-2.8/test/testautovariables.cpp" $, 2774 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2775:
2776:
2777: $check_ $(@expr1073744353 "cppcheck-2.8/test/testautovariables.cpp" $, 2777 $, "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}" $)
2778:
2779:
2780:
2781: ;
2782: $if $(@expr1073744354 $!@expr1073744355 $assertEquals $(@expr1073744356 "cppcheck-2.8/test/testautovariables.cpp" $, 2782 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2783:
2784:
2785: $check_ $(@expr1073744359 "cppcheck-2.8/test/testautovariables.cpp" $, 2785 $, "struct a {\n  void operator()(b c) override {\n    d(c, [&] { c->e });\n  }\n};" $)
2786:
2787:
2788:
2789: ;
2790: $if $(@expr1073744360 $!@expr1073744361 $assertEquals $(@expr1073744362 "cppcheck-2.8/test/testautovariables.cpp" $, 2790 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2791:
2792: $check_ $(@expr1073744365 "cppcheck-2.8/test/testautovariables.cpp" $, 2792 $, "struct a {\n  void operator()(b c) override {\n    d(c, [=] { c->e });\n  }\n};" $)
2793:
2794:
2795:
2796: ;
2797: $if $(@expr1073744366 $!@expr1073744367 $assertEquals $(@expr1073744368 "cppcheck-2.8/test/testautovariables.cpp" $, 2797 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2798:
2799: $check_ $(@expr1073744371 "cppcheck-2.8/test/testautovariables.cpp" $, 2799 $, "struct a {\n    a(char* b) {}\n};\na f() {\n    char c[20];\n    return c;\n}" $)
2800:
|
2804:
2805: ;
2806: $if $(@expr1073744372 $!@expr1073744373 $assertEquals $(@expr1073744374 "cppcheck-2.8/test/testautovariables.cpp" $, 2806 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2807:
2808: $check_ $(@expr1073744377 "cppcheck-2.8/test/testautovariables.cpp" $, 2808 $, "struct a {\n    a(char* b) {}\n};\na g() {\n    char c[20];\n    a d = c;\n    return d;\n}" $)
2809:
|
2814:
2815: ;
2816: $if $(@expr1073744378 $!@expr1073744379 $assertEquals $(@expr1073744380 "cppcheck-2.8/test/testautovariables.cpp" $, 2816 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2817:
2818: $check_ $(@expr1073744383 "cppcheck-2.8/test/testautovariables.cpp" $, 2818 $, "void f() {\n    struct a {\n        std::vector<int> v;\n        auto g() { return v.end(); }\n    };\n}" $)
2819:
|
2822:
2823: ;
2824: $if $(@expr1073744384 $!@expr1073744385 $assertEquals $(@expr1073744386 "cppcheck-2.8/test/testautovariables.cpp" $, 2824 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2825:
2826: $check_ $(@expr1073744389 "cppcheck-2.8/test/testautovariables.cpp" $, 2826 $, "int * f(std::vector<int>& v) {\n    for(int & x : v)\n        return &x;\n    return nullptr;\n}" $)
2827:
2828:
2829:
2830: ;
2831: $if $(@expr1073744390 $!@expr1073744391 $assertEquals $(@expr1073744392 "cppcheck-2.8/test/testautovariables.cpp" $, 2831 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2832:
2833:
2834: $check_ $(@expr1073744395 "cppcheck-2.8/test/testautovariables.cpp" $, 2834 $, "struct S {\n   void f();\n   std::string m;\n}\nvoid S::f() {\n    char buf[1024];\n    const char* msg = buf;\n    m = msg;\n}" $)
2835:
|
2841:
2842: ;
2843: $if $(@expr1073744396 $!@expr1073744397 $assertEquals $(@expr1073744398 "cppcheck-2.8/test/testautovariables.cpp" $, 2843 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2844:
2845:
2846: $check_ $(@expr1073744401 "cppcheck-2.8/test/testautovariables.cpp" $, 2846 $, "int* f() {\n    struct a { int m; };\n    static a b{0};\n    return &b.m;\n}" $)
2847:
2848:
2849:
2850: ;
2851: $if $(@expr1073744402 $!@expr1073744403 $assertEquals $(@expr1073744404 "cppcheck-2.8/test/testautovariables.cpp" $, 2851 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2852:
2853:
2854: $check_ $(@expr1073744407 "cppcheck-2.8/test/testautovariables.cpp" $, 2854 $, "int *ptr;\nvoid foo(int arr[]) {\n    ptr = &arr[2];\n}" $)
2855:
2856:
2857: ;
2858: $if $(@expr1073744408 $!@expr1073744409 $assertEquals $(@expr1073744410 "cppcheck-2.8/test/testautovariables.cpp" $, 2858 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2859:
2860:
2861: $check_ $(@expr1073744413 "cppcheck-2.8/test/testautovariables.cpp" $, 2861 $, "struct Fred {\n    std::string s;\n};\nconst Fred &getFred();\nconst char * f() {\n  const Fred &fred = getFred();\n  return fred.s.c_str();\n}" $)
2862:
|
2867:
2868: ;
2869: $if $(@expr1073744414 $!@expr1073744415 $assertEquals $(@expr1073744416 "cppcheck-2.8/test/testautovariables.cpp" $, 2869 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2870:
2871:
2872: $check_ $(@expr1073744419 "cppcheck-2.8/test/testautovariables.cpp" $, 2872 $, "struct A {\n    int* x;\n};\nint* f(int i, std::vector<A>& v) {\n    A& y = v[i];\n    return &y.x[i];\n}" $)
2873:
|
2877:
2878: ;
2879: $if $(@expr1073744420 $!@expr1073744421 $assertEquals $(@expr1073744422 "cppcheck-2.8/test/testautovariables.cpp" $, 2879 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2880:
2881:
2882: $check_ $(@expr1073744425 "cppcheck-2.8/test/testautovariables.cpp" $, 2882 $, "std::string f(const char *str) {\n    char value[256];\n    return value;\n}" $)
2883:
2884:
2885: ;
2886: $if $(@expr1073744426 $!@expr1073744427 $assertEquals $(@expr1073744428 "cppcheck-2.8/test/testautovariables.cpp" $, 2886 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2887:
2888:
2889: $check_ $(@expr1073744431 "cppcheck-2.8/test/testautovariables.cpp" $, 2889 $, "class C {\n  std::string f(const char*);\n};\nstd::string C::f(const char*) {\n  const char data[] = \"x\";\n  return data;\n}\n" $)
2890:
|
2894:
2895: ;
2896: $if $(@expr1073744432 $!@expr1073744433 $assertEquals $(@expr1073744434 "cppcheck-2.8/test/testautovariables.cpp" $, 2896 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2897:
2898:
2899: $check_ $(@expr1073744437 "cppcheck-2.8/test/testautovariables.cpp" $, 2899 $, "struct A {\n    std::vector<int> v;\n    void f(std::vector<int> w) {\n        v = std::move(w);\n    }\n    void g(std::vector<int> w) {\n        f(std::move(w));\n    }\n};\n" $)
2900:
|
2906:
2907: ;
2908: $if $(@expr1073744438 $!@expr1073744439 $assertEquals $(@expr1073744440 "cppcheck-2.8/test/testautovariables.cpp" $, 2908 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2909:
2910:
2911: $check_ $(@expr1073744443 "cppcheck-2.8/test/testautovariables.cpp" $, 2911 $, "int* foo() {\n  int& x = getX();\n  return &x;\n}\n" $)
2912:
2913:
2914: ;
2915: $if $(@expr1073744444 $!@expr1073744445 $assertEquals $(@expr1073744446 "cppcheck-2.8/test/testautovariables.cpp" $, 2915 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2916: $check_ $(@expr1073744449 "cppcheck-2.8/test/testautovariables.cpp" $, 2916 $, "struct C {\n  int* m_x;\n  void foo() {\n    const int& x = getX();\n    m_x = &x;\n  }\n}\n" $)
2917:
|
2921:
2922: ;
2923: $if $(@expr1073744450 $!@expr1073744451 $assertEquals $(@expr1073744452 "cppcheck-2.8/test/testautovariables.cpp" $, 2923 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2924:
2925:
2926: $check_ $(@expr1073744455 "cppcheck-2.8/test/testautovariables.cpp" $, 2926 $, "struct a {\n    int b{};\n};\nstruct c {\n    int* c{};\n    a* d{};\n};\na* f();\nc g() {\n    c e;\n    e.d = f();\n    if (e.d)\n        e.c = &e.d->b;\n    return e;\n}\n" $)
2927:
|
2939:
2940: ;
2941: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testautovariables.cpp" $, 2941 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2942:
2943:
2944: $check_ $(@expr1073744461 "cppcheck-2.8/test/testautovariables.cpp" $, 2944 $, "struct A {\n  std::string key;\n  const char *value;\n};\nconst char *f(const std::string &key, const std::vector<A> &lookup) {\n  const auto &entry =\n      std::find_if(lookup.begin(), lookup.end(),\n                   [key](const auto &v) { return v.key == key; });\n  return (entry == lookup.end()) ? \"\" : entry->value;\n}\n" $)
2945:
|
2952:
2953: ;
2954: $if $(@expr1073744462 $!@expr1073744463 $assertEquals $(@expr1073744464 "cppcheck-2.8/test/testautovariables.cpp" $, 2954 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2955:
2956:
2957: $check_ $(@expr1073744467 "cppcheck-2.8/test/testautovariables.cpp" $, 2957 $, "struct Base {\n    virtual auto get() -> int & = 0;\n};\nstruct A : public Base {\n    int z = 42;\n    auto get() -> int & override { return z; }\n    auto getMore() -> int & { return get(); }\n};\n" $)
2958:
|
2963:
2964: ;
2965: $if $(@expr1073744468 $!@expr1073744469 $assertEquals $(@expr1073744470 "cppcheck-2.8/test/testautovariables.cpp" $, 2965 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2966:
2967:
2968: $check_ $(@expr1073744473 "cppcheck-2.8/test/testautovariables.cpp" $, 2968 $, "struct Data {\n    int x=0;\n    int y=0;\n};\nstruct MoreData {\n    Data *data1;\n};\nstruct Fred {\n    Fred() {\n        Data data;\n        mMoreData.data1 = &data;\n    }\n    MoreData mMoreData;\n};\n" $)
2969:
|
2980:
2981: ;
2982: $if $(@expr1073744474 $!@expr1073744475 $assertEquals $(@expr1073744476 "cppcheck-2.8/test/testautovariables.cpp" $, 2982 $, "[test.cpp:11] -> [test.cpp:10] -> [test.cpp:11]: (error) Non-local variable 'mMoreData.data1' will use pointer to local variable 'data'.\n" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return
2983:
2984: ; }
2985:
2986:
2987: $check_ $(@expr1073744479 "cppcheck-2.8/test/testautovariables.cpp" $, 2987 $, "template <class... Ts>\nauto f(int i, Ts&... xs) {\n    return std::tie(xs[i]...);\n}\n" $)
2988:
2989:
2990: ;
2991: $if $(@expr1073744480 $!@expr1073744481 $assertEquals $(@expr1073744482 "cppcheck-2.8/test/testautovariables.cpp" $, 2991 $, "" $, errout@var100 .@expr2473 str (@expr2474 ) $) $) { $return ; }
2992: }
2993:
2994: void danglingLifetimeFunction ( ) {
2995: $check_ $(@expr1073744485 "cppcheck-2.8/test/testautovariables.cpp" $, 2995 $, "auto f() {\n    int a;\n    return std::ref(a);\n}" $)
2996:
2997:
2998: ;
2999: $if $(@expr1073744486 $!@expr1073744487 $assertEquals $(@expr1073744488 "cppcheck-2.8/test/testautovariables.cpp" $, 2999 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return
3000:
3001: ; }
3002:
3003: $check_ $(@expr1073744491 "cppcheck-2.8/test/testautovariables.cpp" $, 3003 $, "auto f() {\n    int a;\n    return std::make_tuple(std::ref(a));\n}" $)
3004:
3005:
3006: ;
3007: $if $(@expr1073744492 $!@expr1073744493 $assertEquals $(@expr1073744494 "cppcheck-2.8/test/testautovariables.cpp" $, 3007 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return
3008:
3009: ; }
3010:
3011: $check_ $(@expr1073744497 "cppcheck-2.8/test/testautovariables.cpp" $, 3011 $, "template<class T>\nauto by_value(T x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}" $)
3012:
|
3017:
3018: ;
3019: $if $(@expr1073744498 $!@expr1073744499 $assertEquals $(@expr1073744500 "cppcheck-2.8/test/testautovariables.cpp" $, 3019 $, "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return
3020:
3021: ; }
3022:
3023: $check_ $(@expr1073744503 "cppcheck-2.8/test/testautovariables.cpp" $, 3023 $, "template<class T>\nauto by_value(const T& x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}\n" $)
3024:
|
3029:
3030: ;
3031: $if $(@expr1073744504 $!@expr1073744505 $assertEquals $(@expr1073744506 "cppcheck-2.8/test/testautovariables.cpp" $, 3031 $, "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return
3032:
3033: ; }
3034:
3035: $check_ $(@expr1073744509 "cppcheck-2.8/test/testautovariables.cpp" $, 3035 $, "auto by_ref(int& x) {\n    return [&] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}" $)
3036:
|
3040:
3041: ;
3042: $if $(@expr1073744510 $!@expr1073744511 $assertEquals $(@expr1073744512 "cppcheck-2.8/test/testautovariables.cpp" $, 3042 $, "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return
3043:
3044: ; }
3045:
3046: $check_ $(@expr1073744515 "cppcheck-2.8/test/testautovariables.cpp" $, 3046 $, "auto by_ref(const int& x) {\n    return [=] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}\n" $)
3047:
|
3051:
3052: ;
3053: $if $(@expr1073744516 $!@expr1073744517 $assertEquals $(@expr1073744518 "cppcheck-2.8/test/testautovariables.cpp" $, 3053 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
3054:
3055: $check_ $(@expr1073744521 "cppcheck-2.8/test/testautovariables.cpp" $, 3055 $, "auto f(int x) {\n    int a;\n    std::tie(a) = x;\n    return a;\n}" $)
3056:
3057:
3058:
3059: ;
3060: $if $(@expr1073744522 $!@expr1073744523 $assertEquals $(@expr1073744524 "cppcheck-2.8/test/testautovariables.cpp" $, 3060 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
3061:
3062: $check_ $(@expr1073744527 "cppcheck-2.8/test/testautovariables.cpp" $, 3062 $, "std::pair<std::string, std::string>\nstr_pair(std::string const & a, std::string const & b) {\n    return std::make_pair(a, b);\n}\nstd::vector<std::pair<std::string, std::string> > create_parameters() {\n    std::vector<std::pair<std::string, std::string> > par;\n    par.push_back(str_pair(\"param1\", \"prop_a\"));\n    par.push_back(str_pair(\"param2\", \"prop_b\"));\n    par.push_back(str_pair(\"param3\", \"prop_c\"));\n    return par;\n}\n" $)
3063:
|
3071:
3072: ;
3073: $if $(@expr1073744528 $!@expr1073744529 $assertEquals $(@expr1073744530 "cppcheck-2.8/test/testautovariables.cpp" $, 3073 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
3074: }
3075:
3076: void danglingLifetimeUserConstructor ( )
3077: {
3078: $check_ $(@expr1073744533 "cppcheck-2.8/test/testautovariables.cpp" $, 3078 $, "struct A {\n    int* i;\n    A(int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" $)
3079:
|
3087:
3088: ;
3089: $if $(@expr1073744534 $!@expr1073744535 $assertEquals $(@expr1073744536 "cppcheck-2.8/test/testautovariables.cpp" $, 3089 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3090:
3091: ; }
3092:
3093: $check_ $(@expr1073744539 "cppcheck-2.8/test/testautovariables.cpp" $, 3093 $, "struct A {\n    int* i;\n    A(int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" , true $)
3094:
|
3101:
3102: ;
3103: $if $(@expr1073744540 $!@expr1073744541 $assertEquals $(@expr1073744542 "cppcheck-2.8/test/testautovariables.cpp" $, 3103 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error, inconclusive) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3104:
3105: ; }
3106:
3107: $check_ $(@expr1073744545 "cppcheck-2.8/test/testautovariables.cpp" $, 3107 $, "struct A {\n    int* i;\n    A(const int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" , true $)
3108:
|
3115:
3116: ;
3117: $if $(@expr1073744546 $!@expr1073744547 $assertEquals $(@expr1073744548 "cppcheck-2.8/test/testautovariables.cpp" $, 3117 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3118:
3119: $check_ $(@expr1073744551 "cppcheck-2.8/test/testautovariables.cpp" $, 3119 $, "struct A {\n    int& i;\n    A(int& x)\n    : i(x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" $)
3120:
|
3128:
3129: ;
3130: $if $(@expr1073744552 $!@expr1073744553 $assertEquals $(@expr1073744554 "cppcheck-2.8/test/testautovariables.cpp" $, 3130 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3131:
3132: ; }
3133:
3134: $check_ $(@expr1073744557 "cppcheck-2.8/test/testautovariables.cpp" $, 3134 $, "struct A {\n    int& i;\n    A(const std::vector<int>& x)\n    : i(x[0])\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n" $)
3135:
|
3143:
3144: ;
3145: $if $(@expr1073744558 $!@expr1073744559 $assertEquals $(@expr1073744560 "cppcheck-2.8/test/testautovariables.cpp" $, 3145 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3146:
3147: ; }
3148:
3149: $check_ $(@expr1073744563 "cppcheck-2.8/test/testautovariables.cpp" $, 3149 $, "struct A {\n    int* i;\n    A(const std::vector<int>& x)\n    : i(x.data())\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n" $)
3150:
|
3158:
3159: ;
3160: $if $(@expr1073744564 $!@expr1073744565 $assertEquals $(@expr1073744566 "cppcheck-2.8/test/testautovariables.cpp" $, 3160 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3161:
3162: ; }
3163:
3164: $check_ $(@expr1073744569 "cppcheck-2.8/test/testautovariables.cpp" $, 3164 $, "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    A a{0};\n    return a;\n}\n" $)
3165:
|
3172:
3173: ;
3174: $if $(@expr1073744570 $!@expr1073744571 $assertEquals $(@expr1073744572 "cppcheck-2.8/test/testautovariables.cpp" $, 3174 $, "[test.cpp:8] -> [test.cpp:9]: (error) Returning object that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3175: ; }
3176:
3177: $check_ $(@expr1073744575 "cppcheck-2.8/test/testautovariables.cpp" $, 3177 $, "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    return A{i};\n}\n" $)
3178:
|
3185:
3186: ;
3187: $if $(@expr1073744576 $!@expr1073744577 $assertEquals $(@expr1073744578 "cppcheck-2.8/test/testautovariables.cpp" $, 3187 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3188:
3189: ; }
3190:
3191: $check_ $(@expr1073744581 "cppcheck-2.8/test/testautovariables.cpp" $, 3191 $, "struct A {\n    std::string v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n" $)
3192:
|
3199:
3200: ;
3201: $if $(@expr1073744582 $!@expr1073744583 $assertEquals $(@expr1073744584 "cppcheck-2.8/test/testautovariables.cpp" $, 3201 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3202:
3203: $check_ $(@expr1073744587 "cppcheck-2.8/test/testautovariables.cpp" $, 3203 $, "struct A {\n    std::string_view v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n" $)
3204:
|
3211:
3212: ;
3213: $if $(@expr1073744588 $!@expr1073744589 $assertEquals $(@expr1073744590 "cppcheck-2.8/test/testautovariables.cpp" $, 3213 $, "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3214:
3215: ; }
3216:
3217: $check_ $(@expr1073744593 "cppcheck-2.8/test/testautovariables.cpp" $, 3217 $, "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    return A{0};\n}\n" $)
3218:
|
3224:
3225: ;
3226: $if $(@expr1073744594 $!@expr1073744595 $assertEquals $(@expr1073744596 "cppcheck-2.8/test/testautovariables.cpp" $, 3226 $, "[test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3227: ; }
3228:
3229: $check_ $(@expr1073744599 "cppcheck-2.8/test/testautovariables.cpp" $, 3229 $, "struct A {\n    int n;\n    A(const int &x) : n(x) {}\n};\nA f() {\n    A m(4);\n    return m;\n}\n" $)
3230:
|
3235:
3236: ;
3237: $if $(@expr1073744600 $!@expr1073744601 $assertEquals $(@expr1073744602 "cppcheck-2.8/test/testautovariables.cpp" $, 3237 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3238:
3239: $check_ $(@expr1073744605 "cppcheck-2.8/test/testautovariables.cpp" $, 3239 $, "struct B {};\nstruct A {\n    B n;\n    A(const B &x) : n(x) {}\n};\nA f() {\n    A m(B{});\n    return m;\n}\n" $)
3240:
|
3246:
3247: ;
3248: $if $(@expr1073744606 $!@expr1073744607 $assertEquals $(@expr1073744608 "cppcheck-2.8/test/testautovariables.cpp" $, 3248 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3249:
3250: $check_ $(@expr1073744611 "cppcheck-2.8/test/testautovariables.cpp" $, 3250 $, "struct A {\n    A(std::vector<std::string> &filenames)\n    : files(filenames) {}\n    std::vector<std::string> &files;\n};\nA f() {\n    std::vector<std::string> files;\n    return A(files);\n}\n" $)
3251:
|
3257:
3258: ;
3259: $if $(@expr1073744612 $!@expr1073744613 $assertEquals $(@expr1073744614 "cppcheck-2.8/test/testautovariables.cpp" $, 3259 $, "[test.cpp:8] -> [test.cpp:7] -> [test.cpp:8]: (error) Returning object that points to local variable 'files' that will be invalid when returning.\n" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return
3260:
3261: ; }
3262:
3263: $check_ $(@expr1073744617 "cppcheck-2.8/test/testautovariables.cpp" $, 3263 $, "struct S {\n    explicit S(std::string& s);\n}\nS f() {\n    std::string m(\"abc\");\n    return S(m);\n}\n" , true $)
3264:
|
3269:
3270: ;
3271: $if $(@expr1073744618 $!@expr1073744619 $assertEquals $(@expr1073744620 "cppcheck-2.8/test/testautovariables.cpp" $, 3271 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3272:
3273: $check_ $(@expr1073744623 "cppcheck-2.8/test/testautovariables.cpp" $, 3273 $, "struct S {\n    std::string msg;\n    explicit S(const char* m) : msg(m) {}\n};\nS f() {\n    std::string s(\"abc\");\n    return S(s.c_str());\n}\n" , true $)
3274:
|
3280:
3281: ;
3282: $if $(@expr1073744624 $!@expr1073744625 $assertEquals $(@expr1073744626 "cppcheck-2.8/test/testautovariables.cpp" $, 3282 $, "" $, errout@var100 .@expr2713 str (@expr2714 ) $) $) { $return ; }
3283: }
3284:
3285: void danglingLifetimeAggegrateConstructor ( ) {
3286: $check_ $(@expr1073744629 "cppcheck-2.8/test/testautovariables.cpp" $, 3286 $, "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return A{i, i};\n}" $)
3287:
|
3292:
3293: ;
3294: $if $(@expr1073744630 $!@expr1073744631 $assertEquals $(@expr1073744632 "cppcheck-2.8/test/testautovariables.cpp" $, 3294 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return
3295:
3296: ; }
3297:
3298: $check_ $(@expr1073744635 "cppcheck-2.8/test/testautovariables.cpp" $, 3298 $, "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return {i, i};\n}" $)
3299:
|
3304:
3305: ;
3306: $if $(@expr1073744636 $!@expr1073744637 $assertEquals $(@expr1073744638 "cppcheck-2.8/test/testautovariables.cpp" $, 3306 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return
3307:
3308: ; }
3309:
3310: $check_ $(@expr1073744641 "cppcheck-2.8/test/testautovariables.cpp" $, 3310 $, "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r{i, i};\n    return r;\n}" $)
3311:
|
3317:
3318: ;
3319: $if $(@expr1073744642 $!@expr1073744643 $assertEquals $(@expr1073744644 "cppcheck-2.8/test/testautovariables.cpp" $, 3319 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return
3320:
3321: ; }
3322:
3323: $check_ $(@expr1073744647 "cppcheck-2.8/test/testautovariables.cpp" $, 3323 $, "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r = {i, i};\n    return r;\n}" $)
3324:
|
3330:
3331: ;
3332: $if $(@expr1073744648 $!@expr1073744649 $assertEquals $(@expr1073744650 "cppcheck-2.8/test/testautovariables.cpp" $, 3332 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return
3333:
3334: ; }
3335:
3336: $check_ $(@expr1073744653 "cppcheck-2.8/test/testautovariables.cpp" $, 3336 $, "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{i, x};\n}" $)
3337:
|
3342:
3343: ;
3344: $if $(@expr1073744654 $!@expr1073744655 $assertEquals $(@expr1073744656 "cppcheck-2.8/test/testautovariables.cpp" $, 3344 $, "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return
3345:
3346: ; }
3347:
3348: $check_ $(@expr1073744659 "cppcheck-2.8/test/testautovariables.cpp" $, 3348 $, "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{x, i};\n}" $)
3349:
|
3354:
3355: ;
3356: $if $(@expr1073744660 $!@expr1073744661 $assertEquals $(@expr1073744662 "cppcheck-2.8/test/testautovariables.cpp" $, 3356 $, "" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return ; }
3357:
3358: $check_ $(@expr1073744665 "cppcheck-2.8/test/testautovariables.cpp" $, 3358 $, "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    return A{x, x};\n}" $)
3359:
|
3363:
3364: ;
3365: $if $(@expr1073744666 $!@expr1073744667 $assertEquals $(@expr1073744668 "cppcheck-2.8/test/testautovariables.cpp" $, 3365 $, "" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return ; }
3366:
3367: $check_ $(@expr1073744671 "cppcheck-2.8/test/testautovariables.cpp" $, 3367 $, "struct A { int i; const int& j; };\nA f(int& x) {\n    int y = 0;\n    return A{y, x};\n}" $)
3368:
3369:
3370:
3371: ;
3372: $if $(@expr1073744672 $!@expr1073744673 $assertEquals $(@expr1073744674 "cppcheck-2.8/test/testautovariables.cpp" $, 3372 $, "" $, errout@var100 .@expr2809 str (@expr2810 ) $) $) { $return ; }
3373: }
3374:
3375: void danglingLifetimeInitList ( ) {
3376: $check_ $(@expr1073744677 "cppcheck-2.8/test/testautovariables.cpp" $, 3376 $, "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v = {&i, &i};\n    return v;\n}" $)
3377:
3378:
3379:
3380: ;
3381: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/testautovariables.cpp" $, 3381 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return
3382:
3383: ; }
3384:
3385: $check_ $(@expr1073744683 "cppcheck-2.8/test/testautovariables.cpp" $, 3385 $, "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v{&i, &i};\n    return v;\n}" $)
3386:
3387:
3388:
3389: ;
3390: $if $(@expr1073744684 $!@expr1073744685 $assertEquals $(@expr1073744686 "cppcheck-2.8/test/testautovariables.cpp" $, 3390 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return
3391:
3392: ; }
3393:
3394: $check_ $(@expr1073744689 "cppcheck-2.8/test/testautovariables.cpp" $, 3394 $, "std::vector<int*> f() {\n    int i = 0;\n    return {&i, &i};\n}" $)
3395:
3396:
3397: ;
3398: $if $(@expr1073744690 $!@expr1073744691 $assertEquals $(@expr1073744692 "cppcheck-2.8/test/testautovariables.cpp" $, 3398 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return
3399:
3400: ; }
3401:
3402: $check_ $(@expr1073744695 "cppcheck-2.8/test/testautovariables.cpp" $, 3402 $, "std::vector<int*> f(int& x) {\n    return {&x, &x};\n}" $)
3403:
3404: ;
3405: $if $(@expr1073744696 $!@expr1073744697 $assertEquals $(@expr1073744698 "cppcheck-2.8/test/testautovariables.cpp" $, 3405 $, "" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return ; }
3406:
3407: $check_ $(@expr1073744701 "cppcheck-2.8/test/testautovariables.cpp" $, 3407 $, "std::vector<std::string> f() {\n    std::set<std::string> x;\n    x.insert(\"1\");\n    x.insert(\"2\");\n    return { x.begin(), x.end() };\n}" $)
3408:
|
3411:
3412: ;
3413: $if $(@expr1073744702 $!@expr1073744703 $assertEquals $(@expr1073744704 "cppcheck-2.8/test/testautovariables.cpp" $, 3413 $, "" $, errout@var100 .@expr2857 str (@expr2858 ) $) $) { $return ; }
3414: }
3415:
3416: void danglingLifetimeImplicitConversion ( ) {
3417: $check_ $(@expr1073744707 "cppcheck-2.8/test/testautovariables.cpp" $, 3417 $, "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}" $)
3418:
3419:
3420:
3421: ;
3422: $if $(@expr1073744708 $!@expr1073744709 $assertEquals $(@expr1073744710 "cppcheck-2.8/test/testautovariables.cpp" $, 3422 $, "" $, errout@var100 .@expr2887 str (@expr2888 ) $) $) { $return ; }
3423:
3424: $check_ $(@expr1073744713 "cppcheck-2.8/test/testautovariables.cpp" $, 3424 $, "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   A bp = ba.c_str();\n   return bp;\n}" $)
3425:
|
3428:
3429: ;
3430: $if $(@expr1073744714 $!@expr1073744715 $assertEquals $(@expr1073744716 "cppcheck-2.8/test/testautovariables.cpp" $, 3430 $, "" $, errout@var100 .@expr2887 str (@expr2888 ) $) $) { $return ; }
3431:
3432: $check_ $(@expr1073744719 "cppcheck-2.8/test/testautovariables.cpp" $, 3432 $, "struct A { A(const char *a); };\nstd::vector<A> f() {\n   std::string ba(\"hello\");\n   std::vector<A> v;\n   v.push_back(ba.c_str());\n   return v;\n}" $)
3433:
|
3437:
3438: ;
3439: $if $(@expr1073744720 $!@expr1073744721 $assertEquals $(@expr1073744722 "cppcheck-2.8/test/testautovariables.cpp" $, 3439 $, "" $, errout@var100 .@expr2887 str (@expr2888 ) $) $) { $return ; }
3440:
3441: $check_ $(@expr1073744725 "cppcheck-2.8/test/testautovariables.cpp" $, 3441 $, "std::string f(const std::string& x) {\n  const char c[] = \"\";\n  if (!x.empty())\n    return x + c;\n  return \"\";\n}" $)
3442:
|
3445:
3446: ;
3447: $if $(@expr1073744726 $!@expr1073744727 $assertEquals $(@expr1073744728 "cppcheck-2.8/test/testautovariables.cpp" $, 3447 $, "" $, errout@var100 .@expr2887 str (@expr2888 ) $) $) { $return ; }
3448:
3449: $check_ $(@expr1073744731 "cppcheck-2.8/test/testautovariables.cpp" $, 3449 $, "std::string f(const std::string& x) {\n  const char c[] = \"123\";\n  if (!x.empty())\n    return c + 1;\n  return \"\";\n}" $)
3450:
|
3453:
3454: ;
3455: $if $(@expr1073744732 $!@expr1073744733 $assertEquals $(@expr1073744734 "cppcheck-2.8/test/testautovariables.cpp" $, 3455 $, "" $, errout@var100 .@expr2887 str (@expr2888 ) $) $) { $return ; }
3456: }
3457:
3458: void danglingTemporaryLifetime ( ) {
3459: $check_ $(@expr1073744737 "cppcheck-2.8/test/testautovariables.cpp" $, 3459 $, "const int& g(const int& x) {\n    return x;\n}\nvoid f(int& i) {\n    int* x = &g(0);\n    i += *x;\n}" $)
3460:
|
3464:
3465: ;
3466: $if $(@expr1073744738 $!@expr1073744739 $assertEquals $(@expr1073744740 "cppcheck-2.8/test/testautovariables.cpp" $, 3466 $, "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return
3467:
3468: ; }
3469:
3470: $check_ $(@expr1073744743 "cppcheck-2.8/test/testautovariables.cpp" $, 3470 $, "QString f() {\n    QString a(\"dummyValue\");\n    const char* b = a.toStdString().c_str();\n    QString c = b;\n    return c;\n}" $)
3471:
|
3474:
3475: ;
3476: $if $(@expr1073744744 $!@expr1073744745 $assertEquals $(@expr1073744746 "cppcheck-2.8/test/testautovariables.cpp" $, 3476 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using pointer that is a temporary.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return
3477: ; }
3478:
3479: $check_ $(@expr1073744749 "cppcheck-2.8/test/testautovariables.cpp" $, 3479 $, "auto f(std::string s) {\n    const char *x = s.substr(1,2).c_str();\n    auto i = s.substr(4,5).begin();\n    return *i;\n}" $)
3480:
3481:
3482:
3483: ;
3484: $if $(@expr1073744750 $!@expr1073744751 $assertEquals $(@expr1073744752 "cppcheck-2.8/test/testautovariables.cpp" $, 3484 $, "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using iterator that is a temporary.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return
3485: ; }
3486:
3487: $check_ $(@expr1073744755 "cppcheck-2.8/test/testautovariables.cpp" $, 3487 $, "std::string f() {\n    std::stringstream tmp;\n    const std::string &str = tmp.str();\n    return std::string(str.c_str(), 1);\n}" $)
3488:
3489:
3490:
3491: ;
3492: $if $(@expr1073744756 $!@expr1073744757 $assertEquals $(@expr1073744758 "cppcheck-2.8/test/testautovariables.cpp" $, 3492 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3493:
3494: $check_ $(@expr1073744761 "cppcheck-2.8/test/testautovariables.cpp" $, 3494 $, "int get_value();\nconst int &get_reference1() {\n  const int &x = get_value();\n  return x;\n}\n" $)
3495:
3496:
3497:
3498: ;
3499: $if $(@expr1073744762 $!@expr1073744763 $assertEquals $(@expr1073744764 "cppcheck-2.8/test/testautovariables.cpp" $, 3499 $, "[test.cpp:3] -> [test.cpp:4]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3500:
3501: $check_ $(@expr1073744767 "cppcheck-2.8/test/testautovariables.cpp" $, 3501 $, "int get_value();\nconst int &get_reference2() {\n  const int &x1 = get_value();\n  const int &x2 = x1;\n  return x2;\n}\n" $)
3502:
|
3505:
3506: ;
3507: $if $(@expr1073744768 $!@expr1073744769 $assertEquals $(@expr1073744770 "cppcheck-2.8/test/testautovariables.cpp" $, 3507 $, "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Reference to temporary returned.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return
3508: ; }
3509:
3510: $check_ $(@expr1073744773 "cppcheck-2.8/test/testautovariables.cpp" $, 3510 $, "const std::string& getState() {\n    static const std::string& state = \"\";\n    return state;\n}\n" $)
3511:
3512:
3513: ;
3514: $if $(@expr1073744774 $!@expr1073744775 $assertEquals $(@expr1073744776 "cppcheck-2.8/test/testautovariables.cpp" $, 3514 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3515:
3516: $check_ $(@expr1073744779 "cppcheck-2.8/test/testautovariables.cpp" $, 3516 $, "struct var {\n    void fun();\n}x;\nvar* T(const char*) {\n    return &x;\n}\nstd::string GetTemp();\nvoid f() {\n    auto a = T(GetTemp().c_str());\n    a->fun();\n}\n" $)
3517:
|
3525:
3526: ;
3527: $if $(@expr1073744780 $!@expr1073744781 $assertEquals $(@expr1073744782 "cppcheck-2.8/test/testautovariables.cpp" $, 3527 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3528:
3529: $check_ $(@expr1073744785 "cppcheck-2.8/test/testautovariables.cpp" $, 3529 $, "struct A {\n    std::map<int, int> m_;\n};\nstruct B {\n    A a_;\n};\nB func();\nvoid f() {\n    const std::map<int, int>::iterator& m = func().a_.m_.begin();\n    (void)m->first;\n}\n" $)
3530:
|
3538:
3539: ;
3540: $if $(@expr1073744786 $!@expr1073744787 $assertEquals $(@expr1073744788 "cppcheck-2.8/test/testautovariables.cpp" $, 3540 $, "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:10]: (error) Using iterator that is a temporary.\n" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return
3541: ; }
3542:
3543: $check_ $(@expr1073744791 "cppcheck-2.8/test/testautovariables.cpp" $, 3543 $, "void f(bool b) {\n  std::vector<int> ints = g();\n  auto *ptr = &ints;\n  if (b)\n    ptr = &ints;\n  for (auto it = ptr->begin(); it != ptr->end(); ++it)\n  {}\n}\n" $)
3544:
|
3549:
3550: ;
3551: $if $(@expr1073744792 $!@expr1073744793 $assertEquals $(@expr1073744794 "cppcheck-2.8/test/testautovariables.cpp" $, 3551 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3552:
3553: $check_ $(@expr1073744797 "cppcheck-2.8/test/testautovariables.cpp" $, 3553 $, "struct String {\n    void Append(uint8_t Val);\n    String& operator+=(const char s[]);\n    String& operator+=(const std::string& Str) {\n        return operator+=(Str.c_str());\n    }\n    void operator+=(uint8_t Val) {\n        Append(Val);\n    }\n};\n" $)
3554:
|
3561:
3562: ;
3563: $if $(@expr1073744798 $!@expr1073744799 $assertEquals $(@expr1073744800 "cppcheck-2.8/test/testautovariables.cpp" $, 3563 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3564:
3565:
3566: $check_ $(@expr1073744803 "cppcheck-2.8/test/testautovariables.cpp" $, 3566 $, "struct S {\n    int& r;\n};\nvoid f(int i) {\n    const S a[] = { { i } };\n    for (const auto& s : a) {}\n}\n" $)
3567:
|
3571:
3572: ;
3573: $if $(@expr1073744804 $!@expr1073744805 $assertEquals $(@expr1073744806 "cppcheck-2.8/test/testautovariables.cpp" $, 3573 $, "" $, errout@var100 .@expr2917 str (@expr2918 ) $) $) { $return ; }
3574: }
3575:
3576: void danglingLifetimeBorrowedMembers ( )
3577: {
3578:
3579: $check_ $(@expr1073744809 "cppcheck-2.8/test/testautovariables.cpp" $, 3579 $, "struct Info { int k; };\nstruct MoreInfo {\n    int* k;\n    char dat;\n};\nstruct Fields {\n    Info info;\n};\ntemplate <typename T> void func1(T val){}\ntemplate <typename T> void func2(T val){}\nFields* get();\nvoid doit() {\n    MoreInfo rech;\n    rech.k = &get()->info.k;\n    func1(&rech.dat);\n    func2(rech.k);\n}\n" $)
3580:
|
3594:
3595: ;
3596: $if $(@expr1073744810 $!@expr1073744811 $assertEquals $(@expr1073744812 "cppcheck-2.8/test/testautovariables.cpp" $, 3596 $, "" $, errout@var100 .@expr2989 str (@expr2990 ) $) $) { $return ; }
3597:
3598: $check_ $(@expr1073744815 "cppcheck-2.8/test/testautovariables.cpp" $, 3598 $, "struct A { int x; };\nA* g();\nvoid f() {\n    A** ap = &g();\n    (*ap)->x;\n}\n" $)
3599:
|
3602:
3603: ;
3604: $if $(@expr1073744816 $!@expr1073744817 $assertEquals $(@expr1073744818 "cppcheck-2.8/test/testautovariables.cpp" $, 3604 $, "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n" $, errout@var100 .@expr2989 str (@expr2990 ) $) $) { $return
3605: ; }
3606:
3607: $check_ $(@expr1073744821 "cppcheck-2.8/test/testautovariables.cpp" $, 3607 $, "struct A { int* x; };\nA g();\nvoid f() {\n    int* x = g().x;\n    (void)*x + 1;\n}\n" $)
3608:
|
3611:
3612: ;
3613: $if $(@expr1073744822 $!@expr1073744823 $assertEquals $(@expr1073744824 "cppcheck-2.8/test/testautovariables.cpp" $, 3613 $, "" $, errout@var100 .@expr2989 str (@expr2990 ) $) $) { $return ; }
3614:
3615: $check_ $(@expr1073744827 "cppcheck-2.8/test/testautovariables.cpp" $, 3615 $, "struct A { int x; };\nstruct B { A* a; }\nB g();\nvoid f() {\n    int* x = &g()->a.x;\n    (void)*x + 1;\n}\n" $)
3616:
|
3620:
3621: ;
3622: $if $(@expr1073744828 $!@expr1073744829 $assertEquals $(@expr1073744830 "cppcheck-2.8/test/testautovariables.cpp" $, 3622 $, "" $, errout@var100 .@expr2989 str (@expr2990 ) $) $) { $return ; }
3623:
3624: $check_ $(@expr1073744833 "cppcheck-2.8/test/testautovariables.cpp" $, 3624 $, "struct A { int x; };\nstruct B { A* g(); };\nA* g();\nvoid f(B b) {\n    A** ap = &b.g();\n    (*ap)->x;\n}\n" $)
3625:
|
3629:
3630: ;
3631: $if $(@expr1073744834 $!@expr1073744835 $assertEquals $(@expr1073744836 "cppcheck-2.8/test/testautovariables.cpp" $, 3631 $, "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n" $, errout@var100 .@expr2989 str (@expr2990 ) $) $) { $return
3632: ; }
3633: }
3634:
3635: void danglingLifetimeClassMemberFunctions ( )
3636: {
3637: $check_ $(@expr1073744839 "cppcheck-2.8/test/testautovariables.cpp" $, 3637 $, "struct S {\n    S(int i) : i(i) {}\n    int i;\n    int* ptr() { return &i; }\n};\nint* fun(int i) { \n    return S(i).ptr();\n}\n" $)
3638:
|
3643:
3644: ;
3645: $if $(@expr1073744840 $!@expr1073744841 $assertEquals $(@expr1073744842 "cppcheck-2.8/test/testautovariables.cpp" $, 3645 $, "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:7]: (error) Returning pointer that will be invalid when returning.\n" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return
3646:
3647: ; }
3648:
3649: $check_ $(@expr1073744845 "cppcheck-2.8/test/testautovariables.cpp" $, 3649 $, "struct Fred\n{\n    int x[2];\n    Fred() {\n        x[0] = 0x41;\n        x[1] = 0x42;\n    }\n    const int *get_x() {\n        return x;\n    }\n};\nstatic const int *foo() {\n    Fred fred;\n    return fred.get_x();\n}\n" $)
3650:
|
3662:
3663: ;
3664: $if $(@expr1073744846 $!@expr1073744847 $assertEquals $(@expr1073744848 "cppcheck-2.8/test/testautovariables.cpp" $, 3664 $, "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:14] -> [test.cpp:13] -> [test.cpp:14]: (error) Returning pointer to local variable 'fred' that will be invalid when returning.\n" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return
3665:
3666: ; }
3667:
3668: $check_ $(@expr1073744851 "cppcheck-2.8/test/testautovariables.cpp" $, 3668 $, "struct A {\n    int i;\n    auto f() const {\n        return [=]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n" $)
3669:
|
3675:
3676: ;
3677: $if $(@expr1073744852 $!@expr1073744853 $assertEquals $(@expr1073744854 "cppcheck-2.8/test/testautovariables.cpp" $, 3677 $, "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return
3678:
3679: ; }
3680:
3681: $check_ $(@expr1073744857 "cppcheck-2.8/test/testautovariables.cpp" $, 3681 $, "struct A {\n    int i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n" $)
3682:
|
3688:
3689: ;
3690: $if $(@expr1073744858 $!@expr1073744859 $assertEquals $(@expr1073744860 "cppcheck-2.8/test/testautovariables.cpp" $, 3690 $, "" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return ; }
3691:
3692: $check_ $(@expr1073744863 "cppcheck-2.8/test/testautovariables.cpp" $, 3692 $, "struct A {\n    int* i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    int i = 0;\n    return A{&i}.f();\n}\n" $)
3693:
|
3700:
3701: ;
3702: $if $(@expr1073744864 $!@expr1073744865 $assertEquals $(@expr1073744866 "cppcheck-2.8/test/testautovariables.cpp" $, 3702 $, "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:9] -> [test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return
3703:
3704: ; }
3705:
3706: $check_ $(@expr1073744869 "cppcheck-2.8/test/testautovariables.cpp" $, 3706 $, "struct S {\n    int i{};\n};\nstruct T {\n    S getS() const { return S{ j }; }\n    int j{};\n};\nvoid f(S* p) {\n    S ret;\n    {\n        T t;\n        ret = t.getS();\n    }\n    *p = ret;\n}\n" $)
3707:
|
3719:
3720: ;
3721: $if $(@expr1073744870 $!@expr1073744871 $assertEquals $(@expr1073744872 "cppcheck-2.8/test/testautovariables.cpp" $, 3721 $, "" $, errout@var100 .@expr3019 str (@expr3020 ) $) $) { $return ; }
3722: }
3723:
3724: void invalidLifetime ( ) {
3725: $check_ $(@expr1073744875 "cppcheck-2.8/test/testautovariables.cpp" $, 3725 $, "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n    }\n    f();\n}" $)
3726:
|
3731:
3732: ;
3733: $if $(@expr1073744876 $!@expr1073744877 $assertEquals $(@expr1073744878 "cppcheck-2.8/test/testautovariables.cpp" $, 3733 $, "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using lambda that captures local variable 'b' that is out of scope.\n" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3734:
3735: $check_ $(@expr1073744881 "cppcheck-2.8/test/testautovariables.cpp" $, 3735 $, "void f(bool b)  {\n  int* x;\n  if(b) {\n    int y[6] = {0,1,2,3,4,5};\n    x = y;\n  }\n  x[3];\n}" $)
3736:
|
3741:
3742: ;
3743: $if $(@expr1073744882 $!@expr1073744883 $assertEquals $(@expr1073744884 "cppcheck-2.8/test/testautovariables.cpp" $, 3743 $, "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'y' that is out of scope.\n" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return
3744:
3745: ; }
3746:
3747: $check_ $(@expr1073744887 "cppcheck-2.8/test/testautovariables.cpp" $, 3747 $, "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n        f();\n    }\n}" $)
3748:
|
3753:
3754: ;
3755: $if $(@expr1073744888 $!@expr1073744889 $assertEquals $(@expr1073744890 "cppcheck-2.8/test/testautovariables.cpp" $, 3755 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3756:
3757: $check_ $(@expr1073744893 "cppcheck-2.8/test/testautovariables.cpp" $, 3757 $, "struct a {\n  b();\n  std::list<int> c;\n};\nvoid a::b() {\n  c.end()\n}" $)
3758:
|
3762:
3763: ;
3764: $if $(@expr1073744894 $!@expr1073744895 $assertEquals $(@expr1073744896 "cppcheck-2.8/test/testautovariables.cpp" $, 3764 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3765:
3766: $check_ $(@expr1073744899 "cppcheck-2.8/test/testautovariables.cpp" $, 3766 $, "void b(char f[], char c[]) {\n  std::string d(c); {\n    std::string e;\n    b(f, e.c_str())\n  }\n}" $)
3767:
|
3770:
3771: ;
3772: $if $(@expr1073744900 $!@expr1073744901 $assertEquals $(@expr1073744902 "cppcheck-2.8/test/testautovariables.cpp" $, 3772 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3773:
3774: $check_ $(@expr1073744905 "cppcheck-2.8/test/testautovariables.cpp" $, 3774 $, "void f(bool b) {\n    std::string s;\n    if(b) {\n        char buf[3];\n        s = buf;\n    }\n    std::cout << s;\n}" $)
3775:
|
3780:
3781: ;
3782: $if $(@expr1073744906 $!@expr1073744907 $assertEquals $(@expr1073744908 "cppcheck-2.8/test/testautovariables.cpp" $, 3782 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3783:
3784: $check_ $(@expr1073744911 "cppcheck-2.8/test/testautovariables.cpp" $, 3784 $, "int &a[];\nvoid b(){int *c = a};" $)
3785: ;
3786: $if $(@expr1073744912 $!@expr1073744913 $assertEquals $(@expr1073744914 "cppcheck-2.8/test/testautovariables.cpp" $, 3786 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3787:
3788: $check_ $(@expr1073744917 "cppcheck-2.8/test/testautovariables.cpp" $, 3788 $, "struct A {\n    int x;\n};\nstruct B {\n    std::function<void()> x;\n    void f() {\n        this->x = [&] {\n            B y;\n            return y.x;\n        };\n    }\n};" $)
3789:
|
3798:
3799: ;
3800: $if $(@expr1073744918 $!@expr1073744919 $assertEquals $(@expr1073744920 "cppcheck-2.8/test/testautovariables.cpp" $, 3800 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3801:
3802: $check_ $(@expr1073744923 "cppcheck-2.8/test/testautovariables.cpp" $, 3802 $, "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n}\n" $)
3803:
|
3817:
3818: ;
3819: $if $(@expr1073744924 $!@expr1073744925 $assertEquals $(@expr1073744926 "cppcheck-2.8/test/testautovariables.cpp" $, 3819 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3820:
3821: $check_ $(@expr1073744929 "cppcheck-2.8/test/testautovariables.cpp" $, 3821 $, "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n" $)
3822:
|
3834:
3835: ;
3836: $if $(@expr1073744930 $!@expr1073744931 $assertEquals $(@expr1073744932 "cppcheck-2.8/test/testautovariables.cpp" $, 3836 $, "" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3837:
3838: $check_ $(@expr1073744935 "cppcheck-2.8/test/testautovariables.cpp" $, 3838 $, "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n}\n" $)
3839:
|
3852:
3853: ;
3854: $if $(@expr1073744936 $!@expr1073744937 $assertEquals $(@expr1073744938 "cppcheck-2.8/test/testautovariables.cpp" $, 3854 $, "[test.cpp:12]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3855:
3856: $check_ $(@expr1073744941 "cppcheck-2.8/test/testautovariables.cpp" $, 3856 $, "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n" $)
3857:
|
3868:
3869: ;
3870: $if $(@expr1073744942 $!@expr1073744943 $assertEquals $(@expr1073744944 "cppcheck-2.8/test/testautovariables.cpp" $, 3870 $, "[test.cpp:11]: (error) Address of local auto-variable assigned to a function parameter.\n" $, errout@var100 .@expr3055 str (@expr3056 ) $) $) { $return ; }
3871: }
3872:
3873: void deadPointer ( ) {
3874: $check_ $(@expr1073744947 "cppcheck-2.8/test/testautovariables.cpp" $, 3874 $, "void f() {\n  int *p = p1;\n  if (cond) {\n    int x;\n    p = &x;\n  }\n  *p = 0;\n}" $)
3875:
|
3880:
3881: ;
3882: $if $(@expr1073744948 $!@expr1073744949 $assertEquals $(@expr1073744950 "cppcheck-2.8/test/testautovariables.cpp" $, 3882 $, "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'x' that is out of scope.\n" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3883:
3884:
3885: $check_ $(@expr1073744953 "cppcheck-2.8/test/testautovariables.cpp" $, 3885 $, "void f(struct KEY *key) {\n  key->x = 0;\n}\n\nint main() {\n  struct KEY *tmp = 0;\n  struct KEY k;\n\n  if (condition) {\n    tmp = &k;\n  } else {\n  }\n  f(tmp);\n}" $)
3886:
|
3897:
3898: ;
3899: $if $(@expr1073744954 $!@expr1073744955 $assertEquals $(@expr1073744956 "cppcheck-2.8/test/testautovariables.cpp" $, 3899 $, "" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3900:
3901:
3902: $check_ $(@expr1073744959 "cppcheck-2.8/test/testautovariables.cpp" $, 3902 $, "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem& item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}" $)
3903:
|
3909:
3910: ;
3911: $if $(@expr1073744960 $!@expr1073744961 $assertEquals $(@expr1073744962 "cppcheck-2.8/test/testautovariables.cpp" $, 3911 $, "" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3912:
3913: $check_ $(@expr1073744965 "cppcheck-2.8/test/testautovariables.cpp" $, 3913 $, "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}" $)
3914:
|
3920:
3921: ;
3922: $if $(@expr1073744966 $!@expr1073744967 $assertEquals $(@expr1073744968 "cppcheck-2.8/test/testautovariables.cpp" $, 3922 $, "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'item' that is out of scope.\n" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3923:
3924:
3925: $check_ $(@expr1073744971 "cppcheck-2.8/test/testautovariables.cpp" $, 3925 $, "void trp_deliver_signal()  {\n    union {\n        Uint32 theData[25];\n        EventReport repData;\n    };\n    EventReport * rep = &repData;\n    rep->setEventType(NDB_LE_Connected);\n}" $)
3926:
|
3931:
3932: ;
3933: $if $(@expr1073744972 $!@expr1073744973 $assertEquals $(@expr1073744974 "cppcheck-2.8/test/testautovariables.cpp" $, 3933 $, "" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3934:
3935:
3936: $check_ $(@expr1073744977 "cppcheck-2.8/test/testautovariables.cpp" $, 3936 $, "int f(bool a, bool b) {\n    int *iPtr = 0;\n    if(b) {\n        int x = 42;\n        iPtr = &x;\n    }\n    if(b && a)\n        return *iPtr;\n    return 0;\n}" $)
3937:
|
3944:
3945: ;
3946: $if $(@expr1073744978 $!@expr1073744979 $assertEquals $(@expr1073744980 "cppcheck-2.8/test/testautovariables.cpp" $, 3946 $, "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:8]: (error) Using pointer to local variable 'x' that is out of scope.\n" $, errout@var100 .@expr3127 str (@expr3128 ) $) $) { $return ; }
3947: }
3948:
3949: void splitNamespaceAuto ( ) {
3950: $check_ $(@expr1073744983 "cppcheck-2.8/test/testautovariables.cpp" $, 3950 $, "namespace ns\n{\n    auto var{ 0 };\n}\nnamespace ns\n{\n    int i;\n}\n" $)
3951:
|
3956:
3957: ;
3958: $if $(@expr1073744984 $!@expr1073744985 $assertEquals $(@expr1073744986 "cppcheck-2.8/test/testautovariables.cpp" $, 3958 $, "" $, errout@var100 .@expr1073744987 str (@expr1073744988 ) $) $) { $return ; }
3959: }
3960:
3961: } ;
3962:
3963: $namespace ${ TestAutoVariables instance_TestAutoVariables@var114 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@166}
  v {!<=-1,!>=2,0@166}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 30
  "TestAutoVariables" always "TestAutoVariables"
Line 36
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 38
  "" always ""
Line 40
  inconclusive {!<=-1,!>=2,1@62,0@40}
Line 43
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 44
  code possible {"namespace ns\n{\n    auto var{ 0 };\n}\nnamespace ns\n{\n    int i;\n}\n"@1,"void f() {\n  int *p = p1;\n  if (cond) {\n    int x;\n    p = &x;\n  }\n  *p = 0;\n}"@2,"void f(struct KEY *key) {\n  key->x = 0;\n}\n\nint main() {\n  struct KEY *tmp = 0;\n  struct KEY k;\n\n  if (condition) {\n    tmp = &k;\n  } else {\n  }\n  f(tmp);\n}"@3,"void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem& item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}"@4,"void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}"@5,"void trp_deliver_signal()  {\n    union {\n        Uint32 theData[25];\n        EventReport repData;\n    };\n    EventReport * rep = &repData;\n    rep->setEventType(NDB_LE_Connected);\n}"@6,"int f(bool a, bool b) {\n    int *iPtr = 0;\n    if(b) {\n        int x = 42;\n        iPtr = &x;\n    }\n    if(b && a)\n        return *iPtr;\n    return 0;\n}"@7,"void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n    }\n    f();\n}"@8,"void f(bool b)  {\n  int* x;\n  if(b) {\n    int y[6] = {0,1,2,3,4,5};\n    x = y;\n  }\n  x[3];\n}"@9,"void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n        f();\n    }\n}"@10}
Line 45
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testautovariables.cpp"@1,"cppcheck-2.8/test/testautovariables.cpp"@2,"cppcheck-2.8/test/testautovariables.cpp"@3,"cppcheck-2.8/test/testautovariables.cpp"@4,"cppcheck-2.8/test/testautovariables.cpp"@5,"cppcheck-2.8/test/testautovariables.cpp"@6,"cppcheck-2.8/test/testautovariables.cpp"@7,"cppcheck-2.8/test/testautovariables.cpp"@8,"cppcheck-2.8/test/testautovariables.cpp"@9,"cppcheck-2.8/test/testautovariables.cpp"@10}
  line inconclusive {3950@1,3874@2,3885@3,3902@4,3913@5,3925@6,3936@7,3725@8,3735@9,3747@10}
  filename {"test.c"@83,"test.cpp"}
Line 48
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 54
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 55
  ( {lifetime[Object]=(exename),!0}
  "qt.cfg" always "qt.cfg"
  != always {!<=-1,!>=2}
  "qt.cfg" always "qt.cfg"
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "testautovar1" always "testautovar1"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "testautovar2" always "testautovar2"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "testautovar3" always "testautovar3"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "testautovar4" always "testautovar4"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "testautovar5" always "testautovar5"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "testautovar6" always "testautovar6"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "testautovar7" always "testautovar7"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "testautovar8" always "testautovar8"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "testautovar9" always "testautovar9"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "testautovar10" always "testautovar10"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "testautovar11" always "testautovar11"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "testautovar12" always "testautovar12"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "testautovar13" always "testautovar13"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "testautovar14" always "testautovar14"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "testautovar15" always "testautovar15"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "testautovar16" always "testautovar16"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "testautovar_array1" always "testautovar_array1"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "testautovar_array2" always "testautovar_array2"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "testautovar_normal" always "testautovar_normal"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "testautovar_ptrptr" always "testautovar_ptrptr"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "testautovar_return1" always "testautovar_return1"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "testautovar_return2" always "testautovar_return2"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "testautovar_return3" always "testautovar_return3"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "testautovar_return4" always "testautovar_return4"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "testautovar_extern" always "testautovar_extern"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "testautovar_reassigned" always "testautovar_reassigned"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "testinvaliddealloc" always "testinvaliddealloc"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "testinvaliddealloc_input" always "testinvaliddealloc_input"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "testinvaliddealloc_string" always "testinvaliddealloc_string"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "testinvaliddealloc_C" always "testinvaliddealloc_C"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "testassign1" always "testassign1"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "testassign2" always "testassign2"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "assignAddressOfLocalArrayToGlobalPointer" always "assignAddressOfLocalArrayToGlobalPointer"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "assignAddressOfLocalVariableToGlobalPointer" always "assignAddressOfLocalVariableToGlobalPointer"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "assignAddressOfLocalVariableToMemberVariable" always "assignAddressOfLocalVariableToMemberVariable"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "returnLocalVariable1" always "returnLocalVariable1"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "returnLocalVariable2" always "returnLocalVariable2"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "returnLocalVariable3" always "returnLocalVariable3"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "returnLocalVariable4" always "returnLocalVariable4"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "returnLocalVariable5" always "returnLocalVariable5"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "returnLocalVariable6" always "returnLocalVariable6"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "returnReference1" always "returnReference1"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "returnReference2" always "returnReference2"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "returnReference3" always "returnReference3"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "returnReference4" always "returnReference4"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "returnReference5" always "returnReference5"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "returnReference6" always "returnReference6"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "returnReference7" always "returnReference7"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "returnReference8" always "returnReference8"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "returnReference9" always "returnReference9"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "returnReference10" always "returnReference10"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "returnReference11" always "returnReference11"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "returnReference12" always "returnReference12"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "returnReference13" always "returnReference13"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "returnReference14" always "returnReference14"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "returnReference15" always "returnReference15"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "returnReference16" always "returnReference16"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "returnReference16" always "returnReference16"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "returnReference17" always "returnReference17"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "returnReference18" always "returnReference18"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "returnReference19" always "returnReference19"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "returnReference20" always "returnReference20"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "returnReference21" always "returnReference21"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "returnReference22" always "returnReference22"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "returnReference23" always "returnReference23"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "returnReference24" always "returnReference24"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "returnReference25" always "returnReference25"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "returnReferenceFunction" always "returnReferenceFunction"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "returnReferenceContainer" always "returnReferenceContainer"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "returnReferenceLiteral" always "returnReferenceLiteral"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "returnReferenceCalculation" always "returnReferenceCalculation"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "returnReferenceLambda" always "returnReferenceLambda"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "returnReferenceInnerScope" always "returnReferenceInnerScope"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "returnReferenceRecursive" always "returnReferenceRecursive"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "extendedLifetime" always "extendedLifetime"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "danglingReference" always "danglingReference"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "danglingTempReference" always "danglingTempReference"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "testglobalnamespace" always "testglobalnamespace"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "returnParameterAddress" always "returnParameterAddress"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "testconstructor" always "testconstructor"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "variableIsUsedInScope" always "variableIsUsedInScope"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "danglingLifetimeLambda" always "danglingLifetimeLambda"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "danglingLifetimeContainer" always "danglingLifetimeContainer"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "danglingLifetimeContainerView" always "danglingLifetimeContainerView"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "danglingLifetimeUniquePtr" always "danglingLifetimeUniquePtr"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "danglingLifetime" always "danglingLifetime"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "danglingLifetimeFunction" always "danglingLifetimeFunction"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "danglingLifetimeUserConstructor" always "danglingLifetimeUserConstructor"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "danglingLifetimeAggegrateConstructor" always "danglingLifetimeAggegrateConstructor"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "danglingLifetimeInitList" always "danglingLifetimeInitList"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "danglingLifetimeImplicitConversion" always "danglingLifetimeImplicitConversion"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "danglingTemporaryLifetime" always "danglingTemporaryLifetime"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "danglingLifetimeBorrowedMembers" always "danglingLifetimeBorrowedMembers"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "danglingLifetimeClassMemberFunctions" always "danglingLifetimeClassMemberFunctions"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "invalidLifetime" always "invalidLifetime"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "deadPointer" always "deadPointer"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "splitNamespaceAuto" always "splitNamespaceAuto"
  false always 0
  false always 0
Line 170
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  170 always 170
  "void func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}" always "void func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}"
Line 175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  175 always 175
  "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 177
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  177 always 177
  "void func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}" always "void func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}"
Line 182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  182 always 182
  "[test.cpp:4]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:4]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 184
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  184 always 184
  "void func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}" always "void func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}"
Line 189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  189 always 189
  "" always ""
Line 193
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  193 always 193
  "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}" always "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    *res = &num;\n}"
Line 201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  201 always 201
  "[test.cpp:7]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:7]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 203
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  203 always 203
  "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}" always "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    res = &num;\n}"
Line 211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  211 always 211
  "[test.cpp:7]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:7]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 213
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  213 always 213
  "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}" always "class Fred {\n    void func1(int **res);\n}\nvoid Fred::func1(int **res)\n{\n    int num = 2;\n    foo.res = &num;\n}"
Line 221
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  221 always 221
  "" always ""
Line 225
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  225 always 225
  "void foo(int **p)\n{\n    int x[100];\n    *p = x;\n}" always "void foo(int **p)\n{\n    int x[100];\n    *p = x;\n}"
Line 230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  230 always 230
  "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 234
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  234 always 234
  "void foo(int **p)\n{\n    static int x[100];\n    *p = x;\n}" always "void foo(int **p)\n{\n    static int x[100];\n    *p = x;\n}"
Line 239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  239 always 239
  "" always ""
Line 243
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  243 always 243
  "void foo(struct AB *ab)\n{\n    char a;\n    ab->a = &a;\n}" always "void foo(struct AB *ab)\n{\n    char a;\n    ab->a = &a;\n}"
Line 248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  248 always 248
  "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 252
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  252 always 252
  "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}" always "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}"
  false always 0
Line 257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  257 always 257
  "" always ""
Line 259
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  259 always 259
  "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}" always "void foo(struct X *x)\n{\n    char a[10];\n    x->str = a;\n}"
  true always 1
Line 264
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  264 always 264
  "[test.cpp:4]: (error, inconclusive) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:4]: (error, inconclusive) Address of local auto-variable assigned to a function parameter.\n"
Line 268
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  268 always 268
  "struct txt_scrollpane_s * TXT_NewScrollPane(struct txt_widget_s * target)\n{\n    struct txt_scrollpane_s * scrollpane;\n    target->parent = &scrollpane->widget;\n    return scrollpane;\n}" always "struct txt_scrollpane_s * TXT_NewScrollPane(struct txt_widget_s * target)\n{\n    struct txt_scrollpane_s * scrollpane;\n    target->parent = &scrollpane->widget;\n    return scrollpane;\n}"
  false always 0
Line 274
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  274 always 274
  "" always ""
Line 278
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  278 always 278
  "void foo(int*& p) {\n    int i = 0;\n    p = &i;\n}" always "void foo(int*& p) {\n    int i = 0;\n    p = &i;\n}"
  false always 0
Line 282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  282 always 282
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 284
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  284 always 284
  "void foo(std::string& s) {\n    s = foo;\n}" always "void foo(std::string& s) {\n    s = foo;\n}"
  false always 0
Line 287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  287 always 287
  "" always ""
Line 291
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  291 always 291
  "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fn.i;\n}" always "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fn.i;\n}"
  false always 0
Line 298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  298 always 298
  "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 300
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  300 always 300
  "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &p_fp->i;\n}" always "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &p_fp->i;\n}"
  false always 0
Line 307
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  307 always 307
  "" always ""
Line 309
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  309 always 309
  "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fp.f->i;\n}" always "struct FN {int i;};\nstruct FP {FN* f};\nvoid foo(int*& p, FN* p_fp) {\n    FN fn;\n    FP fp;\n    p = &fp.f->i;\n}"
  false always 0
Line 316
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  316 always 316
  "" always ""
Line 320
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  320 always 320
  "void foo(char* p) {\n    p = 0;\n}" always "void foo(char* p) {\n    p = 0;\n}"
Line 323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  323 always 323
  "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 325
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  325 always 325
  "void foo(int b) {\n    b = foo(b);\n}" always "void foo(int b) {\n    b = foo(b);\n}"
Line 328
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  328 always 328
  "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" always "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n"
Line 330
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  330 always 330
  "void foo(int b) {\n    b += 1;\n}" always "void foo(int b) {\n    b += 1;\n}"
Line 333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  333 always 333
  "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" always "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n"
Line 335
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  335 always 335
  "void foo(std::string s) {\n    s = foo(b);\n}" always "void foo(std::string s) {\n    s = foo(b);\n}"
Line 338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  338 always 338
  "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n" always "[test.cpp:2]: (style) Assignment of function parameter has no effect outside the function.\n"
Line 340
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  340 always 340
  "void foo(char* p) {\n  p = p;\n}" always "void foo(char* p) {\n  p = p;\n}"
Line 343
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  343 always 343
  "" always ""
Line 345
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  345 always 345
  "void foo(char* p) {\n    if (!p) p = buf;\n    *p = 0;\n}" always "void foo(char* p) {\n    if (!p) p = buf;\n    *p = 0;\n}"
Line 349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  349 always 349
  "" always ""
Line 351
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  351 always 351
  "void foo(char* p) {\n    if (!p) p = buf;\n    do_something(p);\n}" always "void foo(char* p) {\n    if (!p) p = buf;\n    do_something(p);\n}"
Line 355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  355 always 355
  "" always ""
Line 357
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  357 always 357
  "void foo(char* p) {\n    while (!p) p = buf;\n}" always "void foo(char* p) {\n    while (!p) p = buf;\n}"
Line 360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  360 always 360
  "" always ""
Line 362
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  362 always 362
  "void foo(char* p) {\n    p = 0;\n    asm(\"somecmd\");\n}" always "void foo(char* p) {\n    p = 0;\n    asm(\"somecmd\");\n}"
Line 366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  366 always 366
  "" always ""
Line 368
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  368 always 368
  "void foo(Foo* p) {\n    p = 0;\n}" always "void foo(Foo* p) {\n    p = 0;\n}"
Line 371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  371 always 371
  "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 373
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  373 always 373
  "class Foo {};\nvoid foo(Foo p) {\n    p = 0;\n}" always "class Foo {};\nvoid foo(Foo p) {\n    p = 0;\n}"
Line 377
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  377 always 377
  "[test.cpp:3]: (style) Assignment of function parameter has no effect outside the function.\n" always "[test.cpp:3]: (style) Assignment of function parameter has no effect outside the function.\n"
Line 379
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  379 always 379
  "void foo(Foo p) {\n    p = 0;\n}" always "void foo(Foo p) {\n    p = 0;\n}"
Line 382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  382 always 382
  "" always ""
Line 384
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  384 always 384
  "void foo(int& p) {\n    p = 0;\n}" always "void foo(int& p) {\n    p = 0;\n}"
Line 387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  387 always 387
  "" always ""
Line 389
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  389 always 389
  "double foo(double d) {\n    int i = d;\n    d = i;\n    return d;}" always "double foo(double d) {\n    int i = d;\n    d = i;\n    return d;}"
  false always 0
Line 394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  394 always 394
  "" always ""
Line 396
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  396 always 396
  "void foo(int* ptr) {\n    ptr++;\n}" always "void foo(int* ptr) {\n    ptr++;\n}"
Line 399
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  399 always 399
  "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 401
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  401 always 401
  "void foo(int* ptr) {\n    --ptr;\n}" always "void foo(int* ptr) {\n    --ptr;\n}"
Line 404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  404 always 404
  "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n" always "[test.cpp:2]: (warning) Assignment of function parameter has no effect outside the function. Did you forget dereferencing it?\n"
Line 406
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  406 always 406
  "void foo(struct S* const x) {\n    ++x->n;\n}" always "void foo(struct S* const x) {\n    ++x->n;\n}"
Line 409
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  409 always 409
  "" always ""
Line 413
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  413 always 413
  "struct A {\n    char (*data)[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &(*a.data)[0];\n}" always "struct A {\n    char (*data)[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &(*a.data)[0];\n}"
Line 420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  420 always 420
  "" always ""
Line 422
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  422 always 422
  "struct A {\n    char data[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &a.data[0];\n}" always "struct A {\n    char data[10];\n};\nvoid foo(char** p) {\n    struct A a = bar();\n    *p = &a.data[0];\n}"
Line 429
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  429 always 429
  "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 431
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  431 always 431
  "void f(char **out) {\n  struct S *p = glob;\n  *out = &p->data;\n}" always "void f(char **out) {\n  struct S *p = glob;\n  *out = &p->data;\n}"
Line 435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  435 always 435
  "" always ""
Line 438
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  438 always 438
  "void f(s8**out) {\n  s8 *p;\n  *out = &p[1];\n}" always "void f(s8**out) {\n  s8 *p;\n  *out = &p[1];\n}"
Line 442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  442 always 442
  "" always ""
Line 444
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  444 always 444
  "void f(s8**out) {\n  s8 p[10];\n  *out = &p[1];\n}" always "void f(s8**out) {\n  s8 p[10];\n  *out = &p[1];\n}"
Line 448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  448 always 448
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 452
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  452 always 452
  "void f(int* a) { a = }" always "void f(int* a) { a = }"
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  452 always 452
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  452 always 452
  false always 0
Line 453
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  453 always 453
  "struct custom_type { custom_type(int) {} };\nvoid func(int) {}\nint var;\nvoid init() { func(var); }\nUNKNOWN_MACRO_EXPANDING_TO_SIGNATURE { custom_type a(var); }" always "struct custom_type { custom_type(int) {} };\nvoid func(int) {}\nint var;\nvoid init() { func(var); }\nUNKNOWN_MACRO_EXPANDING_TO_SIGNATURE { custom_type a(var); }"
Line 461
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  461 always 461
  "class FileManager {\n  FileManager() : UniqueRealDirs(*new UniqueDirContainer())\n  {}\n  ~FileManager() {\n    delete &UniqueRealDirs;\n   }\n};" always "class FileManager {\n  FileManager() : UniqueRealDirs(*new UniqueDirContainer())\n  {}\n  ~FileManager() {\n    delete &UniqueRealDirs;\n   }\n};"
Line 471
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  471 always 471
  "void f(int x) {\nlabel:  if (x>0) {\n    x = x >> 1;\n    goto label;\n  }\n}" always "void f(int x) {\nlabel:  if (x>0) {\n    x = x >> 1;\n    goto label;\n  }\n}"
Line 478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  478 always 478
  "" always ""
Line 482
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  482 always 482
  "static const float4  darkOutline(0.05f, 0.05f, 0.05f, 0.95f);\nstatic const float darkLuminosity = 0.05 +\n                                    0.0722f * math::powf(darkOutline[2], 2.2);\nconst float4* ChooseOutlineColor(const float4& textColor)  {\n    const float lumdiff = something;\n    if (lumdiff > 5.0f)\n        return &darkOutline;\n    return 0;\n}" always "static const float4  darkOutline(0.05f, 0.05f, 0.05f, 0.95f);\nstatic const float darkLuminosity = 0.05 +\n                                    0.0722f * math::powf(darkOutline[2], 2.2);\nconst float4* ChooseOutlineColor(const float4& textColor)  {\n    const float lumdiff = something;\n    if (lumdiff > 5.0f)\n        return &darkOutline;\n    return 0;\n}"
  false always 0
Line 491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  491 always 491
  "" always ""
Line 495
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  495 always 495
  "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}" always "void f(const void* ptr, bool* result) {\n  int dummy;\n  *result = (&dummy < ptr);\n}"
Line 499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  499 always 499
  "" always ""
Line 503
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  503 always 503
  "void func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}" always "void func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}"
Line 508
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  508 always 508
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 512
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  512 always 512
  "class Fred {\n    void func1(int* arr[2]);\n}\nvoid Fred::func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}" always "class Fred {\n    void func1(int* arr[2]);\n}\nvoid Fred::func1(int* arr[2])\n{\n    int num=2;    arr[0]=&num;\n}"
Line 520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  520 always 520
  "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:6]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 524
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  524 always 524
  "void f(XmDestinationCallbackStruct *ds)\n{\n    XPoint DropPoint;\n    ds->location_data = (XtPointer *)&DropPoint;\n}" always "void f(XmDestinationCallbackStruct *ds)\n{\n    XPoint DropPoint;\n    ds->location_data = (XtPointer *)&DropPoint;\n}"
Line 529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  529 always 529
  "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:4]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 533
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  533 always 533
  "void remove_duplicate_matches (char **matches) {\n  char dead_slot;\n  matches[0] = (char *)&dead_slot;\n}" always "void remove_duplicate_matches (char **matches) {\n  char dead_slot;\n  matches[0] = (char *)&dead_slot;\n}"
Line 537
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  537 always 537
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 541
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  541 always 541
  "int* func1()\n{\n    int num=2;    return &num;}" always "int* func1()\n{\n    int num=2;    return &num;}"
Line 546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  546 always 546
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:3]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n"
Line 550
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  550 always 550
  "class Fred {\n    int* func1();\n}\nint* Fred::func1()\n{\n    int num=2;    return &num;}" always "class Fred {\n    int* func1();\n}\nint* Fred::func1()\n{\n    int num=2;    return &num;}"
Line 558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  558 always 558
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6]: (error) Returning pointer to local variable 'num' that will be invalid when returning.\n"
Line 563
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  563 always 563
  "void** f()\n{\n    void *&value = tls[id];    return &value;}" always "void** f()\n{\n    void *&value = tls[id];    return &value;}"
Line 568
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  568 always 568
  "" always ""
Line 573
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  573 always 573
  "void foo() {\n  int cond2;\n  dostuff([&cond2]() { return &cond2; });\n}" always "void foo() {\n  int cond2;\n  dostuff([&cond2]() { return &cond2; });\n}"
Line 577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  577 always 577
  "" always ""
Line 581
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  581 always 581
  "struct foo *f()\n{\n    extern struct foo f;\n    return &f;\n}" always "struct foo *f()\n{\n    extern struct foo f;\n    return &f;\n}"
Line 586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  586 always 586
  "" always ""
Line 590
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  590 always 590
  "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  pcb->root0 = 0;\n}" always "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  pcb->root0 = 0;\n}"
Line 596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  596 always 596
  "" always ""
Line 598
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  598 always 598
  "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition) return;\n  pcb->root0 = 0;\n}" always "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition) return;\n  pcb->root0 = 0;\n}"
Line 605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  605 always 605
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 607
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  607 always 607
  "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition)\n    pcb->root0 = 0;\n}" always "void foo(cb* pcb) {\n  int root0;\n  pcb->root0 = &root0;\n  dostuff(pcb);\n  if (condition)\n    pcb->root0 = 0;\n}"
Line 614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  614 always 614
  "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:3]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 618
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  618 always 618
  "void func1() {\n    char tmp1[256];\n    free(tmp1);\n    char tmp2[256];\n    delete tmp2;\n    char tmp3[256];\n    delete tmp3;\n    char tmp4[256];\n    delete[] (tmp4);\n    char tmp5[256];\n    delete[] tmp5;\n}" always "void func1() {\n    char tmp1[256];\n    free(tmp1);\n    char tmp2[256];\n    delete tmp2;\n    char tmp3[256];\n    delete tmp3;\n    char tmp4[256];\n    delete[] (tmp4);\n    char tmp5[256];\n    delete[] tmp5;\n}"
Line 630
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  630 always 630
  "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:7]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:11]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:7]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of an auto-variable results in undefined behaviour.\n[test.cpp:11]: (error) Deallocation of an auto-variable results in undefined behaviour.\n"
Line 636
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  636 always 636
  "void func1(char * ptr) {\n    free(ptr);\n}" always "void func1(char * ptr) {\n    free(ptr);\n}"
Line 639
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  639 always 639
  "" always ""
Line 641
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  641 always 641
  "void func1() {\n    char* tmp1[256];\n    init(tmp1);\n    delete tmp1[34];\n}" always "void func1() {\n    char* tmp1[256];\n    init(tmp1);\n    delete tmp1[34];\n}"
Line 646
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  646 always 646
  "" always ""
Line 648
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  648 always 648
  "void func1() {\n    static char tmp1[256];\n    char *p = tmp1;\n    free(p);\n}" always "void func1() {\n    static char tmp1[256];\n    char *p = tmp1;\n    free(p);\n}"
Line 653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  653 always 653
  "[test.cpp:4]: (error) Deallocation of a static variable (tmp1) results in undefined behaviour.\n" always "[test.cpp:4]: (error) Deallocation of a static variable (tmp1) results in undefined behaviour.\n"
Line 655
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  655 always 655
  "char tmp1[256];\nvoid func1() {\n    char *p; if (x) p = tmp1;\n    free(p);\n}" always "char tmp1[256];\nvoid func1() {\n    char *p; if (x) p = tmp1;\n    free(p);\n}"
Line 660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  660 always 660
  "[test.cpp:4]: (error) Deallocation of a global variable (tmp1) results in undefined behaviour.\n" always "[test.cpp:4]: (error) Deallocation of a global variable (tmp1) results in undefined behaviour.\n"
Line 662
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  662 always 662
  "void f()\n{\n    char psz_title[10];\n    {\n        char *psz_title = 0;\n        abc(0, psz_title);\n        free(psz_title);\n    }\n}" always "void f()\n{\n    char psz_title[10];\n    {\n        char *psz_title = 0;\n        abc(0, psz_title);\n        free(psz_title);\n    }\n}"
Line 671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  671 always 671
  "" always ""
Line 674
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  674 always 674
  "int main() {\n   int *p = malloc(4);\n   free(&p);\n   return 0;\n}" always "int main() {\n   int *p = malloc(4);\n   free(&p);\n   return 0;\n}"
Line 679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  679 always 679
  "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n"
Line 680
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  680 always 680
  "int main() {\n   int i;\n   free(&i);\n   return 0;\n}" always "int main() {\n   int i;\n   free(&i);\n   return 0;\n}"
Line 685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  685 always 685
  "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n"
Line 688
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  688 always 688
  "int main() {\n   long (*pKoeff)[256] = new long[9][256];\n   delete[] pKoeff;\n}" always "int main() {\n   long (*pKoeff)[256] = new long[9][256];\n   delete[] pKoeff;\n}"
Line 692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  692 always 692
  "" always ""
Line 694
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  694 always 694
  "int main() {\n   long *pKoeff[256];\n   delete[] pKoeff;\n}" always "int main() {\n   long *pKoeff[256];\n   delete[] pKoeff;\n}"
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  698 always 698
  "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n"
Line 700
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  700 always 700
  "int main() {\n   long *pKoeff[256];\n   free (pKoeff);\n}" always "int main() {\n   long *pKoeff[256];\n   free (pKoeff);\n}"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  704 always 704
  "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of an auto-variable results in undefined behaviour.\n"
Line 706
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  706 always 706
  "void foo() {\n   const intPtr& intref = Getter();\n   delete intref;\n}" always "void foo() {\n   const intPtr& intref = Getter();\n   delete intref;\n}"
Line 710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  710 always 710
  "" always ""
Line 712
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  712 always 712
  "void test() {\n   MyObj& obj = *new MyObj;\n   delete &obj;\n}" always "void test() {\n   MyObj& obj = *new MyObj;\n   delete &obj;\n}"
Line 716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  716 always 716
  "" always ""
Line 719
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  719 always 719
  "struct F {\n  void free(void*) {}\n};\nvoid foo() {\n  char c1[1];\n  F().free(c1);\n  char *c2 = 0;\n  F().free(&c2);\n}" always "struct F {\n  void free(void*) {}\n};\nvoid foo() {\n  char c1[1];\n  F().free(c1);\n  char *c2 = 0;\n  F().free(&c2);\n}"
Line 728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  728 always 728
  "" always ""
Line 730
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  730 always 730
  "class foo {\n  void free(void* );\n  void someMethod() {\n    char **dst_copy = NULL;\n    free(&dst_copy);\n  }\n};" always "class foo {\n  void free(void* );\n  void someMethod() {\n    char **dst_copy = NULL;\n    free(&dst_copy);\n  }\n};"
Line 737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  737 always 737
  "" always ""
Line 740
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  740 always 740
  "bool foo( ) {\n  SwTxtFld * pTxtFld = GetFldTxtAttrAt();\n  delete static_cast<SwFmtFld*>(&pTxtFld->GetAttr());\n}" always "bool foo( ) {\n  SwTxtFld * pTxtFld = GetFldTxtAttrAt();\n  delete static_cast<SwFmtFld*>(&pTxtFld->GetAttr());\n}"
Line 744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  744 always 744
  "" always ""
Line 747
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  747 always 747
  "void f() {\n    char stack[512];\n    RGNDATA *data;\n    if (data_size > sizeof (stack)) data = malloc (data_size);\n    else data = (RGNDATA *)stack;\n    if ((char *)data != stack) free (data);\n}" always "void f() {\n    char stack[512];\n    RGNDATA *data;\n    if (data_size > sizeof (stack)) data = malloc (data_size);\n    else data = (RGNDATA *)stack;\n    if ((char *)data != stack) free (data);\n}"
Line 754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  754 always 754
  "" always ""
Line 757
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  757 always 757
  "void f(char **args1, char *args2[]) {\n    free((char **)args1);\n    free((char **)args2);\n}" always "void f(char **args1, char *args2[]) {\n    free((char **)args1);\n    free((char **)args2);\n}"
Line 761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  761 always 761
  "" always ""
Line 764
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  764 always 764
  "struct Array {\n    ~Array() { delete m_Arr; }\n    std::array<long, 256>* m_Arr{};\n};\nArray arr;\n" always "struct Array {\n    ~Array() { delete m_Arr; }\n    std::array<long, 256>* m_Arr{};\n};\nArray arr;\n"
Line 769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  769 always 769
  "" always ""
Line 774
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  774 always 774
  "void f(int* a[]) {\n    free(a);\n}\n" always "void f(int* a[]) {\n    free(a);\n}\n"
Line 777
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  777 always 777
  "" always ""
Line 779
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  779 always 779
  "void f(int a[]) {\n    free(a);\n}\n" always "void f(int a[]) {\n    free(a);\n}\n"
Line 782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  782 always 782
  "" always ""
Line 784
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  784 always 784
  "void f(int* a[]) {\n    int * p = *a;\n    free(p);\n    int ** q = a;\n    free(q);\n}\n" always "void f(int* a[]) {\n    int * p = *a;\n    free(p);\n    int ** q = a;\n    free(q);\n}\n"
Line 790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  790 always 790
  "" always ""
Line 792
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  792 always 792
  "void f(int a[]) {\n    int * p = a;\n    free(p);\n}\n" always "void f(int a[]) {\n    int * p = a;\n    free(p);\n}\n"
Line 796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  796 always 796
  "" always ""
Line 801
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  801 always 801
  "void f() {\n    char *ptr = \"a\";\n    free(\"a\");\n    delete \"a\";\n    free(ptr);\n    delete ptr;\n    char * p = malloc(1000);\n    p = \"abc\";\n    free(p);\n}\n" always "void f() {\n    char *ptr = \"a\";\n    free(\"a\");\n    delete \"a\";\n    free(ptr);\n    delete ptr;\n    char * p = malloc(1000);\n    p = \"abc\";\n    free(p);\n}\n"
Line 811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  811 always 811
  "[test.cpp:3]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:4]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:6]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of a pointer pointing to a string literal (\"abc\") results in undefined behaviour.\n" always "[test.cpp:3]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:4]: (error) Deallocation of a string literal results in undefined behaviour.\n[test.cpp:5]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:6]: (error) Deallocation of a pointer pointing to a string literal (\"a\") results in undefined behaviour.\n[test.cpp:9]: (error) Deallocation of a pointer pointing to a string literal (\"abc\") results in undefined behaviour.\n"
Line 818
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  818 always 818
  "void f() {\n   char *ptr = malloc(10);\n   char *empty_str = \"\";\n   if (ptr == NULL)\n      ptr = empty_str;\n   if (ptr != empty_str)\n      free(ptr);\n}\n" always "void f() {\n   char *ptr = malloc(10);\n   char *empty_str = \"\";\n   if (ptr == NULL)\n      ptr = empty_str;\n   if (ptr != empty_str)\n      free(ptr);\n}\n"
Line 826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  826 always 826
  "" always ""
Line 831
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  831 always 831
  "void svn_repos_dir_delta2() {\n  struct context c;\n      SVN_ERR(delete(&c, root_baton, src_entry, pool));\n}\n" always "void svn_repos_dir_delta2() {\n  struct context c;\n      SVN_ERR(delete(&c, root_baton, src_entry, pool));\n}\n"
  false always 0
  "test.c" always "test.c"
Line 835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  835 always 835
  "" always ""
Line 839
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  839 always 839
  "void f(EventPtr *eventP, ActionPtr **actionsP) {\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}" always "void f(EventPtr *eventP, ActionPtr **actionsP) {\n    EventPtr event = *eventP;\n    *actionsP = &event->actions;\n}"
Line 843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  843 always 843
  "" always ""
Line 847
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  847 always 847
  "static void function(unsigned long **datap) {\n    struct my_s *mr = global_structure_pointer;\n    *datap = &mr->value;\n}" always "static void function(unsigned long **datap) {\n    struct my_s *mr = global_structure_pointer;\n    *datap = &mr->value;\n}"
Line 851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  851 always 851
  "" always ""
Line 855
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  855 always 855
  "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n}" always "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n}"
Line 860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  860 always 860
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n"
Line 862
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  862 always 862
  "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n  p = 0;\n}" always "int *p;\nvoid f() {\n  int x[10];\n  p = x;\n  p = 0;\n}"
Line 868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  868 always 868
  "" always ""
Line 872
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  872 always 872
  "int *p;\nvoid f() {\n  int x;\n  p = &x;\n}" always "int *p;\nvoid f() {\n  int x;\n  p = &x;\n}"
Line 877
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  877 always 877
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'p' will use pointer to local variable 'x'.\n"
Line 879
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  879 always 879
  "int *p;\nvoid f() {\n  int x;\n  p = &x;\n  p = 0;\n}" always "int *p;\nvoid f() {\n  int x;\n  p = &x;\n  p = 0;\n}"
Line 885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  885 always 885
  "" always ""
Line 889
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  889 always 889
  "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n  }\n  int *ptr;\n};" always "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n  }\n  int *ptr;\n};"
Line 896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  896 always 896
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'ptr' will use pointer to local variable 'x'.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Non-local variable 'ptr' will use pointer to local variable 'x'.\n"
Line 898
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  898 always 898
  "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n    ptr = 0;\n  }\n  int *ptr;\n};" always "struct A {\n  void f() {\n    int x;\n    ptr = &x;\n    ptr = 0;\n  }\n  int *ptr;\n};"
Line 906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  906 always 906
  "" always ""
Line 910
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  910 always 910
  "char *foo()\n{\n    char str[100] = {0};\n    return str;\n}" always "char *foo()\n{\n    char str[100] = {0};\n    return str;\n}"
Line 915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  915 always 915
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n"
Line 919
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  919 always 919
  "char *foo()\n{\n    char str[100] = {0};\n    char *p = str;\n    return p;\n}" always "char *foo()\n{\n    char str[100] = {0};\n    char *p = str;\n    return p;\n}"
Line 925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  925 always 925
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n"
Line 929
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  929 always 929
  "class Fred {\n    char *foo();\n};\nchar *Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}" always "class Fred {\n    char *foo();\n};\nchar *Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}"
Line 937
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  937 always 937
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning pointer to local variable 'str' that will be invalid when returning.\n"
Line 941
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  941 always 941
  "char * format_reg(char *outbuffer_start) {\n    return outbuffer_start;\n}\nvoid print_with_operands() {\n    char temp[42];\n    char *tp = temp;\n    tp = format_reg(tp);\n}" always "char * format_reg(char *outbuffer_start) {\n    return outbuffer_start;\n}\nvoid print_with_operands() {\n    char temp[42];\n    char *tp = temp;\n    tp = format_reg(tp);\n}"
Line 949
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  949 always 949
  "" always ""
Line 953
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  953 always 953
  "std::string foo()\n{\n    char str[100] = {0};\n    return str;\n}" always "std::string foo()\n{\n    char str[100] = {0};\n    return str;\n}"
Line 958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  958 always 958
  "" always ""
Line 960
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  960 always 960
  "class Fred {\n    std::string foo();\n};\nstd::string Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}" always "class Fred {\n    std::string foo();\n};\nstd::string Fred::foo()\n{\n    char str[100] = {0};\n    return str;\n}"
Line 968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  968 always 968
  "" always ""
Line 974
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  974 always 974
  "char *foo() {\n    char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}" always "char *foo() {\n    char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}"
Line 978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  978 always 978
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n"
Line 980
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  980 always 980
  "char *foo()\n{\n    static char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}" always "char *foo()\n{\n    static char q[] = \"AAAAAAAAAAAA\";\n    return &q[1];\n}"
Line 985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  985 always 985
  "" always ""
Line 987
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  987 always 987
  "char *foo()\n{\nchar q[] = \"AAAAAAAAAAAA\";\nchar *p;\np = &q[1];\nreturn p;\n}" always "char *foo()\n{\nchar q[] = \"AAAAAAAAAAAA\";\nchar *p;\np = &q[1];\nreturn p;\n}"
Line 994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  994 always 994
  "[test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n" always "[test.cpp:5] -> [test.cpp:3] -> [test.cpp:6]: (error) Returning pointer to local variable 'q' that will be invalid when returning.\n"
Line 998
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  998 always 998
  "char *foo() {\n    char x[10] = {0};\n    return x+5;\n}" always "char *foo() {\n    char x[10] = {0};\n    return x+5;\n}"
Line 1002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1002 always 1002
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1006
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1006 always 1006
  "char *foo(int y) {\n    char x[10] = {0};\n    return (x+8)-y;\n}" always "char *foo(int y) {\n    char x[10] = {0};\n    return (x+8)-y;\n}"
Line 1010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1010 always 1010
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1016
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1016 always 1016
  "char *foo() {\n    int x[10] = {0};\n    return (char *)x;\n}" always "char *foo() {\n    int x[10] = {0};\n    return (char *)x;\n}"
Line 1020
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1020 always 1020
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1026
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1026 always 1026
  "int *foo() {\n    int x = 123;\n    int p = &x;\n    return p;\n}" always "int *foo() {\n    int x = 123;\n    int p = &x;\n    return p;\n}"
Line 1031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1031 always 1031
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n"
Line 1035
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1035 always 1035
  "int &foo()\n{\n    int s = 0;\n    int& x = s;\n    return x;\n}" always "int &foo()\n{\n    int s = 0;\n    int& x = s;\n    return x;\n}"
Line 1041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1041 always 1041
  "[test.cpp:4] -> [test.cpp:5]: (error) Reference to local variable returned.\n" always "[test.cpp:4] -> [test.cpp:5]: (error) Reference to local variable returned.\n"
Line 1043
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1043 always 1043
  "std::string &foo()\n{\n    std::string s;\n    return s;\n}" always "std::string &foo()\n{\n    std::string s;\n    return s;\n}"
Line 1048
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1048 always 1048
  "[test.cpp:4]: (error) Reference to local variable returned.\n" always "[test.cpp:4]: (error) Reference to local variable returned.\n"
Line 1050
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1050 always 1050
  "std::vector<int> &foo()\n{\n    std::vector<int> v;\n    return v;\n}" always "std::vector<int> &foo()\n{\n    std::vector<int> v;\n    return v;\n}"
Line 1055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1055 always 1055
  "[test.cpp:4]: (error) Reference to local variable returned.\n" always "[test.cpp:4]: (error) Reference to local variable returned.\n"
Line 1057
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1057 always 1057
  "std::vector<int> &foo()\n{\n    static std::vector<int> v;\n    return v;\n}" always "std::vector<int> &foo()\n{\n    static std::vector<int> v;\n    return v;\n}"
Line 1062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1062 always 1062
  "" always ""
Line 1064
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1064 always 1064
  "std::vector<int> &foo()\n{\n    thread_local std::vector<int> v;\n    return v;\n}" always "std::vector<int> &foo()\n{\n    thread_local std::vector<int> v;\n    return v;\n}"
Line 1069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1069 always 1069
  "" always ""
Line 1071
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1071 always 1071
  "std::string hello()\n{\n     return \"hello\";\n}\n\nstd::string &f()\n{\n    return hello();\n}" always "std::string hello()\n{\n     return \"hello\";\n}\n\nstd::string &f()\n{\n    return hello();\n}"
Line 1080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1080 always 1080
  "[test.cpp:8]: (error) Reference to temporary returned.\n" always "[test.cpp:8]: (error) Reference to temporary returned.\n"
Line 1083
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1083 always 1083
  "class Fred {\n    std::string hello() {\n        return std::string();\n    }\n};\nstd::string &f() {\n    return hello();\n}" always "class Fred {\n    std::string hello() {\n        return std::string();\n    }\n};\nstd::string &f() {\n    return hello();\n}"
Line 1091
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1091 always 1091
  "" always ""
Line 1093
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1093 always 1093
  "std::string hello() {\n     return std::string();\n}\n\nstd::string &f() {\n    return hello();\n}" always "std::string hello() {\n     return std::string();\n}\n\nstd::string &f() {\n    return hello();\n}"
Line 1100
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1100 always 1100
  "[test.cpp:6]: (error) Reference to temporary returned.\n" always "[test.cpp:6]: (error) Reference to temporary returned.\n"
Line 1102
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1102 always 1102
  "std::string hello() {\n     return \"foo\";\n}\n\nstd::string &f() {\n    return hello().substr(1);\n}" always "std::string hello() {\n     return \"foo\";\n}\n\nstd::string &f() {\n    return hello().substr(1);\n}"
Line 1109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1109 always 1109
  "[test.cpp:6]: (error) Reference to temporary returned.\n" always "[test.cpp:6]: (error) Reference to temporary returned.\n"
Line 1111
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1111 always 1111
  "class Foo;\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}" always "class Foo;\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}"
Line 1119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1119 always 1119
  "[test.cpp:7]: (error) Reference to temporary returned.\n" always "[test.cpp:7]: (error) Reference to temporary returned.\n"
Line 1122
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1122 always 1122
  "class Foo;\nFoo & hello(bool) {\n     static Foo foo;\n     return foo;\n}\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello(true);\n}" always "class Foo;\nFoo & hello(bool) {\n     static Foo foo;\n     return foo;\n}\nFoo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello(true);\n}"
Line 1134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1134 always 1134
  "" always ""
Line 1136
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1136 always 1136
  "Foo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}" always "Foo hello() {\n     return Foo();\n}\n\nFoo& f() {\n    return hello();\n}"
Line 1143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1143 always 1143
  "" always ""
Line 1147
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1147 always 1147
  "class Fred {\n    std::string &foo();\n}\nstd::string &Fred::foo()\n{\n    std::string s;\n    return s;\n}" always "class Fred {\n    std::string &foo();\n}\nstd::string &Fred::foo()\n{\n    std::string s;\n    return s;\n}"
Line 1155
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1155 always 1155
  "[test.cpp:7]: (error) Reference to local variable returned.\n" always "[test.cpp:7]: (error) Reference to local variable returned.\n"
Line 1157
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1157 always 1157
  "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    std::vector<int> v;\n    return v;\n}" always "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    std::vector<int> v;\n    return v;\n}"
Line 1165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1165 always 1165
  "[test.cpp:7]: (error) Reference to local variable returned.\n" always "[test.cpp:7]: (error) Reference to local variable returned.\n"
Line 1167
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1167 always 1167
  "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    static std::vector<int> v;\n    return v;\n}" always "class Fred {\n    std::vector<int> &foo();\n};\nstd::vector<int> &Fred::foo()\n{\n    static std::vector<int> v;\n    return v;\n}"
Line 1175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1175 always 1175
  "" always ""
Line 1177
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1177 always 1177
  "class Fred {\n    std::string &f();\n};\nstd::string hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}" always "class Fred {\n    std::string &f();\n};\nstd::string hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}"
Line 1188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1188 always 1188
  "[test.cpp:10]: (error) Reference to temporary returned.\n" always "[test.cpp:10]: (error) Reference to temporary returned.\n"
Line 1190
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1190 always 1190
  "class Fred {\n    std::string hello();\n    std::string &f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}" always "class Fred {\n    std::string hello();\n    std::string &f();\n};\nstd::string Fred::hello()\n{\n     return \"hello\";\n}\nstd::string &Fred::f()\n{\n    return hello();\n}"
Line 1202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1202 always 1202
  "[test.cpp:11]: (error) Reference to temporary returned.\n" always "[test.cpp:11]: (error) Reference to temporary returned.\n"
Line 1204
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1204 always 1204
  "class Bar;\nBar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}" always "class Bar;\nBar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}"
Line 1211
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1211 always 1211
  "[test.cpp:6]: (error) Reference to temporary returned.\n" always "[test.cpp:6]: (error) Reference to temporary returned.\n"
Line 1213
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1213 always 1213
  "std::map<int, string> foo() {\n     return something;\n}\nstd::map<int, string>& bar() {\n    return foo();\n}" always "std::map<int, string> foo() {\n     return something;\n}\nstd::map<int, string>& bar() {\n    return foo();\n}"
Line 1219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1219 always 1219
  "[test.cpp:5]: (error) Reference to temporary returned.\n" always "[test.cpp:5]: (error) Reference to temporary returned.\n"
Line 1221
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1221 always 1221
  "Bar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}" always "Bar foo() {\n     return something;\n}\nBar& bar() {\n    return foo();\n}"
Line 1227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1227 always 1227
  "" always ""
Line 1229
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1229 always 1229
  "X& a::Bar() {}X& foo() {    return Bar();}" always "X& a::Bar() {}X& foo() {    return Bar();}"
Line 1236
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1236 always 1236
  "double & f(double & rd) {\n    double ret = getValue();\n    rd = ret;\n    return rd;\n}" always "double & f(double & rd) {\n    double ret = getValue();\n    rd = ret;\n    return rd;\n}"
  false always 0
Line 1241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1241 always 1241
  "" always ""
Line 1246
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1246 always 1246
  "double a;\ndouble & f() {\n    return a;\n}" always "double a;\ndouble & f() {\n    return a;\n}"
Line 1250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1250 always 1250
  "" always ""
Line 1254
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1254 always 1254
  "struct A {\n    int i;\n};\nstruct B {\n    A a;\n};\nstruct C {\n    B *b;\n    const A& a() const {\n        const B *pb = b;\n        const A &ra = pb->a;\n        return ra;\n    }\n};" always "struct A {\n    int i;\n};\nstruct B {\n    A a;\n};\nstruct C {\n    B *b;\n    const A& a() const {\n        const B *pb = b;\n        const A &ra = pb->a;\n        return ra;\n    }\n};"
Line 1270
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1270 always 1270
  "" always ""
Line 1274
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1274 always 1274
  "Fred & create() {\n    Fred &fred(*new Fred);\n    return fred;\n}" always "Fred & create() {\n    Fred &fred(*new Fred);\n    return fred;\n}"
Line 1278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1278 always 1278
  "" always ""
Line 1282
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1282 always 1282
  "std::string a();\nstd::string &a(int);\nstd::string &b() {\n    return a(12);\n}" always "std::string a();\nstd::string &a(int);\nstd::string &b() {\n    return a(12);\n}"
Line 1287
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1287 always 1287
  "" always ""
Line 1289
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1289 always 1289
  "std::string &a(int);\nstd::string a();\nstd::string &b() {\n    return a(12);\n}" always "std::string &a(int);\nstd::string a();\nstd::string &b() {\n    return a(12);\n}"
Line 1294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1294 always 1294
  "" always ""
Line 1298
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1298 always 1298
  "int& f(std::vector<int> &v) {\n    std::vector<int>::iterator it = v.begin();\n    int& value = *it;\n    return value;\n}" always "int& f(std::vector<int> &v) {\n    std::vector<int>::iterator it = v.begin();\n    int& value = *it;\n    return value;\n}"
Line 1303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1303 always 1303
  "" always ""
Line 1307
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1307 always 1307
  "int& f(bool b, int& x, int& y) {\n    return b ? x : y;\n}" always "int& f(bool b, int& x, int& y) {\n    return b ? x : y;\n}"
Line 1310
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1310 always 1310
  "" always ""
Line 1314
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1314 always 1314
  "class A { int f() const; };\nint& g() {\n    A a;\n    return a.f();\n}" always "class A { int f() const; };\nint& g() {\n    A a;\n    return a.f();\n}"
Line 1319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1319 always 1319
  "[test.cpp:4]: (error) Reference to temporary returned.\n" always "[test.cpp:4]: (error) Reference to temporary returned.\n"
Line 1321
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1321 always 1321
  "class A { int& f() const; };\nint& g() {\n    A a;\n    return a.f();\n}" always "class A { int& f() const; };\nint& g() {\n    A a;\n    return a.f();\n}"
Line 1326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1326 always 1326
  "" always ""
Line 1330
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1330 always 1330
  "class A { static int f(); };\nint& g() {\n    return A::f();\n}" always "class A { static int f(); };\nint& g() {\n    return A::f();\n}"
Line 1334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1334 always 1334
  "[test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:3]: (error) Reference to temporary returned.\n"
Line 1336
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1336 always 1336
  "class A { static int& f(); };\nint& g() {\n    return A::f();\n}" always "class A { static int& f(); };\nint& g() {\n    return A::f();\n}"
Line 1340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1340 always 1340
  "" always ""
Line 1342
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1342 always 1342
  "namespace A { int& f(); }\nint& g() {\n    return A::f();\n}" always "namespace A { int& f(); }\nint& g() {\n    return A::f();\n}"
Line 1346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1346 always 1346
  "" always ""
Line 1350
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1350 always 1350
  "class A { static int& f(); };\nauto g() {\n    return &A::f;\n}" always "class A { static int& f(); };\nauto g() {\n    return &A::f;\n}"
Line 1354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1354 always 1354
  "" always ""
Line 1356
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1356 always 1356
  "class A { static int& f(); };\nauto g() {\n    auto x = &A::f;\n    return x;\n}" always "class A { static int& f(); };\nauto g() {\n    auto x = &A::f;\n    return x;\n}"
Line 1361
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1361 always 1361
  "" always ""
Line 1365
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1365 always 1365
  "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return ((std::vector<int>*)vp)->at(i);\n}" always "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return ((std::vector<int>*)vp)->at(i);\n}"
Line 1370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1370 always 1370
  "" always ""
Line 1372
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1372 always 1372
  "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return static_cast<std::vector<int>*>(vp)->at(i);\n}" always "std::vector<int> v;\nvoid* vp = &v;\nint& foo(size_t i) {\n    return static_cast<std::vector<int>*>(vp)->at(i);\n}"
Line 1377
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1377 always 1377
  "" always ""
Line 1381
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1381 always 1381
  "struct C { void* m; };\nstruct A { void* &f(); };\nC* g() {\n    static C c;\n    return &c;\n}\nvoid* &A::f() {\n    return g()->m;\n}" always "struct C { void* m; };\nstruct A { void* &f(); };\nC* g() {\n    static C c;\n    return &c;\n}\nvoid* &A::f() {\n    return g()->m;\n}"
Line 1390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1390 always 1390
  "" always ""
Line 1394
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1394 always 1394
  "template <class T>\nconst int& f() {\n    static int s;\n    return s;\n}\ntemplate <class T>\nconst int& f(const T&) {\n    return f<T>();\n}" always "template <class T>\nconst int& f() {\n    static int s;\n    return s;\n}\ntemplate <class T>\nconst int& f(const T&) {\n    return f<T>();\n}"
Line 1403
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1403 always 1403
  "" always ""
Line 1405
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1405 always 1405
  "template <class T>\nint g();\ntemplate <class T>\nconst int& f(const T&) {\n    return g<T>();\n}" always "template <class T>\nint g();\ntemplate <class T>\nconst int& f(const T&) {\n    return g<T>();\n}"
Line 1411
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1411 always 1411
  "error" always "error"
  "" always ""
Line 1415
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1415 always 1415
  "int& f(std::tuple<int>& x) {\n    return std::get<0>(x);\n}" always "int& f(std::tuple<int>& x) {\n    return std::get<0>(x);\n}"
Line 1418
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1418 always 1418
  "" always ""
Line 1420
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1420 always 1420
  "int& f(int x) {\n    return std::get<0>(std::make_tuple(x));\n}" always "int& f(int x) {\n    return std::get<0>(std::make_tuple(x));\n}"
Line 1423
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1423 always 1423
  "error" always "error"
  "" always ""
Line 1427
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1427 always 1427
  "auto g() -> int&;\nint& f() {\n    return g();\n}" always "auto g() -> int&;\nint& f() {\n    return g();\n}"
Line 1431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1431 always 1431
  "" always ""
Line 1435
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1435 always 1435
  "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}" always "template<class T>\nauto f(T& x) -> decltype(x);\nint& g(int* x) {\n    return f(*x);\n}"
Line 1440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1440 always 1440
  "" always ""
Line 1445
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1445 always 1445
  "struct C : B {\n    const B &f() const { return (const B &)*this; }\n}" always "struct C : B {\n    const B &f() const { return (const B &)*this; }\n}"
Line 1448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1448 always 1448
  "" always ""
Line 1453
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1453 always 1453
  "struct a {\n    int& operator()() const;\n};\nint& b() {\n    return a()();\n}" always "struct a {\n    int& operator()() const;\n};\nint& b() {\n    return a()();\n}"
Line 1459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1459 always 1459
  "" always ""
Line 1461
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1461 always 1461
  "auto a() {\n    return []() -> int& {\n        static int b;\n        return b;\n    };\n}\nconst int& c() {\n    return a()();\n}" always "auto a() {\n    return []() -> int& {\n        static int b;\n        return b;\n    };\n}\nconst int& c() {\n    return a()();\n}"
Line 1470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1470 always 1470
  "" always ""
Line 1472
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1472 always 1472
  "std::function<int&()> a();\nint& b() {\n    return a()();\n}" always "std::function<int&()> a();\nint& b() {\n    return a()();\n}"
Line 1476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1476 always 1476
  "" always ""
Line 1479
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1479 always 1479
  "int f(std::vector<std::function<int&()>>& v, int i) {\n    auto& j = v[i]();\n    return j;\n}\n" always "int f(std::vector<std::function<int&()>>& v, int i) {\n    auto& j = v[i]();\n    return j;\n}\n"
Line 1483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1483 always 1483
  "" always ""
Line 1488
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1488 always 1488
  "int& f(int& x) {\n    return {x};\n}\n" always "int& f(int& x) {\n    return {x};\n}\n"
Line 1491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1491 always 1491
  "" always ""
Line 1495
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1495 always 1495
  "int& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    return *p;\n}\n" always "int& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    return *p;\n}\n"
Line 1499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1499 always 1499
  "[test.cpp:3]: (error) Reference to local variable returned.\n" always "[test.cpp:3]: (error) Reference to local variable returned.\n"
Line 1501
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1501 always 1501
  "void g(const std::unique_ptr<int>&);\nint& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    g(p);\n    return *p;\n}\n" always "void g(const std::unique_ptr<int>&);\nint& f() {\n    std::unique_ptr<int> p = std::make_unique<int>(1);\n    g(p);\n    return *p;\n}\n"
Line 1507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1507 always 1507
  "[test.cpp:5]: (error) Reference to local variable returned.\n" always "[test.cpp:5]: (error) Reference to local variable returned.\n"
Line 1509
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1509 always 1509
  "void g(std::shared_ptr<int>);\nint& f() {\n    std::shared_ptr<int> p = std::make_shared<int>(1);\n    g(p);\n    return *p;\n}\n" always "void g(std::shared_ptr<int>);\nint& f() {\n    std::shared_ptr<int> p = std::make_shared<int>(1);\n    g(p);\n    return *p;\n}\n"
Line 1515
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1515 always 1515
  "" always ""
Line 1517
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1517 always 1517
  "std::shared_ptr<int> g();\nint& f() {\n    return *g();\n}\n" always "std::shared_ptr<int> g();\nint& f() {\n    return *g();\n}\n"
Line 1521
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1521 always 1521
  "" always ""
Line 1523
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1523 always 1523
  "std::unique_ptr<int> g();\nint& f() {\n    return *g();\n}\n" always "std::unique_ptr<int> g();\nint& f() {\n    return *g();\n}\n"
Line 1527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1527 always 1527
  "[test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:3]: (error) Reference to temporary returned.\n"
Line 1529
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1529 always 1529
  "struct A { int x; };\nint& f() {\n    std::unique_ptr<A> p = std::make_unique<A>();\n    return p->x;\n}\n" always "struct A { int x; };\nint& f() {\n    std::unique_ptr<A> p = std::make_unique<A>();\n    return p->x;\n}\n"
Line 1534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1534 always 1534
  "[test.cpp:4]: (error) Reference to local variable returned.\n" always "[test.cpp:4]: (error) Reference to local variable returned.\n"
Line 1538
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1538 always 1538
  "const std::vector<int> * g();\nconst std::vector<int>& f() {\n    return *g();\n}\n" always "const std::vector<int> * g();\nconst std::vector<int>& f() {\n    return *g();\n}\n"
Line 1542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1542 always 1542
  "" always ""
Line 1547
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1547 always 1547
  "struct A {\n    A() {}\n};\nconst A& a() {\n    return A();\n}\n" always "struct A {\n    A() {}\n};\nconst A& a() {\n    return A();\n}\n"
Line 1553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1553 always 1553
  "[test.cpp:5]: (error) Reference to temporary returned.\n" always "[test.cpp:5]: (error) Reference to temporary returned.\n"
Line 1558
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1558 always 1558
  "int& f();\n    auto g() -> decltype(f()) {\n    return f();\n}\nint& h() {\n    return g();\n}\n" always "int& f();\n    auto g() -> decltype(f()) {\n    return f();\n}\nint& h() {\n    return g();\n}\n"
Line 1565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1565 always 1565
  "" always ""
Line 1569
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1569 always 1569
  "int& f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" always "int& f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}"
Line 1576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1576 always 1576
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6]: (error) Reference to local variable returned.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6]: (error) Reference to local variable returned.\n"
Line 1580
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1580 always 1580
  "int& f(int& a) {\n    return a;\n}\nint* hello() {\n    int x = 0;\n    return &f(x);\n}" always "int& f(int& a) {\n    return a;\n}\nint* hello() {\n    int x = 0;\n    return &f(x);\n}"
Line 1587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1587 always 1587
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1591
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1591 always 1591
  "int* f(int * x) {\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}" always "int* f(int * x) {\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}"
Line 1597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1597 always 1597
  "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1599
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1599 always 1599
  "int* f(int * x) {\n    x = nullptr;\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}" always "int* f(int * x) {\n    x = nullptr;\n    return x;\n}\nint * g(int x) {\n    return f(&x);\n}"
Line 1606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1606 always 1606
  "" always ""
Line 1608
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1608 always 1608
  "int f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" always "int f(int& a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}"
Line 1615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1615 always 1615
  "[test.cpp:6]: (error) Reference to temporary returned.\n" always "[test.cpp:6]: (error) Reference to temporary returned.\n"
Line 1617
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1617 always 1617
  "int& f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" always "int& f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}"
Line 1624
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1624 always 1624
  "[test.cpp:2]: (error) Reference to local variable returned.\n" always "[test.cpp:2]: (error) Reference to local variable returned.\n"
Line 1626
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1626 always 1626
  "int f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}" always "int f(int a) {\n    return a;\n}\nint& hello() {\n    int x = 0;\n    return f(x);\n}"
Line 1633
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1633 always 1633
  "[test.cpp:6]: (error) Reference to temporary returned.\n" always "[test.cpp:6]: (error) Reference to temporary returned.\n"
Line 1635
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1635 always 1635
  "template<class T>\nint& f(int& x, T y) {\n    x += y;\n    return x;\n}" always "template<class T>\nint& f(int& x, T y) {\n    x += y;\n    return x;\n}"
Line 1640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1640 always 1640
  "" always ""
Line 1644
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1644 always 1644
  "auto& f() {\n    std::vector<int> x;\n    return x[0];\n}" always "auto& f() {\n    std::vector<int> x;\n    return x[0];\n}"
Line 1648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1648 always 1648
  "[test.cpp:3]: (error) Reference to local variable returned.\n" always "[test.cpp:3]: (error) Reference to local variable returned.\n"
Line 1650
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1650 always 1650
  "auto& f() {\n    std::vector<int> x;\n    return x.front();\n}" always "auto& f() {\n    std::vector<int> x;\n    return x.front();\n}"
Line 1654
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1654 always 1654
  "[test.cpp:3] -> [test.cpp:3]: (error) Reference to local variable returned.\n" always "[test.cpp:3] -> [test.cpp:3]: (error) Reference to local variable returned.\n"
Line 1656
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1656 always 1656
  "std::vector<int> g();\nauto& f() {\n    return g().front();\n}" always "std::vector<int> g();\nauto& f() {\n    return g().front();\n}"
Line 1660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1660 always 1660
  "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n"
Line 1662
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1662 always 1662
  "auto& f() {\n    return std::vector<int>{1}.front();\n}" always "auto& f() {\n    return std::vector<int>{1}.front();\n}"
Line 1665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1665 always 1665
  "[test.cpp:2] -> [test.cpp:2]: (error) Reference to temporary returned.\n" always "[test.cpp:2] -> [test.cpp:2]: (error) Reference to temporary returned.\n"
Line 1667
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1667 always 1667
  "struct A { int foo; };\nint& f(std::vector<A> v) {\n    auto it = v.begin();\n    return it->foo;\n}" always "struct A { int foo; };\nint& f(std::vector<A> v) {\n    auto it = v.begin();\n    return it->foo;\n}"
Line 1672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1672 always 1672
  "[test.cpp:3] -> [test.cpp:4]: (error) Reference to local variable returned.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Reference to local variable returned.\n"
Line 1674
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1674 always 1674
  "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, x);\n}\n" always "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, x);\n}\n"
  true always 1
Line 1685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1685 always 1685
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:9] -> [test.cpp:9]: (error, inconclusive) Reference to local variable returned.\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:9] -> [test.cpp:9]: (error, inconclusive) Reference to local variable returned.\n"
Line 1689
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1689 always 1689
  "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    return get_default(m, k, 0);\n}\n" always "template <class T, class K, class V>\nconst V& get_default(const T& t, const K& k, const V& v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return it->second;\n}\nconst int& bar(const std::unordered_map<int, int>& m, int k) {\n    return get_default(m, k, 0);\n}\n"
  true always 1
Line 1699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1699 always 1699
  "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error, inconclusive) Reference to temporary returned.\n" always "[test.cpp:2] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error, inconclusive) Reference to temporary returned.\n"
Line 1703
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1703 always 1703
  "struct A { int foo; };\nint& f(std::vector<A>& v) {\n    auto it = v.begin();\n    return it->foo;\n}" always "struct A { int foo; };\nint& f(std::vector<A>& v) {\n    auto it = v.begin();\n    return it->foo;\n}"
Line 1708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1708 always 1708
  "" always ""
Line 1712
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1712 always 1712
  "const std::string &a() {\n    return \"foo\";\n}" always "const std::string &a() {\n    return \"foo\";\n}"
Line 1715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1715 always 1715
  "[test.cpp:2]: (error) Reference to temporary returned.\n" always "[test.cpp:2]: (error) Reference to temporary returned.\n"
Line 1717
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1717 always 1717
  "const std::string a() {\n    return \"foo\";\n}" always "const std::string a() {\n    return \"foo\";\n}"
Line 1720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1720 always 1720
  "" always ""
Line 1722
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1722 always 1722
  "const std::string& f(const std::string& x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}" always "const std::string& f(const std::string& x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1726 always 1726
  "[test.cpp:1] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:1] -> [test.cpp:1] -> [test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n"
Line 1730
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1730 always 1730
  "const char * f(const char * x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}" always "const char * f(const char * x) { return x; }\nconst std::string &a() {\n    return f(\"foo\");\n}"
Line 1734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1734 always 1734
  "[test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:3]: (error) Reference to temporary returned.\n"
Line 1738
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1738 always 1738
  "const std::string &a(const std::string& str) {\n    return \"foo\" + str;\n}" always "const std::string &a(const std::string& str) {\n    return \"foo\" + str;\n}"
Line 1741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1741 always 1741
  "[test.cpp:2]: (error) Reference to temporary returned.\n" always "[test.cpp:2]: (error) Reference to temporary returned.\n"
Line 1743
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1743 always 1743
  "int& operator<<(int out, int path) {\n    return out << path;\n}" always "int& operator<<(int out, int path) {\n    return out << path;\n}"
Line 1746
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1746 always 1746
  "[test.cpp:2]: (error) Reference to temporary returned.\n" always "[test.cpp:2]: (error) Reference to temporary returned.\n"
Line 1748
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1748 always 1748
  "std::ostream& operator<<(std::ostream& out, const std::string& path) {\n    return out << path;\n}" always "std::ostream& operator<<(std::ostream& out, const std::string& path) {\n    return out << path;\n}"
Line 1751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1751 always 1751
  "" always ""
Line 1753
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1753 always 1753
  "std::ostream& operator<<(std::ostream* out, const std::string& path) {\n    return *out << path;\n}" always "std::ostream& operator<<(std::ostream* out, const std::string& path) {\n    return *out << path;\n}"
Line 1756
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1756 always 1756
  "" always ""
Line 1758
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1758 always 1758
  "Unknown1& operator<<(Unknown1 out, Unknown2 path) {\n    return out << path;\n}" always "Unknown1& operator<<(Unknown1 out, Unknown2 path) {\n    return out << path;\n}"
Line 1761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1761 always 1761
  "" always ""
Line 1763
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1763 always 1763
  "int& a(int b) {\n    return 2*(b+1);\n}" always "int& a(int b) {\n    return 2*(b+1);\n}"
Line 1766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1766 always 1766
  "[test.cpp:2]: (error) Reference to temporary returned.\n" always "[test.cpp:2]: (error) Reference to temporary returned.\n"
Line 1768
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1768 always 1768
  "const std::string &a(const std::string& str) {\n    return str;\n}" always "const std::string &a(const std::string& str) {\n    return str;\n}"
Line 1771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1771 always 1771
  "" always ""
Line 1773
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1773 always 1773
  "const std::string &a(int bar) {\n    return foo(bar + 1);\n}" always "const std::string &a(int bar) {\n    return foo(bar + 1);\n}"
Line 1776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1776 always 1776
  "" always ""
Line 1778
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1778 always 1778
  "const std::string a(const std::string& str) {\n    return \"foo\" + str;\n}" always "const std::string a(const std::string& str) {\n    return \"foo\" + str;\n}"
Line 1781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1781 always 1781
  "" always ""
Line 1783
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1783 always 1783
  "int& incValue(int& value) {\n    return ++value;\n}" always "int& incValue(int& value) {\n    return ++value;\n}"
Line 1786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1786 always 1786
  "" always ""
Line 1791
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1791 always 1791
  "const Item& foo(const Container& items) const {\n    return bar(items.begin(), items.end(),\n    [](const Item& lhs, const Item& rhs) {\n        return false;\n    });\n}" always "const Item& foo(const Container& items) const {\n    return bar(items.begin(), items.end(),\n    [](const Item& lhs, const Item& rhs) {\n        return false;\n    });\n}"
Line 1797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1797 always 1797
  "" always ""
Line 1800
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1800 always 1800
  "map<string,string> const &getVariableTable() {\nstatic map<string,string> const s_var = []{\n    map<string,string> var;\n    return var;\n  }();\nreturn s_var;\n}" always "map<string,string> const &getVariableTable() {\nstatic map<string,string> const s_var = []{\n    map<string,string> var;\n    return var;\n  }();\nreturn s_var;\n}"
Line 1807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1807 always 1807
  "" always ""
Line 1810
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1810 always 1810
  "Command& foo() {\n  return f([]() -> int { return 1; });\n}" always "Command& foo() {\n  return f([]() -> int { return 1; });\n}"
Line 1813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1813 always 1813
  "" always ""
Line 1818
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1818 always 1818
  "const Callback& make() {\n    struct _Wrapper {\n        static ulong call(void* o, const void* f, const void*[]) {\n            return 1;\n        }\n    };\n    return _make(_Wrapper::call, pmf);\n}" always "const Callback& make() {\n    struct _Wrapper {\n        static ulong call(void* o, const void* f, const void*[]) {\n            return 1;\n        }\n    };\n    return _make(_Wrapper::call, pmf);\n}"
Line 1826
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1826 always 1826
  "" always ""
Line 1830
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1830 always 1830
  "int& f() { return f(); }" always "int& f() { return f(); }"
Line 1831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1831 always 1831
  "" always ""
Line 1833
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1833 always 1833
  "int& g(int& i) { return i; }\nint& f() { return g(f()); }" always "int& g(int& i) { return i; }\nint& f() { return g(f()); }"
Line 1835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1835 always 1835
  "" always ""
Line 1839
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1839 always 1839
  "void g(int*);\nint h();\nauto f() {\n    const int& x = h();\n    return [&] { return x; };\n}" always "void g(int*);\nint h();\nauto f() {\n    const int& x = h();\n    return [&] { return x; };\n}"
Line 1845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1845 always 1845
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning lambda that captures local variable 'x' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning lambda that captures local variable 'x' that will be invalid when returning.\n"
Line 1847
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1847 always 1847
  "void g(int*);\nint h();\nint* f() {\n    const int& x = h();\n    return &x;\n}" always "void g(int*);\nint h();\nint* f() {\n    const int& x = h();\n    return &x;\n}"
Line 1853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1853 always 1853
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 1855
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1855 always 1855
  "void g(int*);\nint h();\nvoid f() {\n    int& x = h();\n    g(&x);\n}" always "void g(int*);\nint h();\nvoid f() {\n    int& x = h();\n    g(&x);\n}"
Line 1861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1861 always 1861
  "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n[test.cpp:4] -> [test.cpp:5]: (error) Using reference to dangling temporary.\n" always "[test.cpp:4] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n[test.cpp:4] -> [test.cpp:5]: (error) Using reference to dangling temporary.\n"
Line 1866
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1866 always 1866
  "void g(int*);\nint h();\nvoid f() {\n    const int& x = h();\n    g(&x);\n}" always "void g(int*);\nint h();\nvoid f() {\n    const int& x = h();\n    g(&x);\n}"
Line 1872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1872 always 1872
  "" always ""
Line 1874
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1874 always 1874
  "struct Data {\n    std::string path;\n};\nconst char* foo() {\n    const Data& data = getData();\n    return data.path.c_str();\n}" always "struct Data {\n    std::string path;\n};\nconst char* foo() {\n    const Data& data = getData();\n    return data.path.c_str();\n}"
Line 1881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1881 always 1881
  "" always ""
Line 1885
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1885 always 1885
  "int f( int k )\n{\n    static int &r = k;\n    return r;\n}" always "int f( int k )\n{\n    static int &r = k;\n    return r;\n}"
Line 1890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1890 always 1890
  "[test.cpp:3] -> [test.cpp:3]: (error) Non-local reference variable 'r' to local variable 'k'\n" always "[test.cpp:3] -> [test.cpp:3]: (error) Non-local reference variable 'r' to local variable 'k'\n"
Line 1893
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1893 always 1893
  "int &f( int & k )\n{\n    static int &r = k;\n    return r;\n}" always "int &f( int & k )\n{\n    static int &r = k;\n    return r;\n}"
Line 1898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1898 always 1898
  "" always ""
Line 1902
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1902 always 1902
  "const std::string& g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n" always "const std::string& g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n"
Line 1909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1909 always 1909
  "[test.cpp:5] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:6]: (error) Using reference to dangling temporary.\n" always "[test.cpp:5] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:6]: (error) Using reference to dangling temporary.\n"
Line 1912
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1912 always 1912
  "std::string g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n" always "std::string g(const std::string& str_cref) {\n    return str_cref;\n}\nvoid f() {\n    const auto& str_cref2 = g(std::string(\"hello\"));\n    std::cout << str_cref2 << std::endl;\n}\n"
Line 1919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1919 always 1919
  "" always ""
Line 1921
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1921 always 1921
  "char f() {\n    char c = 0;\n    char&& cr = std::move(c);\n    return cr;\n}\n" always "char f() {\n    char c = 0;\n    char&& cr = std::move(c);\n    return cr;\n}\n"
Line 1926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1926 always 1926
  "" always ""
Line 1929
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1929 always 1929
  "void g(std::vector<int>);\nvoid f() {\n    std::vector<int>&& v = {};\n    g(std::move(v));\n}\n" always "void g(std::vector<int>);\nvoid f() {\n    std::vector<int>&& v = {};\n    g(std::move(v));\n}\n"
Line 1934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1934 always 1934
  "" always ""
Line 1936
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1936 always 1936
  "void g(std::vector<int>);\nstd::vector<int> h();\nvoid f() {\n    std::vector<int>&& v = h();\n    g(std::move(v));\n}\n" always "void g(std::vector<int>);\nstd::vector<int> h();\nvoid f() {\n    std::vector<int>&& v = h();\n    g(std::move(v));\n}\n"
Line 1942
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1942 always 1942
  "" always ""
Line 1946
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1946 always 1946
  "class SharedPtrHolder\n{\n   ::std::tr1::shared_ptr<int> pNum;\npublic:\n   void SetNum(const ::std::tr1::shared_ptr<int> & apNum)\n   {\n      pNum = apNum;\n   }\n}" always "class SharedPtrHolder\n{\n   ::std::tr1::shared_ptr<int> pNum;\npublic:\n   void SetNum(const ::std::tr1::shared_ptr<int> & apNum)\n   {\n      pNum = apNum;\n   }\n}"
Line 1956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1956 always 1956
  "" always ""
Line 1960
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1960 always 1960
  "int* foo(int y)\n{\n  return &y;\n}" always "int* foo(int y)\n{\n  return &y;\n}"
Line 1965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1965 always 1965
  "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n"
Line 1967
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1967 always 1967
  "int ** foo(int * y)\n{\n  return &y;\n}" always "int ** foo(int * y)\n{\n  return &y;\n}"
Line 1972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1972 always 1972
  "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'y' that will be invalid when returning.\n"
Line 1974
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1974 always 1974
  "const int * foo(const int & y)\n{\n  return &y;\n}" always "const int * foo(const int & y)\n{\n  return &y;\n}"
Line 1979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1979 always 1979
  "" always ""
Line 1981
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1981 always 1981
  "int * foo(int * y)\n{\n  return y;\n}" always "int * foo(int * y)\n{\n  return y;\n}"
Line 1986
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1986 always 1986
  "" always ""
Line 1988
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1988 always 1988
  "struct s { void *p; };\nextern struct s* f(void);\nvoid g(void **q)\n{\n    struct s *r = f();\n    *q = &r->p;\n}" always "struct s { void *p; };\nextern struct s* f(void);\nvoid g(void **q)\n{\n    struct s *r = f();\n    *q = &r->p;\n}"
Line 1996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  1996 always 1996
  "" always ""
Line 2000
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2000 always 2000
  "class const_tree_iterator {\n  const_tree_iterator(bool (*_incream)(node_type*&)) {}\n  const_tree_iterator& parent() {\n    return const_tree_iterator(foo);\n  }\n};" always "class const_tree_iterator {\n  const_tree_iterator(bool (*_incream)(node_type*&)) {}\n  const_tree_iterator& parent() {\n    return const_tree_iterator(foo);\n  }\n};"
Line 2009
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2009 always 2009
  "void removed_cb (GList *uids) {\nfor (; uids; uids = uids->next) {\n}\n}\nvoid opened_cb () {\n	g_signal_connect (G_CALLBACK (removed_cb));\n}" always "void removed_cb (GList *uids) {\nfor (; uids; uids = uids->next) {\n}\n}\nvoid opened_cb () {\n	g_signal_connect (G_CALLBACK (removed_cb));\n}"
Line 2019
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2019 always 2019
  "auto f() {\n    int a = 1;\n    auto l = [&](){ return a; };\n    return l;\n}" always "auto f() {\n    int a = 1;\n    auto l = [&](){ return a; };\n    return l;\n}"
Line 2024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2024 always 2024
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2026
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2026 always 2026
  "auto f() {\n    int a = 1;\n    return [&](){ return a; };\n}" always "auto f() {\n    int a = 1;\n    return [&](){ return a; };\n}"
Line 2030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2030 always 2030
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2032
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2032 always 2032
  "auto f(int a) {\n    return [&](){ return a; };\n}" always "auto f(int a) {\n    return [&](){ return a; };\n}"
Line 2035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2035 always 2035
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2037
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2037 always 2037
  "auto f(int a) {\n    auto p = &a;\n    return [=](){ return p; };\n}" always "auto f(int a) {\n    auto p = &a;\n    return [=](){ return p; };\n}"
Line 2041
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2041 always 2041
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2043
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2043 always 2043
  "auto g(int& a) {\n    int p = a;\n    return [&](){ return p; };\n}" always "auto g(int& a) {\n    int p = a;\n    return [&](){ return p; };\n}"
Line 2047
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2047 always 2047
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'p' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'p' that will be invalid when returning.\n"
Line 2049
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2049 always 2049
  "auto f() {\n    return [=](){\n        int a = 1;\n        return [&](){ return a; };\n    };\n}" always "auto f() {\n    return [=](){\n        int a = 1;\n        return [&](){ return a; };\n    };\n}"
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2055 always 2055
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2057
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2057 always 2057
  "auto f(int b) {\n    return [=](int a){\n        a += b;\n        return [&](){ return a; };\n    };\n}" always "auto f(int b) {\n    return [=](int a){\n        a += b;\n        return [&](){ return a; };\n    };\n}"
Line 2063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2063 always 2063
  "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2065
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2065 always 2065
  "auto g(int& a) {\n    return [&](){ return a; };\n}" always "auto g(int& a) {\n    return [&](){ return a; };\n}"
Line 2068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2068 always 2068
  "" always ""
Line 2070
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2070 always 2070
  "auto g(int a) {\n    auto p = a;\n    return [=](){ return p; };\n}" always "auto g(int a) {\n    auto p = a;\n    return [=](){ return p; };\n}"
Line 2074
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2074 always 2074
  "" always ""
Line 2076
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2076 always 2076
  "auto g(int& a) {\n    auto p = a;\n    return [=](){ return p; };\n}" always "auto g(int& a) {\n    auto p = a;\n    return [=](){ return p; };\n}"
Line 2080
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2080 always 2080
  "" always ""
Line 2082
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2082 always 2082
  "auto g(int& a) {\n    int& p = a;\n    return [&](){ return p; };\n}" always "auto g(int& a) {\n    int& p = a;\n    return [&](){ return p; };\n}"
Line 2086
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2086 always 2086
  "" always ""
Line 2088
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2088 always 2088
  "template<class F>\nvoid g(F);\nauto f() {\n    int x;\n    return g([&]() { return x; });\n}" always "template<class F>\nvoid g(F);\nauto f() {\n    int x;\n    return g([&]() { return x; });\n}"
Line 2094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2094 always 2094
  "" always ""
Line 2096
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2096 always 2096
  "auto f() {\n    int i = 0;\n    return [&i] {};\n}\n" always "auto f() {\n    int i = 0;\n    return [&i] {};\n}\n"
Line 2100
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2100 always 2100
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n"
Line 2102
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2102 always 2102
  "auto f() {\n    int i = 0;\n    return [i] {};\n}\n" always "auto f() {\n    int i = 0;\n    return [i] {};\n}\n"
Line 2106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2106 always 2106
  "" always ""
Line 2108
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2108 always 2108
  "auto f() {\n    int i = 0;\n    return [=, &i] {};\n}\n" always "auto f() {\n    int i = 0;\n    return [=, &i] {};\n}\n"
Line 2112
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2112 always 2112
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n"
Line 2114
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2114 always 2114
  "auto f() {\n    int i = 0;\n    int j = 0;\n    return [=, &i] { return j; };\n}\n" always "auto f() {\n    int i = 0;\n    int j = 0;\n    return [=, &i] { return j; };\n}\n"
Line 2119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2119 always 2119
  "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'i' that will be invalid when returning.\n"
Line 2121
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2121 always 2121
  "auto f() {\n    int i = 0;\n    return [&, i] {};\n}\n" always "auto f() {\n    int i = 0;\n    return [&, i] {};\n}\n"
Line 2125
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2125 always 2125
  "" always ""
Line 2127
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2127 always 2127
  "auto f() {\n    int i = 0;\n    int j = 0;\n    return [&, i] { return j; };\n}\n" always "auto f() {\n    int i = 0;\n    int j = 0;\n    return [&, i] { return j; };\n}\n"
Line 2132
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2132 always 2132
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'j' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'j' that will be invalid when returning.\n"
Line 2134
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2134 always 2134
  "auto f(int& i) {\n    int j = 0;\n    return [=, &i] { return j; };\n}\n" always "auto f(int& i) {\n    int j = 0;\n    return [=, &i] { return j; };\n}\n"
Line 2138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2138 always 2138
  "" always ""
Line 2140
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2140 always 2140
  "void f(int*);\nauto g(int y) {\n    int x = y;\n    return [=] {\n        g(&x);\n    };\n}\n" always "void f(int*);\nauto g(int y) {\n    int x = y;\n    return [=] {\n        g(&x);\n    };\n}\n"
Line 2147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2147 always 2147
  "" always ""
Line 2149
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2149 always 2149
  "struct A {\n    int x;\n};\nauto f() {\n    A a;\n    return [=] {\n        const A* ap = &a;\n        ap->x;\n    };\n}\n" always "struct A {\n    int x;\n};\nauto f() {\n    A a;\n    return [=] {\n        const A* ap = &a;\n        ap->x;\n    };\n}\n"
Line 2159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2159 always 2159
  "" always ""
Line 2163
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2163 always 2163
  "auto f(const std::vector<int>& x) {\n    auto it = x.begin();\n    return it;\n}" always "auto f(const std::vector<int>& x) {\n    auto it = x.begin();\n    return it;\n}"
Line 2167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2167 always 2167
  "" always ""
Line 2169
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2169 always 2169
  "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it;\n}" always "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it;\n}"
Line 2174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2174 always 2174
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n"
Line 2176
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2176 always 2176
  "auto f() {\n    std::vector<int> x;\n    auto p = x.data();\n    return p;\n}" always "auto f() {\n    std::vector<int> x;\n    auto p = x.data();\n    return p;\n}"
Line 2181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2181 always 2181
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 2185
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2185 always 2185
  "auto f() {\n    std::vector<int> x;\n    auto p = &x[0];\n    return p;\n}" always "auto f() {\n    std::vector<int> x;\n    auto p = &x[0];\n    return p;\n}"
Line 2190
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2190 always 2190
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 2194
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2194 always 2194
  "struct A { int foo; };\nint* f(std::vector<A> v) {\n    auto it = v.begin();\n    return &it->foo;\n}" always "struct A { int foo; };\nint* f(std::vector<A> v) {\n    auto it = v.begin();\n    return &it->foo;\n}"
Line 2199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2199 always 2199
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n"
Line 2203
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2203 always 2203
  "auto f(std::vector<int> x) {\n    auto it = x.begin();\n    return it;\n}" always "auto f(std::vector<int> x) {\n    auto it = x.begin();\n    return it;\n}"
Line 2207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2207 always 2207
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n"
Line 2209
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2209 always 2209
  "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it);\n}" always "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it);\n}"
Line 2214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2214 always 2214
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n"
Line 2218
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2218 always 2218
  "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it + 1;\n}" always "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return it + 1;\n}"
Line 2223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2223 always 2223
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 'x' that will be invalid when returning.\n"
Line 2227
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2227 always 2227
  "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it + 1);\n}" always "auto f() {\n    std::vector<int> x;\n    auto it = x.begin();\n    return std::next(it + 1);\n}"
Line 2232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2232 always 2232
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'x' that will be invalid when returning.\n"
Line 2236
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2236 always 2236
  "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    return v;\n}" always "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    return v;\n}"
Line 2242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2242 always 2242
  "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:5]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 2246
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2246 always 2246
  "std::vector<int*> f() {\n    std::vector<int*> r;\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    r.assign(v.begin(), v.end());\n    return r;\n}" always "std::vector<int*> f() {\n    std::vector<int*> r;\n    int i = 0;\n    std::vector<int*> v;\n    v.push_back(&i);\n    r.assign(v.begin(), v.end());\n    return r;\n}"
Line 2254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2254 always 2254
  "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:3] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 2258
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2258 always 2258
  "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        v.push_back(&i);\n    }\n};" always "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        v.push_back(&i);\n    }\n};"
Line 2265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2265 always 2265
  "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" always "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:4] -> [test.cpp:5]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n"
Line 2269
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2269 always 2269
  "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        int * p = &i;\n        v.push_back(p);\n    }\n};" always "struct A {\n    std::vector<int*> v;\n    void f() {\n        int i;\n        int * p = &i;\n        v.push_back(p);\n    }\n};"
Line 2277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2277 always 2277
  "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:6]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" always "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:6]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n"
Line 2281
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2281 always 2281
  "struct A {\n    std::vector<int*> m;\n    void f() {\n        int x;\n        std::vector<int*> v;\n        v.push_back(&x);\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};" always "struct A {\n    std::vector<int*> m;\n    void f() {\n        int x;\n        std::vector<int*> v;\n        v.push_back(&x);\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};"
Line 2290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2290 always 2290
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:7]: (error) Non-local variable 'm' will use object that points to local variable 'x'.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:6] -> [test.cpp:4] -> [test.cpp:7]: (error) Non-local variable 'm' will use object that points to local variable 'x'.\n"
Line 2294
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2294 always 2294
  "std::vector<int>::iterator f(std::vector<int> v) {\n    for(auto it = v.begin();it != v.end();it++) {\n        return it;\n    }\n    return {};\n}" always "std::vector<int>::iterator f(std::vector<int> v) {\n    for(auto it = v.begin();it != v.end();it++) {\n        return it;\n    }\n    return {};\n}"
Line 2300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2300 always 2300
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'v' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 'v' that will be invalid when returning.\n"
Line 2304
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2304 always 2304
  "const char * f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}" always "const char * f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}"
Line 2308
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2308 always 2308
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'ba' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning pointer to local variable 'ba' that will be invalid when returning.\n"
Line 2312
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2312 always 2312
  "template <class T, class K, class V>\nconst V* get_default(const T& t, const K& k, const V* v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return &it->second;\n}\nconst int* bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, &x);\n}\n" always "template <class T, class K, class V>\nconst V* get_default(const T& t, const K& k, const V* v) {\n    auto it = t.find(k);\n    if (it == t.end()) return v;\n    return &it->second;\n}\nconst int* bar(const std::unordered_map<int, int>& m, int k) {\n    auto x = 0;\n    return get_default(m, k, &x);\n}\n"
  true always 1
Line 2323
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2323 always 2323
  "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error, inconclusive) Returning pointer to local variable 'x' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error, inconclusive) Returning pointer to local variable 'x' that will be invalid when returning.\n"
Line 2327
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2327 always 2327
  "std::vector<int> g();\nauto f() {\n    return g().begin();\n}" always "std::vector<int> g();\nauto f() {\n    return g().begin();\n}"
Line 2331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2331 always 2331
  "[test.cpp:3] -> [test.cpp:3]: (error) Returning iterator that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3]: (error) Returning iterator that will be invalid when returning.\n"
Line 2334
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2334 always 2334
  "std::vector<int> g();\nauto f() {\n    auto it = g().begin();\n    return it;\n}" always "std::vector<int> g();\nauto f() {\n    auto it = g().begin();\n    return it;\n}"
Line 2339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2339 always 2339
  "[test.cpp:3] -> [test.cpp:4]: (error) Returning iterator that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Returning iterator that will be invalid when returning.\n"
Line 2342
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2342 always 2342
  "std::vector<int> g();\nint& f() {\n    return *g().begin();\n}" always "std::vector<int> g();\nint& f() {\n    return *g().begin();\n}"
Line 2346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2346 always 2346
  "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n" always "[test.cpp:3] -> [test.cpp:3]: (error) Reference to temporary returned.\n"
Line 2348
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2348 always 2348
  "struct A {\n    std::vector<std::string> v;\n    void f() {\n        char s[3];\n        v.push_back(s);\n    }\n};" always "struct A {\n    std::vector<std::string> v;\n    void f() {\n        char s[3];\n        v.push_back(s);\n    }\n};"
Line 2355
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2355 always 2355
  "" always ""
Line 2357
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2357 always 2357
  "std::vector<std::string> f() {\n    const char * s = \"hello\";\n    std::vector<std::string> v;\n    v.push_back(s);\n    return v;\n}" always "std::vector<std::string> f() {\n    const char * s = \"hello\";\n    std::vector<std::string> v;\n    v.push_back(s);\n    return v;\n}"
Line 2363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2363 always 2363
  "" always ""
Line 2365
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2365 always 2365
  "auto f() {\n  static std::vector<int> x;\n  return x.begin();\n}" always "auto f() {\n  static std::vector<int> x;\n  return x.begin();\n}"
Line 2369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2369 always 2369
  "" always ""
Line 2371
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2371 always 2371
  "std::string g() {\n    std::vector<char> v;\n    return v.data();\n}" always "std::string g() {\n    std::vector<char> v;\n    return v.data();\n}"
Line 2375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2375 always 2375
  "" always ""
Line 2377
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2377 always 2377
  "std::vector<int>::iterator f(std::vector<int>* v) {\n    return v->begin();\n}" always "std::vector<int>::iterator f(std::vector<int>* v) {\n    return v->begin();\n}"
Line 2380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2380 always 2380
  "" always ""
Line 2382
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2382 always 2382
  "std::vector<int>::iterator f(std::vector<int>* v) {\n    std::vector<int>* v = new std::vector<int>();\n    return v->begin();\n}" always "std::vector<int>::iterator f(std::vector<int>* v) {\n    std::vector<int>* v = new std::vector<int>();\n    return v->begin();\n}"
Line 2386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2386 always 2386
  "" always ""
Line 2388
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2388 always 2388
  "int f(std::vector<int> v) {\n    return *v.begin();\n}" always "int f(std::vector<int> v) {\n    return *v.begin();\n}"
Line 2391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2391 always 2391
  "" always ""
Line 2393
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2393 always 2393
  "int f(std::vector<int> v) {\n    return v.end() - v.begin();\n}" always "int f(std::vector<int> v) {\n    return v.end() - v.begin();\n}"
Line 2396
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2396 always 2396
  "" always ""
Line 2398
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2398 always 2398
  "auto g() {\n    std::vector<char> v;\n    return {v, [v]() { return v.data(); }};\n}" always "auto g() {\n    std::vector<char> v;\n    return {v, [v]() { return v.data(); }};\n}"
Line 2402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2402 always 2402
  "" always ""
Line 2404
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2404 always 2404
  "template<class F>\nvoid g(F);\nauto f() {\n    std::vector<char> v;\n    return g([&]() { return v.data(); });\n}" always "template<class F>\nvoid g(F);\nauto f() {\n    std::vector<char> v;\n    return g([&]() { return v.data(); });\n}"
Line 2410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2410 always 2410
  "" always ""
Line 2412
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2412 always 2412
  "std::vector<int> g();\nstruct A {\n    std::vector<int> m;\n    void f() {\n        std::vector<int> v = g();\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};" always "std::vector<int> g();\nstruct A {\n    std::vector<int> m;\n    void f() {\n        std::vector<int> v = g();\n        m.insert(m.end(), v.begin(), v.end());\n    }\n};"
Line 2420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2420 always 2420
  "" always ""
Line 2422
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2422 always 2422
  "void f(bool b) {\n    std::vector<int> v = {1};\n    if (b) {\n        int a[] = {0};\n        v.insert(a, a+1);\n    }\n    return v.back() == 0;\n}" always "void f(bool b) {\n    std::vector<int> v = {1};\n    if (b) {\n        int a[] = {0};\n        v.insert(a, a+1);\n    }\n    return v.back() == 0;\n}"
Line 2430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2430 always 2430
  "" always ""
Line 2432
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2432 always 2432
  "class A {\n    int f( P p ) {\n        std::vector< S > maps;\n        m2.insert( m1.begin(), m1.end() );\n    }\n    struct B {};\n    std::map< S, B > m1;\n    std::map< S, B > m2;\n};" always "class A {\n    int f( P p ) {\n        std::vector< S > maps;\n        m2.insert( m1.begin(), m1.end() );\n    }\n    struct B {};\n    std::map< S, B > m1;\n    std::map< S, B > m2;\n};"
Line 2441
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2441 always 2441
  "" always ""
Line 2443
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2443 always 2443
  "struct A {\n    std::vector<int*> v;\n    int x;\n    void f() {\n        v.push_back(&x);\n    }\n};" always "struct A {\n    std::vector<int*> v;\n    int x;\n    void f() {\n        v.push_back(&x);\n    }\n};"
Line 2450
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2450 always 2450
  "" always ""
Line 2452
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2452 always 2452
  "size_t f(const std::string& x) {\n    std::string y = \"x\";\n    return y.find(x);\n}" always "size_t f(const std::string& x) {\n    std::string y = \"x\";\n    return y.find(x);\n}"
Line 2456
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2456 always 2456
  "" always ""
Line 2458
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2458 always 2458
  "std::string* f();\nconst char* g() {\n    std::string* var = f();\n    return var->c_str();\n}" always "std::string* f();\nconst char* g() {\n    std::string* var = f();\n    return var->c_str();\n}"
Line 2463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2463 always 2463
  "" always ""
Line 2465
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2465 always 2465
  "std::string f() {\n    std::vector<char> data{};\n    data.push_back('a');\n    return std::string{ data.data(), data.size() };\n}" always "std::string f() {\n    std::vector<char> data{};\n    data.push_back('a');\n    return std::string{ data.data(), data.size() };\n}"
Line 2470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2470 always 2470
  "" always ""
Line 2472
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2472 always 2472
  "std::vector<char*> f() {\n    char a = 0;\n    return std::vector<char*>{&a};\n}" always "std::vector<char*> f() {\n    char a = 0;\n    return std::vector<char*>{&a};\n}"
Line 2476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2476 always 2476
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n"
Line 2478
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2478 always 2478
  "std::vector<int>* g();\nint& f() {\n    auto* p = g();\n    return p->front();\n}\n" always "std::vector<int>* g();\nint& f() {\n    auto* p = g();\n    return p->front();\n}\n"
Line 2483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2483 always 2483
  "" always ""
Line 2485
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2485 always 2485
  "std::vector<std::vector<int>> g();\nvoid f() {\n    for(auto& x:g())\n        std::sort(x.begin(), x.end());\n}\n" always "std::vector<std::vector<int>> g();\nvoid f() {\n    for(auto& x:g())\n        std::sort(x.begin(), x.end());\n}\n"
Line 2490
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2490 always 2490
  "" always ""
Line 2492
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2492 always 2492
  "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        int i = 0;\n        add(&i);\n    }\n};\n" always "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        int i = 0;\n        add(&i);\n    }\n};\n"
Line 2502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2502 always 2502
  "[test.cpp:8] -> [test.cpp:8] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:4]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n" always "[test.cpp:8] -> [test.cpp:8] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:4]: (error) Non-local variable 'v' will use object that points to local variable 'i'.\n"
Line 2506
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2506 always 2506
  "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n};\nvoid f() {\n    A a;\n    int i = 0;\n    a.add(&i);\n}\n" always "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n};\nvoid f() {\n    A a;\n    int i = 0;\n    a.add(&i);\n}\n"
Line 2517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2517 always 2517
  "" always ""
Line 2519
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2519 always 2519
  "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        A a;\n        int i = 0;\n        a.add(&i);\n    }\n};\n" always "struct A {\n    std::vector<int*> v;\n    void add(int* i) {\n        v.push_back(i);\n    }\n    void f() {\n        A a;\n        int i = 0;\n        a.add(&i);\n    }\n};\n"
Line 2530
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2530 always 2530
  "" always ""
Line 2532
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2532 always 2532
  "int f() {\n    int i;\n    {\n        std::vector<int> vec;\n        const auto iter = vec.begin();\n        i = (int)(iter - vec.begin());\n    }\n    return i;\n}\n" always "int f() {\n    int i;\n    {\n        std::vector<int> vec;\n        const auto iter = vec.begin();\n        i = (int)(iter - vec.begin());\n    }\n    return i;\n}\n"
Line 2541
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2541 always 2541
  "" always ""
Line 2543
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2543 always 2543
  "int* get(std::vector<int>& container) {\n    Sequence seq(container);\n    for (auto& r : seq) {\n        return &r;\n    }\n    return &*seq.begin();\n}\n" always "int* get(std::vector<int>& container) {\n    Sequence seq(container);\n    for (auto& r : seq) {\n        return &r;\n    }\n    return &*seq.begin();\n}\n"
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2550 always 2550
  "" always ""
Line 2552
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2552 always 2552
  "std::string f(std::string Str, int first, int last) {\n    return { Str.begin() + first, Str.begin() + last + 1 };\n}\n" always "std::string f(std::string Str, int first, int last) {\n    return { Str.begin() + first, Str.begin() + last + 1 };\n}\n"
  true always 1
Line 2556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2556 always 2556
  "" always ""
Line 2558
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2558 always 2558
  "std::string f(std::string s) {\n    std::string r = { s.begin(), s.end() };\n    return r;\n}\n" always "std::string f(std::string s) {\n    std::string r = { s.begin(), s.end() };\n    return r;\n}\n"
  true always 1
Line 2563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2563 always 2563
  "" always ""
Line 2565
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2565 always 2565
  "struct A {\n    std::vector<std::unique_ptr<int>> mA;\n    void f(std::unique_ptr<int> a) {\n        auto x = a.get();\n        mA.push_back(std::move(a));\n    }\n};\n" always "struct A {\n    std::vector<std::unique_ptr<int>> mA;\n    void f(std::unique_ptr<int> a) {\n        auto x = a.get();\n        mA.push_back(std::move(a));\n    }\n};\n"
Line 2572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2572 always 2572
  "" always ""
Line 2574
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2574 always 2574
  "struct A {\n    std::map<std::string, int> m;\n    int* f(std::string s) {\n        auto r = m.emplace(name, name);\n        return &(r.first->second);\n    }\n};\n" always "struct A {\n    std::map<std::string, int> m;\n    int* f(std::string s) {\n        auto r = m.emplace(name, name);\n        return &(r.first->second);\n    }\n};\n"
Line 2581
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2581 always 2581
  "" always ""
Line 2583
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2583 always 2583
  "void f() {\n	std::queue<int> q;\n	auto& h = q.emplace();\n    h = 1;\n}\n" always "void f() {\n	std::queue<int> q;\n	auto& h = q.emplace();\n    h = 1;\n}\n"
Line 2588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2588 always 2588
  "" always ""
Line 2590
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2590 always 2590
  "std::string f(std::string s) {\n    std::string ss = (\":\" + s).c_str();\n    return ss;\n}\n" always "std::string f(std::string s) {\n    std::string ss = (\":\" + s).c_str();\n    return ss;\n}\n"
Line 2594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2594 always 2594
  "" always ""
Line 2599
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2599 always 2599
  "std::string_view f() {\n    std::string s = \"\";\n    return s;\n}\n" always "std::string_view f() {\n    std::string s = \"\";\n    return s;\n}\n"
Line 2603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2603 always 2603
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 2607
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2607 always 2607
  "std::string_view f() {\n    std::string s = \"\";\n    std::string_view sv = s;\n    return sv;\n}\n" always "std::string_view f() {\n    std::string s = \"\";\n    std::string_view sv = s;\n    return sv;\n}\n"
Line 2612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2612 always 2612
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 2616
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2616 always 2616
  "std::string_view f() {\n    std::string s = \"\";\n    return std::string_view{s};\n}\n" always "std::string_view f() {\n    std::string s = \"\";\n    return std::string_view{s};\n}\n"
Line 2620
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2620 always 2620
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 2624
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2624 always 2624
  "std::string_view f(std::string_view s) {\n    return s;\n}\nstd::string_view g() {\n    std::string s = \"\";\n    return f(s);\n}\n" always "std::string_view f(std::string_view s) {\n    return s;\n}\nstd::string_view g() {\n    std::string s = \"\";\n    return f(s);\n}\n"
Line 2631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2631 always 2631
  "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:6] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 2635
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2635 always 2635
  "const char * f() {\n    std::string s;\n    std::string_view sv = s;\n    return sv.begin();\n}\n" always "const char * f() {\n    std::string s;\n    std::string_view sv = s;\n    return sv.begin();\n}\n"
Line 2640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2640 always 2640
  "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning iterator to local container 's' that will be invalid when returning.\n"
Line 2644
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2644 always 2644
  "const char * f() {\n    std::string s;\n    return std::string_view{s}.begin();\n}\n" always "const char * f() {\n    std::string s;\n    return std::string_view{s}.begin();\n}\n"
Line 2648
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2648 always 2648
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n"
Line 2652
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2652 always 2652
  "const char * f() {\n    std::string s;\n    return std::string_view(s).begin();\n}\n" always "const char * f() {\n    std::string s;\n    return std::string_view(s).begin();\n}\n"
Line 2656
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2656 always 2656
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n"
  "" always ""
Line 2661
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2661 always 2661
  "const char * f(std::string_view sv) {\n    return sv.begin();\n}\n" always "const char * f(std::string_view sv) {\n    return sv.begin();\n}\n"
Line 2664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2664 always 2664
  "" always ""
Line 2666
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2666 always 2666
  "const char * f(std::string s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n" always "const char * f(std::string s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n"
Line 2670
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2670 always 2670
  "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning iterator to local container 's' that will be invalid when returning.\n"
Line 2674
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2674 always 2674
  "std::string_view f(std::string s) {\n    return s;\n}\n" always "std::string_view f(std::string s) {\n    return s;\n}\n"
Line 2677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2677 always 2677
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 2681
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2681 always 2681
  "const char * f(const std::string& s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n" always "const char * f(const std::string& s) {\n    std::string_view sv = s;\n    return sv.begin();\n}\n"
Line 2685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2685 always 2685
  "" always ""
Line 2687
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2687 always 2687
  "std::string_view f(const std::string_view& sv) {\n    return sv;\n}\n" always "std::string_view f(const std::string_view& sv) {\n    return sv;\n}\n"
Line 2690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2690 always 2690
  "" always ""
Line 2695
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2695 always 2695
  "int* f(std::unique_ptr<int> p) {\n    int * rp = p.get();\n    return rp;\n}\n" always "int* f(std::unique_ptr<int> p) {\n    int * rp = p.get();\n    return rp;\n}\n"
Line 2699
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2699 always 2699
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'p' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning pointer to local variable 'p' that will be invalid when returning.\n"
Line 2704
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2704 always 2704
  "auto f() {\n    std::vector<int> a;\n    auto it = a.begin();\n    return [=](){ return it; };\n}" always "auto f() {\n    std::vector<int> a;\n    auto it = a.begin();\n    return [=](){ return it; };\n}"
Line 2709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2709 always 2709
  "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:4] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2711
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2711 always 2711
  "auto f(std::vector<int> a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}" always "auto f(std::vector<int> a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}"
Line 2715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2715 always 2715
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:1] -> [test.cpp:3]: (error) Returning lambda that captures local variable 'a' that will be invalid when returning.\n"
Line 2717
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2717 always 2717
  "struct e {};\ne * j() {\n    e c[20];\n    return c;\n}" always "struct e {};\ne * j() {\n    e c[20];\n    return c;\n}"
Line 2722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2722 always 2722
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'c' that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:4]: (error) Returning pointer to local variable 'c' that will be invalid when returning.\n"
Line 2726
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2726 always 2726
  "auto f(std::vector<int>& a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}" always "auto f(std::vector<int>& a) {\n    auto it = a.begin();\n    return [=](){ return it; };\n}"
Line 2730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2730 always 2730
  "" always ""
Line 2732
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2732 always 2732
  "int * f(int a[]) {\n    return a;\n}" always "int * f(int a[]) {\n    return a;\n}"
Line 2735
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2735 always 2735
  "" always ""
Line 2737
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2737 always 2737
  "void f() {\n    struct b {\n        uint32_t f[6];\n    } d;\n    uint32_t *a = d.f;\n}" always "void f() {\n    struct b {\n        uint32_t f[6];\n    } d;\n    uint32_t *a = d.f;\n}"
Line 2743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2743 always 2743
  "" always ""
Line 2746
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2746 always 2746
  "std::array<char, 1> f() {\n    std::array<char, 1> x;\n    return x;\n}" always "std::array<char, 1> f() {\n    std::array<char, 1> x;\n    return x;\n}"
Line 2750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2750 always 2750
  "" always ""
Line 2753
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2753 always 2753
  "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}" always "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}"
Line 2758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2758 always 2758
  "" always ""
Line 2761
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2761 always 2761
  "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}" always "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}"
Line 2766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2766 always 2766
  "" always ""
Line 2769
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2769 always 2769
  "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}" always "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1];\n}"
Line 2774
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2774 always 2774
  "" always ""
Line 2777
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2777 always 2777
  "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}" always "struct A;\nvoid f() {\n    using T = A[3];\n    A &&a = T{1, 2, 3}[1]();\n}"
Line 2782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2782 always 2782
  "" always ""
Line 2785
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2785 always 2785
  "struct a {\n  void operator()(b c) override {\n    d(c, [&] { c->e });\n  }\n};" always "struct a {\n  void operator()(b c) override {\n    d(c, [&] { c->e });\n  }\n};"
Line 2790
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2790 always 2790
  "" always ""
Line 2792
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2792 always 2792
  "struct a {\n  void operator()(b c) override {\n    d(c, [=] { c->e });\n  }\n};" always "struct a {\n  void operator()(b c) override {\n    d(c, [=] { c->e });\n  }\n};"
Line 2797
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2797 always 2797
  "" always ""
Line 2799
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2799 always 2799
  "struct a {\n    a(char* b) {}\n};\na f() {\n    char c[20];\n    return c;\n}" always "struct a {\n    a(char* b) {}\n};\na f() {\n    char c[20];\n    return c;\n}"
Line 2806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2806 always 2806
  "" always ""
Line 2808
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2808 always 2808
  "struct a {\n    a(char* b) {}\n};\na g() {\n    char c[20];\n    a d = c;\n    return d;\n}" always "struct a {\n    a(char* b) {}\n};\na g() {\n    char c[20];\n    a d = c;\n    return d;\n}"
Line 2816
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2816 always 2816
  "" always ""
Line 2818
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2818 always 2818
  "void f() {\n    struct a {\n        std::vector<int> v;\n        auto g() { return v.end(); }\n    };\n}" always "void f() {\n    struct a {\n        std::vector<int> v;\n        auto g() { return v.end(); }\n    };\n}"
Line 2824
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2824 always 2824
  "" always ""
Line 2826
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2826 always 2826
  "int * f(std::vector<int>& v) {\n    for(int & x : v)\n        return &x;\n    return nullptr;\n}" always "int * f(std::vector<int>& v) {\n    for(int & x : v)\n        return &x;\n    return nullptr;\n}"
Line 2831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2831 always 2831
  "" always ""
Line 2834
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2834 always 2834
  "struct S {\n   void f();\n   std::string m;\n}\nvoid S::f() {\n    char buf[1024];\n    const char* msg = buf;\n    m = msg;\n}" always "struct S {\n   void f();\n   std::string m;\n}\nvoid S::f() {\n    char buf[1024];\n    const char* msg = buf;\n    m = msg;\n}"
Line 2843
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2843 always 2843
  "" always ""
Line 2846
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2846 always 2846
  "int* f() {\n    struct a { int m; };\n    static a b{0};\n    return &b.m;\n}" always "int* f() {\n    struct a { int m; };\n    static a b{0};\n    return &b.m;\n}"
Line 2851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2851 always 2851
  "" always ""
Line 2854
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2854 always 2854
  "int *ptr;\nvoid foo(int arr[]) {\n    ptr = &arr[2];\n}" always "int *ptr;\nvoid foo(int arr[]) {\n    ptr = &arr[2];\n}"
Line 2858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2858 always 2858
  "" always ""
Line 2861
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2861 always 2861
  "struct Fred {\n    std::string s;\n};\nconst Fred &getFred();\nconst char * f() {\n  const Fred &fred = getFred();\n  return fred.s.c_str();\n}" always "struct Fred {\n    std::string s;\n};\nconst Fred &getFred();\nconst char * f() {\n  const Fred &fred = getFred();\n  return fred.s.c_str();\n}"
Line 2869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2869 always 2869
  "" always ""
Line 2872
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2872 always 2872
  "struct A {\n    int* x;\n};\nint* f(int i, std::vector<A>& v) {\n    A& y = v[i];\n    return &y.x[i];\n}" always "struct A {\n    int* x;\n};\nint* f(int i, std::vector<A>& v) {\n    A& y = v[i];\n    return &y.x[i];\n}"
Line 2879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2879 always 2879
  "" always ""
Line 2882
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2882 always 2882
  "std::string f(const char *str) {\n    char value[256];\n    return value;\n}" always "std::string f(const char *str) {\n    char value[256];\n    return value;\n}"
Line 2886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2886 always 2886
  "" always ""
Line 2889
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2889 always 2889
  "class C {\n  std::string f(const char*);\n};\nstd::string C::f(const char*) {\n  const char data[] = \"x\";\n  return data;\n}\n" always "class C {\n  std::string f(const char*);\n};\nstd::string C::f(const char*) {\n  const char data[] = \"x\";\n  return data;\n}\n"
Line 2896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2896 always 2896
  "" always ""
Line 2899
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2899 always 2899
  "struct A {\n    std::vector<int> v;\n    void f(std::vector<int> w) {\n        v = std::move(w);\n    }\n    void g(std::vector<int> w) {\n        f(std::move(w));\n    }\n};\n" always "struct A {\n    std::vector<int> v;\n    void f(std::vector<int> w) {\n        v = std::move(w);\n    }\n    void g(std::vector<int> w) {\n        f(std::move(w));\n    }\n};\n"
Line 2908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2908 always 2908
  "" always ""
Line 2911
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2911 always 2911
  "int* foo() {\n  int& x = getX();\n  return &x;\n}\n" always "int* foo() {\n  int& x = getX();\n  return &x;\n}\n"
Line 2915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2915 always 2915
  "" always ""
Line 2916
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2916 always 2916
  "struct C {\n  int* m_x;\n  void foo() {\n    const int& x = getX();\n    m_x = &x;\n  }\n}\n" always "struct C {\n  int* m_x;\n  void foo() {\n    const int& x = getX();\n    m_x = &x;\n  }\n}\n"
Line 2923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2923 always 2923
  "" always ""
Line 2926
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2926 always 2926
  "struct a {\n    int b{};\n};\nstruct c {\n    int* c{};\n    a* d{};\n};\na* f();\nc g() {\n    c e;\n    e.d = f();\n    if (e.d)\n        e.c = &e.d->b;\n    return e;\n}\n" always "struct a {\n    int b{};\n};\nstruct c {\n    int* c{};\n    a* d{};\n};\na* f();\nc g() {\n    c e;\n    e.d = f();\n    if (e.d)\n        e.c = &e.d->b;\n    return e;\n}\n"
Line 2941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2941 always 2941
  "" always ""
Line 2944
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2944 always 2944
  "struct A {\n  std::string key;\n  const char *value;\n};\nconst char *f(const std::string &key, const std::vector<A> &lookup) {\n  const auto &entry =\n      std::find_if(lookup.begin(), lookup.end(),\n                   [key](const auto &v) { return v.key == key; });\n  return (entry == lookup.end()) ? \"\" : entry->value;\n}\n" always "struct A {\n  std::string key;\n  const char *value;\n};\nconst char *f(const std::string &key, const std::vector<A> &lookup) {\n  const auto &entry =\n      std::find_if(lookup.begin(), lookup.end(),\n                   [key](const auto &v) { return v.key == key; });\n  return (entry == lookup.end()) ? \"\" : entry->value;\n}\n"
Line 2954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2954 always 2954
  "" always ""
Line 2957
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2957 always 2957
  "struct Base {\n    virtual auto get() -> int & = 0;\n};\nstruct A : public Base {\n    int z = 42;\n    auto get() -> int & override { return z; }\n    auto getMore() -> int & { return get(); }\n};\n" always "struct Base {\n    virtual auto get() -> int & = 0;\n};\nstruct A : public Base {\n    int z = 42;\n    auto get() -> int & override { return z; }\n    auto getMore() -> int & { return get(); }\n};\n"
Line 2965
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2965 always 2965
  "" always ""
Line 2968
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2968 always 2968
  "struct Data {\n    int x=0;\n    int y=0;\n};\nstruct MoreData {\n    Data *data1;\n};\nstruct Fred {\n    Fred() {\n        Data data;\n        mMoreData.data1 = &data;\n    }\n    MoreData mMoreData;\n};\n" always "struct Data {\n    int x=0;\n    int y=0;\n};\nstruct MoreData {\n    Data *data1;\n};\nstruct Fred {\n    Fred() {\n        Data data;\n        mMoreData.data1 = &data;\n    }\n    MoreData mMoreData;\n};\n"
Line 2982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2982 always 2982
  "[test.cpp:11] -> [test.cpp:10] -> [test.cpp:11]: (error) Non-local variable 'mMoreData.data1' will use pointer to local variable 'data'.\n" always "[test.cpp:11] -> [test.cpp:10] -> [test.cpp:11]: (error) Non-local variable 'mMoreData.data1' will use pointer to local variable 'data'.\n"
Line 2987
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2987 always 2987
  "template <class... Ts>\nauto f(int i, Ts&... xs) {\n    return std::tie(xs[i]...);\n}\n" always "template <class... Ts>\nauto f(int i, Ts&... xs) {\n    return std::tie(xs[i]...);\n}\n"
Line 2991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2991 always 2991
  "" always ""
Line 2995
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2995 always 2995
  "auto f() {\n    int a;\n    return std::ref(a);\n}" always "auto f() {\n    int a;\n    return std::ref(a);\n}"
Line 2999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  2999 always 2999
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n"
Line 3003
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3003 always 3003
  "auto f() {\n    int a;\n    return std::make_tuple(std::ref(a));\n}" always "auto f() {\n    int a;\n    return std::make_tuple(std::ref(a));\n}"
Line 3007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3007 always 3007
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'a' that will be invalid when returning.\n"
Line 3011
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3011 always 3011
  "template<class T>\nauto by_value(T x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}" always "template<class T>\nauto by_value(T x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}"
Line 3019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3019 always 3019
  "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n"
Line 3023
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3023 always 3023
  "template<class T>\nauto by_value(const T& x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}\n" always "template<class T>\nauto by_value(const T& x) {\n    return [=] { return x; };\n}\nauto g() {\n    std::vector<int> v;\n    return by_value(v.begin());\n}\n"
Line 3031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3031 always 3031
  "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:7] -> [test.cpp:3] -> [test.cpp:3] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n"
Line 3035
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3035 always 3035
  "auto by_ref(int& x) {\n    return [&] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}" always "auto by_ref(int& x) {\n    return [&] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}"
Line 3042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3042 always 3042
  "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:2] -> [test.cpp:1] -> [test.cpp:2] -> [test.cpp:6] -> [test.cpp:5] -> [test.cpp:6]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3046
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3046 always 3046
  "auto by_ref(const int& x) {\n    return [=] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}\n" always "auto by_ref(const int& x) {\n    return [=] { return x; };\n}\nauto f() {\n    int i = 0;\n    return by_ref(i);\n}\n"
Line 3053
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3053 always 3053
  "" always ""
Line 3055
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3055 always 3055
  "auto f(int x) {\n    int a;\n    std::tie(a) = x;\n    return a;\n}" always "auto f(int x) {\n    int a;\n    std::tie(a) = x;\n    return a;\n}"
Line 3060
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3060 always 3060
  "" always ""
Line 3062
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3062 always 3062
  "std::pair<std::string, std::string>\nstr_pair(std::string const & a, std::string const & b) {\n    return std::make_pair(a, b);\n}\nstd::vector<std::pair<std::string, std::string> > create_parameters() {\n    std::vector<std::pair<std::string, std::string> > par;\n    par.push_back(str_pair(\"param1\", \"prop_a\"));\n    par.push_back(str_pair(\"param2\", \"prop_b\"));\n    par.push_back(str_pair(\"param3\", \"prop_c\"));\n    return par;\n}\n" always "std::pair<std::string, std::string>\nstr_pair(std::string const & a, std::string const & b) {\n    return std::make_pair(a, b);\n}\nstd::vector<std::pair<std::string, std::string> > create_parameters() {\n    std::vector<std::pair<std::string, std::string> > par;\n    par.push_back(str_pair(\"param1\", \"prop_a\"));\n    par.push_back(str_pair(\"param2\", \"prop_b\"));\n    par.push_back(str_pair(\"param3\", \"prop_c\"));\n    return par;\n}\n"
Line 3073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3073 always 3073
  "" always ""
Line 3078
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3078 always 3078
  "struct A {\n    int* i;\n    A(int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" always "struct A {\n    int* i;\n    A(int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n"
Line 3089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3089 always 3089
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3093
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3093 always 3093
  "struct A {\n    int* i;\n    A(int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" always "struct A {\n    int* i;\n    A(int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n"
  true always 1
Line 3103
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3103 always 3103
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error, inconclusive) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error, inconclusive) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3107
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3107 always 3107
  "struct A {\n    int* i;\n    A(const int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" always "struct A {\n    int* i;\n    A(const int& x);\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n"
  true always 1
Line 3117
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3117 always 3117
  "" always ""
Line 3119
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3119 always 3119
  "struct A {\n    int& i;\n    A(int& x)\n    : i(x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n" always "struct A {\n    int& i;\n    A(int& x)\n    : i(x)\n    {}\n};\nA f() {\n    int i = 0;\n    A a{i};\n    return a;\n}\n"
Line 3130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3130 always 3130
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3134
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3134 always 3134
  "struct A {\n    int& i;\n    A(const std::vector<int>& x)\n    : i(x[0])\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n" always "struct A {\n    int& i;\n    A(const std::vector<int>& x)\n    : i(x[0])\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n"
Line 3145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3145 always 3145
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n"
Line 3149
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3149 always 3149
  "struct A {\n    int* i;\n    A(const std::vector<int>& x)\n    : i(x.data())\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n" always "struct A {\n    int* i;\n    A(const std::vector<int>& x)\n    : i(x.data())\n    {}\n};\nA f() {\n    std::vector<int> v = {0};\n    A a{v};\n    return a;\n}\n"
Line 3160
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3160 always 3160
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:10]: (error) Returning object that points to local variable 'v' that will be invalid when returning.\n"
Line 3164
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3164 always 3164
  "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    A a{0};\n    return a;\n}\n" always "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    A a{0};\n    return a;\n}\n"
Line 3174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3174 always 3174
  "[test.cpp:8] -> [test.cpp:9]: (error) Returning object that will be invalid when returning.\n" always "[test.cpp:8] -> [test.cpp:9]: (error) Returning object that will be invalid when returning.\n"
Line 3177
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3177 always 3177
  "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    return A{i};\n}\n" always "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    int i = 0;\n    return A{i};\n}\n"
Line 3187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3187 always 3187
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3191
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3191 always 3191
  "struct A {\n    std::string v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n" always "struct A {\n    std::string v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n"
Line 3201
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3201 always 3201
  "" always ""
Line 3203
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3203 always 3203
  "struct A {\n    std::string_view v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n" always "struct A {\n    std::string_view v;\n    A(const std::string& s)\n    : v(s)\n    {}\n};\nA f() {\n    std::string s;\n    return A{s};\n}\n"
Line 3213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3213 always 3213
  "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 's' that will be invalid when returning.\n"
Line 3217
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3217 always 3217
  "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    return A{0};\n}\n" always "struct A {\n    const int* i;\n    A(const int& x)\n    : i(&x)\n    {}\n};\nA f() {\n    return A{0};\n}\n"
Line 3226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3226 always 3226
  "[test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n" always "[test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n"
Line 3229
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3229 always 3229
  "struct A {\n    int n;\n    A(const int &x) : n(x) {}\n};\nA f() {\n    A m(4);\n    return m;\n}\n" always "struct A {\n    int n;\n    A(const int &x) : n(x) {}\n};\nA f() {\n    A m(4);\n    return m;\n}\n"
Line 3237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3237 always 3237
  "" always ""
Line 3239
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3239 always 3239
  "struct B {};\nstruct A {\n    B n;\n    A(const B &x) : n(x) {}\n};\nA f() {\n    A m(B{});\n    return m;\n}\n" always "struct B {};\nstruct A {\n    B n;\n    A(const B &x) : n(x) {}\n};\nA f() {\n    A m(B{});\n    return m;\n}\n"
Line 3248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3248 always 3248
  "" always ""
Line 3250
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3250 always 3250
  "struct A {\n    A(std::vector<std::string> &filenames)\n    : files(filenames) {}\n    std::vector<std::string> &files;\n};\nA f() {\n    std::vector<std::string> files;\n    return A(files);\n}\n" always "struct A {\n    A(std::vector<std::string> &filenames)\n    : files(filenames) {}\n    std::vector<std::string> &files;\n};\nA f() {\n    std::vector<std::string> files;\n    return A(files);\n}\n"
Line 3259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3259 always 3259
  "[test.cpp:8] -> [test.cpp:7] -> [test.cpp:8]: (error) Returning object that points to local variable 'files' that will be invalid when returning.\n" always "[test.cpp:8] -> [test.cpp:7] -> [test.cpp:8]: (error) Returning object that points to local variable 'files' that will be invalid when returning.\n"
Line 3263
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3263 always 3263
  "struct S {\n    explicit S(std::string& s);\n}\nS f() {\n    std::string m(\"abc\");\n    return S(m);\n}\n" always "struct S {\n    explicit S(std::string& s);\n}\nS f() {\n    std::string m(\"abc\");\n    return S(m);\n}\n"
  true always 1
Line 3271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3271 always 3271
  "" always ""
Line 3273
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3273 always 3273
  "struct S {\n    std::string msg;\n    explicit S(const char* m) : msg(m) {}\n};\nS f() {\n    std::string s(\"abc\");\n    return S(s.c_str());\n}\n" always "struct S {\n    std::string msg;\n    explicit S(const char* m) : msg(m) {}\n};\nS f() {\n    std::string s(\"abc\");\n    return S(s.c_str());\n}\n"
  true always 1
Line 3282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3282 always 3282
  "" always ""
Line 3286
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3286 always 3286
  "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return A{i, i};\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return A{i, i};\n}"
Line 3294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3294 always 3294
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3298
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3298 always 3298
  "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return {i, i};\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    return {i, i};\n}"
Line 3306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3306 always 3306
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3310
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3310 always 3310
  "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r{i, i};\n    return r;\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r{i, i};\n    return r;\n}"
Line 3319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3319 always 3319
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3323
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3323 always 3323
  "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r = {i, i};\n    return r;\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f() {\n    int i = 0;\n    A r = {i, i};\n    return r;\n}"
Line 3332
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3332 always 3332
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:8]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3336
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3336 always 3336
  "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{i, x};\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{i, x};\n}"
Line 3344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3344 always 3344
  "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:7] -> [test.cpp:6] -> [test.cpp:7]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3348
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3348 always 3348
  "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{x, i};\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    int i = 0;\n    return A{x, i};\n}"
Line 3356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3356 always 3356
  "" always ""
Line 3358
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3358 always 3358
  "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    return A{x, x};\n}" always "struct A {\n    const int& x;\n    int y;\n};\nA f(int& x) {\n    return A{x, x};\n}"
Line 3365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3365 always 3365
  "" always ""
Line 3367
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3367 always 3367
  "struct A { int i; const int& j; };\nA f(int& x) {\n    int y = 0;\n    return A{y, x};\n}" always "struct A { int i; const int& j; };\nA f(int& x) {\n    int y = 0;\n    return A{y, x};\n}"
Line 3372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3372 always 3372
  "" always ""
Line 3376
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3376 always 3376
  "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v = {&i, &i};\n    return v;\n}" always "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v = {&i, &i};\n    return v;\n}"
Line 3381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3381 always 3381
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3385
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3385 always 3385
  "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v{&i, &i};\n    return v;\n}" always "std::vector<int*> f() {\n    int i = 0;\n    std::vector<int*> v{&i, &i};\n    return v;\n}"
Line 3390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3390 always 3390
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3394
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3394 always 3394
  "std::vector<int*> f() {\n    int i = 0;\n    return {&i, &i};\n}" always "std::vector<int*> f() {\n    int i = 0;\n    return {&i, &i};\n}"
Line 3398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3398 always 3398
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:2] -> [test.cpp:3]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3402
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3402 always 3402
  "std::vector<int*> f(int& x) {\n    return {&x, &x};\n}" always "std::vector<int*> f(int& x) {\n    return {&x, &x};\n}"
Line 3405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3405 always 3405
  "" always ""
Line 3407
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3407 always 3407
  "std::vector<std::string> f() {\n    std::set<std::string> x;\n    x.insert(\"1\");\n    x.insert(\"2\");\n    return { x.begin(), x.end() };\n}" always "std::vector<std::string> f() {\n    std::set<std::string> x;\n    x.insert(\"1\");\n    x.insert(\"2\");\n    return { x.begin(), x.end() };\n}"
Line 3413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3413 always 3413
  "" always ""
Line 3417
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3417 always 3417
  "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}" always "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   return ba.c_str();\n}"
Line 3422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3422 always 3422
  "" always ""
Line 3424
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3424 always 3424
  "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   A bp = ba.c_str();\n   return bp;\n}" always "struct A { A(const char *a); };\nA f() {\n   std::string ba(\"hello\");\n   A bp = ba.c_str();\n   return bp;\n}"
Line 3430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3430 always 3430
  "" always ""
Line 3432
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3432 always 3432
  "struct A { A(const char *a); };\nstd::vector<A> f() {\n   std::string ba(\"hello\");\n   std::vector<A> v;\n   v.push_back(ba.c_str());\n   return v;\n}" always "struct A { A(const char *a); };\nstd::vector<A> f() {\n   std::string ba(\"hello\");\n   std::vector<A> v;\n   v.push_back(ba.c_str());\n   return v;\n}"
Line 3439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3439 always 3439
  "" always ""
Line 3441
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3441 always 3441
  "std::string f(const std::string& x) {\n  const char c[] = \"\";\n  if (!x.empty())\n    return x + c;\n  return \"\";\n}" always "std::string f(const std::string& x) {\n  const char c[] = \"\";\n  if (!x.empty())\n    return x + c;\n  return \"\";\n}"
Line 3447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3447 always 3447
  "" always ""
Line 3449
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3449 always 3449
  "std::string f(const std::string& x) {\n  const char c[] = \"123\";\n  if (!x.empty())\n    return c + 1;\n  return \"\";\n}" always "std::string f(const std::string& x) {\n  const char c[] = \"123\";\n  if (!x.empty())\n    return c + 1;\n  return \"\";\n}"
Line 3455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3455 always 3455
  "" always ""
Line 3459
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3459 always 3459
  "const int& g(const int& x) {\n    return x;\n}\nvoid f(int& i) {\n    int* x = &g(0);\n    i += *x;\n}" always "const int& g(const int& x) {\n    return x;\n}\nvoid f(int& i) {\n    int* x = &g(0);\n    i += *x;\n}"
Line 3466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3466 always 3466
  "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n" always "[test.cpp:1] -> [test.cpp:2] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n"
Line 3470
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3470 always 3470
  "QString f() {\n    QString a(\"dummyValue\");\n    const char* b = a.toStdString().c_str();\n    QString c = b;\n    return c;\n}" always "QString f() {\n    QString a(\"dummyValue\");\n    const char* b = a.toStdString().c_str();\n    QString c = b;\n    return c;\n}"
Line 3476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3476 always 3476
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using pointer that is a temporary.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using pointer that is a temporary.\n"
Line 3479
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3479 always 3479
  "auto f(std::string s) {\n    const char *x = s.substr(1,2).c_str();\n    auto i = s.substr(4,5).begin();\n    return *i;\n}" always "auto f(std::string s) {\n    const char *x = s.substr(1,2).c_str();\n    auto i = s.substr(4,5).begin();\n    return *i;\n}"
Line 3484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3484 always 3484
  "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using iterator that is a temporary.\n" always "[test.cpp:3] -> [test.cpp:3] -> [test.cpp:4]: (error) Using iterator that is a temporary.\n"
Line 3487
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3487 always 3487
  "std::string f() {\n    std::stringstream tmp;\n    const std::string &str = tmp.str();\n    return std::string(str.c_str(), 1);\n}" always "std::string f() {\n    std::stringstream tmp;\n    const std::string &str = tmp.str();\n    return std::string(str.c_str(), 1);\n}"
Line 3492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3492 always 3492
  "" always ""
Line 3494
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3494 always 3494
  "int get_value();\nconst int &get_reference1() {\n  const int &x = get_value();\n  return x;\n}\n" always "int get_value();\nconst int &get_reference1() {\n  const int &x = get_value();\n  return x;\n}\n"
Line 3499
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3499 always 3499
  "[test.cpp:3] -> [test.cpp:4]: (error) Reference to temporary returned.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Reference to temporary returned.\n"
Line 3501
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3501 always 3501
  "int get_value();\nconst int &get_reference2() {\n  const int &x1 = get_value();\n  const int &x2 = x1;\n  return x2;\n}\n" always "int get_value();\nconst int &get_reference2() {\n  const int &x1 = get_value();\n  const int &x2 = x1;\n  return x2;\n}\n"
Line 3507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3507 always 3507
  "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Reference to temporary returned.\n" always "[test.cpp:4] -> [test.cpp:3] -> [test.cpp:5]: (error) Reference to temporary returned.\n"
Line 3510
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3510 always 3510
  "const std::string& getState() {\n    static const std::string& state = \"\";\n    return state;\n}\n" always "const std::string& getState() {\n    static const std::string& state = \"\";\n    return state;\n}\n"
Line 3514
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3514 always 3514
  "" always ""
Line 3516
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3516 always 3516
  "struct var {\n    void fun();\n}x;\nvar* T(const char*) {\n    return &x;\n}\nstd::string GetTemp();\nvoid f() {\n    auto a = T(GetTemp().c_str());\n    a->fun();\n}\n" always "struct var {\n    void fun();\n}x;\nvar* T(const char*) {\n    return &x;\n}\nstd::string GetTemp();\nvoid f() {\n    auto a = T(GetTemp().c_str());\n    a->fun();\n}\n"
Line 3527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3527 always 3527
  "" always ""
Line 3529
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3529 always 3529
  "struct A {\n    std::map<int, int> m_;\n};\nstruct B {\n    A a_;\n};\nB func();\nvoid f() {\n    const std::map<int, int>::iterator& m = func().a_.m_.begin();\n    (void)m->first;\n}\n" always "struct A {\n    std::map<int, int> m_;\n};\nstruct B {\n    A a_;\n};\nB func();\nvoid f() {\n    const std::map<int, int>::iterator& m = func().a_.m_.begin();\n    (void)m->first;\n}\n"
Line 3540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3540 always 3540
  "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:10]: (error) Using iterator that is a temporary.\n" always "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:10]: (error) Using iterator that is a temporary.\n"
Line 3543
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3543 always 3543
  "void f(bool b) {\n  std::vector<int> ints = g();\n  auto *ptr = &ints;\n  if (b)\n    ptr = &ints;\n  for (auto it = ptr->begin(); it != ptr->end(); ++it)\n  {}\n}\n" always "void f(bool b) {\n  std::vector<int> ints = g();\n  auto *ptr = &ints;\n  if (b)\n    ptr = &ints;\n  for (auto it = ptr->begin(); it != ptr->end(); ++it)\n  {}\n}\n"
Line 3551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3551 always 3551
  "" always ""
Line 3553
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3553 always 3553
  "struct String {\n    void Append(uint8_t Val);\n    String& operator+=(const char s[]);\n    String& operator+=(const std::string& Str) {\n        return operator+=(Str.c_str());\n    }\n    void operator+=(uint8_t Val) {\n        Append(Val);\n    }\n};\n" always "struct String {\n    void Append(uint8_t Val);\n    String& operator+=(const char s[]);\n    String& operator+=(const std::string& Str) {\n        return operator+=(Str.c_str());\n    }\n    void operator+=(uint8_t Val) {\n        Append(Val);\n    }\n};\n"
Line 3563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3563 always 3563
  "" always ""
Line 3566
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3566 always 3566
  "struct S {\n    int& r;\n};\nvoid f(int i) {\n    const S a[] = { { i } };\n    for (const auto& s : a) {}\n}\n" always "struct S {\n    int& r;\n};\nvoid f(int i) {\n    const S a[] = { { i } };\n    for (const auto& s : a) {}\n}\n"
Line 3573
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3573 always 3573
  "" always ""
Line 3579
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3579 always 3579
  "struct Info { int k; };\nstruct MoreInfo {\n    int* k;\n    char dat;\n};\nstruct Fields {\n    Info info;\n};\ntemplate <typename T> void func1(T val){}\ntemplate <typename T> void func2(T val){}\nFields* get();\nvoid doit() {\n    MoreInfo rech;\n    rech.k = &get()->info.k;\n    func1(&rech.dat);\n    func2(rech.k);\n}\n" always "struct Info { int k; };\nstruct MoreInfo {\n    int* k;\n    char dat;\n};\nstruct Fields {\n    Info info;\n};\ntemplate <typename T> void func1(T val){}\ntemplate <typename T> void func2(T val){}\nFields* get();\nvoid doit() {\n    MoreInfo rech;\n    rech.k = &get()->info.k;\n    func1(&rech.dat);\n    func2(rech.k);\n}\n"
Line 3596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3596 always 3596
  "" always ""
Line 3598
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3598 always 3598
  "struct A { int x; };\nA* g();\nvoid f() {\n    A** ap = &g();\n    (*ap)->x;\n}\n" always "struct A { int x; };\nA* g();\nvoid f() {\n    A** ap = &g();\n    (*ap)->x;\n}\n"
Line 3604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3604 always 3604
  "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n" always "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:5]: (error) Using pointer that is a temporary.\n"
Line 3607
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3607 always 3607
  "struct A { int* x; };\nA g();\nvoid f() {\n    int* x = g().x;\n    (void)*x + 1;\n}\n" always "struct A { int* x; };\nA g();\nvoid f() {\n    int* x = g().x;\n    (void)*x + 1;\n}\n"
Line 3613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3613 always 3613
  "" always ""
Line 3615
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3615 always 3615
  "struct A { int x; };\nstruct B { A* a; }\nB g();\nvoid f() {\n    int* x = &g()->a.x;\n    (void)*x + 1;\n}\n" always "struct A { int x; };\nstruct B { A* a; }\nB g();\nvoid f() {\n    int* x = &g()->a.x;\n    (void)*x + 1;\n}\n"
Line 3622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3622 always 3622
  "" always ""
Line 3624
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3624 always 3624
  "struct A { int x; };\nstruct B { A* g(); };\nA* g();\nvoid f(B b) {\n    A** ap = &b.g();\n    (*ap)->x;\n}\n" always "struct A { int x; };\nstruct B { A* g(); };\nA* g();\nvoid f(B b) {\n    A** ap = &b.g();\n    (*ap)->x;\n}\n"
Line 3631
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3631 always 3631
  "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n" always "[test.cpp:5] -> [test.cpp:5] -> [test.cpp:6]: (error) Using pointer that is a temporary.\n"
Line 3637
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3637 always 3637
  "struct S {\n    S(int i) : i(i) {}\n    int i;\n    int* ptr() { return &i; }\n};\nint* fun(int i) { \n    return S(i).ptr();\n}\n" always "struct S {\n    S(int i) : i(i) {}\n    int i;\n    int* ptr() { return &i; }\n};\nint* fun(int i) { \n    return S(i).ptr();\n}\n"
Line 3645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3645 always 3645
  "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:7]: (error) Returning pointer that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:7] -> [test.cpp:7]: (error) Returning pointer that will be invalid when returning.\n"
Line 3649
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3649 always 3649
  "struct Fred\n{\n    int x[2];\n    Fred() {\n        x[0] = 0x41;\n        x[1] = 0x42;\n    }\n    const int *get_x() {\n        return x;\n    }\n};\nstatic const int *foo() {\n    Fred fred;\n    return fred.get_x();\n}\n" always "struct Fred\n{\n    int x[2];\n    Fred() {\n        x[0] = 0x41;\n        x[1] = 0x42;\n    }\n    const int *get_x() {\n        return x;\n    }\n};\nstatic const int *foo() {\n    Fred fred;\n    return fred.get_x();\n}\n"
Line 3664
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3664 always 3664
  "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:14] -> [test.cpp:13] -> [test.cpp:14]: (error) Returning pointer to local variable 'fred' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:14] -> [test.cpp:13] -> [test.cpp:14]: (error) Returning pointer to local variable 'fred' that will be invalid when returning.\n"
Line 3668
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3668 always 3668
  "struct A {\n    int i;\n    auto f() const {\n        return [=]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n" always "struct A {\n    int i;\n    auto f() const {\n        return [=]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n"
Line 3677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3677 always 3677
  "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n" always "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:8]: (error) Returning object that will be invalid when returning.\n"
Line 3681
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3681 always 3681
  "struct A {\n    int i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n" always "struct A {\n    int i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    return A().f();\n}\n"
Line 3690
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3690 always 3690
  "" always ""
Line 3692
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3692 always 3692
  "struct A {\n    int* i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    int i = 0;\n    return A{&i}.f();\n}\n" always "struct A {\n    int* i;\n    auto f() const {\n        return [*this]{ return i; };\n    }\n};\nauto g() {\n    int i = 0;\n    return A{&i}.f();\n}\n"
Line 3702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3702 always 3702
  "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:9] -> [test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n" always "[test.cpp:9] -> [test.cpp:9] -> [test.cpp:9] -> [test.cpp:4] -> [test.cpp:4] -> [test.cpp:8] -> [test.cpp:9]: (error) Returning object that points to local variable 'i' that will be invalid when returning.\n"
Line 3706
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3706 always 3706
  "struct S {\n    int i{};\n};\nstruct T {\n    S getS() const { return S{ j }; }\n    int j{};\n};\nvoid f(S* p) {\n    S ret;\n    {\n        T t;\n        ret = t.getS();\n    }\n    *p = ret;\n}\n" always "struct S {\n    int i{};\n};\nstruct T {\n    S getS() const { return S{ j }; }\n    int j{};\n};\nvoid f(S* p) {\n    S ret;\n    {\n        T t;\n        ret = t.getS();\n    }\n    *p = ret;\n}\n"
Line 3721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3721 always 3721
  "" always ""
Line 3725
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3725 always 3725
  "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n    }\n    f();\n}" always "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n    }\n    f();\n}"
Line 3733
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3733 always 3733
  "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using lambda that captures local variable 'b' that is out of scope.\n" always "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using lambda that captures local variable 'b' that is out of scope.\n"
Line 3735
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3735 always 3735
  "void f(bool b)  {\n  int* x;\n  if(b) {\n    int y[6] = {0,1,2,3,4,5};\n    x = y;\n  }\n  x[3];\n}" always "void f(bool b)  {\n  int* x;\n  if(b) {\n    int y[6] = {0,1,2,3,4,5};\n    x = y;\n  }\n  x[3];\n}"
Line 3743
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3743 always 3743
  "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'y' that is out of scope.\n" always "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'y' that is out of scope.\n"
Line 3747
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3747 always 3747
  "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n        f();\n    }\n}" always "void foo(int a) {\n    std::function<void()> f;\n    if (a > 0) {\n        int b = a + 1;\n        f = [&]{ return b; };\n        f();\n    }\n}"
Line 3755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3755 always 3755
  "" always ""
Line 3757
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3757 always 3757
  "struct a {\n  b();\n  std::list<int> c;\n};\nvoid a::b() {\n  c.end()\n}" always "struct a {\n  b();\n  std::list<int> c;\n};\nvoid a::b() {\n  c.end()\n}"
Line 3764
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3764 always 3764
  "" always ""
Line 3766
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3766 always 3766
  "void b(char f[], char c[]) {\n  std::string d(c); {\n    std::string e;\n    b(f, e.c_str())\n  }\n}" always "void b(char f[], char c[]) {\n  std::string d(c); {\n    std::string e;\n    b(f, e.c_str())\n  }\n}"
Line 3772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3772 always 3772
  "" always ""
Line 3774
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3774 always 3774
  "void f(bool b) {\n    std::string s;\n    if(b) {\n        char buf[3];\n        s = buf;\n    }\n    std::cout << s;\n}" always "void f(bool b) {\n    std::string s;\n    if(b) {\n        char buf[3];\n        s = buf;\n    }\n    std::cout << s;\n}"
Line 3782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3782 always 3782
  "" always ""
Line 3784
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3784 always 3784
  "int &a[];\nvoid b(){int *c = a};" always "int &a[];\nvoid b(){int *c = a};"
Line 3786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3786 always 3786
  "" always ""
Line 3788
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3788 always 3788
  "struct A {\n    int x;\n};\nstruct B {\n    std::function<void()> x;\n    void f() {\n        this->x = [&] {\n            B y;\n            return y.x;\n        };\n    }\n};" always "struct A {\n    int x;\n};\nstruct B {\n    std::function<void()> x;\n    void f() {\n        this->x = [&] {\n            B y;\n            return y.x;\n        };\n    }\n};"
Line 3800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3800 always 3800
  "" always ""
Line 3802
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3802 always 3802
  "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n}\n" always "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n}\n"
Line 3819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3819 always 3819
  "" always ""
Line 3821
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3821 always 3821
  "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n" always "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n    bar->_foo = nullptr;\n  }\n  f(bar);\n}\n"
Line 3836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3836 always 3836
  "" always ""
Line 3838
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3838 always 3838
  "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n}\n" always "namespace test {\nclass Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n}\n"
Line 3854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3854 always 3854
  "[test.cpp:12]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:12]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 3856
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3856 always 3856
  "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n" always "class Foo {};\nstruct Bar {\n  Foo *_foo;\n};\n\nint f(Bar *bar);\n\nvoid g(Bar *bar) {\n  {\n    Foo foo;\n    bar->_foo = &foo;\n  }\n  f(bar);\n}\n"
Line 3870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3870 always 3870
  "[test.cpp:11]: (error) Address of local auto-variable assigned to a function parameter.\n" always "[test.cpp:11]: (error) Address of local auto-variable assigned to a function parameter.\n"
Line 3874
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3874 always 3874
  "void f() {\n  int *p = p1;\n  if (cond) {\n    int x;\n    p = &x;\n  }\n  *p = 0;\n}" always "void f() {\n  int *p = p1;\n  if (cond) {\n    int x;\n    p = &x;\n  }\n  *p = 0;\n}"
Line 3882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3882 always 3882
  "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'x' that is out of scope.\n" always "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'x' that is out of scope.\n"
Line 3885
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3885 always 3885
  "void f(struct KEY *key) {\n  key->x = 0;\n}\n\nint main() {\n  struct KEY *tmp = 0;\n  struct KEY k;\n\n  if (condition) {\n    tmp = &k;\n  } else {\n  }\n  f(tmp);\n}" always "void f(struct KEY *key) {\n  key->x = 0;\n}\n\nint main() {\n  struct KEY *tmp = 0;\n  struct KEY k;\n\n  if (condition) {\n    tmp = &k;\n  } else {\n  }\n  f(tmp);\n}"
Line 3899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3899 always 3899
  "" always ""
Line 3902
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3902 always 3902
  "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem& item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}" always "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem& item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}"
Line 3911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3911 always 3911
  "" always ""
Line 3913
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3913 always 3913
  "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}" always "void f() {\n    wxAuiToolBarItem* former_hover = NULL;\n    for (i = 0, count = m_items.GetCount(); i < count; ++i) {\n        wxAuiToolBarItem item = m_items.Item(i);\n        former_hover = &item;\n    }\n    if (former_hover != pitem)\n        dosth();\n}"
Line 3922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3922 always 3922
  "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'item' that is out of scope.\n" always "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:7]: (error) Using pointer to local variable 'item' that is out of scope.\n"
Line 3925
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3925 always 3925
  "void trp_deliver_signal()  {\n    union {\n        Uint32 theData[25];\n        EventReport repData;\n    };\n    EventReport * rep = &repData;\n    rep->setEventType(NDB_LE_Connected);\n}" always "void trp_deliver_signal()  {\n    union {\n        Uint32 theData[25];\n        EventReport repData;\n    };\n    EventReport * rep = &repData;\n    rep->setEventType(NDB_LE_Connected);\n}"
Line 3933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3933 always 3933
  "" always ""
Line 3936
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3936 always 3936
  "int f(bool a, bool b) {\n    int *iPtr = 0;\n    if(b) {\n        int x = 42;\n        iPtr = &x;\n    }\n    if(b && a)\n        return *iPtr;\n    return 0;\n}" always "int f(bool a, bool b) {\n    int *iPtr = 0;\n    if(b) {\n        int x = 42;\n        iPtr = &x;\n    }\n    if(b && a)\n        return *iPtr;\n    return 0;\n}"
Line 3946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3946 always 3946
  "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:8]: (error) Using pointer to local variable 'x' that is out of scope.\n" always "[test.cpp:5] -> [test.cpp:4] -> [test.cpp:8]: (error) Using pointer to local variable 'x' that is out of scope.\n"
Line 3950
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3950 always 3950
  "namespace ns\n{\n    auto var{ 0 };\n}\nnamespace ns\n{\n    int i;\n}\n" always "namespace ns\n{\n    auto var{ 0 };\n}\nnamespace ns\n{\n    int i;\n}\n"
Line 3958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testautovariables.cpp" always "cppcheck-2.8/test/testautovariables.cpp"
  3958 always 3958
  "" always ""
