

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741935 expected@var22 !=@expr1073741936 actual@var23 ) {
62: std ::@expr1073741937 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741938 expected@var22 ;
64: std ::@expr1073741939 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741940 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741941 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741942 str (@expr1073741943 ) , actualStr@var26 .@expr1073741944 str (@expr1073741945 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741946 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741947 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741948 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741949 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testboost.cpp

1:
|
27:
28: class TestBoost : public TestFixture {
29: public:
30: TestBoost ( ) : TestFixture ( "TestBoost" ) { }
31:
32: private:
33: Settings settings@var102 ;
34:
35: void run ( ) override {
36: settings@var102 .@expr128 severity@var103 .@expr129 enable (@expr1073741954 Severity ::@expr1073741955 style@expr1073741950 ) ;
37: settings@var102 .@expr128 severity@var103 .@expr129 enable (@expr1073741958 Severity ::@expr1073741959 performance@expr1073741951 ) ;
38:
39: $do ${ $if $(@expr1073741960 $prepareTest $(@expr1073741961 "BoostForeachContainerModification" $) $) ${ $setVerbose $(@expr1073741962 $false $) $; BoostForeachContainerModification $(@expr1073741963 $) $; $} $} $while $(@expr1073741964 $false $) ;
40: }
41:
42:
43: void check_ ( const char code@var104 [ ] , const char * file@var105 , int line@var106 ) {
44:
45: errout@var100 .@expr1073741965 str (@expr1073741966 "" ) ;
46:
47:
48: Tokenizer tokenizer@var107 (@expr1073741967 &@expr144 settings@var102 , this@expr145 ) ;
49: std ::@expr1073741970 istringstream istr@var108 (@expr1073741971 code@var104 ) ;
50: $assert_ $(@expr1073741972 file@var105 $, line@var106 $, $(@expr1073741973 tokenizer@var107 .@expr1073741974 tokenize (@expr1073741975 istr@var108 , "test.cpp" ) $) $) ;
51:
52:
53: CheckBoost checkBoost@var109 ;
54: checkBoost@var109 .@expr1073741976 runChecks (@expr1073741977 &@expr1073741978 tokenizer@var107 , &@expr144 settings@var102 , this@expr145 ) ;
55: }
56:
57: void BoostForeachContainerModification ( ) {
58: $check_ $(@expr1073741980 "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n    }\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 58 $)
59:
|
62:
63: ;
64: $if $(@expr1073741981 $!@expr1073741982 $assertEquals $(@expr1073741983 "cppcheck-2.8/test/testboost.cpp" $, 64 $, "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
65:
66: $check_ $(@expr1073741986 "void f() {\n    set<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.insert(123);\n    }\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 66 $)
67:
|
70:
71: ;
72: $if $(@expr1073741987 $!@expr1073741988 $assertEquals $(@expr1073741989 "cppcheck-2.8/test/testboost.cpp" $, 72 $, "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
73:
74: $check_ $(@expr1073741992 "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data) {\n        data.erase(123);\n    }\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 74 $)
75:
|
78:
79: ;
80: $if $(@expr1073741993 $!@expr1073741994 $assertEquals $(@expr1073741995 "cppcheck-2.8/test/testboost.cpp" $, 80 $, "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
81:
82:
83: $check_ $(@expr1073741998 "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data)\n        data.clear();\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 83 $)
84:
85:
86:
87: ;
88: $if $(@expr1073741999 $!@expr1073742000 $assertEquals $(@expr1073742001 "cppcheck-2.8/test/testboost.cpp" $, 88 $, "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
89:
90:
91: $check_ $(@expr1073742004 "void f() {\n    BOOST_FOREACH(const int &i, get_data())\n        data.insert(i);\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 91 $)
92:
93:
94: ;
95: $if $(@expr1073742005 $!@expr1073742006 $assertEquals $(@expr1073742007 "cppcheck-2.8/test/testboost.cpp" $, 95 $, "" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
96:
97:
98: $check_ $(@expr1073742010 "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n        break;\n    }\n}" $, "cppcheck-2.8/test/testboost.cpp" $, 98 $)
99:
|
103:
104: ;
105: $if $(@expr1073742011 $!@expr1073742012 $assertEquals $(@expr1073742013 "cppcheck-2.8/test/testboost.cpp" $, 105 $, "" $, errout@var100 .@expr160 str (@expr161 ) $) $) { $return ; }
106: }
107: } ;
108:
109: $namespace ${ TestBoost instance_TestBoost@var110 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@7}
  v {!<=-1,!>=2,0@7}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 30
  "TestBoost" always "TestBoost"
Line 39
  ( always {!<=-1,!>=2}
  "BoostForeachContainerModification" always "BoostForeachContainerModification"
  false always 0
  false always 0
Line 45
  "" always ""
Line 48
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 49
  code possible {"void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n    }\n}"@1,"void f() {\n    set<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.insert(123);\n    }\n}"@2,"void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data) {\n        data.erase(123);\n    }\n}"@3,"void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data)\n        data.clear();\n}"@4,"void f() {\n    BOOST_FOREACH(const int &i, get_data())\n        data.insert(i);\n}"@5,"void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n        break;\n    }\n}"@6}
Line 50
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testboost.cpp"@1,"cppcheck-2.8/test/testboost.cpp"@2,"cppcheck-2.8/test/testboost.cpp"@3,"cppcheck-2.8/test/testboost.cpp"@4,"cppcheck-2.8/test/testboost.cpp"@5,"cppcheck-2.8/test/testboost.cpp"@6}
  line inconclusive {58@1,66@2,74@3,83@4,91@5,98@6}
  "test.cpp" always "test.cpp"
Line 54
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 58
  "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n    }\n}" always "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n    }\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  58 always 58
Line 64
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  64 always 64
  "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" always "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n"
Line 66
  "void f() {\n    set<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.insert(123);\n    }\n}" always "void f() {\n    set<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.insert(123);\n    }\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  66 always 66
Line 72
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  72 always 72
  "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" always "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n"
Line 74
  "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data) {\n        data.erase(123);\n    }\n}" always "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data) {\n        data.erase(123);\n    }\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  74 always 74
Line 80
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  80 always 80
  "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" always "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n"
Line 83
  "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data)\n        data.clear();\n}" always "void f() {\n    set<int> data;\n    BOOST_FOREACH(const int &i, data)\n        data.clear();\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  83 always 83
Line 88
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  88 always 88
  "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n" always "[test.cpp:4]: (error) BOOST_FOREACH caches the end() iterator. It's undefined behavior if you modify the container inside.\n"
Line 91
  "void f() {\n    BOOST_FOREACH(const int &i, get_data())\n        data.insert(i);\n}" always "void f() {\n    BOOST_FOREACH(const int &i, get_data())\n        data.insert(i);\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  91 always 91
Line 95
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  95 always 95
  "" always ""
Line 98
  "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n        break;\n    }\n}" always "void f() {\n    vector<int> data;\n    BOOST_FOREACH(int i, data) {\n        data.push_back(123);\n        break;\n    }\n}"
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  98 always 98
Line 105
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testboost.cpp" always "cppcheck-2.8/test/testboost.cpp"
  105 always 105
  "" always ""
