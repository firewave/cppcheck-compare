

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741996 expected@var22 !=@expr1073741997 actual@var23 ) {
62: std ::@expr1073741998 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741999 expected@var22 ;
64: std ::@expr1073742000 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742001 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742002 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742003 str (@expr1073742004 ) , actualStr@var26 .@expr1073742005 str (@expr1073742006 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742007 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742008 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742009 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742010 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testbufferoverrun.cpp

1:
|
41:
42: class TestBufferOverrun : public TestFixture {
43: public:
44: TestBufferOverrun ( ) : TestFixture ( "TestBufferOverrun" ) { }
45:
46: private:
47: Settings settings0@var102 ;
48:
49:
50: void check_ ( const char * file@var103 , int line@var104 , const char code@var105 [ ] , const char filename@var106 [ 9 ] = "test.cpp" ) {
51:
52: errout@var100 .@expr1073742012 str (@expr1073742013 "" ) ;
53:
54: settings0@var102 .@expr1073742014 certainty@var107 .@expr1073742015 enable (@expr1073742016 Certainty ::@expr1073742017 inconclusive@expr1073742011 ) ;
55:
56:
57: Tokenizer tokenizer@var108 (@expr1073742018 &@expr195 settings0@var102 , this@expr196 ) ;
58: std ::@expr1073742021 istringstream istr@var109 (@expr1073742022 code@var105 ) ;
59: $assert_ $(@expr1073742023 file@var103 $, line@var104 $, $(@expr1073742024 tokenizer@var108 .@expr1073742025 tokenize (@expr1073742026 istr@var109 , filename@var106 ) $) $) ;
60:
61:
62: CheckBufferOverrun checkBufferOverrun@var110 ;
63: checkBufferOverrun@var110 .@expr1073742027 runChecks (@expr1073742028 &@expr1073742029 tokenizer@var108 , &@expr195 settings0@var102 , this@expr196 ) ;
64: }
65:
66: void check_ ( const char * file@var111 , int line@var112 , const char code@var113 [ ] , const Settings & settings@var114 , const char filename@var115 [ 9 ] = "test.cpp" ) {
67: Tokenizer tokenizer@var116 (@expr1073742031 &@expr208 settings@var114 , this@expr209 ) ;
68: std ::@expr1073742034 istringstream istr@var117 (@expr1073742035 code@var113 ) ;
69: $assert_ $(@expr1073742036 file@var111 $, line@var112 $, $(@expr1073742037 tokenizer@var116 .@expr1073742038 tokenize (@expr1073742039 istr@var117 , filename@var115 ) $) $) ;
70:
71:
72: errout@var100 .@expr1073742040 str (@expr1073742041 "" ) ;
73:
74:
75: CheckBufferOverrun checkBufferOverrun@var118 (@expr1073742042 &@expr219 tokenizer@var116 , &@expr208 settings@var114 , this@expr209 ) ;
76: checkBufferOverrun@var118 .@expr1073742045 runChecks (@expr1073742046 &@expr219 tokenizer@var116 , &@expr208 settings@var114 , this@expr209 ) ;
77: }
78:
79: void checkP ( const char code@var119 [ ] , const char * filename@var120 = "test.cpp" )
80: {
81:
82: errout@var100 .@expr1073742057 str (@expr1073742058 "" ) ;
83:
84: Settings * settings@var121 ; settings@var121 =@expr1073742059 &@expr1073742060 settings0@var102 ;
85: settings@var121 .@expr237 severity@var122 .@expr238 enable (@expr1073742063 Severity ::@expr1073742064 style@expr1073742049 ) ;
86: settings@var121 .@expr237 severity@var122 .@expr238 enable (@expr1073742067 Severity ::@expr1073742068 warning@expr1073742050 ) ;
87: settings@var121 .@expr237 severity@var122 .@expr238 enable (@expr1073742071 Severity ::@expr1073742072 portability@expr1073742051 ) ;
88: settings@var121 .@expr237 severity@var122 .@expr238 enable (@expr1073742075 Severity ::@expr1073742076 performance@expr1073742052 ) ;
89: settings@var121 .@expr253 standards@var123 .@expr1073742078 c@var124 =@expr1073742079 Standards ::@expr1073742080 CLatest@expr1073742053 ;
90: settings@var121 .@expr253 standards@var123 .@expr1073742082 cpp@var125 =@expr1073742083 Standards ::@expr1073742084 CPPLatest@expr1073742054 ;
91: settings@var121 .@expr261 certainty@var126 .@expr1073742086 enable (@expr1073742087 Certainty ::@expr1073742088 inconclusive@expr1073742055 ) ;
92: settings@var121 .@expr261 certainty@var126 .@expr1073742090 disable (@expr1073742091 Certainty ::@expr1073742092 experimental@expr1073742056 ) ;
93:
94:
95: std ::@expr1073742093 vector < std ::@expr270 string > files@var127 (@expr1073742095 1 , filename@var120 ) ;
96: std ::@expr1073742096 istringstream istr@var128 (@expr1073742097 code@var119 ) ;
97: const simplecpp ::@expr1073742098 TokenList tokens1@var129 (@expr1073742099 istr@var128 , files@var127 , files@var127 [@expr1073742100 0 ] ) ;
98:
99:
100: simplecpp ::@expr1073742101 TokenList tokens2@var130 (@expr1073742102 files@var127 ) ;
101: std ::@expr1073742103 map < std ::@expr270 string , simplecpp ::@expr270 TokenList *@expr1073742106 > filedata@var131 ;
102: simplecpp ::@expr1073742107 preprocess (@expr1073742108 tokens2@var130 , tokens1@var129 , files@var127 , filedata@var131 , simplecpp ::@expr1073742109 DUI (@expr1073742110 ) ) ;
103:
104: Preprocessor preprocessor@var132 (@expr1073742111 *@expr1073742112 settings@var121 , nullptr ) ;
105: preprocessor@var132 .@expr1073742113 setDirectives (@expr1073742114 tokens1@var129 ) ;
106:
107:
108: Tokenizer tokenizer@var133 (@expr1073742115 settings@var121 , this@expr292 ) ;
109: tokenizer@var133 .@expr1073742117 createTokens (@expr1073742118 std ::@expr1073742119 move (@expr1073742120 tokens2@var130 ) ) ;
110: tokenizer@var133 .@expr1073742121 simplifyTokens1 (@expr1073742122 "" ) ;
111: tokenizer@var133 .@expr1073742123 setPreprocessor (@expr1073742124 &@expr1073742125 preprocessor@var132 ) ;
112:
113:
114: CheckBufferOverrun checkBufferOverrun@var134 (@expr1073742126 &@expr303 tokenizer@var133 , settings@var121 , this@expr292 ) ;
115: checkBufferOverrun@var134 .@expr1073742128 runChecks (@expr1073742129 &@expr303 tokenizer@var133 , settings@var121 , this@expr292 ) ;
116: }
117:
118: void run ( ) override {
119: $do ${ $if $(@expr1073742134 settings0@var102 .@expr1073742135 library@var135 $.@expr1073742136 $load $(@expr1073742137 $exename@var11 $.@expr1073742138 $c_str $(@expr1073742139 $) $, "std.cfg" $) $.@expr1073742140 $errorcode $!=@expr1073742141 $Library $::@expr1073742142 $ErrorCode $::@expr1073742143 $OK $) ${ $complainMissingLib $(@expr1073742144 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742145 $false $) ;
120:
121: settings0@var102 .@expr322 severity@var136 .@expr323 enable (@expr1073742148 Severity ::@expr1073742149 warning@expr1073742131 ) ;
122: settings0@var102 .@expr322 severity@var136 .@expr323 enable (@expr1073742152 Severity ::@expr1073742153 style@expr1073742132 ) ;
123: settings0@var102 .@expr322 severity@var136 .@expr323 enable (@expr1073742156 Severity ::@expr1073742157 portability@expr1073742133 ) ;
124:
125: $do ${ $if $(@expr1073742158 $prepareTest $(@expr1073742159 "noerr1" $) $) ${ $setVerbose $(@expr1073742160 $false $) $; noerr1 $(@expr1073742161 $) $; $} $} $while $(@expr1073742162 $false $) ;
126: $do ${ $if $(@expr1073742163 $prepareTest $(@expr1073742164 "noerr2" $) $) ${ $setVerbose $(@expr1073742165 $false $) $; noerr2 $(@expr1073742166 $) $; $} $} $while $(@expr1073742167 $false $) ;
127: $do ${ $if $(@expr1073742168 $prepareTest $(@expr1073742169 "noerr3" $) $) ${ $setVerbose $(@expr1073742170 $false $) $; noerr3 $(@expr1073742171 $) $; $} $} $while $(@expr1073742172 $false $) ;
128: $do ${ $if $(@expr1073742173 $prepareTest $(@expr1073742174 "noerr4" $) $) ${ $setVerbose $(@expr1073742175 $false $) $; noerr4 $(@expr1073742176 $) $; $} $} $while $(@expr1073742177 $false $) ;
129:
130: $do ${ $if $(@expr1073742178 $prepareTest $(@expr1073742179 "sizeof3" $) $) ${ $setVerbose $(@expr1073742180 $false $) $; sizeof3 $(@expr1073742181 $) $; $} $} $while $(@expr1073742182 $false $) ;
131:
132: $do ${ $if $(@expr1073742183 $prepareTest $(@expr1073742184 "array_index_1" $) $) ${ $setVerbose $(@expr1073742185 $false $) $; array_index_1 $(@expr1073742186 $) $; $} $} $while $(@expr1073742187 $false $) ;
133: $do ${ $if $(@expr1073742188 $prepareTest $(@expr1073742189 "array_index_2" $) $) ${ $setVerbose $(@expr1073742190 $false $) $; array_index_2 $(@expr1073742191 $) $; $} $} $while $(@expr1073742192 $false $) ;
134: $do ${ $if $(@expr1073742193 $prepareTest $(@expr1073742194 "array_index_3" $) $) ${ $setVerbose $(@expr1073742195 $false $) $; array_index_3 $(@expr1073742196 $) $; $} $} $while $(@expr1073742197 $false $) ;
135: $do ${ $if $(@expr1073742198 $prepareTest $(@expr1073742199 "array_index_4" $) $) ${ $setVerbose $(@expr1073742200 $false $) $; array_index_4 $(@expr1073742201 $) $; $} $} $while $(@expr1073742202 $false $) ;
136: $do ${ $if $(@expr1073742203 $prepareTest $(@expr1073742204 "array_index_6" $) $) ${ $setVerbose $(@expr1073742205 $false $) $; array_index_6 $(@expr1073742206 $) $; $} $} $while $(@expr1073742207 $false $) ;
137: $do ${ $if $(@expr1073742208 $prepareTest $(@expr1073742209 "array_index_7" $) $) ${ $setVerbose $(@expr1073742210 $false $) $; array_index_7 $(@expr1073742211 $) $; $} $} $while $(@expr1073742212 $false $) ;
138: $do ${ $if $(@expr1073742213 $prepareTest $(@expr1073742214 "array_index_11" $) $) ${ $setVerbose $(@expr1073742215 $false $) $; array_index_11 $(@expr1073742216 $) $; $} $} $while $(@expr1073742217 $false $) ;
139: $do ${ $if $(@expr1073742218 $prepareTest $(@expr1073742219 "array_index_12" $) $) ${ $setVerbose $(@expr1073742220 $false $) $; array_index_12 $(@expr1073742221 $) $; $} $} $while $(@expr1073742222 $false $) ;
140: $do ${ $if $(@expr1073742223 $prepareTest $(@expr1073742224 "array_index_13" $) $) ${ $setVerbose $(@expr1073742225 $false $) $; array_index_13 $(@expr1073742226 $) $; $} $} $while $(@expr1073742227 $false $) ;
141: $do ${ $if $(@expr1073742228 $prepareTest $(@expr1073742229 "array_index_14" $) $) ${ $setVerbose $(@expr1073742230 $false $) $; array_index_14 $(@expr1073742231 $) $; $} $} $while $(@expr1073742232 $false $) ;
142: $do ${ $if $(@expr1073742233 $prepareTest $(@expr1073742234 "array_index_15" $) $) ${ $setVerbose $(@expr1073742235 $false $) $; array_index_15 $(@expr1073742236 $) $; $} $} $while $(@expr1073742237 $false $) ;
143: $do ${ $if $(@expr1073742238 $prepareTest $(@expr1073742239 "array_index_16" $) $) ${ $setVerbose $(@expr1073742240 $false $) $; array_index_16 $(@expr1073742241 $) $; $} $} $while $(@expr1073742242 $false $) ;
144: $do ${ $if $(@expr1073742243 $prepareTest $(@expr1073742244 "array_index_17" $) $) ${ $setVerbose $(@expr1073742245 $false $) $; array_index_17 $(@expr1073742246 $) $; $} $} $while $(@expr1073742247 $false $) ;
145: $do ${ $if $(@expr1073742248 $prepareTest $(@expr1073742249 "array_index_18" $) $) ${ $setVerbose $(@expr1073742250 $false $) $; array_index_18 $(@expr1073742251 $) $; $} $} $while $(@expr1073742252 $false $) ;
146: $do ${ $if $(@expr1073742253 $prepareTest $(@expr1073742254 "array_index_19" $) $) ${ $setVerbose $(@expr1073742255 $false $) $; array_index_19 $(@expr1073742256 $) $; $} $} $while $(@expr1073742257 $false $) ;
147: $do ${ $if $(@expr1073742258 $prepareTest $(@expr1073742259 "array_index_20" $) $) ${ $setVerbose $(@expr1073742260 $false $) $; array_index_20 $(@expr1073742261 $) $; $} $} $while $(@expr1073742262 $false $) ;
148: $do ${ $if $(@expr1073742263 $prepareTest $(@expr1073742264 "array_index_21" $) $) ${ $setVerbose $(@expr1073742265 $false $) $; array_index_21 $(@expr1073742266 $) $; $} $} $while $(@expr1073742267 $false $) ;
149: $do ${ $if $(@expr1073742268 $prepareTest $(@expr1073742269 "array_index_22" $) $) ${ $setVerbose $(@expr1073742270 $false $) $; array_index_22 $(@expr1073742271 $) $; $} $} $while $(@expr1073742272 $false $) ;
150: $do ${ $if $(@expr1073742273 $prepareTest $(@expr1073742274 "array_index_23" $) $) ${ $setVerbose $(@expr1073742275 $false $) $; array_index_23 $(@expr1073742276 $) $; $} $} $while $(@expr1073742277 $false $) ;
151: $do ${ $if $(@expr1073742278 $prepareTest $(@expr1073742279 "array_index_24" $) $) ${ $setVerbose $(@expr1073742280 $false $) $; array_index_24 $(@expr1073742281 $) $; $} $} $while $(@expr1073742282 $false $) ;
152: $do ${ $if $(@expr1073742283 $prepareTest $(@expr1073742284 "array_index_25" $) $) ${ $setVerbose $(@expr1073742285 $false $) $; array_index_25 $(@expr1073742286 $) $; $} $} $while $(@expr1073742287 $false $) ;
153: $do ${ $if $(@expr1073742288 $prepareTest $(@expr1073742289 "array_index_26" $) $) ${ $setVerbose $(@expr1073742290 $false $) $; array_index_26 $(@expr1073742291 $) $; $} $} $while $(@expr1073742292 $false $) ;
154: $do ${ $if $(@expr1073742293 $prepareTest $(@expr1073742294 "array_index_27" $) $) ${ $setVerbose $(@expr1073742295 $false $) $; array_index_27 $(@expr1073742296 $) $; $} $} $while $(@expr1073742297 $false $) ;
155: $do ${ $if $(@expr1073742298 $prepareTest $(@expr1073742299 "array_index_28" $) $) ${ $setVerbose $(@expr1073742300 $false $) $; array_index_28 $(@expr1073742301 $) $; $} $} $while $(@expr1073742302 $false $) ;
156: $do ${ $if $(@expr1073742303 $prepareTest $(@expr1073742304 "array_index_29" $) $) ${ $setVerbose $(@expr1073742305 $false $) $; array_index_29 $(@expr1073742306 $) $; $} $} $while $(@expr1073742307 $false $) ;
157: $do ${ $if $(@expr1073742308 $prepareTest $(@expr1073742309 "array_index_30" $) $) ${ $setVerbose $(@expr1073742310 $false $) $; array_index_30 $(@expr1073742311 $) $; $} $} $while $(@expr1073742312 $false $) ;
158: $do ${ $if $(@expr1073742313 $prepareTest $(@expr1073742314 "array_index_31" $) $) ${ $setVerbose $(@expr1073742315 $false $) $; array_index_31 $(@expr1073742316 $) $; $} $} $while $(@expr1073742317 $false $) ;
159: $do ${ $if $(@expr1073742318 $prepareTest $(@expr1073742319 "array_index_32" $) $) ${ $setVerbose $(@expr1073742320 $false $) $; array_index_32 $(@expr1073742321 $) $; $} $} $while $(@expr1073742322 $false $) ;
160: $do ${ $if $(@expr1073742323 $prepareTest $(@expr1073742324 "array_index_33" $) $) ${ $setVerbose $(@expr1073742325 $false $) $; array_index_33 $(@expr1073742326 $) $; $} $} $while $(@expr1073742327 $false $) ;
161: $do ${ $if $(@expr1073742328 $prepareTest $(@expr1073742329 "array_index_34" $) $) ${ $setVerbose $(@expr1073742330 $false $) $; array_index_34 $(@expr1073742331 $) $; $} $} $while $(@expr1073742332 $false $) ;
162: $do ${ $if $(@expr1073742333 $prepareTest $(@expr1073742334 "array_index_35" $) $) ${ $setVerbose $(@expr1073742335 $false $) $; array_index_35 $(@expr1073742336 $) $; $} $} $while $(@expr1073742337 $false $) ;
163: $do ${ $if $(@expr1073742338 $prepareTest $(@expr1073742339 "array_index_36" $) $) ${ $setVerbose $(@expr1073742340 $false $) $; array_index_36 $(@expr1073742341 $) $; $} $} $while $(@expr1073742342 $false $) ;
164: $do ${ $if $(@expr1073742343 $prepareTest $(@expr1073742344 "array_index_37" $) $) ${ $setVerbose $(@expr1073742345 $false $) $; array_index_37 $(@expr1073742346 $) $; $} $} $while $(@expr1073742347 $false $) ;
165: $do ${ $if $(@expr1073742348 $prepareTest $(@expr1073742349 "array_index_38" $) $) ${ $setVerbose $(@expr1073742350 $false $) $; array_index_38 $(@expr1073742351 $) $; $} $} $while $(@expr1073742352 $false $) ;
166: $do ${ $if $(@expr1073742353 $prepareTest $(@expr1073742354 "array_index_39" $) $) ${ $setVerbose $(@expr1073742355 $false $) $; array_index_39 $(@expr1073742356 $) $; $} $} $while $(@expr1073742357 $false $) ;
167: $do ${ $if $(@expr1073742358 $prepareTest $(@expr1073742359 "array_index_40" $) $) ${ $setVerbose $(@expr1073742360 $false $) $; array_index_40 $(@expr1073742361 $) $; $} $} $while $(@expr1073742362 $false $) ;
168: $do ${ $if $(@expr1073742363 $prepareTest $(@expr1073742364 "array_index_41" $) $) ${ $setVerbose $(@expr1073742365 $false $) $; array_index_41 $(@expr1073742366 $) $; $} $} $while $(@expr1073742367 $false $) ;
169: $do ${ $if $(@expr1073742368 $prepareTest $(@expr1073742369 "array_index_42" $) $) ${ $setVerbose $(@expr1073742370 $false $) $; array_index_42 $(@expr1073742371 $) $; $} $} $while $(@expr1073742372 $false $) ;
170: $do ${ $if $(@expr1073742373 $prepareTest $(@expr1073742374 "array_index_43" $) $) ${ $setVerbose $(@expr1073742375 $false $) $; array_index_43 $(@expr1073742376 $) $; $} $} $while $(@expr1073742377 $false $) ;
171: $do ${ $if $(@expr1073742378 $prepareTest $(@expr1073742379 "array_index_44" $) $) ${ $setVerbose $(@expr1073742380 $false $) $; array_index_44 $(@expr1073742381 $) $; $} $} $while $(@expr1073742382 $false $) ;
172: $do ${ $if $(@expr1073742383 $prepareTest $(@expr1073742384 "array_index_45" $) $) ${ $setVerbose $(@expr1073742385 $false $) $; array_index_45 $(@expr1073742386 $) $; $} $} $while $(@expr1073742387 $false $) ;
173: $do ${ $if $(@expr1073742388 $prepareTest $(@expr1073742389 "array_index_46" $) $) ${ $setVerbose $(@expr1073742390 $false $) $; array_index_46 $(@expr1073742391 $) $; $} $} $while $(@expr1073742392 $false $) ;
174: $do ${ $if $(@expr1073742393 $prepareTest $(@expr1073742394 "array_index_47" $) $) ${ $setVerbose $(@expr1073742395 $false $) $; array_index_47 $(@expr1073742396 $) $; $} $} $while $(@expr1073742397 $false $) ;
175: $do ${ $if $(@expr1073742398 $prepareTest $(@expr1073742399 "array_index_48" $) $) ${ $setVerbose $(@expr1073742400 $false $) $; array_index_48 $(@expr1073742401 $) $; $} $} $while $(@expr1073742402 $false $) ;
176: $do ${ $if $(@expr1073742403 $prepareTest $(@expr1073742404 "array_index_49" $) $) ${ $setVerbose $(@expr1073742405 $false $) $; array_index_49 $(@expr1073742406 $) $; $} $} $while $(@expr1073742407 $false $) ;
177: $do ${ $if $(@expr1073742408 $prepareTest $(@expr1073742409 "array_index_50" $) $) ${ $setVerbose $(@expr1073742410 $false $) $; array_index_50 $(@expr1073742411 $) $; $} $} $while $(@expr1073742412 $false $) ;
178: $do ${ $if $(@expr1073742413 $prepareTest $(@expr1073742414 "array_index_51" $) $) ${ $setVerbose $(@expr1073742415 $false $) $; array_index_51 $(@expr1073742416 $) $; $} $} $while $(@expr1073742417 $false $) ;
179: $do ${ $if $(@expr1073742418 $prepareTest $(@expr1073742419 "array_index_52" $) $) ${ $setVerbose $(@expr1073742420 $false $) $; array_index_52 $(@expr1073742421 $) $; $} $} $while $(@expr1073742422 $false $) ;
180: $do ${ $if $(@expr1073742423 $prepareTest $(@expr1073742424 "array_index_53" $) $) ${ $setVerbose $(@expr1073742425 $false $) $; array_index_53 $(@expr1073742426 $) $; $} $} $while $(@expr1073742427 $false $) ;
181: $do ${ $if $(@expr1073742428 $prepareTest $(@expr1073742429 "array_index_54" $) $) ${ $setVerbose $(@expr1073742430 $false $) $; array_index_54 $(@expr1073742431 $) $; $} $} $while $(@expr1073742432 $false $) ;
182: $do ${ $if $(@expr1073742433 $prepareTest $(@expr1073742434 "array_index_55" $) $) ${ $setVerbose $(@expr1073742435 $false $) $; array_index_55 $(@expr1073742436 $) $; $} $} $while $(@expr1073742437 $false $) ;
183: $do ${ $if $(@expr1073742438 $prepareTest $(@expr1073742439 "array_index_56" $) $) ${ $setVerbose $(@expr1073742440 $false $) $; array_index_56 $(@expr1073742441 $) $; $} $} $while $(@expr1073742442 $false $) ;
184: $do ${ $if $(@expr1073742443 $prepareTest $(@expr1073742444 "array_index_57" $) $) ${ $setVerbose $(@expr1073742445 $false $) $; array_index_57 $(@expr1073742446 $) $; $} $} $while $(@expr1073742447 $false $) ;
185: $do ${ $if $(@expr1073742448 $prepareTest $(@expr1073742449 "array_index_58" $) $) ${ $setVerbose $(@expr1073742450 $false $) $; array_index_58 $(@expr1073742451 $) $; $} $} $while $(@expr1073742452 $false $) ;
186: $do ${ $if $(@expr1073742453 $prepareTest $(@expr1073742454 "array_index_59" $) $) ${ $setVerbose $(@expr1073742455 $false $) $; array_index_59 $(@expr1073742456 $) $; $} $} $while $(@expr1073742457 $false $) ;
187: $do ${ $if $(@expr1073742458 $prepareTest $(@expr1073742459 "array_index_60" $) $) ${ $setVerbose $(@expr1073742460 $false $) $; array_index_60 $(@expr1073742461 $) $; $} $} $while $(@expr1073742462 $false $) ;
188: $do ${ $if $(@expr1073742463 $prepareTest $(@expr1073742464 "array_index_61" $) $) ${ $setVerbose $(@expr1073742465 $false $) $; array_index_61 $(@expr1073742466 $) $; $} $} $while $(@expr1073742467 $false $) ;
189: $do ${ $if $(@expr1073742468 $prepareTest $(@expr1073742469 "array_index_62" $) $) ${ $setVerbose $(@expr1073742470 $false $) $; array_index_62 $(@expr1073742471 $) $; $} $} $while $(@expr1073742472 $false $) ;
190: $do ${ $if $(@expr1073742473 $prepareTest $(@expr1073742474 "array_index_63" $) $) ${ $setVerbose $(@expr1073742475 $false $) $; array_index_63 $(@expr1073742476 $) $; $} $} $while $(@expr1073742477 $false $) ;
191: $do ${ $if $(@expr1073742478 $prepareTest $(@expr1073742479 "array_index_64" $) $) ${ $setVerbose $(@expr1073742480 $false $) $; array_index_64 $(@expr1073742481 $) $; $} $} $while $(@expr1073742482 $false $) ;
192: $do ${ $if $(@expr1073742483 $prepareTest $(@expr1073742484 "array_index_multidim" $) $) ${ $setVerbose $(@expr1073742485 $false $) $; array_index_multidim $(@expr1073742486 $) $; $} $} $while $(@expr1073742487 $false $) ;
193: $do ${ $if $(@expr1073742488 $prepareTest $(@expr1073742489 "array_index_switch_in_for" $) $) ${ $setVerbose $(@expr1073742490 $false $) $; array_index_switch_in_for $(@expr1073742491 $) $; $} $} $while $(@expr1073742492 $false $) ;
194: $do ${ $if $(@expr1073742493 $prepareTest $(@expr1073742494 "array_index_for_in_for" $) $) ${ $setVerbose $(@expr1073742495 $false $) $; array_index_for_in_for $(@expr1073742496 $) $; $} $} $while $(@expr1073742497 $false $) ;
195: $do ${ $if $(@expr1073742498 $prepareTest $(@expr1073742499 "array_index_bounds" $) $) ${ $setVerbose $(@expr1073742500 $false $) $; array_index_bounds $(@expr1073742501 $) $; $} $} $while $(@expr1073742502 $false $) ;
196: $do ${ $if $(@expr1073742503 $prepareTest $(@expr1073742504 "array_index_calculation" $) $) ${ $setVerbose $(@expr1073742505 $false $) $; array_index_calculation $(@expr1073742506 $) $; $} $} $while $(@expr1073742507 $false $) ;
197: $do ${ $if $(@expr1073742508 $prepareTest $(@expr1073742509 "array_index_negative1" $) $) ${ $setVerbose $(@expr1073742510 $false $) $; array_index_negative1 $(@expr1073742511 $) $; $} $} $while $(@expr1073742512 $false $) ;
198: $do ${ $if $(@expr1073742513 $prepareTest $(@expr1073742514 "array_index_negative2" $) $) ${ $setVerbose $(@expr1073742515 $false $) $; array_index_negative2 $(@expr1073742516 $) $; $} $} $while $(@expr1073742517 $false $) ;
199: $do ${ $if $(@expr1073742518 $prepareTest $(@expr1073742519 "array_index_negative3" $) $) ${ $setVerbose $(@expr1073742520 $false $) $; array_index_negative3 $(@expr1073742521 $) $; $} $} $while $(@expr1073742522 $false $) ;
200: $do ${ $if $(@expr1073742523 $prepareTest $(@expr1073742524 "array_index_negative4" $) $) ${ $setVerbose $(@expr1073742525 $false $) $; array_index_negative4 $(@expr1073742526 $) $; $} $} $while $(@expr1073742527 $false $) ;
201: $do ${ $if $(@expr1073742528 $prepareTest $(@expr1073742529 "array_index_negative5" $) $) ${ $setVerbose $(@expr1073742530 $false $) $; array_index_negative5 $(@expr1073742531 $) $; $} $} $while $(@expr1073742532 $false $) ;
202: $do ${ $if $(@expr1073742533 $prepareTest $(@expr1073742534 "array_index_for_decr" $) $) ${ $setVerbose $(@expr1073742535 $false $) $; array_index_for_decr $(@expr1073742536 $) $; $} $} $while $(@expr1073742537 $false $) ;
203: $do ${ $if $(@expr1073742538 $prepareTest $(@expr1073742539 "array_index_varnames" $) $) ${ $setVerbose $(@expr1073742540 $false $) $; array_index_varnames $(@expr1073742541 $) $; $} $} $while $(@expr1073742542 $false $) ;
204: $do ${ $if $(@expr1073742543 $prepareTest $(@expr1073742544 "array_index_for_continue" $) $) ${ $setVerbose $(@expr1073742545 $false $) $; array_index_for_continue $(@expr1073742546 $) $; $} $} $while $(@expr1073742547 $false $) ;
205: $do ${ $if $(@expr1073742548 $prepareTest $(@expr1073742549 "array_index_for" $) $) ${ $setVerbose $(@expr1073742550 $false $) $; array_index_for $(@expr1073742551 $) $; $} $} $while $(@expr1073742552 $false $) ;
206: $do ${ $if $(@expr1073742553 $prepareTest $(@expr1073742554 "array_index_for_neq" $) $) ${ $setVerbose $(@expr1073742555 $false $) $; array_index_for_neq $(@expr1073742556 $) $; $} $} $while $(@expr1073742557 $false $) ;
207: $do ${ $if $(@expr1073742558 $prepareTest $(@expr1073742559 "array_index_for_question" $) $) ${ $setVerbose $(@expr1073742560 $false $) $; array_index_for_question $(@expr1073742561 $) $; $} $} $while $(@expr1073742562 $false $) ;
208: $do ${ $if $(@expr1073742563 $prepareTest $(@expr1073742564 "array_index_for_andand_oror" $) $) ${ $setVerbose $(@expr1073742565 $false $) $; array_index_for_andand_oror $(@expr1073742566 $) $; $} $} $while $(@expr1073742567 $false $) ;
209: $do ${ $if $(@expr1073742568 $prepareTest $(@expr1073742569 "array_index_for_varid0" $) $) ${ $setVerbose $(@expr1073742570 $false $) $; array_index_for_varid0 $(@expr1073742571 $) $; $} $} $while $(@expr1073742572 $false $) ;
210: $do ${ $if $(@expr1073742573 $prepareTest $(@expr1073742574 "array_index_vla_for" $) $) ${ $setVerbose $(@expr1073742575 $false $) $; array_index_vla_for $(@expr1073742576 $) $; $} $} $while $(@expr1073742577 $false $) ;
211: $do ${ $if $(@expr1073742578 $prepareTest $(@expr1073742579 "array_index_extern" $) $) ${ $setVerbose $(@expr1073742580 $false $) $; array_index_extern $(@expr1073742581 $) $; $} $} $while $(@expr1073742582 $false $) ;
212: $do ${ $if $(@expr1073742583 $prepareTest $(@expr1073742584 "array_index_cast" $) $) ${ $setVerbose $(@expr1073742585 $false $) $; array_index_cast $(@expr1073742586 $) $; $} $} $while $(@expr1073742587 $false $) ;
213: $do ${ $if $(@expr1073742588 $prepareTest $(@expr1073742589 "array_index_string_literal" $) $) ${ $setVerbose $(@expr1073742590 $false $) $; array_index_string_literal $(@expr1073742591 $) $; $} $} $while $(@expr1073742592 $false $) ;
214: $do ${ $if $(@expr1073742593 $prepareTest $(@expr1073742594 "array_index_same_struct_and_var_name" $) $) ${ $setVerbose $(@expr1073742595 $false $) $; array_index_same_struct_and_var_name $(@expr1073742596 $) $; $} $} $while $(@expr1073742597 $false $) ;
215: $do ${ $if $(@expr1073742598 $prepareTest $(@expr1073742599 "array_index_valueflow" $) $) ${ $setVerbose $(@expr1073742600 $false $) $; array_index_valueflow $(@expr1073742601 $) $; $} $} $while $(@expr1073742602 $false $) ;
216: $do ${ $if $(@expr1073742603 $prepareTest $(@expr1073742604 "array_index_valueflow_pointer" $) $) ${ $setVerbose $(@expr1073742605 $false $) $; array_index_valueflow_pointer $(@expr1073742606 $) $; $} $} $while $(@expr1073742607 $false $) ;
217: $do ${ $if $(@expr1073742608 $prepareTest $(@expr1073742609 "array_index_function_parameter" $) $) ${ $setVerbose $(@expr1073742610 $false $) $; array_index_function_parameter $(@expr1073742611 $) $; $} $} $while $(@expr1073742612 $false $) ;
218: $do ${ $if $(@expr1073742613 $prepareTest $(@expr1073742614 "array_index_enum_array" $) $) ${ $setVerbose $(@expr1073742615 $false $) $; array_index_enum_array $(@expr1073742616 $) $; $} $} $while $(@expr1073742617 $false $) ;
219: $do ${ $if $(@expr1073742618 $prepareTest $(@expr1073742619 "array_index_container" $) $) ${ $setVerbose $(@expr1073742620 $false $) $; array_index_container $(@expr1073742621 $) $; $} $} $while $(@expr1073742622 $false $) ;
220: $do ${ $if $(@expr1073742623 $prepareTest $(@expr1073742624 "array_index_two_for_loops" $) $) ${ $setVerbose $(@expr1073742625 $false $) $; array_index_two_for_loops $(@expr1073742626 $) $; $} $} $while $(@expr1073742627 $false $) ;
221: $do ${ $if $(@expr1073742628 $prepareTest $(@expr1073742629 "array_index_new" $) $) ${ $setVerbose $(@expr1073742630 $false $) $; array_index_new $(@expr1073742631 $) $; $} $} $while $(@expr1073742632 $false $) ;
222:
223: $do ${ $if $(@expr1073742633 $prepareTest $(@expr1073742634 "buffer_overrun_2_struct" $) $) ${ $setVerbose $(@expr1073742635 $false $) $; buffer_overrun_2_struct $(@expr1073742636 $) $; $} $} $while $(@expr1073742637 $false $) ;
224: $do ${ $if $(@expr1073742638 $prepareTest $(@expr1073742639 "buffer_overrun_3" $) $) ${ $setVerbose $(@expr1073742640 $false $) $; buffer_overrun_3 $(@expr1073742641 $) $; $} $} $while $(@expr1073742642 $false $) ;
225: $do ${ $if $(@expr1073742643 $prepareTest $(@expr1073742644 "buffer_overrun_4" $) $) ${ $setVerbose $(@expr1073742645 $false $) $; buffer_overrun_4 $(@expr1073742646 $) $; $} $} $while $(@expr1073742647 $false $) ;
226: $do ${ $if $(@expr1073742648 $prepareTest $(@expr1073742649 "buffer_overrun_5" $) $) ${ $setVerbose $(@expr1073742650 $false $) $; buffer_overrun_5 $(@expr1073742651 $) $; $} $} $while $(@expr1073742652 $false $) ;
227: $do ${ $if $(@expr1073742653 $prepareTest $(@expr1073742654 "buffer_overrun_6" $) $) ${ $setVerbose $(@expr1073742655 $false $) $; buffer_overrun_6 $(@expr1073742656 $) $; $} $} $while $(@expr1073742657 $false $) ;
228: $do ${ $if $(@expr1073742658 $prepareTest $(@expr1073742659 "buffer_overrun_7" $) $) ${ $setVerbose $(@expr1073742660 $false $) $; buffer_overrun_7 $(@expr1073742661 $) $; $} $} $while $(@expr1073742662 $false $) ;
229: $do ${ $if $(@expr1073742663 $prepareTest $(@expr1073742664 "buffer_overrun_8" $) $) ${ $setVerbose $(@expr1073742665 $false $) $; buffer_overrun_8 $(@expr1073742666 $) $; $} $} $while $(@expr1073742667 $false $) ;
230: $do ${ $if $(@expr1073742668 $prepareTest $(@expr1073742669 "buffer_overrun_9" $) $) ${ $setVerbose $(@expr1073742670 $false $) $; buffer_overrun_9 $(@expr1073742671 $) $; $} $} $while $(@expr1073742672 $false $) ;
231: $do ${ $if $(@expr1073742673 $prepareTest $(@expr1073742674 "buffer_overrun_10" $) $) ${ $setVerbose $(@expr1073742675 $false $) $; buffer_overrun_10 $(@expr1073742676 $) $; $} $} $while $(@expr1073742677 $false $) ;
232: $do ${ $if $(@expr1073742678 $prepareTest $(@expr1073742679 "buffer_overrun_11" $) $) ${ $setVerbose $(@expr1073742680 $false $) $; buffer_overrun_11 $(@expr1073742681 $) $; $} $} $while $(@expr1073742682 $false $) ;
233: $do ${ $if $(@expr1073742683 $prepareTest $(@expr1073742684 "buffer_overrun_15" $) $) ${ $setVerbose $(@expr1073742685 $false $) $; buffer_overrun_15 $(@expr1073742686 $) $; $} $} $while $(@expr1073742687 $false $) ;
234: $do ${ $if $(@expr1073742688 $prepareTest $(@expr1073742689 "buffer_overrun_16" $) $) ${ $setVerbose $(@expr1073742690 $false $) $; buffer_overrun_16 $(@expr1073742691 $) $; $} $} $while $(@expr1073742692 $false $) ;
235: $do ${ $if $(@expr1073742693 $prepareTest $(@expr1073742694 "buffer_overrun_18" $) $) ${ $setVerbose $(@expr1073742695 $false $) $; buffer_overrun_18 $(@expr1073742696 $) $; $} $} $while $(@expr1073742697 $false $) ;
236: $do ${ $if $(@expr1073742698 $prepareTest $(@expr1073742699 "buffer_overrun_19" $) $) ${ $setVerbose $(@expr1073742700 $false $) $; buffer_overrun_19 $(@expr1073742701 $) $; $} $} $while $(@expr1073742702 $false $) ;
237: $do ${ $if $(@expr1073742703 $prepareTest $(@expr1073742704 "buffer_overrun_21" $) $) ${ $setVerbose $(@expr1073742705 $false $) $; buffer_overrun_21 $(@expr1073742706 $) $; $} $} $while $(@expr1073742707 $false $) ;
238: $do ${ $if $(@expr1073742708 $prepareTest $(@expr1073742709 "buffer_overrun_24" $) $) ${ $setVerbose $(@expr1073742710 $false $) $; buffer_overrun_24 $(@expr1073742711 $) $; $} $} $while $(@expr1073742712 $false $) ;
239: $do ${ $if $(@expr1073742713 $prepareTest $(@expr1073742714 "buffer_overrun_26" $) $) ${ $setVerbose $(@expr1073742715 $false $) $; buffer_overrun_26 $(@expr1073742716 $) $; $} $} $while $(@expr1073742717 $false $) ;
240: $do ${ $if $(@expr1073742718 $prepareTest $(@expr1073742719 "buffer_overrun_27" $) $) ${ $setVerbose $(@expr1073742720 $false $) $; buffer_overrun_27 $(@expr1073742721 $) $; $} $} $while $(@expr1073742722 $false $) ;
241: $do ${ $if $(@expr1073742723 $prepareTest $(@expr1073742724 "buffer_overrun_29" $) $) ${ $setVerbose $(@expr1073742725 $false $) $; buffer_overrun_29 $(@expr1073742726 $) $; $} $} $while $(@expr1073742727 $false $) ;
242: $do ${ $if $(@expr1073742728 $prepareTest $(@expr1073742729 "buffer_overrun_30" $) $) ${ $setVerbose $(@expr1073742730 $false $) $; buffer_overrun_30 $(@expr1073742731 $) $; $} $} $while $(@expr1073742732 $false $) ;
243: $do ${ $if $(@expr1073742733 $prepareTest $(@expr1073742734 "buffer_overrun_31" $) $) ${ $setVerbose $(@expr1073742735 $false $) $; buffer_overrun_31 $(@expr1073742736 $) $; $} $} $while $(@expr1073742737 $false $) ;
244: $do ${ $if $(@expr1073742738 $prepareTest $(@expr1073742739 "buffer_overrun_32" $) $) ${ $setVerbose $(@expr1073742740 $false $) $; buffer_overrun_32 $(@expr1073742741 $) $; $} $} $while $(@expr1073742742 $false $) ;
245: $do ${ $if $(@expr1073742743 $prepareTest $(@expr1073742744 "buffer_overrun_33" $) $) ${ $setVerbose $(@expr1073742745 $false $) $; buffer_overrun_33 $(@expr1073742746 $) $; $} $} $while $(@expr1073742747 $false $) ;
246: $do ${ $if $(@expr1073742748 $prepareTest $(@expr1073742749 "buffer_overrun_34" $) $) ${ $setVerbose $(@expr1073742750 $false $) $; buffer_overrun_34 $(@expr1073742751 $) $; $} $} $while $(@expr1073742752 $false $) ;
247: $do ${ $if $(@expr1073742753 $prepareTest $(@expr1073742754 "buffer_overrun_errorpath" $) $) ${ $setVerbose $(@expr1073742755 $false $) $; buffer_overrun_errorpath $(@expr1073742756 $) $; $} $} $while $(@expr1073742757 $false $) ;
248: $do ${ $if $(@expr1073742758 $prepareTest $(@expr1073742759 "buffer_overrun_bailoutIfSwitch" $) $) ${ $setVerbose $(@expr1073742760 $false $) $; buffer_overrun_bailoutIfSwitch $(@expr1073742761 $) $; $} $} $while $(@expr1073742762 $false $) ;
249: $do ${ $if $(@expr1073742763 $prepareTest $(@expr1073742764 "buffer_overrun_function_array_argument" $) $) ${ $setVerbose $(@expr1073742765 $false $) $; buffer_overrun_function_array_argument $(@expr1073742766 $) $; $} $} $while $(@expr1073742767 $false $) ;
250: $do ${ $if $(@expr1073742768 $prepareTest $(@expr1073742769 "possible_buffer_overrun_1" $) $) ${ $setVerbose $(@expr1073742770 $false $) $; possible_buffer_overrun_1 $(@expr1073742771 $) $; $} $} $while $(@expr1073742772 $false $) ;
251: $do ${ $if $(@expr1073742773 $prepareTest $(@expr1073742774 "buffer_overrun_readSizeFromCfg" $) $) ${ $setVerbose $(@expr1073742775 $false $) $; buffer_overrun_readSizeFromCfg $(@expr1073742776 $) $; $} $} $while $(@expr1073742777 $false $) ;
252:
253: $do ${ $if $(@expr1073742778 $prepareTest $(@expr1073742779 "valueflow_string" $) $) ${ $setVerbose $(@expr1073742780 $false $) $; valueflow_string $(@expr1073742781 $) $; $} $} $while $(@expr1073742782 $false $) ;
254:
|
259:
260: $do ${ $if $(@expr1073742783 $prepareTest $(@expr1073742784 "pointer_out_of_bounds_1" $) $) ${ $setVerbose $(@expr1073742785 $false $) $; pointer_out_of_bounds_1 $(@expr1073742786 $) $; $} $} $while $(@expr1073742787 $false $) ;
261: $do ${ $if $(@expr1073742788 $prepareTest $(@expr1073742789 "pointer_out_of_bounds_2" $) $) ${ $setVerbose $(@expr1073742790 $false $) $; pointer_out_of_bounds_2 $(@expr1073742791 $) $; $} $} $while $(@expr1073742792 $false $) ;
262: $do ${ $if $(@expr1073742793 $prepareTest $(@expr1073742794 "pointer_out_of_bounds_3" $) $) ${ $setVerbose $(@expr1073742795 $false $) $; pointer_out_of_bounds_3 $(@expr1073742796 $) $; $} $} $while $(@expr1073742797 $false $) ;
263: $do ${ $if $(@expr1073742798 $prepareTest $(@expr1073742799 "pointer_out_of_bounds_4" $) $) ${ $setVerbose $(@expr1073742800 $false $) $; pointer_out_of_bounds_4 $(@expr1073742801 $) $; $} $} $while $(@expr1073742802 $false $) ;
264: $do ${ $if $(@expr1073742803 $prepareTest $(@expr1073742804 "pointer_out_of_bounds_sub" $) $) ${ $setVerbose $(@expr1073742805 $false $) $; pointer_out_of_bounds_sub $(@expr1073742806 $) $; $} $} $while $(@expr1073742807 $false $) ;
265:
266: $do ${ $if $(@expr1073742808 $prepareTest $(@expr1073742809 "strcat1" $) $) ${ $setVerbose $(@expr1073742810 $false $) $; strcat1 $(@expr1073742811 $) $; $} $} $while $(@expr1073742812 $false $) ;
267:
268: $do ${ $if $(@expr1073742813 $prepareTest $(@expr1073742814 "varid1" $) $) ${ $setVerbose $(@expr1073742815 $false $) $; varid1 $(@expr1073742816 $) $; $} $} $while $(@expr1073742817 $false $) ;
269: $do ${ $if $(@expr1073742818 $prepareTest $(@expr1073742819 "varid2" $) $) ${ $setVerbose $(@expr1073742820 $false $) $; varid2 $(@expr1073742821 $) $; $} $} $while $(@expr1073742822 $false $) ;
270:
271: $do ${ $if $(@expr1073742823 $prepareTest $(@expr1073742824 "assign1" $) $) ${ $setVerbose $(@expr1073742825 $false $) $; assign1 $(@expr1073742826 $) $; $} $} $while $(@expr1073742827 $false $) ;
272:
273: $do ${ $if $(@expr1073742828 $prepareTest $(@expr1073742829 "alloc_new" $) $) ${ $setVerbose $(@expr1073742830 $false $) $; alloc_new $(@expr1073742831 $) $; $} $} $while $(@expr1073742832 $false $) ;
274: $do ${ $if $(@expr1073742833 $prepareTest $(@expr1073742834 "alloc_malloc" $) $) ${ $setVerbose $(@expr1073742835 $false $) $; alloc_malloc $(@expr1073742836 $) $; $} $} $while $(@expr1073742837 $false $) ;
275: $do ${ $if $(@expr1073742838 $prepareTest $(@expr1073742839 "alloc_string" $) $) ${ $setVerbose $(@expr1073742840 $false $) $; alloc_string $(@expr1073742841 $) $; $} $} $while $(@expr1073742842 $false $) ;
276: $do ${ $if $(@expr1073742843 $prepareTest $(@expr1073742844 "alloc_alloca" $) $) ${ $setVerbose $(@expr1073742845 $false $) $; alloc_alloca $(@expr1073742846 $) $; $} $} $while $(@expr1073742847 $false $) ;
277:
278:
279: $do ${ $if $(@expr1073742848 $prepareTest $(@expr1073742849 "minsize_argvalue" $) $) ${ $setVerbose $(@expr1073742850 $false $) $; minsize_argvalue $(@expr1073742851 $) $; $} $} $while $(@expr1073742852 $false $) ;
280: $do ${ $if $(@expr1073742853 $prepareTest $(@expr1073742854 "minsize_sizeof" $) $) ${ $setVerbose $(@expr1073742855 $false $) $; minsize_sizeof $(@expr1073742856 $) $; $} $} $while $(@expr1073742857 $false $) ;
281: $do ${ $if $(@expr1073742858 $prepareTest $(@expr1073742859 "minsize_strlen" $) $) ${ $setVerbose $(@expr1073742860 $false $) $; minsize_strlen $(@expr1073742861 $) $; $} $} $while $(@expr1073742862 $false $) ;
282: $do ${ $if $(@expr1073742863 $prepareTest $(@expr1073742864 "minsize_mul" $) $) ${ $setVerbose $(@expr1073742865 $false $) $; minsize_mul $(@expr1073742866 $) $; $} $} $while $(@expr1073742867 $false $) ;
283: $do ${ $if $(@expr1073742868 $prepareTest $(@expr1073742869 "unknownType" $) $) ${ $setVerbose $(@expr1073742870 $false $) $; unknownType $(@expr1073742871 $) $; $} $} $while $(@expr1073742872 $false $) ;
284:
285: $do ${ $if $(@expr1073742873 $prepareTest $(@expr1073742874 "terminateStrncpy1" $) $) ${ $setVerbose $(@expr1073742875 $false $) $; terminateStrncpy1 $(@expr1073742876 $) $; $} $} $while $(@expr1073742877 $false $) ;
286: $do ${ $if $(@expr1073742878 $prepareTest $(@expr1073742879 "terminateStrncpy2" $) $) ${ $setVerbose $(@expr1073742880 $false $) $; terminateStrncpy2 $(@expr1073742881 $) $; $} $} $while $(@expr1073742882 $false $) ;
287: $do ${ $if $(@expr1073742883 $prepareTest $(@expr1073742884 "terminateStrncpy3" $) $) ${ $setVerbose $(@expr1073742885 $false $) $; terminateStrncpy3 $(@expr1073742886 $) $; $} $} $while $(@expr1073742887 $false $) ;
288: $do ${ $if $(@expr1073742888 $prepareTest $(@expr1073742889 "terminateStrncpy4" $) $) ${ $setVerbose $(@expr1073742890 $false $) $; terminateStrncpy4 $(@expr1073742891 $) $; $} $} $while $(@expr1073742892 $false $) ;
289: $do ${ $if $(@expr1073742893 $prepareTest $(@expr1073742894 "recursive_long_time" $) $) ${ $setVerbose $(@expr1073742895 $false $) $; recursive_long_time $(@expr1073742896 $) $; $} $} $while $(@expr1073742897 $false $) ;
290:
291: $do ${ $if $(@expr1073742898 $prepareTest $(@expr1073742899 "crash1" $) $) ${ $setVerbose $(@expr1073742900 $false $) $; crash1 $(@expr1073742901 $) $; $} $} $while $(@expr1073742902 $false $) ;
292: $do ${ $if $(@expr1073742903 $prepareTest $(@expr1073742904 "crash2" $) $) ${ $setVerbose $(@expr1073742905 $false $) $; crash2 $(@expr1073742906 $) $; $} $} $while $(@expr1073742907 $false $) ;
293: $do ${ $if $(@expr1073742908 $prepareTest $(@expr1073742909 "crash3" $) $) ${ $setVerbose $(@expr1073742910 $false $) $; crash3 $(@expr1073742911 $) $; $} $} $while $(@expr1073742912 $false $) ;
294: $do ${ $if $(@expr1073742913 $prepareTest $(@expr1073742914 "crash4" $) $) ${ $setVerbose $(@expr1073742915 $false $) $; crash4 $(@expr1073742916 $) $; $} $} $while $(@expr1073742917 $false $) ;
295: $do ${ $if $(@expr1073742918 $prepareTest $(@expr1073742919 "crash5" $) $) ${ $setVerbose $(@expr1073742920 $false $) $; crash5 $(@expr1073742921 $) $; $} $} $while $(@expr1073742922 $false $) ;
296: $do ${ $if $(@expr1073742923 $prepareTest $(@expr1073742924 "crash6" $) $) ${ $setVerbose $(@expr1073742925 $false $) $; crash6 $(@expr1073742926 $) $; $} $} $while $(@expr1073742927 $false $) ;
297: $do ${ $if $(@expr1073742928 $prepareTest $(@expr1073742929 "crash7" $) $) ${ $setVerbose $(@expr1073742930 $false $) $; crash7 $(@expr1073742931 $) $; $} $} $while $(@expr1073742932 $false $) ;
298:
299: $do ${ $if $(@expr1073742933 $prepareTest $(@expr1073742934 "insecureCmdLineArgs" $) $) ${ $setVerbose $(@expr1073742935 $false $) $; insecureCmdLineArgs $(@expr1073742936 $) $; $} $} $while $(@expr1073742937 $false $) ;
300: $do ${ $if $(@expr1073742938 $prepareTest $(@expr1073742939 "checkBufferAllocatedWithStrlen" $) $) ${ $setVerbose $(@expr1073742940 $false $) $; checkBufferAllocatedWithStrlen $(@expr1073742941 $) $; $} $} $while $(@expr1073742942 $false $) ;
301:
302: $do ${ $if $(@expr1073742943 $prepareTest $(@expr1073742944 "scope" $) $) ${ $setVerbose $(@expr1073742945 $false $) $; scope $(@expr1073742946 $) $; $} $} $while $(@expr1073742947 $false $) ;
303:
304: $do ${ $if $(@expr1073742948 $prepareTest $(@expr1073742949 "getErrorMessages" $) $) ${ $setVerbose $(@expr1073742950 $false $) $; getErrorMessages $(@expr1073742951 $) $; $} $} $while $(@expr1073742952 $false $) ;
305:
306:
307: $do ${ $if $(@expr1073742953 $prepareTest $(@expr1073742954 "arrayIndexThenCheck" $) $) ${ $setVerbose $(@expr1073742955 $false $) $; arrayIndexThenCheck $(@expr1073742956 $) $; $} $} $while $(@expr1073742957 $false $) ;
308: $do ${ $if $(@expr1073742958 $prepareTest $(@expr1073742959 "arrayIndexEarlyReturn" $) $) ${ $setVerbose $(@expr1073742960 $false $) $; arrayIndexEarlyReturn $(@expr1073742961 $) $; $} $} $while $(@expr1073742962 $false $) ;
309:
310: $do ${ $if $(@expr1073742963 $prepareTest $(@expr1073742964 "bufferNotZeroTerminated" $) $) ${ $setVerbose $(@expr1073742965 $false $) $; bufferNotZeroTerminated $(@expr1073742966 $) $; $} $} $while $(@expr1073742967 $false $) ;
311:
312: $do ${ $if $(@expr1073742968 $prepareTest $(@expr1073742969 "negativeMemoryAllocationSizeError" $) $) ${ $setVerbose $(@expr1073742970 $false $) $; negativeMemoryAllocationSizeError $(@expr1073742971 $) $; $} $} $while $(@expr1073742972 $false $) ;
313: $do ${ $if $(@expr1073742973 $prepareTest $(@expr1073742974 "negativeArraySize" $) $) ${ $setVerbose $(@expr1073742975 $false $) $; negativeArraySize $(@expr1073742976 $) $; $} $} $while $(@expr1073742977 $false $) ;
314:
315: $do ${ $if $(@expr1073742978 $prepareTest $(@expr1073742979 "pointerAddition1" $) $) ${ $setVerbose $(@expr1073742980 $false $) $; pointerAddition1 $(@expr1073742981 $) $; $} $} $while $(@expr1073742982 $false $) ;
316:
317: $do ${ $if $(@expr1073742983 $prepareTest $(@expr1073742984 "ctu_malloc" $) $) ${ $setVerbose $(@expr1073742985 $false $) $; ctu_malloc $(@expr1073742986 $) $; $} $} $while $(@expr1073742987 $false $) ;
318: $do ${ $if $(@expr1073742988 $prepareTest $(@expr1073742989 "ctu_array" $) $) ${ $setVerbose $(@expr1073742990 $false $) $; ctu_array $(@expr1073742991 $) $; $} $} $while $(@expr1073742992 $false $) ;
319: $do ${ $if $(@expr1073742993 $prepareTest $(@expr1073742994 "ctu_variable" $) $) ${ $setVerbose $(@expr1073742995 $false $) $; ctu_variable $(@expr1073742996 $) $; $} $} $while $(@expr1073742997 $false $) ;
320: $do ${ $if $(@expr1073742998 $prepareTest $(@expr1073742999 "ctu_arithmetic" $) $) ${ $setVerbose $(@expr1073743000 $false $) $; ctu_arithmetic $(@expr1073743001 $) $; $} $} $while $(@expr1073743002 $false $) ;
321:
322: $do ${ $if $(@expr1073743003 $prepareTest $(@expr1073743004 "objectIndex" $) $) ${ $setVerbose $(@expr1073743005 $false $) $; objectIndex $(@expr1073743006 $) $; $} $} $while $(@expr1073743007 $false $) ;
323: }
324:
325:
326:
327: void noerr1 ( ) {
328: $check_ $(@expr1073743008 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 328 $, "extern int ab;\nvoid f()\n{\n    if (ab)\n    {\n        char str[50];\n    }\n    if (ab)\n    {\n        char str[50];\n    }\n}" $)
329:
|
338:
339: ;
340: $if $(@expr1073743009 $!@expr1073743010 $assertEquals $(@expr1073743011 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 340 $, "" $, errout@var100 .@expr1073743012 str (@expr1073743013 ) $) $) { $return ; }
341: }
342:
343:
344: void noerr2 ( ) {
345: $check_ $(@expr1073743014 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 345 $, "static char buf[2];\nvoid f1(char *str)\n{\n    strcpy(buf,str);\n}\nvoid f2(char *str)\n{\n    strcat(buf,str);\n}\nvoid f3(char *str)\n{\n    sprintf(buf,\"%s\",str);\n}\nvoid f4(const char str[])\n{\n    strcpy(buf, str);\n}" $)
346:
|
360:
361: ;
362: $if $(@expr1073743015 $!@expr1073743016 $assertEquals $(@expr1073743017 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 362 $, "" $, errout@var100 .@expr1073743018 str (@expr1073743019 ) $) $) { $return ; }
363: }
364:
365:
366: void noerr3 ( ) {
367: $check_ $(@expr1073743020 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 367 $, "struct { char data[10]; } abc;\nstatic char f()\n{\n    char data[1];\n    return abc.data[1];\n}" $)
368:
|
371:
372: ;
373: $if $(@expr1073743021 $!@expr1073743022 $assertEquals $(@expr1073743023 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 373 $, "" $, errout@var100 .@expr1073743024 str (@expr1073743025 ) $) $) { $return ; }
374: }
375:
376:
377: void noerr4 ( ) {
378:
379: $check_ $(@expr1073743026 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 379 $, "static void f() {\n    char data[100];\n    const char *p = data + 100;\n}" $)
380:
381:
382: ;
383: $if $(@expr1073743027 $!@expr1073743028 $assertEquals $(@expr1073743029 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 383 $, "" $, errout@var100 .@expr1073743030 str (@expr1073743031 ) $) $) { $return ; }
384: }
385:
386: void sizeof3 ( ) {
387: $check_ $(@expr1073743032 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 387 $, "struct group { int gr_gid; };\nvoid f()\n{\n    char group[32];\n    snprintf(group, 32, \"%u\", 0);\n    struct group *gr;\n    snprintf(group, 32, \"%u\", gr->gr_gid);\n}" $)
388:
|
393:
394: ;
395: $if $(@expr1073743033 $!@expr1073743034 $assertEquals $(@expr1073743035 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 395 $, "" $, errout@var100 .@expr1073743036 str (@expr1073743037 ) $) $) { $return ; }
396: }
397:
398: void array_index_1 ( ) {
399: $check_ $(@expr1073743038 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 399 $, "void f()\n{\n    char str[0x10] = {0};\n    str[15] = 0;\n    str[16] = 0;\n}" $)
400:
|
403:
404: ;
405: $if $(@expr1073743039 $!@expr1073743040 $assertEquals $(@expr1073743041 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 405 $, "[test.cpp:5]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
406:
407: $check_ $(@expr1073743044 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 407 $, "char f()\n{\n    char str[16] = {0};\n    return str[16];\n}" $)
408:
409:
410:
411: ;
412: $if $(@expr1073743045 $!@expr1073743046 $assertEquals $(@expr1073743047 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 412 $, "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
413:
414:
415: $check_ $(@expr1073743050 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 415 $, "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 4 ];\n   return y;\n}" $)
416:
|
420:
421: ;
422: $if $(@expr1073743051 $!@expr1073743052 $assertEquals $(@expr1073743053 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 422 $, "[test.cpp:5]: (error) Array 'x[3]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
423:
424: $check_ $(@expr1073743056 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 424 $, "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 2 ];\n   return y;\n}" $)
425:
|
429:
430: ;
431: $if $(@expr1073743057 $!@expr1073743058 $assertEquals $(@expr1073743059 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 431 $, "" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
432:
433: $check_ $(@expr1073743062 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 433 $, "int x[5] = {0};\nint a = x[10];" $)
434: ;
435: $if $(@expr1073743063 $!@expr1073743064 $assertEquals $(@expr1073743065 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 435 $, "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
436:
437: $check_ $(@expr1073743068 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 437 $, "int x[5] = {0};\nint a = (x)[10];" $)
438: ;
439: $if $(@expr1073743069 $!@expr1073743070 $assertEquals $(@expr1073743071 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 439 $, "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1218 str (@expr1219 ) $) $) { $return ; }
440: }
441:
442:
443: void array_index_2 ( ) {
444: $check_ $(@expr1073743074 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 444 $, "void a(int i)\n{\n    char *str = new char[0x10];\n    str[i] = 0;\n}\nvoid b() { a(16); }" $)
445:
|
448:
449: ;
450: $if $(@expr1073743075 $!@expr1073743076 $assertEquals $(@expr1073743077 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 450 $, "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" $, errout@var100 .@expr1073743078 str (@expr1073743079 ) $) $) { $return ; }
451: }
452:
453: void array_index_4 ( ) {
454: $check_ $(@expr1073743080 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 454 $, "char c = \"abc\"[4];" $) ;
455: $if $(@expr1073743081 $!@expr1073743082 $assertEquals $(@expr1073743083 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 455 $, "[test.cpp:1]: (error) Array '\"abc\"[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1260 str (@expr1261 ) $) $) { $return ; }
456:
457: $check_ $(@expr1073743086 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 457 $, "p = &\"abc\"[4];" $) ;
458: $if $(@expr1073743087 $!@expr1073743088 $assertEquals $(@expr1073743089 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 458 $, "" $, errout@var100 .@expr1260 str (@expr1261 ) $) $) { $return ; }
459:
460: $check_ $(@expr1073743092 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 460 $, "char c = \"\\0abc\"[2];" $) ;
461: $if $(@expr1073743093 $!@expr1073743094 $assertEquals $(@expr1073743095 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 461 $, "" $, errout@var100 .@expr1260 str (@expr1261 ) $) $) { $return ; }
462:
463: $check_ $(@expr1073743098 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 463 $, "char c = L\"abc\"[4];" $) ;
464: $if $(@expr1073743099 $!@expr1073743100 $assertEquals $(@expr1073743101 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 464 $, "[test.cpp:1]: (error) Array 'L\"abc\"[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1260 str (@expr1261 ) $) $) { $return ; }
465: }
466:
467: void array_index_3 ( ) {
468: $check_ $(@expr1073743104 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 468 $, "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 0; i < 100; i++)\n        sum += val[i];\n}" $)
469:
|
473:
474: ;
475: $if $(@expr1073743105 $!@expr1073743106 $assertEquals $(@expr1073743107 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 475 $, "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
476:
477: $check_ $(@expr1073743110 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 477 $, "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; i < 100; i++)\n        sum += val[i];\n}" $)
478:
|
482:
483: ;
484: $if $(@expr1073743111 $!@expr1073743112 $assertEquals $(@expr1073743113 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 484 $, "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
485:
486: $check_ $(@expr1073743116 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 486 $, "void f(int a)\n{\n    int val[50];\n    int i, sum=0;\n    for (i = a; i < 100; i++)\n        sum += val[i];\n}" $)
487:
|
491:
492: ;
493: $if $(@expr1073743117 $!@expr1073743118 $assertEquals $(@expr1073743119 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 493 $, "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
494:
495: $check_ $(@expr1073743122 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 495 $, "typedef struct g g2[3];\nvoid foo(char *a)\n{\n  for (int i = 0; i < 4; i++)\n  {\n    a[i]=0;\n  }\n}" $)
496:
|
501:
502: ;
503: $if $(@expr1073743123 $!@expr1073743124 $assertEquals $(@expr1073743125 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 503 $, "" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
504:
505: $check_ $(@expr1073743128 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 505 $, "void foo(int argc)\n{\n  char a[2];\n  for (int i = 4; i < argc; i++){}\n}" $)
506:
507:
508:
509: ;
510: $if $(@expr1073743129 $!@expr1073743130 $assertEquals $(@expr1073743131 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 510 $, "" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
511:
512: $check_ $(@expr1073743134 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 512 $, "void foo(int a[10]) {\n    for (int i=0;i<50;++i) {\n        a[i] = 0;\n    }\n}" $)
513:
514:
515:
516: ;
517: $if $(@expr1073743135 $!@expr1073743136 $assertEquals $(@expr1073743137 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 517 $, "[test.cpp:3]: (error) Array 'a[10]' accessed at index 49, which is out of bounds.\n" $, errout@var100 .@expr1284 str (@expr1285 ) $) $) { $return ; }
518: }
519:
520: void array_index_6 ( ) {
521: $check_ $(@expr1073743140 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 521 $, "struct ABC\n{\n    char str[10];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    abc.str[10] = 0;\n}" $)
522:
|
529:
530: ;
531: $if $(@expr1073743141 $!@expr1073743142 $assertEquals $(@expr1073743143 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 531 $, "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
532:
533: $check_ $(@expr1073743146 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 533 $, "struct ABC\n{\n    char str[10];\n};\n\nstatic char f()\n{\n    struct ABC abc;\n    return abc.str[10];\n}" $)
534:
|
541:
542: ;
543: $if $(@expr1073743147 $!@expr1073743148 $assertEquals $(@expr1073743149 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 543 $, "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
544:
545:
546: $check_ $(@expr1073743152 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 546 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}" $)
547:
|
554:
555: ;
556: $if $(@expr1073743153 $!@expr1073743154 $assertEquals $(@expr1073743155 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 556 $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
557:
558:
559: $check_ $(@expr1073743158 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 559 $, "struct ABC\n{\n    char str[1];\n    int x;\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}" $)
560:
|
568:
569: ;
570: $todoAssertEquals $(@expr1073743159 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 570 $, "error" $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) ;
571:
|
574:
575: $check_ $(@expr1073743162 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 575 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[10] = 0;}" $)
576:
|
583:
584: ;
585: $if $(@expr1073743163 $!@expr1073743164 $assertEquals $(@expr1073743165 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 585 $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
586:
587:
588:
589: $check_ $(@expr1073743168 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 589 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[11] = 0;}" $)
590:
|
597:
598: ;
599: $todoAssertEquals $(@expr1073743169 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 599 $, "[test.cpp:9]: (error) Array 'str[1]' accessed at index 11, which is out of bounds.\n" $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) ;
600:
601:
602: $check_ $(@expr1073743172 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 602 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC) + 10);\n    x->str[11] = 0;}" $)
603:
|
610:
611: ;
612: $todoAssertEquals $(@expr1073743173 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 612 $, "error" $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) ;
613:
614:
615:
616: $check_ $(@expr1073743176 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 616 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC));\n    x->str[1] = 0;}" $)
617:
|
624:
625: ;
626: $todoAssertEquals $(@expr1073743177 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 626 $, "[test.cpp:9]: (error) Array 'str[1]' accessed at index 1, which is out of bounds.\n" $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) ;
627:
628:
629:
630: $check_ $(@expr1073743180 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 630 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC));\n    x->str[1] = 0;}" $)
631:
|
638:
639: ;
640: $todoAssertEquals $(@expr1073743181 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 640 $, "error" $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) ;
641:
642:
643: $check_ $(@expr1073743184 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 643 $, "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC x;\n    x.str[1] = 0;}" $)
644:
|
651:
652: ;
653: $if $(@expr1073743185 $!@expr1073743186 $assertEquals $(@expr1073743187 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 653 $, "[test.cpp:9]: (error) Array 'x.str[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
654:
655: $check_ $(@expr1073743190 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 655 $, "struct foo\n{\n    char str[10];\n};\n\nvoid x()\n{\n    foo f;\n    for ( unsigned int i = 0; i < 64; ++i )\n        f.str[i] = 0;\n}" $)
656:
|
664:
665: ;
666: $if $(@expr1073743191 $!@expr1073743192 $assertEquals $(@expr1073743193 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 666 $, "[test.cpp:10]: (error) Array 'f.str[10]' accessed at index 63, which is out of bounds.\n" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
667:
668: $check_ $(@expr1073743196 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 668 $, "struct AB { char a[NUM]; char b[NUM]; }\nvoid f(struct AB *ab) {\n    ab->a[0] = 0;\n}" $)
669:
670:
671: ;
672: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 672 $, "" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
673:
674: $check_ $(@expr1073743202 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 674 $, "union { char a[1]; int b; } ab;\nvoid f() {\n    ab.a[2] = 0;\n}" $)
675:
676:
677: ;
678: $if $(@expr1073743203 $!@expr1073743204 $assertEquals $(@expr1073743205 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 678 $, "[test.cpp:3]: (error) Array 'ab.a[1]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr1320 str (@expr1321 ) $) $) { $return ; }
679: }
680:
681:
682: void array_index_7 ( ) {
683: $check_ $(@expr1073743208 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 683 $, "struct ABC\n{\n    char str[10];\n};\n\nstatic void f(struct ABC *abc)\n{\n    abc->str[10] = 0;\n}" $)
684:
|
690:
691: ;
692: $if $(@expr1073743209 $!@expr1073743210 $assertEquals $(@expr1073743211 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 692 $, "[test.cpp:8]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743212 str (@expr1073743213 ) $) $) { $return ; }
693: }
694:
695: void array_index_11 ( ) {
696: $check_ $(@expr1073743214 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 696 $, "class ABC\n{\npublic:\n    ABC();\n    char *str[10];\n    struct ABC *next();\n};\n\nstatic void f(ABC *abc1)\n{\n    for ( ABC *abc = abc1; abc; abc = abc->next() )\n    {\n        abc->str[10] = 0;\n    }\n}" $)
697:
|
709:
710: ;
711: $if $(@expr1073743215 $!@expr1073743216 $assertEquals $(@expr1073743217 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 711 $, "[test.cpp:13]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743218 str (@expr1073743219 ) $) $) { $return ; }
712: }
713:
714: void array_index_12 ( ) {
715: $check_ $(@expr1073743220 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 715 $, "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    Fred();\n};\nFred::Fred()\n{\n    str[10] = 0;\n}" $)
716:
|
724:
725: ;
726: $if $(@expr1073743221 $!@expr1073743222 $assertEquals $(@expr1073743223 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 726 $, "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
727:
728: $check_ $(@expr1073743226 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 728 $, "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    char c();\n};\nchar Fred::c()\n{\n    return str[10];\n}" $)
729:
|
737:
738: ;
739: $if $(@expr1073743227 $!@expr1073743228 $assertEquals $(@expr1073743229 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 739 $, "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1400 str (@expr1401 ) $) $) { $return ; }
740: }
741:
742: void array_index_13 ( ) {
743: $check_ $(@expr1073743232 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 743 $, "void f()\n{\n    char buf[10];\n    for (int i = 0; i < 100; i++)\n    {\n        if (i < 10)\n            int x = buf[i];\n    }\n}" $)
744:
|
750:
751: ;
752: $if $(@expr1073743233 $!@expr1073743234 $assertEquals $(@expr1073743235 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 752 $, "" $, errout@var100 .@expr1073743236 str (@expr1073743237 ) $) $) { $return ; }
753: }
754:
755: void array_index_14 ( ) {
756: $check_ $(@expr1073743238 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 756 $, "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+10] = i;\n}" $)
757:
|
760:
761: ;
762: $if $(@expr1073743239 $!@expr1073743240 $assertEquals $(@expr1073743241 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 762 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" $, errout@var100 .@expr1073743242 str (@expr1073743243 ) $) $) { $return ; }
763: }
764:
765: void array_index_15 ( ) {
766: $check_ $(@expr1073743244 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 766 $, "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[10+i] = i;\n}" $)
767:
|
770:
771: ;
772: $if $(@expr1073743245 $!@expr1073743246 $assertEquals $(@expr1073743247 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 772 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" $, errout@var100 .@expr1073743248 str (@expr1073743249 ) $) $) { $return ; }
773: }
774:
775: void array_index_16 ( ) {
776: $check_ $(@expr1073743250 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 776 $, "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+1] = i;\n}" $)
777:
|
780:
781: ;
782: $if $(@expr1073743251 $!@expr1073743252 $assertEquals $(@expr1073743253 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 782 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743254 str (@expr1073743255 ) $) $) { $return ; }
783: }
784:
785: void array_index_17 ( ) {
786: $check_ $(@expr1073743256 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 786 $, "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i*2] = i;\n}" $)
787:
|
790:
791: ;
792: $if $(@expr1073743257 $!@expr1073743258 $assertEquals $(@expr1073743259 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 792 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index 18, which is out of bounds.\n" $, errout@var100 .@expr1436 str (@expr1437 ) $) $) { $return ; }
793:
794: $check_ $(@expr1073743262 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 794 $, "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+5] = i;\n}" $)
795:
|
798:
799: ;
800: $if $(@expr1073743263 $!@expr1073743264 $assertEquals $(@expr1073743265 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 800 $, "" $, errout@var100 .@expr1436 str (@expr1437 ) $) $) { $return ; }
801:
802: $check_ $(@expr1073743268 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 802 $, "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+6] = i;\n}" $)
803:
|
806:
807: ;
808: $if $(@expr1073743269 $!@expr1073743270 $assertEquals $(@expr1073743271 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 808 $, "[test.cpp:5]: (error) Array 'a[12]' accessed at index 12, which is out of bounds.\n" $, errout@var100 .@expr1436 str (@expr1437 ) $) $) { $return ; }
809:
810: $check_ $(@expr1073743274 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 810 $, "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        a[i] = 0;\n}" $)
811:
812:
813:
814: ;
815: $if $(@expr1073743275 $!@expr1073743276 $assertEquals $(@expr1073743277 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 815 $, "[test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr1436 str (@expr1437 ) $) $) { $return ; }
816:
817: $check_ $(@expr1073743280 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 817 $, "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        do_stuff(a+i);\n}" $)
818:
819:
820:
821: ;
822: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 822 $, "" $, errout@var100 .@expr1436 str (@expr1437 ) $) $) { $return ; }
823: }
824:
825: void array_index_18 ( ) {
826: $check_ $(@expr1073743286 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 826 $, "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}" $)
827:
|
833:
834: ;
835: $if $(@expr1073743287 $!@expr1073743288 $assertEquals $(@expr1073743289 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 835 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
836:
837: $check_ $(@expr1073743292 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 837 $, "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i++;\n    }\n}" $)
838:
|
844:
845: ;
846: $if $(@expr1073743293 $!@expr1073743294 $assertEquals $(@expr1073743295 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 846 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
847:
848: $check_ $(@expr1073743298 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 848 $, "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        ++i;\n    }\n}" $)
849:
|
855:
856: ;
857: $if $(@expr1073743299 $!@expr1073743300 $assertEquals $(@expr1073743301 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 857 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
858:
859: $check_ $(@expr1073743304 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 859 $, "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i=4;\n    }\n}" $)
860:
|
866:
867: ;
868: $if $(@expr1073743305 $!@expr1073743306 $assertEquals $(@expr1073743307 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 868 $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) $) { $return ; }
869:
870: $check_ $(@expr1073743310 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 870 $, "void f()\n{\n    int a[6];\n    for (int i = 0; i < 7; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}" $)
871:
|
877:
878: ;
879: $todoAssertEquals $(@expr1073743311 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 879 $, "[test.cpp:6]: (error) Buffer overrun\n" $, "" $, errout@var100 .@expr1466 str (@expr1467 ) $) ;
880: }
881:
882: void array_index_19 ( ) {
883:
884: $check_ $(@expr1073743314 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 884 $, "void f()\n{\n  char a[2];\n  char *end = &(a[2]);\n}" $)
885:
886:
887:
888: ;
889: $if $(@expr1073743315 $!@expr1073743316 $assertEquals $(@expr1073743317 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 889 $, "" $, errout@var100 .@expr1494 str (@expr1495 ) $) $) { $return ; }
890:
891:
892: $check_ $(@expr1073743320 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 892 $, "void f()\n{\n  char a[2];\n  char *end = &(a[3]);\n}" $)
893:
894:
895:
896: ;
897: $if $(@expr1073743321 $!@expr1073743322 $assertEquals $(@expr1073743323 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 897 $, "[test.cpp:4]: (error) Array 'a[2]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1494 str (@expr1495 ) $) $) { $return ; }
898: }
899:
900: void array_index_20 ( ) {
901: $check_ $(@expr1073743326 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 901 $, "void f()\n{\n char a[8];\n int b[10];\n for ( int i = 0; i < 9; i++ )\n  b[i] = 0;\n}" $)
902:
|
906:
907: ;
908: $if $(@expr1073743327 $!@expr1073743328 $assertEquals $(@expr1073743329 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 908 $, "" $, errout@var100 .@expr1073743330 str (@expr1073743331 ) $) $) { $return ; }
909: }
910:
911: void array_index_21 ( ) {
912: $check_ $(@expr1073743332 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 912 $, "class A {\n int indices[2];\n void foo(int indices[3]);\n};\n\nvoid A::foo(int indices[3]) {\n for(int j=0; j<3; ++j) {\n  int b = indices[j];\n }\n}" $)
913:
|
920:
921: ;
922: $if $(@expr1073743333 $!@expr1073743334 $assertEquals $(@expr1073743335 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 922 $, "" $, errout@var100 .@expr1073743336 str (@expr1073743337 ) $) $) { $return ; }
923: }
924:
925: void array_index_22 ( ) {
926: $check_ $(@expr1073743338 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 926 $, "int main() {\n  size_t indices[2];\n  int b = indices[2];\n}" $)
927:
928:
929: ;
930: $if $(@expr1073743339 $!@expr1073743340 $assertEquals $(@expr1073743341 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 930 $, "[test.cpp:3]: (error) Array 'indices[2]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr1073743342 str (@expr1073743343 ) $) $) { $return ; }
931: }
932:
933: void array_index_23 ( ) {
934: $check_ $(@expr1073743344 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 934 $, "void foo()\n{\n    char c[10];\n    c[1<<23]='a';\n}" $)
935:
936:
937:
938: ;
939: $if $(@expr1073743345 $!@expr1073743346 $assertEquals $(@expr1073743347 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 939 $, "[test.cpp:4]: (error) Array 'c[10]' accessed at index 8388608, which is out of bounds.\n" $, errout@var100 .@expr1073743348 str (@expr1073743349 ) $) $) { $return ; }
940: }
941:
942: void array_index_24 ( ) {
943:
944: const std ::@expr1073743350 string charMaxPlusOne@var137 (@expr1073743351 settings0@var102 .@expr1073743352 defaultSign@var138 ==@expr1073743353 'u' ?@expr1073743354 "256" :@expr1073743355 "128" ) ;
945: $check_ $(@expr1073743356 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 945 $, (@expr1073743357 "void f(char n) {\n    int a[n];\n    a[-1] = 0;\n    a[" +@expr1073743358 charMaxPlusOne@var137 +@expr1073743359 "] = 0;\n}\n" ) .@expr1073743360 c_str (@expr1073743361 ) $)
946:
947:
948:
949: ;
950: $if $(@expr1073743362 $!@expr1073743363 $assertEquals $(@expr1073743364 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 950 $, "[test.cpp:3]: (error) Array 'a[" +@expr1073743365 charMaxPlusOne@var137 +@expr1073743366 "]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[" +@expr1073743367 charMaxPlusOne@var137 +@expr1073743368 "]' accessed at index " +@expr1073743369 charMaxPlusOne@var137 +@expr1073743370 ", which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
951: ; }
952:
953: $check_ $(@expr1073743373 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 953 $, "void f(signed char n) {\n    int a[n];\n    a[-1] = 0;\n    a[128] = 0;\n}" $)
954:
955:
956:
957: ;
958: $if $(@expr1073743374 $!@expr1073743375 $assertEquals $(@expr1073743376 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 958 $, "[test.cpp:3]: (error) Array 'a[128]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[128]' accessed at index 128, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
959: ; }
960:
961: $check_ $(@expr1073743379 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 961 $, "void f(unsigned char n) {\n    int a[n];\n    a[-1] = 0;\n    a[256] = 0;\n}" $)
962:
963:
964:
965: ;
966: $if $(@expr1073743380 $!@expr1073743381 $assertEquals $(@expr1073743382 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 966 $, "[test.cpp:3]: (error) Array 'a[256]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[256]' accessed at index 256, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
967: ; }
968:
969: $check_ $(@expr1073743385 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 969 $, "void f(short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}" $)
970:
971:
972:
973: ;
974: $if $(@expr1073743386 $!@expr1073743387 $assertEquals $(@expr1073743388 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 974 $, "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
975: ; }
976:
977: $check_ $(@expr1073743391 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 977 $, "void f(unsigned short n) {\n    int a[n];\n    a[-1] = 0;\n    a[65536] = 0;\n}" $)
978:
979:
980:
981: ;
982: $if $(@expr1073743392 $!@expr1073743393 $assertEquals $(@expr1073743394 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 982 $, "[test.cpp:3]: (error) Array 'a[65536]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[65536]' accessed at index 65536, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
983: ; }
984:
985: $check_ $(@expr1073743397 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 985 $, "void f(signed short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}" $)
986:
987:
988:
989: ;
990: $if $(@expr1073743398 $!@expr1073743399 $assertEquals $(@expr1073743400 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 990 $, "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return
991: ; }
992:
993: $check_ $(@expr1073743403 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 993 $, "void f(int n) {\n    int a[n];\n    a[-1] = 0;\n}" $)
994:
995:
996: ;
997: $if $(@expr1073743404 $!@expr1073743405 $assertEquals $(@expr1073743406 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 997 $, "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return ; }
998:
999: $check_ $(@expr1073743409 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 999 $, "void f(unsigned int n) {\n    int a[n];\n    a[-1] = 0;\n}" $)
1000:
1001:
1002: ;
1003: $if $(@expr1073743410 $!@expr1073743411 $assertEquals $(@expr1073743412 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1003 $, "[test.cpp:3]: (error) Array 'a[4294967296]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return ; }
1004:
1005: $check_ $(@expr1073743415 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1005 $, "void f(signed int n) {\n    int a[n];\n    a[-1] = 0;\n}" $)
1006:
1007:
1008: ;
1009: $if $(@expr1073743416 $!@expr1073743417 $assertEquals $(@expr1073743418 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1009 $, "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1547 str (@expr1548 ) $) $) { $return ; }
1010: }
1011:
1012: void array_index_25 ( ) {
1013: $check_ $(@expr1073743421 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1013 $, "void foo()\n{\n   long l[SOME_SIZE];\n}" $)
1014:
1015:
1016: ;
1017: $if $(@expr1073743422 $!@expr1073743423 $assertEquals $(@expr1073743424 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1017 $, "" $, errout@var100 .@expr1073743425 str (@expr1073743426 ) $) $) { $return ; }
1018: }
1019:
1020: void array_index_26 ( ) {
1021: $check_ $(@expr1073743427 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1021 $, "void f()\n{\n    int a[3];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}" $)
1022:
|
1025:
1026: ;
1027: $if $(@expr1073743428 $!@expr1073743429 $assertEquals $(@expr1073743430 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1027 $, "[test.cpp:5]: (error) Array 'a[3]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1607 str (@expr1608 ) $) $) { $return ; }
1028:
1029: $check_ $(@expr1073743433 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1029 $, "void f()\n{\n    int a[4];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}" $)
1030:
|
1033:
1034: ;
1035: $if $(@expr1073743434 $!@expr1073743435 $assertEquals $(@expr1073743436 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1035 $, "" $, errout@var100 .@expr1607 str (@expr1608 ) $) $) { $return ; }
1036: }
1037:
1038: void array_index_27 ( ) {
1039: $check_ $(@expr1073743439 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1039 $, "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i-1] = a[i];\n}" $)
1040:
|
1043:
1044: ;
1045: $if $(@expr1073743440 $!@expr1073743441 $assertEquals $(@expr1073743442 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1045 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1073743443 str (@expr1073743444 ) $) $) { $return ; }
1046: }
1047:
1048: void array_index_28 ( ) {
1049:
1050: $check_ $(@expr1073743445 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1050 $, "void f()\n{\n    int i[2];\n    int *ip = i + 1;\n    ip[-10] = 1;\n}" $)
1051:
|
1054:
1055: ;
1056: $todoAssertEquals $(@expr1073743446 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1056 $, "[test.cpp:5]: (error) Array ip[-10] out of bounds.\n" $, "" $, errout@var100 .@expr1073743447 str (@expr1073743448 ) $) ;
1057: }
1058:
1059: void array_index_29 ( ) {
1060:
1061: $check_ $(@expr1073743449 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1061 $, "void f()\n{\n    int iBuf[10];    int *i = iBuf + 9;    int *ii = i + -5;    ii[10] = 0;}" $)
1062:
|
1066:
1067: ;
1068: $todoAssertEquals $(@expr1073743450 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1068 $, "[test.cpp:6]: (error) Array ii[10] out of bounds.\n" $, "" $, errout@var100 .@expr1073743451 str (@expr1073743452 ) $) ;
1069: }
1070:
1071: void array_index_30 ( ) {
1072:
1073:
1074: $check_ $(@expr1073743453 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1074 $, "void f() {\n    UINT8 x[2];\n    x[5] = 0;\n}" $)
1075:
1076:
1077: ;
1078: $if $(@expr1073743454 $!@expr1073743455 $assertEquals $(@expr1073743456 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1078 $, "[test.cpp:3]: (error) Array 'x[2]' accessed at index 5, which is out of bounds.\n" $, errout@var100 .@expr1073743457 str (@expr1073743458 ) $) $) { $return ; }
1079: }
1080:
1081: void array_index_31 ( ) {
1082:
1083: $check_ $(@expr1073743459 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1083 $, "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[0] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}" $)
1084:
|
1093:
1094: ;
1095: $if $(@expr1073743460 $!@expr1073743461 $assertEquals $(@expr1073743462 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1095 $, "" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1096:
1097: $check_ $(@expr1073743465 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1097 $, "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[4] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}" $)
1098:
|
1107:
1108: ;
1109: $todoAssertEquals $(@expr1073743466 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1109 $, "[test.cpp:11] -> [test.cpp:6]: (error) Array 'obj.delay[3]' accessed at index 4, which is out of bounds.\n" $, "" $, errout@var100 .@expr1639 str (@expr1640 ) $)
1110:
1111: ;
1112:
1113: $check_ $(@expr1073743469 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1113 $, "struct s1 {\n    float a[0];\n};\n\nvoid f() {\n    struct s1 *obj;\n}" $)
1114:
|
1118:
1119: ;
1120: $if $(@expr1073743470 $!@expr1073743471 $assertEquals $(@expr1073743472 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1120 $, "" $, errout@var100 .@expr1639 str (@expr1640 ) $) $) { $return ; }
1121: }
1122:
1123: void array_index_32 ( ) {
1124: $check_ $(@expr1073743475 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1124 $, "class X\n{\n    public:\n    X()\n    {\n       m_x[0] = 0;\n       m_x[1] = 0;\n    }\n    int m_x[1];\n};" $)
1125:
|
1132:
1133: ;
1134: $if $(@expr1073743476 $!@expr1073743477 $assertEquals $(@expr1073743478 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1134 $, "[test.cpp:7]: (error) Array 'm_x[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr1073743479 str (@expr1073743480 ) $) $) { $return ; }
1135: }
1136:
1137: void array_index_33 ( ) {
1138: $check_ $(@expr1073743481 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1138 $, "void foo(char bar[][4]) {\n    baz(bar[5]);\n}" $)
1139:
1140: ;
1141: $if $(@expr1073743482 $!@expr1073743483 $assertEquals $(@expr1073743484 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1141 $, "" $, errout@var100 .@expr1073743485 str (@expr1073743486 ) $) $) { $return ; }
1142: }
1143:
1144: void array_index_34 ( ) {
1145: $check_ $(@expr1073743487 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1145 $, "void foo() {\n    int y[2][2][2];\n    y[0][2][0] = 0;\n    y[0][0][2] = 0;\n}" $)
1146:
1147:
1148:
1149: ;
1150: $if $(@expr1073743488 $!@expr1073743489 $assertEquals $(@expr1073743490 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1150 $, "[test.cpp:3]: (error) Array 'y[2][2][2]' accessed at index y[0][2][0], which is out of bounds.\n[test.cpp:4]: (error) Array 'y[2][2][2]' accessed at index y[0][0][2], which is out of bounds.\n" $, errout@var100 .@expr1667 str (@expr1668 ) $) $) { $return
1151: ; }
1152:
1153: $check_ $(@expr1073743493 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1153 $, "struct TEST\n{\n    char a[10];\n    char b[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[10] = 3;\n    test.b[10][2] = 4;\n    test.b[0][19] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[10] = 3;\n    ptest->b[10][2] = 4;\n    ptest->b[0][19] = 4;\n}" $)
1154:
|
1168:
1169: ;
1170: $if $(@expr1073743494 $!@expr1073743495 $assertEquals $(@expr1073743496 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1170 $, "[test.cpp:9]: (error) Array 'test.a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:10]: (error) Array 'test.b[10][5]' accessed at index test.b[10][2], which is out of bounds.\n[test.cpp:11]: (error) Array 'test.b[10][5]' accessed at index test.b[0][19], which is out of bounds.\n[test.cpp:14]: (error) Array 'ptest->a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:15]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[10][2], which is out of bounds.\n[test.cpp:16]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[0][19], which is out of bounds.\n" $, errout@var100 .@expr1667 str (@expr1668 ) $) $) { $return
1171:
|
1174:
1175: ; }
1176:
1177: $check_ $(@expr1073743499 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1177 $, "struct TEST\n{\n    char a[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[9][5] = 4;\n    test.a[0][50] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[9][5] = 4;\n    ptest->a[0][50] = 4;\n}" $)
1178:
|
1189:
1190: ;
1191: $if $(@expr1073743500 $!@expr1073743501 $assertEquals $(@expr1073743502 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1191 $, "[test.cpp:8]: (error) Array 'test.a[10][5]' accessed at index test.a[9][5], which is out of bounds.\n[test.cpp:9]: (error) Array 'test.a[10][5]' accessed at index test.a[0][50], which is out of bounds.\n[test.cpp:12]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[9][5], which is out of bounds.\n[test.cpp:13]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[0][50], which is out of bounds.\n" $, errout@var100 .@expr1667 str (@expr1668 ) $) $) { $return
1192:
1193:
1194: ; }
1195: }
1196:
1197: void array_index_35 ( ) {
1198: $check_ $(@expr1073743505 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1198 $, "void f() {\n    struct Struct { unsigned m_Var[1]; } s;\n    s.m_Var[1] = 1;\n}" $)
1199:
1200:
1201: ;
1202: $if $(@expr1073743506 $!@expr1073743507 $assertEquals $(@expr1073743508 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1202 $, "[test.cpp:3]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr1685 str (@expr1686 ) $) $) { $return ; }
1203:
1204: $check_ $(@expr1073743511 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1204 $, "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct s;\n    s.m_Var[1] = 1;\n}" $)
1205:
1206:
1207:
1208: ;
1209: $if $(@expr1073743512 $!@expr1073743513 $assertEquals $(@expr1073743514 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1209 $, "[test.cpp:4]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr1685 str (@expr1686 ) $) $) { $return ; }
1210:
1211: $check_ $(@expr1073743517 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1211 $, "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct * s = calloc(40);\n    s->m_Var[1] = 1;\n}" $)
1212:
1213:
1214:
1215: ;
1216: $if $(@expr1073743518 $!@expr1073743519 $assertEquals $(@expr1073743520 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1216 $, "" $, errout@var100 .@expr1685 str (@expr1686 ) $) $) { $return ; }
1217: }
1218:
1219: void array_index_36 ( ) {
1220: $check_ $(@expr1073743523 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1220 $, "class Fred {\n    Fred(const Fred &);\nprivate:\n    bool m_b[2];\n};\nFred::Fred(const Fred & rhs) {\n    m_b[2] = rhs.m_b[2];\n}" $)
1221:
|
1226:
1227: ;
1228: $if $(@expr1073743524 $!@expr1073743525 $assertEquals $(@expr1073743526 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1228 $, "[test.cpp:7]: (error) Array 'm_b[2]' accessed at index 2, which is out of bounds.\n[test.cpp:7]: (error) Array 'rhs.m_b[2]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr1073743527 str (@expr1073743528 ) $) $) { $return
1229: ; }
1230: }
1231:
1232: void array_index_37 ( ) {
1233: $check_ $(@expr1073743529 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1233 $, "class Fred {\n    char x[X];\n    Fred() {\n        for (unsigned int i = 0; i < 15; i++)\n            i;\n    }\n}" $)
1234:
|
1238:
1239: ;
1240: $if $(@expr1073743530 $!@expr1073743531 $assertEquals $(@expr1073743532 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1240 $, "" $, errout@var100 .@expr1073743533 str (@expr1073743534 ) $) $) { $return ; }
1241: }
1242:
1243: void array_index_38 ( ) {
1244: $check_ $(@expr1073743535 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1244 $, "void aFunction() {\n    double aDoubleArray[ 10 ];\n    unsigned int i; i = 0;\n    for( i = 0; i < 6; i++ )\n    {\n        unsigned int j; j = 0;\n        for( j = 0; j < 5; j++ )\n        {\n            unsigned int x; x = 0;\n            for( x = 0; x < 4; x++ )\n            {\n            }\n        }\n    }\n}" $)
1245:
|
1257:
1258: ;
1259: $if $(@expr1073743536 $!@expr1073743537 $assertEquals $(@expr1073743538 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1259 $, "" $, errout@var100 .@expr1073743539 str (@expr1073743540 ) $) $) { $return ; }
1260: }
1261:
1262: void array_index_39 ( ) {
1263: $check_ $(@expr1073743541 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1263 $, "void aFunction()\n{\n    char a[10];\n    a[10] = 0;\n}" $)
1264:
1265:
1266:
1267: ;
1268: $if $(@expr1073743542 $!@expr1073743543 $assertEquals $(@expr1073743544 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1268 $, "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743545 str (@expr1073743546 ) $) $) { $return ; }
1269: }
1270:
1271: void array_index_40 ( ) {
1272: $check_ $(@expr1073743547 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1272 $, "void f() {\n    char a[10];\n    for (int i = 0; i < 10; ++i)\n        f2(&a[i + 1]);\n}" $)
1273:
1274:
1275:
1276: ;
1277: $if $(@expr1073743548 $!@expr1073743549 $assertEquals $(@expr1073743550 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1277 $, "" $, errout@var100 .@expr1073743551 str (@expr1073743552 ) $) $) { $return ; }
1278: }
1279:
1280: void array_index_41 ( ) {
1281:
1282: $check_ $(@expr1073743553 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1282 $, "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n}" $)
1283:
|
1288:
1289: ;
1290: $if $(@expr1073743554 $!@expr1073743555 $assertEquals $(@expr1073743556 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1290 $, "" $, errout@var100 .@expr1733 str (@expr1734 ) $) $) { $return ; }
1291:
1292: $check_ $(@expr1073743559 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1292 $, "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n    fred.data[4] = 0;\n}" $)
1293:
|
1299:
1300: ;
1301: $if $(@expr1073743560 $!@expr1073743561 $assertEquals $(@expr1073743562 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1301 $, "[test.cpp:8]: (error) Array 'fred.data[3]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1733 str (@expr1734 ) $) $) { $return ; }
1302: }
1303:
1304: void array_index_42 ( ) {
1305:
1306: $check_ $(@expr1073743565 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1306 $, "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[10] = 7;\n  free(p);\n}" $)
1307:
|
1310:
1311: ;
1312: $if $(@expr1073743566 $!@expr1073743567 $assertEquals $(@expr1073743568 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1312 $, "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1313:
1314: $check_ $(@expr1073743571 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1314 $, "void f()\n{\n  float *p; p = (float *)malloc(10 * sizeof(float));\n  p[10] = 7;\n  free(p);\n}" $)
1315:
|
1318:
1319: ;
1320: $if $(@expr1073743572 $!@expr1073743573 $assertEquals $(@expr1073743574 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1320 $, "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1321:
1322: $check_ $(@expr1073743577 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1322 $, "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[0] = 0;\n  p[9] = 9;\n  free(p);\n}" $)
1323:
|
1327:
1328: ;
1329: $if $(@expr1073743578 $!@expr1073743579 $assertEquals $(@expr1073743580 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1329 $, "" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1330:
1331: $check_ $(@expr1073743583 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1331 $, "void f()\n{\n  char *p; p = new char[10];\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" $)
1332:
|
1336:
1337: ;
1338: $if $(@expr1073743584 $!@expr1073743585 $assertEquals $(@expr1073743586 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1338 $, "" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1339:
1340: $check_ $(@expr1073743589 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1340 $, "void f()\n{\n  char *p(new char[10]);\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" $)
1341:
|
1345:
1346: ;
1347: $if $(@expr1073743590 $!@expr1073743591 $assertEquals $(@expr1073743592 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1347 $, "" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1348:
1349: $check_ $(@expr1073743595 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1349 $, "void f()\n{\n  char *p = NULL;  try{\n  p = new char[10];\n  }\n  catch(...){\n  return;\n  }  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" $)
1350:
|
1360:
1361: ;
1362: $if $(@expr1073743596 $!@expr1073743597 $assertEquals $(@expr1073743598 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1362 $, "" $, errout@var100 .@expr1745 str (@expr1746 ) $) $) { $return ; }
1363: }
1364:
1365: void array_index_43 ( ) {
1366:
1367: $check_ $(@expr1073743601 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1367 $, "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 3 ];\n   return y;\n}" $)
1368:
|
1377:
1378: ;
1379: $if $(@expr1073743602 $!@expr1073743603 $assertEquals $(@expr1073743604 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1379 $, "[test.cpp:10]: (error) Array 'var[0].arr[3]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1380:
1381: $check_ $(@expr1073743607 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1381 $, "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y=1;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 2 ];\n   return y;\n}" $)
1382:
|
1391:
1392: ;
1393: $if $(@expr1073743608 $!@expr1073743609 $assertEquals $(@expr1073743610 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1393 $, "" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1394:
1395:
1396: $check_ $(@expr1073743613 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1396 $, "int f( ){\nstruct Struct{\n    int arr[ 3 ];\n};\nint y;\nStruct var;\nvar.arr[ 0 ] = 0;\nvar.arr[ 1 ] = 1;\nvar.arr[ 2 ] = 2;\nvar.arr[ 3 ] = 3;\ny=var.arr[ 3 ];\nreturn y;\n}" $)
1397:
|
1407:
1408: ;
1409: $if $(@expr1073743614 $!@expr1073743615 $assertEquals $(@expr1073743616 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1409 $, "[test.cpp:10]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n[test.cpp:11]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return
1410: ; }
1411:
1412:
1413: $check_ $(@expr1073743619 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1413 $, "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\nvar[0].var[ 4 ] = 4;\n}" $)
1414:
|
1421:
1422: ;
1423: $if $(@expr1073743620 $!@expr1073743621 $assertEquals $(@expr1073743622 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1423 $, "[test.cpp:9]: (error) Array 'var[0].var[3]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1424:
1425: $check_ $(@expr1073743625 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1425 $, "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\n}" $)
1426:
|
1432:
1433: ;
1434: $if $(@expr1073743626 $!@expr1073743627 $assertEquals $(@expr1073743628 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1434 $, "" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1435:
1436:
1437: $check_ $(@expr1073743631 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1437 $, "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab;\n    int * p = &ab.a[10];\n    return 0;\n}" $)
1438:
|
1441:
1442: ;
1443: $if $(@expr1073743632 $!@expr1073743633 $assertEquals $(@expr1073743634 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1443 $, "" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1444:
1445: $check_ $(@expr1073743637 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1445 $, "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[0].a[10];\n    return 0;\n}" $)
1446:
|
1449:
1450: ;
1451: $if $(@expr1073743638 $!@expr1073743639 $assertEquals $(@expr1073743640 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1451 $, "" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1452:
1453: $check_ $(@expr1073743643 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1453 $, "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[10].a[0];\n    return 0;\n}" $)
1454:
|
1457:
1458: ;
1459: $if $(@expr1073743644 $!@expr1073743645 $assertEquals $(@expr1073743646 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1459 $, "[test.cpp:4]: (error) Array 'ab[1]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1781 str (@expr1782 ) $) $) { $return ; }
1460: }
1461:
1462: void array_index_44 ( ) {
1463:
1464: $check_ $(@expr1073743649 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1464 $, "void f()\n{\n    char buf[2];\n    int i;\n    for (i = 2; --i >= 0; )\n    {\n        buf[i] = 1;\n    }\n}" $)
1465:
|
1471:
1472: ;
1473: $if $(@expr1073743650 $!@expr1073743651 $assertEquals $(@expr1073743652 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1473 $, "" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1474:
1475: $check_ $(@expr1073743655 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1475 $, "void f()\n{\n    double buf[2];\n    for (int i = 2; i--; )\n    {\n        buf[i] = 2.;\n    }\n}" $)
1476:
|
1481:
1482: ;
1483: $if $(@expr1073743656 $!@expr1073743657 $assertEquals $(@expr1073743658 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1483 $, "" $, errout@var100 .@expr1829 str (@expr1830 ) $) $) { $return ; }
1484: }
1485:
1486: void array_index_45 ( ) {
1487:
1488: $check_ $(@expr1073743661 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1488 $, "void f(const char *format, ...) {\n    va_args args;\n    va_start(args, format);\n}\nvoid test() {\n    CHAR buffer[1024];\n    f(\"%s\", buffer);\n}" $)
1489:
|
1494:
1495: ;
1496: $if $(@expr1073743662 $!@expr1073743663 $assertEquals $(@expr1073743664 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1496 $, "" $, errout@var100 .@expr1841 str (@expr1842 ) $) $) { $return ; }
1497:
1498:
1499: $check_ $(@expr1073743667 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1499 $, "void f(char *) {\n    dostuff();\n}\nvoid test() {\n    char buffer[1024];\n    f(buffer);\n}" $)
1500:
|
1504:
1505: ;
1506: $if $(@expr1073743668 $!@expr1073743669 $assertEquals $(@expr1073743670 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1506 $, "" $, errout@var100 .@expr1841 str (@expr1842 ) $) $) { $return ; }
1507: }
1508:
1509:
1510: void array_index_46 ( ) {
1511:
1512: $check_ $(@expr1073743673 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1512 $, "void bufferAccessOutOfBounds2() {\n    char *buffer[]={\"a\",\"b\",\"c\"};\n    for(int i=3; i--;) {\n        printf(\"files(%i): %s\", 3-i, buffer[3-i]);\n    }\n}" $)
1513:
|
1516:
1517: ;
1518: $todoAssertEquals $(@expr1073743674 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1518 $, "[test.cpp:4]: (error) Array 'buffer[3]' accessed at index 3, which is out of bounds.\n" $, "" $, errout@var100 .@expr1851 str (@expr1852 ) $) ;
1519:
1520: $check_ $(@expr1073743677 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1520 $, "void f() {\n    int buffer[9];\n    long int i;\n    for(i=10; i--;) {\n        buffer[i] = i;\n    }\n}" $)
1521:
|
1525:
1526: ;
1527: $if $(@expr1073743678 $!@expr1073743679 $assertEquals $(@expr1073743680 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1527 $, "[test.cpp:5]: (error) Array 'buffer[9]' accessed at index 9, which is out of bounds.\n" $, errout@var100 .@expr1851 str (@expr1852 ) $) $) { $return ; }
1528:
1529:
1530: $check_ $(@expr1073743683 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1530 $, "void f() {\n    int buffer[10];\n    for(unsigned long int i=10; i--;) {\n        buffer[i] = i;\n    }\n}" $)
1531:
|
1534:
1535: ;
1536: $if $(@expr1073743684 $!@expr1073743685 $assertEquals $(@expr1073743686 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1536 $, "" $, errout@var100 .@expr1851 str (@expr1852 ) $) $) { $return ; }
1537: }
1538:
1539: void array_index_47 ( ) {
1540:
1541: $check_ $(@expr1073743689 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1541 $, "int s[4];\nvoid f() {\n    for (int i = 2; i < 0; i++)\n        s[i] = 5;\n}" $)
1542:
1543:
1544:
1545: ;
1546: $if $(@expr1073743690 $!@expr1073743691 $assertEquals $(@expr1073743692 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1546 $, "" $, errout@var100 .@expr1073743693 str (@expr1073743694 ) $) $) { $return ; }
1547: }
1548:
1549: void array_index_48 ( ) {
1550:
1551: $check_ $(@expr1073743695 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1551 $, "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        printf(\" %i\", i);\n        array[i] = 0;\n    }\n}" $)
1552:
|
1557:
1558: ;
1559: $if $(@expr1073743696 $!@expr1073743697 $assertEquals $(@expr1073743698 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1559 $, "[test.cpp:6]: (error) Array 'array[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1875 str (@expr1876 ) $) $) { $return ; }
1560:
1561: $check_ $(@expr1073743701 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1561 $, "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        scanf(\"%i\", &i);\n        array[i] = 0;\n    }\n}" $)
1562:
|
1567:
1568: ;
1569: $if $(@expr1073743702 $!@expr1073743703 $assertEquals $(@expr1073743704 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1569 $, "" $, errout@var100 .@expr1875 str (@expr1876 ) $) $) { $return ; }
1570: }
1571:
1572: void array_index_49 ( ) {
1573:
1574: $check_ $(@expr1073743707 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1574 $, "void f() {\n    int i, k;\n    int arr[34] = {};\n    i = 1;\n    for (k = 0; k < 34 && i < 34; k++) {\n        i++;\n    }\n    arr[k];\n}" $)
1575:
|
1581:
1582: ;
1583: $if $(@expr1073743708 $!@expr1073743709 $assertEquals $(@expr1073743710 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1583 $, "" $, errout@var100 .@expr1073743711 str (@expr1073743712 ) $) $) { $return ; }
1584: }
1585:
1586: void array_index_50 ( ) {
1587: $check_ $(@expr1073743713 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1587 $, "void f(const char * str) {\n    int len = strlen(str);\n    (void)str[len - 1];\n}\nvoid g() {\n    f(\"12345678\");\n    f(\"12345\");\n}" $)
1588:
|
1593:
1594: ;
1595: $if $(@expr1073743714 $!@expr1073743715 $assertEquals $(@expr1073743716 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1595 $, "" $, errout@var100 .@expr1073743717 str (@expr1073743718 ) $) $) { $return ; }
1596: }
1597:
1598: void array_index_51 ( ) {
1599: $check_ $(@expr1073743719 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1599 $, "void f(void){\n    int k=0, dd, d[1U] = {1};\n    for (dd=d[k]; k<10; dd=d[++k]){;}\n}" $)
1600:
1601:
1602: ;
1603: $if $(@expr1073743720 $!@expr1073743721 $assertEquals $(@expr1073743722 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1603 $, "[test.cpp:3]: (error) Array 'd[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr1073743723 str (@expr1073743724 ) $) $) { $return ; }
1604: }
1605:
1606: void array_index_52 ( ) {
1607: $check_ $(@expr1073743725 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1607 $, "char f(void)\n{\n    char buf[10];\n    for(int i = 0, j= 11; i < j; ++i)\n       buf[i] = 0;\n    return buf[0];\n}" $)
1608:
|
1612:
1613: ;
1614: $if $(@expr1073743726 $!@expr1073743727 $assertEquals $(@expr1073743728 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1614 $, "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743729 str (@expr1073743730 ) $) $) { $return ; }
1615: }
1616:
1617: void array_index_53 ( ) {
1618: $check_ $(@expr1073743731 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1618 $, "double M[3][1];\n \nvoid matrix()\n{\n    for (int i=0; i < 3; i++)\n        for (int j = 0; j < 3; j++)\n             M[i][j]=0.0;\n}" $)
1619:
|
1624:
1625: ;
1626: $if $(@expr1073743732 $!@expr1073743733 $assertEquals $(@expr1073743734 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1626 $, "[test.cpp:7]: (error) Array 'M[3][1]' accessed at index M[*][2], which is out of bounds.\n" $, errout@var100 .@expr1073743735 str (@expr1073743736 ) $) $) { $return ; }
1627: }
1628:
1629: void array_index_54 ( ) {
1630: $check_ $(@expr1073743737 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1630 $, "void f() {\n    g(0);\n}\nvoid g(unsigned int x) {\n    int b[4];\n    for (unsigned int i = 0; i < 4; i += 2) {\n        b[i]   = 0;\n        b[i+1] = 0;\n    }\n}\n" $)
1631:
|
1638:
1639: ;
1640: $if $(@expr1073743738 $!@expr1073743739 $assertEquals $(@expr1073743740 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1640 $, "" $, errout@var100 .@expr1073743741 str (@expr1073743742 ) $) $) { $return ; }
1641: }
1642:
1643: void array_index_55 ( ) {
1644: $check_ $(@expr1073743743 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1644 $, "void make(const char* s, size_t len) {\n    for (size_t i = 0; i < len; ++i)\n        s[i];\n}\nvoid make(const char* s) {\n    make(s, strlen(s));\n}\nvoid f() {\n    make(\"my-utf8-payload\");\n}\nvoid f2() {\n    make(\"false\");\n}\n" $)
1645:
|
1655:
1656: ;
1657: $if $(@expr1073743744 $!@expr1073743745 $assertEquals $(@expr1073743746 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1657 $, "" $, errout@var100 .@expr1073743747 str (@expr1073743748 ) $) $) { $return ; }
1658: }
1659:
1660: void array_index_56 ( ) {
1661: $check_ $(@expr1073743749 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1661 $, "struct s {\n    int array[1];\n    int index;\n};\nvoid f(struct s foo) {\n    foo.array[foo.index++] = 1;\n    if (foo.index == 1) {}\n}\n" $)
1662:
|
1667:
1668: ;
1669: $if $(@expr1073743750 $!@expr1073743751 $assertEquals $(@expr1073743752 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1669 $, "" $, errout@var100 .@expr1073743753 str (@expr1073743754 ) $) $) { $return ; }
1670: }
1671:
1672: void array_index_57 ( ) {
1673: $check_ $(@expr1073743755 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1673 $, "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 3)\n            i = 0;\n        x = c;\n    }\n}\n" $)
1674:
|
1681:
1682: ;
1683: $if $(@expr1073743756 $!@expr1073743757 $assertEquals $(@expr1073743758 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1683 $, "" $, errout@var100 .@expr1935 str (@expr1936 ) $) $) { $return ; }
1684:
1685: $check_ $(@expr1073743761 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1685 $, "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 4)\n            i = 0;\n        x = c;\n    }\n}\n" $)
1686:
|
1693:
1694: ;
1695: $if $(@expr1073743762 $!@expr1073743763 $assertEquals $(@expr1073743764 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1695 $, "[test.cpp:6] -> [test.cpp:5]: (warning) Either the condition 'i==4' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1935 str (@expr1936 ) $) $) { $return
1696:
1697: ; }
1698: }
1699:
1700: void array_index_58 ( )
1701: {
1702: $check_ $(@expr1073743767 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1702 $, "int f(int x, int y) {\n    int a[3]= {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n" $)
1703:
|
1708:
1709: ;
1710: $if $(@expr1073743768 $!@expr1073743769 $assertEquals $(@expr1073743770 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1710 $, "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'x<2' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1073743771 str (@expr1073743772 ) $) $) { $return
1711:
1712: ; }
1713: }
1714:
1715: void array_index_59 ( )
1716: {
1717: $check_ $(@expr1073743773 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1717 $, "long f(long b) {\n  const long a[] = { 0, 1, };\n  const long c = std::size(a);\n  if (b < 0 || b >= c)\n    return 0;\n  return a[b];\n}\n" $)
1718:
|
1722:
1723: ;
1724: $if $(@expr1073743774 $!@expr1073743775 $assertEquals $(@expr1073743776 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1724 $, "" $, errout@var100 .@expr1073743777 str (@expr1073743778 ) $) $) { $return ; }
1725: }
1726:
1727: void array_index_60 ( )
1728: {
1729: checkP (@expr1073743779 "#define CKR(B) if (!(B)) { return -1; }\nint f(int i) {\n  const int A[3] = {};\n  CKR(i < 3);\n  if (i > 0)\n      i = A[i];\n  return i;\n}\n"
1730:
|
1735:
1736: ) ;
1737: $if $(@expr1073743780 $!@expr1073743781 $assertEquals $(@expr1073743782 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1737 $, "" $, errout@var100 .@expr1959 str (@expr1960 ) $) $) { $return ; }
1738:
1739: checkP (@expr1073743785 "#define ASSERT(expression, action) if (expression) {action;}\nint array[5];\nvoid func (int index) {\n    ASSERT(index > 5, return);\n    array[index]++;\n}\n"
1740:
|
1743:
1744: ) ;
1745: $if $(@expr1073743786 $!@expr1073743787 $assertEquals $(@expr1073743788 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1745 $, "[test.cpp:4] -> [test.cpp:5]: (warning) Either the condition 'index>5' is redundant or the array 'array[5]' is accessed at index 5, which is out of bounds.\n" $, errout@var100 .@expr1959 str (@expr1960 ) $) $) { $return
1746:
1747: ; }
1748: }
1749:
1750: void array_index_61 ( )
1751: {
1752: $check_ $(@expr1073743791 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1752 $, "int f(int i) {\n  const int M[] = { 0, 1, 2, 3 };\n  if (i > 4)\n      return -1;\n  if (i < 0 || i == std::size(M))\n    return 0; \n  return M[i];\n}\n" $)
1753:
|
1758:
1759: ;
1760: $if $(@expr1073743792 $!@expr1073743793 $assertEquals $(@expr1073743794 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1760 $, "" $, errout@var100 .@expr1971 str (@expr1972 ) $) $) { $return ; }
1761:
1762: $check_ $(@expr1073743797 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1762 $, "struct S { enum E { e0 }; };\nconst S::E M[4] = { S::E:e0, S::E:e0, S::E:e0, S::E:e0 };\nint f(int i) {\n  if (i > std::size(M) + 1)\n	  return -1;\n  if (i < 0 || i >= std::size(M))\n	  return 0;\n  return M[i]; \n}\n" $)
1763:
|
1769:
1770: ;
1771: $if $(@expr1073743798 $!@expr1073743799 $assertEquals $(@expr1073743800 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1771 $, "" $, errout@var100 .@expr1971 str (@expr1972 ) $) $) { $return ; }
1772: }
1773:
1774: void array_index_62 ( )
1775: {
1776: $check_ $(@expr1073743803 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1776 $, "struct X {\n    static int GetSize() {return 11;}\n};\nchar f() {\n    char buf[10]= {0};\n    for(int i = 0; i < X::GetSize(); ++i) \n       buf[i] = 0;\n    return buf[0];\n}\n" $)
1777:
|
1783:
1784: ;
1785: $if $(@expr1073743804 $!@expr1073743805 $assertEquals $(@expr1073743806 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1785 $, "[test.cpp:7]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1073743807 str (@expr1073743808 ) $) $) { $return
1786: ; }
1787: }
1788:
1789: void array_index_63 ( )
1790: {
1791: $check_ $(@expr1073743809 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1791 $, "int b[4];\nvoid f(int i) {\n    if (i >= 0 && i < sizeof(b) / sizeof(*(b)))\n        b[i] = 0;\n    if (i >= 0 && i < sizeof(b) / sizeof((b)[0]))\n        b[i] = 0;\n}\n" $)
1792:
|
1796:
1797: ;
1798: $if $(@expr1073743810 $!@expr1073743811 $assertEquals $(@expr1073743812 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1798 $, "" $, errout@var100 .@expr1073743813 str (@expr1073743814 ) $) $) { $return ; }
1799: }
1800:
1801: void array_index_64 ( )
1802: {
1803: $check_ $(@expr1073743815 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1803 $, "struct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(10);\n}\n" $)
1804:
|
1809:
1810: ;
1811: $if $(@expr1073743816 $!@expr1073743817 $assertEquals $(@expr1073743818 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1811 $, "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr1995 str (@expr1996 ) $) $) { $return ; }
1812:
1813: $check_ $(@expr1073743821 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1813 $, "int i = 10;\nstruct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(i);\n}\n" $)
1814:
|
1820:
1821: ;
1822: $todoAssertEquals $(@expr1073743822 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1822 $, "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" $, "" $, errout@var100 .@expr1995 str (@expr1996 ) $) ;
1823: }
1824:
1825: void array_index_multidim ( ) {
1826: $check_ $(@expr1073743825 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1826 $, "void f()\n{\n  char a[2][2];\n  a[1][1] = 'a';\n}" $)
1827:
1828:
1829:
1830: ;
1831: $if $(@expr1073743826 $!@expr1073743827 $assertEquals $(@expr1073743828 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1831 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1832:
1833: $check_ $(@expr1073743831 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1833 $, "void f()\n{\n  char a[2][2][2];\n  a[1][1][1] = 'a';\n}" $)
1834:
1835:
1836:
1837: ;
1838: $if $(@expr1073743832 $!@expr1073743833 $assertEquals $(@expr1073743834 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1838 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1839:
1840: $check_ $(@expr1073743837 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1840 $, "void f()\n{\n  char a[2][2];\n  a[2][1] = 'a';\n}" $)
1841:
1842:
1843:
1844: ;
1845: $if $(@expr1073743838 $!@expr1073743839 $assertEquals $(@expr1073743840 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1845 $, "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[2][1], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1846:
1847: $check_ $(@expr1073743843 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1847 $, "void f()\n{\n  char a[2][2];\n  a[1][2] = 'a';\n}" $)
1848:
1849:
1850:
1851: ;
1852: $if $(@expr1073743844 $!@expr1073743845 $assertEquals $(@expr1073743846 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1852 $, "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[1][2], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1853:
1854: $check_ $(@expr1073743849 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1854 $, "void f()\n{\n  char a[2][2][2];\n  a[2][1][1] = 'a';\n}" $)
1855:
1856:
1857:
1858: ;
1859: $if $(@expr1073743850 $!@expr1073743851 $assertEquals $(@expr1073743852 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1859 $, "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[2][1][1], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1860:
1861: $check_ $(@expr1073743855 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1861 $, "void f()\n{\n  char a[2][2][2];\n  a[1][2][1] = 'a';\n}" $)
1862:
1863:
1864:
1865: ;
1866: $if $(@expr1073743856 $!@expr1073743857 $assertEquals $(@expr1073743858 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1866 $, "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][2][1], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1867:
1868: $check_ $(@expr1073743861 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1868 $, "void f()\n{\n  char a[2][2][2][2];\n  a[1][2][1][1] = 'a';\n}" $)
1869:
1870:
1871:
1872: ;
1873: $if $(@expr1073743862 $!@expr1073743863 $assertEquals $(@expr1073743864 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1873 $, "[test.cpp:4]: (error) Array 'a[2][2][2][2]' accessed at index a[1][2][1][1], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1874:
1875: $check_ $(@expr1073743867 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1875 $, "void f()\n{\n  char a[2][2][2];\n  a[1][1][2] = 'a';\n}" $)
1876:
1877:
1878:
1879: ;
1880: $if $(@expr1073743868 $!@expr1073743869 $assertEquals $(@expr1073743870 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1880 $, "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][1][2], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1881:
1882: $check_ $(@expr1073743873 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1882 $, "void f()\n{\n  char a[10][10][10];\n  a[2*3][4*3][2] = 'a';\n}" $)
1883:
1884:
1885:
1886: ;
1887: $if $(@expr1073743874 $!@expr1073743875 $assertEquals $(@expr1073743876 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1887 $, "[test.cpp:4]: (error) Array 'a[10][10][10]' accessed at index a[6][12][2], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1888:
1889: $check_ $(@expr1073743879 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1889 $, "void f() {\n  char a[10][10][10];\n  a[6][40][10] = 'a';\n}" $)
1890:
1891:
1892: ;
1893: $if $(@expr1073743880 $!@expr1073743881 $assertEquals $(@expr1073743882 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1893 $, "[test.cpp:3]: (error) Array 'a[10][10][10]' accessed at index a[6][40][10], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1894:
1895: $check_ $(@expr1073743885 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1895 $, "void f() {\n  char a[1][1][1];\n  a[2][2][2] = 'a';\n}" $)
1896:
1897:
1898: ;
1899: $if $(@expr1073743886 $!@expr1073743887 $assertEquals $(@expr1073743888 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1899 $, "[test.cpp:3]: (error) Array 'a[1][1][1]' accessed at index a[2][2][2], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1900:
1901: $check_ $(@expr1073743891 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1901 $, "void f() {\n  char a[6][6][6];\n  a[6][6][2] = 'a';\n}" $)
1902:
1903:
1904: ;
1905: $if $(@expr1073743892 $!@expr1073743893 $assertEquals $(@expr1073743894 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1905 $, "[test.cpp:3]: (error) Array 'a[6][6][6]' accessed at index a[6][6][2], which is out of bounds.\n" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1906:
1907: $check_ $(@expr1073743897 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1907 $, "void f() {\n  int a[2][2];\n  p = &a[2][0];\n}" $)
1908:
1909:
1910: ;
1911: $if $(@expr1073743898 $!@expr1073743899 $assertEquals $(@expr1073743900 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1911 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1912:
1913:
1914: $check_ $(@expr1073743903 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1914 $, "void f()\n{\n  int a[2][countof(x)] = {{1,2},{3,4}};\n  a[0][0] = 0;\n}" $)
1915:
1916:
1917:
1918: ;
1919: $if $(@expr1073743904 $!@expr1073743905 $assertEquals $(@expr1073743906 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1919 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1920:
1921: $check_ $(@expr1073743909 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1921 $, "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}" $)
1922:
|
1939:
1940: ;
1941: $if $(@expr1073743910 $!@expr1073743911 $assertEquals $(@expr1073743912 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1941 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1942:
1943: {
1944: $check_ $(@expr1073743915 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1944 $, "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}" $)
1945:
|
1948:
1949: ;
1950: $if $(@expr1073743916 $!@expr1073743917 $assertEquals $(@expr1073743918 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1950 $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) $) { $return ; }
1951:
1952:
1953:
1954: $check_ $(@expr1073743921 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1954 $, "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}" $)
1955:
|
1958:
1959: ;
1960: $todoAssertEquals $(@expr1073743922 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1960 $, "error" $, "" $, errout@var100 .@expr2005 str (@expr2006 ) $) ;
1961: }
1962: }
1963:
1964: void array_index_switch_in_for ( ) {
1965: $check_ $(@expr1073743925 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1965 $, "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 9:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}" $)
1966:
|
1979:
1980: ;
1981: $if $(@expr1073743926 $!@expr1073743927 $assertEquals $(@expr1073743928 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1981 $, "" $, errout@var100 .@expr2105 str (@expr2106 ) $) $) { $return ; }
1982:
1983: $check_ $(@expr1073743931 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1983 $, "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 8:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}" $)
1984:
|
1997:
1998: ;
1999: $todoAssertEquals $(@expr1073743932 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 1999 $, "[test.cpp:12]: (error) Array index out of bounds.\n" $, "" $, errout@var100 .@expr2105 str (@expr2106 ) $) ;
2000: }
2001:
2002: void array_index_for_in_for ( ) {
2003: $check_ $(@expr1073743935 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2003 $, "void f() {\n    int a[5];\n    for (int i = 0; i < 10; ++i) {\n        for (int j = i; j < 5; ++j) {\n            a[i] = 0;\n        }\n    }\n}" $)
2004:
|
2009:
2010: ;
2011: $if $(@expr1073743936 $!@expr1073743937 $assertEquals $(@expr1073743938 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2011 $, "" $, errout@var100 .@expr1073743939 str (@expr1073743940 ) $) $) { $return ; }
2012: }
2013:
2014: void array_index_bounds ( ) {
2015:
2016: $check_ $(@expr1073743941 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2016 $, "int a[10];\nvoid f(int i) {\n  if (i >= 0 && i < 10) {}\n  a[i] = 1;\n}" $)
2017:
2018:
2019:
2020: ;
2021: $if $(@expr1073743942 $!@expr1073743943 $assertEquals $(@expr1073743944 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2021 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i<10' is redundant or the array 'a[10]' is accessed at index 10, which is out of bounds.\n[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i>=0' is redundant or the array 'a[10]' is accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1073743945 str (@expr1073743946 ) $) $) { $return
2022:
2023: ; }
2024: }
2025:
2026: void array_index_calculation ( ) {
2027:
2028: $check_ $(@expr1073743947 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2028 $, "void f()\n{\n    char data[8];\n    for (int i = 19; i < 36; ++i) {\n        data[i/2] = 0;\n    }\n}" $)
2029:
|
2033:
2034: ;
2035: $if $(@expr1073743948 $!@expr1073743949 $assertEquals $(@expr1073743950 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2035 $, "[test.cpp:5]: (error) Array 'data[8]' accessed at index 17, which is out of bounds.\n" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2036:
2037:
2038: $check_ $(@expr1073743953 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2038 $, "void f()\n{\n    char arr[5];\n    for (int i = 0; i < 5; ++i) {\n        arr[i + 7] = 0;\n    }\n}" $)
2039:
|
2043:
2044: ;
2045: $if $(@expr1073743954 $!@expr1073743955 $assertEquals $(@expr1073743956 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2045 $, "[test.cpp:5]: (error) Array 'arr[5]' accessed at index 11, which is out of bounds.\n" $, errout@var100 .@expr2127 str (@expr2128 ) $) $) { $return ; }
2046: }
2047:
2048: void array_index_negative1 ( ) {
2049:
2050: $check_ $(@expr1073743959 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2050 $, "void f()\n{\n    char data[8];\n    data[-1] = 0;\n}" $)
2051:
2052:
2053:
2054: ;
2055: $if $(@expr1073743960 $!@expr1073743961 $assertEquals $(@expr1073743962 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2055 $, "[test.cpp:4]: (error) Array 'data[8]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr2139 str (@expr2140 ) $) $) { $return ; }
2056:
2057: $check_ $(@expr1073743965 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2057 $, "void f()\n{\n    char data[8][4];\n    data[5][-1] = 0;\n}" $)
2058:
2059:
2060:
2061: ;
2062: $if $(@expr1073743966 $!@expr1073743967 $assertEquals $(@expr1073743968 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2062 $, "[test.cpp:4]: (error) Array 'data[8][4]' accessed at index data[*][-1], which is out of bounds.\n" $, errout@var100 .@expr2139 str (@expr2140 ) $) $) { $return ; }
2063:
2064:
2065: $check_ $(@expr1073743971 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2065 $, "void foo(char *p)\n{\n    p[-1] = 0;\n}" $)
2066:
2067:
2068: ;
2069: $if $(@expr1073743972 $!@expr1073743973 $assertEquals $(@expr1073743974 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2069 $, "" $, errout@var100 .@expr2139 str (@expr2140 ) $) $) { $return ; }
2070:
2071: $check_ $(@expr1073743977 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2071 $, "void foo()\n{\n    char s[] = \"abc\";\n    char *p = s + strlen(s);\n    if (p[-1]);\n}" $)
2072:
|
2075:
2076: ;
2077: $if $(@expr1073743978 $!@expr1073743979 $assertEquals $(@expr1073743980 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2077 $, "" $, errout@var100 .@expr2139 str (@expr2140 ) $) $) { $return ; }
2078:
2079:
2080: $check_ $(@expr1073743983 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2080 $, "int f(const std::map<int, std::map<int,int> > &m)\n{\n    return m[0][-1];\n}" $)
2081:
2082:
2083: ;
2084: $if $(@expr1073743984 $!@expr1073743985 $assertEquals $(@expr1073743986 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2084 $, "" $, errout@var100 .@expr2139 str (@expr2140 ) $) $) { $return ; }
2085: }
2086:
2087: void array_index_negative2 ( ) {
2088: $check_ $(@expr1073743989 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2088 $, "struct TEST { char a[10]; };\nvoid foo() {\n    TEST test;\n    test.a[-1] = 3;\n}" $)
2089:
2090:
2091:
2092: ;
2093: $if $(@expr1073743990 $!@expr1073743991 $assertEquals $(@expr1073743992 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2093 $, "[test.cpp:4]: (error) Array 'test.a[10]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr1073743993 str (@expr1073743994 ) $) $) { $return ; }
2094: }
2095:
2096: void array_index_negative3 ( ) {
2097: $check_ $(@expr1073743995 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2097 $, "int f(int i) {\n    int p[2] = {0, 0};\n    if(i >= 2)\n        return 0;\n    else if(i == 0)\n        return 0;\n    return p[i - 1];\n}\nvoid g(int i) {\n    if( i == 0 )\n        return f(i);\n}" $)
2098:
|
2107:
2108: ;
2109: $if $(@expr1073743996 $!@expr1073743997 $assertEquals $(@expr1073743998 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2109 $, "" $, errout@var100 .@expr1073743999 str (@expr1073744000 ) $) $) { $return ; }
2110: }
2111:
2112: void array_index_negative4 ( )
2113: {
2114: $check_ $(@expr1073744001 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2114 $, "void f(void) {\n    int buf[64]={};\n    int i;\n    for(i=0; i <16; ++i){}\n    for(; i < 24; ++i){ buf[i] = buf[i-16];}\n}\n" $)
2115:
|
2118:
2119: ;
2120: $if $(@expr1073744002 $!@expr1073744003 $assertEquals $(@expr1073744004 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2120 $, "" $, errout@var100 .@expr1073744005 str (@expr1073744006 ) $) $) { $return ; }
2121: }
2122:
2123: void array_index_negative5 ( )
2124: {
2125: $check_ $(@expr1073744007 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2125 $, "int i;\nstd::vector<int> v;\nbool f() {\n    if (i != 0) {\n        if (v.begin() != v.end()) {\n            if (i < 0)\n                return false;\n            const int a[4] = { 0, 1, 2, 3 };\n            return a[i - 1] > 0;\n        }\n    }\n    return false;\n}\n" $)
2126:
|
2136:
2137: ;
2138: $if $(@expr1073744008 $!@expr1073744009 $assertEquals $(@expr1073744010 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2138 $, "" $, errout@var100 .@expr1073744011 str (@expr1073744012 ) $) $) { $return ; }
2139: }
2140:
2141: void array_index_for_decr ( ) {
2142: $check_ $(@expr1073744013 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2142 $, "void f()\n{\n    char data[8];\n    for (int i = 10; i > 0; --i) {\n        data[i] = 0;\n    }\n}" $)
2143:
|
2147:
2148: ;
2149: $if $(@expr1073744014 $!@expr1073744015 $assertEquals $(@expr1073744016 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2149 $, "[test.cpp:5]: (error) Array 'data[8]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2193 str (@expr2194 ) $) $) { $return ; }
2150:
2151: $check_ $(@expr1073744019 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2151 $, "void f()\n{\n    char val[5];\n    for (unsigned int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}" $)
2152:
|
2156:
2157: ;
2158: $if $(@expr1073744020 $!@expr1073744021 $assertEquals $(@expr1073744022 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2158 $, "" $, errout@var100 .@expr2193 str (@expr2194 ) $) $) { $return ; }
2159:
2160: $check_ $(@expr1073744025 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2160 $, "void f()\n{\n    char val[5];\n    for (int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}" $)
2161:
|
2165:
2166: ;
2167: $if $(@expr1073744026 $!@expr1073744027 $assertEquals $(@expr1073744028 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2167 $, "[test.cpp:5]: (error) Array 'val[5]' accessed at index -9994, which is out of bounds.\n[test.cpp:5]: (error) Array 'val[5]' accessed at index -9995, which is out of bounds.\n" $, errout@var100 .@expr2193 str (@expr2194 ) $) $) { $return
2168: ; }
2169: }
2170:
2171:
2172: void array_index_varnames ( ) {
2173: $check_ $(@expr1073744031 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2173 $, "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[3] = 0;\n    a.b.data[2] = 0;\n}" $)
2174:
|
2183:
2184: ;
2185: $if $(@expr1073744032 $!@expr1073744033 $assertEquals $(@expr1073744034 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2185 $, "" $, errout@var100 .@expr2211 str (@expr2212 ) $) $) { $return ; }
2186:
2187:
2188: $check_ $(@expr1073744037 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2188 $, "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[4] = 0;\n    a.b.data[3] = 0;\n}" $)
2189:
|
2198:
2199: ;
2200: $if $(@expr1073744038 $!@expr1073744039 $assertEquals $(@expr1073744040 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2200 $, "[test.cpp:10]: (error) Array 'a.data[4]' accessed at index 4, which is out of bounds.\n[test.cpp:11]: (error) Array 'a.b.data[3]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr2211 str (@expr2212 ) $) $) { $return
2201: ; }
2202: }
2203:
2204: void array_index_for_andand_oror ( ) {
2205:
2206:
2207: $check_ $(@expr1073744043 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2207 $, "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 && y; x++) {\n        data[x] = 0;\n    }\n}" $)
2208:
|
2212:
2213: ;
2214: $if $(@expr1073744044 $!@expr1073744045 $assertEquals $(@expr1073744046 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2214 $, "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n" $, errout@var100 .@expr2223 str (@expr2224 ) $) $) { $return ; }
2215:
2216: $check_ $(@expr1073744049 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2216 $, "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 || y; x++) {\n        data[x] = 0;\n    }\n}" $)
2217:
|
2221:
2222: ;
2223: $if $(@expr1073744050 $!@expr1073744051 $assertEquals $(@expr1073744052 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2223 $, "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n" $, errout@var100 .@expr2223 str (@expr2224 ) $) $) { $return ; }
2224:
2225: $check_ $(@expr1073744055 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2225 $, "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x <= 10 && y; x++) {\n        data[x] = 0;\n    }\n}" $)
2226:
|
2230:
2231: ;
2232: $if $(@expr1073744056 $!@expr1073744057 $assertEquals $(@expr1073744058 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2232 $, "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2223 str (@expr2224 ) $) $) { $return ; }
2233:
2234: $check_ $(@expr1073744061 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2234 $, "void f() {\n    char data[2];\n    int x;\n    for (x = 0; y && x <= 10; x++) {\n        data[x] = 0;\n    }\n}" $)
2235:
|
2239:
2240: ;
2241: $if $(@expr1073744062 $!@expr1073744063 $assertEquals $(@expr1073744064 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2241 $, "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2223 str (@expr2224 ) $) $) { $return ; }
2242:
2243: $check_ $(@expr1073744067 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2243 $, "int f() {\n    int i, c;\n    char* words[100] = {0};\n    g(words);\n    for (i = c = 0; (i < N) && (c < 1); i++) {\n        if (words[i][0] == '|')\n            c++;\n     }\n    return c;\n}" , "test.c" $)
2244:
|
2251:
2252: ;
2253: $if $(@expr1073744068 $!@expr1073744069 $assertEquals $(@expr1073744070 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2253 $, "" $, errout@var100 .@expr2223 str (@expr2224 ) $) $) { $return ; }
2254: }
2255:
2256: void array_index_for_continue ( ) {
2257:
2258: $check_ $(@expr1073744073 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2258 $, "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (i == 0) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}" $)
2259:
|
2265:
2266: ;
2267: $if $(@expr1073744074 $!@expr1073744075 $assertEquals $(@expr1073744076 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2267 $, "" $, errout@var100 .@expr2253 str (@expr2254 ) $) $) { $return ; }
2268:
2269:
2270: $check_ $(@expr1073744079 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2270 $, "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (maybe()) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}" $)
2271:
|
2277:
2278: ;
2279: $if $(@expr1073744080 $!@expr1073744081 $assertEquals $(@expr1073744082 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2279 $, "[test.cpp:7]: (error) Array 'a[2]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr2253 str (@expr2254 ) $) $) { $return ; }
2280: }
2281:
2282: void array_index_for ( ) {
2283:
2284: $check_ $(@expr1073744085 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2284 $, "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i==1) {\n        }\n        a[i] = 0;\n    }\n}" $)
2285:
|
2290:
2291: ;
2292: $if $(@expr1073744086 $!@expr1073744087 $assertEquals $(@expr1073744088 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2292 $, "[test.cpp:6]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" $, errout@var100 .@expr2265 str (@expr2266 ) $) $) { $return ; }
2293:
2294:
2295: $check_ $(@expr1073744091 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2295 $, "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i<10) {\n        } else {\n            a[i-10] = 0;\n        }\n    }\n}" $)
2296:
|
2302:
2303: ;
2304: $if $(@expr1073744092 $!@expr1073744093 $assertEquals $(@expr1073744094 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2304 $, "" $, errout@var100 .@expr2265 str (@expr2266 ) $) $) { $return ; }
2305:
2306:
2307:
2308: $check_ $(@expr1073744097 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2308 $, "void f() {\n    int a[10];\n    for (int i = 10; maybe(); dostuff()) {\n        a[i] = 0;\n    }\n}" $)
2309:
|
2312:
2313: ;
2314: $if $(@expr1073744098 $!@expr1073744099 $assertEquals $(@expr1073744100 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2314 $, "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2265 str (@expr2266 ) $) $) { $return ; }
2315:
2316:
2317: $check_ $(@expr1073744103 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2317 $, "char f() {\n    char buf[10];\n    const bool a = true, b = true;\n    for (int i = 0; i < (a && b ? 11 : 10); ++i)\n        buf[i] = 0;\n    return buf[0];\n}\n" $)
2318:
|
2322:
2323: ;
2324: $if $(@expr1073744104 $!@expr1073744105 $assertEquals $(@expr1073744106 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2324 $, "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2265 str (@expr2266 ) $) $) { $return ; }
2325: }
2326:
2327: void array_index_for_neq ( ) {
2328:
2329: $check_ $(@expr1073744109 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2329 $, "void f() {\n    int a[5];\n    for (int i = 0; i != 10; ++i) {\n        a[i] = 0;\n    }\n}" $)
2330:
|
2333:
2334: ;
2335: $if $(@expr1073744110 $!@expr1073744111 $assertEquals $(@expr1073744112 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2335 $, "[test.cpp:4]: (error) Array 'a[5]' accessed at index 9, which is out of bounds.\n" $, errout@var100 .@expr1073744113 str (@expr1073744114 ) $) $) { $return
2336: ; }
2337: }
2338:
2339: void array_index_for_question ( ) {
2340:
2341: $check_ $(@expr1073744115 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2341 $, "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i == 0 ? 0 : a[i-1];\n    }\n}" $)
2342:
|
2345:
2346: ;
2347: $if $(@expr1073744116 $!@expr1073744117 $assertEquals $(@expr1073744118 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2347 $, "" $, errout@var100 .@expr2295 str (@expr2296 ) $) $) { $return ; }
2348:
2349: $check_ $(@expr1073744121 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2349 $, "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        some_condition ? 0 : a[i-1];\n    }\n}" $)
2350:
|
2353:
2354: ;
2355: $todoAssertEquals $(@expr1073744122 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2355 $, "[test.cpp:4]: (error) Array index -1 is out of bounds.\n" $, "" $, errout@var100 .@expr2295 str (@expr2296 ) $) ;
2356:
2357: $check_ $(@expr1073744125 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2357 $, "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i==0 ? 0 : a[i-1];\n        a[i-1] = 0;\n    }\n}" $)
2358:
|
2362:
2363: ;
2364: $if $(@expr1073744126 $!@expr1073744127 $assertEquals $(@expr1073744128 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2364 $, "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr2295 str (@expr2296 ) $) $) { $return ; }
2365: }
2366:
2367: void array_index_for_varid0 ( ) {
2368: $check_ $(@expr1073744131 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2368 $, "void f() {\n   char a[10];\n   for (i=0; i<10; i++);\n}" $)
2369:
2370:
2371: ;
2372: $if $(@expr1073744132 $!@expr1073744133 $assertEquals $(@expr1073744134 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2372 $, "" $, errout@var100 .@expr1073744135 str (@expr1073744136 ) $) $) { $return ; }
2373: }
2374:
2375: void array_index_vla_for ( ) {
2376:
2377: $check_ $(@expr1073744137 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2377 $, "void f(int len) {\n    char a[len];\n    for (int i=0; i<7; ++i) {\n        a[0] = 0;\n    }\n}" $)
2378:
|
2381:
2382: ;
2383: $if $(@expr1073744138 $!@expr1073744139 $assertEquals $(@expr1073744140 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2383 $, "" $, errout@var100 .@expr1073744141 str (@expr1073744142 ) $) $) { $return ; }
2384: }
2385:
2386: void array_index_extern ( ) {
2387:
2388: $check_ $(@expr1073744143 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2388 $, "extern char arr[15];\nchar arr[15] = \"abc\";" $)
2389: ;
2390: $if $(@expr1073744144 $!@expr1073744145 $assertEquals $(@expr1073744146 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2390 $, "" $, errout@var100 .@expr1073744147 str (@expr1073744148 ) $) $) { $return ; }
2391: }
2392:
2393: void array_index_cast ( ) {
2394:
2395:
2396:
2397: $check_ $(@expr1073744149 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2397 $, "void f1(char *buf) {\n    buf[4] = 0;\n}\nvoid f2() {\n    int x[2];\n    f1(x);\n}" $)
2398:
|
2402:
2403: ;
2404: $if $(@expr1073744150 $!@expr1073744151 $assertEquals $(@expr1073744152 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2404 $, "" $, errout@var100 .@expr2329 str (@expr2330 ) $) $) { $return ; }
2405:
2406:
2407: $check_ $(@expr1073744155 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2407 $, "void f1(const char buf[]) {\n    char c = buf[4];\n}\nvoid f2() {\n    char x[2];\n    f1(x);\n}" $)
2408:
|
2412:
2413: ;
2414: $todoAssertEquals $(@expr1073744156 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2414 $, "[test.cpp:6] -> [test.cpp:2]: (error) Array 'x[2]' accessed at index 4, which is out of bounds.\n" $, "" $, errout@var100 .@expr2329 str (@expr2330 ) $)
2415:
2416: ;
2417: }
2418:
2419: void array_index_string_literal ( ) {
2420: $check_ $(@expr1073744159 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2420 $, "void f() {\n    const char *str = \"abc\";\n    bar(str[10]);\n}" $)
2421:
2422:
2423: ;
2424: $if $(@expr1073744160 $!@expr1073744161 $assertEquals $(@expr1073744162 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2424 $, "[test.cpp:3]: (error) Array 'str[4]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2425:
2426: $check_ $(@expr1073744165 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2426 $, "void f()\n{\n    const char *str = \"abc\";\n    bar(str[4]);\n}" $)
2427:
2428:
2429:
2430: ;
2431: $if $(@expr1073744166 $!@expr1073744167 $assertEquals $(@expr1073744168 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2431 $, "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2432:
2433: $check_ $(@expr1073744171 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2433 $, "void f()\n{\n    const char *str = \"abc\";\n    bar(str[3]);\n}" $)
2434:
2435:
2436:
2437: ;
2438: $if $(@expr1073744172 $!@expr1073744173 $assertEquals $(@expr1073744174 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2438 $, "" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2439:
2440: $check_ $(@expr1073744177 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2440 $, "void f()\n{\n    const char *str = \"a\tc\";\n    bar(str[4]);\n}" $)
2441:
2442:
2443:
2444: ;
2445: $if $(@expr1073744178 $!@expr1073744179 $assertEquals $(@expr1073744180 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2445 $, "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2446:
2447: $check_ $(@expr1073744183 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2447 $, "void f() {\n    const char *name = \"\";\n    if ( name[0] == 'U' ? name[1] : 0) {}\n}" $)
2448:
2449:
2450: ;
2451: $if $(@expr1073744184 $!@expr1073744185 $assertEquals $(@expr1073744186 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2451 $, "" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2452:
2453: $check_ $(@expr1073744189 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2453 $, "int main(int argc, char **argv) {\n    char str[6] = \"\\0\";\n    unsigned short port = 65535;\n    snprintf(str, sizeof(str), \"%hu\", port);\n}" , settings0@var102 , "test.c" $)
2454:
2455:
2456:
2457: ;
2458: $if $(@expr1073744190 $!@expr1073744191 $assertEquals $(@expr1073744192 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2458 $, "" $, errout@var100 .@expr2339 str (@expr2340 ) $) $) { $return ; }
2459: }
2460:
2461: void array_index_same_struct_and_var_name ( ) {
2462:
2463: $check_ $(@expr1073744195 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2463 $, "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name;\n}" $)
2464:
|
2469:
2470: ;
2471: $if $(@expr1073744196 $!@expr1073744197 $assertEquals $(@expr1073744198 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2471 $, "" $, errout@var100 .@expr2375 str (@expr2376 ) $) $) { $return ; }
2472:
2473:
2474: $check_ $(@expr1073744201 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2474 $, "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name[22] = 123;\n}" $)
2475:
|
2480:
2481: ;
2482: $if $(@expr1073744202 $!@expr1073744203 $assertEquals $(@expr1073744204 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2482 $, "[test.cpp:7]: (error) Array 'tt->name[21]' accessed at index 22, which is out of bounds.\n" $, errout@var100 .@expr2375 str (@expr2376 ) $) $) { $return ; }
2483: }
2484:
2485: void array_index_valueflow ( ) {
2486: $check_ $(@expr1073744207 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2486 $, "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    if (i==10) {}\n}" $)
2487:
2488:
2489:
2490: ;
2491: $if $(@expr1073744208 $!@expr1073744209 $assertEquals $(@expr1073744210 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2491 $, "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'i==10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2492:
2493: $check_ $(@expr1073744213 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2493 $, "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    switch (i) {\n    case 10: break;\n    }\n}" $)
2494:
|
2498:
2499: ;
2500: $if $(@expr1073744214 $!@expr1073744215 $assertEquals $(@expr1073744216 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2500 $, "[test.cpp:5] -> [test.cpp:3]: (warning) Either the switch case 'case 10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2501:
2502: $check_ $(@expr1073744219 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2502 $, "void f() {\n    char str[3];\n    str[((unsigned char)3) - 1] = 0;\n}" , "test.cpp" $)
2503:
2504:
2505: ;
2506: $if $(@expr1073744220 $!@expr1073744221 $assertEquals $(@expr1073744222 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2506 $, "" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2507:
2508: $check_ $(@expr1073744225 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2508 $, "void f() {\n    char *str[3];\n    do_something(&str[0][5]);\n}" , "test.cpp" $)
2509:
2510:
2511: ;
2512: $if $(@expr1073744226 $!@expr1073744227 $assertEquals $(@expr1073744228 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2512 $, "" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2513:
2514: $check_ $(@expr1073744231 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2514 $, "class X { static const int x[100]; };\nconst int X::x[100] = {0};" $)
2515: ;
2516: $if $(@expr1073744232 $!@expr1073744233 $assertEquals $(@expr1073744234 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2516 $, "" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2517:
2518: $check_ $(@expr1073744237 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2518 $, "namespace { class X { static const int x[100]; };\nconst int X::x[100] = {0}; }" $)
2519: ;
2520: $if $(@expr1073744238 $!@expr1073744239 $assertEquals $(@expr1073744240 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2520 $, "" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2521:
2522: $check_ $(@expr1073744243 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2522 $, "class ActorSprite { static ImageSet * targetCursorImages[2][10]; };\nImageSet *ActorSprite::targetCursorImages[2][10];" $)
2523: ;
2524: $if $(@expr1073744244 $!@expr1073744245 $assertEquals $(@expr1073744246 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2524 $, "" $, errout@var100 .@expr2387 str (@expr2388 ) $) $) { $return ; }
2525:
2526: }
2527:
2528: void array_index_valueflow_pointer ( ) {
2529: $check_ $(@expr1073744249 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2529 $, "void f() {\n  int a[10];\n  int *p = a;\n  p[20] = 0;\n}" $)
2530:
2531:
2532:
2533: ;
2534: $todoAssertEquals $(@expr1073744250 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2534 $, "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n" $, "" $, errout@var100 .@expr2427 str (@expr2428 ) $) ;
2535:
2536: {
2537:
2538: $check_ $(@expr1073744253 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2538 $, "void f() {\n  int a[10];\n  int *p = a;\n  p[10] = 0;\n}" $)
2539:
2540:
2541:
2542: ;
2543: $todoAssertEquals $(@expr1073744254 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2543 $, "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" $, "" $, errout@var100 .@expr2427 str (@expr2428 ) $) ;
2544:
2545: $check_ $(@expr1073744257 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2545 $, "void f() {\n  int a[10];\n  int *p = a;\n  dostuff(&p[10]);\n}" $)
2546:
2547:
2548:
2549: ;
2550: $if $(@expr1073744258 $!@expr1073744259 $assertEquals $(@expr1073744260 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2550 $, "" $, errout@var100 .@expr2427 str (@expr2428 ) $) $) { $return ; }
2551: }
2552:
2553: $check_ $(@expr1073744263 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2553 $, "void f() {\n  int a[X];\n  int *p = a;\n  p[20] = 0;\n}" $)
2554:
2555:
2556:
2557: ;
2558: $if $(@expr1073744264 $!@expr1073744265 $assertEquals $(@expr1073744266 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2558 $, "" $, errout@var100 .@expr2427 str (@expr2428 ) $) $) { $return ; }
2559:
2560: $check_ $(@expr1073744269 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2560 $, "void f() {\n  int a[2];\n  char *p = (char *)a;\n  p[4] = 0;\n}" $)
2561:
2562:
2563:
2564: ;
2565: $if $(@expr1073744270 $!@expr1073744271 $assertEquals $(@expr1073744272 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2565 $, "" $, errout@var100 .@expr2427 str (@expr2428 ) $) $) { $return ; }
2566: }
2567:
2568: void array_index_function_parameter ( ) {
2569: $check_ $(@expr1073744275 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2569 $, "void f(char a[10]) {\n  a[20] = 0;\n}" $)
2570:
2571: ;
2572: $if $(@expr1073744276 $!@expr1073744277 $assertEquals $(@expr1073744278 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2572 $, "[test.cpp:2]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr2455 str (@expr2456 ) $) $) { $return ; }
2573:
2574: $check_ $(@expr1073744281 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2574 $, "void f(char a[10]) {\n  a += 4;\n  a[-1] = 0;\n}" $)
2575:
2576:
2577: ;
2578: $todoAssertEquals $(@expr1073744282 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2578 $, "" $, "[test.cpp:3]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" $, errout@var100 .@expr2455 str (@expr2456 ) $) ;
2579: }
2580:
2581: void array_index_enum_array ( ) {
2582: $check_ $(@expr1073744285 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2582 $, "enum E : unsigned int { e1, e2 };\nvoid f() {\n    E arrE[] = { e1, e2 };\n    arrE[sizeof(arrE)] = e1;\n}" $)
2583:
2584:
2585:
2586: ;
2587: $if $(@expr1073744286 $!@expr1073744287 $assertEquals $(@expr1073744288 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2587 $, "[test.cpp:4]: (error) Array 'arrE[2]' accessed at index 8, which is out of bounds.\n" $, errout@var100 .@expr1073744289 str (@expr1073744290 ) $) $) { $return ; }
2588: }
2589:
2590: void array_index_container ( ) {
2591: $check_ $(@expr1073744291 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2591 $, "constexpr int blockLen = 10;\nvoid foo(std::array<uint8_t, blockLen * 2>& a) {\n    a[2] = 2;\n}" $)
2592:
2593:
2594: ;
2595: $if $(@expr1073744292 $!@expr1073744293 $assertEquals $(@expr1073744294 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2595 $, "" $, errout@var100 .@expr1073744295 str (@expr1073744296 ) $) $) { $return ; }
2596: }
2597:
2598: void array_index_two_for_loops ( ) {
2599: $check_ $(@expr1073744297 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2599 $, "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    if (i < 50)\n        sum -= val[i];\n}" $)
2600:
|
2607:
2608: ;
2609: $if $(@expr1073744298 $!@expr1073744299 $assertEquals $(@expr1073744300 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2609 $, "" $, errout@var100 .@expr2477 str (@expr2478 ) $) $) { $return ; }
2610:
2611: $check_ $(@expr1073744303 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2611 $, "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50;) {\n        sum -= val[i];\n        break;\n    }\n}" $)
2612:
|
2621:
2622: ;
2623: $if $(@expr1073744304 $!@expr1073744305 $assertEquals $(@expr1073744306 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2623 $, "" $, errout@var100 .@expr2477 str (@expr2478 ) $) $) { $return ; }
2624:
2625: $check_ $(@expr1073744309 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2625 $, "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50; i++)\n        sum -= val[i];\n}" $)
2626:
|
2633:
2634: ;
2635: $if $(@expr1073744310 $!@expr1073744311 $assertEquals $(@expr1073744312 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2635 $, "" $, errout@var100 .@expr2477 str (@expr2478 ) $) $) { $return ; }
2636: }
2637:
2638: void array_index_new ( ) {
2639: $check_ $(@expr1073744315 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2639 $, "void f() {\n    int* z = new int;\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" $)
2640:
|
2643:
2644: ;
2645: $if $(@expr1073744316 $!@expr1073744317 $assertEquals $(@expr1073744318 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2645 $, "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2646:
2647: $check_ $(@expr1073744321 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2647 $, "void f() {\n    int* z = new int(1);\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" $)
2648:
|
2651:
2652: ;
2653: $if $(@expr1073744322 $!@expr1073744323 $assertEquals $(@expr1073744324 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2653 $, "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2654:
2655: $check_ $(@expr1073744327 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2655 $, "void f() {\n    int* z = new int{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" $)
2656:
|
2659:
2660: ;
2661: $if $(@expr1073744328 $!@expr1073744329 $assertEquals $(@expr1073744330 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2661 $, "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2662:
2663: $check_ $(@expr1073744333 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2663 $, "void f() {\n    int* z = new int[5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" $)
2664:
|
2667:
2668: ;
2669: $if $(@expr1073744334 $!@expr1073744335 $assertEquals $(@expr1073744336 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2669 $, "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2670:
2671: $check_ $(@expr1073744339 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2671 $, "void g() {\n    int* z = new int[5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = 1;\n    delete[] z;\n}\n" $)
2672:
|
2675:
2676: ;
2677: $if $(@expr1073744340 $!@expr1073744341 $assertEquals $(@expr1073744342 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2677 $, "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2678:
2679: $check_ $(@expr1073744345 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2679 $, "void h() {\n    int** z = new int* [5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" $)
2680:
|
2683:
2684: ;
2685: $if $(@expr1073744346 $!@expr1073744347 $assertEquals $(@expr1073744348 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2685 $, "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2686:
2687: $check_ $(@expr1073744351 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2687 $, "void h() {\n    int** z = new int* [5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" $)
2688:
|
2691:
2692: ;
2693: $if $(@expr1073744352 $!@expr1073744353 $assertEquals $(@expr1073744354 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2693 $, "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2694:
2695: $check_ $(@expr1073744357 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2695 $, "void h() {\n    int** z = new int* [5]{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" $)
2696:
|
2699:
2700: ;
2701: $if $(@expr1073744358 $!@expr1073744359 $assertEquals $(@expr1073744360 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2701 $, "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2495 str (@expr2496 ) $) $) { $return ; }
2702: }
2703:
2704: void buffer_overrun_2_struct ( ) {
2705: $check_ $(@expr1073744363 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2705 $, "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC *abc)\n{\n    strcpy( abc->str, \"abcdef\" );\n}" $)
2706:
|
2712:
2713: ;
2714: $if $(@expr1073744364 $!@expr1073744365 $assertEquals $(@expr1073744366 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2714 $, "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n" $, errout@var100 .@expr2543 str (@expr2544 ) $) $) { $return ; }
2715:
2716: $check_ $(@expr1073744369 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2716 $, "struct ABC\n{\n    char str[5];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    strcpy( abc.str, \"abcdef\" );\n}" $)
2717:
|
2724:
2725: ;
2726: $if $(@expr1073744370 $!@expr1073744371 $assertEquals $(@expr1073744372 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2726 $, "[test.cpp:9]: (error) Buffer is accessed out of bounds: abc.str\n" $, errout@var100 .@expr2543 str (@expr2544 ) $) $) { $return ; }
2727:
2728: $check_ $(@expr1073744375 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2728 $, "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC &abc)\n{\n    strcpy( abc.str, \"abcdef\" );\n}" $)
2729:
|
2735:
2736: ;
2737: $if $(@expr1073744376 $!@expr1073744377 $assertEquals $(@expr1073744378 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2737 $, "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc.str\n" $, errout@var100 .@expr2543 str (@expr2544 ) $) $) { $return ; }
2738:
2739: $check_ $(@expr1073744381 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2739 $, "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    } abc;\n    strcpy( abc.str, \"abcdef\" );\n}" $)
2740:
|
2745:
2746: ;
2747: $if $(@expr1073744382 $!@expr1073744383 $assertEquals $(@expr1073744384 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2747 $, "[test.cpp:7]: (error) Buffer is accessed out of bounds: abc.str\n" $, errout@var100 .@expr2543 str (@expr2544 ) $) $) { $return ; }
2748:
2749: $check_ $(@expr1073744387 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2749 $, "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    };\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    strcpy( abc->str, \"abcdef\" );\n    free(abc);\n}" $)
2750:
|
2757:
2758: ;
2759: $if $(@expr1073744388 $!@expr1073744389 $assertEquals $(@expr1073744390 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2759 $, "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n" $, errout@var100 .@expr2543 str (@expr2544 ) $) $) { $return ; }
2760: }
2761:
2762:
2763: void buffer_overrun_3 ( ) {
2764: $check_ $(@expr1073744393 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2764 $, "int a[10];\n\nvoid foo()\n{\n    int i;\n    for (i = 0; i <= 10; ++i)\n        a[i] = 0;\n}" $)
2765:
|
2770:
2771: ;
2772: $if $(@expr1073744394 $!@expr1073744395 $assertEquals $(@expr1073744396 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2772 $, "[test.cpp:7]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
2773:
2774: $check_ $(@expr1073744399 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2774 $, "struct S { int b; } static e[1];\nint f() { return e[1].b; }\n" $)
2775: ;
2776: $if $(@expr1073744400 $!@expr1073744401 $assertEquals $(@expr1073744402 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2776 $, "[test.cpp:2]: (error) Array 'e[1]' accessed at index 1, which is out of bounds.\n" $, errout@var100 .@expr2573 str (@expr2574 ) $) $) { $return ; }
2777: }
2778:
2779:
2780: void buffer_overrun_4 ( ) {
2781: $check_ $(@expr1073744405 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2781 $, "void foo()\n{\n    const char *p[2];\n    for (int i = 0; i < 8; ++i)\n        p[i] = 0;\n}" $)
2782:
|
2785:
2786: ;
2787: $if $(@expr1073744406 $!@expr1073744407 $assertEquals $(@expr1073744408 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2787 $, "[test.cpp:5]: (error) Array 'p[2]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2585 str (@expr2586 ) $) $) { $return ; }
2788:
2789:
2790: $check_ $(@expr1073744411 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2790 $, "void foo(int x, int y)\n{\n    const char *p[2];\n    const char *s = y + p[1];\n    p[1] = 0;\n}" $)
2791:
|
2794:
2795: ;
2796: $if $(@expr1073744412 $!@expr1073744413 $assertEquals $(@expr1073744414 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2796 $, "" $, errout@var100 .@expr2585 str (@expr2586 ) $) $) { $return ; }
2797:
2798:
2799: $check_ $(@expr1073744417 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2799 $, "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,20);\n}" $)
2800:
|
2806:
2807: ;
2808: $todoAssertEquals $(@expr1073744418 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2808 $, "[test.cpp:8] -> [test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr2585 str (@expr2586 ) $) ;
2809:
2810: $check_ $(@expr1073744421 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2810 $, "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,3);\n}\n" $)
2811:
|
2817:
2818: ;
2819: $if $(@expr1073744422 $!@expr1073744423 $assertEquals $(@expr1073744424 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2819 $, "" $, errout@var100 .@expr2585 str (@expr2586 ) $) $) { $return ; }
2820: }
2821:
2822: void buffer_overrun_5 ( ) {
2823: $check_ $(@expr1073744427 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2823 $, "void f()\n{\n    char n[5];\n    sprintf(n, \"d\");\n    printf(\"hello!\");\n}" $)
2824:
|
2827:
2828: ;
2829: $if $(@expr1073744428 $!@expr1073744429 $assertEquals $(@expr1073744430 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2829 $, "" $, errout@var100 .@expr1073744431 str (@expr1073744432 ) $) $) { $return ; }
2830: }
2831:
2832: void buffer_overrun_6 ( ) {
2833: $check_ $(@expr1073744433 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2833 $, "void f()\n{\n   char n[5];\n   strcat(n, \"abc\");\n   strcat(n, \"def\");\n}" $)
2834:
|
2837:
2838: ;
2839: $todoAssertEquals $(@expr1073744434 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2839 $, "[test.cpp:5]: (error) Buffer is accessed out of bounds: n\n" $, "" $, errout@var100 .@expr1073744435 str (@expr1073744436 ) $) ;
2840: }
2841:
2842: void buffer_overrun_7 ( ) {
2843:
2844: $check_ $(@expr1073744437 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2844 $, "void f()\n{\n    char a[2];\n    strcpy(a, \"a\\0\");\n}" $)
2845:
2846:
2847:
2848: ;
2849: $if $(@expr1073744438 $!@expr1073744439 $assertEquals $(@expr1073744440 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2849 $, "" $, errout@var100 .@expr1073744441 str (@expr1073744442 ) $) $) { $return ; }
2850: }
2851:
2852: void buffer_overrun_8 ( ) {
2853:
2854: $check_ $(@expr1073744443 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2854 $, "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = i + 100)\n    {\n        a[i] = 0;\n    }\n}" $)
2855:
|
2860:
2861: ;
2862: $if $(@expr1073744444 $!@expr1073744445 $assertEquals $(@expr1073744446 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2862 $, "" $, errout@var100 .@expr2623 str (@expr2624 ) $) $) { $return ; }
2863:
2864: $check_ $(@expr1073744449 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2864 $, "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = 100 + i)\n    {\n        a[i] = 0;\n    }\n}" $)
2865:
|
2870:
2871: ;
2872: $if $(@expr1073744450 $!@expr1073744451 $assertEquals $(@expr1073744452 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2872 $, "" $, errout@var100 .@expr2623 str (@expr2624 ) $) $) { $return ; }
2873: }
2874:
2875: void buffer_overrun_9 ( ) {
2876:
2877: $check_ $(@expr1073744455 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2877 $, "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; )\n    {\n        a[i] = 0;\n        i += 100;\n    }\n}" $)
2878:
|
2884:
2885: ;
2886: $if $(@expr1073744456 $!@expr1073744457 $assertEquals $(@expr1073744458 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2886 $, "" $, errout@var100 .@expr1073744459 str (@expr1073744460 ) $) $) { $return ; }
2887: }
2888:
2889: void buffer_overrun_10 ( ) {
2890:
2891: $check_ $(@expr1073744461 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2891 $, "void f()\n{\n    char a[4];\n    for (int i = 0; i < 4; i++)\n    {\n        char b = a[i];\n    }\n}" $)
2892:
|
2897:
2898: ;
2899: $if $(@expr1073744462 $!@expr1073744463 $assertEquals $(@expr1073744464 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2899 $, "" $, errout@var100 .@expr1073744465 str (@expr1073744466 ) $) $) { $return ; }
2900: }
2901:
2902: void buffer_overrun_11 ( ) {
2903: $check_ $(@expr1073744467 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2903 $, "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=i+0.1)\n    {\n    }\n}" $)
2904:
|
2908:
2909: ;
2910: $if $(@expr1073744468 $!@expr1073744469 $assertEquals $(@expr1073744470 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2910 $, "" $, errout@var100 .@expr2647 str (@expr2648 ) $) $) { $return ; }
2911:
2912: $check_ $(@expr1073744473 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2912 $, "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=0.1+i)\n    {\n    }\n}" $)
2913:
|
2917:
2918: ;
2919: $if $(@expr1073744474 $!@expr1073744475 $assertEquals $(@expr1073744476 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2919 $, "" $, errout@var100 .@expr2647 str (@expr2648 ) $) $) { $return ; }
2920: }
2921:
2922: void buffer_overrun_15 ( ) {
2923: $check_ $(@expr1073744479 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2923 $, "class A : public B {\n    char val[2];\n    void f(int i, int ii);\n};\nvoid A::f(int i, int ii)\n{\n    strcpy(val, \"ab\") ;\n}" $)
2924:
|
2929:
2930: ;
2931: $if $(@expr1073744480 $!@expr1073744481 $assertEquals $(@expr1073744482 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2931 $, "[test.cpp:7]: (error) Buffer is accessed out of bounds: val\n" $, errout@var100 .@expr1073744483 str (@expr1073744484 ) $) $) { $return ; }
2932: }
2933:
2934: void buffer_overrun_16 ( ) {
2935:
2936: $check_ $(@expr1073744485 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2936 $, "void f() {\n    struct Foo foo[5];\n    memset(foo, 0, sizeof(foo));\n}" $)
2937:
2938:
2939: ;
2940: $if $(@expr1073744486 $!@expr1073744487 $assertEquals $(@expr1073744488 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2940 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2941:
2942: $check_ $(@expr1073744491 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2942 $, "void f() {\n    gchar x[3];\n    strcpy(x, \"12\");\n}" $)
2943:
2944:
2945: ;
2946: $if $(@expr1073744492 $!@expr1073744493 $assertEquals $(@expr1073744494 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2946 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2947:
2948: $check_ $(@expr1073744497 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2948 $, "extern char a[10];\nvoid f() {\n    char b[25] = {0};\n    std::memcpy(b, a, 10);\n}" $)
2949:
2950:
2951:
2952: ;
2953: $if $(@expr1073744498 $!@expr1073744499 $assertEquals $(@expr1073744500 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2953 $, "" $, errout@var100 .@expr2665 str (@expr2666 ) $) $) { $return ; }
2954: }
2955:
2956: void buffer_overrun_18 ( ) {
2957: $check_ $(@expr1073744503 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2957 $, "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<6; i++) {\n        b[i] = b[i+1];\n    }\n}" $)
2958:
|
2965:
2966: ;
2967: $if $(@expr1073744504 $!@expr1073744505 $assertEquals $(@expr1073744506 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2967 $, "" $, errout@var100 .@expr2683 str (@expr2684 ) $) $) { $return ; }
2968:
2969: $check_ $(@expr1073744509 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2969 $, "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<7; i++) {\n        b[i] = b[i+1];\n    }\n}" $)
2970:
|
2977:
2978: ;
2979: $if $(@expr1073744510 $!@expr1073744511 $assertEquals $(@expr1073744512 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2979 $, "[test.cpp:8]: (error) Array 'b[7]' accessed at index 7, which is out of bounds.\n" $, errout@var100 .@expr2683 str (@expr2684 ) $) $) { $return ; }
2980: }
2981:
2982: void buffer_overrun_19 ( ) {
2983: $check_ $(@expr1073744515 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2983 $, "class A {\npublic:\n    u8 buf[10];\n    A();};\n\nA::A() {\n    memset(buf, 0, 10);\n}" $)
2984:
|
2990:
2991: ;
2992: $if $(@expr1073744516 $!@expr1073744517 $assertEquals $(@expr1073744518 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2992 $, "" $, errout@var100 .@expr1073744519 str (@expr1073744520 ) $) $) { $return ; }
2993: }
2994:
2995: void buffer_overrun_21 ( ) {
2996: $check_ $(@expr1073744521 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 2996 $, "void foo()\n{ { {\n    char dst[4];\n    const char *src = \"AAAAAAAAAAAAAAAAAAAAA\";\n    for (size_t i = 0; i <= 4; i++)\n        dst[i] = src[i];\n} } }" $)
2997:
|
3001:
3002: ;
3003: $if $(@expr1073744522 $!@expr1073744523 $assertEquals $(@expr1073744524 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3003 $, "[test.cpp:6]: (error) Array 'dst[4]' accessed at index 4, which is out of bounds.\n" $, errout@var100 .@expr1073744525 str (@expr1073744526 ) $) $) { $return ; }
3004: }
3005:
3006: void buffer_overrun_24 ( ) {
3007:
3008: $check_ $(@expr1073744527 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3008 $, "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i];\n       i++;  }\n}" $)
3009:
|
3013:
3014: ;
3015: $todoAssertEquals $(@expr1073744528 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3015 $, "error" $, "" $, errout@var100 .@expr2705 str (@expr2706 ) $) ;
3016:
3017:
3018: $check_ $(@expr1073744531 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3018 $, "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i++];\n   }\n}" $)
3019:
|
3023:
3024: ;
3025: $todoAssertEquals $(@expr1073744532 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3025 $, "error" $, "" $, errout@var100 .@expr2705 str (@expr2706 ) $) ;
3026: }
3027:
3028: void buffer_overrun_26 ( ) {
3029: $check_ $(@expr1073744535 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3029 $, "extern int split();\nvoid regress() {\n    char inbuf[1000];\n    char *f[10];\n    split(inbuf, f, 10, \"\t\t\");\n}" $)
3030:
|
3033:
3034: ;
3035:
3036: $if $(@expr1073744536 $!@expr1073744537 $assertEquals $(@expr1073744538 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3036 $, "" $, errout@var100 .@expr1073744539 str (@expr1073744540 ) $) $) { $return ; }
3037: }
3038:
3039: void buffer_overrun_27 ( ) {
3040: $check_ $(@expr1073744541 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3040 $, "void abc(struct foobar[5]);\nvoid main() {\nstruct foobar x[5];\nabc(x);\n}" $)
3041:
3042:
3043:
3044: ;
3045:
3046: $if $(@expr1073744542 $!@expr1073744543 $assertEquals $(@expr1073744544 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3046 $, "" $, errout@var100 .@expr1073744545 str (@expr1073744546 ) $) $) { $return ; }
3047: }
3048:
3049:
3050: void buffer_overrun_29 ( ) {
3051: $check_ $(@expr1073744547 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3051 $, "typedef char testChar[10];\nint main(){\n  testChar tc1 = \"\";\n  tc1[5]='a';\n}" $)
3052:
3053:
3054:
3055: ;
3056: $if $(@expr1073744548 $!@expr1073744549 $assertEquals $(@expr1073744550 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3056 $, "" $, errout@var100 .@expr1073744551 str (@expr1073744552 ) $) $) { $return ; }
3057: }
3058:
3059:
3060:
3061: void buffer_overrun_30 ( ) {
3062: $check_ $(@expr1073744553 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3062 $, "struct S { int m[9]; };\nint f(S * s) {\n    return s->m[sizeof(s->m)];\n}" $)
3063:
3064:
3065: ;
3066: $if $(@expr1073744554 $!@expr1073744555 $assertEquals $(@expr1073744556 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3066 $, "[test.cpp:3]: (error) Array 's->m[9]' accessed at index 36, which is out of bounds.\n" $, errout@var100 .@expr1073744557 str (@expr1073744558 ) $) $) { $return ; }
3067: }
3068:
3069: void buffer_overrun_31 ( ) {
3070: $check_ $(@expr1073744559 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3070 $, "void f(WhereInfo *pWInfo, int *aiCur) {\n  memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);\n}" $)
3071:
3072: ;
3073: $if $(@expr1073744560 $!@expr1073744561 $assertEquals $(@expr1073744562 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3073 $, "" $, errout@var100 .@expr1073744563 str (@expr1073744564 ) $) $) { $return ; }
3074: }
3075:
3076: void buffer_overrun_32 ( ) {
3077:
3078: $check_ $(@expr1073744565 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3078 $, "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[1] = \"a\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}" $)
3079:
|
3082:
3083: ;
3084: $if $(@expr1073744566 $!@expr1073744567 $assertEquals $(@expr1073744568 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3084 $, "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: dest\n" $, errout@var100 .@expr2745 str (@expr2746 ) $) $) { $return ; }
3085:
3086: $check_ $(@expr1073744571 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3086 $, "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[2] = \"ab\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}" $)
3087:
|
3091:
3092: ;
3093: $if $(@expr1073744572 $!@expr1073744573 $assertEquals $(@expr1073744574 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3093 $, "[test.cpp:6]: (error) Buffer is accessed out of bounds: dest\n" $, errout@var100 .@expr2745 str (@expr2746 ) $) $) { $return ; }
3094:
3095: $check_ $(@expr1073744577 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3095 $, "void f(void) {\n    const char src[2] = \"ab\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}" $)
3096:
|
3100:
3101: ;
3102: $if $(@expr1073744578 $!@expr1073744579 $assertEquals $(@expr1073744580 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3102 $, "[test.cpp:6]: (error) Buffer is accessed out of bounds: src\n" $, errout@var100 .@expr2745 str (@expr2746 ) $) $) { $return ; }
3103:
3104: $check_ $(@expr1073744583 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3104 $, "void f(void) {\n    const char src[1] = \"a\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}" $)
3105:
|
3108:
3109: ;
3110: $if $(@expr1073744584 $!@expr1073744585 $assertEquals $(@expr1073744586 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3110 $, "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: src\n" $, errout@var100 .@expr2745 str (@expr2746 ) $) $) { $return ; }
3111: }
3112:
3113: void buffer_overrun_33 ( ) {
3114: $check_ $(@expr1073744589 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3114 $, "int f() {\n   int z[16];\n   for (int i=0; i<20; i++)\n      for (int j=0; j<20; j++)\n          z[i] = 0;\n   return z[0];\n}" $)
3115:
|
3119:
3120: ;
3121: $if $(@expr1073744590 $!@expr1073744591 $assertEquals $(@expr1073744592 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3121 $, "[test.cpp:5]: (error) Array 'z[16]' accessed at index 19, which is out of bounds.\n" $, errout@var100 .@expr1073744593 str (@expr1073744594 ) $) $) { $return ; }
3122: }
3123:
3124:
3125: void buffer_overrun_34 ( )
3126: {
3127: $check_ $(@expr1073744595 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3127 $, "struct S {\n    std::vector<int> v;\n    int a[15] = {};\n    int g() const { return v.size(); }\n    int f(int i) const {\n        if (i < 0 || i >= g())\n            return 0;\n        return a[i];\n    }\n};\n" $)
3128:
|
3135:
3136: ;
3137: $if $(@expr1073744596 $!@expr1073744597 $assertEquals $(@expr1073744598 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3137 $, "" $, errout@var100 .@expr1073744599 str (@expr1073744600 ) $) $) { $return ; }
3138: }
3139:
3140: void buffer_overrun_errorpath ( ) {
3141: setMultiline (@expr1073744601 ) ;
3142: settings0@var102 .@expr1073744602 templateLocation@var139 =@expr1073744603 "{file}:{line}:note:{info}" ;
3143:
3144: $check_ $(@expr1073744604 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3144 $, "void f() {\n    char *p = malloc(10);\n    memset(p, 0, 20);\n}" $)
3145:
3146:
3147: ;
3148: $if $(@expr1073744605 $!@expr1073744606 $assertEquals $(@expr1073744607 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3148 $, "test.cpp:3:error:Buffer is accessed out of bounds: p\ntest.cpp:2:note:Assign p, buffer with size 10\ntest.cpp:3:note:Buffer overrun\n" $, errout@var100 .@expr1073744608 str (@expr1073744609 ) $) $) { $return
3149:
3150: ; }
3151: }
3152:
3153: void buffer_overrun_bailoutIfSwitch ( ) {
3154:
3155: $check_ $(@expr1073744610 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3155 $, "void f1(char *s) {\n    if (x) s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" $)
3156:
|
3161:
3162: ;
3163: $if $(@expr1073744611 $!@expr1073744612 $assertEquals $(@expr1073744613 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3163 $, "" $, errout@var100 .@expr2790 str (@expr2791 ) $) $) { $return ; }
3164:
3165:
3166: $check_ $(@expr1073744616 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3166 $, "void f1(char *s) {\n    if (x) return;\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" $)
3167:
|
3173:
3174: ;
3175: $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3175 $, "" $, errout@var100 .@expr2790 str (@expr2791 ) $) $) { $return ; }
3176:
3177:
3178: $check_ $(@expr1073744622 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3178 $, "void f1(char *s) {\n    if (x) { }\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" $)
3179:
|
3185:
3186: ;
3187: $todoAssertEquals $(@expr1073744623 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3187 $, "[test.cpp:8] -> [test.cpp:3]: (error) Array 'a[10]' accessed at index 100, which is out of bounds.\n" $, "" $, errout@var100 .@expr2790 str (@expr2791 ) $) ;
3188: }
3189:
3190: void buffer_overrun_function_array_argument ( ) {
3191: setMultiline (@expr1073744626 ) ;
3192:
3193: $check_ $(@expr1073744627 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3193 $, "void f(char a[10]);\nvoid g() {\n    char a[2];\n    f(a);\n}" $)
3194:
3195:
3196:
3197: ;
3198: $if $(@expr1073744628 $!@expr1073744629 $assertEquals $(@expr1073744630 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3198 $, "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return
3199:
3200:
3201:
3202: ; }
3203:
3204: $check_ $(@expr1073744633 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3204 $, "void f(float a[10][3]);\nvoid g() {\n    float a[2][3];\n    f(a);\n}" $)
3205:
3206:
3207:
3208: ;
3209: $if $(@expr1073744634 $!@expr1073744635 $assertEquals $(@expr1073744636 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3209 $, "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return
3210:
3211:
3212:
3213: ; }
3214:
3215: $check_ $(@expr1073744639 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3215 $, "void f(int a[20]);\nvoid g() {\n    int a[2];\n    f(a);\n}" $)
3216:
3217:
3218:
3219: ;
3220: $if $(@expr1073744640 $!@expr1073744641 $assertEquals $(@expr1073744642 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3220 $, "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return
3221:
3222:
3223:
3224: ; }
3225:
3226: $check_ $(@expr1073744645 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3226 $, "void f(int a[]) {\n  switch (2) {\n    case 1:\n      a[1] = 1;\n    }\n}\nint a[1];\nf(a);\n" $)
3227:
|
3233:
3234: ;
3235: $if $(@expr1073744646 $!@expr1073744647 $assertEquals $(@expr1073744648 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3235 $, "" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return ; }
3236:
3237: $check_ $(@expr1073744651 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3237 $, "void CreateLeafTex(unsigned char buf[256][2048][4]);\nvoid foo() {\n  unsigned char(* tree)[2048][4] = new unsigned char[256][2048][4];\n  CreateLeafTex(tree);\n}" $)
3238:
3239:
3240:
3241: ;
3242: $if $(@expr1073744652 $!@expr1073744653 $assertEquals $(@expr1073744654 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3242 $, "" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return ; }
3243:
3244: $check_ $(@expr1073744657 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3244 $, "void f(int a[10]) {\n    int i = 0;\n    for (i = 0; i < 10; i++)\n        a[i] = i * 2;\n}\nvoid g() {\n    int b[5];\n    f(b);\n    return 0;\n}\n" $)
3245:
|
3252:
3253: ;
3254: $if $(@expr1073744658 $!@expr1073744659 $assertEquals $(@expr1073744660 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3254 $, "test.cpp:8:warning:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:8:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:7:note:Passing buffer 'b' to function that is declared here\ntest.cpp:8:note:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\n" $, errout@var100 .@expr2807 str (@expr2808 ) $) $) { $return
3255:
|
3258:
3259: ; }
3260: }
3261:
3262: void possible_buffer_overrun_1 ( ) {
3263: $check_ $(@expr1073744663 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3263 $, "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}" $)
3264:
|
3268:
3269: ;
3270: $todoAssertEquals $(@expr1073744664 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3270 $, "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n" $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) ;
3271:
3272: $check_ $(@expr1073744667 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3272 $, "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}" $)
3273:
|
3277:
3278: ;
3279: $if $(@expr1073744668 $!@expr1073744669 $assertEquals $(@expr1073744670 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3279 $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) $) { $return ; }
3280:
3281: $check_ $(@expr1073744673 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3281 $, "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcat(data, src);\n}" $)
3282:
3283:
3284: ;
3285: $todoAssertEquals $(@expr1073744674 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3285 $, "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n" $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) ;
3286:
3287: $check_ $(@expr1073744677 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3287 $, "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcat(data, src);\n}" $)
3288:
3289:
3290: ;
3291: $if $(@expr1073744678 $!@expr1073744679 $assertEquals $(@expr1073744680 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3291 $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) $) { $return ; }
3292:
3293: $check_ $(@expr1073744683 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3293 $, "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}" $)
3294:
|
3298:
3299: ;
3300: $todoAssertEquals $(@expr1073744684 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3300 $, "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n" $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) ;
3301:
3302: $check_ $(@expr1073744687 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3302 $, "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}" $)
3303:
|
3307:
3308: ;
3309: $if $(@expr1073744688 $!@expr1073744689 $assertEquals $(@expr1073744690 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3309 $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) $) { $return ; }
3310:
3311: $check_ $(@expr1073744693 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3311 $, "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcpy(data, src);\n}" $)
3312:
3313:
3314: ;
3315: $todoAssertEquals $(@expr1073744694 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3315 $, "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n" $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) ;
3316:
3317: $check_ $(@expr1073744697 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3317 $, "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcpy(data, src);\n}" $)
3318:
3319:
3320: ;
3321: $if $(@expr1073744698 $!@expr1073744699 $assertEquals $(@expr1073744700 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3321 $, "" $, errout@var100 .@expr2841 str (@expr2842 ) $) $) { $return ; }
3322: }
3323:
3324: void buffer_overrun_readSizeFromCfg ( ) {
3325: Settings settings@var140 ;
3326: const char xmldata@var141 [@expr1073744703 235 ] =@expr1073744704 "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
3327:
|
3335:
3336: ;
3337: tinyxml2 ::@expr1073744705 XMLDocument doc@var142 ;
3338: doc@var142 .@expr1073744706 Parse (@expr1073744707 xmldata@var141 , sizeof (@expr1073744708 xmldata@var141 ) ) ;
3339: settings@var140 .@expr1073744709 library@var143 .@expr1073744710 load (@expr1073744711 doc@var142 ) ;
3340:
3341:
3342: $check_ $(@expr1073744712 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3342 $, "void f() {\n  u8 str[256];\n  mystrcpy(str, \"abcd\");\n}" , settings@var140 $)
3343:
3344:
3345: ;
3346: $if $(@expr1073744713 $!@expr1073744714 $assertEquals $(@expr1073744715 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3346 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3347:
3348: $check_ $(@expr1073744718 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3348 $, "void f() {\n  u8 str[2];\n  mystrcpy(str, \"abcd\");\n}" , settings@var140 $)
3349:
3350:
3351: ;
3352: $if $(@expr1073744719 $!@expr1073744720 $assertEquals $(@expr1073744721 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3352 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3353:
3354:
3355: $check_ $(@expr1073744724 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3355 $, "void f() {\n    struct { u8 str[256]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}" , settings@var140 $)
3356:
3357:
3358: ;
3359: $if $(@expr1073744725 $!@expr1073744726 $assertEquals $(@expr1073744727 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3359 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3360:
3361: $check_ $(@expr1073744730 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3361 $, "void f() {\n    struct { u8 str[2]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}" , settings@var140 $)
3362:
3363:
3364: ;
3365: $if $(@expr1073744731 $!@expr1073744732 $assertEquals $(@expr1073744733 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3365 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: ms.str\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3366: }
3367:
3368: void valueflow_string ( ) {
3369: $check_ $(@expr1073744736 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3369 $, "char f() {\n  const char *x = s;\n  if (cond) x = \"abcde\";\n  return x[20];\n}" $)
3370:
3371:
3372:
3373: ;
3374: $if $(@expr1073744737 $!@expr1073744738 $assertEquals $(@expr1073744739 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3374 $, "[test.cpp:4]: (error) Array 'x[6]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr1073744740 str (@expr1073744741 ) $) $) { $return ; }
3375: }
3376:
3377: void pointer_out_of_bounds_1 ( ) {
3378:
3379:
3380: $check_ $(@expr1073744742 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3380 $, "void f() {\n    char a[10];\n    char *p = a + 100;\n}" $)
3381:
3382:
3383: ;
3384: $if $(@expr1073744743 $!@expr1073744744 $assertEquals $(@expr1073744745 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3384 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3385:
3386: $check_ $(@expr1073744748 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3386 $, "char *f() {\n    char a[10];\n    return a + 100;\n}" $)
3387:
3388:
3389: ;
3390: $if $(@expr1073744749 $!@expr1073744750 $assertEquals $(@expr1073744751 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3390 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3391:
3392: $check_ $(@expr1073744754 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3392 $, "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x+i);\n}" $)
3393:
3394:
3395:
3396: ;
3397: $if $(@expr1073744755 $!@expr1073744756 $assertEquals $(@expr1073744757 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3397 $, "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x+i' is out of bounds.\n" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3398:
3399: $check_ $(@expr1073744760 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3399 $, "void f(int i) {\n    char x[10];\n    if (i == -1) {}\n    dostuff(x+i);\n}" $)
3400:
3401:
3402:
3403: ;
3404: $if $(@expr1073744761 $!@expr1073744762 $assertEquals $(@expr1073744763 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3404 $, "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is -1 the pointer arithmetic 'x+i' is out of bounds.\n" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3405:
3406: $check_ $(@expr1073744766 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3406 $, "void f() {\n  wchar_t buf[64];\n  p = (unsigned char *) buf + sizeof (buf);\n}" , "6350.c" $)
3407:
3408:
3409: ;
3410: $if $(@expr1073744767 $!@expr1073744768 $assertEquals $(@expr1073744769 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3410 $, "" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3411:
3412: $check_ $(@expr1073744772 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3412 $, "int f() {\n    const char   d[] = \"0123456789\";\n    char *cp = d + 3;\n    return cp - d;\n}" $)
3413:
3414:
3415:
3416: ;
3417: $if $(@expr1073744773 $!@expr1073744774 $assertEquals $(@expr1073744775 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3417 $, "" $, errout@var100 .@expr2922 str (@expr2923 ) $) $) { $return ; }
3418: }
3419:
3420: void pointer_out_of_bounds_2 ( ) {
3421: $check_ $(@expr1073744778 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3421 $, "void f() {\n    char *p = malloc(10);\n    p += 100;\n    free(p);}" $)
3422:
3423:
3424:
3425: ;
3426: $todoAssertEquals $(@expr1073744779 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3426 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'p+100' is out of bounds.\n" $, "" $, errout@var100 .@expr2956 str (@expr2957 ) $) ;
3427:
3428: $check_ $(@expr1073744782 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3428 $, "void f() {\n    char *p = malloc(10);\n    p += 10;\n    *p = 0;\n    free(p);}" $)
3429:
|
3432:
3433: ;
3434: $todoAssertEquals $(@expr1073744783 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3434 $, "[test.cpp:4]: (error) p is out of bounds.\n" $, "" $, errout@var100 .@expr2956 str (@expr2957 ) $) ;
3435:
3436: $check_ $(@expr1073744786 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3436 $, "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p -= 10;\n    *p = 0;\n    free(p);}" $)
3437:
|
3441:
3442: ;
3443: $if $(@expr1073744787 $!@expr1073744788 $assertEquals $(@expr1073744789 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3443 $, "" $, errout@var100 .@expr2956 str (@expr2957 ) $) $) { $return ; }
3444:
3445: $check_ $(@expr1073744792 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3445 $, "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p = p - 1;\n    *p = 0;\n    free(p);}" $)
3446:
|
3450:
3451: ;
3452: $if $(@expr1073744793 $!@expr1073744794 $assertEquals $(@expr1073744795 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3452 $, "" $, errout@var100 .@expr2956 str (@expr2957 ) $) $) { $return ; }
3453: }
3454:
3455: void pointer_out_of_bounds_3 ( ) {
3456: $check_ $(@expr1073744798 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3456 $, "struct S { int a[10]; };\nvoid f(struct S *s) {\n    int *p = s->a + 100;\n}" $)
3457:
3458:
3459: ;
3460: $if $(@expr1073744799 $!@expr1073744800 $assertEquals $(@expr1073744801 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3460 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 's->a+100' is out of bounds.\n" $, errout@var100 .@expr2978 str (@expr2979 ) $) $) { $return ; }
3461:
3462: $check_ $(@expr1073744804 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3462 $, "template <class T> class Vector\n{\npublic:\n    void test() const;\n    T* data();\n};\ntemplate <class T>\nvoid Vector<T>::test() const\n{\n    const T* PDat = data();\n    const T* P2 = PDat + 1;\n    const T* P1 = P2 - 1;\n}\nVector<std::array<long, 2>> Foo;\n" $)
3463:
|
3474:
3475: ;
3476: $if $(@expr1073744805 $!@expr1073744806 $assertEquals $(@expr1073744807 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3476 $, "" $, errout@var100 .@expr2978 str (@expr2979 ) $) $) { $return ; }
3477: }
3478:
3479: void pointer_out_of_bounds_4 ( ) {
3480: $check_ $(@expr1073744810 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3480 $, "const char* f() {\n    g(\"Hello\" + 6);\n}" $)
3481:
3482: ;
3483: $if $(@expr1073744811 $!@expr1073744812 $assertEquals $(@expr1073744813 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3483 $, "" $, errout@var100 .@expr2990 str (@expr2991 ) $) $) { $return ; }
3484:
3485: $check_ $(@expr1073744816 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3485 $, "const char* f() {\n    g(\"Hello\" + 7);\n}" $)
3486:
3487: ;
3488: $if $(@expr1073744817 $!@expr1073744818 $assertEquals $(@expr1073744819 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3488 $, "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic '\"Hello\"+7' is out of bounds.\n" $, errout@var100 .@expr2990 str (@expr2991 ) $) $) { $return ; }
3489:
3490: $check_ $(@expr1073744822 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3490 $, "const char16_t* f() {\n    g(u\"Hello\" + 6);\n}" $)
3491:
3492: ;
3493: $if $(@expr1073744823 $!@expr1073744824 $assertEquals $(@expr1073744825 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3493 $, "" $, errout@var100 .@expr2990 str (@expr2991 ) $) $) { $return ; }
3494:
3495: $check_ $(@expr1073744828 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3495 $, "const char16_t* f() {\n    g(u\"Hello\" + 7);\n}" $)
3496:
3497: ;
3498: $if $(@expr1073744829 $!@expr1073744830 $assertEquals $(@expr1073744831 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3498 $, "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic 'u\"Hello\"+7' is out of bounds.\n" $, errout@var100 .@expr2990 str (@expr2991 ) $) $) { $return ; }
3499:
3500: $check_ $(@expr1073744834 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3500 $, "void f() {\n    int val = 5;\n    std::string hi = \"hi\" + val;\n    std::cout << hi << std::endl;\n}\n" $)
3501:
3502:
3503:
3504: ;
3505: $if $(@expr1073744835 $!@expr1073744836 $assertEquals $(@expr1073744837 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3505 $, "[test.cpp:2] -> [test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic '\"hi\"+val' is out of bounds.\n" $, errout@var100 .@expr2990 str (@expr2991 ) $) $) { $return ; }
3506: }
3507:
3508:
3509: void pointer_out_of_bounds_sub ( ) {
3510:
3511:
3512: $check_ $(@expr1073744840 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3512 $, "char *f() {\n    char x[10];\n    return x-1;\n}" $)
3513:
3514:
3515: ;
3516: $if $(@expr1073744841 $!@expr1073744842 $assertEquals $(@expr1073744843 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3516 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'x-1' is out of bounds.\n" $, errout@var100 .@expr3020 str (@expr3021 ) $) $) { $return ; }
3517:
3518: $check_ $(@expr1073744846 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3518 $, "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x-i);\n}" $)
3519:
3520:
3521:
3522: ;
3523: $if $(@expr1073744847 $!@expr1073744848 $assertEquals $(@expr1073744849 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3523 $, "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x-i' is out of bounds.\n" $, errout@var100 .@expr3020 str (@expr3021 ) $) $) { $return ; }
3524:
3525: $check_ $(@expr1073744852 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3525 $, "void f(int i) {\n    char x[10];\n    if (i == -20) {}\n    dostuff(x-i);\n}" $)
3526:
3527:
3528:
3529: ;
3530: $todoAssertEquals $(@expr1073744853 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3530 $, "[test.cpp:4]: (portability) Undefined behaviour, when 'i' is -20 the pointer arithmetic 'x-i' is out of bounds.\n" $, "" $, errout@var100 .@expr3020 str (@expr3021 ) $) ;
3531:
3532: $check_ $(@expr1073744856 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3532 $, "void f(const char *x[10]) {\n    return x-4;\n}" $)
3533:
3534: ;
3535: $if $(@expr1073744857 $!@expr1073744858 $assertEquals $(@expr1073744859 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3535 $, "" $, errout@var100 .@expr3020 str (@expr3021 ) $) $) { $return ; }
3536: }
3537:
3538: void strcat1 ( ) {
3539: $check_ $(@expr1073744862 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3539 $, "struct Foo { char a[4]; };\nvoid f() {\n  struct Foo x = {0};\n  strcat(x.a, \"aa\");\n  strcat(x.a, \"aa\");\n}" $)
3540:
|
3543:
3544: ;
3545: $todoAssertEquals $(@expr1073744863 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3545 $, "[test.cpp:5]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr1073744864 str (@expr1073744865 ) $) ;
3546: }
3547:
3548: void varid1 ( ) {
3549: $check_ $(@expr1073744866 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3549 $, "void foo()\n{\n    char str[10];\n    if (str[0])\n    {\n        char str[50];\n        str[30] = 0;\n    }\n}" $)
3550:
|
3556:
3557: ;
3558: $if $(@expr1073744867 $!@expr1073744868 $assertEquals $(@expr1073744869 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3558 $, "" $, errout@var100 .@expr1073744870 str (@expr1073744871 ) $) $) { $return ; }
3559: }
3560:
3561: void varid2 ( ) {
3562: $check_ $(@expr1073744872 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3562 $, "struct foo {\n  void bar() { return; }\n  type<> member[1];\n};" $)
3563:
3564:
3565: ;
3566: $if $(@expr1073744873 $!@expr1073744874 $assertEquals $(@expr1073744875 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3566 $, "" $, errout@var100 .@expr1073744876 str (@expr1073744877 ) $) $) { $return ; }
3567: }
3568:
3569: void assign1 ( ) {
3570: $check_ $(@expr1073744878 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3570 $, "char str[3] = {'a', 'b', 'c'};\n\nvoid foo()\n{\n    str[3] = 0;\n}" $)
3571:
|
3574:
3575: ;
3576: $if $(@expr1073744879 $!@expr1073744880 $assertEquals $(@expr1073744881 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3576 $, "[test.cpp:5]: (error) Array 'str[3]' accessed at index 3, which is out of bounds.\n" $, errout@var100 .@expr1073744882 str (@expr1073744883 ) $) $) { $return ; }
3577: }
3578:
3579: void alloc_new ( ) {
3580: $check_ $(@expr1073744884 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3580 $, "void foo()\n{\n    char *s; s = new char[10];\n    s[10] = 0;\n}" $)
3581:
3582:
3583:
3584: ;
3585: $if $(@expr1073744885 $!@expr1073744886 $assertEquals $(@expr1073744887 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3585 $, "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3586:
3587:
3588: $check_ $(@expr1073744890 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3588 $, "char f()\n{\n    int *s; s = new int[10];\n    return s[10];\n}" $)
3589:
3590:
3591:
3592: ;
3593: $if $(@expr1073744891 $!@expr1073744892 $assertEquals $(@expr1073744893 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3593 $, "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3594:
3595: $check_ $(@expr1073744896 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3595 $, "struct Fred { char c[10]; };\nchar f()\n{\n    Fred *f; f = new Fred;\n    return f->c[10];\n}" $)
3596:
|
3599:
3600: ;
3601: $if $(@expr1073744897 $!@expr1073744898 $assertEquals $(@expr1073744899 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3601 $, "[test.cpp:5]: (error) Array 'f->c[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3602:
3603: $check_ $(@expr1073744902 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3603 $, "static const size_t MAX_SIZE = UNAVAILABLE_TO_CPPCHECK;\nstruct Thing { char data[MAX_SIZE]; };\nchar f4(const Thing& t) { return !t.data[0]; }" $)
3604:
3605: ;
3606: $if $(@expr1073744903 $!@expr1073744904 $assertEquals $(@expr1073744905 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3606 $, "" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3607:
3608: $check_ $(@expr1073744908 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3608 $, "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[8] = 0;\n  delete [] buf;\n}" $)
3609:
|
3614:
3615: ;
3616: $if $(@expr1073744909 $!@expr1073744910 $assertEquals $(@expr1073744911 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3616 $, "" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3617:
3618: $check_ $(@expr1073744914 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3618 $, "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[9] = 0;\n  delete [] buf;\n}" $)
3619:
|
3624:
3625: ;
3626: $if $(@expr1073744915 $!@expr1073744916 $assertEquals $(@expr1073744917 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3626 $, "[test.cpp:6]: (error) Array 'buf[9]' accessed at index 9, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3627:
3628: $check_ $(@expr1073744920 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3628 $, "void foo()\n{\n    enum E { Size = 10 };\n    char *s; s = new char[Size];\n    s[Size] = 0;\n}" $)
3629:
|
3632:
3633: ;
3634: $if $(@expr1073744921 $!@expr1073744922 $assertEquals $(@expr1073744923 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3634 $, "[test.cpp:5]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3635:
3636: $check_ $(@expr1073744926 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3636 $, "void foo()\n{\n    enum E { ZERO };\n    E *e; e = new E[10];\n    e[10] = ZERO;\n}" $)
3637:
|
3640:
3641: ;
3642: $if $(@expr1073744927 $!@expr1073744928 $assertEquals $(@expr1073744929 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3642 $, "[test.cpp:5]: (error) Array 'e[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3064 str (@expr3065 ) $) $) { $return ; }
3643: }
3644:
3645:
3646: void alloc_malloc ( ) {
3647: $check_ $(@expr1073744932 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3647 $, "void foo()\n{\n    char *s; s = (char *)malloc(10);\n    s[10] = 0;\n}" $)
3648:
3649:
3650:
3651: ;
3652: $if $(@expr1073744933 $!@expr1073744934 $assertEquals $(@expr1073744935 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3652 $, "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3653:
3654:
3655: $check_ $(@expr1073744938 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3655 $, "void f() {\n    int *tab4 = (int *)malloc(20 * sizeof(int));\n    tab4[20] = 0;\n}" $)
3656:
3657:
3658: ;
3659: $if $(@expr1073744939 $!@expr1073744940 $assertEquals $(@expr1073744941 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3659 $, "[test.cpp:3]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3660:
3661:
3662: $check_ $(@expr1073744944 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3662 $, "void foo() {\n    char *p = (char *)malloc(10);\n    free(p);\n    p = (char *)malloc(10);\n    p[10] = 0;\n}" $)
3663:
|
3666:
3667: ;
3668: $if $(@expr1073744945 $!@expr1073744946 $assertEquals $(@expr1073744947 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3668 $, "[test.cpp:5]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3669:
3670:
3671: $check_ $(@expr1073744950 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3671 $, "void f() {\n    int *x, i;\n    x = (int *)malloc(10 * sizeof(int));\n    x[10] = 0;\n}" $)
3672:
3673:
3674:
3675: ;
3676: $if $(@expr1073744951 $!@expr1073744952 $assertEquals $(@expr1073744953 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3676 $, "[test.cpp:4]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3677:
3678: $check_ $(@expr1073744956 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3678 $, "void f() {\n  int *tab4; tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  free(tab4);\n  tab4 = malloc(21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}" $)
3679:
|
3684:
3685: ;
3686: $if $(@expr1073744957 $!@expr1073744958 $assertEquals $(@expr1073744959 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3686 $, "" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3687:
3688: $check_ $(@expr1073744962 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3688 $, "void f() {\n  int *tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  tab4 = realloc(tab4,21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}" $)
3689:
|
3693:
3694: ;
3695: $if $(@expr1073744963 $!@expr1073744964 $assertEquals $(@expr1073744965 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3695 $, "" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3696:
3697: $check_ $(@expr1073744968 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3697 $, "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(Size * 4);\n    tab4[Size] = Size;\n}" $)
3698:
3699:
3700:
3701: ;
3702: $if $(@expr1073744969 $!@expr1073744970 $assertEquals $(@expr1073744971 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3702 $, "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3703:
3704: $check_ $(@expr1073744974 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3704 $, "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(4 * Size);\n    tab4[Size] = Size;\n}" $)
3705:
3706:
3707:
3708: ;
3709: $if $(@expr1073744975 $!@expr1073744976 $assertEquals $(@expr1073744977 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3709 $, "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3710:
3711: $check_ $(@expr1073744980 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3711 $, "void f() {\n    enum E { ZERO };\n    E *tab4 = (E *)malloc(20 * sizeof(E));\n    tab4[20] = ZERO;\n}" $)
3712:
3713:
3714:
3715: ;
3716: $if $(@expr1073744981 $!@expr1073744982 $assertEquals $(@expr1073744983 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3716 $, "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3717:
3718: $check_ $(@expr1073744986 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3718 $, "void f() {\n  unsigned char **cache = malloc(32);\n  cache[i] = malloc(65536);\n  cache[i][0xFFFF] = 0;\n}" $)
3719:
3720:
3721:
3722: ;
3723: $if $(@expr1073744987 $!@expr1073744988 $assertEquals $(@expr1073744989 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3723 $, "" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3724:
3725: $check_ $(@expr1073744992 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3725 $, "void f() {\n  int **a = malloc(2 * sizeof(int*));\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}" $)
3726:
3727:
3728:
3729: ;
3730: $if $(@expr1073744993 $!@expr1073744994 $assertEquals $(@expr1073744995 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3730 $, "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3731:
3732: $check_ $(@expr1073744998 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3732 $, "void f() {\n  int **a = new int*[2];\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}" $)
3733:
3734:
3735:
3736: ;
3737: $if $(@expr1073744999 $!@expr1073745000 $assertEquals $(@expr1073745001 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3737 $, "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" $, errout@var100 .@expr3112 str (@expr3113 ) $) $) { $return ; }
3738: }
3739:
3740:
3741: void alloc_string ( ) {
3742: $check_ $(@expr1073745004 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3742 $, "void foo()\n{\n    const char *s = \"123\";\n    s[10] = 0;\n}" $)
3743:
3744:
3745:
3746: ;
3747: $if $(@expr1073745005 $!@expr1073745006 $assertEquals $(@expr1073745007 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3747 $, "[test.cpp:4]: (error) Array 's[4]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3184 str (@expr3185 ) $) $) { $return ; }
3748:
3749: $check_ $(@expr1073745010 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3749 $, "void foo()\n{\n    char *s; s = \"\";\n    s[10] = 0;\n}" $)
3750:
3751:
3752:
3753: ;
3754: $if $(@expr1073745011 $!@expr1073745012 $assertEquals $(@expr1073745013 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3754 $, "[test.cpp:4]: (error) Array 's[1]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3184 str (@expr3185 ) $) $) { $return ; }
3755:
3756: $check_ $(@expr1073745016 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3756 $, "void foo() {\n    const char *s = \"\";\n    s = y();\n    s[10] = 0;\n}" $)
3757:
3758:
3759:
3760: ;
3761: $if $(@expr1073745017 $!@expr1073745018 $assertEquals $(@expr1073745019 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3761 $, "" $, errout@var100 .@expr3184 str (@expr3185 ) $) $) { $return ; }
3762:
3763: $check_ $(@expr1073745022 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3763 $, "void foo()\n{\n    std::string s = \"123\";\n    s.resize(100);\n    s[10] = 0;\n}" $)
3764:
|
3767:
3768: ;
3769: $if $(@expr1073745023 $!@expr1073745024 $assertEquals $(@expr1073745025 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3769 $, "" $, errout@var100 .@expr3184 str (@expr3185 ) $) $) { $return ; }
3770: }
3771:
3772:
3773: void alloc_alloca ( ) {
3774: $check_ $(@expr1073745028 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3774 $, "void foo()\n{\n    char *s = (char *)alloca(10);\n    s[10] = 0;\n}" $)
3775:
3776:
3777:
3778: ;
3779: $todoAssertEquals $(@expr1073745029 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3779 $, "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" $, "" $, errout@var100 .@expr1073745030 str (@expr1073745031 ) $) ;
3780: }
3781:
|
3855:
3856: void minsize_argvalue ( ) {
3857: Settings settings@var144 ;
3858: const char xmldata@var145 [@expr1073745033 214 ] =@expr1073745034 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
3859:
|
3867:
3868: ;
3869: tinyxml2 ::@expr1073745035 XMLDocument doc@var146 ;
3870: doc@var146 .@expr1073745036 Parse (@expr1073745037 xmldata@var145 , sizeof (@expr1073745038 xmldata@var145 ) ) ;
3871: settings@var144 .@expr1073745039 library@var147 .@expr1073745040 load (@expr1073745041 doc@var146 ) ;
3872: settings@var144 .@expr1073745042 severity@var148 .@expr1073745043 enable (@expr1073745044 Severity ::@expr1073745045 warning@expr1073745032 ) ;
3873: settings@var144 .@expr1073745046 sizeof_wchar_t@var149 =@expr1073745047 4 ;
3874:
3875: $check_ $(@expr1073745048 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3875 $, "void f() {\n    char c[10];\n    mymemset(c, 0, 10);\n}" , settings@var144 $)
3876:
3877:
3878: ;
3879: $if $(@expr1073745049 $!@expr1073745050 $assertEquals $(@expr1073745051 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3879 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3880:
3881: $check_ $(@expr1073745054 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3881 $, "void f() {\n    char c[10];\n    mymemset(c, 0, 11);\n}" , settings@var144 $)
3882:
3883:
3884: ;
3885: $if $(@expr1073745055 $!@expr1073745056 $assertEquals $(@expr1073745057 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3885 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3886:
3887: $check_ $(@expr1073745060 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3887 $, "struct S {\n    char a[5];\n};\nvoid f() {\n    S s;\n    mymemset(s.a, 0, 10);\n}" , settings@var144 $)
3888:
|
3892:
3893: ;
3894: $if $(@expr1073745061 $!@expr1073745062 $assertEquals $(@expr1073745063 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3894 $, "[test.cpp:6]: (error) Buffer is accessed out of bounds: s.a\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3895:
3896: $check_ $(@expr1073745066 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3896 $, "void foo() {\n    char s[10];\n    mymemset(s, 0, '*');\n}" , settings@var144 $)
3897:
3898:
3899: ;
3900: $todoAssertEquals $(@expr1073745067 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3900 $, "[test.cpp:3]: (warning) The size argument is given as a char constant.\n[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n" $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n" $, errout@var100 .@expr3228 str (@expr3229 ) $)
3901: ;
3902:
3903:
3904: $check_ $(@expr1073745070 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3904 $, "void f(void) {\n  char a[10];\n  mymemset(a+5, 0, 10);\n}" , settings@var144 $)
3905:
3906:
3907: ;
3908: $todoAssertEquals $(@expr1073745071 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3908 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: a\n" $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) ;
3909:
3910:
3911: $check_ $(@expr1073745074 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3911 $, "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 6);\n}" , settings@var144 $)
3912:
3913:
3914: ;
3915: $if $(@expr1073745075 $!@expr1073745076 $assertEquals $(@expr1073745077 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3915 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3916:
3917: $check_ $(@expr1073745080 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3917 $, "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 5);\n}" , settings@var144 $)
3918:
3919:
3920: ;
3921: $if $(@expr1073745081 $!@expr1073745082 $assertEquals $(@expr1073745083 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3921 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3922:
3923: $check_ $(@expr1073745086 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3923 $, "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 21);\n}" , settings@var144 $)
3924:
3925:
3926: ;
3927: $if $(@expr1073745087 $!@expr1073745088 $assertEquals $(@expr1073745089 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3927 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3928:
3929: $check_ $(@expr1073745092 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3929 $, "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 20);\n}" , settings@var144 $)
3930:
3931:
3932: ;
3933: $if $(@expr1073745093 $!@expr1073745094 $assertEquals $(@expr1073745095 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3933 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3934:
3935:
3936: $check_ $(@expr1073745098 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3936 $, "void f(void) {\n  char c;\n  mymemset(&c, 0, 4);\n}" , settings@var144 $)
3937:
3938:
3939: ;
3940: $todoAssertEquals $(@expr1073745099 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3940 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) ;
3941:
3942:
3943: $check_ $(@expr1073745102 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3943 $, "void f(void) {\n    unknown_type_t buf[4];\n    mymemset(buf, 0, 100);\n}" , settings@var144 $)
3944:
3945:
3946: ;
3947: $if $(@expr1073745103 $!@expr1073745104 $assertEquals $(@expr1073745105 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3947 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3948:
3949:
3950: $check_ $(@expr1073745108 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3950 $, "int main() {\n    char b[5][6];\n    mymemset(b, 0, 5 * 6);\n}" , settings@var144 $)
3951:
3952:
3953: ;
3954: $if $(@expr1073745109 $!@expr1073745110 $assertEquals $(@expr1073745111 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3954 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3955:
3956: $check_ $(@expr1073745114 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3956 $, "int main() {\n    char b[5][6];\n    mymemset(b, 0, 6 * 6);\n}" , settings@var144 $)
3957:
3958:
3959: ;
3960: $if $(@expr1073745115 $!@expr1073745116 $assertEquals $(@expr1073745117 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3960 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3961:
3962: $check_ $(@expr1073745120 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3962 $, "int main() {\n    char b[5][6];\n    mymemset(b, 0, 31);\n}" , settings@var144 $)
3963:
3964:
3965: ;
3966: $if $(@expr1073745121 $!@expr1073745122 $assertEquals $(@expr1073745123 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3966 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3967:
3968:
3969: $check_ $(@expr1073745126 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3969 $, "void f() {\n    char str[3];\n    foo.mymemset(str, 0, 100);\n    foo::mymemset(str, 0, 100);\n    std::mymemset(str, 0, 100);\n}" , settings@var144 $)
3970:
|
3973:
3974: ;
3975: $todoAssertEquals $(@expr1073745127 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3975 $, "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n" $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) ;
3976:
3977:
3978: $check_ $(@expr1073745130 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3978 $, "void f() {\n  mymemset(\"abc\", 0, 20);\n}" , settings@var144 $)
3979:
3980: ;
3981: $todoAssertEquals $(@expr1073745131 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3981 $, "[test.cpp:2]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $)
3982:
3983: ;
3984:
3985: $check_ $(@expr1073745134 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3985 $, "void f() {\n  mymemset(temp, \"abc\", 4);\n}" , settings@var144 $)
3986:
3987: ;
3988: $if $(@expr1073745135 $!@expr1073745136 $assertEquals $(@expr1073745137 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3988 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3989:
3990: $check_ $(@expr1073745140 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3990 $, "void f() {\n    char c[10] = \"c\";\n    mymemset(c, 0, 10);\n}" , settings@var144 $)
3991:
3992:
3993: ;
3994: $if $(@expr1073745141 $!@expr1073745142 $assertEquals $(@expr1073745143 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 3994 $, "" $, errout@var100 .@expr3228 str (@expr3229 ) $) $) { $return ; }
3995: }
3996:
3997: void minsize_sizeof ( ) {
3998: Settings settings@var150 ;
3999: const char xmldata@var151 [@expr1073745146 254 ] =@expr1073745147 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
4000:
|
4009:
4010: ;
4011: tinyxml2 ::@expr1073745148 XMLDocument doc@var152 ;
4012: doc@var152 .@expr1073745149 Parse (@expr1073745150 xmldata@var151 , sizeof (@expr1073745151 xmldata@var151 ) ) ;
4013: settings@var150 .@expr1073745152 library@var153 .@expr1073745153 load (@expr1073745154 doc@var152 ) ;
4014:
4015: $check_ $(@expr1073745155 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4015 $, "void f() {\n    char c[7];\n    mystrncpy(c, \"hello\", 7);\n}" , settings@var150 $)
4016:
4017:
4018: ;
4019: $if $(@expr1073745156 $!@expr1073745157 $assertEquals $(@expr1073745158 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4019 $, "" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4020:
4021: $check_ $(@expr1073745161 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4021 $, "void f() {\n char c[6];\n mystrncpy(c,\"hello\",6);\n}" , settings@var150 $)
4022:
4023:
4024: ;
4025: $if $(@expr1073745162 $!@expr1073745163 $assertEquals $(@expr1073745164 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4025 $, "" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4026:
4027: $check_ $(@expr1073745167 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4027 $, "void f() {\n char c[5];\n mystrncpy(c,\"hello\",6);\n}" , settings@var150 $)
4028:
4029:
4030: ;
4031: $if $(@expr1073745168 $!@expr1073745169 $assertEquals $(@expr1073745170 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4031 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4032:
4033: $check_ $(@expr1073745173 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4033 $, "void f() {\n    char c[6];\n    mystrncpy(c,\"hello!\",7);\n}" , settings@var150 $)
4034:
4035:
4036: ;
4037: $if $(@expr1073745174 $!@expr1073745175 $assertEquals $(@expr1073745176 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4037 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4038:
4039: $check_ $(@expr1073745179 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4039 $, "void f(unsigned int addr) {\n    memset((void *)addr, 0, 1000);\n}" , settings0@var102 $)
4040:
4041: ;
4042: $if $(@expr1073745180 $!@expr1073745181 $assertEquals $(@expr1073745182 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4042 $, "" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4043:
4044: $check_ $(@expr1073745185 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4044 $, "struct AB { char a[10]; };\nvoid foo(AB *ab) {\n    mystrncpy(x, ab->a, 100);\n}" , settings@var150 $)
4045:
4046:
4047: ;
4048: $if $(@expr1073745186 $!@expr1073745187 $assertEquals $(@expr1073745188 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4048 $, "" $, errout@var100 .@expr3335 str (@expr3336 ) $) $) { $return ; }
4049:
4050: $check_ $(@expr1073745191 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4050 $, "void a(char *p) { mystrncpy(p,\"hello world!\",10); }\nvoid b() {\n    char buf[5];\n    a(buf);}" , settings@var150 $)
4051:
4052:
4053:
4054: ;
4055: $todoAssertEquals $(@expr1073745192 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4055 $, "[test.cpp:4] -> [test.cpp:1]: (error) Buffer is accessed out of bounds: buf\n" $, "" $, errout@var100 .@expr3335 str (@expr3336 ) $)
4056:
4057: ;
4058: }
4059:
4060: void minsize_strlen ( ) {
4061: Settings settings@var154 ;
4062: const char xmldata@var155 [@expr1073745195 241 ] =@expr1073745196 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>"
4063:
|
4073:
4074: ;
4075: tinyxml2 ::@expr1073745197 XMLDocument doc@var156 ;
4076: doc@var156 .@expr1073745198 Parse (@expr1073745199 xmldata@var155 , sizeof (@expr1073745200 xmldata@var155 ) ) ;
4077: settings@var154 .@expr1073745201 library@var157 .@expr1073745202 load (@expr1073745203 doc@var156 ) ;
4078:
4079:
4080: $check_ $(@expr1073745204 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4080 $, "void f() {\n    char str[3];\n    mysprintf(str, \"test\");\n}" , settings@var154 $)
4081:
4082:
4083: ;
4084: $if $(@expr1073745205 $!@expr1073745206 $assertEquals $(@expr1073745207 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4084 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4085:
4086: $check_ $(@expr1073745210 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4086 $, "void f() {\n    char str[5];\n    mysprintf(str, \"%s\", \"abcde\");\n}" , settings@var154 $)
4087:
4088:
4089: ;
4090: $if $(@expr1073745211 $!@expr1073745212 $assertEquals $(@expr1073745213 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4090 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4091:
4092: $check_ $(@expr1073745216 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4092 $, "int getnumber();\nvoid f()\n{\n    char str[5];\n    mysprintf(str, \"%d: %s\", getnumber(), \"abcde\");\n}" , settings@var154 $)
4093:
|
4096:
4097: ;
4098: $if $(@expr1073745217 $!@expr1073745218 $assertEquals $(@expr1073745219 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4098 $, "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4099:
4100: $check_ $(@expr1073745222 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4100 $, "void f() {\n    char str[5];\n    mysprintf(str, \"test%s\", \"\");\n}" , settings@var154 $)
4101:
4102:
4103: ;
4104: $if $(@expr1073745223 $!@expr1073745224 $assertEquals $(@expr1073745225 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4104 $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4105:
4106: $check_ $(@expr1073745228 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4106 $, "void f() {\n    char *str = new char[5];\n    mysprintf(str, \"abcde\");\n}" , settings@var154 $)
4107:
4108:
4109: ;
4110: $if $(@expr1073745229 $!@expr1073745230 $assertEquals $(@expr1073745231 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4110 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4111:
4112: $check_ $(@expr1073745234 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4112 $, "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"34\");\n}" , settings@var154 $)
4113:
4114:
4115: ;
4116: $if $(@expr1073745235 $!@expr1073745236 $assertEquals $(@expr1073745237 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4116 $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4117:
4118: $check_ $(@expr1073745240 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4118 $, "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"345\");\n}" , settings@var154 $)
4119:
4120:
4121: ;
4122: $todoAssertEquals $(@expr1073745241 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4122 $, "error" $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) ;
4123:
4124: $check_ $(@expr1073745244 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4124 $, "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}" , settings@var154 $)
4125:
4126:
4127:
4128: ;
4129: $if $(@expr1073745245 $!@expr1073745246 $assertEquals $(@expr1073745247 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4129 $, "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4130:
4131:
4132: $check_ $(@expr1073745250 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4132 $, "void f() {\n  char *a = new char(30);\n  mysprintf(a, \"a\");\n}" , settings@var154 $)
4133:
4134:
4135: ;
4136: $todoAssertEquals $(@expr1073745251 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4136 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) ;
4137:
4138: $check_ $(@expr1073745254 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4138 $, "void f(char value) {\n  char *a = new char(value);\n  mysprintf(a, \"a\");\n}" , settings@var154 $)
4139:
4140:
4141: ;
4142: $todoAssertEquals $(@expr1073745255 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4142 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) ;
4143:
4144:
4145: $check_ $(@expr1073745258 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4145 $, "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo));\n  mysprintf(x->a, \"aa\");\n}" , settings@var154 $)
4146:
4147:
4148:
4149: ;
4150: $todoAssertEquals $(@expr1073745259 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4150 $, "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) ;
4151:
4152: $check_ $(@expr1073745262 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4152 $, "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo) + 10);\n  mysprintf(x->a, \"aa\");\n}" , settings@var154 $)
4153:
4154:
4155:
4156: ;
4157: $if $(@expr1073745263 $!@expr1073745264 $assertEquals $(@expr1073745265 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4157 $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4158:
4159: $check_ $(@expr1073745268 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4159 $, "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}" , settings@var154 $)
4160:
4161:
4162:
4163: ;
4164: $if $(@expr1073745269 $!@expr1073745270 $assertEquals $(@expr1073745271 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4164 $, "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4165:
4166: $check_ $(@expr1073745274 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4166 $, "struct Foo {\n  char a[LEN];\n  void f();\n};void Foo::f() {\n  mysprintf(a, \"abcd\");\n}" , settings@var154 $)
4167:
|
4171:
4172: ;
4173: $if $(@expr1073745275 $!@expr1073745276 $assertEquals $(@expr1073745277 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4173 $, "" $, errout@var100 .@expr3384 str (@expr3385 ) $) $) { $return ; }
4174: }
4175:
4176: void minsize_mul ( ) {
4177: Settings settings@var158 ;
4178: const char xmldata@var159 [@expr1073745280 204 ] =@expr1073745281 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>"
4179:
|
4187:
4188: ;
4189: tinyxml2 ::@expr1073745282 XMLDocument doc@var160 ;
4190: doc@var160 .@expr1073745283 Parse (@expr1073745284 xmldata@var159 , sizeof (@expr1073745285 xmldata@var159 ) ) ;
4191: settings@var158 .@expr1073745286 library@var161 .@expr1073745287 load (@expr1073745288 doc@var160 ) ;
4192:
4193: $check_ $(@expr1073745289 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4193 $, "void f() {\n    char c[5];\n    myfread(c, 1, 5, stdin);\n}" , settings@var158 $)
4194:
4195:
4196: ;
4197: $if $(@expr1073745290 $!@expr1073745291 $assertEquals $(@expr1073745292 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4197 $, "" $, errout@var100 .@expr3469 str (@expr3470 ) $) $) { $return ; }
4198:
4199: $check_ $(@expr1073745295 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4199 $, "void f() {\n    char c[5];\n    myfread(c, 1, 6, stdin);\n}" , settings@var158 $)
4200:
4201:
4202: ;
4203: $if $(@expr1073745296 $!@expr1073745297 $assertEquals $(@expr1073745298 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4203 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" $, errout@var100 .@expr3469 str (@expr3470 ) $) $) { $return ; }
4204: }
4205:
4206:
4207:
4208: void unknownType ( ) {
4209: $check_ $(@expr1073745301 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4209 $, "void f()\n{\n UnknownType *a = malloc(4);\n}" $)
4210:
4211:
4212: ;
4213: $if $(@expr1073745302 $!@expr1073745303 $assertEquals $(@expr1073745304 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4213 $, "" $, errout@var100 .@expr1073745305 str (@expr1073745306 ) $) $) { $return ; }
4214: }
4215:
4216: void terminateStrncpy1 ( ) {
4217: $check_ $(@expr1073745307 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4217 $, "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n}" $)
4218:
|
4223:
4224: ;
4225: $if $(@expr1073745308 $!@expr1073745309 $assertEquals $(@expr1073745310 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4225 $, "" $, errout@var100 .@expr3487 str (@expr3488 ) $) $) { $return ; }
4226:
4227: $check_ $(@expr1073745313 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4227 $, "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[99] = '\\0';\n}" $)
4228:
4229:
4230:
4231: ;
4232: $if $(@expr1073745314 $!@expr1073745315 $assertEquals $(@expr1073745316 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4232 $, "" $, errout@var100 .@expr3487 str (@expr3488 ) $) $) { $return ; }
4233:
4234: $check_ $(@expr1073745319 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4234 $, "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[x+1] = '\\0';\n}" $)
4235:
4236:
4237:
4238: ;
4239: $if $(@expr1073745320 $!@expr1073745321 $assertEquals $(@expr1073745322 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4239 $, "" $, errout@var100 .@expr3487 str (@expr3488 ) $) $) { $return ; }
4240:
4241:
4242: $check_ $(@expr1073745325 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4242 $, "char baz[100];\nstrncpy(baz, \"var\", 100)" $)
4243: ;
4244: $if $(@expr1073745326 $!@expr1073745327 $assertEquals $(@expr1073745328 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4244 $, "" $, errout@var100 .@expr3487 str (@expr3488 ) $) $) { $return ; }
4245:
4246:
4247: $check_ $(@expr1073745331 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4247 $, "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    foo(baz);\n    foo(baz);\n}" $)
4248:
|
4251:
4252: ;
4253: $if $(@expr1073745332 $!@expr1073745333 $assertEquals $(@expr1073745334 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4253 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n" $, errout@var100 .@expr3487 str (@expr3488 ) $) $) { $return ; }
4254: }
4255:
4256: void terminateStrncpy2 ( ) {
4257: $check_ $(@expr1073745337 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4257 $, "char *foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    bar[99] = 0;\n    return strdup(baz);\n}" $)
4258:
|
4261:
4262: ;
4263: $if $(@expr1073745338 $!@expr1073745339 $assertEquals $(@expr1073745340 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4263 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n" $, errout@var100 .@expr1073745341 str (@expr1073745342 ) $) $) { $return ; }
4264: }
4265:
4266: void terminateStrncpy3 ( ) {
4267:
4268:
4269: $check_ $(@expr1073745343 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4269 $, "char str[100];\n\nvoid foo(char *a) {\n    strncpy(str, a, 100);\n}\n\nvoid bar(char *p) {\n    strncpy(p, str, 100);\n}\n" $)
4270:
|
4276:
4277: ;
4278: $if $(@expr1073745344 $!@expr1073745345 $assertEquals $(@expr1073745346 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4278 $, "[test.cpp:4]: (warning, inconclusive) The buffer 'str' may not be null-terminated after the call to strncpy().\n" $, errout@var100 .@expr1073745347 str (@expr1073745348 ) $) $) { $return ; }
4279: }
4280:
4281: void terminateStrncpy4 ( ) {
4282: $check_ $(@expr1073745349 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4282 $, "void bar() {\n    char buf[4];\n    strncpy(buf, \"ab\", 4);\n}" $)
4283:
4284:
4285: ;
4286: $if $(@expr1073745350 $!@expr1073745351 $assertEquals $(@expr1073745352 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4286 $, "" $, errout@var100 .@expr3529 str (@expr3530 ) $) $) { $return ; }
4287:
4288: $check_ $(@expr1073745355 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4288 $, "void bar() {\n    char buf[4];\n    strncpy(buf, \"abcde\", 4);\n}" $)
4289:
4290:
4291: ;
4292: $if $(@expr1073745356 $!@expr1073745357 $assertEquals $(@expr1073745358 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4292 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'buf' may not be null-terminated after the call to strncpy().\n" $, errout@var100 .@expr3529 str (@expr3530 ) $) $) { $return ; }
4293: }
4294:
4295:
4296: void recursive_long_time ( ) {
4297:
4298: $check_ $(@expr1073745361 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4298 $, "char *f2 ( char *b )\n{\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n}\nvoid f()\n{\n    char a[10];\n    f2(a);\n}" $)
4299:
|
4319:
4320: ;
4321: $if $(@expr1073745362 $!@expr1073745363 $assertEquals $(@expr1073745364 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4321 $, "" $, errout@var100 .@expr1073745365 str (@expr1073745366 ) $) $) { $return ; }
4322: }
4323:
4324:
4325:
4326: void crash1 ( ) {
4327: $check_ $(@expr1073745367 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4327 $, "struct struct A\n{\n    int alloclen;\n};\n\nvoid foo()\n{\n    struct A *str;\n    str = malloc(4);\n}" $)
4328:
|
4335:
4336: ;
4337: $if $(@expr1073745368 $!@expr1073745369 $assertEquals $(@expr1073745370 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4337 $, "" $, errout@var100 .@expr1073745371 str (@expr1073745372 ) $) $) { $return ; }
4338: }
4339:
4340: void crash2 ( ) {
4341: $check_ $(@expr1073745373 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4341 $, "void a(char *p) {\n    f( { if(finally_arg); } );\n}\n\nvoid b() {\n    char arr[64];\n    a(arr);\n}" $)
4342:
|
4347:
4348: ;
4349: }
4350:
4351: void crash3 ( ) {
4352: $check_ $(@expr1073745374 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4352 $, "struct b { unknown v[0]; };\nvoid d() { struct b *f; f = malloc(108); }" $)
4353: ;
4354: }
4355:
4356: void crash4 ( ) {
4357: $check_ $(@expr1073745375 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4357 $, "__thread void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }" $)
4358:
4359:
4360:
4361: ;
4362:
4363: $check_ $(@expr1073745376 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4363 $, "thread_local void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }" $)
4364:
4365:
4366:
4367: ;
4368: }
4369:
4370: void crash5 ( ) {
4371: $check_ $(@expr1073745377 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4371 $, "int a() {\n    void b(char **dst) {\n        *dst = malloc(50);\n    }\n}" $)
4372:
4373:
4374:
4375: ;
4376: }
4377:
4378: void crash6 ( ) {
4379: $check_ $(@expr1073745378 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4379 $, "void start(char* name) {\nchar snapname[64] = { 0 };\nstrncpy(snapname, \"snapshot\", arrayLength(snapname));\n}" $)
4380:
4381:
4382: ;
4383: }
4384:
4385: void crash7 ( ) {
4386: $check_ $(@expr1073745379 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4386 $, "char x[10];\nvoid f() { x[10]; }" $)
4387: ;
4388: }
4389:
4390: void insecureCmdLineArgs ( ) {
4391: $check_ $(@expr1073745380 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4391 $, "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2];\n        char *p = strdup(argv[1]);\n        strcpy(buf,p);\n        free(p);\n    }\n    return 0;\n}" $)
4392:
|
4400:
4401: ;
4402: $todoAssertEquals $(@expr1073745381 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4402 $, "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4403:
4404: $check_ $(@expr1073745384 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4404 $, "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2] = {'\\0','\\0'};\n        char *p = strdup(argv[1]);\n        strcat(buf,p);\n        free(p);\n    }\n    return 0;\n}" $)
4405:
|
4413:
4414: ;
4415: $todoAssertEquals $(@expr1073745385 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4415 $, "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4416:
4417: $check_ $(@expr1073745388 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4417 $, "int main(const int argc, char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4418:
4419:
4420:
4421: ;
4422: $todoAssertEquals $(@expr1073745389 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4422 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4423:
4424: $check_ $(@expr1073745392 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4424 $, "int main(int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4425:
4426:
4427:
4428: ;
4429: $todoAssertEquals $(@expr1073745393 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4429 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4430:
4431: $check_ $(@expr1073745396 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4431 $, "int main(const int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4432:
4433:
4434:
4435: ;
4436: $todoAssertEquals $(@expr1073745397 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4436 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4437:
4438: $check_ $(@expr1073745400 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4438 $, "int main(int argc, char* argv[])\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" $)
4439:
4440:
4441:
4442: ;
4443: $todoAssertEquals $(@expr1073745401 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4443 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4444:
4445: $check_ $(@expr1073745404 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4445 $, "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4446:
4447:
4448:
4449: ;
4450: $todoAssertEquals $(@expr1073745405 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4450 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4451:
4452: $check_ $(@expr1073745408 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4452 $, "int main(int argc, const char *const *const argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4453:
4454:
4455:
4456: ;
4457: $todoAssertEquals $(@expr1073745409 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4457 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4458:
4459: $check_ $(@expr1073745412 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4459 $, "int main(const int argc, const char *const *const argv, const char *const *const envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" $)
4460:
4461:
4462:
4463: ;
4464: $todoAssertEquals $(@expr1073745413 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4464 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4465:
4466: $check_ $(@expr1073745416 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4466 $, "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" $)
4467:
4468:
4469:
4470: ;
4471: $todoAssertEquals $(@expr1073745417 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4471 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4472:
4473: $check_ $(@expr1073745420 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4473 $, "int main(const int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" $)
4474:
4475:
4476:
4477: ;
4478: $todoAssertEquals $(@expr1073745421 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4478 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4479:
4480: $check_ $(@expr1073745424 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4480 $, "int main(int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" $)
4481:
4482:
4483:
4484: ;
4485: $todoAssertEquals $(@expr1073745425 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4485 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4486:
4487: $check_ $(@expr1073745428 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4487 $, "int main(const int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" $)
4488:
4489:
4490:
4491: ;
4492: $todoAssertEquals $(@expr1073745429 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4492 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4493:
4494: $check_ $(@expr1073745432 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4494 $, "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, options[0]);\n}" $)
4495:
4496:
4497:
4498: ;
4499: $todoAssertEquals $(@expr1073745433 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4499 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4500:
4501: $check_ $(@expr1073745436 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4501 $, "int main(int argc, char **options)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, options[0]);\n}" $)
4502:
4503:
4504:
4505: ;
4506: $todoAssertEquals $(@expr1073745437 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4506 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4507:
4508: $check_ $(@expr1073745440 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4508 $, "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, *options);\n}" $)
4509:
4510:
4511:
4512: ;
4513: $todoAssertEquals $(@expr1073745441 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4513 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4514:
4515: $check_ $(@expr1073745444 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4515 $, "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog+3, *options);\n}" $)
4516:
4517:
4518:
4519: ;
4520: $todoAssertEquals $(@expr1073745445 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4520 $, "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) ;
4521:
4522: $check_ $(@expr1073745448 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4522 $, "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    if (strlen(argv[0]) < 10)\n        strcpy(prog, argv[0]);\n}" $)
4523:
|
4526:
4527: ;
4528: $if $(@expr1073745449 $!@expr1073745450 $assertEquals $(@expr1073745451 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4528 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4529:
4530: $check_ $(@expr1073745454 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4530 $, "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    if (10 > strlen(argv[0]))\n        strcat(prog, argv[0]);\n}" $)
4531:
|
4534:
4535: ;
4536: $if $(@expr1073745455 $!@expr1073745456 $assertEquals $(@expr1073745457 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4536 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4537:
4538: $check_ $(@expr1073745460 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4538 $, "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    argv[0][0] = '\\0';\n    strcpy(prog, argv[0]);\n}" $)
4539:
|
4542:
4543: ;
4544: $if $(@expr1073745461 $!@expr1073745462 $assertEquals $(@expr1073745463 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4544 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4545:
4546:
4547: $check_ $(@expr1073745466 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4547 $, "int main(int argc, char* argv[]) {\n    char prog[10];\n    strcpy(prog, argv[0]);\n    strcpy(prog, argv[0]);\n}" $)
4548:
4549:
4550:
4551: ;
4552: $todoAssertEquals $(@expr1073745467 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4552 $, "[test.cpp:3]: (error) Buffer overrun possible for long command line arguments.\n[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $)
4553: ;
4554:
4555:
4556: $check_ $(@expr1073745470 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4556 $, "int main(int argc, char *argv[]) {\n  char *strcpy();\n}" $)
4557:
4558: ;
4559: $if $(@expr1073745471 $!@expr1073745472 $assertEquals $(@expr1073745473 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4559 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4560: $check_ $(@expr1073745476 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4560 $, "int main(int argc, char *argv[]) {\n  char *strcat();\n}" $)
4561:
4562: ;
4563: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4563 $, "" $, errout@var100 .@expr3558 str (@expr3559 ) $) $) { $return ; }
4564: }
4565:
4566: void checkBufferAllocatedWithStrlen ( ) {
4567: $check_ $(@expr1073745482 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4567 $, "void f(char *a) {\n  char *b = new char[strlen(a)];\n  strcpy(b, a);\n}" $)
4568:
4569:
4570: ;
4571: $todoAssertEquals $(@expr1073745483 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4571 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) ;
4572:
4573: $check_ $(@expr1073745486 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4573 $, "void f(char *a) {\n  char *b = new char[strlen(a) + 1];\n  strcpy(b, a);\n}" $)
4574:
4575:
4576: ;
4577: $if $(@expr1073745487 $!@expr1073745488 $assertEquals $(@expr1073745489 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4577 $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4578:
4579: $check_ $(@expr1073745492 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4579 $, "void f(char *a) {\n  char *b = new char[strlen(a)];\n  a[0] = '\\0';\n  strcpy(b, a);\n}" $)
4580:
4581:
4582:
4583: ;
4584: $if $(@expr1073745493 $!@expr1073745494 $assertEquals $(@expr1073745495 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4584 $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4585:
4586: $check_ $(@expr1073745498 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4586 $, "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  b = realloc(b, 10000);\n  strcpy(b, a);\n}" $)
4587:
4588:
4589:
4590: ;
4591: $if $(@expr1073745499 $!@expr1073745500 $assertEquals $(@expr1073745501 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4591 $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4592:
4593: $check_ $(@expr1073745504 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4593 $, "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}" $)
4594:
4595:
4596: ;
4597: $todoAssertEquals $(@expr1073745505 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4597 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) ;
4598:
4599: $check_ $(@expr1073745508 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4599 $, "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  {\n    strcpy(b, a);\n  }\n}" $)
4600:
|
4603:
4604: ;
4605: $todoAssertEquals $(@expr1073745509 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4605 $, "[test.cpp:4]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) ;
4606:
4607: $check_ $(@expr1073745512 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4607 $, "void f(char *a) {\n  char *b = (char *)malloc(strlen(a) + 1);\n  strcpy(b, a);\n}" $)
4608:
4609:
4610: ;
4611: $if $(@expr1073745513 $!@expr1073745514 $assertEquals $(@expr1073745515 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4611 $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4612:
4613: $check_ $(@expr1073745518 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4613 $, "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a));\n  strcpy(b, a);\n}" $)
4614:
4615:
4616: ;
4617: $todoAssertEquals $(@expr1073745519 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4617 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) ;
4618:
4619: $check_ $(@expr1073745522 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4619 $, "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a) + 1);\n  strcpy(b, a);\n}" $)
4620:
4621:
4622: ;
4623: $if $(@expr1073745523 $!@expr1073745524 $assertEquals $(@expr1073745525 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4623 $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) $) { $return ; }
4624:
4625: $check_ $(@expr1073745528 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4625 $, "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}" $)
4626:
4627:
4628: ;
4629: $todoAssertEquals $(@expr1073745529 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4629 $, "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" $, "" $, errout@var100 .@expr3660 str (@expr3661 ) $) ;
4630: }
4631:
4632: void scope ( ) {
4633: $check_ $(@expr1073745532 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4633 $, "class A {\nprivate:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    X x;\n    x.buf[10] = 0;\n}" $)
4634:
|
4641:
4642: ;
4643: $if $(@expr1073745533 $!@expr1073745534 $assertEquals $(@expr1073745535 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4643 $, "" $, errout@var100 .@expr3712 str (@expr3713 ) $) $) { $return ; }
4644:
4645: $check_ $(@expr1073745538 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4645 $, "class A {\npublic:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    A::X x;\n    x.buf[10] = 0;\n}" $)
4646:
|
4653:
4654: ;
4655: $if $(@expr1073745539 $!@expr1073745540 $assertEquals $(@expr1073745541 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4655 $, "[test.cpp:9]: (error) Array 'x.buf[10]' accessed at index 10, which is out of bounds.\n" $, errout@var100 .@expr3712 str (@expr3713 ) $) $) { $return ; }
4656: }
4657:
4658: void getErrorMessages ( ) {
4659:
4660: CheckBufferOverrun c@var162 ;
4661: c@var162 .@expr1073745544 getErrorMessages (@expr1073745545 this@expr1073745546 , nullptr ) ;
4662: }
4663:
4664: void arrayIndexThenCheck ( ) {
4665:
4666:
4667: $check_ $(@expr1073745547 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4667 $, "void f(const char s[]) {\n    if (s[i] == 'x' && i < y) {\n    }}" $)
4668:
4669:
4670: ;
4671: $if $(@expr1073745548 $!@expr1073745549 $assertEquals $(@expr1073745550 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4671 $, "" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4672:
4673: $check_ $(@expr1073745553 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4673 $, "void f(const char s[], int i) {\n    if (s[i] == 'x' && i < y) {\n    }}" $)
4674:
4675:
4676: ;
4677: $if $(@expr1073745554 $!@expr1073745555 $assertEquals $(@expr1073745556 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4677 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4678:
4679: $check_ $(@expr1073745559 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4679 $, "void f(const char s[]) {\n    for (int i = 0; s[i] == 'x' && i < y; ++i) {\n    }}" $)
4680:
4681:
4682: ;
4683: $if $(@expr1073745560 $!@expr1073745561 $assertEquals $(@expr1073745562 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4683 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4684:
4685: $check_ $(@expr1073745565 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4685 $, "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (i <= 42)) {\n    }\n}" $)
4686:
4687:
4688: ;
4689: $if $(@expr1073745566 $!@expr1073745567 $assertEquals $(@expr1073745568 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4689 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4690:
4691: $check_ $(@expr1073745571 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4691 $, "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (42 >= i)) {\n    }\n}" $)
4692:
4693:
4694: ;
4695: $if $(@expr1073745572 $!@expr1073745573 $assertEquals $(@expr1073745574 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4695 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4696:
4697:
4698: $check_ $(@expr1073745577 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4698 $, "void f(char* e, int y) {\n    if (e[y] == '/' && elen > y + 1 && e[y + 1] == '?') {\n    }\n}" $)
4699:
4700:
4701: ;
4702: $if $(@expr1073745578 $!@expr1073745579 $assertEquals $(@expr1073745580 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4702 $, "" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4703:
4704:
4705: $check_ $(@expr1073745583 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4705 $, "void f(const int a[], unsigned i) {\n    if(a[i] < func(i) && i <= 42) {\n    }\n}" $)
4706:
4707:
4708: ;
4709: $if $(@expr1073745584 $!@expr1073745585 $assertEquals $(@expr1073745586 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4709 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4710:
4711: $check_ $(@expr1073745589 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4711 $, "void f(const int a[], unsigned i) {\n    if (i <= 42 && a[i] < func(i)) {\n    }\n}" $)
4712:
4713:
4714: ;
4715: $if $(@expr1073745590 $!@expr1073745591 $assertEquals $(@expr1073745592 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4715 $, "" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4716:
4717: $check_ $(@expr1073745595 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4717 $, "void f(const int a[], unsigned i) {\n    if (foo(a[i] + 3) < func(i) && i <= 42) {\n    }\n}" $)
4718:
4719:
4720: ;
4721: $if $(@expr1073745596 $!@expr1073745597 $assertEquals $(@expr1073745598 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4721 $, "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4722:
4723: $check_ $(@expr1073745601 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4723 $, "void f(int i) {\n  sizeof(a)/sizeof(a[i]) && i < 10;\n}" $)
4724:
4725: ;
4726: $if $(@expr1073745602 $!@expr1073745603 $assertEquals $(@expr1073745604 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4726 $, "" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4727:
4728:
4729: $check_ $(@expr1073745607 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4729 $, "void f(int i) {\n  if ((i < 10 ? buf[i] : 1) && (i < 5 ? buf[i] : 5)){}\n}" $)
4730:
4731: ;
4732: $if $(@expr1073745608 $!@expr1073745609 $assertEquals $(@expr1073745610 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4732 $, "" $, errout@var100 .@expr3727 str (@expr3728 ) $) $) { $return ; }
4733: }
4734:
4735: void arrayIndexEarlyReturn ( ) {
4736: $check_ $(@expr1073745613 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4736 $, "extern const char *Names[2];\nconst char* getName(int value) {\n  if ((value < 0) || (value > 1))\n    return \"???\";\n  const char* name = Names[value]; \n  switch (value) {\n  case 2:\n    break; \n  }\n  return name;\n}\n" $)
4737:
|
4745:
4746: ;
4747: $if $(@expr1073745614 $!@expr1073745615 $assertEquals $(@expr1073745616 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4747 $, "" $, errout@var100 .@expr1073745617 str (@expr1073745618 ) $) $) { $return ; }
4748: }
4749:
4750: void bufferNotZeroTerminated ( ) {
4751: $check_ $(@expr1073745619 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4751 $, "void f() {\n    char c[6];\n    strncpy(c,\"hello!\",6);\n}" $)
4752:
4753:
4754: ;
4755: $if $(@expr1073745620 $!@expr1073745621 $assertEquals $(@expr1073745622 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4755 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to strncpy().\n" $, errout@var100 .@expr3799 str (@expr3800 ) $) $) { $return ; }
4756:
4757: $check_ $(@expr1073745625 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4757 $, "void f() {\n    char c[6];\n    memcpy(c,\"hello!\",6);\n}" $)
4758:
4759:
4760: ;
4761: $todoAssertEquals $(@expr1073745626 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4761 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memcpy().\n" $, "" $, errout@var100 .@expr3799 str (@expr3800 ) $) ;
4762:
4763: $check_ $(@expr1073745629 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4763 $, "void f() {\n    char c[6];\n    memmove(c,\"hello!\",6);\n}" $)
4764:
4765:
4766: ;
4767: $todoAssertEquals $(@expr1073745630 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4767 $, "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memmove().\n" $, "" $, errout@var100 .@expr3799 str (@expr3800 ) $) ;
4768: }
4769:
4770: void negativeMemoryAllocationSizeError ( ) {
4771: $check_ $(@expr1073745633 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4771 $, "void f()\n{\n   int *a;\n   a = (int *)malloc( -10 );\n   free(a);\n}" $)
4772:
|
4775:
4776: ;
4777: $todoAssertEquals $(@expr1073745634 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4777 $, "[test.cpp:4]: (error) Memory allocation size is negative.\n" $, "" $, errout@var100 .@expr3811 str (@expr3812 ) $) ;
4778:
4779: $check_ $(@expr1073745637 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4779 $, "void f()\n{\n   int *a;\n   a = (int *)malloc( -10);\n   free(a);\n}" $)
4780:
|
4783:
4784: ;
4785: $todoAssertEquals $(@expr1073745638 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4785 $, "[test.cpp:4]: (error) Memory allocation size is negative.\n" $, "" $, errout@var100 .@expr3811 str (@expr3812 ) $) ;
4786:
4787: $check_ $(@expr1073745641 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4787 $, "void f()\n{\n   int *a;\n   a = (int *)alloca( -10 );\n}" $)
4788:
4789:
4790:
4791: ;
4792: $todoAssertEquals $(@expr1073745642 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4792 $, "[test.cpp:4]: (error) Memory allocation size is negative.\n" $, "" $, errout@var100 .@expr3811 str (@expr3812 ) $) ;
4793: }
4794:
4795: void negativeArraySize ( ) {
4796: $check_ $(@expr1073745645 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4796 $, "void f(int sz) {\n   int a[sz];\n}\nvoid x() { f(-100); }" $)
4797:
4798:
4799: ;
4800: $todoAssertEquals $(@expr1073745646 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4800 $, "[test.cpp:2]: (error) Declaration of array 'a' with negative size is undefined behaviour\n" $, "" $, errout@var100 .@expr3823 str (@expr3824 ) $) ;
4801:
4802:
4803: $check_ $(@expr1073745649 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4803 $, "int x, y;\nint a[-1];\nint b[x?1:-1];\nint c[x?y:-1];" $)
4804:
4805:
4806: ;
4807: $if $(@expr1073745650 $!@expr1073745651 $assertEquals $(@expr1073745652 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4807 $, "" $, errout@var100 .@expr3823 str (@expr3824 ) $) $) { $return ; }
4808: }
4809:
4810: void pointerAddition1 ( ) {
4811: $check_ $(@expr1073745655 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4811 $, "void f() {\n    char arr[10];\n    char *p = arr + 20;\n}" $)
4812:
4813:
4814: ;
4815: $if $(@expr1073745656 $!@expr1073745657 $assertEquals $(@expr1073745658 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4815 $, "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'arr+20' is out of bounds.\n" $, errout@var100 .@expr3835 str (@expr3836 ) $) $) { $return ; }
4816:
4817: $check_ $(@expr1073745661 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4817 $, "char(*g())[1];\nvoid f() {\n    int a[2];\n    int* b = a + sizeof(*g());\n}\n" $)
4818:
4819:
4820:
4821: ;
4822: $if $(@expr1073745662 $!@expr1073745663 $assertEquals $(@expr1073745664 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4822 $, "" $, errout@var100 .@expr3835 str (@expr3836 ) $) $) { $return ; }
4823: }
4824:
4825:
4826: void ctu_ ( const char code@var163 [ ] , const char * file@var164 , int line@var165 ) {
4827:
4828: errout@var100 .@expr1073745667 str (@expr1073745668 "" ) ;
4829:
4830:
4831: Tokenizer tokenizer@var166 (@expr1073745669 &@expr3846 settings0@var102 , this@expr3847 ) ;
4832: std ::@expr1073745672 istringstream istr@var167 (@expr1073745673 code@var163 ) ;
4833: $assert_ $(@expr1073745674 file@var164 $, line@var165 $, $(@expr1073745675 tokenizer@var166 .@expr1073745676 tokenize (@expr1073745677 istr@var167 , "test.cpp" ) $) $) ;
4834:
4835: CTU ::@expr1073745678 FileInfo * ctu@var168 ; ctu@var168 =@expr1073745679 CTU ::@expr1073745680 getFileInfo (@expr1073745681 &@expr3858 tokenizer@var166 ) ;
4836:
4837:
4838: std ::@expr1073745683 list < Check ::@expr1073745684 FileInfo *@expr1073745685 > fileInfo@var169 ;
4839: CheckBufferOverrun checkBO@var170 (@expr1073745686 &@expr3858 tokenizer@var166 , &@expr3846 settings0@var102 , this@expr3847 ) ;
4840: fileInfo@var169 .@expr1073745689 push_back (@expr1073745690 checkBO@var170 .@expr1073745691 getFileInfo (@expr1073745692 &@expr3858 tokenizer@var166 , &@expr3846 settings0@var102 ) ) ;
4841: checkBO@var170 .@expr1073745695 analyseWholeProgram (@expr1073745696 ctu@var168 , fileInfo@var169 , settings0@var102 , *@expr1073745697 this@expr3847 ) ;
4842: while (@expr1073745698 !@expr1073745699 fileInfo@var169 .@expr1073745700 empty (@expr1073745701 ) ) {
4843: delete fileInfo@var169 .@expr1073745702 back (@expr1073745703 ) ;
4844: fileInfo@var169 .@expr1073745704 pop_back (@expr1073745705 ) ;
4845: }
4846: delete ctu@var168 ;
4847: }
4848:
4849: void ctu_malloc ( ) {
4850: $ctu_ $(@expr1073745706 "void dostuff(char *p) {\n  p[-3] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4850 $)
4851:
|
4856:
4857: ;
4858: $if $(@expr1073745707 $!@expr1073745708 $assertEquals $(@expr1073745709 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4858 $, "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; buffer 'p' is accessed at offset -3.\n" $, errout@var100 .@expr3886 str (@expr3887 ) $) $) { $return ; }
4859:
4860: $ctu_ $(@expr1073745712 "void dostuff(char *p) {\n  p[4] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4860 $)
4861:
|
4866:
4867: ;
4868: $if $(@expr1073745713 $!@expr1073745714 $assertEquals $(@expr1073745715 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4868 $, "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 4.\n" $, errout@var100 .@expr3886 str (@expr3887 ) $) $) { $return ; }
4869: }
4870:
4871: void ctu_array ( ) {
4872: $ctu_ $(@expr1073745718 "void dostuff(char *p) {\n    p[10] = 0;\n}\nint main() {\n  char str[4];\n  dostuff(str);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4872 $)
4873:
|
4877:
4878: ;
4879: $if $(@expr1073745719 $!@expr1073745720 $assertEquals $(@expr1073745721 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4879 $, "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 10.\n" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4880:
4881: $ctu_ $(@expr1073745724 "static void memclr( char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str );\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4881 $)
4882:
|
4889:
4890: ;
4891: $if $(@expr1073745725 $!@expr1073745726 $assertEquals $(@expr1073745727 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4891 $, "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4892:
4893: $ctu_ $(@expr1073745730 "static void memclr( int i, char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 0, str );\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4893 $)
4894:
|
4901:
4902: ;
4903: $if $(@expr1073745731 $!@expr1073745732 $assertEquals $(@expr1073745733 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4903 $, "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4904:
4905: $ctu_ $(@expr1073745736 "static void memclr( int i, char *data )\n{\n    data[i] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 10, str );\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4905 $)
4906:
|
4913:
4914: ;
4915: $todoAssertEquals $(@expr1073745737 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4915 $, "[test.cpp:9] -> [test.cpp:3]: (possible error) Array index out of bounds.\n" $, "" $, errout@var100 .@expr3898 str (@expr3899 ) $)
4916: ;
4917:
4918:
4919: $ctu_ $(@expr1073745740 "static void memclr( char *data, int size )\n{\n    if( size > 10 )      data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str, 5 );\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4919 $)
4920:
|
4928:
4929: ;
4930: $if $(@expr1073745741 $!@expr1073745742 $assertEquals $(@expr1073745743 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4930 $, "" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4931:
4932:
4933: $ctu_ $(@expr1073745746 "void foo(int *p)\n{\n    --p;\n    p[2] = 0;\n}\n\nvoid bar()\n{\n    int p[3];\n    foo(p+1);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4933 $)
4934:
|
4942:
4943: ;
4944: $if $(@expr1073745747 $!@expr1073745748 $assertEquals $(@expr1073745749 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4944 $, "" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4945:
4946:
4947: $ctu_ $(@expr1073745752 "static void get_mac_address(const u8 *strbuf)\n{\n    (strbuf[2]);\n}\n\nstatic void program_mac_address(u32 mem_base)\n{\n    u8 macstrbuf[17] = { 0 };\n    get_mac_address(macstrbuf);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4947 $)
4948:
|
4955:
4956: ;
4957: $if $(@expr1073745753 $!@expr1073745754 $assertEquals $(@expr1073745755 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4957 $, "" $, errout@var100 .@expr3898 str (@expr3899 ) $) $) { $return ; }
4958: }
4959:
4960: void ctu_variable ( ) {
4961: $ctu_ $(@expr1073745758 "void dostuff(int *p) {\n    p[10] = 0;\n}\nint main() {\n  int x = 4;\n  dostuff(&x);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4961 $)
4962:
|
4966:
4967: ;
4968: $if $(@expr1073745759 $!@expr1073745760 $assertEquals $(@expr1073745761 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4968 $, "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 40.\n" $, errout@var100 .@expr1073745762 str (@expr1073745763 ) $) $) { $return ; }
4969: }
4970:
4971: void ctu_arithmetic ( ) {
4972: $ctu_ $(@expr1073745764 "void dostuff(int *p) { x = p + 10; }\nint main() {\n  int x[3];\n  dostuff(x);\n}" $, "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4972 $)
4973:
4974:
4975:
4976: ;
4977: $if $(@expr1073745765 $!@expr1073745766 $assertEquals $(@expr1073745767 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4977 $, "[test.cpp:4] -> [test.cpp:1]: (error) Pointer arithmetic overflow; 'p' buffer size is 12\n" $, errout@var100 .@expr1073745768 str (@expr1073745769 ) $) $) { $return ; }
4978: }
4979:
4980: void objectIndex ( ) {
4981: $check_ $(@expr1073745770 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4981 $, "int f() {\n    int i;\n    return (&i)[1];\n}" $)
4982:
4983:
4984: ;
4985: $if $(@expr1073745771 $!@expr1073745772 $assertEquals $(@expr1073745773 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4985 $, "[test.cpp:3] -> [test.cpp:3]: (error) The address of local variable 'i' is accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return
4986:
4987: ; }
4988:
4989: $check_ $(@expr1073745776 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4989 $, "int f(int j) {\n    int i;\n    return (&i)[j];\n}" $)
4990:
4991:
4992: ;
4993: $if $(@expr1073745777 $!@expr1073745778 $assertEquals $(@expr1073745779 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4993 $, "[test.cpp:3] -> [test.cpp:3]: (warning) The address of local variable 'i' might be accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return
4994:
4995: ; }
4996:
4997: $check_ $(@expr1073745782 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 4997 $, "int f() {\n    int i;\n    return (&i)[0];\n}" $)
4998:
4999:
5000: ;
5001: $if $(@expr1073745783 $!@expr1073745784 $assertEquals $(@expr1073745785 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5001 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5002:
5003: $check_ $(@expr1073745788 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5003 $, "int f(int * i) {\n    return i[1];\n}" $)
5004:
5005: ;
5006: $if $(@expr1073745789 $!@expr1073745790 $assertEquals $(@expr1073745791 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5006 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5007:
5008: $check_ $(@expr1073745794 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5008 $, "int f(std::vector<int> i) {\n    return i[1];\n}" $)
5009:
5010: ;
5011: $if $(@expr1073745795 $!@expr1073745796 $assertEquals $(@expr1073745797 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5011 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5012:
5013: $check_ $(@expr1073745800 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5013 $, "int f(std::vector<int> i) {\n    return i.data()[1];\n}" $)
5014:
5015: ;
5016: $if $(@expr1073745801 $!@expr1073745802 $assertEquals $(@expr1073745803 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5016 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5017:
5018: $check_ $(@expr1073745806 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5018 $, "int* f(std::vector<int>& i) {\n    return &(i[1]);\n}" $)
5019:
5020: ;
5021: $if $(@expr1073745807 $!@expr1073745808 $assertEquals $(@expr1073745809 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5021 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5022:
5023: $check_ $(@expr1073745812 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5023 $, "struct A { int i; int j; };\nint f() {\n    A x;\n    return (&x.i)[0];\n}" $)
5024:
5025:
5026:
5027: ;
5028: $if $(@expr1073745813 $!@expr1073745814 $assertEquals $(@expr1073745815 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5028 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5029:
5030: $check_ $(@expr1073745818 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5030 $, "struct A { int i; int j; };\nint f() {\n    A x;\n    int * i = &x.i;\n    return i[0];\n}" $)
5031:
|
5034:
5035: ;
5036: $if $(@expr1073745819 $!@expr1073745820 $assertEquals $(@expr1073745821 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5036 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5037:
5038: $check_ $(@expr1073745824 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5038 $, "void f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = &x;\n}" $)
5039:
|
5042:
5043: ;
5044: $if $(@expr1073745825 $!@expr1073745826 $assertEquals $(@expr1073745827 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5044 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5045:
5046: $check_ $(@expr1073745830 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5046 $, "int f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  return m[0][1];\n}" $)
5047:
|
5050:
5051: ;
5052: $if $(@expr1073745831 $!@expr1073745832 $assertEquals $(@expr1073745833 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5052 $, "[test.cpp:4] -> [test.cpp:5]: (error) The address of local variable 'x' is accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return
5053:
5054: ; }
5055:
5056: $check_ $(@expr1073745836 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5056 $, "int f(int * y) {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = y;\n  return m[1][1];\n}" $)
5057:
|
5061:
5062: ;
5063: $if $(@expr1073745837 $!@expr1073745838 $assertEquals $(@expr1073745839 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5063 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5064:
5065: $check_ $(@expr1073745842 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5065 $, "void print(char** test);\nint main(){\n    char* test = \"abcdef\";\n    print(&test);\n    return 0;\n}\nvoid print(char** test){\n    for(int i=0;i<strlen(*test);i++)\n        printf(\"%c\",*test[i]);\n}\n" $)
5066:
|
5073:
5074: ;
5075: $todoAssertEquals $(@expr1073745843 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5075 $, "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:9]: (warning) The address of local variable 'test' might be accessed at non-zero index.\n" $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $)
5076:
5077:
5078: ;
5079:
5080: $check_ $(@expr1073745846 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5080 $, "void Bar(uint8_t data);\nvoid Foo(const uint8_t * const data, const uint8_t length) {\n        for(uint8_t index = 0U; index < length ; ++index)\n            Bar(data[index]);\n}\nvoid test() {\n    const uint8_t data = 0U;\n    Foo(&data,1U);\n}\n" $)
5081:
|
5087:
5088: ;
5089: $if $(@expr1073745847 $!@expr1073745848 $assertEquals $(@expr1073745849 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5089 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5090:
5091: $check_ $(@expr1073745852 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5091 $, "int foo(int n, int* p) {\n    int res = 0;\n    for(int i = 0; i < n; i++ )\n        res += p[i];\n    return res;\n}\nint bar() {\n    int single_value = 0;\n    return foo(1, &single_value);\n}\n" $)
5092:
|
5099:
5100: ;
5101: $if $(@expr1073745853 $!@expr1073745854 $assertEquals $(@expr1073745855 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5101 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5102:
5103: $check_ $(@expr1073745858 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5103 $, "void f(const char* app, size_t applen) {\n    char* tmp_de = NULL;\n    char** str = &tmp_de;\n    char* tmp = (char*)realloc(*str, applen + 1);\n    if (tmp) {\n        *str = tmp;\n        memcpy(*str, app, applen);\n        (*str)[applen] = '\\0';\n    }\n    free(*str);\n}\n" , "test.c" $)
5104:
|
5112:
5113: ;
5114: $if $(@expr1073745859 $!@expr1073745860 $assertEquals $(@expr1073745861 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5114 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5115:
5116: $check_ $(@expr1073745864 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5116 $, "template <typename T, unsigned N>\nusing vector = Eigen::Matrix<T, N, 1>;\ntemplate <typename V>\nvoid scharr(image2d<vector<V, 2>>& out) {\n    vector<V, 2>* out_row = &out(r, 0);\n    out_row[c] = vector<V, 2>(1,2);\n}\n" $)
5117:
|
5121:
5122: ;
5123: $if $(@expr1073745865 $!@expr1073745866 $assertEquals $(@expr1073745867 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5123 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5124:
5125: $check_ $(@expr1073745870 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5125 $, "void f(const uint8_t* d, const uint8_t L) {\n    for (uint8_t i = 0U; i < L; ++i)\n        g(d[i]);\n}\nvoid h() {\n    const uint8_t u = 4;\n    f(&u, N);\n}" $)
5126:
|
5131:
5132: ;
5133: $if $(@expr1073745871 $!@expr1073745872 $assertEquals $(@expr1073745873 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5133 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5134:
5135: $check_ $(@expr1073745876 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5135 $, "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[3];\n}\n" $)
5136:
5137: ;
5138: $if $(@expr1073745877 $!@expr1073745878 $assertEquals $(@expr1073745879 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5138 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5139:
5140: $check_ $(@expr1073745882 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5140 $, "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[4];\n}\n" $)
5141:
5142: ;
5143: $if $(@expr1073745883 $!@expr1073745884 $assertEquals $(@expr1073745885 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5143 $, "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5144:
5145: $check_ $(@expr1073745888 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5145 $, "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[3];\n}\n" $)
5146:
5147: ;
5148: $if $(@expr1073745889 $!@expr1073745890 $assertEquals $(@expr1073745891 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5148 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5149:
5150: $check_ $(@expr1073745894 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5150 $, "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[4];\n}\n" $)
5151:
5152: ;
5153: $if $(@expr1073745895 $!@expr1073745896 $assertEquals $(@expr1073745897 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5153 $, "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5154:
5155: $check_ $(@expr1073745900 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5155 $, "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[3];\n}\n" $)
5156:
5157:
5158: ;
5159: $if $(@expr1073745901 $!@expr1073745902 $assertEquals $(@expr1073745903 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5159 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5160:
5161: $check_ $(@expr1073745906 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5161 $, "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[4];\n}\n" $)
5162:
5163:
5164: ;
5165: $if $(@expr1073745907 $!@expr1073745908 $assertEquals $(@expr1073745909 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5165 $, "[test.cpp:2] -> [test.cpp:3]: (error) The address of local variable 'u' is accessed at non-zero index.\n" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5166:
5167: $check_ $(@expr1073745912 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5167 $, "uint32_t f(uint32_t* pu) {\n    uint8_t* p = (uint8_t*)pu;\n    return p[4];\n}\n" $)
5168:
5169:
5170: ;
5171: $if $(@expr1073745913 $!@expr1073745914 $assertEquals $(@expr1073745915 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5171 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5172:
5173: $check_ $(@expr1073745918 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5173 $, "struct S { uint8_t padding[500]; };\nS s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n}\n" $)
5174:
|
5177:
5178: ;
5179: $if $(@expr1073745919 $!@expr1073745920 $assertEquals $(@expr1073745921 "cppcheck-2.8/test/testbufferoverrun.cpp" $, 5179 $, "" $, errout@var100 .@expr3950 str (@expr3951 ) $) $) { $return ; }
5180: }
5181: } ;
5182:
5183: $namespace ${ TestBufferOverrun instance_TestBufferOverrun@var171 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@244}
  v {!<=-1,!>=2,0@244}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 44
  "TestBufferOverrun" always "TestBufferOverrun"
Line 50
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 52
  "" always ""
Line 57
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 58
  code possible {"int f() {\n    int i;\n    return (&i)[1];\n}"@1,"int f(int j) {\n    int i;\n    return (&i)[j];\n}"@2,"int f() {\n    int i;\n    return (&i)[0];\n}"@3,"int f(int * i) {\n    return i[1];\n}"@4,"int f(std::vector<int> i) {\n    return i[1];\n}"@5,"int f(std::vector<int> i) {\n    return i.data()[1];\n}"@6,"int* f(std::vector<int>& i) {\n    return &(i[1]);\n}"@7,"struct A { int i; int j; };\nint f() {\n    A x;\n    return (&x.i)[0];\n}"@8,"struct A { int i; int j; };\nint f() {\n    A x;\n    int * i = &x.i;\n    return i[0];\n}"@9,"void f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = &x;\n}"@10}
Line 59
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testbufferoverrun.cpp"@1,"cppcheck-2.8/test/testbufferoverrun.cpp"@2,"cppcheck-2.8/test/testbufferoverrun.cpp"@3,"cppcheck-2.8/test/testbufferoverrun.cpp"@4,"cppcheck-2.8/test/testbufferoverrun.cpp"@5,"cppcheck-2.8/test/testbufferoverrun.cpp"@6,"cppcheck-2.8/test/testbufferoverrun.cpp"@7,"cppcheck-2.8/test/testbufferoverrun.cpp"@8,"cppcheck-2.8/test/testbufferoverrun.cpp"@9,"cppcheck-2.8/test/testbufferoverrun.cpp"@10}
  line inconclusive {4981@1,4989@2,4997@3,5003@4,5008@5,5013@6,5018@7,5023@8,5030@9,5038@10}
  filename inconclusive {"test.c"@16,"6350.c"@203,"test.cpp"@37,"test.cpp"@38,"test.c"@69}
Line 63
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 66
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 67
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 68
  code possible {"void f() {\n    char c[5];\n    myfread(c, 1, 5, stdin);\n}"@114,"void f() {\n    char c[5];\n    myfread(c, 1, 6, stdin);\n}"@115,"void f() {\n    char str[3];\n    mysprintf(str, \"test\");\n}"@116,"void f() {\n    char str[5];\n    mysprintf(str, \"%s\", \"abcde\");\n}"@117,"int getnumber();\nvoid f()\n{\n    char str[5];\n    mysprintf(str, \"%d: %s\", getnumber(), \"abcde\");\n}"@118,"void f() {\n    char str[5];\n    mysprintf(str, \"test%s\", \"\");\n}"@119,"void f() {\n    char *str = new char[5];\n    mysprintf(str, \"abcde\");\n}"@120,"void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"34\");\n}"@121,"void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"345\");\n}"@122,"struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}"@123}
Line 69
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testbufferoverrun.cpp"@114,"cppcheck-2.8/test/testbufferoverrun.cpp"@115,"cppcheck-2.8/test/testbufferoverrun.cpp"@116,"cppcheck-2.8/test/testbufferoverrun.cpp"@117,"cppcheck-2.8/test/testbufferoverrun.cpp"@118,"cppcheck-2.8/test/testbufferoverrun.cpp"@119,"cppcheck-2.8/test/testbufferoverrun.cpp"@120,"cppcheck-2.8/test/testbufferoverrun.cpp"@121,"cppcheck-2.8/test/testbufferoverrun.cpp"@122,"cppcheck-2.8/test/testbufferoverrun.cpp"@123}
  line inconclusive {4193@114,4199@115,4080@116,4086@117,4092@118,4100@119,4106@120,4112@121,4118@122,4124@123}
  filename inconclusive "test.c"@49
Line 72
  "" always ""
Line 75
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 76
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 79
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 82
  "" always ""
Line 84
  = {&,lifetime[Address]=(settings0),!0}
  & {&,lifetime[Address]=(settings0),!0}
Line 85
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 86
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 87
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 88
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 89
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 90
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 91
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 92
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
Line 95
  1 always 1
  filename possible "test.cpp"
Line 96
  code possible {"#define CKR(B) if (!(B)) { return -1; }\nint f(int i) {\n  const int A[3] = {};\n  CKR(i < 3);\n  if (i > 0)\n      i = A[i];\n  return i;\n}\n"@113,"#define ASSERT(expression, action) if (expression) {action;}\nint array[5];\nvoid func (int index) {\n    ASSERT(index > 5, return);\n    array[index]++;\n}\n"@114}
Line 97
  files always size=1
  0 always 0
Line 102
  filedata always size=0
Line 104
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
  nullptr always 0
Line 108
  settings {lifetime[Address]=(settings0),symbolic=(&settings0),&,!0}
  this always !0
Line 110
  "" always ""
Line 111
  & {lifetime[Address]=(preprocessor),!0}
Line 114
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(settings0),&}
  this always !0
Line 115
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(settings0),&}
  this always !0
Line 119
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "noerr1" always "noerr1"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "noerr2" always "noerr2"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "noerr3" always "noerr3"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "noerr4" always "noerr4"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "sizeof3" always "sizeof3"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "array_index_1" always "array_index_1"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "array_index_2" always "array_index_2"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "array_index_3" always "array_index_3"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "array_index_4" always "array_index_4"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "array_index_6" always "array_index_6"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "array_index_7" always "array_index_7"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "array_index_11" always "array_index_11"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "array_index_12" always "array_index_12"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "array_index_13" always "array_index_13"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "array_index_14" always "array_index_14"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "array_index_15" always "array_index_15"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "array_index_16" always "array_index_16"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "array_index_17" always "array_index_17"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "array_index_18" always "array_index_18"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "array_index_19" always "array_index_19"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "array_index_20" always "array_index_20"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "array_index_21" always "array_index_21"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "array_index_22" always "array_index_22"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "array_index_23" always "array_index_23"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "array_index_24" always "array_index_24"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "array_index_25" always "array_index_25"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "array_index_26" always "array_index_26"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "array_index_27" always "array_index_27"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "array_index_28" always "array_index_28"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "array_index_29" always "array_index_29"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "array_index_30" always "array_index_30"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "array_index_31" always "array_index_31"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "array_index_32" always "array_index_32"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "array_index_33" always "array_index_33"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "array_index_34" always "array_index_34"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "array_index_35" always "array_index_35"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "array_index_36" always "array_index_36"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "array_index_37" always "array_index_37"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "array_index_38" always "array_index_38"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "array_index_39" always "array_index_39"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "array_index_40" always "array_index_40"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "array_index_41" always "array_index_41"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "array_index_42" always "array_index_42"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "array_index_43" always "array_index_43"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "array_index_44" always "array_index_44"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "array_index_45" always "array_index_45"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "array_index_46" always "array_index_46"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "array_index_47" always "array_index_47"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "array_index_48" always "array_index_48"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "array_index_49" always "array_index_49"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "array_index_50" always "array_index_50"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "array_index_51" always "array_index_51"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "array_index_52" always "array_index_52"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "array_index_53" always "array_index_53"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "array_index_54" always "array_index_54"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "array_index_55" always "array_index_55"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "array_index_56" always "array_index_56"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "array_index_57" always "array_index_57"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "array_index_58" always "array_index_58"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "array_index_59" always "array_index_59"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "array_index_60" always "array_index_60"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "array_index_61" always "array_index_61"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "array_index_62" always "array_index_62"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "array_index_63" always "array_index_63"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "array_index_64" always "array_index_64"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "array_index_multidim" always "array_index_multidim"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "array_index_switch_in_for" always "array_index_switch_in_for"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "array_index_for_in_for" always "array_index_for_in_for"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "array_index_bounds" always "array_index_bounds"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "array_index_calculation" always "array_index_calculation"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "array_index_negative1" always "array_index_negative1"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "array_index_negative2" always "array_index_negative2"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "array_index_negative3" always "array_index_negative3"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "array_index_negative4" always "array_index_negative4"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "array_index_negative5" always "array_index_negative5"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "array_index_for_decr" always "array_index_for_decr"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "array_index_varnames" always "array_index_varnames"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "array_index_for_continue" always "array_index_for_continue"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "array_index_for" always "array_index_for"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "array_index_for_neq" always "array_index_for_neq"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "array_index_for_question" always "array_index_for_question"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "array_index_for_andand_oror" always "array_index_for_andand_oror"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "array_index_for_varid0" always "array_index_for_varid0"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "array_index_vla_for" always "array_index_vla_for"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "array_index_extern" always "array_index_extern"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "array_index_cast" always "array_index_cast"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "array_index_string_literal" always "array_index_string_literal"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "array_index_same_struct_and_var_name" always "array_index_same_struct_and_var_name"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "array_index_valueflow" always "array_index_valueflow"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "array_index_valueflow_pointer" always "array_index_valueflow_pointer"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "array_index_function_parameter" always "array_index_function_parameter"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "array_index_enum_array" always "array_index_enum_array"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "array_index_container" always "array_index_container"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "array_index_two_for_loops" always "array_index_two_for_loops"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "array_index_new" always "array_index_new"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "buffer_overrun_2_struct" always "buffer_overrun_2_struct"
  false always 0
  false always 0
Line 224
  ( always {!<=-1,!>=2}
  "buffer_overrun_3" always "buffer_overrun_3"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "buffer_overrun_4" always "buffer_overrun_4"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "buffer_overrun_5" always "buffer_overrun_5"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "buffer_overrun_6" always "buffer_overrun_6"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "buffer_overrun_7" always "buffer_overrun_7"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "buffer_overrun_8" always "buffer_overrun_8"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "buffer_overrun_9" always "buffer_overrun_9"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "buffer_overrun_10" always "buffer_overrun_10"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "buffer_overrun_11" always "buffer_overrun_11"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "buffer_overrun_15" always "buffer_overrun_15"
  false always 0
  false always 0
Line 234
  ( always {!<=-1,!>=2}
  "buffer_overrun_16" always "buffer_overrun_16"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "buffer_overrun_18" always "buffer_overrun_18"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "buffer_overrun_19" always "buffer_overrun_19"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "buffer_overrun_21" always "buffer_overrun_21"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "buffer_overrun_24" always "buffer_overrun_24"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "buffer_overrun_26" always "buffer_overrun_26"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "buffer_overrun_27" always "buffer_overrun_27"
  false always 0
  false always 0
Line 241
  ( always {!<=-1,!>=2}
  "buffer_overrun_29" always "buffer_overrun_29"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "buffer_overrun_30" always "buffer_overrun_30"
  false always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
  "buffer_overrun_31" always "buffer_overrun_31"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "buffer_overrun_32" always "buffer_overrun_32"
  false always 0
  false always 0
Line 245
  ( always {!<=-1,!>=2}
  "buffer_overrun_33" always "buffer_overrun_33"
  false always 0
  false always 0
Line 246
  ( always {!<=-1,!>=2}
  "buffer_overrun_34" always "buffer_overrun_34"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "buffer_overrun_errorpath" always "buffer_overrun_errorpath"
  false always 0
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "buffer_overrun_bailoutIfSwitch" always "buffer_overrun_bailoutIfSwitch"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "buffer_overrun_function_array_argument" always "buffer_overrun_function_array_argument"
  false always 0
  false always 0
Line 250
  ( always {!<=-1,!>=2}
  "possible_buffer_overrun_1" always "possible_buffer_overrun_1"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "buffer_overrun_readSizeFromCfg" always "buffer_overrun_readSizeFromCfg"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "valueflow_string" always "valueflow_string"
  false always 0
  false always 0
Line 260
  ( always {!<=-1,!>=2}
  "pointer_out_of_bounds_1" always "pointer_out_of_bounds_1"
  false always 0
  false always 0
Line 261
  ( always {!<=-1,!>=2}
  "pointer_out_of_bounds_2" always "pointer_out_of_bounds_2"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "pointer_out_of_bounds_3" always "pointer_out_of_bounds_3"
  false always 0
  false always 0
Line 263
  ( always {!<=-1,!>=2}
  "pointer_out_of_bounds_4" always "pointer_out_of_bounds_4"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "pointer_out_of_bounds_sub" always "pointer_out_of_bounds_sub"
  false always 0
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  "strcat1" always "strcat1"
  false always 0
  false always 0
Line 268
  ( always {!<=-1,!>=2}
  "varid1" always "varid1"
  false always 0
  false always 0
Line 269
  ( always {!<=-1,!>=2}
  "varid2" always "varid2"
  false always 0
  false always 0
Line 271
  ( always {!<=-1,!>=2}
  "assign1" always "assign1"
  false always 0
  false always 0
Line 273
  ( always {!<=-1,!>=2}
  "alloc_new" always "alloc_new"
  false always 0
  false always 0
Line 274
  ( always {!<=-1,!>=2}
  "alloc_malloc" always "alloc_malloc"
  false always 0
  false always 0
Line 275
  ( always {!<=-1,!>=2}
  "alloc_string" always "alloc_string"
  false always 0
  false always 0
Line 276
  ( always {!<=-1,!>=2}
  "alloc_alloca" always "alloc_alloca"
  false always 0
  false always 0
Line 279
  ( always {!<=-1,!>=2}
  "minsize_argvalue" always "minsize_argvalue"
  false always 0
  false always 0
Line 280
  ( always {!<=-1,!>=2}
  "minsize_sizeof" always "minsize_sizeof"
  false always 0
  false always 0
Line 281
  ( always {!<=-1,!>=2}
  "minsize_strlen" always "minsize_strlen"
  false always 0
  false always 0
Line 282
  ( always {!<=-1,!>=2}
  "minsize_mul" always "minsize_mul"
  false always 0
  false always 0
Line 283
  ( always {!<=-1,!>=2}
  "unknownType" always "unknownType"
  false always 0
  false always 0
Line 285
  ( always {!<=-1,!>=2}
  "terminateStrncpy1" always "terminateStrncpy1"
  false always 0
  false always 0
Line 286
  ( always {!<=-1,!>=2}
  "terminateStrncpy2" always "terminateStrncpy2"
  false always 0
  false always 0
Line 287
  ( always {!<=-1,!>=2}
  "terminateStrncpy3" always "terminateStrncpy3"
  false always 0
  false always 0
Line 288
  ( always {!<=-1,!>=2}
  "terminateStrncpy4" always "terminateStrncpy4"
  false always 0
  false always 0
Line 289
  ( always {!<=-1,!>=2}
  "recursive_long_time" always "recursive_long_time"
  false always 0
  false always 0
Line 291
  ( always {!<=-1,!>=2}
  "crash1" always "crash1"
  false always 0
  false always 0
Line 292
  ( always {!<=-1,!>=2}
  "crash2" always "crash2"
  false always 0
  false always 0
Line 293
  ( always {!<=-1,!>=2}
  "crash3" always "crash3"
  false always 0
  false always 0
Line 294
  ( always {!<=-1,!>=2}
  "crash4" always "crash4"
  false always 0
  false always 0
Line 295
  ( always {!<=-1,!>=2}
  "crash5" always "crash5"
  false always 0
  false always 0
Line 296
  ( always {!<=-1,!>=2}
  "crash6" always "crash6"
  false always 0
  false always 0
Line 297
  ( always {!<=-1,!>=2}
  "crash7" always "crash7"
  false always 0
  false always 0
Line 299
  ( always {!<=-1,!>=2}
  "insecureCmdLineArgs" always "insecureCmdLineArgs"
  false always 0
  false always 0
Line 300
  ( always {!<=-1,!>=2}
  "checkBufferAllocatedWithStrlen" always "checkBufferAllocatedWithStrlen"
  false always 0
  false always 0
Line 302
  ( always {!<=-1,!>=2}
  "scope" always "scope"
  false always 0
  false always 0
Line 304
  ( always {!<=-1,!>=2}
  "getErrorMessages" always "getErrorMessages"
  false always 0
  false always 0
Line 307
  ( always {!<=-1,!>=2}
  "arrayIndexThenCheck" always "arrayIndexThenCheck"
  false always 0
  false always 0
Line 308
  ( always {!<=-1,!>=2}
  "arrayIndexEarlyReturn" always "arrayIndexEarlyReturn"
  false always 0
  false always 0
Line 310
  ( always {!<=-1,!>=2}
  "bufferNotZeroTerminated" always "bufferNotZeroTerminated"
  false always 0
  false always 0
Line 312
  ( always {!<=-1,!>=2}
  "negativeMemoryAllocationSizeError" always "negativeMemoryAllocationSizeError"
  false always 0
  false always 0
Line 313
  ( always {!<=-1,!>=2}
  "negativeArraySize" always "negativeArraySize"
  false always 0
  false always 0
Line 315
  ( always {!<=-1,!>=2}
  "pointerAddition1" always "pointerAddition1"
  false always 0
  false always 0
Line 317
  ( always {!<=-1,!>=2}
  "ctu_malloc" always "ctu_malloc"
  false always 0
  false always 0
Line 318
  ( always {!<=-1,!>=2}
  "ctu_array" always "ctu_array"
  false always 0
  false always 0
Line 319
  ( always {!<=-1,!>=2}
  "ctu_variable" always "ctu_variable"
  false always 0
  false always 0
Line 320
  ( always {!<=-1,!>=2}
  "ctu_arithmetic" always "ctu_arithmetic"
  false always 0
  false always 0
Line 322
  ( always {!<=-1,!>=2}
  "objectIndex" always "objectIndex"
  false always 0
  false always 0
Line 328
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  328 always 328
  "extern int ab;\nvoid f()\n{\n    if (ab)\n    {\n        char str[50];\n    }\n    if (ab)\n    {\n        char str[50];\n    }\n}" always "extern int ab;\nvoid f()\n{\n    if (ab)\n    {\n        char str[50];\n    }\n    if (ab)\n    {\n        char str[50];\n    }\n}"
Line 340
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  340 always 340
  "" always ""
Line 345
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  345 always 345
  "static char buf[2];\nvoid f1(char *str)\n{\n    strcpy(buf,str);\n}\nvoid f2(char *str)\n{\n    strcat(buf,str);\n}\nvoid f3(char *str)\n{\n    sprintf(buf,\"%s\",str);\n}\nvoid f4(const char str[])\n{\n    strcpy(buf, str);\n}" always "static char buf[2];\nvoid f1(char *str)\n{\n    strcpy(buf,str);\n}\nvoid f2(char *str)\n{\n    strcat(buf,str);\n}\nvoid f3(char *str)\n{\n    sprintf(buf,\"%s\",str);\n}\nvoid f4(const char str[])\n{\n    strcpy(buf, str);\n}"
Line 362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  362 always 362
  "" always ""
Line 367
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  367 always 367
  "struct { char data[10]; } abc;\nstatic char f()\n{\n    char data[1];\n    return abc.data[1];\n}" always "struct { char data[10]; } abc;\nstatic char f()\n{\n    char data[1];\n    return abc.data[1];\n}"
Line 373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  373 always 373
  "" always ""
Line 379
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  379 always 379
  "static void f() {\n    char data[100];\n    const char *p = data + 100;\n}" always "static void f() {\n    char data[100];\n    const char *p = data + 100;\n}"
Line 383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  383 always 383
  "" always ""
Line 387
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  387 always 387
  "struct group { int gr_gid; };\nvoid f()\n{\n    char group[32];\n    snprintf(group, 32, \"%u\", 0);\n    struct group *gr;\n    snprintf(group, 32, \"%u\", gr->gr_gid);\n}" always "struct group { int gr_gid; };\nvoid f()\n{\n    char group[32];\n    snprintf(group, 32, \"%u\", 0);\n    struct group *gr;\n    snprintf(group, 32, \"%u\", gr->gr_gid);\n}"
Line 395
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  395 always 395
  "" always ""
Line 399
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  399 always 399
  "void f()\n{\n    char str[0x10] = {0};\n    str[15] = 0;\n    str[16] = 0;\n}" always "void f()\n{\n    char str[0x10] = {0};\n    str[15] = 0;\n    str[16] = 0;\n}"
Line 405
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  405 always 405
  "[test.cpp:5]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n"
Line 407
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  407 always 407
  "char f()\n{\n    char str[16] = {0};\n    return str[16];\n}" always "char f()\n{\n    char str[16] = {0};\n    return str[16];\n}"
Line 412
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  412 always 412
  "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n"
Line 415
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  415 always 415
  "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 4 ];\n   return y;\n}" always "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 4 ];\n   return y;\n}"
Line 422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  422 always 422
  "[test.cpp:5]: (error) Array 'x[3]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'x[3]' accessed at index 4, which is out of bounds.\n"
Line 424
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  424 always 424
  "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 2 ];\n   return y;\n}" always "int f()\n{\n   int x[ 3 ] = { 0, 1, 2 };\n   int y;\n   y = x[ 2 ];\n   return y;\n}"
Line 431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  431 always 431
  "" always ""
Line 433
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  433 always 433
  "int x[5] = {0};\nint a = x[10];" always "int x[5] = {0};\nint a = x[10];"
Line 435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  435 always 435
  "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n"
Line 437
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  437 always 437
  "int x[5] = {0};\nint a = (x)[10];" always "int x[5] = {0};\nint a = (x)[10];"
Line 439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  439 always 439
  "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:2]: (error) Array 'x[5]' accessed at index 10, which is out of bounds.\n"
Line 444
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  444 always 444
  "void a(int i)\n{\n    char *str = new char[0x10];\n    str[i] = 0;\n}\nvoid b() { a(16); }" always "void a(int i)\n{\n    char *str = new char[0x10];\n    str[i] = 0;\n}\nvoid b() { a(16); }"
Line 450
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  450 always 450
  "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'str[16]' accessed at index 16, which is out of bounds.\n"
Line 454
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  454 always 454
  "char c = \"abc\"[4];" always "char c = \"abc\"[4];"
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  455 always 455
  "[test.cpp:1]: (error) Array '\"abc\"[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:1]: (error) Array '\"abc\"[4]' accessed at index 4, which is out of bounds.\n"
Line 457
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  457 always 457
  "p = &\"abc\"[4];" always "p = &\"abc\"[4];"
Line 458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  458 always 458
  "" always ""
Line 460
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  460 always 460
  "char c = \"\\0abc\"[2];" always "char c = \"\\0abc\"[2];"
Line 461
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  461 always 461
  "" always ""
Line 463
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  463 always 463
  "char c = L\"abc\"[4];" always "char c = L\"abc\"[4];"
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  464 always 464
  "[test.cpp:1]: (error) Array 'L\"abc\"[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:1]: (error) Array 'L\"abc\"[4]' accessed at index 4, which is out of bounds.\n"
Line 468
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  468 always 468
  "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 0; i < 100; i++)\n        sum += val[i];\n}" always "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 0; i < 100; i++)\n        sum += val[i];\n}"
Line 475
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  475 always 475
  "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n"
Line 477
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  477 always 477
  "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; i < 100; i++)\n        sum += val[i];\n}" always "void f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; i < 100; i++)\n        sum += val[i];\n}"
Line 484
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  484 always 484
  "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n"
Line 486
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  486 always 486
  "void f(int a)\n{\n    int val[50];\n    int i, sum=0;\n    for (i = a; i < 100; i++)\n        sum += val[i];\n}" always "void f(int a)\n{\n    int val[50];\n    int i, sum=0;\n    for (i = a; i < 100; i++)\n        sum += val[i];\n}"
Line 493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  493 always 493
  "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'val[50]' accessed at index 99, which is out of bounds.\n"
Line 495
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  495 always 495
  "typedef struct g g2[3];\nvoid foo(char *a)\n{\n  for (int i = 0; i < 4; i++)\n  {\n    a[i]=0;\n  }\n}" always "typedef struct g g2[3];\nvoid foo(char *a)\n{\n  for (int i = 0; i < 4; i++)\n  {\n    a[i]=0;\n  }\n}"
Line 503
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  503 always 503
  "" always ""
Line 505
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  505 always 505
  "void foo(int argc)\n{\n  char a[2];\n  for (int i = 4; i < argc; i++){}\n}" always "void foo(int argc)\n{\n  char a[2];\n  for (int i = 4; i < argc; i++){}\n}"
Line 510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  510 always 510
  "" always ""
Line 512
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  512 always 512
  "void foo(int a[10]) {\n    for (int i=0;i<50;++i) {\n        a[i] = 0;\n    }\n}" always "void foo(int a[10]) {\n    for (int i=0;i<50;++i) {\n        a[i] = 0;\n    }\n}"
Line 517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  517 always 517
  "[test.cpp:3]: (error) Array 'a[10]' accessed at index 49, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[10]' accessed at index 49, which is out of bounds.\n"
Line 521
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  521 always 521
  "struct ABC\n{\n    char str[10];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    abc.str[10] = 0;\n}" always "struct ABC\n{\n    char str[10];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    abc.str[10] = 0;\n}"
Line 531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  531 always 531
  "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n"
Line 533
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  533 always 533
  "struct ABC\n{\n    char str[10];\n};\n\nstatic char f()\n{\n    struct ABC abc;\n    return abc.str[10];\n}" always "struct ABC\n{\n    char str[10];\n};\n\nstatic char f()\n{\n    struct ABC abc;\n    return abc.str[10];\n}"
Line 543
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  543 always 543
  "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'abc.str[10]' accessed at index 10, which is out of bounds.\n"
Line 546
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  546 always 546
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}"
Line 556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  556 always 556
  "" always ""
Line 559
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  559 always 559
  "struct ABC\n{\n    char str[1];\n    int x;\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}" always "struct ABC\n{\n    char str[1];\n    int x;\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[1] = 0;}"
Line 570
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  570 always 570
  "error" always "error"
  "" always ""
Line 575
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  575 always 575
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[10] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[10] = 0;}"
Line 585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  585 always 585
  "" always ""
Line 589
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  589 always 589
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[11] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC) + 10);\n    x->str[11] = 0;}"
Line 599
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  599 always 599
  "[test.cpp:9]: (error) Array 'str[1]' accessed at index 11, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'str[1]' accessed at index 11, which is out of bounds.\n"
  "" always ""
Line 602
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  602 always 602
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC) + 10);\n    x->str[11] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC) + 10);\n    x->str[11] = 0;}"
Line 612
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  612 always 612
  "error" always "error"
  "" always ""
Line 616
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  616 always 616
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC));\n    x->str[1] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(struct ABC));\n    x->str[1] = 0;}"
Line 626
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  626 always 626
  "[test.cpp:9]: (error) Array 'str[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'str[1]' accessed at index 1, which is out of bounds.\n"
  "" always ""
Line 630
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  630 always 630
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC));\n    x->str[1] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC* x = malloc(sizeof(ABC));\n    x->str[1] = 0;}"
Line 640
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  640 always 640
  "error" always "error"
  "" always ""
Line 643
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  643 always 643
  "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC x;\n    x.str[1] = 0;}" always "struct ABC\n{\n    char str[1];\n};\n\nstatic void f()\n{\n    struct ABC x;\n    x.str[1] = 0;}"
Line 653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  653 always 653
  "[test.cpp:9]: (error) Array 'x.str[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'x.str[1]' accessed at index 1, which is out of bounds.\n"
Line 655
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  655 always 655
  "struct foo\n{\n    char str[10];\n};\n\nvoid x()\n{\n    foo f;\n    for ( unsigned int i = 0; i < 64; ++i )\n        f.str[i] = 0;\n}" always "struct foo\n{\n    char str[10];\n};\n\nvoid x()\n{\n    foo f;\n    for ( unsigned int i = 0; i < 64; ++i )\n        f.str[i] = 0;\n}"
Line 666
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  666 always 666
  "[test.cpp:10]: (error) Array 'f.str[10]' accessed at index 63, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'f.str[10]' accessed at index 63, which is out of bounds.\n"
Line 668
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  668 always 668
  "struct AB { char a[NUM]; char b[NUM]; }\nvoid f(struct AB *ab) {\n    ab->a[0] = 0;\n}" always "struct AB { char a[NUM]; char b[NUM]; }\nvoid f(struct AB *ab) {\n    ab->a[0] = 0;\n}"
Line 672
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  672 always 672
  "" always ""
Line 674
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  674 always 674
  "union { char a[1]; int b; } ab;\nvoid f() {\n    ab.a[2] = 0;\n}" always "union { char a[1]; int b; } ab;\nvoid f() {\n    ab.a[2] = 0;\n}"
Line 678
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  678 always 678
  "[test.cpp:3]: (error) Array 'ab.a[1]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'ab.a[1]' accessed at index 2, which is out of bounds.\n"
Line 683
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  683 always 683
  "struct ABC\n{\n    char str[10];\n};\n\nstatic void f(struct ABC *abc)\n{\n    abc->str[10] = 0;\n}" always "struct ABC\n{\n    char str[10];\n};\n\nstatic void f(struct ABC *abc)\n{\n    abc->str[10] = 0;\n}"
Line 692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  692 always 692
  "[test.cpp:8]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:8]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n"
Line 696
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  696 always 696
  "class ABC\n{\npublic:\n    ABC();\n    char *str[10];\n    struct ABC *next();\n};\n\nstatic void f(ABC *abc1)\n{\n    for ( ABC *abc = abc1; abc; abc = abc->next() )\n    {\n        abc->str[10] = 0;\n    }\n}" always "class ABC\n{\npublic:\n    ABC();\n    char *str[10];\n    struct ABC *next();\n};\n\nstatic void f(ABC *abc1)\n{\n    for ( ABC *abc = abc1; abc; abc = abc->next() )\n    {\n        abc->str[10] = 0;\n    }\n}"
Line 711
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  711 always 711
  "[test.cpp:13]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:13]: (error) Array 'abc->str[10]' accessed at index 10, which is out of bounds.\n"
Line 715
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  715 always 715
  "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    Fred();\n};\nFred::Fred()\n{\n    str[10] = 0;\n}" always "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    Fred();\n};\nFred::Fred()\n{\n    str[10] = 0;\n}"
Line 726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  726 always 726
  "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n"
Line 728
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  728 always 728
  "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    char c();\n};\nchar Fred::c()\n{\n    return str[10];\n}" always "class Fred\n{\nprivate:\n    char str[10];\npublic:\n    char c();\n};\nchar Fred::c()\n{\n    return str[10];\n}"
Line 739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  739 always 739
  "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'str[10]' accessed at index 10, which is out of bounds.\n"
Line 743
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  743 always 743
  "void f()\n{\n    char buf[10];\n    for (int i = 0; i < 100; i++)\n    {\n        if (i < 10)\n            int x = buf[i];\n    }\n}" always "void f()\n{\n    char buf[10];\n    for (int i = 0; i < 100; i++)\n    {\n        if (i < 10)\n            int x = buf[i];\n    }\n}"
Line 752
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  752 always 752
  "" always ""
Line 756
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  756 always 756
  "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+10] = i;\n}" always "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+10] = i;\n}"
Line 762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  762 always 762
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n"
Line 766
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  766 always 766
  "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[10+i] = i;\n}" always "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[10+i] = i;\n}"
Line 772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  772 always 772
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n"
Line 776
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  776 always 776
  "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+1] = i;\n}" always "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i+1] = i;\n}"
Line 782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  782 always 782
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n"
Line 786
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  786 always 786
  "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i*2] = i;\n}" always "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i*2] = i;\n}"
Line 792
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  792 always 792
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index 18, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index 18, which is out of bounds.\n"
Line 794
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  794 always 794
  "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+5] = i;\n}" always "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+5] = i;\n}"
Line 800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  800 always 800
  "" always ""
Line 802
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  802 always 802
  "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+6] = i;\n}" always "void f()\n{\n    int a[12];\n    for (int i = 0; i < 12; i+=6)\n        a[i+6] = i;\n}"
Line 808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  808 always 808
  "[test.cpp:5]: (error) Array 'a[12]' accessed at index 12, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[12]' accessed at index 12, which is out of bounds.\n"
Line 810
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  810 always 810
  "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        a[i] = 0;\n}" always "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        a[i] = 0;\n}"
Line 815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  815 always 815
  "[test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n"
Line 817
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  817 always 817
  "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        do_stuff(a+i);\n}" always "void f() {\n    int a[2];\n    for (int i = 0; i < 4; i+=2)\n        do_stuff(a+i);\n}"
Line 822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  822 always 822
  "" always ""
Line 826
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  826 always 826
  "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}" always "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}"
Line 835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  835 always 835
  "" always ""
Line 837
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  837 always 837
  "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i++;\n    }\n}" always "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i++;\n    }\n}"
Line 846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  846 always 846
  "" always ""
Line 848
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  848 always 848
  "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        ++i;\n    }\n}" always "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        ++i;\n    }\n}"
Line 857
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  857 always 857
  "" always ""
Line 859
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  859 always 859
  "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i=4;\n    }\n}" always "void f()\n{\n    int a[5];\n    for (int i = 0; i < 6; i++)\n    {\n        a[i] = i;\n        i=4;\n    }\n}"
Line 868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  868 always 868
  "" always ""
Line 870
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  870 always 870
  "void f()\n{\n    int a[6];\n    for (int i = 0; i < 7; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}" always "void f()\n{\n    int a[6];\n    for (int i = 0; i < 7; i++)\n    {\n        a[i] = i;\n        i+=1;\n    }\n}"
Line 879
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  879 always 879
  "[test.cpp:6]: (error) Buffer overrun\n" always "[test.cpp:6]: (error) Buffer overrun\n"
  "" always ""
Line 884
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  884 always 884
  "void f()\n{\n  char a[2];\n  char *end = &(a[2]);\n}" always "void f()\n{\n  char a[2];\n  char *end = &(a[2]);\n}"
Line 889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  889 always 889
  "" always ""
Line 892
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  892 always 892
  "void f()\n{\n  char a[2];\n  char *end = &(a[3]);\n}" always "void f()\n{\n  char a[2];\n  char *end = &(a[3]);\n}"
Line 897
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  897 always 897
  "[test.cpp:4]: (error) Array 'a[2]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2]' accessed at index 3, which is out of bounds.\n"
Line 901
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  901 always 901
  "void f()\n{\n char a[8];\n int b[10];\n for ( int i = 0; i < 9; i++ )\n  b[i] = 0;\n}" always "void f()\n{\n char a[8];\n int b[10];\n for ( int i = 0; i < 9; i++ )\n  b[i] = 0;\n}"
Line 908
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  908 always 908
  "" always ""
Line 912
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  912 always 912
  "class A {\n int indices[2];\n void foo(int indices[3]);\n};\n\nvoid A::foo(int indices[3]) {\n for(int j=0; j<3; ++j) {\n  int b = indices[j];\n }\n}" always "class A {\n int indices[2];\n void foo(int indices[3]);\n};\n\nvoid A::foo(int indices[3]) {\n for(int j=0; j<3; ++j) {\n  int b = indices[j];\n }\n}"
Line 922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  922 always 922
  "" always ""
Line 926
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  926 always 926
  "int main() {\n  size_t indices[2];\n  int b = indices[2];\n}" always "int main() {\n  size_t indices[2];\n  int b = indices[2];\n}"
Line 930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  930 always 930
  "[test.cpp:3]: (error) Array 'indices[2]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'indices[2]' accessed at index 2, which is out of bounds.\n"
Line 934
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  934 always 934
  "void foo()\n{\n    char c[10];\n    c[1<<23]='a';\n}" always "void foo()\n{\n    char c[10];\n    c[1<<23]='a';\n}"
Line 939
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  939 always 939
  "[test.cpp:4]: (error) Array 'c[10]' accessed at index 8388608, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'c[10]' accessed at index 8388608, which is out of bounds.\n"
Line 944
  == always {!<=-1,!>=2}
  'u' always 117
  "256" always "256"
  : always "128"
  "128" always "128"
Line 945
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  945 always 945
  "void f(char n) {\n    int a[n];\n    a[-1] = 0;\n    a[" always "void f(char n) {\n    int a[n];\n    a[-1] = 0;\n    a["
  "] = 0;\n}\n" always "] = 0;\n}\n"
  ( {lifetime[Object]=("void f(char n) {\n    int a[n];\n    a[-1] = 0;\n    a["+charMaxPlusOne+"] = 0;\n}\n"),!0}
Line 950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  950 always 950
  "[test.cpp:3]: (error) Array 'a[" always "[test.cpp:3]: (error) Array 'a["
  "]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[" always "]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a["
  "]' accessed at index " always "]' accessed at index "
  ", which is out of bounds.\n" always ", which is out of bounds.\n"
Line 953
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  953 always 953
  "void f(signed char n) {\n    int a[n];\n    a[-1] = 0;\n    a[128] = 0;\n}" always "void f(signed char n) {\n    int a[n];\n    a[-1] = 0;\n    a[128] = 0;\n}"
Line 958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  958 always 958
  "[test.cpp:3]: (error) Array 'a[128]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[128]' accessed at index 128, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[128]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[128]' accessed at index 128, which is out of bounds.\n"
Line 961
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  961 always 961
  "void f(unsigned char n) {\n    int a[n];\n    a[-1] = 0;\n    a[256] = 0;\n}" always "void f(unsigned char n) {\n    int a[n];\n    a[-1] = 0;\n    a[256] = 0;\n}"
Line 966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  966 always 966
  "[test.cpp:3]: (error) Array 'a[256]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[256]' accessed at index 256, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[256]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[256]' accessed at index 256, which is out of bounds.\n"
Line 969
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  969 always 969
  "void f(short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}" always "void f(short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}"
Line 974
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  974 always 974
  "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n"
Line 977
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  977 always 977
  "void f(unsigned short n) {\n    int a[n];\n    a[-1] = 0;\n    a[65536] = 0;\n}" always "void f(unsigned short n) {\n    int a[n];\n    a[-1] = 0;\n    a[65536] = 0;\n}"
Line 982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  982 always 982
  "[test.cpp:3]: (error) Array 'a[65536]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[65536]' accessed at index 65536, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[65536]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[65536]' accessed at index 65536, which is out of bounds.\n"
Line 985
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  985 always 985
  "void f(signed short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}" always "void f(signed short n) {\n    int a[n];\n    a[-1] = 0;\n    a[32768] = 0;\n}"
Line 990
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  990 always 990
  "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[32768]' accessed at index -1, which is out of bounds.\n[test.cpp:4]: (error) Array 'a[32768]' accessed at index 32768, which is out of bounds.\n"
Line 993
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  993 always 993
  "void f(int n) {\n    int a[n];\n    a[-1] = 0;\n}" always "void f(int n) {\n    int a[n];\n    a[-1] = 0;\n}"
Line 997
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  997 always 997
  "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n"
Line 999
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  999 always 999
  "void f(unsigned int n) {\n    int a[n];\n    a[-1] = 0;\n}" always "void f(unsigned int n) {\n    int a[n];\n    a[-1] = 0;\n}"
Line 1003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1003 always 1003
  "[test.cpp:3]: (error) Array 'a[4294967296]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[4294967296]' accessed at index -1, which is out of bounds.\n"
Line 1005
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1005 always 1005
  "void f(signed int n) {\n    int a[n];\n    a[-1] = 0;\n}" always "void f(signed int n) {\n    int a[n];\n    a[-1] = 0;\n}"
Line 1009
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1009 always 1009
  "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[2147483648]' accessed at index -1, which is out of bounds.\n"
Line 1013
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1013 always 1013
  "void foo()\n{\n   long l[SOME_SIZE];\n}" always "void foo()\n{\n   long l[SOME_SIZE];\n}"
Line 1017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1017 always 1017
  "" always ""
Line 1021
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1021 always 1021
  "void f()\n{\n    int a[3];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}" always "void f()\n{\n    int a[3];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}"
Line 1027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1027 always 1027
  "[test.cpp:5]: (error) Array 'a[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[3]' accessed at index 3, which is out of bounds.\n"
Line 1029
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1029 always 1029
  "void f()\n{\n    int a[4];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}" always "void f()\n{\n    int a[4];\n    for (int i = 3; 0 <= i; i--)\n        a[i] = i;\n}"
Line 1035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1035 always 1035
  "" always ""
Line 1039
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1039 always 1039
  "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i-1] = a[i];\n}" always "void f()\n{\n    int a[10];\n    for (int i = 0; i < 10; i++)\n        a[i-1] = a[i];\n}"
Line 1045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1045 always 1045
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n"
Line 1050
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1050 always 1050
  "void f()\n{\n    int i[2];\n    int *ip = i + 1;\n    ip[-10] = 1;\n}" always "void f()\n{\n    int i[2];\n    int *ip = i + 1;\n    ip[-10] = 1;\n}"
Line 1056
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1056 always 1056
  "[test.cpp:5]: (error) Array ip[-10] out of bounds.\n" always "[test.cpp:5]: (error) Array ip[-10] out of bounds.\n"
  "" always ""
Line 1061
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1061 always 1061
  "void f()\n{\n    int iBuf[10];    int *i = iBuf + 9;    int *ii = i + -5;    ii[10] = 0;}" always "void f()\n{\n    int iBuf[10];    int *i = iBuf + 9;    int *ii = i + -5;    ii[10] = 0;}"
Line 1068
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1068 always 1068
  "[test.cpp:6]: (error) Array ii[10] out of bounds.\n" always "[test.cpp:6]: (error) Array ii[10] out of bounds.\n"
  "" always ""
Line 1074
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1074 always 1074
  "void f() {\n    UINT8 x[2];\n    x[5] = 0;\n}" always "void f() {\n    UINT8 x[2];\n    x[5] = 0;\n}"
Line 1078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1078 always 1078
  "[test.cpp:3]: (error) Array 'x[2]' accessed at index 5, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'x[2]' accessed at index 5, which is out of bounds.\n"
Line 1083
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1083 always 1083
  "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[0] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}" always "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[0] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}"
Line 1095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1095 always 1095
  "" always ""
Line 1097
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1097 always 1097
  "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[4] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}" always "struct s1 {\n    unknown_type_t delay[3];\n};\n\nvoid x(unknown_type_t *delay, const int *net) {\n    delay[4] = 0;\n}\n\nvoid y() {\n    struct s1 obj;\n    x(obj.delay, 123);\n}"
Line 1109
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1109 always 1109
  "[test.cpp:11] -> [test.cpp:6]: (error) Array 'obj.delay[3]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:11] -> [test.cpp:6]: (error) Array 'obj.delay[3]' accessed at index 4, which is out of bounds.\n"
  "" always ""
Line 1113
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1113 always 1113
  "struct s1 {\n    float a[0];\n};\n\nvoid f() {\n    struct s1 *obj;\n}" always "struct s1 {\n    float a[0];\n};\n\nvoid f() {\n    struct s1 *obj;\n}"
Line 1120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1120 always 1120
  "" always ""
Line 1124
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1124 always 1124
  "class X\n{\n    public:\n    X()\n    {\n       m_x[0] = 0;\n       m_x[1] = 0;\n    }\n    int m_x[1];\n};" always "class X\n{\n    public:\n    X()\n    {\n       m_x[0] = 0;\n       m_x[1] = 0;\n    }\n    int m_x[1];\n};"
Line 1134
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1134 always 1134
  "[test.cpp:7]: (error) Array 'm_x[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'm_x[1]' accessed at index 1, which is out of bounds.\n"
Line 1138
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1138 always 1138
  "void foo(char bar[][4]) {\n    baz(bar[5]);\n}" always "void foo(char bar[][4]) {\n    baz(bar[5]);\n}"
Line 1141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1141 always 1141
  "" always ""
Line 1145
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1145 always 1145
  "void foo() {\n    int y[2][2][2];\n    y[0][2][0] = 0;\n    y[0][0][2] = 0;\n}" always "void foo() {\n    int y[2][2][2];\n    y[0][2][0] = 0;\n    y[0][0][2] = 0;\n}"
Line 1150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1150 always 1150
  "[test.cpp:3]: (error) Array 'y[2][2][2]' accessed at index y[0][2][0], which is out of bounds.\n[test.cpp:4]: (error) Array 'y[2][2][2]' accessed at index y[0][0][2], which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'y[2][2][2]' accessed at index y[0][2][0], which is out of bounds.\n[test.cpp:4]: (error) Array 'y[2][2][2]' accessed at index y[0][0][2], which is out of bounds.\n"
Line 1153
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1153 always 1153
  "struct TEST\n{\n    char a[10];\n    char b[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[10] = 3;\n    test.b[10][2] = 4;\n    test.b[0][19] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[10] = 3;\n    ptest->b[10][2] = 4;\n    ptest->b[0][19] = 4;\n}" always "struct TEST\n{\n    char a[10];\n    char b[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[10] = 3;\n    test.b[10][2] = 4;\n    test.b[0][19] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[10] = 3;\n    ptest->b[10][2] = 4;\n    ptest->b[0][19] = 4;\n}"
Line 1170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1170 always 1170
  "[test.cpp:9]: (error) Array 'test.a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:10]: (error) Array 'test.b[10][5]' accessed at index test.b[10][2], which is out of bounds.\n[test.cpp:11]: (error) Array 'test.b[10][5]' accessed at index test.b[0][19], which is out of bounds.\n[test.cpp:14]: (error) Array 'ptest->a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:15]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[10][2], which is out of bounds.\n[test.cpp:16]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[0][19], which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'test.a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:10]: (error) Array 'test.b[10][5]' accessed at index test.b[10][2], which is out of bounds.\n[test.cpp:11]: (error) Array 'test.b[10][5]' accessed at index test.b[0][19], which is out of bounds.\n[test.cpp:14]: (error) Array 'ptest->a[10]' accessed at index 10, which is out of bounds.\n[test.cpp:15]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[10][2], which is out of bounds.\n[test.cpp:16]: (error) Array 'ptest->b[10][5]' accessed at index ptest->b[0][19], which is out of bounds.\n"
Line 1177
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1177 always 1177
  "struct TEST\n{\n    char a[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[9][5] = 4;\n    test.a[0][50] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[9][5] = 4;\n    ptest->a[0][50] = 4;\n}" always "struct TEST\n{\n    char a[10][5];\n};\nvoid foo()\n{\n    TEST test;\n    test.a[9][5] = 4;\n    test.a[0][50] = 4;\n    TEST *ptest;\n    ptest = &test;\n    ptest->a[9][5] = 4;\n    ptest->a[0][50] = 4;\n}"
Line 1191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1191 always 1191
  "[test.cpp:8]: (error) Array 'test.a[10][5]' accessed at index test.a[9][5], which is out of bounds.\n[test.cpp:9]: (error) Array 'test.a[10][5]' accessed at index test.a[0][50], which is out of bounds.\n[test.cpp:12]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[9][5], which is out of bounds.\n[test.cpp:13]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[0][50], which is out of bounds.\n" always "[test.cpp:8]: (error) Array 'test.a[10][5]' accessed at index test.a[9][5], which is out of bounds.\n[test.cpp:9]: (error) Array 'test.a[10][5]' accessed at index test.a[0][50], which is out of bounds.\n[test.cpp:12]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[9][5], which is out of bounds.\n[test.cpp:13]: (error) Array 'ptest->a[10][5]' accessed at index ptest->a[0][50], which is out of bounds.\n"
Line 1198
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1198 always 1198
  "void f() {\n    struct Struct { unsigned m_Var[1]; } s;\n    s.m_Var[1] = 1;\n}" always "void f() {\n    struct Struct { unsigned m_Var[1]; } s;\n    s.m_Var[1] = 1;\n}"
Line 1202
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1202 always 1202
  "[test.cpp:3]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n"
Line 1204
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1204 always 1204
  "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct s;\n    s.m_Var[1] = 1;\n}" always "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct s;\n    s.m_Var[1] = 1;\n}"
Line 1209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1209 always 1209
  "[test.cpp:4]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's.m_Var[1]' accessed at index 1, which is out of bounds.\n"
Line 1211
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1211 always 1211
  "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct * s = calloc(40);\n    s->m_Var[1] = 1;\n}" always "struct Struct { unsigned m_Var[1]; };\nvoid f() {\n    struct Struct * s = calloc(40);\n    s->m_Var[1] = 1;\n}"
Line 1216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1216 always 1216
  "" always ""
Line 1220
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1220 always 1220
  "class Fred {\n    Fred(const Fred &);\nprivate:\n    bool m_b[2];\n};\nFred::Fred(const Fred & rhs) {\n    m_b[2] = rhs.m_b[2];\n}" always "class Fred {\n    Fred(const Fred &);\nprivate:\n    bool m_b[2];\n};\nFred::Fred(const Fred & rhs) {\n    m_b[2] = rhs.m_b[2];\n}"
Line 1228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1228 always 1228
  "[test.cpp:7]: (error) Array 'm_b[2]' accessed at index 2, which is out of bounds.\n[test.cpp:7]: (error) Array 'rhs.m_b[2]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'm_b[2]' accessed at index 2, which is out of bounds.\n[test.cpp:7]: (error) Array 'rhs.m_b[2]' accessed at index 2, which is out of bounds.\n"
Line 1233
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1233 always 1233
  "class Fred {\n    char x[X];\n    Fred() {\n        for (unsigned int i = 0; i < 15; i++)\n            i;\n    }\n}" always "class Fred {\n    char x[X];\n    Fred() {\n        for (unsigned int i = 0; i < 15; i++)\n            i;\n    }\n}"
Line 1240
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1240 always 1240
  "" always ""
Line 1244
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1244 always 1244
  "void aFunction() {\n    double aDoubleArray[ 10 ];\n    unsigned int i; i = 0;\n    for( i = 0; i < 6; i++ )\n    {\n        unsigned int j; j = 0;\n        for( j = 0; j < 5; j++ )\n        {\n            unsigned int x; x = 0;\n            for( x = 0; x < 4; x++ )\n            {\n            }\n        }\n    }\n}" always "void aFunction() {\n    double aDoubleArray[ 10 ];\n    unsigned int i; i = 0;\n    for( i = 0; i < 6; i++ )\n    {\n        unsigned int j; j = 0;\n        for( j = 0; j < 5; j++ )\n        {\n            unsigned int x; x = 0;\n            for( x = 0; x < 4; x++ )\n            {\n            }\n        }\n    }\n}"
Line 1259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1259 always 1259
  "" always ""
Line 1263
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1263 always 1263
  "void aFunction()\n{\n    char a[10];\n    a[10] = 0;\n}" always "void aFunction()\n{\n    char a[10];\n    a[10] = 0;\n}"
Line 1268
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1268 always 1268
  "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n"
Line 1272
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1272 always 1272
  "void f() {\n    char a[10];\n    for (int i = 0; i < 10; ++i)\n        f2(&a[i + 1]);\n}" always "void f() {\n    char a[10];\n    for (int i = 0; i < 10; ++i)\n        f2(&a[i + 1]);\n}"
Line 1277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1277 always 1277
  "" always ""
Line 1282
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1282 always 1282
  "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n}" always "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n}"
Line 1290
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1290 always 1290
  "" always ""
Line 1292
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1292 always 1292
  "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n    fred.data[4] = 0;\n}" always "void a() {\n    struct Fred { char data[6]; } fred;\n    fred.data[4] = 0;\n}\n\nvoid b() {\n    struct Fred { char data[3]; } fred;\n    fred.data[4] = 0;\n}"
Line 1301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1301 always 1301
  "[test.cpp:8]: (error) Array 'fred.data[3]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:8]: (error) Array 'fred.data[3]' accessed at index 4, which is out of bounds.\n"
Line 1306
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1306 always 1306
  "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[10] = 7;\n  free(p);\n}" always "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[10] = 7;\n  free(p);\n}"
Line 1312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1312 always 1312
  "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n"
Line 1314
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1314 always 1314
  "void f()\n{\n  float *p; p = (float *)malloc(10 * sizeof(float));\n  p[10] = 7;\n  free(p);\n}" always "void f()\n{\n  float *p; p = (float *)malloc(10 * sizeof(float));\n  p[10] = 7;\n  free(p);\n}"
Line 1320
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1320 always 1320
  "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n"
Line 1322
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1322 always 1322
  "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[0] = 0;\n  p[9] = 9;\n  free(p);\n}" always "void f()\n{\n  char *p; p = (char *)malloc(10);\n  p[0] = 0;\n  p[9] = 9;\n  free(p);\n}"
Line 1329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1329 always 1329
  "" always ""
Line 1331
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1331 always 1331
  "void f()\n{\n  char *p; p = new char[10];\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" always "void f()\n{\n  char *p; p = new char[10];\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}"
Line 1338
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1338 always 1338
  "" always ""
Line 1340
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1340 always 1340
  "void f()\n{\n  char *p(new char[10]);\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" always "void f()\n{\n  char *p(new char[10]);\n  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}"
Line 1347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1347 always 1347
  "" always ""
Line 1349
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1349 always 1349
  "void f()\n{\n  char *p = NULL;  try{\n  p = new char[10];\n  }\n  catch(...){\n  return;\n  }  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}" always "void f()\n{\n  char *p = NULL;  try{\n  p = new char[10];\n  }\n  catch(...){\n  return;\n  }  p[0] = 0;\n  p[9] = 9;\n  delete [] p;\n}"
Line 1362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1362 always 1362
  "" always ""
Line 1367
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1367 always 1367
  "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 3 ];\n   return y;\n}" always "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 3 ];\n   return y;\n}"
Line 1379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1379 always 1379
  "[test.cpp:10]: (error) Array 'var[0].arr[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'var[0].arr[3]' accessed at index 3, which is out of bounds.\n"
Line 1381
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1381 always 1381
  "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y=1;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 2 ];\n   return y;\n}" always "int f( )\n{\n  struct {\n    int arr[ 3 ];\n  } var[ 1 ];\n   int y=1;\n   var[ 0 ].arr[ 0 ] = 0;\n   var[ 0 ].arr[ 1 ] = 1;\n   var[ 0 ].arr[ 2 ] = 2;\n   y = var[ 0 ].arr[ 2 ];\n   return y;\n}"
Line 1393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1393 always 1393
  "" always ""
Line 1396
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1396 always 1396
  "int f( ){\nstruct Struct{\n    int arr[ 3 ];\n};\nint y;\nStruct var;\nvar.arr[ 0 ] = 0;\nvar.arr[ 1 ] = 1;\nvar.arr[ 2 ] = 2;\nvar.arr[ 3 ] = 3;\ny=var.arr[ 3 ];\nreturn y;\n}" always "int f( ){\nstruct Struct{\n    int arr[ 3 ];\n};\nint y;\nStruct var;\nvar.arr[ 0 ] = 0;\nvar.arr[ 1 ] = 1;\nvar.arr[ 2 ] = 2;\nvar.arr[ 3 ] = 3;\ny=var.arr[ 3 ];\nreturn y;\n}"
Line 1409
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1409 always 1409
  "[test.cpp:10]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n[test.cpp:11]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n[test.cpp:11]: (error) Array 'var.arr[3]' accessed at index 3, which is out of bounds.\n"
Line 1413
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1413 always 1413
  "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\nvar[0].var[ 4 ] = 4;\n}" always "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\nvar[0].var[ 4 ] = 4;\n}"
Line 1423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1423 always 1423
  "[test.cpp:9]: (error) Array 'var[0].var[3]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'var[0].var[3]' accessed at index 4, which is out of bounds.\n"
Line 1425
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1425 always 1425
  "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\n}" always "void f( ) {\nstruct S{\n    int var[ 3 ];\n} ;\nS var[2];\nvar[0].var[ 0 ] = 0;\nvar[0].var[ 1 ] = 1;\nvar[0].var[ 2 ] = 2;\n}"
Line 1434
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1434 always 1434
  "" always ""
Line 1437
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1437 always 1437
  "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab;\n    int * p = &ab.a[10];\n    return 0;\n}" always "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab;\n    int * p = &ab.a[10];\n    return 0;\n}"
Line 1443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1443 always 1443
  "" always ""
Line 1445
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1445 always 1445
  "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[0].a[10];\n    return 0;\n}" always "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[0].a[10];\n    return 0;\n}"
Line 1451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1451 always 1451
  "" always ""
Line 1453
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1453 always 1453
  "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[10].a[0];\n    return 0;\n}" always "struct AB { int a[10]; int b[10]; };\nint main() {\n    struct AB ab[1];\n    int * p = &ab[10].a[0];\n    return 0;\n}"
Line 1459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1459 always 1459
  "[test.cpp:4]: (error) Array 'ab[1]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'ab[1]' accessed at index 10, which is out of bounds.\n"
Line 1464
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1464 always 1464
  "void f()\n{\n    char buf[2];\n    int i;\n    for (i = 2; --i >= 0; )\n    {\n        buf[i] = 1;\n    }\n}" always "void f()\n{\n    char buf[2];\n    int i;\n    for (i = 2; --i >= 0; )\n    {\n        buf[i] = 1;\n    }\n}"
Line 1473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1473 always 1473
  "" always ""
Line 1475
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1475 always 1475
  "void f()\n{\n    double buf[2];\n    for (int i = 2; i--; )\n    {\n        buf[i] = 2.;\n    }\n}" always "void f()\n{\n    double buf[2];\n    for (int i = 2; i--; )\n    {\n        buf[i] = 2.;\n    }\n}"
Line 1483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1483 always 1483
  "" always ""
Line 1488
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1488 always 1488
  "void f(const char *format, ...) {\n    va_args args;\n    va_start(args, format);\n}\nvoid test() {\n    CHAR buffer[1024];\n    f(\"%s\", buffer);\n}" always "void f(const char *format, ...) {\n    va_args args;\n    va_start(args, format);\n}\nvoid test() {\n    CHAR buffer[1024];\n    f(\"%s\", buffer);\n}"
Line 1496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1496 always 1496
  "" always ""
Line 1499
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1499 always 1499
  "void f(char *) {\n    dostuff();\n}\nvoid test() {\n    char buffer[1024];\n    f(buffer);\n}" always "void f(char *) {\n    dostuff();\n}\nvoid test() {\n    char buffer[1024];\n    f(buffer);\n}"
Line 1506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1506 always 1506
  "" always ""
Line 1512
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1512 always 1512
  "void bufferAccessOutOfBounds2() {\n    char *buffer[]={\"a\",\"b\",\"c\"};\n    for(int i=3; i--;) {\n        printf(\"files(%i): %s\", 3-i, buffer[3-i]);\n    }\n}" always "void bufferAccessOutOfBounds2() {\n    char *buffer[]={\"a\",\"b\",\"c\"};\n    for(int i=3; i--;) {\n        printf(\"files(%i): %s\", 3-i, buffer[3-i]);\n    }\n}"
Line 1518
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1518 always 1518
  "[test.cpp:4]: (error) Array 'buffer[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'buffer[3]' accessed at index 3, which is out of bounds.\n"
  "" always ""
Line 1520
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1520 always 1520
  "void f() {\n    int buffer[9];\n    long int i;\n    for(i=10; i--;) {\n        buffer[i] = i;\n    }\n}" always "void f() {\n    int buffer[9];\n    long int i;\n    for(i=10; i--;) {\n        buffer[i] = i;\n    }\n}"
Line 1527
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1527 always 1527
  "[test.cpp:5]: (error) Array 'buffer[9]' accessed at index 9, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'buffer[9]' accessed at index 9, which is out of bounds.\n"
Line 1530
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1530 always 1530
  "void f() {\n    int buffer[10];\n    for(unsigned long int i=10; i--;) {\n        buffer[i] = i;\n    }\n}" always "void f() {\n    int buffer[10];\n    for(unsigned long int i=10; i--;) {\n        buffer[i] = i;\n    }\n}"
Line 1536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1536 always 1536
  "" always ""
Line 1541
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1541 always 1541
  "int s[4];\nvoid f() {\n    for (int i = 2; i < 0; i++)\n        s[i] = 5;\n}" always "int s[4];\nvoid f() {\n    for (int i = 2; i < 0; i++)\n        s[i] = 5;\n}"
Line 1546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1546 always 1546
  "" always ""
Line 1551
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1551 always 1551
  "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        printf(\" %i\", i);\n        array[i] = 0;\n    }\n}" always "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        printf(\" %i\", i);\n        array[i] = 0;\n    }\n}"
Line 1559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1559 always 1559
  "[test.cpp:6]: (error) Array 'array[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'array[4]' accessed at index 4, which is out of bounds.\n"
Line 1561
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1561 always 1561
  "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        scanf(\"%i\", &i);\n        array[i] = 0;\n    }\n}" always "void test(void)\n{\n    int array[4] = { 1,2,3,4 };\n    for (int i = 1; i <= 4; i++) {\n        scanf(\"%i\", &i);\n        array[i] = 0;\n    }\n}"
Line 1569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1569 always 1569
  "" always ""
Line 1574
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1574 always 1574
  "void f() {\n    int i, k;\n    int arr[34] = {};\n    i = 1;\n    for (k = 0; k < 34 && i < 34; k++) {\n        i++;\n    }\n    arr[k];\n}" always "void f() {\n    int i, k;\n    int arr[34] = {};\n    i = 1;\n    for (k = 0; k < 34 && i < 34; k++) {\n        i++;\n    }\n    arr[k];\n}"
Line 1583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1583 always 1583
  "" always ""
Line 1587
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1587 always 1587
  "void f(const char * str) {\n    int len = strlen(str);\n    (void)str[len - 1];\n}\nvoid g() {\n    f(\"12345678\");\n    f(\"12345\");\n}" always "void f(const char * str) {\n    int len = strlen(str);\n    (void)str[len - 1];\n}\nvoid g() {\n    f(\"12345678\");\n    f(\"12345\");\n}"
Line 1595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1595 always 1595
  "" always ""
Line 1599
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1599 always 1599
  "void f(void){\n    int k=0, dd, d[1U] = {1};\n    for (dd=d[k]; k<10; dd=d[++k]){;}\n}" always "void f(void){\n    int k=0, dd, d[1U] = {1};\n    for (dd=d[k]; k<10; dd=d[++k]){;}\n}"
Line 1603
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1603 always 1603
  "[test.cpp:3]: (error) Array 'd[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'd[1]' accessed at index 1, which is out of bounds.\n"
Line 1607
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1607 always 1607
  "char f(void)\n{\n    char buf[10];\n    for(int i = 0, j= 11; i < j; ++i)\n       buf[i] = 0;\n    return buf[0];\n}" always "char f(void)\n{\n    char buf[10];\n    for(int i = 0, j= 11; i < j; ++i)\n       buf[i] = 0;\n    return buf[0];\n}"
Line 1614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1614 always 1614
  "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n"
Line 1618
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1618 always 1618
  "double M[3][1];\n \nvoid matrix()\n{\n    for (int i=0; i < 3; i++)\n        for (int j = 0; j < 3; j++)\n             M[i][j]=0.0;\n}" always "double M[3][1];\n \nvoid matrix()\n{\n    for (int i=0; i < 3; i++)\n        for (int j = 0; j < 3; j++)\n             M[i][j]=0.0;\n}"
Line 1626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1626 always 1626
  "[test.cpp:7]: (error) Array 'M[3][1]' accessed at index M[*][2], which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'M[3][1]' accessed at index M[*][2], which is out of bounds.\n"
Line 1630
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1630 always 1630
  "void f() {\n    g(0);\n}\nvoid g(unsigned int x) {\n    int b[4];\n    for (unsigned int i = 0; i < 4; i += 2) {\n        b[i]   = 0;\n        b[i+1] = 0;\n    }\n}\n" always "void f() {\n    g(0);\n}\nvoid g(unsigned int x) {\n    int b[4];\n    for (unsigned int i = 0; i < 4; i += 2) {\n        b[i]   = 0;\n        b[i+1] = 0;\n    }\n}\n"
Line 1640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1640 always 1640
  "" always ""
Line 1644
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1644 always 1644
  "void make(const char* s, size_t len) {\n    for (size_t i = 0; i < len; ++i)\n        s[i];\n}\nvoid make(const char* s) {\n    make(s, strlen(s));\n}\nvoid f() {\n    make(\"my-utf8-payload\");\n}\nvoid f2() {\n    make(\"false\");\n}\n" always "void make(const char* s, size_t len) {\n    for (size_t i = 0; i < len; ++i)\n        s[i];\n}\nvoid make(const char* s) {\n    make(s, strlen(s));\n}\nvoid f() {\n    make(\"my-utf8-payload\");\n}\nvoid f2() {\n    make(\"false\");\n}\n"
Line 1657
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1657 always 1657
  "" always ""
Line 1661
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1661 always 1661
  "struct s {\n    int array[1];\n    int index;\n};\nvoid f(struct s foo) {\n    foo.array[foo.index++] = 1;\n    if (foo.index == 1) {}\n}\n" always "struct s {\n    int array[1];\n    int index;\n};\nvoid f(struct s foo) {\n    foo.array[foo.index++] = 1;\n    if (foo.index == 1) {}\n}\n"
Line 1669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1669 always 1669
  "" always ""
Line 1673
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1673 always 1673
  "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 3)\n            i = 0;\n        x = c;\n    }\n}\n" always "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 3)\n            i = 0;\n        x = c;\n    }\n}\n"
Line 1683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1683 always 1683
  "" always ""
Line 1685
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1685 always 1685
  "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 4)\n            i = 0;\n        x = c;\n    }\n}\n" always "void f(std::vector<int>& v) {\n    int a[3] = { 1, 2, 3 };\n    int i = 0;\n    for (auto& x : v) {\n        int c = a[i++];\n        if (i == 4)\n            i = 0;\n        x = c;\n    }\n}\n"
Line 1695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1695 always 1695
  "[test.cpp:6] -> [test.cpp:5]: (warning) Either the condition 'i==4' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n" always "[test.cpp:6] -> [test.cpp:5]: (warning) Either the condition 'i==4' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n"
Line 1702
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1702 always 1702
  "int f(int x, int y) {\n    int a[3]= {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n" always "int f(int x, int y) {\n    int a[3]= {0,1,2};\n    if(x<2)\n        y = a[x] + 1;\n    else\n        y = a[x];\n    return y;\n}\n"
Line 1710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1710 always 1710
  "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'x<2' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:6]: (warning) Either the condition 'x<2' is redundant or the array 'a[3]' is accessed at index 3, which is out of bounds.\n"
Line 1717
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1717 always 1717
  "long f(long b) {\n  const long a[] = { 0, 1, };\n  const long c = std::size(a);\n  if (b < 0 || b >= c)\n    return 0;\n  return a[b];\n}\n" always "long f(long b) {\n  const long a[] = { 0, 1, };\n  const long c = std::size(a);\n  if (b < 0 || b >= c)\n    return 0;\n  return a[b];\n}\n"
Line 1724
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1724 always 1724
  "" always ""
Line 1729
  "#define CKR(B) if (!(B)) { return -1; }\nint f(int i) {\n  const int A[3] = {};\n  CKR(i < 3);\n  if (i > 0)\n      i = A[i];\n  return i;\n}\n" always "#define CKR(B) if (!(B)) { return -1; }\nint f(int i) {\n  const int A[3] = {};\n  CKR(i < 3);\n  if (i > 0)\n      i = A[i];\n  return i;\n}\n"
Line 1737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1737 always 1737
  "" always ""
Line 1739
  "#define ASSERT(expression, action) if (expression) {action;}\nint array[5];\nvoid func (int index) {\n    ASSERT(index > 5, return);\n    array[index]++;\n}\n" always "#define ASSERT(expression, action) if (expression) {action;}\nint array[5];\nvoid func (int index) {\n    ASSERT(index > 5, return);\n    array[index]++;\n}\n"
Line 1745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1745 always 1745
  "[test.cpp:4] -> [test.cpp:5]: (warning) Either the condition 'index>5' is redundant or the array 'array[5]' is accessed at index 5, which is out of bounds.\n" always "[test.cpp:4] -> [test.cpp:5]: (warning) Either the condition 'index>5' is redundant or the array 'array[5]' is accessed at index 5, which is out of bounds.\n"
Line 1752
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1752 always 1752
  "int f(int i) {\n  const int M[] = { 0, 1, 2, 3 };\n  if (i > 4)\n      return -1;\n  if (i < 0 || i == std::size(M))\n    return 0; \n  return M[i];\n}\n" always "int f(int i) {\n  const int M[] = { 0, 1, 2, 3 };\n  if (i > 4)\n      return -1;\n  if (i < 0 || i == std::size(M))\n    return 0; \n  return M[i];\n}\n"
Line 1760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1760 always 1760
  "" always ""
Line 1762
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1762 always 1762
  "struct S { enum E { e0 }; };\nconst S::E M[4] = { S::E:e0, S::E:e0, S::E:e0, S::E:e0 };\nint f(int i) {\n  if (i > std::size(M) + 1)\n	  return -1;\n  if (i < 0 || i >= std::size(M))\n	  return 0;\n  return M[i]; \n}\n" always "struct S { enum E { e0 }; };\nconst S::E M[4] = { S::E:e0, S::E:e0, S::E:e0, S::E:e0 };\nint f(int i) {\n  if (i > std::size(M) + 1)\n	  return -1;\n  if (i < 0 || i >= std::size(M))\n	  return 0;\n  return M[i]; \n}\n"
Line 1771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1771 always 1771
  "" always ""
Line 1776
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1776 always 1776
  "struct X {\n    static int GetSize() {return 11;}\n};\nchar f() {\n    char buf[10]= {0};\n    for(int i = 0; i < X::GetSize(); ++i) \n       buf[i] = 0;\n    return buf[0];\n}\n" always "struct X {\n    static int GetSize() {return 11;}\n};\nchar f() {\n    char buf[10]= {0};\n    for(int i = 0; i < X::GetSize(); ++i) \n       buf[i] = 0;\n    return buf[0];\n}\n"
Line 1785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1785 always 1785
  "[test.cpp:7]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n"
Line 1791
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1791 always 1791
  "int b[4];\nvoid f(int i) {\n    if (i >= 0 && i < sizeof(b) / sizeof(*(b)))\n        b[i] = 0;\n    if (i >= 0 && i < sizeof(b) / sizeof((b)[0]))\n        b[i] = 0;\n}\n" always "int b[4];\nvoid f(int i) {\n    if (i >= 0 && i < sizeof(b) / sizeof(*(b)))\n        b[i] = 0;\n    if (i >= 0 && i < sizeof(b) / sizeof((b)[0]))\n        b[i] = 0;\n}\n"
Line 1798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1798 always 1798
  "" always ""
Line 1803
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1803 always 1803
  "struct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(10);\n}\n" always "struct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(10);\n}\n"
Line 1811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1811 always 1811
  "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n"
Line 1813
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1813 always 1813
  "int i = 10;\nstruct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(i);\n}\n" always "int i = 10;\nstruct Array {\n    int x[10];\n    int& accessArrayRef(int a) { return x[a]; }\n};\nvoid f() {\n    Array array = {};\n    array.accessArrayRef(i);\n}\n"
Line 1822
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1822 always 1822
  "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n"
  "" always ""
Line 1826
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1826 always 1826
  "void f()\n{\n  char a[2][2];\n  a[1][1] = 'a';\n}" always "void f()\n{\n  char a[2][2];\n  a[1][1] = 'a';\n}"
Line 1831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1831 always 1831
  "" always ""
Line 1833
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1833 always 1833
  "void f()\n{\n  char a[2][2][2];\n  a[1][1][1] = 'a';\n}" always "void f()\n{\n  char a[2][2][2];\n  a[1][1][1] = 'a';\n}"
Line 1838
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1838 always 1838
  "" always ""
Line 1840
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1840 always 1840
  "void f()\n{\n  char a[2][2];\n  a[2][1] = 'a';\n}" always "void f()\n{\n  char a[2][2];\n  a[2][1] = 'a';\n}"
Line 1845
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1845 always 1845
  "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[2][1], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[2][1], which is out of bounds.\n"
Line 1847
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1847 always 1847
  "void f()\n{\n  char a[2][2];\n  a[1][2] = 'a';\n}" always "void f()\n{\n  char a[2][2];\n  a[1][2] = 'a';\n}"
Line 1852
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1852 always 1852
  "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[1][2], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2]' accessed at index a[1][2], which is out of bounds.\n"
Line 1854
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1854 always 1854
  "void f()\n{\n  char a[2][2][2];\n  a[2][1][1] = 'a';\n}" always "void f()\n{\n  char a[2][2][2];\n  a[2][1][1] = 'a';\n}"
Line 1859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1859 always 1859
  "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[2][1][1], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[2][1][1], which is out of bounds.\n"
Line 1861
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1861 always 1861
  "void f()\n{\n  char a[2][2][2];\n  a[1][2][1] = 'a';\n}" always "void f()\n{\n  char a[2][2][2];\n  a[1][2][1] = 'a';\n}"
Line 1866
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1866 always 1866
  "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][2][1], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][2][1], which is out of bounds.\n"
Line 1868
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1868 always 1868
  "void f()\n{\n  char a[2][2][2][2];\n  a[1][2][1][1] = 'a';\n}" always "void f()\n{\n  char a[2][2][2][2];\n  a[1][2][1][1] = 'a';\n}"
Line 1873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1873 always 1873
  "[test.cpp:4]: (error) Array 'a[2][2][2][2]' accessed at index a[1][2][1][1], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2][2][2]' accessed at index a[1][2][1][1], which is out of bounds.\n"
Line 1875
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1875 always 1875
  "void f()\n{\n  char a[2][2][2];\n  a[1][1][2] = 'a';\n}" always "void f()\n{\n  char a[2][2][2];\n  a[1][1][2] = 'a';\n}"
Line 1880
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1880 always 1880
  "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][1][2], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[2][2][2]' accessed at index a[1][1][2], which is out of bounds.\n"
Line 1882
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1882 always 1882
  "void f()\n{\n  char a[10][10][10];\n  a[2*3][4*3][2] = 'a';\n}" always "void f()\n{\n  char a[10][10][10];\n  a[2*3][4*3][2] = 'a';\n}"
Line 1887
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1887 always 1887
  "[test.cpp:4]: (error) Array 'a[10][10][10]' accessed at index a[6][12][2], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[10][10][10]' accessed at index a[6][12][2], which is out of bounds.\n"
Line 1889
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1889 always 1889
  "void f() {\n  char a[10][10][10];\n  a[6][40][10] = 'a';\n}" always "void f() {\n  char a[10][10][10];\n  a[6][40][10] = 'a';\n}"
Line 1893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1893 always 1893
  "[test.cpp:3]: (error) Array 'a[10][10][10]' accessed at index a[6][40][10], which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[10][10][10]' accessed at index a[6][40][10], which is out of bounds.\n"
Line 1895
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1895 always 1895
  "void f() {\n  char a[1][1][1];\n  a[2][2][2] = 'a';\n}" always "void f() {\n  char a[1][1][1];\n  a[2][2][2] = 'a';\n}"
Line 1899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1899 always 1899
  "[test.cpp:3]: (error) Array 'a[1][1][1]' accessed at index a[2][2][2], which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[1][1][1]' accessed at index a[2][2][2], which is out of bounds.\n"
Line 1901
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1901 always 1901
  "void f() {\n  char a[6][6][6];\n  a[6][6][2] = 'a';\n}" always "void f() {\n  char a[6][6][6];\n  a[6][6][2] = 'a';\n}"
Line 1905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1905 always 1905
  "[test.cpp:3]: (error) Array 'a[6][6][6]' accessed at index a[6][6][2], which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[6][6][6]' accessed at index a[6][6][2], which is out of bounds.\n"
Line 1907
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1907 always 1907
  "void f() {\n  int a[2][2];\n  p = &a[2][0];\n}" always "void f() {\n  int a[2][2];\n  p = &a[2][0];\n}"
Line 1911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1911 always 1911
  "" always ""
Line 1914
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1914 always 1914
  "void f()\n{\n  int a[2][countof(x)] = {{1,2},{3,4}};\n  a[0][0] = 0;\n}" always "void f()\n{\n  int a[2][countof(x)] = {{1,2},{3,4}};\n  a[0][0] = 0;\n}"
Line 1919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1919 always 1919
  "" always ""
Line 1921
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1921 always 1921
  "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}" always "void draw_quad(float z)  {\n    int i;\n    float (*vertices)[2][4];\n    vertices[0][0][0] = z;\n    vertices[0][0][1] = z;\n    vertices[1][0][0] = z;\n    vertices[1][0][1] = z;\n    vertices[2][0][0] = z;\n    vertices[2][0][1] = z;\n    vertices[3][0][0] = z;\n    vertices[3][0][1] = z;\n    for (i = 0; i < 4; i++) {\n        vertices[i][0][2] = z;\n        vertices[i][0][3] = 1.0;\n        vertices[i][1][0] = 2.0;\n        vertices[i][1][1] = 3.0;\n        vertices[i][1][2] = 4.0;\n        vertices[i][1][3] = 5.0;\n    }\n}"
Line 1941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1941 always 1941
  "" always ""
Line 1944
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1944 always 1944
  "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}" always "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}"
Line 1950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1950 always 1950
  "" always ""
Line 1954
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1954 always 1954
  "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}" always "int foo() {\n  const size_t A = 4;\n  const size_t B = 2;\n  extern int stuff[A][B];\n  return stuff[0][1];\n}"
Line 1960
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1960 always 1960
  "error" always "error"
  "" always ""
Line 1965
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1965 always 1965
  "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 9:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}" always "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 9:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}"
Line 1981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1981 always 1981
  "" always ""
Line 1983
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1983 always 1983
  "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 8:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}" always "void f()\n{\n int ar[10];\n for (int i = 0; i < 10; ++i)\n {\n  switch(i)\n  {\n   case 8:\n    ar[i] = 0;\n    break;\n   default:\n    ar[i] = ar[i+1];\n    break;\n  };\n }\n}"
Line 1999
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  1999 always 1999
  "[test.cpp:12]: (error) Array index out of bounds.\n" always "[test.cpp:12]: (error) Array index out of bounds.\n"
  "" always ""
Line 2003
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2003 always 2003
  "void f() {\n    int a[5];\n    for (int i = 0; i < 10; ++i) {\n        for (int j = i; j < 5; ++j) {\n            a[i] = 0;\n        }\n    }\n}" always "void f() {\n    int a[5];\n    for (int i = 0; i < 10; ++i) {\n        for (int j = i; j < 5; ++j) {\n            a[i] = 0;\n        }\n    }\n}"
Line 2011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2011 always 2011
  "" always ""
Line 2016
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2016 always 2016
  "int a[10];\nvoid f(int i) {\n  if (i >= 0 && i < 10) {}\n  a[i] = 1;\n}" always "int a[10];\nvoid f(int i) {\n  if (i >= 0 && i < 10) {}\n  a[i] = 1;\n}"
Line 2021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2021 always 2021
  "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i<10' is redundant or the array 'a[10]' is accessed at index 10, which is out of bounds.\n[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i>=0' is redundant or the array 'a[10]' is accessed at index -1, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i<10' is redundant or the array 'a[10]' is accessed at index 10, which is out of bounds.\n[test.cpp:3] -> [test.cpp:4]: (warning) Either the condition 'i>=0' is redundant or the array 'a[10]' is accessed at index -1, which is out of bounds.\n"
Line 2028
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2028 always 2028
  "void f()\n{\n    char data[8];\n    for (int i = 19; i < 36; ++i) {\n        data[i/2] = 0;\n    }\n}" always "void f()\n{\n    char data[8];\n    for (int i = 19; i < 36; ++i) {\n        data[i/2] = 0;\n    }\n}"
Line 2035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2035 always 2035
  "[test.cpp:5]: (error) Array 'data[8]' accessed at index 17, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[8]' accessed at index 17, which is out of bounds.\n"
Line 2038
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2038 always 2038
  "void f()\n{\n    char arr[5];\n    for (int i = 0; i < 5; ++i) {\n        arr[i + 7] = 0;\n    }\n}" always "void f()\n{\n    char arr[5];\n    for (int i = 0; i < 5; ++i) {\n        arr[i + 7] = 0;\n    }\n}"
Line 2045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2045 always 2045
  "[test.cpp:5]: (error) Array 'arr[5]' accessed at index 11, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'arr[5]' accessed at index 11, which is out of bounds.\n"
Line 2050
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2050 always 2050
  "void f()\n{\n    char data[8];\n    data[-1] = 0;\n}" always "void f()\n{\n    char data[8];\n    data[-1] = 0;\n}"
Line 2055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2055 always 2055
  "[test.cpp:4]: (error) Array 'data[8]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'data[8]' accessed at index -1, which is out of bounds.\n"
Line 2057
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2057 always 2057
  "void f()\n{\n    char data[8][4];\n    data[5][-1] = 0;\n}" always "void f()\n{\n    char data[8][4];\n    data[5][-1] = 0;\n}"
Line 2062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2062 always 2062
  "[test.cpp:4]: (error) Array 'data[8][4]' accessed at index data[*][-1], which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'data[8][4]' accessed at index data[*][-1], which is out of bounds.\n"
Line 2065
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2065 always 2065
  "void foo(char *p)\n{\n    p[-1] = 0;\n}" always "void foo(char *p)\n{\n    p[-1] = 0;\n}"
Line 2069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2069 always 2069
  "" always ""
Line 2071
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2071 always 2071
  "void foo()\n{\n    char s[] = \"abc\";\n    char *p = s + strlen(s);\n    if (p[-1]);\n}" always "void foo()\n{\n    char s[] = \"abc\";\n    char *p = s + strlen(s);\n    if (p[-1]);\n}"
Line 2077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2077 always 2077
  "" always ""
Line 2080
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2080 always 2080
  "int f(const std::map<int, std::map<int,int> > &m)\n{\n    return m[0][-1];\n}" always "int f(const std::map<int, std::map<int,int> > &m)\n{\n    return m[0][-1];\n}"
Line 2084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2084 always 2084
  "" always ""
Line 2088
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2088 always 2088
  "struct TEST { char a[10]; };\nvoid foo() {\n    TEST test;\n    test.a[-1] = 3;\n}" always "struct TEST { char a[10]; };\nvoid foo() {\n    TEST test;\n    test.a[-1] = 3;\n}"
Line 2093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2093 always 2093
  "[test.cpp:4]: (error) Array 'test.a[10]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'test.a[10]' accessed at index -1, which is out of bounds.\n"
Line 2097
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2097 always 2097
  "int f(int i) {\n    int p[2] = {0, 0};\n    if(i >= 2)\n        return 0;\n    else if(i == 0)\n        return 0;\n    return p[i - 1];\n}\nvoid g(int i) {\n    if( i == 0 )\n        return f(i);\n}" always "int f(int i) {\n    int p[2] = {0, 0};\n    if(i >= 2)\n        return 0;\n    else if(i == 0)\n        return 0;\n    return p[i - 1];\n}\nvoid g(int i) {\n    if( i == 0 )\n        return f(i);\n}"
Line 2109
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2109 always 2109
  "" always ""
Line 2114
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2114 always 2114
  "void f(void) {\n    int buf[64]={};\n    int i;\n    for(i=0; i <16; ++i){}\n    for(; i < 24; ++i){ buf[i] = buf[i-16];}\n}\n" always "void f(void) {\n    int buf[64]={};\n    int i;\n    for(i=0; i <16; ++i){}\n    for(; i < 24; ++i){ buf[i] = buf[i-16];}\n}\n"
Line 2120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2120 always 2120
  "" always ""
Line 2125
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2125 always 2125
  "int i;\nstd::vector<int> v;\nbool f() {\n    if (i != 0) {\n        if (v.begin() != v.end()) {\n            if (i < 0)\n                return false;\n            const int a[4] = { 0, 1, 2, 3 };\n            return a[i - 1] > 0;\n        }\n    }\n    return false;\n}\n" always "int i;\nstd::vector<int> v;\nbool f() {\n    if (i != 0) {\n        if (v.begin() != v.end()) {\n            if (i < 0)\n                return false;\n            const int a[4] = { 0, 1, 2, 3 };\n            return a[i - 1] > 0;\n        }\n    }\n    return false;\n}\n"
Line 2138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2138 always 2138
  "" always ""
Line 2142
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2142 always 2142
  "void f()\n{\n    char data[8];\n    for (int i = 10; i > 0; --i) {\n        data[i] = 0;\n    }\n}" always "void f()\n{\n    char data[8];\n    for (int i = 10; i > 0; --i) {\n        data[i] = 0;\n    }\n}"
Line 2149
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2149 always 2149
  "[test.cpp:5]: (error) Array 'data[8]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[8]' accessed at index 10, which is out of bounds.\n"
Line 2151
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2151 always 2151
  "void f()\n{\n    char val[5];\n    for (unsigned int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}" always "void f()\n{\n    char val[5];\n    for (unsigned int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}"
Line 2158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2158 always 2158
  "" always ""
Line 2160
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2160 always 2160
  "void f()\n{\n    char val[5];\n    for (int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}" always "void f()\n{\n    char val[5];\n    for (int i = 3; i < 5; --i) {\n        val[i+1] = val[i];\n    }\n}"
Line 2167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2167 always 2167
  "[test.cpp:5]: (error) Array 'val[5]' accessed at index -9994, which is out of bounds.\n[test.cpp:5]: (error) Array 'val[5]' accessed at index -9995, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'val[5]' accessed at index -9994, which is out of bounds.\n[test.cpp:5]: (error) Array 'val[5]' accessed at index -9995, which is out of bounds.\n"
Line 2173
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2173 always 2173
  "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[3] = 0;\n    a.b.data[2] = 0;\n}" always "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[3] = 0;\n    a.b.data[2] = 0;\n}"
Line 2185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2185 always 2185
  "" always ""
Line 2188
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2188 always 2188
  "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[4] = 0;\n    a.b.data[3] = 0;\n}" always "struct A {\n    char data[4];\n    struct B { char data[3]; };\n    B b;\n};\n\nvoid f()\n{\n    A a;\n    a.data[4] = 0;\n    a.b.data[3] = 0;\n}"
Line 2200
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2200 always 2200
  "[test.cpp:10]: (error) Array 'a.data[4]' accessed at index 4, which is out of bounds.\n[test.cpp:11]: (error) Array 'a.b.data[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:10]: (error) Array 'a.data[4]' accessed at index 4, which is out of bounds.\n[test.cpp:11]: (error) Array 'a.b.data[3]' accessed at index 3, which is out of bounds.\n"
Line 2207
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2207 always 2207
  "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 && y; x++) {\n        data[x] = 0;\n    }\n}" always "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 && y; x++) {\n        data[x] = 0;\n    }\n}"
Line 2214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2214 always 2214
  "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n"
Line 2216
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2216 always 2216
  "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 || y; x++) {\n        data[x] = 0;\n    }\n}" always "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x < 10 || y; x++) {\n        data[x] = 0;\n    }\n}"
Line 2223
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2223 always 2223
  "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[2]' accessed at index 9, which is out of bounds.\n"
Line 2225
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2225 always 2225
  "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x <= 10 && y; x++) {\n        data[x] = 0;\n    }\n}" always "void f() {\n    char data[2];\n    int x;\n    for (x = 0; x <= 10 && y; x++) {\n        data[x] = 0;\n    }\n}"
Line 2232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2232 always 2232
  "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n"
Line 2234
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2234 always 2234
  "void f() {\n    char data[2];\n    int x;\n    for (x = 0; y && x <= 10; x++) {\n        data[x] = 0;\n    }\n}" always "void f() {\n    char data[2];\n    int x;\n    for (x = 0; y && x <= 10; x++) {\n        data[x] = 0;\n    }\n}"
Line 2241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2241 always 2241
  "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'data[2]' accessed at index 10, which is out of bounds.\n"
Line 2243
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2243 always 2243
  "int f() {\n    int i, c;\n    char* words[100] = {0};\n    g(words);\n    for (i = c = 0; (i < N) && (c < 1); i++) {\n        if (words[i][0] == '|')\n            c++;\n     }\n    return c;\n}" always "int f() {\n    int i, c;\n    char* words[100] = {0};\n    g(words);\n    for (i = c = 0; (i < N) && (c < 1); i++) {\n        if (words[i][0] == '|')\n            c++;\n     }\n    return c;\n}"
  "test.c" always "test.c"
Line 2253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2253 always 2253
  "" always ""
Line 2258
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2258 always 2258
  "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (i == 0) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}" always "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (i == 0) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}"
Line 2267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2267 always 2267
  "" always ""
Line 2270
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2270 always 2270
  "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (maybe()) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}" always "void f() {\n    int a[2];\n    for (int i = 0; i < 2; ++i) {\n        if (maybe()) {\n            continue;\n        }\n        a[i - 1] = 0;\n    }\n}"
Line 2279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2279 always 2279
  "[test.cpp:7]: (error) Array 'a[2]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'a[2]' accessed at index -1, which is out of bounds.\n"
Line 2284
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2284 always 2284
  "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i==1) {\n        }\n        a[i] = 0;\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i==1) {\n        }\n        a[i] = 0;\n    }\n}"
Line 2292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2292 always 2292
  "[test.cpp:6]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'a[10]' accessed at index 19, which is out of bounds.\n"
Line 2295
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2295 always 2295
  "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i<10) {\n        } else {\n            a[i-10] = 0;\n        }\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 0; i < 20; ++i) {\n        if (i<10) {\n        } else {\n            a[i-10] = 0;\n        }\n    }\n}"
Line 2304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2304 always 2304
  "" always ""
Line 2308
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2308 always 2308
  "void f() {\n    int a[10];\n    for (int i = 10; maybe(); dostuff()) {\n        a[i] = 0;\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 10; maybe(); dostuff()) {\n        a[i] = 0;\n    }\n}"
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2314 always 2314
  "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n"
Line 2317
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2317 always 2317
  "char f() {\n    char buf[10];\n    const bool a = true, b = true;\n    for (int i = 0; i < (a && b ? 11 : 10); ++i)\n        buf[i] = 0;\n    return buf[0];\n}\n" always "char f() {\n    char buf[10];\n    const bool a = true, b = true;\n    for (int i = 0; i < (a && b ? 11 : 10); ++i)\n        buf[i] = 0;\n    return buf[0];\n}\n"
Line 2324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2324 always 2324
  "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'buf[10]' accessed at index 10, which is out of bounds.\n"
Line 2329
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2329 always 2329
  "void f() {\n    int a[5];\n    for (int i = 0; i != 10; ++i) {\n        a[i] = 0;\n    }\n}" always "void f() {\n    int a[5];\n    for (int i = 0; i != 10; ++i) {\n        a[i] = 0;\n    }\n}"
Line 2335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2335 always 2335
  "[test.cpp:4]: (error) Array 'a[5]' accessed at index 9, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'a[5]' accessed at index 9, which is out of bounds.\n"
Line 2341
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2341 always 2341
  "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i == 0 ? 0 : a[i-1];\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i == 0 ? 0 : a[i-1];\n    }\n}"
Line 2347
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2347 always 2347
  "" always ""
Line 2349
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2349 always 2349
  "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        some_condition ? 0 : a[i-1];\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        some_condition ? 0 : a[i-1];\n    }\n}"
Line 2355
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2355 always 2355
  "[test.cpp:4]: (error) Array index -1 is out of bounds.\n" always "[test.cpp:4]: (error) Array index -1 is out of bounds.\n"
  "" always ""
Line 2357
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2357 always 2357
  "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i==0 ? 0 : a[i-1];\n        a[i-1] = 0;\n    }\n}" always "void f() {\n    int a[10];\n    for (int i = 0; i != 10; ++i) {\n        i==0 ? 0 : a[i-1];\n        a[i-1] = 0;\n    }\n}"
Line 2364
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2364 always 2364
  "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n"
Line 2368
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2368 always 2368
  "void f() {\n   char a[10];\n   for (i=0; i<10; i++);\n}" always "void f() {\n   char a[10];\n   for (i=0; i<10; i++);\n}"
Line 2372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2372 always 2372
  "" always ""
Line 2377
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2377 always 2377
  "void f(int len) {\n    char a[len];\n    for (int i=0; i<7; ++i) {\n        a[0] = 0;\n    }\n}" always "void f(int len) {\n    char a[len];\n    for (int i=0; i<7; ++i) {\n        a[0] = 0;\n    }\n}"
Line 2383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2383 always 2383
  "" always ""
Line 2388
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2388 always 2388
  "extern char arr[15];\nchar arr[15] = \"abc\";" always "extern char arr[15];\nchar arr[15] = \"abc\";"
Line 2390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2390 always 2390
  "" always ""
Line 2397
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2397 always 2397
  "void f1(char *buf) {\n    buf[4] = 0;\n}\nvoid f2() {\n    int x[2];\n    f1(x);\n}" always "void f1(char *buf) {\n    buf[4] = 0;\n}\nvoid f2() {\n    int x[2];\n    f1(x);\n}"
Line 2404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2404 always 2404
  "" always ""
Line 2407
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2407 always 2407
  "void f1(const char buf[]) {\n    char c = buf[4];\n}\nvoid f2() {\n    char x[2];\n    f1(x);\n}" always "void f1(const char buf[]) {\n    char c = buf[4];\n}\nvoid f2() {\n    char x[2];\n    f1(x);\n}"
Line 2414
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2414 always 2414
  "[test.cpp:6] -> [test.cpp:2]: (error) Array 'x[2]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:6] -> [test.cpp:2]: (error) Array 'x[2]' accessed at index 4, which is out of bounds.\n"
  "" always ""
Line 2420
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2420 always 2420
  "void f() {\n    const char *str = \"abc\";\n    bar(str[10]);\n}" always "void f() {\n    const char *str = \"abc\";\n    bar(str[10]);\n}"
Line 2424
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2424 always 2424
  "[test.cpp:3]: (error) Array 'str[4]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'str[4]' accessed at index 10, which is out of bounds.\n"
Line 2426
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2426 always 2426
  "void f()\n{\n    const char *str = \"abc\";\n    bar(str[4]);\n}" always "void f()\n{\n    const char *str = \"abc\";\n    bar(str[4]);\n}"
Line 2431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2431 always 2431
  "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n"
Line 2433
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2433 always 2433
  "void f()\n{\n    const char *str = \"abc\";\n    bar(str[3]);\n}" always "void f()\n{\n    const char *str = \"abc\";\n    bar(str[3]);\n}"
Line 2438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2438 always 2438
  "" always ""
Line 2440
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2440 always 2440
  "void f()\n{\n    const char *str = \"a\tc\";\n    bar(str[4]);\n}" always "void f()\n{\n    const char *str = \"a\tc\";\n    bar(str[4]);\n}"
Line 2445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2445 always 2445
  "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'str[4]' accessed at index 4, which is out of bounds.\n"
Line 2447
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2447 always 2447
  "void f() {\n    const char *name = \"\";\n    if ( name[0] == 'U' ? name[1] : 0) {}\n}" always "void f() {\n    const char *name = \"\";\n    if ( name[0] == 'U' ? name[1] : 0) {}\n}"
Line 2451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2451 always 2451
  "" always ""
Line 2453
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2453 always 2453
  "int main(int argc, char **argv) {\n    char str[6] = \"\\0\";\n    unsigned short port = 65535;\n    snprintf(str, sizeof(str), \"%hu\", port);\n}" always "int main(int argc, char **argv) {\n    char str[6] = \"\\0\";\n    unsigned short port = 65535;\n    snprintf(str, sizeof(str), \"%hu\", port);\n}"
  "test.c" always "test.c"
Line 2458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2458 always 2458
  "" always ""
Line 2463
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2463 always 2463
  "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name;\n}" always "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name;\n}"
Line 2471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2471 always 2471
  "" always ""
Line 2474
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2474 always 2474
  "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name[22] = 123;\n}" always "struct tt {\n    char name[21];\n} ;\nvoid doswitch(struct tt *x)\n{\n    struct tt *tt=x;\n    tt->name[22] = 123;\n}"
Line 2482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2482 always 2482
  "[test.cpp:7]: (error) Array 'tt->name[21]' accessed at index 22, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'tt->name[21]' accessed at index 22, which is out of bounds.\n"
Line 2486
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2486 always 2486
  "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    if (i==10) {}\n}" always "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    if (i==10) {}\n}"
Line 2491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2491 always 2491
  "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'i==10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n" always "[test.cpp:4] -> [test.cpp:3]: (warning) Either the condition 'i==10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n"
Line 2493
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2493 always 2493
  "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    switch (i) {\n    case 10: break;\n    }\n}" always "void f(int i) {\n    char str[3];\n    str[i] = 0;\n    switch (i) {\n    case 10: break;\n    }\n}"
Line 2500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2500 always 2500
  "[test.cpp:5] -> [test.cpp:3]: (warning) Either the switch case 'case 10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n" always "[test.cpp:5] -> [test.cpp:3]: (warning) Either the switch case 'case 10' is redundant or the array 'str[3]' is accessed at index 10, which is out of bounds.\n"
Line 2502
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2502 always 2502
  "void f() {\n    char str[3];\n    str[((unsigned char)3) - 1] = 0;\n}" always "void f() {\n    char str[3];\n    str[((unsigned char)3) - 1] = 0;\n}"
  "test.cpp" always "test.cpp"
Line 2506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2506 always 2506
  "" always ""
Line 2508
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2508 always 2508
  "void f() {\n    char *str[3];\n    do_something(&str[0][5]);\n}" always "void f() {\n    char *str[3];\n    do_something(&str[0][5]);\n}"
  "test.cpp" always "test.cpp"
Line 2512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2512 always 2512
  "" always ""
Line 2514
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2514 always 2514
  "class X { static const int x[100]; };\nconst int X::x[100] = {0};" always "class X { static const int x[100]; };\nconst int X::x[100] = {0};"
Line 2516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2516 always 2516
  "" always ""
Line 2518
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2518 always 2518
  "namespace { class X { static const int x[100]; };\nconst int X::x[100] = {0}; }" always "namespace { class X { static const int x[100]; };\nconst int X::x[100] = {0}; }"
Line 2520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2520 always 2520
  "" always ""
Line 2522
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2522 always 2522
  "class ActorSprite { static ImageSet * targetCursorImages[2][10]; };\nImageSet *ActorSprite::targetCursorImages[2][10];" always "class ActorSprite { static ImageSet * targetCursorImages[2][10]; };\nImageSet *ActorSprite::targetCursorImages[2][10];"
Line 2524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2524 always 2524
  "" always ""
Line 2529
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2529 always 2529
  "void f() {\n  int a[10];\n  int *p = a;\n  p[20] = 0;\n}" always "void f() {\n  int a[10];\n  int *p = a;\n  p[20] = 0;\n}"
Line 2534
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2534 always 2534
  "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n"
  "" always ""
Line 2538
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2538 always 2538
  "void f() {\n  int a[10];\n  int *p = a;\n  p[10] = 0;\n}" always "void f() {\n  int a[10];\n  int *p = a;\n  p[10] = 0;\n}"
Line 2543
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2543 always 2543
  "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n"
  "" always ""
Line 2545
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2545 always 2545
  "void f() {\n  int a[10];\n  int *p = a;\n  dostuff(&p[10]);\n}" always "void f() {\n  int a[10];\n  int *p = a;\n  dostuff(&p[10]);\n}"
Line 2550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2550 always 2550
  "" always ""
Line 2553
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2553 always 2553
  "void f() {\n  int a[X];\n  int *p = a;\n  p[20] = 0;\n}" always "void f() {\n  int a[X];\n  int *p = a;\n  p[20] = 0;\n}"
Line 2558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2558 always 2558
  "" always ""
Line 2560
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2560 always 2560
  "void f() {\n  int a[2];\n  char *p = (char *)a;\n  p[4] = 0;\n}" always "void f() {\n  int a[2];\n  char *p = (char *)a;\n  p[4] = 0;\n}"
Line 2565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2565 always 2565
  "" always ""
Line 2569
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2569 always 2569
  "void f(char a[10]) {\n  a[20] = 0;\n}" always "void f(char a[10]) {\n  a[20] = 0;\n}"
Line 2572
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2572 always 2572
  "[test.cpp:2]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:2]: (error) Array 'a[10]' accessed at index 20, which is out of bounds.\n"
Line 2574
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2574 always 2574
  "void f(char a[10]) {\n  a += 4;\n  a[-1] = 0;\n}" always "void f(char a[10]) {\n  a += 4;\n  a[-1] = 0;\n}"
Line 2578
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2578 always 2578
  "" always ""
  "[test.cpp:3]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'a[10]' accessed at index -1, which is out of bounds.\n"
Line 2582
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2582 always 2582
  "enum E : unsigned int { e1, e2 };\nvoid f() {\n    E arrE[] = { e1, e2 };\n    arrE[sizeof(arrE)] = e1;\n}" always "enum E : unsigned int { e1, e2 };\nvoid f() {\n    E arrE[] = { e1, e2 };\n    arrE[sizeof(arrE)] = e1;\n}"
Line 2587
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2587 always 2587
  "[test.cpp:4]: (error) Array 'arrE[2]' accessed at index 8, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'arrE[2]' accessed at index 8, which is out of bounds.\n"
Line 2591
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2591 always 2591
  "constexpr int blockLen = 10;\nvoid foo(std::array<uint8_t, blockLen * 2>& a) {\n    a[2] = 2;\n}" always "constexpr int blockLen = 10;\nvoid foo(std::array<uint8_t, blockLen * 2>& a) {\n    a[2] = 2;\n}"
Line 2595
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2595 always 2595
  "" always ""
Line 2599
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2599 always 2599
  "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    if (i < 50)\n        sum -= val[i];\n}" always "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    if (i < 50)\n        sum -= val[i];\n}"
Line 2609
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2609 always 2609
  "" always ""
Line 2611
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2611 always 2611
  "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50;) {\n        sum -= val[i];\n        break;\n    }\n}" always "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50;) {\n        sum -= val[i];\n        break;\n    }\n}"
Line 2623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2623 always 2623
  "" always ""
Line 2625
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2625 always 2625
  "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50; i++)\n        sum -= val[i];\n}" always "bool b();\nvoid f()\n{\n    int val[50];\n    int i, sum=0;\n    for (i = 1; b() && i < 50; i++)\n        sum += val[i];\n    for (; i < 50; i++)\n        sum -= val[i];\n}"
Line 2635
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2635 always 2635
  "" always ""
Line 2639
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2639 always 2639
  "void f() {\n    int* z = new int;\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" always "void f() {\n    int* z = new int;\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n"
Line 2645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2645 always 2645
  "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n"
Line 2647
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2647 always 2647
  "void f() {\n    int* z = new int(1);\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" always "void f() {\n    int* z = new int(1);\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n"
Line 2653
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2653 always 2653
  "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n"
Line 2655
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2655 always 2655
  "void f() {\n    int* z = new int{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" always "void f() {\n    int* z = new int{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n"
Line 2661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2661 always 2661
  "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[1]' accessed at index 7, which is out of bounds.\n"
Line 2663
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2663 always 2663
  "void f() {\n    int* z = new int[5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n" always "void f() {\n    int* z = new int[5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = 0;\n    delete[] z;\n}\n"
Line 2669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2669 always 2669
  "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n"
Line 2671
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2671 always 2671
  "void g() {\n    int* z = new int[5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = 1;\n    delete[] z;\n}\n" always "void g() {\n    int* z = new int[5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = 1;\n    delete[] z;\n}\n"
Line 2677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2677 always 2677
  "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n"
Line 2679
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2679 always 2679
  "void h() {\n    int** z = new int* [5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" always "void h() {\n    int** z = new int* [5];\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n"
Line 2685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2685 always 2685
  "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n"
Line 2687
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2687 always 2687
  "void h() {\n    int** z = new int* [5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" always "void h() {\n    int** z = new int* [5]();\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n"
Line 2693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2693 always 2693
  "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n"
Line 2695
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2695 always 2695
  "void h() {\n    int** z = new int* [5]{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n" always "void h() {\n    int** z = new int* [5]{};\n    for (int n = 0; n < 8; ++n)\n        z[n] = nullptr;\n    delete[] z;\n}\n"
Line 2701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2701 always 2701
  "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'z[5]' accessed at index 7, which is out of bounds.\n"
Line 2705
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2705 always 2705
  "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC *abc)\n{\n    strcpy( abc->str, \"abcdef\" );\n}" always "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC *abc)\n{\n    strcpy( abc->str, \"abcdef\" );\n}"
Line 2714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2714 always 2714
  "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n" always "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n"
Line 2716
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2716 always 2716
  "struct ABC\n{\n    char str[5];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    strcpy( abc.str, \"abcdef\" );\n}" always "struct ABC\n{\n    char str[5];\n};\n\nstatic void f()\n{\n    struct ABC abc;\n    strcpy( abc.str, \"abcdef\" );\n}"
Line 2726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2726 always 2726
  "[test.cpp:9]: (error) Buffer is accessed out of bounds: abc.str\n" always "[test.cpp:9]: (error) Buffer is accessed out of bounds: abc.str\n"
Line 2728
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2728 always 2728
  "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC &abc)\n{\n    strcpy( abc.str, \"abcdef\" );\n}" always "struct ABC\n{\n    char str[5];\n};\n\nstatic void f(struct ABC &abc)\n{\n    strcpy( abc.str, \"abcdef\" );\n}"
Line 2737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2737 always 2737
  "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc.str\n" always "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc.str\n"
Line 2739
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2739 always 2739
  "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    } abc;\n    strcpy( abc.str, \"abcdef\" );\n}" always "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    } abc;\n    strcpy( abc.str, \"abcdef\" );\n}"
Line 2747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2747 always 2747
  "[test.cpp:7]: (error) Buffer is accessed out of bounds: abc.str\n" always "[test.cpp:7]: (error) Buffer is accessed out of bounds: abc.str\n"
Line 2749
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2749 always 2749
  "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    };\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    strcpy( abc->str, \"abcdef\" );\n    free(abc);\n}" always "static void f()\n{\n    struct ABC\n    {\n        char str[5];\n    };\n    struct ABC *abc = malloc(sizeof(struct ABC));\n    strcpy( abc->str, \"abcdef\" );\n    free(abc);\n}"
Line 2759
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2759 always 2759
  "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n" always "[test.cpp:8]: (error) Buffer is accessed out of bounds: abc->str\n"
Line 2764
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2764 always 2764
  "int a[10];\n\nvoid foo()\n{\n    int i;\n    for (i = 0; i <= 10; ++i)\n        a[i] = 0;\n}" always "int a[10];\n\nvoid foo()\n{\n    int i;\n    for (i = 0; i <= 10; ++i)\n        a[i] = 0;\n}"
Line 2772
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2772 always 2772
  "[test.cpp:7]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:7]: (error) Array 'a[10]' accessed at index 10, which is out of bounds.\n"
Line 2774
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2774 always 2774
  "struct S { int b; } static e[1];\nint f() { return e[1].b; }\n" always "struct S { int b; } static e[1];\nint f() { return e[1].b; }\n"
Line 2776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2776 always 2776
  "[test.cpp:2]: (error) Array 'e[1]' accessed at index 1, which is out of bounds.\n" always "[test.cpp:2]: (error) Array 'e[1]' accessed at index 1, which is out of bounds.\n"
Line 2781
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2781 always 2781
  "void foo()\n{\n    const char *p[2];\n    for (int i = 0; i < 8; ++i)\n        p[i] = 0;\n}" always "void foo()\n{\n    const char *p[2];\n    for (int i = 0; i < 8; ++i)\n        p[i] = 0;\n}"
Line 2787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2787 always 2787
  "[test.cpp:5]: (error) Array 'p[2]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'p[2]' accessed at index 7, which is out of bounds.\n"
Line 2790
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2790 always 2790
  "void foo(int x, int y)\n{\n    const char *p[2];\n    const char *s = y + p[1];\n    p[1] = 0;\n}" always "void foo(int x, int y)\n{\n    const char *p[2];\n    const char *s = y + p[1];\n    p[1] = 0;\n}"
Line 2796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2796 always 2796
  "" always ""
Line 2799
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2799 always 2799
  "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,20);\n}" always "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,20);\n}"
Line 2808
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2808 always 2808
  "[test.cpp:8] -> [test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:8] -> [test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 2810
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2810 always 2810
  "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,3);\n}\n" always "void f1(char *s,int size)\n{\n  if( size > 10 ) strcpy(s,\"abc\");\n}\nvoid f2()\n{\n  char s[3];\n  f1(s,3);\n}\n"
Line 2819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2819 always 2819
  "" always ""
Line 2823
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2823 always 2823
  "void f()\n{\n    char n[5];\n    sprintf(n, \"d\");\n    printf(\"hello!\");\n}" always "void f()\n{\n    char n[5];\n    sprintf(n, \"d\");\n    printf(\"hello!\");\n}"
Line 2829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2829 always 2829
  "" always ""
Line 2833
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2833 always 2833
  "void f()\n{\n   char n[5];\n   strcat(n, \"abc\");\n   strcat(n, \"def\");\n}" always "void f()\n{\n   char n[5];\n   strcat(n, \"abc\");\n   strcat(n, \"def\");\n}"
Line 2839
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2839 always 2839
  "[test.cpp:5]: (error) Buffer is accessed out of bounds: n\n" always "[test.cpp:5]: (error) Buffer is accessed out of bounds: n\n"
  "" always ""
Line 2844
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2844 always 2844
  "void f()\n{\n    char a[2];\n    strcpy(a, \"a\\0\");\n}" always "void f()\n{\n    char a[2];\n    strcpy(a, \"a\\0\");\n}"
Line 2849
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2849 always 2849
  "" always ""
Line 2854
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2854 always 2854
  "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = i + 100)\n    {\n        a[i] = 0;\n    }\n}" always "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = i + 100)\n    {\n        a[i] = 0;\n    }\n}"
Line 2862
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2862 always 2862
  "" always ""
Line 2864
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2864 always 2864
  "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = 100 + i)\n    {\n        a[i] = 0;\n    }\n}" always "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; i = 100 + i)\n    {\n        a[i] = 0;\n    }\n}"
Line 2872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2872 always 2872
  "" always ""
Line 2877
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2877 always 2877
  "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; )\n    {\n        a[i] = 0;\n        i += 100;\n    }\n}" always "void f()\n{\n    char a[5];\n    for (int i = 0; i < 20; )\n    {\n        a[i] = 0;\n        i += 100;\n    }\n}"
Line 2886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2886 always 2886
  "" always ""
Line 2891
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2891 always 2891
  "void f()\n{\n    char a[4];\n    for (int i = 0; i < 4; i++)\n    {\n        char b = a[i];\n    }\n}" always "void f()\n{\n    char a[4];\n    for (int i = 0; i < 4; i++)\n    {\n        char b = a[i];\n    }\n}"
Line 2899
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2899 always 2899
  "" always ""
Line 2903
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2903 always 2903
  "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=i+0.1)\n    {\n    }\n}" always "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=i+0.1)\n    {\n    }\n}"
Line 2910
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2910 always 2910
  "" always ""
Line 2912
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2912 always 2912
  "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=0.1+i)\n    {\n    }\n}" always "void f()\n{\n    char a[4];\n    for (float i=0; i<10.0;i=0.1+i)\n    {\n    }\n}"
Line 2919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2919 always 2919
  "" always ""
Line 2923
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2923 always 2923
  "class A : public B {\n    char val[2];\n    void f(int i, int ii);\n};\nvoid A::f(int i, int ii)\n{\n    strcpy(val, \"ab\") ;\n}" always "class A : public B {\n    char val[2];\n    void f(int i, int ii);\n};\nvoid A::f(int i, int ii)\n{\n    strcpy(val, \"ab\") ;\n}"
Line 2931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2931 always 2931
  "[test.cpp:7]: (error) Buffer is accessed out of bounds: val\n" always "[test.cpp:7]: (error) Buffer is accessed out of bounds: val\n"
Line 2936
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2936 always 2936
  "void f() {\n    struct Foo foo[5];\n    memset(foo, 0, sizeof(foo));\n}" always "void f() {\n    struct Foo foo[5];\n    memset(foo, 0, sizeof(foo));\n}"
Line 2940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2940 always 2940
  "" always ""
Line 2942
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2942 always 2942
  "void f() {\n    gchar x[3];\n    strcpy(x, \"12\");\n}" always "void f() {\n    gchar x[3];\n    strcpy(x, \"12\");\n}"
Line 2946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2946 always 2946
  "" always ""
Line 2948
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2948 always 2948
  "extern char a[10];\nvoid f() {\n    char b[25] = {0};\n    std::memcpy(b, a, 10);\n}" always "extern char a[10];\nvoid f() {\n    char b[25] = {0};\n    std::memcpy(b, a, 10);\n}"
Line 2953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2953 always 2953
  "" always ""
Line 2957
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2957 always 2957
  "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<6; i++) {\n        b[i] = b[i+1];\n    }\n}" always "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<6; i++) {\n        b[i] = b[i+1];\n    }\n}"
Line 2967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2967 always 2967
  "" always ""
Line 2969
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2969 always 2969
  "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<7; i++) {\n        b[i] = b[i+1];\n    }\n}" always "class A {\n    void foo();\n    bool b[7];\n};\n\nvoid A::foo() {\n    for (int i=0; i<7; i++) {\n        b[i] = b[i+1];\n    }\n}"
Line 2979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2979 always 2979
  "[test.cpp:8]: (error) Array 'b[7]' accessed at index 7, which is out of bounds.\n" always "[test.cpp:8]: (error) Array 'b[7]' accessed at index 7, which is out of bounds.\n"
Line 2983
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2983 always 2983
  "class A {\npublic:\n    u8 buf[10];\n    A();};\n\nA::A() {\n    memset(buf, 0, 10);\n}" always "class A {\npublic:\n    u8 buf[10];\n    A();};\n\nA::A() {\n    memset(buf, 0, 10);\n}"
Line 2992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2992 always 2992
  "" always ""
Line 2996
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  2996 always 2996
  "void foo()\n{ { {\n    char dst[4];\n    const char *src = \"AAAAAAAAAAAAAAAAAAAAA\";\n    for (size_t i = 0; i <= 4; i++)\n        dst[i] = src[i];\n} } }" always "void foo()\n{ { {\n    char dst[4];\n    const char *src = \"AAAAAAAAAAAAAAAAAAAAA\";\n    for (size_t i = 0; i <= 4; i++)\n        dst[i] = src[i];\n} } }"
Line 3003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3003 always 3003
  "[test.cpp:6]: (error) Array 'dst[4]' accessed at index 4, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'dst[4]' accessed at index 4, which is out of bounds.\n"
Line 3008
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3008 always 3008
  "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i];\n       i++;  }\n}" always "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i];\n       i++;  }\n}"
Line 3015
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3015 always 3015
  "error" always "error"
  "" always ""
Line 3018
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3018 always 3018
  "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i++];\n   }\n}" always "void main() {\n   int array[] = {1,2};\n   int x = 0;\n   for( int i = 0; i<6; ) {\n      x += array[i++];\n   }\n}"
Line 3025
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3025 always 3025
  "error" always "error"
  "" always ""
Line 3029
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3029 always 3029
  "extern int split();\nvoid regress() {\n    char inbuf[1000];\n    char *f[10];\n    split(inbuf, f, 10, \"\t\t\");\n}" always "extern int split();\nvoid regress() {\n    char inbuf[1000];\n    char *f[10];\n    split(inbuf, f, 10, \"\t\t\");\n}"
Line 3036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3036 always 3036
  "" always ""
Line 3040
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3040 always 3040
  "void abc(struct foobar[5]);\nvoid main() {\nstruct foobar x[5];\nabc(x);\n}" always "void abc(struct foobar[5]);\nvoid main() {\nstruct foobar x[5];\nabc(x);\n}"
Line 3046
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3046 always 3046
  "" always ""
Line 3051
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3051 always 3051
  "typedef char testChar[10];\nint main(){\n  testChar tc1 = \"\";\n  tc1[5]='a';\n}" always "typedef char testChar[10];\nint main(){\n  testChar tc1 = \"\";\n  tc1[5]='a';\n}"
Line 3056
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3056 always 3056
  "" always ""
Line 3062
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3062 always 3062
  "struct S { int m[9]; };\nint f(S * s) {\n    return s->m[sizeof(s->m)];\n}" always "struct S { int m[9]; };\nint f(S * s) {\n    return s->m[sizeof(s->m)];\n}"
Line 3066
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3066 always 3066
  "[test.cpp:3]: (error) Array 's->m[9]' accessed at index 36, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 's->m[9]' accessed at index 36, which is out of bounds.\n"
Line 3070
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3070 always 3070
  "void f(WhereInfo *pWInfo, int *aiCur) {\n  memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);\n}" always "void f(WhereInfo *pWInfo, int *aiCur) {\n  memcpy(aiCur, pWInfo->aiCurOnePass, sizeof(int)*2);\n}"
Line 3073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3073 always 3073
  "" always ""
Line 3078
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3078 always 3078
  "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[1] = \"a\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}" always "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[1] = \"a\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}"
Line 3084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3084 always 3084
  "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: dest\n" always "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: dest\n"
Line 3086
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3086 always 3086
  "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[2] = \"ab\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}" always "void f(void) {\n    const char src[3] = \"abc\";\n    char dest[2] = \"ab\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}"
Line 3093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3093 always 3093
  "[test.cpp:6]: (error) Buffer is accessed out of bounds: dest\n" always "[test.cpp:6]: (error) Buffer is accessed out of bounds: dest\n"
Line 3095
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3095 always 3095
  "void f(void) {\n    const char src[2] = \"ab\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}" always "void f(void) {\n    const char src[2] = \"ab\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n    (void)strxfrm(dest,src,3);\n}"
Line 3102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3102 always 3102
  "[test.cpp:6]: (error) Buffer is accessed out of bounds: src\n" always "[test.cpp:6]: (error) Buffer is accessed out of bounds: src\n"
Line 3104
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3104 always 3104
  "void f(void) {\n    const char src[1] = \"a\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}" always "void f(void) {\n    const char src[1] = \"a\";\n    char dest[3] = \"abc\";\n    (void)strxfrm(dest,src,1);\n    (void)strxfrm(dest,src,2);\n}"
Line 3110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3110 always 3110
  "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: src\n" always "[test.cpp:5]: (error, inconclusive) Buffer is accessed out of bounds: src\n"
Line 3114
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3114 always 3114
  "int f() {\n   int z[16];\n   for (int i=0; i<20; i++)\n      for (int j=0; j<20; j++)\n          z[i] = 0;\n   return z[0];\n}" always "int f() {\n   int z[16];\n   for (int i=0; i<20; i++)\n      for (int j=0; j<20; j++)\n          z[i] = 0;\n   return z[0];\n}"
Line 3121
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3121 always 3121
  "[test.cpp:5]: (error) Array 'z[16]' accessed at index 19, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'z[16]' accessed at index 19, which is out of bounds.\n"
Line 3127
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3127 always 3127
  "struct S {\n    std::vector<int> v;\n    int a[15] = {};\n    int g() const { return v.size(); }\n    int f(int i) const {\n        if (i < 0 || i >= g())\n            return 0;\n        return a[i];\n    }\n};\n" always "struct S {\n    std::vector<int> v;\n    int a[15] = {};\n    int g() const { return v.size(); }\n    int f(int i) const {\n        if (i < 0 || i >= g())\n            return 0;\n        return a[i];\n    }\n};\n"
Line 3137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3137 always 3137
  "" always ""
Line 3142
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 3144
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3144 always 3144
  "void f() {\n    char *p = malloc(10);\n    memset(p, 0, 20);\n}" always "void f() {\n    char *p = malloc(10);\n    memset(p, 0, 20);\n}"
Line 3148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3148 always 3148
  "test.cpp:3:error:Buffer is accessed out of bounds: p\ntest.cpp:2:note:Assign p, buffer with size 10\ntest.cpp:3:note:Buffer overrun\n" always "test.cpp:3:error:Buffer is accessed out of bounds: p\ntest.cpp:2:note:Assign p, buffer with size 10\ntest.cpp:3:note:Buffer overrun\n"
Line 3155
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3155 always 3155
  "void f1(char *s) {\n    if (x) s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" always "void f1(char *s) {\n    if (x) s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}"
Line 3163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3163 always 3163
  "" always ""
Line 3166
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3166 always 3166
  "void f1(char *s) {\n    if (x) return;\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" always "void f1(char *s) {\n    if (x) return;\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}"
Line 3175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3175 always 3175
  "" always ""
Line 3178
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3178 always 3178
  "void f1(char *s) {\n    if (x) { }\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}" always "void f1(char *s) {\n    if (x) { }\n    s[100] = 0;\n}\n\nvoid f2() {\n    char a[10];\n    f1(a);}"
Line 3187
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3187 always 3187
  "[test.cpp:8] -> [test.cpp:3]: (error) Array 'a[10]' accessed at index 100, which is out of bounds.\n" always "[test.cpp:8] -> [test.cpp:3]: (error) Array 'a[10]' accessed at index 100, which is out of bounds.\n"
  "" always ""
Line 3193
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3193 always 3193
  "void f(char a[10]);\nvoid g() {\n    char a[2];\n    f(a);\n}" always "void f(char a[10]);\nvoid g() {\n    char a[2];\n    f(a);\n}"
Line 3198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3198 always 3198
  "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" always "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n"
Line 3204
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3204 always 3204
  "void f(float a[10][3]);\nvoid g() {\n    float a[2][3];\n    f(a);\n}" always "void f(float a[10][3]);\nvoid g() {\n    float a[2][3];\n    f(a);\n}"
Line 3209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3209 always 3209
  "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" always "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n"
Line 3215
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3215 always 3215
  "void f(int a[20]);\nvoid g() {\n    int a[2];\n    f(a);\n}" always "void f(int a[20]);\nvoid g() {\n    int a[2];\n    f(a);\n}"
Line 3220
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3220 always 3220
  "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n" always "test.cpp:4:warning:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:4:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:3:note:Passing buffer 'a' to function that is declared here\ntest.cpp:4:note:Buffer 'a' is too small, the function 'f' expects a bigger buffer in 1st argument\n"
Line 3226
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3226 always 3226
  "void f(int a[]) {\n  switch (2) {\n    case 1:\n      a[1] = 1;\n    }\n}\nint a[1];\nf(a);\n" always "void f(int a[]) {\n  switch (2) {\n    case 1:\n      a[1] = 1;\n    }\n}\nint a[1];\nf(a);\n"
Line 3235
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3235 always 3235
  "" always ""
Line 3237
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3237 always 3237
  "void CreateLeafTex(unsigned char buf[256][2048][4]);\nvoid foo() {\n  unsigned char(* tree)[2048][4] = new unsigned char[256][2048][4];\n  CreateLeafTex(tree);\n}" always "void CreateLeafTex(unsigned char buf[256][2048][4]);\nvoid foo() {\n  unsigned char(* tree)[2048][4] = new unsigned char[256][2048][4];\n  CreateLeafTex(tree);\n}"
Line 3242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3242 always 3242
  "" always ""
Line 3244
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3244 always 3244
  "void f(int a[10]) {\n    int i = 0;\n    for (i = 0; i < 10; i++)\n        a[i] = i * 2;\n}\nvoid g() {\n    int b[5];\n    f(b);\n    return 0;\n}\n" always "void f(int a[10]) {\n    int i = 0;\n    for (i = 0; i < 10; i++)\n        a[i] = i * 2;\n}\nvoid g() {\n    int b[5];\n    f(b);\n    return 0;\n}\n"
Line 3254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3254 always 3254
  "test.cpp:8:warning:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:8:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:7:note:Passing buffer 'b' to function that is declared here\ntest.cpp:8:note:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\n" always "test.cpp:8:warning:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\ntest.cpp:8:note:Function 'f' is called\ntest.cpp:1:note:Declaration of 1st function argument.\ntest.cpp:7:note:Passing buffer 'b' to function that is declared here\ntest.cpp:8:note:Buffer 'b' is too small, the function 'f' expects a bigger buffer in 1st argument\n"
Line 3263
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3263 always 3263
  "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}" always "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}"
Line 3270
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3270 always 3270
  "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n" always "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n"
  "" always ""
Line 3272
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3272 always 3272
  "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}" always "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcat(data, src);\n}"
Line 3279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3279 always 3279
  "" always ""
Line 3281
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3281 always 3281
  "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcat(data, src);\n}" always "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcat(data, src);\n}"
Line 3285
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3285 always 3285
  "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n" always "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than sizeof(data)-strlen(data).\n"
  "" always ""
Line 3287
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3287 always 3287
  "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcat(data, src);\n}" always "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcat(data, src);\n}"
Line 3291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3291 always 3291
  "" always ""
Line 3293
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3293 always 3293
  "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}" always "void foo() {\n    char * data = (char *)alloca(50);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}"
Line 3300
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3300 always 3300
  "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n" always "[test.cpp:6]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n"
  "" always ""
Line 3302
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3302 always 3302
  "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}" always "void foo() {\n    char * data = (char *)alloca(100);\n    char src[100];\n    memset(src, 'C', 99);\n    src[99] = '\\0';\n    strcpy(data, src);\n}"
Line 3309
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3309 always 3309
  "" always ""
Line 3311
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3311 always 3311
  "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcpy(data, src);\n}" always "void foo(char src[100]) {\n    char * data = (char *)alloca(50);\n    strcpy(data, src);\n}"
Line 3315
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3315 always 3315
  "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n" always "[test.cpp:3]: (warning) Possible buffer overflow if strlen(src) is larger than or equal to sizeof(data).\n"
  "" always ""
Line 3317
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3317 always 3317
  "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcpy(data, src);\n}" always "void foo(char src[100]) {\n    char * data = (char *)alloca(100);\n    strcpy(data, src);\n}"
Line 3321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3321 always 3321
  "" always ""
Line 3326
  235 always 235
  = always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 3338
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  sizeof always 235
  ( always 235
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <podtype name=\"u8\" sign=\"u\" size=\"1\"/>\n  <function name=\"mystrcpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 3342
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3342 always 3342
  "void f() {\n  u8 str[256];\n  mystrcpy(str, \"abcd\");\n}" always "void f() {\n  u8 str[256];\n  mystrcpy(str, \"abcd\");\n}"
Line 3346
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3346 always 3346
  "" always ""
Line 3348
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3348 always 3348
  "void f() {\n  u8 str[2];\n  mystrcpy(str, \"abcd\");\n}" always "void f() {\n  u8 str[2];\n  mystrcpy(str, \"abcd\");\n}"
Line 3352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3352 always 3352
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 3355
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3355 always 3355
  "void f() {\n    struct { u8 str[256]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}" always "void f() {\n    struct { u8 str[256]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}"
Line 3359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3359 always 3359
  "" always ""
Line 3361
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3361 always 3361
  "void f() {\n    struct { u8 str[2]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}" always "void f() {\n    struct { u8 str[2]; } ms;\n    mystrcpy(ms.str, \"abcd\");\n}"
Line 3365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3365 always 3365
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: ms.str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: ms.str\n"
Line 3369
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3369 always 3369
  "char f() {\n  const char *x = s;\n  if (cond) x = \"abcde\";\n  return x[20];\n}" always "char f() {\n  const char *x = s;\n  if (cond) x = \"abcde\";\n  return x[20];\n}"
Line 3374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3374 always 3374
  "[test.cpp:4]: (error) Array 'x[6]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'x[6]' accessed at index 20, which is out of bounds.\n"
Line 3380
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3380 always 3380
  "void f() {\n    char a[10];\n    char *p = a + 100;\n}" always "void f() {\n    char a[10];\n    char *p = a + 100;\n}"
Line 3384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3384 always 3384
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n"
Line 3386
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3386 always 3386
  "char *f() {\n    char a[10];\n    return a + 100;\n}" always "char *f() {\n    char a[10];\n    return a + 100;\n}"
Line 3390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3390 always 3390
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'a+100' is out of bounds.\n"
Line 3392
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3392 always 3392
  "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x+i);\n}" always "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x+i);\n}"
Line 3397
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3397 always 3397
  "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x+i' is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x+i' is out of bounds.\n"
Line 3399
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3399 always 3399
  "void f(int i) {\n    char x[10];\n    if (i == -1) {}\n    dostuff(x+i);\n}" always "void f(int i) {\n    char x[10];\n    if (i == -1) {}\n    dostuff(x+i);\n}"
Line 3404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3404 always 3404
  "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is -1 the pointer arithmetic 'x+i' is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is -1 the pointer arithmetic 'x+i' is out of bounds.\n"
Line 3406
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3406 always 3406
  "void f() {\n  wchar_t buf[64];\n  p = (unsigned char *) buf + sizeof (buf);\n}" always "void f() {\n  wchar_t buf[64];\n  p = (unsigned char *) buf + sizeof (buf);\n}"
  "6350.c" always "6350.c"
Line 3410
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3410 always 3410
  "" always ""
Line 3412
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3412 always 3412
  "int f() {\n    const char   d[] = \"0123456789\";\n    char *cp = d + 3;\n    return cp - d;\n}" always "int f() {\n    const char   d[] = \"0123456789\";\n    char *cp = d + 3;\n    return cp - d;\n}"
Line 3417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3417 always 3417
  "" always ""
Line 3421
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3421 always 3421
  "void f() {\n    char *p = malloc(10);\n    p += 100;\n    free(p);}" always "void f() {\n    char *p = malloc(10);\n    p += 100;\n    free(p);}"
Line 3426
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3426 always 3426
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'p+100' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'p+100' is out of bounds.\n"
  "" always ""
Line 3428
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3428 always 3428
  "void f() {\n    char *p = malloc(10);\n    p += 10;\n    *p = 0;\n    free(p);}" always "void f() {\n    char *p = malloc(10);\n    p += 10;\n    *p = 0;\n    free(p);}"
Line 3434
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3434 always 3434
  "[test.cpp:4]: (error) p is out of bounds.\n" always "[test.cpp:4]: (error) p is out of bounds.\n"
  "" always ""
Line 3436
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3436 always 3436
  "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p -= 10;\n    *p = 0;\n    free(p);}" always "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p -= 10;\n    *p = 0;\n    free(p);}"
Line 3443
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3443 always 3443
  "" always ""
Line 3445
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3445 always 3445
  "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p = p - 1;\n    *p = 0;\n    free(p);}" always "void f() {\n    char *p = malloc(10);\n    p += 10;\n    p = p - 1;\n    *p = 0;\n    free(p);}"
Line 3452
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3452 always 3452
  "" always ""
Line 3456
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3456 always 3456
  "struct S { int a[10]; };\nvoid f(struct S *s) {\n    int *p = s->a + 100;\n}" always "struct S { int a[10]; };\nvoid f(struct S *s) {\n    int *p = s->a + 100;\n}"
Line 3460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3460 always 3460
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 's->a+100' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 's->a+100' is out of bounds.\n"
Line 3462
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3462 always 3462
  "template <class T> class Vector\n{\npublic:\n    void test() const;\n    T* data();\n};\ntemplate <class T>\nvoid Vector<T>::test() const\n{\n    const T* PDat = data();\n    const T* P2 = PDat + 1;\n    const T* P1 = P2 - 1;\n}\nVector<std::array<long, 2>> Foo;\n" always "template <class T> class Vector\n{\npublic:\n    void test() const;\n    T* data();\n};\ntemplate <class T>\nvoid Vector<T>::test() const\n{\n    const T* PDat = data();\n    const T* P2 = PDat + 1;\n    const T* P1 = P2 - 1;\n}\nVector<std::array<long, 2>> Foo;\n"
Line 3476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3476 always 3476
  "" always ""
Line 3480
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3480 always 3480
  "const char* f() {\n    g(\"Hello\" + 6);\n}" always "const char* f() {\n    g(\"Hello\" + 6);\n}"
Line 3483
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3483 always 3483
  "" always ""
Line 3485
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3485 always 3485
  "const char* f() {\n    g(\"Hello\" + 7);\n}" always "const char* f() {\n    g(\"Hello\" + 7);\n}"
Line 3488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3488 always 3488
  "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic '\"Hello\"+7' is out of bounds.\n" always "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic '\"Hello\"+7' is out of bounds.\n"
Line 3490
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3490 always 3490
  "const char16_t* f() {\n    g(u\"Hello\" + 6);\n}" always "const char16_t* f() {\n    g(u\"Hello\" + 6);\n}"
Line 3493
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3493 always 3493
  "" always ""
Line 3495
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3495 always 3495
  "const char16_t* f() {\n    g(u\"Hello\" + 7);\n}" always "const char16_t* f() {\n    g(u\"Hello\" + 7);\n}"
Line 3498
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3498 always 3498
  "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic 'u\"Hello\"+7' is out of bounds.\n" always "[test.cpp:2]: (portability) Undefined behaviour, pointer arithmetic 'u\"Hello\"+7' is out of bounds.\n"
Line 3500
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3500 always 3500
  "void f() {\n    int val = 5;\n    std::string hi = \"hi\" + val;\n    std::cout << hi << std::endl;\n}\n" always "void f() {\n    int val = 5;\n    std::string hi = \"hi\" + val;\n    std::cout << hi << std::endl;\n}\n"
Line 3505
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3505 always 3505
  "[test.cpp:2] -> [test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic '\"hi\"+val' is out of bounds.\n" always "[test.cpp:2] -> [test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic '\"hi\"+val' is out of bounds.\n"
Line 3512
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3512 always 3512
  "char *f() {\n    char x[10];\n    return x-1;\n}" always "char *f() {\n    char x[10];\n    return x-1;\n}"
Line 3516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3516 always 3516
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'x-1' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'x-1' is out of bounds.\n"
Line 3518
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3518 always 3518
  "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x-i);\n}" always "void f(int i) {\n    char x[10];\n    if (i == 123) {}\n    dostuff(x-i);\n}"
Line 3523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3523 always 3523
  "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x-i' is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (portability) Undefined behaviour, when 'i' is 123 the pointer arithmetic 'x-i' is out of bounds.\n"
Line 3525
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3525 always 3525
  "void f(int i) {\n    char x[10];\n    if (i == -20) {}\n    dostuff(x-i);\n}" always "void f(int i) {\n    char x[10];\n    if (i == -20) {}\n    dostuff(x-i);\n}"
Line 3530
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3530 always 3530
  "[test.cpp:4]: (portability) Undefined behaviour, when 'i' is -20 the pointer arithmetic 'x-i' is out of bounds.\n" always "[test.cpp:4]: (portability) Undefined behaviour, when 'i' is -20 the pointer arithmetic 'x-i' is out of bounds.\n"
  "" always ""
Line 3532
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3532 always 3532
  "void f(const char *x[10]) {\n    return x-4;\n}" always "void f(const char *x[10]) {\n    return x-4;\n}"
Line 3535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3535 always 3535
  "" always ""
Line 3539
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3539 always 3539
  "struct Foo { char a[4]; };\nvoid f() {\n  struct Foo x = {0};\n  strcat(x.a, \"aa\");\n  strcat(x.a, \"aa\");\n}" always "struct Foo { char a[4]; };\nvoid f() {\n  struct Foo x = {0};\n  strcat(x.a, \"aa\");\n  strcat(x.a, \"aa\");\n}"
Line 3545
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3545 always 3545
  "[test.cpp:5]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:5]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 3549
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3549 always 3549
  "void foo()\n{\n    char str[10];\n    if (str[0])\n    {\n        char str[50];\n        str[30] = 0;\n    }\n}" always "void foo()\n{\n    char str[10];\n    if (str[0])\n    {\n        char str[50];\n        str[30] = 0;\n    }\n}"
Line 3558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3558 always 3558
  "" always ""
Line 3562
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3562 always 3562
  "struct foo {\n  void bar() { return; }\n  type<> member[1];\n};" always "struct foo {\n  void bar() { return; }\n  type<> member[1];\n};"
Line 3566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3566 always 3566
  "" always ""
Line 3570
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3570 always 3570
  "char str[3] = {'a', 'b', 'c'};\n\nvoid foo()\n{\n    str[3] = 0;\n}" always "char str[3] = {'a', 'b', 'c'};\n\nvoid foo()\n{\n    str[3] = 0;\n}"
Line 3576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3576 always 3576
  "[test.cpp:5]: (error) Array 'str[3]' accessed at index 3, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'str[3]' accessed at index 3, which is out of bounds.\n"
Line 3580
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3580 always 3580
  "void foo()\n{\n    char *s; s = new char[10];\n    s[10] = 0;\n}" always "void foo()\n{\n    char *s; s = new char[10];\n    s[10] = 0;\n}"
Line 3585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3585 always 3585
  "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n"
Line 3588
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3588 always 3588
  "char f()\n{\n    int *s; s = new int[10];\n    return s[10];\n}" always "char f()\n{\n    int *s; s = new int[10];\n    return s[10];\n}"
Line 3593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3593 always 3593
  "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n"
Line 3595
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3595 always 3595
  "struct Fred { char c[10]; };\nchar f()\n{\n    Fred *f; f = new Fred;\n    return f->c[10];\n}" always "struct Fred { char c[10]; };\nchar f()\n{\n    Fred *f; f = new Fred;\n    return f->c[10];\n}"
Line 3601
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3601 always 3601
  "[test.cpp:5]: (error) Array 'f->c[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'f->c[10]' accessed at index 10, which is out of bounds.\n"
Line 3603
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3603 always 3603
  "static const size_t MAX_SIZE = UNAVAILABLE_TO_CPPCHECK;\nstruct Thing { char data[MAX_SIZE]; };\nchar f4(const Thing& t) { return !t.data[0]; }" always "static const size_t MAX_SIZE = UNAVAILABLE_TO_CPPCHECK;\nstruct Thing { char data[MAX_SIZE]; };\nchar f4(const Thing& t) { return !t.data[0]; }"
Line 3606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3606 always 3606
  "" always ""
Line 3608
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3608 always 3608
  "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[8] = 0;\n  delete [] buf;\n}" always "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[8] = 0;\n  delete [] buf;\n}"
Line 3616
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3616 always 3616
  "" always ""
Line 3618
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3618 always 3618
  "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[9] = 0;\n  delete [] buf;\n}" always "void foo() {\n  char * buf; buf = new char[8];\n  buf[7] = 0;\n  delete [] buf;\n  buf = new char[9];\n  buf[9] = 0;\n  delete [] buf;\n}"
Line 3626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3626 always 3626
  "[test.cpp:6]: (error) Array 'buf[9]' accessed at index 9, which is out of bounds.\n" always "[test.cpp:6]: (error) Array 'buf[9]' accessed at index 9, which is out of bounds.\n"
Line 3628
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3628 always 3628
  "void foo()\n{\n    enum E { Size = 10 };\n    char *s; s = new char[Size];\n    s[Size] = 0;\n}" always "void foo()\n{\n    enum E { Size = 10 };\n    char *s; s = new char[Size];\n    s[Size] = 0;\n}"
Line 3634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3634 always 3634
  "[test.cpp:5]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n"
Line 3636
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3636 always 3636
  "void foo()\n{\n    enum E { ZERO };\n    E *e; e = new E[10];\n    e[10] = ZERO;\n}" always "void foo()\n{\n    enum E { ZERO };\n    E *e; e = new E[10];\n    e[10] = ZERO;\n}"
Line 3642
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3642 always 3642
  "[test.cpp:5]: (error) Array 'e[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'e[10]' accessed at index 10, which is out of bounds.\n"
Line 3647
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3647 always 3647
  "void foo()\n{\n    char *s; s = (char *)malloc(10);\n    s[10] = 0;\n}" always "void foo()\n{\n    char *s; s = (char *)malloc(10);\n    s[10] = 0;\n}"
Line 3652
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3652 always 3652
  "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n"
Line 3655
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3655 always 3655
  "void f() {\n    int *tab4 = (int *)malloc(20 * sizeof(int));\n    tab4[20] = 0;\n}" always "void f() {\n    int *tab4 = (int *)malloc(20 * sizeof(int));\n    tab4[20] = 0;\n}"
Line 3659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3659 always 3659
  "[test.cpp:3]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:3]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n"
Line 3662
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3662 always 3662
  "void foo() {\n    char *p = (char *)malloc(10);\n    free(p);\n    p = (char *)malloc(10);\n    p[10] = 0;\n}" always "void foo() {\n    char *p = (char *)malloc(10);\n    free(p);\n    p = (char *)malloc(10);\n    p[10] = 0;\n}"
Line 3668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3668 always 3668
  "[test.cpp:5]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:5]: (error) Array 'p[10]' accessed at index 10, which is out of bounds.\n"
Line 3671
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3671 always 3671
  "void f() {\n    int *x, i;\n    x = (int *)malloc(10 * sizeof(int));\n    x[10] = 0;\n}" always "void f() {\n    int *x, i;\n    x = (int *)malloc(10 * sizeof(int));\n    x[10] = 0;\n}"
Line 3676
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3676 always 3676
  "[test.cpp:4]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'x[10]' accessed at index 10, which is out of bounds.\n"
Line 3678
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3678 always 3678
  "void f() {\n  int *tab4; tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  free(tab4);\n  tab4 = malloc(21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}" always "void f() {\n  int *tab4; tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  free(tab4);\n  tab4 = malloc(21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}"
Line 3686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3686 always 3686
  "" always ""
Line 3688
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3688 always 3688
  "void f() {\n  int *tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  tab4 = realloc(tab4,21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}" always "void f() {\n  int *tab4 = malloc(20 * sizeof(int));\n  tab4[19] = 0;\n  tab4 = realloc(tab4,21 * sizeof(int));\n  tab4[20] = 0;\n  free(tab4);\n}"
Line 3695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3695 always 3695
  "" always ""
Line 3697
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3697 always 3697
  "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(Size * 4);\n    tab4[Size] = Size;\n}" always "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(Size * 4);\n    tab4[Size] = Size;\n}"
Line 3702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3702 always 3702
  "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n"
Line 3704
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3704 always 3704
  "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(4 * Size);\n    tab4[Size] = Size;\n}" always "void f() {\n    enum E { Size = 20 };\n    E *tab4 = (E *)malloc(4 * Size);\n    tab4[Size] = Size;\n}"
Line 3709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3709 always 3709
  "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n"
Line 3711
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3711 always 3711
  "void f() {\n    enum E { ZERO };\n    E *tab4 = (E *)malloc(20 * sizeof(E));\n    tab4[20] = ZERO;\n}" always "void f() {\n    enum E { ZERO };\n    E *tab4 = (E *)malloc(20 * sizeof(E));\n    tab4[20] = ZERO;\n}"
Line 3716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3716 always 3716
  "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 'tab4[20]' accessed at index 20, which is out of bounds.\n"
Line 3718
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3718 always 3718
  "void f() {\n  unsigned char **cache = malloc(32);\n  cache[i] = malloc(65536);\n  cache[i][0xFFFF] = 0;\n}" always "void f() {\n  unsigned char **cache = malloc(32);\n  cache[i] = malloc(65536);\n  cache[i][0xFFFF] = 0;\n}"
Line 3723
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3723 always 3723
  "" always ""
Line 3725
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3725 always 3725
  "void f() {\n  int **a = malloc(2 * sizeof(int*));\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}" always "void f() {\n  int **a = malloc(2 * sizeof(int*));\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}"
Line 3730
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3730 always 3730
  "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n"
Line 3732
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3732 always 3732
  "void f() {\n  int **a = new int*[2];\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}" always "void f() {\n  int **a = new int*[2];\n  for (int i = 0; i < 3; i++)\n    a[i] = NULL;\n}"
Line 3737
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3737 always 3737
  "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n" always "[test.cpp:3] -> [test.cpp:4]: (error) Array 'a[2]' accessed at index 2, which is out of bounds.\n"
Line 3742
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3742 always 3742
  "void foo()\n{\n    const char *s = \"123\";\n    s[10] = 0;\n}" always "void foo()\n{\n    const char *s = \"123\";\n    s[10] = 0;\n}"
Line 3747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3747 always 3747
  "[test.cpp:4]: (error) Array 's[4]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[4]' accessed at index 10, which is out of bounds.\n"
Line 3749
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3749 always 3749
  "void foo()\n{\n    char *s; s = \"\";\n    s[10] = 0;\n}" always "void foo()\n{\n    char *s; s = \"\";\n    s[10] = 0;\n}"
Line 3754
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3754 always 3754
  "[test.cpp:4]: (error) Array 's[1]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[1]' accessed at index 10, which is out of bounds.\n"
Line 3756
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3756 always 3756
  "void foo() {\n    const char *s = \"\";\n    s = y();\n    s[10] = 0;\n}" always "void foo() {\n    const char *s = \"\";\n    s = y();\n    s[10] = 0;\n}"
Line 3761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3761 always 3761
  "" always ""
Line 3763
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3763 always 3763
  "void foo()\n{\n    std::string s = \"123\";\n    s.resize(100);\n    s[10] = 0;\n}" always "void foo()\n{\n    std::string s = \"123\";\n    s.resize(100);\n    s[10] = 0;\n}"
Line 3769
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3769 always 3769
  "" always ""
Line 3774
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3774 always 3774
  "void foo()\n{\n    char *s = (char *)alloca(10);\n    s[10] = 0;\n}" always "void foo()\n{\n    char *s = (char *)alloca(10);\n    s[10] = 0;\n}"
Line 3779
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3779 always 3779
  "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:4]: (error) Array 's[10]' accessed at index 10, which is out of bounds.\n"
  "" always ""
Line 3858
  214 always 214
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
Line 3870
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
  sizeof always 214
  ( always 214
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mymemset\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
Line 3873
  = always 4
  4 always 4
Line 3875
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3875 always 3875
  "void f() {\n    char c[10];\n    mymemset(c, 0, 10);\n}" always "void f() {\n    char c[10];\n    mymemset(c, 0, 10);\n}"
Line 3879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3879 always 3879
  "" always ""
Line 3881
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3881 always 3881
  "void f() {\n    char c[10];\n    mymemset(c, 0, 11);\n}" always "void f() {\n    char c[10];\n    mymemset(c, 0, 11);\n}"
Line 3885
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3885 always 3885
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n"
Line 3887
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3887 always 3887
  "struct S {\n    char a[5];\n};\nvoid f() {\n    S s;\n    mymemset(s.a, 0, 10);\n}" always "struct S {\n    char a[5];\n};\nvoid f() {\n    S s;\n    mymemset(s.a, 0, 10);\n}"
Line 3894
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3894 always 3894
  "[test.cpp:6]: (error) Buffer is accessed out of bounds: s.a\n" always "[test.cpp:6]: (error) Buffer is accessed out of bounds: s.a\n"
Line 3896
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3896 always 3896
  "void foo() {\n    char s[10];\n    mymemset(s, 0, '*');\n}" always "void foo() {\n    char s[10];\n    mymemset(s, 0, '*');\n}"
Line 3900
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3900 always 3900
  "[test.cpp:3]: (warning) The size argument is given as a char constant.\n[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n" always "[test.cpp:3]: (warning) The size argument is given as a char constant.\n[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n"
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: s\n"
Line 3904
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3904 always 3904
  "void f(void) {\n  char a[10];\n  mymemset(a+5, 0, 10);\n}" always "void f(void) {\n  char a[10];\n  mymemset(a+5, 0, 10);\n}"
Line 3908
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3908 always 3908
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: a\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: a\n"
  "" always ""
Line 3911
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3911 always 3911
  "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 6);\n}" always "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 6);\n}"
Line 3915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3915 always 3915
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 3917
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3917 always 3917
  "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 5);\n}" always "void f(void) {\n    char str[] = \"abcd\";\n    mymemset(str, 0, 5);\n}"
Line 3921
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3921 always 3921
  "" always ""
Line 3923
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3923 always 3923
  "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 21);\n}" always "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 21);\n}"
Line 3927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3927 always 3927
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 3929
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3929 always 3929
  "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 20);\n}" always "void f(void) {\n    wchar_t str[] = L\"abcd\";\n    mymemset(str, 0, 20);\n}"
Line 3933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3933 always 3933
  "" always ""
Line 3936
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3936 always 3936
  "void f(void) {\n  char c;\n  mymemset(&c, 0, 4);\n}" always "void f(void) {\n  char c;\n  mymemset(&c, 0, 4);\n}"
Line 3940
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3940 always 3940
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n"
  "" always ""
Line 3943
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3943 always 3943
  "void f(void) {\n    unknown_type_t buf[4];\n    mymemset(buf, 0, 100);\n}" always "void f(void) {\n    unknown_type_t buf[4];\n    mymemset(buf, 0, 100);\n}"
Line 3947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3947 always 3947
  "" always ""
Line 3950
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3950 always 3950
  "int main() {\n    char b[5][6];\n    mymemset(b, 0, 5 * 6);\n}" always "int main() {\n    char b[5][6];\n    mymemset(b, 0, 5 * 6);\n}"
Line 3954
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3954 always 3954
  "" always ""
Line 3956
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3956 always 3956
  "int main() {\n    char b[5][6];\n    mymemset(b, 0, 6 * 6);\n}" always "int main() {\n    char b[5][6];\n    mymemset(b, 0, 6 * 6);\n}"
Line 3960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3960 always 3960
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n"
Line 3962
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3962 always 3962
  "int main() {\n    char b[5][6];\n    mymemset(b, 0, 31);\n}" always "int main() {\n    char b[5][6];\n    mymemset(b, 0, 31);\n}"
Line 3966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3966 always 3966
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: b\n"
Line 3969
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3969 always 3969
  "void f() {\n    char str[3];\n    foo.mymemset(str, 0, 100);\n    foo::mymemset(str, 0, 100);\n    std::mymemset(str, 0, 100);\n}" always "void f() {\n    char str[3];\n    foo.mymemset(str, 0, 100);\n    foo::mymemset(str, 0, 100);\n    std::mymemset(str, 0, 100);\n}"
Line 3975
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3975 always 3975
  "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n"
  "" always ""
Line 3978
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3978 always 3978
  "void f() {\n  mymemset(\"abc\", 0, 20);\n}" always "void f() {\n  mymemset(\"abc\", 0, 20);\n}"
Line 3981
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3981 always 3981
  "[test.cpp:2]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:2]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 3985
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3985 always 3985
  "void f() {\n  mymemset(temp, \"abc\", 4);\n}" always "void f() {\n  mymemset(temp, \"abc\", 4);\n}"
Line 3988
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3988 always 3988
  "" always ""
Line 3990
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3990 always 3990
  "void f() {\n    char c[10] = \"c\";\n    mymemset(c, 0, 10);\n}" always "void f() {\n    char c[10] = \"c\";\n    mymemset(c, 0, 10);\n}"
Line 3994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  3994 always 3994
  "" always ""
Line 3999
  254 always 254
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
Line 4012
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
  sizeof always 254
  ( always 254
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mystrncpy\">\n    <noreturn>false</noreturn>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n      <minsize type=\"argvalue\" arg=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n  </function>\n</def>"
Line 4015
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4015 always 4015
  "void f() {\n    char c[7];\n    mystrncpy(c, \"hello\", 7);\n}" always "void f() {\n    char c[7];\n    mystrncpy(c, \"hello\", 7);\n}"
Line 4019
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4019 always 4019
  "" always ""
Line 4021
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4021 always 4021
  "void f() {\n char c[6];\n mystrncpy(c,\"hello\",6);\n}" always "void f() {\n char c[6];\n mystrncpy(c,\"hello\",6);\n}"
Line 4025
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4025 always 4025
  "" always ""
Line 4027
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4027 always 4027
  "void f() {\n char c[5];\n mystrncpy(c,\"hello\",6);\n}" always "void f() {\n char c[5];\n mystrncpy(c,\"hello\",6);\n}"
Line 4031
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4031 always 4031
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n"
Line 4033
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4033 always 4033
  "void f() {\n    char c[6];\n    mystrncpy(c,\"hello!\",7);\n}" always "void f() {\n    char c[6];\n    mystrncpy(c,\"hello!\",7);\n}"
Line 4037
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4037 always 4037
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n"
Line 4039
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4039 always 4039
  "void f(unsigned int addr) {\n    memset((void *)addr, 0, 1000);\n}" always "void f(unsigned int addr) {\n    memset((void *)addr, 0, 1000);\n}"
Line 4042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4042 always 4042
  "" always ""
Line 4044
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4044 always 4044
  "struct AB { char a[10]; };\nvoid foo(AB *ab) {\n    mystrncpy(x, ab->a, 100);\n}" always "struct AB { char a[10]; };\nvoid foo(AB *ab) {\n    mystrncpy(x, ab->a, 100);\n}"
Line 4048
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4048 always 4048
  "" always ""
Line 4050
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4050 always 4050
  "void a(char *p) { mystrncpy(p,\"hello world!\",10); }\nvoid b() {\n    char buf[5];\n    a(buf);}" always "void a(char *p) { mystrncpy(p,\"hello world!\",10); }\nvoid b() {\n    char buf[5];\n    a(buf);}"
Line 4055
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4055 always 4055
  "[test.cpp:4] -> [test.cpp:1]: (error) Buffer is accessed out of bounds: buf\n" always "[test.cpp:4] -> [test.cpp:1]: (error) Buffer is accessed out of bounds: buf\n"
  "" always ""
Line 4062
  241 always 241
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>"
Line 4076
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>"
  sizeof always 241
  ( always 241
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"mysprintf\">\n    <noreturn>false</noreturn>\n    <formatstr/>\n    <arg nr=\"1\">\n      <minsize type=\"strlen\" arg=\"2\"/>\n    </arg>\n    <arg nr=\"2\">\n      <formatstr/>\n    </arg>\n  </function>\n</def>"
Line 4080
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4080 always 4080
  "void f() {\n    char str[3];\n    mysprintf(str, \"test\");\n}" always "void f() {\n    char str[3];\n    mysprintf(str, \"test\");\n}"
Line 4084
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4084 always 4084
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 4086
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4086 always 4086
  "void f() {\n    char str[5];\n    mysprintf(str, \"%s\", \"abcde\");\n}" always "void f() {\n    char str[5];\n    mysprintf(str, \"%s\", \"abcde\");\n}"
Line 4090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4090 always 4090
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 4092
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4092 always 4092
  "int getnumber();\nvoid f()\n{\n    char str[5];\n    mysprintf(str, \"%d: %s\", getnumber(), \"abcde\");\n}" always "int getnumber();\nvoid f()\n{\n    char str[5];\n    mysprintf(str, \"%d: %s\", getnumber(), \"abcde\");\n}"
Line 4098
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4098 always 4098
  "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:5]: (error) Buffer is accessed out of bounds: str\n"
Line 4100
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4100 always 4100
  "void f() {\n    char str[5];\n    mysprintf(str, \"test%s\", \"\");\n}" always "void f() {\n    char str[5];\n    mysprintf(str, \"test%s\", \"\");\n}"
Line 4104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4104 always 4104
  "" always ""
Line 4106
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4106 always 4106
  "void f() {\n    char *str = new char[5];\n    mysprintf(str, \"abcde\");\n}" always "void f() {\n    char *str = new char[5];\n    mysprintf(str, \"abcde\");\n}"
Line 4110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4110 always 4110
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: str\n"
Line 4112
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4112 always 4112
  "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"34\");\n}" always "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"34\");\n}"
Line 4116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4116 always 4116
  "" always ""
Line 4118
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4118 always 4118
  "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"345\");\n}" always "void f(int condition) {\n    char str[5];\n    mysprintf(str, \"test%s\", condition ? \"12\" : \"345\");\n}"
Line 4122
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4122 always 4122
  "error" always "error"
  "" always ""
Line 4124
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4124 always 4124
  "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}" always "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}"
Line 4129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4129 always 4129
  "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" always "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n"
Line 4132
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4132 always 4132
  "void f() {\n  char *a = new char(30);\n  mysprintf(a, \"a\");\n}" always "void f() {\n  char *a = new char(30);\n  mysprintf(a, \"a\");\n}"
Line 4136
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4136 always 4136
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4138
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4138 always 4138
  "void f(char value) {\n  char *a = new char(value);\n  mysprintf(a, \"a\");\n}" always "void f(char value) {\n  char *a = new char(value);\n  mysprintf(a, \"a\");\n}"
Line 4142
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4142 always 4142
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4145
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4145 always 4145
  "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo));\n  mysprintf(x->a, \"aa\");\n}" always "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo));\n  mysprintf(x->a, \"aa\");\n}"
Line 4150
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4150 always 4150
  "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" always "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n"
  "" always ""
Line 4152
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4152 always 4152
  "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo) + 10);\n  mysprintf(x->a, \"aa\");\n}" always "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo *x = malloc(sizeof(Foo) + 10);\n  mysprintf(x->a, \"aa\");\n}"
Line 4157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4157 always 4157
  "" always ""
Line 4159
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4159 always 4159
  "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}" always "struct Foo { char a[1]; };\nvoid f() {\n  struct Foo x;\n  mysprintf(x.a, \"aa\");\n}"
Line 4164
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4164 always 4164
  "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n" always "[test.cpp:4]: (error, inconclusive) Buffer is accessed out of bounds: x.a\n"
Line 4166
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4166 always 4166
  "struct Foo {\n  char a[LEN];\n  void f();\n};void Foo::f() {\n  mysprintf(a, \"abcd\");\n}" always "struct Foo {\n  char a[LEN];\n  void f();\n};void Foo::f() {\n  mysprintf(a, \"abcd\");\n}"
Line 4173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4173 always 4173
  "" always ""
Line 4178
  204 always 204
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>"
Line 4190
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>"
  sizeof always 204
  ( always 204
  xmldata always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"myfread\">\n    <arg nr=\"1\">\n      <minsize type=\"mul\" arg=\"2\" arg2=\"3\"/>\n    </arg>\n    <arg nr=\"2\"/>\n    <arg nr=\"3\"/>\n    <arg nr=\"4\"/>\n  </function>\n</def>"
Line 4193
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4193 always 4193
  "void f() {\n    char c[5];\n    myfread(c, 1, 5, stdin);\n}" always "void f() {\n    char c[5];\n    myfread(c, 1, 5, stdin);\n}"
Line 4197
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4197 always 4197
  "" always ""
Line 4199
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4199 always 4199
  "void f() {\n    char c[5];\n    myfread(c, 1, 6, stdin);\n}" always "void f() {\n    char c[5];\n    myfread(c, 1, 6, stdin);\n}"
Line 4203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4203 always 4203
  "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds: c\n"
Line 4209
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4209 always 4209
  "void f()\n{\n UnknownType *a = malloc(4);\n}" always "void f()\n{\n UnknownType *a = malloc(4);\n}"
Line 4213
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4213 always 4213
  "" always ""
Line 4217
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4217 always 4217
  "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n}" always "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n    strncpy(baz, bar, 100);\n    baz[99] = 0;\n}"
Line 4225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4225 always 4225
  "" always ""
Line 4227
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4227 always 4227
  "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[99] = '\\0';\n}" always "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[99] = '\\0';\n}"
Line 4232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4232 always 4232
  "" always ""
Line 4234
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4234 always 4234
  "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[x+1] = '\\0';\n}" always "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    baz[x+1] = '\\0';\n}"
Line 4239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4239 always 4239
  "" always ""
Line 4242
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4242 always 4242
  "char baz[100];\nstrncpy(baz, \"var\", 100)" always "char baz[100];\nstrncpy(baz, \"var\", 100)"
Line 4244
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4244 always 4244
  "" always ""
Line 4247
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4247 always 4247
  "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    foo(baz);\n    foo(baz);\n}" always "void foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    foo(baz);\n    foo(baz);\n}"
Line 4253
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4253 always 4253
  "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n"
Line 4257
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4257 always 4257
  "char *foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    bar[99] = 0;\n    return strdup(baz);\n}" always "char *foo ( char *bar ) {\n    char baz[100];\n    strncpy(baz, bar, 100);\n    bar[99] = 0;\n    return strdup(baz);\n}"
Line 4263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4263 always 4263
  "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'baz' may not be null-terminated after the call to strncpy().\n"
Line 4269
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4269 always 4269
  "char str[100];\n\nvoid foo(char *a) {\n    strncpy(str, a, 100);\n}\n\nvoid bar(char *p) {\n    strncpy(p, str, 100);\n}\n" always "char str[100];\n\nvoid foo(char *a) {\n    strncpy(str, a, 100);\n}\n\nvoid bar(char *p) {\n    strncpy(p, str, 100);\n}\n"
Line 4278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4278 always 4278
  "[test.cpp:4]: (warning, inconclusive) The buffer 'str' may not be null-terminated after the call to strncpy().\n" always "[test.cpp:4]: (warning, inconclusive) The buffer 'str' may not be null-terminated after the call to strncpy().\n"
Line 4282
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4282 always 4282
  "void bar() {\n    char buf[4];\n    strncpy(buf, \"ab\", 4);\n}" always "void bar() {\n    char buf[4];\n    strncpy(buf, \"ab\", 4);\n}"
Line 4286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4286 always 4286
  "" always ""
Line 4288
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4288 always 4288
  "void bar() {\n    char buf[4];\n    strncpy(buf, \"abcde\", 4);\n}" always "void bar() {\n    char buf[4];\n    strncpy(buf, \"abcde\", 4);\n}"
Line 4292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4292 always 4292
  "[test.cpp:3]: (warning, inconclusive) The buffer 'buf' may not be null-terminated after the call to strncpy().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'buf' may not be null-terminated after the call to strncpy().\n"
Line 4298
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4298 always 4298
  "char *f2 ( char *b )\n{\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n}\nvoid f()\n{\n    char a[10];\n    f2(a);\n}" always "char *f2 ( char *b )\n{\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n    f2( b );\n}\nvoid f()\n{\n    char a[10];\n    f2(a);\n}"
Line 4321
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4321 always 4321
  "" always ""
Line 4327
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4327 always 4327
  "struct struct A\n{\n    int alloclen;\n};\n\nvoid foo()\n{\n    struct A *str;\n    str = malloc(4);\n}" always "struct struct A\n{\n    int alloclen;\n};\n\nvoid foo()\n{\n    struct A *str;\n    str = malloc(4);\n}"
Line 4337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4337 always 4337
  "" always ""
Line 4341
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4341 always 4341
  "void a(char *p) {\n    f( { if(finally_arg); } );\n}\n\nvoid b() {\n    char arr[64];\n    a(arr);\n}" always "void a(char *p) {\n    f( { if(finally_arg); } );\n}\n\nvoid b() {\n    char arr[64];\n    a(arr);\n}"
Line 4352
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4352 always 4352
  "struct b { unknown v[0]; };\nvoid d() { struct b *f; f = malloc(108); }" always "struct b { unknown v[0]; };\nvoid d() { struct b *f; f = malloc(108); }"
Line 4357
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4357 always 4357
  "__thread void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }" always "__thread void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }"
Line 4363
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4363 always 4363
  "thread_local void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }" always "thread_local void *thread_local_var; int main() {   thread_local_var = malloc(1337);   return 0; }"
Line 4371
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4371 always 4371
  "int a() {\n    void b(char **dst) {\n        *dst = malloc(50);\n    }\n}" always "int a() {\n    void b(char **dst) {\n        *dst = malloc(50);\n    }\n}"
Line 4379
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4379 always 4379
  "void start(char* name) {\nchar snapname[64] = { 0 };\nstrncpy(snapname, \"snapshot\", arrayLength(snapname));\n}" always "void start(char* name) {\nchar snapname[64] = { 0 };\nstrncpy(snapname, \"snapshot\", arrayLength(snapname));\n}"
Line 4386
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4386 always 4386
  "char x[10];\nvoid f() { x[10]; }" always "char x[10];\nvoid f() { x[10]; }"
Line 4391
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4391 always 4391
  "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2];\n        char *p = strdup(argv[1]);\n        strcpy(buf,p);\n        free(p);\n    }\n    return 0;\n}" always "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2];\n        char *p = strdup(argv[1]);\n        strcpy(buf,p);\n        free(p);\n    }\n    return 0;\n}"
Line 4402
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4402 always 4402
  "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4404
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4404 always 4404
  "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2] = {'\\0','\\0'};\n        char *p = strdup(argv[1]);\n        strcat(buf,p);\n        free(p);\n    }\n    return 0;\n}" always "int main(int argc, char *argv[])\n{\n    if(argc>1)\n    {\n        char buf[2] = {'\\0','\\0'};\n        char *p = strdup(argv[1]);\n        strcat(buf,p);\n        free(p);\n    }\n    return 0;\n}"
Line 4415
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4415 always 4415
  "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:7]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4417
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4417 always 4417
  "int main(const int argc, char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(const int argc, char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4422
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4422 always 4422
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4424
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4424 always 4424
  "int main(int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4429
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4429 always 4429
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4431
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4431 always 4431
  "int main(const int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(const int argc, const char* argv[])\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4436
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4436 always 4436
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4438
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4438 always 4438
  "int main(int argc, char* argv[])\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" always "int main(int argc, char* argv[])\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}"
Line 4443
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4443 always 4443
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4445
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4445 always 4445
  "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4450
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4450 always 4450
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4452
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4452 always 4452
  "int main(int argc, const char *const *const argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(int argc, const char *const *const argv, char **envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4457
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4457 always 4457
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4459
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4459 always 4459
  "int main(const int argc, const char *const *const argv, const char *const *const envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}" always "int main(const int argc, const char *const *const argv, const char *const *const envp)\n{\n    char prog[10];\n    strcpy(prog, argv[0]);\n}"
Line 4464
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4464 always 4464
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4466
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4466 always 4466
  "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" always "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}"
Line 4471
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4471 always 4471
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4473
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4473 always 4473
  "int main(const int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" always "int main(const int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}"
Line 4478
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4478 always 4478
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4480
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4480 always 4480
  "int main(int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" always "int main(int argc, const char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}"
Line 4485
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4485 always 4485
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4487
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4487 always 4487
  "int main(const int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}" always "int main(const int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, argv[0]);\n}"
Line 4492
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4492 always 4492
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4494
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4494 always 4494
  "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, options[0]);\n}" always "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, options[0]);\n}"
Line 4499
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4499 always 4499
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4501
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4501 always 4501
  "int main(int argc, char **options)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, options[0]);\n}" always "int main(int argc, char **options)\n{\n    char prog[10] = {'\\0'};\n    strcat(prog, options[0]);\n}"
Line 4506
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4506 always 4506
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4508
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4508 always 4508
  "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, *options);\n}" always "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog, *options);\n}"
Line 4513
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4513 always 4513
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4515
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4515 always 4515
  "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog+3, *options);\n}" always "int main(int argc, char **options)\n{\n    char prog[10];\n    strcpy(prog+3, *options);\n}"
Line 4520
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4520 always 4520
  "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4522
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4522 always 4522
  "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    if (strlen(argv[0]) < 10)\n        strcpy(prog, argv[0]);\n}" always "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    if (strlen(argv[0]) < 10)\n        strcpy(prog, argv[0]);\n}"
Line 4528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4528 always 4528
  "" always ""
Line 4530
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4530 always 4530
  "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    if (10 > strlen(argv[0]))\n        strcat(prog, argv[0]);\n}" always "int main(int argc, char **argv, char **envp)\n{\n    char prog[10] = {'\\0'};\n    if (10 > strlen(argv[0]))\n        strcat(prog, argv[0]);\n}"
Line 4536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4536 always 4536
  "" always ""
Line 4538
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4538 always 4538
  "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    argv[0][0] = '\\0';\n    strcpy(prog, argv[0]);\n}" always "int main(int argc, char **argv, char **envp)\n{\n    char prog[10];\n    argv[0][0] = '\\0';\n    strcpy(prog, argv[0]);\n}"
Line 4544
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4544 always 4544
  "" always ""
Line 4547
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4547 always 4547
  "int main(int argc, char* argv[]) {\n    char prog[10];\n    strcpy(prog, argv[0]);\n    strcpy(prog, argv[0]);\n}" always "int main(int argc, char* argv[]) {\n    char prog[10];\n    strcpy(prog, argv[0]);\n    strcpy(prog, argv[0]);\n}"
Line 4552
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4552 always 4552
  "[test.cpp:3]: (error) Buffer overrun possible for long command line arguments.\n[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n" always "[test.cpp:3]: (error) Buffer overrun possible for long command line arguments.\n[test.cpp:4]: (error) Buffer overrun possible for long command line arguments.\n"
  "" always ""
Line 4556
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4556 always 4556
  "int main(int argc, char *argv[]) {\n  char *strcpy();\n}" always "int main(int argc, char *argv[]) {\n  char *strcpy();\n}"
Line 4559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4559 always 4559
  "" always ""
Line 4560
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4560 always 4560
  "int main(int argc, char *argv[]) {\n  char *strcat();\n}" always "int main(int argc, char *argv[]) {\n  char *strcat();\n}"
Line 4563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4563 always 4563
  "" always ""
Line 4567
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4567 always 4567
  "void f(char *a) {\n  char *b = new char[strlen(a)];\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = new char[strlen(a)];\n  strcpy(b, a);\n}"
Line 4571
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4571 always 4571
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4573
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4573 always 4573
  "void f(char *a) {\n  char *b = new char[strlen(a) + 1];\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = new char[strlen(a) + 1];\n  strcpy(b, a);\n}"
Line 4577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4577 always 4577
  "" always ""
Line 4579
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4579 always 4579
  "void f(char *a) {\n  char *b = new char[strlen(a)];\n  a[0] = '\\0';\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = new char[strlen(a)];\n  a[0] = '\\0';\n  strcpy(b, a);\n}"
Line 4584
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4584 always 4584
  "" always ""
Line 4586
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4586 always 4586
  "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  b = realloc(b, 10000);\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  b = realloc(b, 10000);\n  strcpy(b, a);\n}"
Line 4591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4591 always 4591
  "" always ""
Line 4593
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4593 always 4593
  "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}"
Line 4597
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4597 always 4597
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4599
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4599 always 4599
  "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  {\n    strcpy(b, a);\n  }\n}" always "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  {\n    strcpy(b, a);\n  }\n}"
Line 4605
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4605 always 4605
  "[test.cpp:4]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:4]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4607
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4607 always 4607
  "void f(char *a) {\n  char *b = (char *)malloc(strlen(a) + 1);\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = (char *)malloc(strlen(a) + 1);\n  strcpy(b, a);\n}"
Line 4611
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4611 always 4611
  "" always ""
Line 4613
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4613 always 4613
  "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a));\n  strcpy(b, a);\n}" always "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a));\n  strcpy(b, a);\n}"
Line 4617
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4617 always 4617
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4619
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4619 always 4619
  "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a) + 1);\n  strcpy(b, a);\n}" always "void f(char *a, char *c) {\n  char *b = (char *)realloc(c, strlen(a) + 1);\n  strcpy(b, a);\n}"
Line 4623
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4623 always 4623
  "" always ""
Line 4625
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4625 always 4625
  "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}" always "void f(char *a) {\n  char *b = (char *)malloc(strlen(a));\n  strcpy(b, a);\n}"
Line 4629
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4629 always 4629
  "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n" always "[test.cpp:3]: (error) Buffer is accessed out of bounds.\n"
  "" always ""
Line 4633
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4633 always 4633
  "class A {\nprivate:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    X x;\n    x.buf[10] = 0;\n}" always "class A {\nprivate:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    X x;\n    x.buf[10] = 0;\n}"
Line 4643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4643 always 4643
  "" always ""
Line 4645
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4645 always 4645
  "class A {\npublic:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    A::X x;\n    x.buf[10] = 0;\n}" always "class A {\npublic:\n    struct X { char buf[10]; };\n};\n\nvoid f()\n{\n    A::X x;\n    x.buf[10] = 0;\n}"
Line 4655
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4655 always 4655
  "[test.cpp:9]: (error) Array 'x.buf[10]' accessed at index 10, which is out of bounds.\n" always "[test.cpp:9]: (error) Array 'x.buf[10]' accessed at index 10, which is out of bounds.\n"
Line 4661
  this always !0
  nullptr always 0
Line 4667
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4667 always 4667
  "void f(const char s[]) {\n    if (s[i] == 'x' && i < y) {\n    }}" always "void f(const char s[]) {\n    if (s[i] == 'x' && i < y) {\n    }}"
Line 4671
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4671 always 4671
  "" always ""
Line 4673
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4673 always 4673
  "void f(const char s[], int i) {\n    if (s[i] == 'x' && i < y) {\n    }}" always "void f(const char s[], int i) {\n    if (s[i] == 'x' && i < y) {\n    }}"
Line 4677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4677 always 4677
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4679
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4679 always 4679
  "void f(const char s[]) {\n    for (int i = 0; s[i] == 'x' && i < y; ++i) {\n    }}" always "void f(const char s[]) {\n    for (int i = 0; s[i] == 'x' && i < y; ++i) {\n    }}"
Line 4683
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4683 always 4683
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4685
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4685 always 4685
  "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (i <= 42)) {\n    }\n}" always "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (i <= 42)) {\n    }\n}"
Line 4689
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4689 always 4689
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4691
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4691 always 4691
  "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (42 >= i)) {\n    }\n}" always "void f(const int a[], unsigned i) {\n    if((a[i] < 2) && (42 >= i)) {\n    }\n}"
Line 4695
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4695 always 4695
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4698
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4698 always 4698
  "void f(char* e, int y) {\n    if (e[y] == '/' && elen > y + 1 && e[y + 1] == '?') {\n    }\n}" always "void f(char* e, int y) {\n    if (e[y] == '/' && elen > y + 1 && e[y + 1] == '?') {\n    }\n}"
Line 4702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4702 always 4702
  "" always ""
Line 4705
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4705 always 4705
  "void f(const int a[], unsigned i) {\n    if(a[i] < func(i) && i <= 42) {\n    }\n}" always "void f(const int a[], unsigned i) {\n    if(a[i] < func(i) && i <= 42) {\n    }\n}"
Line 4709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4709 always 4709
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4711
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4711 always 4711
  "void f(const int a[], unsigned i) {\n    if (i <= 42 && a[i] < func(i)) {\n    }\n}" always "void f(const int a[], unsigned i) {\n    if (i <= 42 && a[i] < func(i)) {\n    }\n}"
Line 4715
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4715 always 4715
  "" always ""
Line 4717
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4717 always 4717
  "void f(const int a[], unsigned i) {\n    if (foo(a[i] + 3) < func(i) && i <= 42) {\n    }\n}" always "void f(const int a[], unsigned i) {\n    if (foo(a[i] + 3) < func(i) && i <= 42) {\n    }\n}"
Line 4721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4721 always 4721
  "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n" always "[test.cpp:2]: (style) Array index 'i' is used before limits check.\n"
Line 4723
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4723 always 4723
  "void f(int i) {\n  sizeof(a)/sizeof(a[i]) && i < 10;\n}" always "void f(int i) {\n  sizeof(a)/sizeof(a[i]) && i < 10;\n}"
Line 4726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4726 always 4726
  "" always ""
Line 4729
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4729 always 4729
  "void f(int i) {\n  if ((i < 10 ? buf[i] : 1) && (i < 5 ? buf[i] : 5)){}\n}" always "void f(int i) {\n  if ((i < 10 ? buf[i] : 1) && (i < 5 ? buf[i] : 5)){}\n}"
Line 4732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4732 always 4732
  "" always ""
Line 4736
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4736 always 4736
  "extern const char *Names[2];\nconst char* getName(int value) {\n  if ((value < 0) || (value > 1))\n    return \"???\";\n  const char* name = Names[value]; \n  switch (value) {\n  case 2:\n    break; \n  }\n  return name;\n}\n" always "extern const char *Names[2];\nconst char* getName(int value) {\n  if ((value < 0) || (value > 1))\n    return \"???\";\n  const char* name = Names[value]; \n  switch (value) {\n  case 2:\n    break; \n  }\n  return name;\n}\n"
Line 4747
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4747 always 4747
  "" always ""
Line 4751
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4751 always 4751
  "void f() {\n    char c[6];\n    strncpy(c,\"hello!\",6);\n}" always "void f() {\n    char c[6];\n    strncpy(c,\"hello!\",6);\n}"
Line 4755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4755 always 4755
  "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to strncpy().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to strncpy().\n"
Line 4757
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4757 always 4757
  "void f() {\n    char c[6];\n    memcpy(c,\"hello!\",6);\n}" always "void f() {\n    char c[6];\n    memcpy(c,\"hello!\",6);\n}"
Line 4761
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4761 always 4761
  "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memcpy().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memcpy().\n"
  "" always ""
Line 4763
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4763 always 4763
  "void f() {\n    char c[6];\n    memmove(c,\"hello!\",6);\n}" always "void f() {\n    char c[6];\n    memmove(c,\"hello!\",6);\n}"
Line 4767
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4767 always 4767
  "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memmove().\n" always "[test.cpp:3]: (warning, inconclusive) The buffer 'c' may not be null-terminated after the call to memmove().\n"
  "" always ""
Line 4771
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4771 always 4771
  "void f()\n{\n   int *a;\n   a = (int *)malloc( -10 );\n   free(a);\n}" always "void f()\n{\n   int *a;\n   a = (int *)malloc( -10 );\n   free(a);\n}"
Line 4777
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4777 always 4777
  "[test.cpp:4]: (error) Memory allocation size is negative.\n" always "[test.cpp:4]: (error) Memory allocation size is negative.\n"
  "" always ""
Line 4779
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4779 always 4779
  "void f()\n{\n   int *a;\n   a = (int *)malloc( -10);\n   free(a);\n}" always "void f()\n{\n   int *a;\n   a = (int *)malloc( -10);\n   free(a);\n}"
Line 4785
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4785 always 4785
  "[test.cpp:4]: (error) Memory allocation size is negative.\n" always "[test.cpp:4]: (error) Memory allocation size is negative.\n"
  "" always ""
Line 4787
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4787 always 4787
  "void f()\n{\n   int *a;\n   a = (int *)alloca( -10 );\n}" always "void f()\n{\n   int *a;\n   a = (int *)alloca( -10 );\n}"
Line 4792
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4792 always 4792
  "[test.cpp:4]: (error) Memory allocation size is negative.\n" always "[test.cpp:4]: (error) Memory allocation size is negative.\n"
  "" always ""
Line 4796
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4796 always 4796
  "void f(int sz) {\n   int a[sz];\n}\nvoid x() { f(-100); }" always "void f(int sz) {\n   int a[sz];\n}\nvoid x() { f(-100); }"
Line 4800
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4800 always 4800
  "[test.cpp:2]: (error) Declaration of array 'a' with negative size is undefined behaviour\n" always "[test.cpp:2]: (error) Declaration of array 'a' with negative size is undefined behaviour\n"
  "" always ""
Line 4803
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4803 always 4803
  "int x, y;\nint a[-1];\nint b[x?1:-1];\nint c[x?y:-1];" always "int x, y;\nint a[-1];\nint b[x?1:-1];\nint c[x?y:-1];"
Line 4807
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4807 always 4807
  "" always ""
Line 4811
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4811 always 4811
  "void f() {\n    char arr[10];\n    char *p = arr + 20;\n}" always "void f() {\n    char arr[10];\n    char *p = arr + 20;\n}"
Line 4815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4815 always 4815
  "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'arr+20' is out of bounds.\n" always "[test.cpp:3]: (portability) Undefined behaviour, pointer arithmetic 'arr+20' is out of bounds.\n"
Line 4817
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4817 always 4817
  "char(*g())[1];\nvoid f() {\n    int a[2];\n    int* b = a + sizeof(*g());\n}\n" always "char(*g())[1];\nvoid f() {\n    int a[2];\n    int* b = a + sizeof(*g());\n}\n"
Line 4822
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4822 always 4822
  "" always ""
Line 4828
  "" always ""
Line 4831
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 4832
  code possible {"void dostuff(int *p) { x = p + 10; }\nint main() {\n  int x[3];\n  dostuff(x);\n}"@27,"void dostuff(int *p) {\n    p[10] = 0;\n}\nint main() {\n  int x = 4;\n  dostuff(&x);\n}"@28,"void dostuff(char *p) {\n    p[10] = 0;\n}\nint main() {\n  char str[4];\n  dostuff(str);\n}"@29,"static void memclr( char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str );\n}"@30,"static void memclr( int i, char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 0, str );\n}"@31,"static void memclr( int i, char *data )\n{\n    data[i] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 10, str );\n}"@32,"static void memclr( char *data, int size )\n{\n    if( size > 10 )      data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str, 5 );\n}"@33,"void foo(int *p)\n{\n    --p;\n    p[2] = 0;\n}\n\nvoid bar()\n{\n    int p[3];\n    foo(p+1);\n}"@34,"static void get_mac_address(const u8 *strbuf)\n{\n    (strbuf[2]);\n}\n\nstatic void program_mac_address(u32 mem_base)\n{\n    u8 macstrbuf[17] = { 0 };\n    get_mac_address(macstrbuf);\n}"@35,"void dostuff(char *p) {\n  p[-3] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}"@36}
Line 4833
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testbufferoverrun.cpp"@27,"cppcheck-2.8/test/testbufferoverrun.cpp"@28,"cppcheck-2.8/test/testbufferoverrun.cpp"@29,"cppcheck-2.8/test/testbufferoverrun.cpp"@30,"cppcheck-2.8/test/testbufferoverrun.cpp"@31,"cppcheck-2.8/test/testbufferoverrun.cpp"@32,"cppcheck-2.8/test/testbufferoverrun.cpp"@33,"cppcheck-2.8/test/testbufferoverrun.cpp"@34,"cppcheck-2.8/test/testbufferoverrun.cpp"@35,"cppcheck-2.8/test/testbufferoverrun.cpp"@36}
  line inconclusive {4972@27,4961@28,4872@29,4881@30,4893@31,4905@32,4919@33,4933@34,4947@35,4850@36}
  "test.cpp" always "test.cpp"
Line 4835
  & {lifetime[Address]=(tokenizer),!0}
Line 4839
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings0),!0}
  this always !0
Line 4840
  fileInfo always size=0
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings0),!0}
Line 4841
  fileInfo always size=1
  this always !0
Line 4842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
Line 4843
  fileInfo always !size=0
Line 4844
  fileInfo always !size=0
Line 4850
  "void dostuff(char *p) {\n  p[-3] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}" always "void dostuff(char *p) {\n  p[-3] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4850 always 4850
Line 4858
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4858 always 4858
  "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; buffer 'p' is accessed at offset -3.\n" always "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; buffer 'p' is accessed at offset -3.\n"
Line 4860
  "void dostuff(char *p) {\n  p[4] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}" always "void dostuff(char *p) {\n  p[4] = 0;\n}\n\nint main() {\n  char *s = malloc(4);\n  dostuff(s);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4860 always 4860
Line 4868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4868 always 4868
  "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 4.\n" always "[test.cpp:6] -> [test.cpp:7] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 4.\n"
Line 4872
  "void dostuff(char *p) {\n    p[10] = 0;\n}\nint main() {\n  char str[4];\n  dostuff(str);\n}" always "void dostuff(char *p) {\n    p[10] = 0;\n}\nint main() {\n  char str[4];\n  dostuff(str);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4872 always 4872
Line 4879
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4879 always 4879
  "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 10.\n" always "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 10.\n"
Line 4881
  "static void memclr( char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str );\n}" always "static void memclr( char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str );\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4881 always 4881
Line 4891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4891 always 4891
  "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n" always "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n"
Line 4893
  "static void memclr( int i, char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 0, str );\n}" always "static void memclr( int i, char *data )\n{\n    data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 0, str );\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4893 always 4893
Line 4903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4903 always 4903
  "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n" always "[test.cpp:9] -> [test.cpp:3]: (error) Array index out of bounds; 'data' buffer size is 5 and it is accessed at offset 10.\n"
Line 4905
  "static void memclr( int i, char *data )\n{\n    data[i] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 10, str );\n}" always "static void memclr( int i, char *data )\n{\n    data[i] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( 10, str );\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4905 always 4905
Line 4915
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4915 always 4915
  "[test.cpp:9] -> [test.cpp:3]: (possible error) Array index out of bounds.\n" always "[test.cpp:9] -> [test.cpp:3]: (possible error) Array index out of bounds.\n"
  "" always ""
Line 4919
  "static void memclr( char *data, int size )\n{\n    if( size > 10 )      data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str, 5 );\n}" always "static void memclr( char *data, int size )\n{\n    if( size > 10 )      data[10] = 0;\n}\n\nstatic void f()\n{\n    char str[5];\n    memclr( str, 5 );\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4919 always 4919
Line 4930
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4930 always 4930
  "" always ""
Line 4933
  "void foo(int *p)\n{\n    --p;\n    p[2] = 0;\n}\n\nvoid bar()\n{\n    int p[3];\n    foo(p+1);\n}" always "void foo(int *p)\n{\n    --p;\n    p[2] = 0;\n}\n\nvoid bar()\n{\n    int p[3];\n    foo(p+1);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4933 always 4933
Line 4944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4944 always 4944
  "" always ""
Line 4947
  "static void get_mac_address(const u8 *strbuf)\n{\n    (strbuf[2]);\n}\n\nstatic void program_mac_address(u32 mem_base)\n{\n    u8 macstrbuf[17] = { 0 };\n    get_mac_address(macstrbuf);\n}" always "static void get_mac_address(const u8 *strbuf)\n{\n    (strbuf[2]);\n}\n\nstatic void program_mac_address(u32 mem_base)\n{\n    u8 macstrbuf[17] = { 0 };\n    get_mac_address(macstrbuf);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4947 always 4947
Line 4957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4957 always 4957
  "" always ""
Line 4961
  "void dostuff(int *p) {\n    p[10] = 0;\n}\nint main() {\n  int x = 4;\n  dostuff(&x);\n}" always "void dostuff(int *p) {\n    p[10] = 0;\n}\nint main() {\n  int x = 4;\n  dostuff(&x);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4961 always 4961
Line 4968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4968 always 4968
  "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 40.\n" always "[test.cpp:6] -> [test.cpp:2]: (error) Array index out of bounds; 'p' buffer size is 4 and it is accessed at offset 40.\n"
Line 4972
  "void dostuff(int *p) { x = p + 10; }\nint main() {\n  int x[3];\n  dostuff(x);\n}" always "void dostuff(int *p) { x = p + 10; }\nint main() {\n  int x[3];\n  dostuff(x);\n}"
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4972 always 4972
Line 4977
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4977 always 4977
  "[test.cpp:4] -> [test.cpp:1]: (error) Pointer arithmetic overflow; 'p' buffer size is 12\n" always "[test.cpp:4] -> [test.cpp:1]: (error) Pointer arithmetic overflow; 'p' buffer size is 12\n"
Line 4981
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4981 always 4981
  "int f() {\n    int i;\n    return (&i)[1];\n}" always "int f() {\n    int i;\n    return (&i)[1];\n}"
Line 4985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4985 always 4985
  "[test.cpp:3] -> [test.cpp:3]: (error) The address of local variable 'i' is accessed at non-zero index.\n" always "[test.cpp:3] -> [test.cpp:3]: (error) The address of local variable 'i' is accessed at non-zero index.\n"
Line 4989
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4989 always 4989
  "int f(int j) {\n    int i;\n    return (&i)[j];\n}" always "int f(int j) {\n    int i;\n    return (&i)[j];\n}"
Line 4993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4993 always 4993
  "[test.cpp:3] -> [test.cpp:3]: (warning) The address of local variable 'i' might be accessed at non-zero index.\n" always "[test.cpp:3] -> [test.cpp:3]: (warning) The address of local variable 'i' might be accessed at non-zero index.\n"
Line 4997
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  4997 always 4997
  "int f() {\n    int i;\n    return (&i)[0];\n}" always "int f() {\n    int i;\n    return (&i)[0];\n}"
Line 5001
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5001 always 5001
  "" always ""
Line 5003
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5003 always 5003
  "int f(int * i) {\n    return i[1];\n}" always "int f(int * i) {\n    return i[1];\n}"
Line 5006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5006 always 5006
  "" always ""
Line 5008
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5008 always 5008
  "int f(std::vector<int> i) {\n    return i[1];\n}" always "int f(std::vector<int> i) {\n    return i[1];\n}"
Line 5011
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5011 always 5011
  "" always ""
Line 5013
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5013 always 5013
  "int f(std::vector<int> i) {\n    return i.data()[1];\n}" always "int f(std::vector<int> i) {\n    return i.data()[1];\n}"
Line 5016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5016 always 5016
  "" always ""
Line 5018
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5018 always 5018
  "int* f(std::vector<int>& i) {\n    return &(i[1]);\n}" always "int* f(std::vector<int>& i) {\n    return &(i[1]);\n}"
Line 5021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5021 always 5021
  "" always ""
Line 5023
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5023 always 5023
  "struct A { int i; int j; };\nint f() {\n    A x;\n    return (&x.i)[0];\n}" always "struct A { int i; int j; };\nint f() {\n    A x;\n    return (&x.i)[0];\n}"
Line 5028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5028 always 5028
  "" always ""
Line 5030
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5030 always 5030
  "struct A { int i; int j; };\nint f() {\n    A x;\n    int * i = &x.i;\n    return i[0];\n}" always "struct A { int i; int j; };\nint f() {\n    A x;\n    int * i = &x.i;\n    return i[0];\n}"
Line 5036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5036 always 5036
  "" always ""
Line 5038
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5038 always 5038
  "void f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = &x;\n}" always "void f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = &x;\n}"
Line 5044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5044 always 5044
  "" always ""
Line 5046
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5046 always 5046
  "int f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  return m[0][1];\n}" always "int f() {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  return m[0][1];\n}"
Line 5052
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5052 always 5052
  "[test.cpp:4] -> [test.cpp:5]: (error) The address of local variable 'x' is accessed at non-zero index.\n" always "[test.cpp:4] -> [test.cpp:5]: (error) The address of local variable 'x' is accessed at non-zero index.\n"
Line 5056
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5056 always 5056
  "int f(int * y) {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = y;\n  return m[1][1];\n}" always "int f(int * y) {\n  int x = 0;\n  std::map<int, int*> m;\n  m[0] = &x;\n  m[1] = y;\n  return m[1][1];\n}"
Line 5063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5063 always 5063
  "" always ""
Line 5065
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5065 always 5065
  "void print(char** test);\nint main(){\n    char* test = \"abcdef\";\n    print(&test);\n    return 0;\n}\nvoid print(char** test){\n    for(int i=0;i<strlen(*test);i++)\n        printf(\"%c\",*test[i]);\n}\n" always "void print(char** test);\nint main(){\n    char* test = \"abcdef\";\n    print(&test);\n    return 0;\n}\nvoid print(char** test){\n    for(int i=0;i<strlen(*test);i++)\n        printf(\"%c\",*test[i]);\n}\n"
Line 5075
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5075 always 5075
  "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:9]: (warning) The address of local variable 'test' might be accessed at non-zero index.\n" always "[test.cpp:4] -> [test.cpp:4] -> [test.cpp:9]: (warning) The address of local variable 'test' might be accessed at non-zero index.\n"
  "" always ""
Line 5080
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5080 always 5080
  "void Bar(uint8_t data);\nvoid Foo(const uint8_t * const data, const uint8_t length) {\n        for(uint8_t index = 0U; index < length ; ++index)\n            Bar(data[index]);\n}\nvoid test() {\n    const uint8_t data = 0U;\n    Foo(&data,1U);\n}\n" always "void Bar(uint8_t data);\nvoid Foo(const uint8_t * const data, const uint8_t length) {\n        for(uint8_t index = 0U; index < length ; ++index)\n            Bar(data[index]);\n}\nvoid test() {\n    const uint8_t data = 0U;\n    Foo(&data,1U);\n}\n"
Line 5089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5089 always 5089
  "" always ""
Line 5091
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5091 always 5091
  "int foo(int n, int* p) {\n    int res = 0;\n    for(int i = 0; i < n; i++ )\n        res += p[i];\n    return res;\n}\nint bar() {\n    int single_value = 0;\n    return foo(1, &single_value);\n}\n" always "int foo(int n, int* p) {\n    int res = 0;\n    for(int i = 0; i < n; i++ )\n        res += p[i];\n    return res;\n}\nint bar() {\n    int single_value = 0;\n    return foo(1, &single_value);\n}\n"
Line 5101
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5101 always 5101
  "" always ""
Line 5103
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5103 always 5103
  "void f(const char* app, size_t applen) {\n    char* tmp_de = NULL;\n    char** str = &tmp_de;\n    char* tmp = (char*)realloc(*str, applen + 1);\n    if (tmp) {\n        *str = tmp;\n        memcpy(*str, app, applen);\n        (*str)[applen] = '\\0';\n    }\n    free(*str);\n}\n" always "void f(const char* app, size_t applen) {\n    char* tmp_de = NULL;\n    char** str = &tmp_de;\n    char* tmp = (char*)realloc(*str, applen + 1);\n    if (tmp) {\n        *str = tmp;\n        memcpy(*str, app, applen);\n        (*str)[applen] = '\\0';\n    }\n    free(*str);\n}\n"
  "test.c" always "test.c"
Line 5114
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5114 always 5114
  "" always ""
Line 5116
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5116 always 5116
  "template <typename T, unsigned N>\nusing vector = Eigen::Matrix<T, N, 1>;\ntemplate <typename V>\nvoid scharr(image2d<vector<V, 2>>& out) {\n    vector<V, 2>* out_row = &out(r, 0);\n    out_row[c] = vector<V, 2>(1,2);\n}\n" always "template <typename T, unsigned N>\nusing vector = Eigen::Matrix<T, N, 1>;\ntemplate <typename V>\nvoid scharr(image2d<vector<V, 2>>& out) {\n    vector<V, 2>* out_row = &out(r, 0);\n    out_row[c] = vector<V, 2>(1,2);\n}\n"
Line 5123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5123 always 5123
  "" always ""
Line 5125
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5125 always 5125
  "void f(const uint8_t* d, const uint8_t L) {\n    for (uint8_t i = 0U; i < L; ++i)\n        g(d[i]);\n}\nvoid h() {\n    const uint8_t u = 4;\n    f(&u, N);\n}" always "void f(const uint8_t* d, const uint8_t L) {\n    for (uint8_t i = 0U; i < L; ++i)\n        g(d[i]);\n}\nvoid h() {\n    const uint8_t u = 4;\n    f(&u, N);\n}"
Line 5133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5133 always 5133
  "" always ""
Line 5135
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5135 always 5135
  "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[3];\n}\n" always "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[3];\n}\n"
Line 5138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5138 always 5138
  "" always ""
Line 5140
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5140 always 5140
  "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[4];\n}\n" always "uint32_t f(uint32_t u) {\n    return ((uint8_t*)&u)[4];\n}\n"
Line 5143
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5143 always 5143
  "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n" always "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n"
Line 5145
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5145 always 5145
  "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[3];\n}\n" always "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[3];\n}\n"
Line 5148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5148 always 5148
  "" always ""
Line 5150
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5150 always 5150
  "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[4];\n}\n" always "uint32_t f(uint32_t u) {\n    return reinterpret_cast<unsigned char*>(&u)[4];\n}\n"
Line 5153
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5153 always 5153
  "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n" always "[test.cpp:2] -> [test.cpp:2]: (error) The address of local variable 'u' is accessed at non-zero index.\n"
Line 5155
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5155 always 5155
  "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[3];\n}\n" always "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[3];\n}\n"
Line 5159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5159 always 5159
  "" always ""
Line 5161
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5161 always 5161
  "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[4];\n}\n" always "uint32_t f(uint32_t u) {\n    uint8_t* p = (uint8_t*)&u;\n    return p[4];\n}\n"
Line 5165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5165 always 5165
  "[test.cpp:2] -> [test.cpp:3]: (error) The address of local variable 'u' is accessed at non-zero index.\n" always "[test.cpp:2] -> [test.cpp:3]: (error) The address of local variable 'u' is accessed at non-zero index.\n"
Line 5167
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5167 always 5167
  "uint32_t f(uint32_t* pu) {\n    uint8_t* p = (uint8_t*)pu;\n    return p[4];\n}\n" always "uint32_t f(uint32_t* pu) {\n    uint8_t* p = (uint8_t*)pu;\n    return p[4];\n}\n"
Line 5171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5171 always 5171
  "" always ""
Line 5173
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5173 always 5173
  "struct S { uint8_t padding[500]; };\nS s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n}\n" always "struct S { uint8_t padding[500]; };\nS s = { 0 };\nuint8_t f() {\n    uint8_t* p = (uint8_t*)&s;\n    return p[10];\n}\n"
Line 5179
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testbufferoverrun.cpp" always "cppcheck-2.8/test/testbufferoverrun.cpp"
  5179 always 5179
  "" always ""
