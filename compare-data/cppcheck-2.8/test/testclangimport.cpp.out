

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073742132 expected@var22 !=@expr1073742133 actual@var23 ) {
62: std ::@expr1073742134 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073742135 expected@var22 ;
64: std ::@expr1073742136 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073742137 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073742138 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073742139 str (@expr1073742140 ) , actualStr@var26 .@expr1073742141 str (@expr1073742142 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073742143 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073742144 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073742145 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073742146 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testclangimport.cpp

1:
|
32:
33: class TestClangImport : public TestFixture {
34: public:
35: TestClangImport ( )
36: : TestFixture ( "TestClangImport" ) { }
37:
38:
39: private:
40: void run ( ) override {
41: $do ${ $if $(@expr1073742147 $prepareTest $(@expr1073742148 "breakStmt" $) $) ${ $setVerbose $(@expr1073742149 $false $) $; breakStmt $(@expr1073742150 $) $; $} $} $while $(@expr1073742151 $false $) ;
42: $do ${ $if $(@expr1073742152 $prepareTest $(@expr1073742153 "callExpr" $) $) ${ $setVerbose $(@expr1073742154 $false $) $; callExpr $(@expr1073742155 $) $; $} $} $while $(@expr1073742156 $false $) ;
43: $do ${ $if $(@expr1073742157 $prepareTest $(@expr1073742158 "caseStmt1" $) $) ${ $setVerbose $(@expr1073742159 $false $) $; caseStmt1 $(@expr1073742160 $) $; $} $} $while $(@expr1073742161 $false $) ;
44: $do ${ $if $(@expr1073742162 $prepareTest $(@expr1073742163 "characterLiteral" $) $) ${ $setVerbose $(@expr1073742164 $false $) $; characterLiteral $(@expr1073742165 $) $; $} $} $while $(@expr1073742166 $false $) ;
45: $do ${ $if $(@expr1073742167 $prepareTest $(@expr1073742168 "class1" $) $) ${ $setVerbose $(@expr1073742169 $false $) $; class1 $(@expr1073742170 $) $; $} $} $while $(@expr1073742171 $false $) ;
46: $do ${ $if $(@expr1073742172 $prepareTest $(@expr1073742173 "classTemplateDecl1" $) $) ${ $setVerbose $(@expr1073742174 $false $) $; classTemplateDecl1 $(@expr1073742175 $) $; $} $} $while $(@expr1073742176 $false $) ;
47: $do ${ $if $(@expr1073742177 $prepareTest $(@expr1073742178 "classTemplateDecl2" $) $) ${ $setVerbose $(@expr1073742179 $false $) $; classTemplateDecl2 $(@expr1073742180 $) $; $} $} $while $(@expr1073742181 $false $) ;
48: $do ${ $if $(@expr1073742182 $prepareTest $(@expr1073742183 "conditionalExpr" $) $) ${ $setVerbose $(@expr1073742184 $false $) $; conditionalExpr $(@expr1073742185 $) $; $} $} $while $(@expr1073742186 $false $) ;
49: $do ${ $if $(@expr1073742187 $prepareTest $(@expr1073742188 "compoundAssignOperator" $) $) ${ $setVerbose $(@expr1073742189 $false $) $; compoundAssignOperator $(@expr1073742190 $) $; $} $} $while $(@expr1073742191 $false $) ;
50: $do ${ $if $(@expr1073742192 $prepareTest $(@expr1073742193 "continueStmt" $) $) ${ $setVerbose $(@expr1073742194 $false $) $; continueStmt $(@expr1073742195 $) $; $} $} $while $(@expr1073742196 $false $) ;
51: $do ${ $if $(@expr1073742197 $prepareTest $(@expr1073742198 "cstyleCastExpr" $) $) ${ $setVerbose $(@expr1073742199 $false $) $; cstyleCastExpr $(@expr1073742200 $) $; $} $} $while $(@expr1073742201 $false $) ;
52: $do ${ $if $(@expr1073742202 $prepareTest $(@expr1073742203 "cxxBoolLiteralExpr" $) $) ${ $setVerbose $(@expr1073742204 $false $) $; cxxBoolLiteralExpr $(@expr1073742205 $) $; $} $} $while $(@expr1073742206 $false $) ;
53: $do ${ $if $(@expr1073742207 $prepareTest $(@expr1073742208 "cxxConstructorDecl1" $) $) ${ $setVerbose $(@expr1073742209 $false $) $; cxxConstructorDecl1 $(@expr1073742210 $) $; $} $} $while $(@expr1073742211 $false $) ;
54: $do ${ $if $(@expr1073742212 $prepareTest $(@expr1073742213 "cxxConstructorDecl2" $) $) ${ $setVerbose $(@expr1073742214 $false $) $; cxxConstructorDecl2 $(@expr1073742215 $) $; $} $} $while $(@expr1073742216 $false $) ;
55: $do ${ $if $(@expr1073742217 $prepareTest $(@expr1073742218 "cxxConstructExpr1" $) $) ${ $setVerbose $(@expr1073742219 $false $) $; cxxConstructExpr1 $(@expr1073742220 $) $; $} $} $while $(@expr1073742221 $false $) ;
56: $do ${ $if $(@expr1073742222 $prepareTest $(@expr1073742223 "cxxConstructExpr2" $) $) ${ $setVerbose $(@expr1073742224 $false $) $; cxxConstructExpr2 $(@expr1073742225 $) $; $} $} $while $(@expr1073742226 $false $) ;
57: $do ${ $if $(@expr1073742227 $prepareTest $(@expr1073742228 "cxxConstructExpr3" $) $) ${ $setVerbose $(@expr1073742229 $false $) $; cxxConstructExpr3 $(@expr1073742230 $) $; $} $} $while $(@expr1073742231 $false $) ;
58: $do ${ $if $(@expr1073742232 $prepareTest $(@expr1073742233 "cxxDeleteExpr" $) $) ${ $setVerbose $(@expr1073742234 $false $) $; cxxDeleteExpr $(@expr1073742235 $) $; $} $} $while $(@expr1073742236 $false $) ;
59: $do ${ $if $(@expr1073742237 $prepareTest $(@expr1073742238 "cxxDestructorDecl" $) $) ${ $setVerbose $(@expr1073742239 $false $) $; cxxDestructorDecl $(@expr1073742240 $) $; $} $} $while $(@expr1073742241 $false $) ;
60: $do ${ $if $(@expr1073742242 $prepareTest $(@expr1073742243 "cxxForRangeStmt1" $) $) ${ $setVerbose $(@expr1073742244 $false $) $; cxxForRangeStmt1 $(@expr1073742245 $) $; $} $} $while $(@expr1073742246 $false $) ;
61: $do ${ $if $(@expr1073742247 $prepareTest $(@expr1073742248 "cxxForRangeStmt2" $) $) ${ $setVerbose $(@expr1073742249 $false $) $; cxxForRangeStmt2 $(@expr1073742250 $) $; $} $} $while $(@expr1073742251 $false $) ;
62: $do ${ $if $(@expr1073742252 $prepareTest $(@expr1073742253 "cxxFunctionalCastExpr" $) $) ${ $setVerbose $(@expr1073742254 $false $) $; cxxFunctionalCastExpr $(@expr1073742255 $) $; $} $} $while $(@expr1073742256 $false $) ;
63: $do ${ $if $(@expr1073742257 $prepareTest $(@expr1073742258 "cxxMemberCall" $) $) ${ $setVerbose $(@expr1073742259 $false $) $; cxxMemberCall $(@expr1073742260 $) $; $} $} $while $(@expr1073742261 $false $) ;
64: $do ${ $if $(@expr1073742262 $prepareTest $(@expr1073742263 "cxxMethodDecl1" $) $) ${ $setVerbose $(@expr1073742264 $false $) $; cxxMethodDecl1 $(@expr1073742265 $) $; $} $} $while $(@expr1073742266 $false $) ;
65: $do ${ $if $(@expr1073742267 $prepareTest $(@expr1073742268 "cxxMethodDecl2" $) $) ${ $setVerbose $(@expr1073742269 $false $) $; cxxMethodDecl2 $(@expr1073742270 $) $; $} $} $while $(@expr1073742271 $false $) ;
66: $do ${ $if $(@expr1073742272 $prepareTest $(@expr1073742273 "cxxMethodDecl3" $) $) ${ $setVerbose $(@expr1073742274 $false $) $; cxxMethodDecl3 $(@expr1073742275 $) $; $} $} $while $(@expr1073742276 $false $) ;
67: $do ${ $if $(@expr1073742277 $prepareTest $(@expr1073742278 "cxxMethodDecl4" $) $) ${ $setVerbose $(@expr1073742279 $false $) $; cxxMethodDecl4 $(@expr1073742280 $) $; $} $} $while $(@expr1073742281 $false $) ;
68: $do ${ $if $(@expr1073742282 $prepareTest $(@expr1073742283 "cxxNewExpr1" $) $) ${ $setVerbose $(@expr1073742284 $false $) $; cxxNewExpr1 $(@expr1073742285 $) $; $} $} $while $(@expr1073742286 $false $) ;
69: $do ${ $if $(@expr1073742287 $prepareTest $(@expr1073742288 "cxxNewExpr2" $) $) ${ $setVerbose $(@expr1073742289 $false $) $; cxxNewExpr2 $(@expr1073742290 $) $; $} $} $while $(@expr1073742291 $false $) ;
70: $do ${ $if $(@expr1073742292 $prepareTest $(@expr1073742293 "cxxNullPtrLiteralExpr" $) $) ${ $setVerbose $(@expr1073742294 $false $) $; cxxNullPtrLiteralExpr $(@expr1073742295 $) $; $} $} $while $(@expr1073742296 $false $) ;
71: $do ${ $if $(@expr1073742297 $prepareTest $(@expr1073742298 "cxxOperatorCallExpr" $) $) ${ $setVerbose $(@expr1073742299 $false $) $; cxxOperatorCallExpr $(@expr1073742300 $) $; $} $} $while $(@expr1073742301 $false $) ;
72: $do ${ $if $(@expr1073742302 $prepareTest $(@expr1073742303 "cxxRecordDecl1" $) $) ${ $setVerbose $(@expr1073742304 $false $) $; cxxRecordDecl1 $(@expr1073742305 $) $; $} $} $while $(@expr1073742306 $false $) ;
73: $do ${ $if $(@expr1073742307 $prepareTest $(@expr1073742308 "cxxRecordDecl2" $) $) ${ $setVerbose $(@expr1073742309 $false $) $; cxxRecordDecl2 $(@expr1073742310 $) $; $} $} $while $(@expr1073742311 $false $) ;
74: $do ${ $if $(@expr1073742312 $prepareTest $(@expr1073742313 "cxxRecordDeclDerived" $) $) ${ $setVerbose $(@expr1073742314 $false $) $; cxxRecordDeclDerived $(@expr1073742315 $) $; $} $} $while $(@expr1073742316 $false $) ;
75: $do ${ $if $(@expr1073742317 $prepareTest $(@expr1073742318 "cxxStaticCastExpr1" $) $) ${ $setVerbose $(@expr1073742319 $false $) $; cxxStaticCastExpr1 $(@expr1073742320 $) $; $} $} $while $(@expr1073742321 $false $) ;
76: $do ${ $if $(@expr1073742322 $prepareTest $(@expr1073742323 "cxxStaticCastExpr2" $) $) ${ $setVerbose $(@expr1073742324 $false $) $; cxxStaticCastExpr2 $(@expr1073742325 $) $; $} $} $while $(@expr1073742326 $false $) ;
77: $do ${ $if $(@expr1073742327 $prepareTest $(@expr1073742328 "cxxStaticCastExpr3" $) $) ${ $setVerbose $(@expr1073742329 $false $) $; cxxStaticCastExpr3 $(@expr1073742330 $) $; $} $} $while $(@expr1073742331 $false $) ;
78: $do ${ $if $(@expr1073742332 $prepareTest $(@expr1073742333 "cxxStdInitializerListExpr" $) $) ${ $setVerbose $(@expr1073742334 $false $) $; cxxStdInitializerListExpr $(@expr1073742335 $) $; $} $} $while $(@expr1073742336 $false $) ;
79: $do ${ $if $(@expr1073742337 $prepareTest $(@expr1073742338 "cxxThrowExpr" $) $) ${ $setVerbose $(@expr1073742339 $false $) $; cxxThrowExpr $(@expr1073742340 $) $; $} $} $while $(@expr1073742341 $false $) ;
80: $do ${ $if $(@expr1073742342 $prepareTest $(@expr1073742343 "defaultStmt" $) $) ${ $setVerbose $(@expr1073742344 $false $) $; defaultStmt $(@expr1073742345 $) $; $} $} $while $(@expr1073742346 $false $) ;
81: $do ${ $if $(@expr1073742347 $prepareTest $(@expr1073742348 "doStmt" $) $) ${ $setVerbose $(@expr1073742349 $false $) $; doStmt $(@expr1073742350 $) $; $} $} $while $(@expr1073742351 $false $) ;
82: $do ${ $if $(@expr1073742352 $prepareTest $(@expr1073742353 "enumDecl1" $) $) ${ $setVerbose $(@expr1073742354 $false $) $; enumDecl1 $(@expr1073742355 $) $; $} $} $while $(@expr1073742356 $false $) ;
83: $do ${ $if $(@expr1073742357 $prepareTest $(@expr1073742358 "enumDecl2" $) $) ${ $setVerbose $(@expr1073742359 $false $) $; enumDecl2 $(@expr1073742360 $) $; $} $} $while $(@expr1073742361 $false $) ;
84: $do ${ $if $(@expr1073742362 $prepareTest $(@expr1073742363 "enumDecl3" $) $) ${ $setVerbose $(@expr1073742364 $false $) $; enumDecl3 $(@expr1073742365 $) $; $} $} $while $(@expr1073742366 $false $) ;
85: $do ${ $if $(@expr1073742367 $prepareTest $(@expr1073742368 "enumDecl4" $) $) ${ $setVerbose $(@expr1073742369 $false $) $; enumDecl4 $(@expr1073742370 $) $; $} $} $while $(@expr1073742371 $false $) ;
86: $do ${ $if $(@expr1073742372 $prepareTest $(@expr1073742373 "forStmt" $) $) ${ $setVerbose $(@expr1073742374 $false $) $; forStmt $(@expr1073742375 $) $; $} $} $while $(@expr1073742376 $false $) ;
87: $do ${ $if $(@expr1073742377 $prepareTest $(@expr1073742378 "funcdecl1" $) $) ${ $setVerbose $(@expr1073742379 $false $) $; funcdecl1 $(@expr1073742380 $) $; $} $} $while $(@expr1073742381 $false $) ;
88: $do ${ $if $(@expr1073742382 $prepareTest $(@expr1073742383 "funcdecl2" $) $) ${ $setVerbose $(@expr1073742384 $false $) $; funcdecl2 $(@expr1073742385 $) $; $} $} $while $(@expr1073742386 $false $) ;
89: $do ${ $if $(@expr1073742387 $prepareTest $(@expr1073742388 "funcdecl3" $) $) ${ $setVerbose $(@expr1073742389 $false $) $; funcdecl3 $(@expr1073742390 $) $; $} $} $while $(@expr1073742391 $false $) ;
90: $do ${ $if $(@expr1073742392 $prepareTest $(@expr1073742393 "funcdecl4" $) $) ${ $setVerbose $(@expr1073742394 $false $) $; funcdecl4 $(@expr1073742395 $) $; $} $} $while $(@expr1073742396 $false $) ;
91: $do ${ $if $(@expr1073742397 $prepareTest $(@expr1073742398 "funcdecl5" $) $) ${ $setVerbose $(@expr1073742399 $false $) $; funcdecl5 $(@expr1073742400 $) $; $} $} $while $(@expr1073742401 $false $) ;
92: $do ${ $if $(@expr1073742402 $prepareTest $(@expr1073742403 "funcdecl6" $) $) ${ $setVerbose $(@expr1073742404 $false $) $; funcdecl6 $(@expr1073742405 $) $; $} $} $while $(@expr1073742406 $false $) ;
93: $do ${ $if $(@expr1073742407 $prepareTest $(@expr1073742408 "functionTemplateDecl1" $) $) ${ $setVerbose $(@expr1073742409 $false $) $; functionTemplateDecl1 $(@expr1073742410 $) $; $} $} $while $(@expr1073742411 $false $) ;
94: $do ${ $if $(@expr1073742412 $prepareTest $(@expr1073742413 "functionTemplateDecl2" $) $) ${ $setVerbose $(@expr1073742414 $false $) $; functionTemplateDecl2 $(@expr1073742415 $) $; $} $} $while $(@expr1073742416 $false $) ;
95: $do ${ $if $(@expr1073742417 $prepareTest $(@expr1073742418 "initListExpr" $) $) ${ $setVerbose $(@expr1073742419 $false $) $; initListExpr $(@expr1073742420 $) $; $} $} $while $(@expr1073742421 $false $) ;
96: $do ${ $if $(@expr1073742422 $prepareTest $(@expr1073742423 "ifelse" $) $) ${ $setVerbose $(@expr1073742424 $false $) $; ifelse $(@expr1073742425 $) $; $} $} $while $(@expr1073742426 $false $) ;
97: $do ${ $if $(@expr1073742427 $prepareTest $(@expr1073742428 "ifStmt" $) $) ${ $setVerbose $(@expr1073742429 $false $) $; ifStmt $(@expr1073742430 $) $; $} $} $while $(@expr1073742431 $false $) ;
98: $do ${ $if $(@expr1073742432 $prepareTest $(@expr1073742433 "labelStmt" $) $) ${ $setVerbose $(@expr1073742434 $false $) $; labelStmt $(@expr1073742435 $) $; $} $} $while $(@expr1073742436 $false $) ;
99: $do ${ $if $(@expr1073742437 $prepareTest $(@expr1073742438 "memberExpr" $) $) ${ $setVerbose $(@expr1073742439 $false $) $; memberExpr $(@expr1073742440 $) $; $} $} $while $(@expr1073742441 $false $) ;
100: $do ${ $if $(@expr1073742442 $prepareTest $(@expr1073742443 "namespaceDecl1" $) $) ${ $setVerbose $(@expr1073742444 $false $) $; namespaceDecl1 $(@expr1073742445 $) $; $} $} $while $(@expr1073742446 $false $) ;
101: $do ${ $if $(@expr1073742447 $prepareTest $(@expr1073742448 "namespaceDecl2" $) $) ${ $setVerbose $(@expr1073742449 $false $) $; namespaceDecl2 $(@expr1073742450 $) $; $} $} $while $(@expr1073742451 $false $) ;
102: $do ${ $if $(@expr1073742452 $prepareTest $(@expr1073742453 "recordDecl1" $) $) ${ $setVerbose $(@expr1073742454 $false $) $; recordDecl1 $(@expr1073742455 $) $; $} $} $while $(@expr1073742456 $false $) ;
103: $do ${ $if $(@expr1073742457 $prepareTest $(@expr1073742458 "recordDecl2" $) $) ${ $setVerbose $(@expr1073742459 $false $) $; recordDecl2 $(@expr1073742460 $) $; $} $} $while $(@expr1073742461 $false $) ;
104: $do ${ $if $(@expr1073742462 $prepareTest $(@expr1073742463 "switchStmt" $) $) ${ $setVerbose $(@expr1073742464 $false $) $; switchStmt $(@expr1073742465 $) $; $} $} $while $(@expr1073742466 $false $) ;
105: $do ${ $if $(@expr1073742467 $prepareTest $(@expr1073742468 "typedefDecl1" $) $) ${ $setVerbose $(@expr1073742469 $false $) $; typedefDecl1 $(@expr1073742470 $) $; $} $} $while $(@expr1073742471 $false $) ;
106: $do ${ $if $(@expr1073742472 $prepareTest $(@expr1073742473 "typedefDecl2" $) $) ${ $setVerbose $(@expr1073742474 $false $) $; typedefDecl2 $(@expr1073742475 $) $; $} $} $while $(@expr1073742476 $false $) ;
107: $do ${ $if $(@expr1073742477 $prepareTest $(@expr1073742478 "typedefDecl3" $) $) ${ $setVerbose $(@expr1073742479 $false $) $; typedefDecl3 $(@expr1073742480 $) $; $} $} $while $(@expr1073742481 $false $) ;
108: $do ${ $if $(@expr1073742482 $prepareTest $(@expr1073742483 "unaryExprOrTypeTraitExpr1" $) $) ${ $setVerbose $(@expr1073742484 $false $) $; unaryExprOrTypeTraitExpr1 $(@expr1073742485 $) $; $} $} $while $(@expr1073742486 $false $) ;
109: $do ${ $if $(@expr1073742487 $prepareTest $(@expr1073742488 "unaryExprOrTypeTraitExpr2" $) $) ${ $setVerbose $(@expr1073742489 $false $) $; unaryExprOrTypeTraitExpr2 $(@expr1073742490 $) $; $} $} $while $(@expr1073742491 $false $) ;
110: $do ${ $if $(@expr1073742492 $prepareTest $(@expr1073742493 "unaryOperator" $) $) ${ $setVerbose $(@expr1073742494 $false $) $; unaryOperator $(@expr1073742495 $) $; $} $} $while $(@expr1073742496 $false $) ;
111: $do ${ $if $(@expr1073742497 $prepareTest $(@expr1073742498 "vardecl1" $) $) ${ $setVerbose $(@expr1073742499 $false $) $; vardecl1 $(@expr1073742500 $) $; $} $} $while $(@expr1073742501 $false $) ;
112: $do ${ $if $(@expr1073742502 $prepareTest $(@expr1073742503 "vardecl2" $) $) ${ $setVerbose $(@expr1073742504 $false $) $; vardecl2 $(@expr1073742505 $) $; $} $} $while $(@expr1073742506 $false $) ;
113: $do ${ $if $(@expr1073742507 $prepareTest $(@expr1073742508 "vardecl3" $) $) ${ $setVerbose $(@expr1073742509 $false $) $; vardecl3 $(@expr1073742510 $) $; $} $} $while $(@expr1073742511 $false $) ;
114: $do ${ $if $(@expr1073742512 $prepareTest $(@expr1073742513 "vardecl4" $) $) ${ $setVerbose $(@expr1073742514 $false $) $; vardecl4 $(@expr1073742515 $) $; $} $} $while $(@expr1073742516 $false $) ;
115: $do ${ $if $(@expr1073742517 $prepareTest $(@expr1073742518 "vardecl5" $) $) ${ $setVerbose $(@expr1073742519 $false $) $; vardecl5 $(@expr1073742520 $) $; $} $} $while $(@expr1073742521 $false $) ;
116: $do ${ $if $(@expr1073742522 $prepareTest $(@expr1073742523 "vardecl6" $) $) ${ $setVerbose $(@expr1073742524 $false $) $; vardecl6 $(@expr1073742525 $) $; $} $} $while $(@expr1073742526 $false $) ;
117: $do ${ $if $(@expr1073742527 $prepareTest $(@expr1073742528 "vardecl7" $) $) ${ $setVerbose $(@expr1073742529 $false $) $; vardecl7 $(@expr1073742530 $) $; $} $} $while $(@expr1073742531 $false $) ;
118: $do ${ $if $(@expr1073742532 $prepareTest $(@expr1073742533 "whileStmt1" $) $) ${ $setVerbose $(@expr1073742534 $false $) $; whileStmt1 $(@expr1073742535 $) $; $} $} $while $(@expr1073742536 $false $) ;
119: $do ${ $if $(@expr1073742537 $prepareTest $(@expr1073742538 "whileStmt2" $) $) ${ $setVerbose $(@expr1073742539 $false $) $; whileStmt2 $(@expr1073742540 $) $; $} $} $while $(@expr1073742541 $false $) ;
120:
121: $do ${ $if $(@expr1073742542 $prepareTest $(@expr1073742543 "tokenIndex" $) $) ${ $setVerbose $(@expr1073742544 $false $) $; tokenIndex $(@expr1073742545 $) $; $} $} $while $(@expr1073742546 $false $) ;
122: $do ${ $if $(@expr1073742547 $prepareTest $(@expr1073742548 "symbolDatabaseEnum1" $) $) ${ $setVerbose $(@expr1073742549 $false $) $; symbolDatabaseEnum1 $(@expr1073742550 $) $; $} $} $while $(@expr1073742551 $false $) ;
123: $do ${ $if $(@expr1073742552 $prepareTest $(@expr1073742553 "symbolDatabaseFunction1" $) $) ${ $setVerbose $(@expr1073742554 $false $) $; symbolDatabaseFunction1 $(@expr1073742555 $) $; $} $} $while $(@expr1073742556 $false $) ;
124: $do ${ $if $(@expr1073742557 $prepareTest $(@expr1073742558 "symbolDatabaseFunction2" $) $) ${ $setVerbose $(@expr1073742559 $false $) $; symbolDatabaseFunction2 $(@expr1073742560 $) $; $} $} $while $(@expr1073742561 $false $) ;
125: $do ${ $if $(@expr1073742562 $prepareTest $(@expr1073742563 "symbolDatabaseFunction3" $) $) ${ $setVerbose $(@expr1073742564 $false $) $; symbolDatabaseFunction3 $(@expr1073742565 $) $; $} $} $while $(@expr1073742566 $false $) ;
126: $do ${ $if $(@expr1073742567 $prepareTest $(@expr1073742568 "symbolDatabaseFunctionConst" $) $) ${ $setVerbose $(@expr1073742569 $false $) $; symbolDatabaseFunctionConst $(@expr1073742570 $) $; $} $} $while $(@expr1073742571 $false $) ;
127: $do ${ $if $(@expr1073742572 $prepareTest $(@expr1073742573 "symbolDatabaseVariableRef" $) $) ${ $setVerbose $(@expr1073742574 $false $) $; symbolDatabaseVariableRef $(@expr1073742575 $) $; $} $} $while $(@expr1073742576 $false $) ;
128: $do ${ $if $(@expr1073742577 $prepareTest $(@expr1073742578 "symbolDatabaseVariableRRef" $) $) ${ $setVerbose $(@expr1073742579 $false $) $; symbolDatabaseVariableRRef $(@expr1073742580 $) $; $} $} $while $(@expr1073742581 $false $) ;
129: $do ${ $if $(@expr1073742582 $prepareTest $(@expr1073742583 "symbolDatabaseVariablePointerRef" $) $) ${ $setVerbose $(@expr1073742584 $false $) $; symbolDatabaseVariablePointerRef $(@expr1073742585 $) $; $} $} $while $(@expr1073742586 $false $) ;
130: $do ${ $if $(@expr1073742587 $prepareTest $(@expr1073742588 "symbolDatabaseNodeType1" $) $) ${ $setVerbose $(@expr1073742589 $false $) $; symbolDatabaseNodeType1 $(@expr1073742590 $) $; $} $} $while $(@expr1073742591 $false $) ;
131: $do ${ $if $(@expr1073742592 $prepareTest $(@expr1073742593 "symbolDatabaseForVariable" $) $) ${ $setVerbose $(@expr1073742594 $false $) $; symbolDatabaseForVariable $(@expr1073742595 $) $; $} $} $while $(@expr1073742596 $false $) ;
132:
133: $do ${ $if $(@expr1073742597 $prepareTest $(@expr1073742598 "valueFlow1" $) $) ${ $setVerbose $(@expr1073742599 $false $) $; valueFlow1 $(@expr1073742600 $) $; $} $} $while $(@expr1073742601 $false $) ;
134: $do ${ $if $(@expr1073742602 $prepareTest $(@expr1073742603 "valueFlow2" $) $) ${ $setVerbose $(@expr1073742604 $false $) $; valueFlow2 $(@expr1073742605 $) $; $} $} $while $(@expr1073742606 $false $) ;
135:
136: $do ${ $if $(@expr1073742607 $prepareTest $(@expr1073742608 "valueType1" $) $) ${ $setVerbose $(@expr1073742609 $false $) $; valueType1 $(@expr1073742610 $) $; $} $} $while $(@expr1073742611 $false $) ;
137: $do ${ $if $(@expr1073742612 $prepareTest $(@expr1073742613 "valueType2" $) $) ${ $setVerbose $(@expr1073742614 $false $) $; valueType2 $(@expr1073742615 $) $; $} $} $while $(@expr1073742616 $false $) ;
138: }
139:
140: std :: string parse ( const char clang@var102 [ ] ) {
141: Settings settings@var103 ;
142: settings@var103 .@expr1073742617 clang@var104 =@expr1073742618 true ;
143: Tokenizer tokenizer@var105 (@expr1073742619 &@expr1073742620 settings@var103 , this@expr1073742621 ) ;
144: std ::@expr1073742622 istringstream istr@var106 (@expr1073742623 clang@var102 ) ;
145: clangimport ::@expr1073742624 parseClangAstDump (@expr1073742625 &@expr1073742626 tokenizer@var105 , istr@var106 ) ;
146: if (@expr1073742627 !@expr1073742628 tokenizer@var105 .@expr805 tokens (@expr806 ) ) {
147: return std ::@expr1073742631 string (@expr1073742632 ) ;
148: }
149: return tokenizer@var105 .@expr805 tokens (@expr806 ) .@expr1073742635 stringifyList (@expr1073742636 true , false , false , false , false ) ;
150: }
151:
152: void breakStmt ( ) {
153: const char clang@var107 [@expr1073742637 256 ] =@expr1073742638 "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-BreakStmt 0x3687c18 <col:24>"
154:
|
157:
158: ;
159: $if $(@expr1073742639 $!@expr1073742640 $assertEquals $(@expr1073742641 "cppcheck-2.8/test/testclangimport.cpp" $, 159 $, "void foo ( ) { while ( 0 ) { break ; } }" $, parse (@expr1073742642 clang@var107 ) $) $) { $return ; }
160: }
161:
162: void callExpr ( ) {
163: const char clang@var108 [@expr1073742643 1038 ] =@expr1073742644 "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-CallExpr 0x7f5a6c04b158 <line:1:16, col:60> 'bool'\n      |-ImplicitCastExpr 0x7f5a6c04b140 <col:16, col:23> 'bool (*)(const Token *, const char *, int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x7f5a6c04b0a8 <col:16, col:23> 'bool (const Token *, const char *, int)' lvalue CXXMethod 0x43e5600 'Match' 'bool (const Token *, const char *, int)'\n      |-ImplicitCastExpr 0x7f5a6c04b1c8 <col:29> 'const Token *' <NoOp>\n      | `-ImplicitCastExpr 0x7f5a6c04b1b0 <col:29> 'Token *' <LValueToRValue>\n      |   `-DeclRefExpr 0x7f5a6c04b0e0 <col:29> 'Token *' lvalue Var 0x7f5a6c045968 'tokAfterCondition' 'Token *'\n      |-ImplicitCastExpr 0x7f5a6c04b1e0 <col:48> 'const char *' <ArrayToPointerDecay>\n      | `-StringLiteral 0x7f5a6c04b108 <col:48> 'const char [11]' lvalue \"%name% : {\"\n      `-CXXDefaultArgExpr 0x7f5a6c04b1f8 <<invalid sloc>> 'int'\n"
164:
|
173:
174: ;
175: $if $(@expr1073742645 $!@expr1073742646 $assertEquals $(@expr1073742647 "cppcheck-2.8/test/testclangimport.cpp" $, 175 $, "void foo ( int x@1 ) { Match ( tokAfterCondition , \"%name% : {\" ) ; }" $, parse (@expr1073742648 clang@var108 ) $) $) { $return ; }
176: }
177:
178: void caseStmt1 ( ) {
179: const char clang@var109 [@expr1073742649 997 ] =@expr1073742650 "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-SwitchStmt 0x2444c88 <line:2:5, line:7:5>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-ImplicitCastExpr 0x2444c70 <line:2:13> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x2444c48 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n      `-CompoundStmt 0x2444de0 <col:16, line:7:5>\n        |-CaseStmt 0x2444cd8 <line:3:9, line:5:15>\n        | |-IntegerLiteral 0x2444cb8 <line:3:14> 'int' 16\n        | |-<<<NULL>>>\n        | `-CaseStmt 0x2444d30 <line:4:9, line:5:15>\n        |   |-IntegerLiteral 0x2444d10 <line:4:14> 'int' 32\n        |   |-<<<NULL>>>\n        |   `-BinaryOperator 0x2444db0 <line:5:13, col:15> 'int' '='\n        |     |-DeclRefExpr 0x2444d68 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n        |     `-IntegerLiteral 0x2444d90 <col:15> 'int' 123\n        `-BreakStmt 0x2444dd8 <line:6:13>"
180:
|
196:
197: ;
198: $if $(@expr1073742651 $!@expr1073742652 $assertEquals $(@expr1073742653 "cppcheck-2.8/test/testclangimport.cpp" $, 198 $, "void foo ( int x@1 ) { switch ( x@1 ) { case 16 : case 32 : x@1 = 123 ; break ; } }" $, parse (@expr1073742654 clang@var109 ) $) $) { $return ; }
199: }
200:
201: void characterLiteral ( ) {
202: const char clang@var110 [@expr1073742655 112 ] =@expr1073742656 "`-VarDecl 0x3df8608 <a.cpp:1:1, col:10> col:6 c 'char' cinit\n  `-CharacterLiteral 0x3df86a8 <col:10> 'char' 120"
203: ;
204: $if $(@expr1073742657 $!@expr1073742658 $assertEquals $(@expr1073742659 "cppcheck-2.8/test/testclangimport.cpp" $, 204 $, "char c@1 = 'x' ;" $, parse (@expr1073742660 clang@var110 ) $) $) { $return ; }
205: }
206:
207: void class1 ( ) {
208: const char clang@var111 [@expr1073742661 854 ] =@expr1073742662 "`-CXXRecordDecl 0x274c638 <a.cpp:1:1, col:25> col:7 class C definition\n  |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n  | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveConstructor exists simple trivial needs_implicit\n  | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveAssignment exists simple trivial needs_implicit\n  | `-Destructor simple irrelevant trivial needs_implicit\n  |-CXXRecordDecl 0x274c758 <col:1, col:7> col:7 implicit class C\n  `-CXXMethodDecl 0x274c870 <col:11, col:23> col:16 foo 'void ()'\n    `-CompoundStmt 0x274c930 <col:22, col:23>"
209:
|
217:
218: ;
219: $if $(@expr1073742663 $!@expr1073742664 $assertEquals $(@expr1073742665 "cppcheck-2.8/test/testclangimport.cpp" $, 219 $, "class C { void foo ( ) { } } ;" $, parse (@expr1073742666 clang@var111 ) $) $) { $return ; }
220: }
221:
222: void classTemplateDecl1 ( ) {
223: const char clang@var112 [@expr1073742667 1173 ] =@expr1073742668 "`-ClassTemplateDecl 0x29d1748 <a.cpp:1:1, col:59> col:25 C\n  |-TemplateTypeParmDecl 0x29d15f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n  `-CXXRecordDecl 0x29d16b0 <col:19, col:59> col:25 class C definition\n    |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n    | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveConstructor exists simple trivial needs_implicit\n    | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveAssignment exists simple trivial needs_implicit\n    | `-Destructor simple irrelevant trivial needs_implicit\n    |-CXXRecordDecl 0x29d19b0 <col:19, col:25> col:25 implicit class C\n    |-AccessSpecDecl 0x29d1a48 <col:29, col:35> col:29 public\n    `-CXXMethodDecl 0x29d1b20 <col:37, col:57> col:39 foo 'T ()'\n      `-CompoundStmt 0x29d1c18 <col:45, col:57>\n        `-ReturnStmt 0x29d1c00 <col:47, col:54>\n          `-IntegerLiteral 0x29d1be0 <col:54> 'int' 0"
224:
|
237:
238: ;
239: $if $(@expr1073742669 $!@expr1073742670 $assertEquals $(@expr1073742671 "cppcheck-2.8/test/testclangimport.cpp" $, 239 $, "" $, parse (@expr1073742672 clang@var112 ) $) $) { $return ; }
240: }
241:
242: void classTemplateDecl2 ( ) {
243: const char clang@var113 [@expr1073742673 2815 ] =@expr1073742674 "|-ClassTemplateDecl 0x244e748 <a.cpp:1:1, col:59> col:25 C\n| |-TemplateTypeParmDecl 0x244e5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-CXXRecordDecl 0x244e6b0 <col:19, col:59> col:25 class C definition\n| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveConstructor exists simple trivial needs_implicit\n| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveAssignment exists simple trivial needs_implicit\n| | | `-Destructor simple irrelevant trivial needs_implicit\n| | |-CXXRecordDecl 0x244e9b0 <col:19, col:25> col:25 implicit class C\n| | |-AccessSpecDecl 0x244ea48 <col:29, col:35> col:29 public\n| | `-CXXMethodDecl 0x244eb20 <col:37, col:57> col:39 foo 'T ()'\n| |   `-CompoundStmt 0x244ec18 <col:45, col:57>\n| |     `-ReturnStmt 0x244ec00 <col:47, col:54>\n| |       `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n| `-ClassTemplateSpecializationDecl 0x244ed78 <col:1, col:59> col:25 class C definition\n|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr\n|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param\n|   | |-MoveConstructor exists simple trivial\n|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n|   | |-MoveAssignment exists simple trivial needs_implicit\n|   | `-Destructor simple irrelevant trivial needs_implicit\n|   |-TemplateArgument type 'int'\n|   |-CXXRecordDecl 0x244eff0 prev 0x244ed78 <col:19, col:25> col:25 implicit class C\n|   |-AccessSpecDecl 0x244f088 <col:29, col:35> col:29 public\n|   |-CXXMethodDecl 0x244f160 <col:37, col:57> col:39 used foo 'int ()'\n|   | `-CompoundStmt 0x247cb40 <col:45, col:57>\n|   |   `-ReturnStmt 0x247cb28 <col:47, col:54>\n|   |     `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n|   |-CXXConstructorDecl 0x247c540 <col:25> col:25 implicit used constexpr C 'void () noexcept' inline default trivial\n|   | `-CompoundStmt 0x247ca00 <col:25>\n|   |-CXXConstructorDecl 0x247c658 <col:25> col:25 implicit constexpr C 'void (const C<int> &)' inline default trivial noexcept-unevaluated 0x247c658\n|   | `-ParmVarDecl 0x247c790 <col:25> col:25 'const C<int> &'\n|   `-CXXConstructorDecl 0x247c828 <col:25> col:25 implicit constexpr C 'void (C<int> &&)' inline default trivial noexcept-unevaluated 0x247c828\n|     `-ParmVarDecl 0x247c960 <col:25> col:25 'C<int> &&'\n"
244:
|
278:
279: ;
280: $if $(@expr1073742675 $!@expr1073742676 $assertEquals $(@expr1073742677 "cppcheck-2.8/test/testclangimport.cpp" $, 280 $, "class C { int foo ( ) { return 0 ; } C ( ) { } C ( const C<int> & ) = default ; C ( C<int> && ) = default ; } ;" $, parse (@expr1073742678 clang@var113 ) $) $) { $return ; }
281: }
282:
283: void conditionalExpr ( ) {
284: const char clang@var114 [@expr1073742679 536 ] =@expr1073742680 "`-VarDecl 0x257cc88 <line:4:1, col:13> col:5 x 'int' cinit\n  `-ConditionalOperator 0x257cda8 <col:9, col:13> 'int'\n    |-ImplicitCastExpr 0x257cd60 <col:9> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cce8 <col:9> 'int' lvalue Var 0x257cae0 'a' 'int'\n    |-ImplicitCastExpr 0x257cd78 <col:11> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cd10 <col:11> 'int' lvalue Var 0x257cb98 'b' 'int'\n    `-ImplicitCastExpr 0x257cd90 <col:13> 'int' <LValueToRValue>\n      `-DeclRefExpr 0x257cd38 <col:13> 'int' lvalue Var 0x257cc10 'c' 'int'"
285:
|
290:
291: ;
292: $if $(@expr1073742681 $!@expr1073742682 $assertEquals $(@expr1073742683 "cppcheck-2.8/test/testclangimport.cpp" $, 292 $, "int x@1 = a ? b : c ;" $, parse (@expr1073742684 clang@var114 ) $) $) { $return ; }
293: }
294:
295: void compoundAssignOperator ( ) {
296: const char clang@var115 [@expr1073742685 348 ] =@expr1073742686 "`-FunctionDecl 0x3570690 <1.cpp:2:1, col:25> col:6 f 'void ()'\n  `-CompoundStmt 0x3570880 <col:10, col:25>\n    `-CompoundAssignOperator 0x3570848 <col:19, col:22> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'\n      |-DeclRefExpr 0x3570800 <col:19> 'int' lvalue Var 0x3570788 'x' 'int'\n      `-IntegerLiteral 0x3570828 <col:22> 'int' 1"
297:
298:
299:
300: ;
301: $if $(@expr1073742687 $!@expr1073742688 $assertEquals $(@expr1073742689 "cppcheck-2.8/test/testclangimport.cpp" $, 301 $, "void f ( ) { x += 1 ; }" $, parse (@expr1073742690 clang@var115 ) $) $) { $return ; }
302: }
303:
304: void continueStmt ( ) {
305: const char clang@var116 [@expr1073742691 259 ] =@expr1073742692 "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-ContinueStmt 0x2c31c18 <col:24>"
306:
|
309:
310: ;
311: $if $(@expr1073742693 $!@expr1073742694 $assertEquals $(@expr1073742695 "cppcheck-2.8/test/testclangimport.cpp" $, 311 $, "void foo ( ) { while ( 0 ) { continue ; } }" $, parse (@expr1073742696 clang@var116 ) $) $) { $return ; }
312: }
313:
314: void cstyleCastExpr ( ) {
315: const char clang@var117 [@expr1073742697 167 ] =@expr1073742698 "`-VarDecl 0x2336aa0 <1.c:1:1, col:14> col:5 x 'int' cinit\n  `-CStyleCastExpr 0x2336b70 <col:9, col:14> 'int' <NoOp>\n    `-CharacterLiteral 0x2336b40 <col:14> 'int' 97"
316:
317: ;
318: $if $(@expr1073742699 $!@expr1073742700 $assertEquals $(@expr1073742701 "cppcheck-2.8/test/testclangimport.cpp" $, 318 $, "int x@1 = ( int ) 'a' ;" $, parse (@expr1073742702 clang@var117 ) $) $) { $return ; }
319: }
320:
321: void cxxBoolLiteralExpr ( ) {
322: const char clang@var118 [@expr1073742703 115 ] =@expr1073742704 "`-VarDecl 0x3940608 <a.cpp:1:1, col:10> col:6 x 'bool' cinit\n  `-CXXBoolLiteralExpr 0x39406a8 <col:10> 'bool' true"
323: ;
324: $if $(@expr1073742705 $!@expr1073742706 $assertEquals $(@expr1073742707 "cppcheck-2.8/test/testclangimport.cpp" $, 324 $, "bool x@1 = true ;" $, parse (@expr1073742708 clang@var118 ) $) $) { $return ; }
325: }
326:
327: void cxxConstructorDecl1 ( ) {
328: const char clang@var119 [@expr1073742709 408 ] =@expr1073742710 "|-CXXConstructorDecl 0x428e890 <col:11, col:24> col:11 C 'void ()'\n| `-CompoundStmt 0x428ea58 <col:15, col:24>\n|   `-BinaryOperator 0x428ea30 <col:17, col:21> 'int' lvalue '='\n|     |-MemberExpr 0x428e9d8 <col:17> 'int' lvalue ->x 0x428e958\n|     | `-CXXThisExpr 0x428e9c0 <col:17> 'C *' this\n|     `-IntegerLiteral 0x428ea10 <col:21> 'int' 0\n`-FieldDecl 0x428e958 <col:26, col:30> col:30 referenced x 'int'"
329:
|
333:
334: ;
335: $if $(@expr1073742711 $!@expr1073742712 $assertEquals $(@expr1073742713 "cppcheck-2.8/test/testclangimport.cpp" $, 335 $, "C ( ) { this . x@1 = 0 ; } int x@1" $, parse (@expr1073742714 clang@var119 ) $) $) { $return ; }
336: }
337:
338: void cxxConstructorDecl2 ( ) {
339: const char clang@var120 [@expr1073742715 240 ] =@expr1073742716 "`-CXXConstructorDecl 0x1c208c0 <col:11> col:11 implicit constexpr basic_string 'void (std::basic_string<char> &&)' inline default trivial noexcept-unevaluated 0x1c208c0\n  `-ParmVarDecl 0x1c209f0 <col:11> col:11 'std::basic_string<char> &&'"
340: ;
341: $if $(@expr1073742717 $!@expr1073742718 $assertEquals $(@expr1073742719 "cppcheck-2.8/test/testclangimport.cpp" $, 341 $, "basic_string ( std::basic_string<char> && ) = default ;" $, parse (@expr1073742720 clang@var120 ) $) $) { $return ; }
342: }
343:
344: void cxxConstructExpr1 ( ) {
345: const char clang@var121 [@expr1073742721 443 ] =@expr1073742722 "`-FunctionDecl 0x2dd7940 <line:2:1, col:30> col:5 f 'Foo (Foo)'\n  |-ParmVarDecl 0x2dd7880 <col:7, col:11> col:11 used foo 'Foo'\n  `-CompoundStmt 0x2dd80c0 <col:16, col:30>\n    `-ReturnStmt 0x2dd80a8 <col:18, col:25>\n      `-CXXConstructExpr 0x2dd8070 <col:25> 'Foo' 'void (Foo &&) noexcept'\n        `-ImplicitCastExpr 0x2dd7f28 <col:25> 'Foo' xvalue <NoOp>\n          `-DeclRefExpr 0x2dd7a28 <col:25> 'Foo' lvalue ParmVar 0x2dd7880 'foo' 'Foo'"
346:
|
350:
351: ;
352: $if $(@expr1073742723 $!@expr1073742724 $assertEquals $(@expr1073742725 "cppcheck-2.8/test/testclangimport.cpp" $, 352 $, "Foo f ( Foo foo@1 ) { return foo@1 ; }" $, parse (@expr1073742726 clang@var121 ) $) $) { $return ; }
353: }
354:
355: void cxxConstructExpr2 ( ) {
356: const char clang@var122 [@expr1073742727 272 ] =@expr1073742728 "`-FunctionDecl 0x3e44180 <1.cpp:2:1, col:30> col:13 f 'std::string ()'\n  `-CompoundStmt 0x3e4cb80 <col:17, col:30>\n    `-ReturnStmt 0x3e4cb68 <col:19, col:27>\n      `-CXXConstructExpr 0x3e4cb38 <col:26, col:27> 'std::string':'std::__cxx11::basic_string<char>' '....' list"
357:
358:
359: ;
360: $if $(@expr1073742729 $!@expr1073742730 $assertEquals $(@expr1073742731 "cppcheck-2.8/test/testclangimport.cpp" $, 360 $, "std :: string f ( ) { return std :: string ( ) ; }" $, parse (@expr1073742732 clang@var122 ) $) $) { $return ; }
361: }
362:
363: void cxxConstructExpr3 ( ) {
364: const char clang@var123 [@expr1073742733 994 ] =@expr1073742734 "`-FunctionDecl 0x2c585b8 <1.cpp:4:1, col:39> col:6 f 'void ()'\n  `-CompoundStmt 0x2c589d0 <col:10, col:39>\n    |-DeclStmt 0x2c586d0 <col:12, col:19>\n    | `-VarDecl 0x2c58670 <col:12, col:18> col:18 used p 'char *'\n    `-DeclStmt 0x2c589b8 <col:21, col:37>\n      `-VarDecl 0x2c58798 <col:21, col:36> col:33 s 'std::string':'std::__cxx11::basic_string<char>' callinit\n        `-ExprWithCleanups 0x2c589a0 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>'\n          `-CXXConstructExpr 0x2c58960 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>' 'void (const char *, const std::allocator<char> &)'\n            |-ImplicitCastExpr 0x2c58870 <col:35> 'const char *' <NoOp>\n            | `-ImplicitCastExpr 0x2c58858 <col:35> 'char *' <LValueToRValue>\n            |   `-DeclRefExpr 0x2c58750 <col:35> 'char *' lvalue Var 0x2c58670 'p' 'char *'\n            `-CXXDefaultArgExpr 0x2c58940 <<invalid sloc>> 'const std::allocator<char>':'const std::allocator<char>' lvalue\n"
365:
|
374:
375: ;
376: $if $(@expr1073742735 $!@expr1073742736 $assertEquals $(@expr1073742737 "cppcheck-2.8/test/testclangimport.cpp" $, 376 $, "void f ( ) { char * p@1 ; std :: string s@2 ( p@1 ) ; }" $, parse (@expr1073742738 clang@var123 ) $) $) { $return ; }
377: }
378:
379: void cxxDeleteExpr ( ) {
380: const char clang@var124 [@expr1073742739 447 ] =@expr1073742740 "|-FunctionDecl 0x2e0e740 <1.cpp:1:1, col:28> col:6 f 'void (int *)'\n| |-ParmVarDecl 0x2e0e680 <col:8, col:13> col:13 used p 'int *'\n| `-CompoundStmt 0x2e0ee70 <col:16, col:28>\n|   `-CXXDeleteExpr 0x2e0ee48 <col:18, col:25> 'void' Function 0x2e0ebb8 'operator delete' 'void (void *) noexcept'\n|     `-ImplicitCastExpr 0x2e0e850 <col:25> 'int *' <LValueToRValue>\n|       `-DeclRefExpr 0x2e0e828 <col:25> 'int *' lvalue ParmVar 0x2e0e680 'p' 'int *'"
381:
|
384:
385: ;
386: $if $(@expr1073742741 $!@expr1073742742 $assertEquals $(@expr1073742743 "cppcheck-2.8/test/testclangimport.cpp" $, 386 $, "void f ( int * p@1 ) { delete p@1 ; }" $, parse (@expr1073742744 clang@var124 ) $) $) { $return ; }
387: }
388:
389: void cxxDestructorDecl ( ) {
390: const char clang@var125 [@expr1073742745 196 ] =@expr1073742746 "`-CXXRecordDecl 0x8ecd60 <1.cpp:1:1, line:4:1> line:1:8 struct S definition\n  `-CXXDestructorDecl 0x8ed088 <line:3:3, col:9> col:3 ~S 'void () noexcept'\n    `-CompoundStmt 0x8ed1a8 <col:8, col:9>"
391:
392: ;
393: $if $(@expr1073742747 $!@expr1073742748 $assertEquals $(@expr1073742749 "cppcheck-2.8/test/testclangimport.cpp" $, 393 $, "struct S { ~S ( ) { } } ;" $, parse (@expr1073742750 clang@var125 ) $) $) { $return ; }
394: }
395:
396: void cxxForRangeStmt1 ( ) {
397: const char clang@var126 [@expr1073742751 2523 ] =@expr1073742752 "`-FunctionDecl 0x4280820 <line:4:1, line:8:1> line:4:6 foo 'void ()'\n  `-CompoundStmt 0x42810f0 <col:12, line:8:1>\n    `-CXXForRangeStmt 0x4281090 <line:5:3, line:7:3>\n      |-DeclStmt 0x4280c30 <line:5:17>\n      | `-VarDecl 0x42809c8 <col:17> col:17 implicit referenced __range1 'char const (&)[6]' cinit\n      |   `-DeclRefExpr 0x42808c0 <col:17> 'const char [6]' lvalue Var 0x4280678 'hello' 'const char [6]'\n      |-DeclStmt 0x4280ef8 <col:15>\n      | `-VarDecl 0x4280ca8 <col:15> col:15 implicit used __begin1 'const char *':'const char *' cinit\n      |   `-ImplicitCastExpr 0x4280e10 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0x4280c48 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |-DeclStmt 0x4280f10 <col:15>\n      | `-VarDecl 0x4280d18 <col:15, col:17> col:15 implicit used __end1 'const char *':'const char *' cinit\n      |   `-BinaryOperator 0x4280e60 <col:15, col:17> 'const char *' '+'\n      |     |-ImplicitCastExpr 0x4280e48 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0x4280c70 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |     `-IntegerLiteral 0x4280e28 <col:17> 'long' 6\n      |-BinaryOperator 0x4280fa8 <col:15> 'bool' '!='\n      | |-ImplicitCastExpr 0x4280f78 <col:15> 'const char *':'const char *' <LValueToRValue>\n      | | `-DeclRefExpr 0x4280f28 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      | `-ImplicitCastExpr 0x4280f90 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |   `-DeclRefExpr 0x4280f50 <col:15> 'const char *':'const char *' lvalue Var 0x4280d18 '__end1' 'const char *':'const char *'\n      |-UnaryOperator 0x4280ff8 <col:15> 'const char *':'const char *' lvalue prefix '++'\n      | `-DeclRefExpr 0x4280fd0 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      |-DeclStmt 0x4280958 <col:8, col:22>\n      | `-VarDecl 0x42808f8 <col:8, col:15> col:13 c1 'char' cinit\n      |   `-ImplicitCastExpr 0x4281078 <col:15> 'char' <LValueToRValue>\n      |     `-UnaryOperator 0x4281058 <col:15> 'const char' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0x4281040 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |         `-DeclRefExpr 0x4281018 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      `-CompoundStmt 0x42810e0 <col:24, line:7:3>"
398:
|
425:
426: ;
427: $if $(@expr1073742753 $!@expr1073742754 $assertEquals $(@expr1073742755 "cppcheck-2.8/test/testclangimport.cpp" $, 427 $, "void foo ( ) { for ( char c1@1 : hello ) { } }" $, parse (@expr1073742756 clang@var126 ) $) $) { $return
428: ; }
429: }
430:
431: void cxxForRangeStmt2 ( ) {
432:
433: const char clang@var127 [@expr1073742757 2492 ] =@expr1073742758 "`-FunctionDecl 0xc15d98 <line:3:1, col:36> col:6 foo 'void ()'\n  `-CompoundStmt 0xc16668 <col:12, col:36>\n    `-CXXForRangeStmt 0xc165f8 <col:14, col:34>\n      |-<<<NULL>>>\n      |-DeclStmt 0xc161c0 <col:25>\n      | `-VarDecl 0xc15f48 <col:25> col:25 implicit referenced __range1 'int const (&)[4]' cinit\n      |   `-DeclRefExpr 0xc15e38 <col:25> 'const int [4]' lvalue Var 0xc15ac0 'values' 'const int [4]'\n      |-DeclStmt 0xc16498 <col:24>\n      | `-VarDecl 0xc16228 <col:24> col:24 implicit used __begin1 'const int *':'const int *' cinit\n      |   `-ImplicitCastExpr 0xc163b0 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0xc161d8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |-DeclStmt 0xc164b0 <col:24>\n      | `-VarDecl 0xc162a0 <col:24, col:25> col:24 implicit used __end1 'const int *':'const int *' cinit\n      |   `-BinaryOperator 0xc16400 <col:24, col:25> 'const int *' '+'\n      |     |-ImplicitCastExpr 0xc163e8 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0xc161f8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |     `-IntegerLiteral 0xc163c8 <col:25> 'long' 4\n      |-BinaryOperator 0xc16538 <col:24> 'bool' '!='\n      | |-ImplicitCastExpr 0xc16508 <col:24> 'const int *':'const int *' <LValueToRValue>\n      | | `-DeclRefExpr 0xc164c8 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      | `-ImplicitCastExpr 0xc16520 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |   `-DeclRefExpr 0xc164e8 <col:24> 'const int *':'const int *' lvalue Var 0xc162a0 '__end1' 'const int *':'const int *'\n      |-UnaryOperator 0xc16578 <col:24> 'const int *':'const int *' lvalue prefix '++'\n      | `-DeclRefExpr 0xc16558 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      |-DeclStmt 0xc15ed8 <col:19, col:31>\n      | `-VarDecl 0xc15e70 <col:19, col:24> col:23 v 'int' cinit\n      |   `-ImplicitCastExpr 0xc165e0 <col:24> 'int' <LValueToRValue>\n      |     `-UnaryOperator 0xc165c8 <col:24> 'const int' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0xc165b0 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |         `-DeclRefExpr 0xc16590 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      `-CompoundStmt 0xc16658 <col:33, col:34>"
434:
|
462:
463: ;
464: $if $(@expr1073742759 $!@expr1073742760 $assertEquals $(@expr1073742761 "cppcheck-2.8/test/testclangimport.cpp" $, 464 $, "void foo ( ) { for ( int v@1 : values ) { } }" $, parse (@expr1073742762 clang@var127 ) $) $) { $return
465: ; }
466: }
467:
468: void cxxFunctionalCastExpr ( ) {
469: const char clang@var128 [@expr1073742763 1045 ] =@expr1073742764 "`-FunctionDecl 0x156fe98 <line:1:1, line:3:1> line:1:5 main 'int (int, char **)'\n  |-ParmVarDecl 0x156fd00 <col:10, col:14> col:14 argc 'int'\n  |-ParmVarDecl 0x156fdb8 <col:20, col:27> col:27 argv 'char **'\n  `-CompoundStmt 0x1596410 <line:2:1, line:2:1>\n    |-DeclStmt 0x15946a8 <line:2:15, line:2:29>\n    | `-VarDecl 0x1570118 <line:2:15, line:2:28> col:11 used setCode 'MyVar<int>':'MyVar<int>' cinit\n    |   `-ExprWithCleanups 0x1594690 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>'\n    |     `-CXXConstructExpr 0x1594660 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (MyVar<int> &&) noexcept' elidable\n    |       `-MaterializeTemporaryExpr 0x1592b68 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' xvalue\n    |         `-CXXFunctionalCastExpr 0x1592b40 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' functional cast to MyVar<int> <ConstructorConversion>\n    |           `-CXXConstructExpr 0x15929f0 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (int)'\n    |             `-IntegerLiteral 0x1570248 <col:27> 'int' 5\n"
470:
|
479:
480: ;
481: $if $(@expr1073742765 $!@expr1073742766 $assertEquals $(@expr1073742767 "cppcheck-2.8/test/testclangimport.cpp" $, 481 $, "int main ( int argc@1 , char * * argv@2 ) { MyVar<int> setCode@3 = MyVar<int> ( 5 ) ; }" $, parse (@expr1073742768 clang@var128 ) $) $) { $return
482: ; }
483: }
484:
485: void cxxMemberCall ( ) {
486: const char clang@var129 [@expr1073742769 574 ] =@expr1073742770 "`-FunctionDecl 0x320dc80 <line:2:1, col:33> col:6 bar 'void ()'\n  `-CompoundStmt 0x323bb08 <col:12, col:33>\n    |-DeclStmt 0x323ba40 <col:14, col:22>\n    | `-VarDecl 0x320df28 <col:14, col:21> col:21 used c 'C<int>':'C<int>' callinit\n    |   `-CXXConstructExpr 0x323ba10 <col:21> 'C<int>':'C<int>' 'void () noexcept'\n    `-CXXMemberCallExpr 0x323bab8 <col:24, col:30> 'int':'int'\n      `-MemberExpr 0x323ba80 <col:24, col:26> '<bound member function type>' .foo 0x320e160\n        `-DeclRefExpr 0x323ba58 <col:24> 'C<int>':'C<int>' lvalue Var 0x320df28 'c' 'C<int>':'C<int>'"
487:
|
492:
493: ;
494: $if $(@expr1073742771 $!@expr1073742772 $assertEquals $(@expr1073742773 "cppcheck-2.8/test/testclangimport.cpp" $, 494 $, "void bar ( ) { C<int> c@1 ( C<int> ( ) ) ; c@1 . foo ( ) ; }" $, parse (@expr1073742774 clang@var129 ) $) $) { $return ; }
495: }
496:
497: void cxxMethodDecl1 ( ) {
498: const char clang@var130 [@expr1073742775 678 ] =@expr1073742776 "|-CXXMethodDecl 0x55c786f5ad60 <line:56:5, col:179> col:10 analyzeFile '_Bool (const std::string &, const std::string &, const std::string &, unsigned long long, std::list<ErrorLogger::ErrorMessage> *)'\n| |-ParmVarDecl 0x55c786f5a4c8 <col:22, col:41> col:41 buildDir 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a580 <col:51, col:70> col:70 sourcefile 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a638 <col:82, col:101> col:101 cfg 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a6a8 <col:106, col:125> col:125 checksum 'unsigned long long'\n| |-ParmVarDecl 0x55c786f5ac00 <col:135, col:173> col:173 errors 'std::list<ErrorLogger::ErrorMessage> *'\n  `-CompoundStmt 0x0 <>"
499:
|
503:
504: ;
505: $if $(@expr1073742777 $!@expr1073742778 $assertEquals $(@expr1073742779 "cppcheck-2.8/test/testclangimport.cpp" $, 505 $, "_Bool analyzeFile ( const std :: string & buildDir@1 , const std :: string & sourcefile@2 , const std :: string & cfg@3 , unsigned long long checksum@4 , std::list<ErrorLogger::ErrorMessage> * errors@5 ) { }" $, parse (@expr1073742780 clang@var130 ) $) $) { $return ; }
506: }
507:
508: void cxxMethodDecl2 ( ) {
509: const char clang@var131 [@expr1073742781 362 ] =@expr1073742782 "`-CXXMethodDecl 0x220ecb0 parent 0x21e4c28 prev 0x21e5338 <line:11:1, line:18:1> line:14:1 find 'const typename char_traits<_CharT>::char_type *(const char_traits::char_type *, int, const char_traits::char_type &)'\n  `-CompoundStmt 0x220ede0 <line:15:1, line:18:1>\n    `-ReturnStmt 0x220edd0 <line:17:5, col:12>\n      `-IntegerLiteral 0x220edb0 <col:12> 'int' 0"
510:
511:
512: ;
513: $if $(@expr1073742783 $!@expr1073742784 $assertEquals $(@expr1073742785 "cppcheck-2.8/test/testclangimport.cpp" $, 513 $, "" $, parse (@expr1073742786 clang@var131 ) $) $) { $return ; }
514: }
515:
516: void cxxMethodDecl3 ( ) {
517: const char clang@var132 [@expr1073742787 962 ] =@expr1073742788 "|-CXXRecordDecl 0x21cca40 <2.cpp:2:1, line:4:1> line:2:7 class Fred definition\n| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveConstructor exists simple trivial needs_implicit\n| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveAssignment exists simple trivial needs_implicit\n| | `-Destructor simple irrelevant trivial needs_implicit\n| |-CXXRecordDecl 0x21ccb58 <col:1, col:7> col:7 implicit class Fred\n| `-CXXMethodDecl 0x21ccc68 <line:3:1, col:10> col:6 foo 'void ()'\n`-CXXMethodDecl 0x21ccd60 parent 0x21cca40 prev 0x21ccc68 <line:6:1, col:19> col:12 foo 'void ()'\n  `-CompoundStmt 0x21cce50 <col:18, col:19>"
518:
|
527:
528: ;
529: $if $(@expr1073742789 $!@expr1073742790 $assertEquals $(@expr1073742791 "cppcheck-2.8/test/testclangimport.cpp" $, 529 $, "class Fred { void foo ( ) ; } ; void Fred :: foo ( ) { }" $, parse (@expr1073742792 clang@var132 ) $) $) { $return ; }
530: }
531:
532: void cxxMethodDecl4 ( ) {
533: const char clang@var133 [@expr1073742793 467 ] =@expr1073742794 "|-ClassTemplateSpecializationDecl 0x15d82f8 <line:7:3, line:18:3> line:8:12 struct char_traits definition\n| |-TemplateArgument type 'char'\n| | `-BuiltinType 0x15984c0 'char'\n| |-CXXRecordDecl 0x15d8520 <col:5, col:12> col:12 implicit struct char_traits\n| |-CXXMethodDecl 0x15d8738 <line:12:7, line:16:7> line:13:7 move 'char *(char *)' static\n| | |-ParmVarDecl 0x15d8630 <col:12, col:18> col:18 used __s1 'char *'\n| | `-CompoundStmt 0x15d88e8 <line:14:7, line:16:7>\n"
534:
|
538:
539: ;
540: $if $(@expr1073742795 $!@expr1073742796 $assertEquals $(@expr1073742797 "cppcheck-2.8/test/testclangimport.cpp" $, 540 $, "struct char_traits<char> { static char * move ( char * __s1@1 ) { } } ;" $, parse (@expr1073742798 clang@var133 ) $) $) { $return
541: ; }
542: }
543:
544: void cxxNewExpr1 ( ) {
545: const char clang@var134 [@expr1073742799 472 ] =@expr1073742800 "|-VarDecl 0x3a97680 <1.cpp:2:1, col:14> col:6 i 'int *' cinit\n| `-CXXNewExpr 0x3a97d18 <col:10, col:14> 'int *' Function 0x3a97778 'operator new' 'void *(unsigned long)'\n`-VarDecl 0x3a97d80 <line:3:1, col:21> col:6 j 'int *' cinit\n  `-CXXNewExpr 0x3a97e68 <col:10, col:21> 'int *' array Function 0x3a978c0 'operator new[]' 'void *(unsigned long)'\n    `-ImplicitCastExpr 0x3a97e18 <col:18> 'unsigned long' <IntegralCast>\n      `-IntegerLiteral 0x3a97de0 <col:18> 'int' 100"
546:
|
549:
550: ;
551: $if $(@expr1073742801 $!@expr1073742802 $assertEquals $(@expr1073742803 "cppcheck-2.8/test/testclangimport.cpp" $, 551 $, "int * i@1 = new int ; int * j@2 = new int [ 100 ] ;" $, parse (@expr1073742804 clang@var134 ) $) $) { $return
552: ; }
553: }
554:
555: void cxxNewExpr2 ( ) {
556: const char clang@var135 [@expr1073742805 338 ] =@expr1073742806 "|-FunctionDecl 0x59a188 <line:7:1, line:9:1> line:7:11 f 'struct S *()'\n| `-CompoundStmt 0x5c4318 <col:15, line:9:1>\n|   `-ReturnStmt 0x5c4308 <line:8:3, col:14>\n|     `-CXXNewExpr 0x5c42c8 <col:10, col:14> 'S *' Function 0x59a378 'operator new' 'void *(unsigned long)'\n|       `-CXXConstructExpr 0x5c42a0 <col:14> 'S' 'void () noexcept'"
557:
558:
559:
560: ;
561: $if $(@expr1073742807 $!@expr1073742808 $assertEquals $(@expr1073742809 "cppcheck-2.8/test/testclangimport.cpp" $, 561 $, "struct S * f ( ) { return new S ( ) ; }" $, parse (@expr1073742810 clang@var135 ) $) $) { $return
562: ; }
563: }
564:
565: void cxxNullPtrLiteralExpr ( ) {
566: const char clang@var136 [@expr1073742811 200 ] =@expr1073742812 "`-VarDecl 0x2a7d650 <1.cpp:1:1, col:17> col:13 p 'const char *' cinit\n  `-ImplicitCastExpr 0x2a7d708 <col:17> 'const char *' <NullToPointer>\n    `-CXXNullPtrLiteralExpr 0x2a7d6f0 <col:17> 'nullptr_t'"
567:
568: ;
569: $if $(@expr1073742813 $!@expr1073742814 $assertEquals $(@expr1073742815 "cppcheck-2.8/test/testclangimport.cpp" $, 569 $, "const char * p@1 = nullptr ;" $, parse (@expr1073742816 clang@var136 ) $) $) { $return ; }
570: }
571:
572: void cxxOperatorCallExpr ( ) {
573: const char clang@var137 [@expr1073742817 662 ] =@expr1073742818 "`-FunctionDecl 0x3c099f0 <line:2:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x3c37308 <col:12, col:24>\n    |-DeclStmt 0x3c0a060 <col:14, col:17>\n    | `-VarDecl 0x3c09ae0 <col:14, col:16> col:16 used c 'C' callinit\n    |   `-CXXConstructExpr 0x3c0a030 <col:16> 'C' 'void () noexcept'\n    `-CXXOperatorCallExpr 0x3c372c0 <col:19, col:21> 'void'\n      |-ImplicitCastExpr 0x3c372a8 <col:20> 'void (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x3c37250 <col:20> 'void (int)' lvalue CXXMethod 0x3c098c0 'operator=' 'void (int)'\n      |-DeclRefExpr 0x3c0a078 <col:19> 'C' lvalue Var 0x3c09ae0 'c' 'C'\n      `-IntegerLiteral 0x3c0a0a0 <col:21> 'int' 4"
574:
|
581:
582: ;
583: $if $(@expr1073742819 $!@expr1073742820 $assertEquals $(@expr1073742821 "cppcheck-2.8/test/testclangimport.cpp" $, 583 $, "void foo ( ) { C c@1 ( C ( ) ) ; c@1 . operator= ( 4 ) ; }" $, parse (@expr1073742822 clang@var137 ) $) $) { $return ; }
584: }
585:
586: void cxxRecordDecl1 ( ) {
587: const char clang@var138 [@expr1073742823 61 ] =@expr1073742824 "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 class Foo" ;
588: $if $(@expr1073742825 $!@expr1073742826 $assertEquals $(@expr1073742827 "cppcheck-2.8/test/testclangimport.cpp" $, 588 $, "class Foo ;" $, parse (@expr1073742828 clang@var138 ) $) $) { $return ; }
589: }
590:
591: void cxxRecordDecl2 ( ) {
592: const char clang@var139 [@expr1073742829 73 ] =@expr1073742830 "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 struct Foo definition" ;
593: $if $(@expr1073742831 $!@expr1073742832 $assertEquals $(@expr1073742833 "cppcheck-2.8/test/testclangimport.cpp" $, 593 $, "struct Foo { } ;" $, parse (@expr1073742834 clang@var139 ) $) $) { $return ; }
594: }
595:
596: void cxxRecordDeclDerived ( ) {
597: const char clang@var140 [@expr1073742835 425 ] =@expr1073742836 "|-CXXRecordDecl 0x19ccd38 <e.cpp:4:1, line:6:1> line:4:8 referenced struct base definition\n| `-VarDecl 0x19ccf00 <line:5:5, col:35> col:27 value 'const bool' static constexpr cinit\n|   |-value: Int 0\n|   `-CXXBoolLiteralExpr 0x19ccf68 <col:35> 'bool' false\n`-CXXRecordDecl 0x19ccfe8 <line:8:1, col:32> col:8 struct derived definition\n  |-public 'base'\n  `-CXXRecordDecl 0x19cd150 <col:1, col:8> col:8 implicit struct derived"
598:
|
602:
603: ;
604:
605: $if $(@expr1073742837 $!@expr1073742838 $assertEquals $(@expr1073742839 "cppcheck-2.8/test/testclangimport.cpp" $, 605 $, "struct base { static const bool value@1 = false ; } ; struct derived : public base { } ;" $, parse (@expr1073742840 clang@var140 ) $) $) { $return ; }
606: }
607:
608: void cxxStaticCastExpr1 ( ) {
609: const char clang@var141 [@expr1073742841 186 ] =@expr1073742842 "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x2e0e728 <col:9, col:27> 'int' static_cast<int> <NoOp>\n    `-IntegerLiteral 0x2e0e6f0 <col:26> 'int' 0"
610:
611: ;
612: $if $(@expr1073742843 $!@expr1073742844 $assertEquals $(@expr1073742845 "cppcheck-2.8/test/testclangimport.cpp" $, 612 $, "int a@1 = static_cast<int> ( 0 ) ;" $, parse (@expr1073742846 clang@var141 ) $) $) { $return ; }
613: }
614:
615: void cxxStaticCastExpr2 ( ) {
616: const char clang@var142 [@expr1073742847 612 ] =@expr1073742848 "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x3e453e8 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' xvalue static_cast<struct std::_Rb_tree_iterator<struct std::pair<const class std::__cxx11::basic_string<char>, struct Library::AllocFunc> > &&> <NoOp>\n    `-DeclRefExpr 0x3e453b0 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' lvalue ParmVar 0x3e45250 '' 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> > &&'"
617:
618: ;
619: $if $(@expr1073742849 $!@expr1073742850 $assertEquals $(@expr1073742851 "cppcheck-2.8/test/testclangimport.cpp" $, 619 $, "int a@1 = static_cast<structstd::_Rb_tree_iterator<structstd::pair<constclassstd::__cxx11::basic_string<char>,structLibrary::AllocFunc>>&&> ( <NoName> ) ;" $, parse (@expr1073742852 clang@var142 ) $) $) { $return ; }
620: }
621:
622: void cxxStaticCastExpr3 ( ) {
623: const char clang@var143 [@expr1073742853 1069 ] =@expr1073742854 "`-ClassTemplateSpecializationDecl 0xd842d8 <line:4:3, line:7:3> line:4:21 struct char_traits definition\n  |-TemplateArgument type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  |-CXXRecordDecl 0xd84500 <col:14, col:21> col:21 implicit struct char_traits\n  |-TypedefDecl 0xd845a0 <line:5:7, col:20> col:20 referenced char_type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  `-CXXMethodDecl 0xd847b0 <line:6:7, col:80> col:18 assign 'char_traits<char>::char_type *(char_traits<char>::char_type *)'\n    |-ParmVarDecl 0xd84670 <col:25, col:36> col:36 used __s 'char_traits<char>::char_type *'\n    `-CompoundStmt 0xd848f8 <col:41, col:80>\n      `-ReturnStmt 0xd848e8 <col:43, col:77>\n        `-CXXStaticCastExpr 0xd848b8 <col:50, col:77> 'char_traits<char>::char_type *' static_cast<char_traits<char>::char_type *> <NoOp>\n          `-ImplicitCastExpr 0xd848a0 <col:74> 'char_traits<char>::char_type *' <LValueToRValue> part_of_explicit_cast\n            `-DeclRefExpr 0xd84870 <col:74> 'char_traits<char>::char_type *' lvalue ParmVar 0xd84670 '__s' 'char_traits<char>::char_type *'\n"
624:
|
634:
635: ;
636:
637: $if $(@expr1073742855 $!@expr1073742856 $assertEquals $(@expr1073742857 "cppcheck-2.8/test/testclangimport.cpp" $, 637 $, "struct char_traits<char> { typedef char char_type ; char_traits<char>::char_type * assign ( char_traits<char>::char_type * __s@1 ) { return static_cast<char_traits<char>::char_type*> ( __s@1 ) ; } } ;" $, parse (@expr1073742858 clang@var143 ) $) $) { $return ; }
638: }
639:
640: void cxxStdInitializerListExpr ( ) {
641: const char clang@var144 [@expr1073742859 1138 ] =@expr1073742860 "`-VarDecl 0x2f92060 <1.cpp:3:1, col:25> col:18 x 'std::vector<int>':'std::vector<int, std::allocator<int> >' listinit\n  `-ExprWithCleanups 0x2fb0b40 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >'\n    `-CXXConstructExpr 0x2fb0b00 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >' 'void (initializer_list<std::vector<int, std::allocator<int> >::value_type>, const std::vector<int, std::allocator<int> >::allocator_type &)' list std::initializer_list\n      |-CXXStdInitializerListExpr 0x2fb0928 <col:19, col:25> 'initializer_list<std::vector<int, std::allocator<int> >::value_type>':'std::initializer_list<int>'\n      | `-MaterializeTemporaryExpr 0x2fb0910 <col:19, col:25> 'const int [3]' xvalue\n      |   `-InitListExpr 0x2fb08b8 <col:19, col:25> 'const int [3]'\n      |     |-IntegerLiteral 0x2f920c0 <col:20> 'int' 1\n      |     |-IntegerLiteral 0x2f920e0 <col:22> 'int' 2\n      |     `-IntegerLiteral 0x2f92100 <col:24> 'int' 3\n      `-CXXDefaultArgExpr 0x2fb0ae0 <<invalid sloc>> 'const std::vector<int, std::allocator<int> >::allocator_type':'const std::allocator<int>' lvalue"
642:
|
649:
650: ;
651: $if $(@expr1073742861 $!@expr1073742862 $assertEquals $(@expr1073742863 "cppcheck-2.8/test/testclangimport.cpp" $, 651 $, "std :: vector<int> x@1 { 1 , 2 , 3 } ;" $, parse (@expr1073742864 clang@var144 ) $) $) { $return ; }
652: }
653:
654: void cxxThrowExpr ( ) {
655: const char clang@var145 [@expr1073742865 212 ] =@expr1073742866 "`-FunctionDecl 0x3701690 <1.cpp:2:1, col:23> col:6 foo 'void ()'\n  `-CompoundStmt 0x37017b0 <col:12, col:23>\n    `-CXXThrowExpr 0x3701790 <col:14, col:20> 'void'\n      `-IntegerLiteral 0x3701770 <col:20> 'int' 1"
656:
657:
658: ;
659: $if $(@expr1073742867 $!@expr1073742868 $assertEquals $(@expr1073742869 "cppcheck-2.8/test/testclangimport.cpp" $, 659 $, "void foo ( ) { throw 1 ; }" $, parse (@expr1073742870 clang@var145 ) $) $) { $return ; }
660: }
661:
662: void defaultStmt ( ) {
663: const char clang@var146 [@expr1073742871 591 ] =@expr1073742872 "`-FunctionDecl 0x18476b8 <1.c:3:1, line:9:1> line:3:5 foo 'int (int)'\n  |-ParmVarDecl 0x18475e0 <col:9, col:13> col:13 used rc 'int'\n  `-CompoundStmt 0x1847868 <line:4:1, line:9:1>\n    `-SwitchStmt 0x18477e0 <line:5:3, line:8:3>\n      |-ImplicitCastExpr 0x18477c8 <line:5:10> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x18477a8 <col:10> 'int' lvalue ParmVar 0x18475e0 'rc' 'int'\n      `-CompoundStmt 0x1847850 <col:14, line:8:3>\n        `-DefaultStmt 0x1847830 <line:6:3, line:7:12>\n          `-ReturnStmt 0x1847820 <col:5, col:12>\n            `-IntegerLiteral 0x1847800 <col:12> 'int' 1"
664:
|
671:
672: ;
673: $if $(@expr1073742873 $!@expr1073742874 $assertEquals $(@expr1073742875 "cppcheck-2.8/test/testclangimport.cpp" $, 673 $, "int foo ( int rc@1 ) { switch ( rc@1 ) { default : return 1 ; } }" $, parse (@expr1073742876 clang@var146 ) $) $) { $return ; }
674: }
675:
676: void doStmt ( ) {
677: const char clang@var147 [@expr1073742877 396 ] =@expr1073742878 "`-FunctionDecl 0x27fbbc8 <line:2:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x27fbd08 <col:12, col:34>\n    `-DoStmt 0x27fbce8 <col:14, col:31>\n      |-CompoundStmt 0x27fbcb0 <col:17, col:22>\n      | `-UnaryOperator 0x27fbc90 <col:18, col:19> 'int' postfix '++'\n      |   `-DeclRefExpr 0x27fbc68 <col:18> 'int' lvalue Var 0x27fbae0 'x' 'int'\n      `-IntegerLiteral 0x27fbcc8 <col:30> 'int' 1"
678:
|
682:
683: ;
684: $if $(@expr1073742879 $!@expr1073742880 $assertEquals $(@expr1073742881 "cppcheck-2.8/test/testclangimport.cpp" $, 684 $, "void foo ( ) { do { ++ x ; } while ( 1 ) ; }" $, parse (@expr1073742882 clang@var147 ) $) $) { $return ; }
685: }
686:
687: void enumDecl1 ( ) {
688: const char clang@var148 [@expr1073742883 237 ] =@expr1073742884 "`-EnumDecl 0x2660660 <line:3:1, col:16> col:6 referenced abc\n  |-EnumConstantDecl 0x2660720 <col:11> col:11 referenced a 'abc'\n  |-EnumConstantDecl 0x2660768 <col:13> col:13 b 'abc'\n  `-EnumConstantDecl 0x26607b0 <col:15> col:15 c 'abc'"
689:
690:
691: ;
692: $if $(@expr1073742885 $!@expr1073742886 $assertEquals $(@expr1073742887 "cppcheck-2.8/test/testclangimport.cpp" $, 692 $, "enum abc { a , b , c }" $, parse (@expr1073742888 clang@var148 ) $) $) { $return ; }
693: }
694:
695: void enumDecl2 ( ) {
696: const char clang@var149 [@expr1073742889 80 ] =@expr1073742890 "`-EnumDecl 0xb55d50 <2.cpp:4:3, col:44> col:8 syntax_option_type 'unsigned int'" ;
697: $if $(@expr1073742891 $!@expr1073742892 $assertEquals $(@expr1073742893 "cppcheck-2.8/test/testclangimport.cpp" $, 697 $, "enum syntax_option_type : unsigned int { }" $, parse (@expr1073742894 clang@var149 ) $) $) { $return ; }
698: }
699:
700: void enumDecl3 ( ) {
701: const char clang@var150 [@expr1073742895 240 ] =@expr1073742896 "|-EnumDecl 0x1586e48 <2.cpp:1:3, line:5:3> line:1:8 __syntax_option\n| |-EnumConstantDecl 0x1586f18 <line:3:5> col:5 referenced _S_polynomial '__syntax_option'\n| `-EnumConstantDecl 0x1586f68 <line:4:5> col:5 _S_syntax_last '__syntax_option'"
702:
703: ;
704: $if $(@expr1073742897 $!@expr1073742898 $assertEquals $(@expr1073742899 "cppcheck-2.8/test/testclangimport.cpp" $, 704 $, "enum __syntax_option { _S_polynomial , _S_syntax_last }" $, parse (@expr1073742900 clang@var150 ) $) $) { $return ; }
705: }
706:
707: void enumDecl4 ( ) {
708: const char clang@var151 [@expr1073742901 546 ] =@expr1073742902 "|-EnumDecl 0xace1f8 <e1.cpp:3:1, col:51> col:1\n| |-EnumConstantDecl 0xace2c8 <col:7> col:7 A '(anonymous enum at e1.cpp:3:1)'\n| |-EnumConstantDecl 0xace318 <col:16> col:16 B '(anonymous enum at e1.cpp:3:1)'\n| `-EnumConstantDecl 0xace3b8 <col:46> col:46 referenced C '(anonymous enum at e1.cpp:3:1)'\n`-VarDecl 0xace470 <col:1, col:66> col:53 x 'enum (anonymous enum at e1.cpp:3:1)':'(anonymous enum at e1.cpp:3:1)' cinit\n  `-DeclRefExpr 0xace520 <col:66> '(anonymous enum at e1.cpp:3:1)' EnumConstant 0xace3b8 'C' '(anonymous enum at e1.cpp:3:1)'"
709:
|
712:
713: ;
714: $if $(@expr1073742903 $!@expr1073742904 $assertEquals $(@expr1073742905 "cppcheck-2.8/test/testclangimport.cpp" $, 714 $, "enum { A , B , C } x@1 = C ;" $, parse (@expr1073742906 clang@var151 ) $) $) { $return ; }
715: }
716:
717: void forStmt ( ) {
718: const char clang@var152 [@expr1073742907 886 ] =@expr1073742908 "`-FunctionDecl 0x2f93ae0 <1.c:1:1, col:56> col:5 main 'int ()'\n  `-CompoundStmt 0x2f93dc0 <col:12, col:56>\n    |-ForStmt 0x2f93d50 <col:14, col:44>\n    | |-DeclStmt 0x2f93c58 <col:19, col:28>\n    | | `-VarDecl 0x2f93bd8 <col:19, col:27> col:23 used i 'int' cinit\n    | |   `-IntegerLiteral 0x2f93c38 <col:27> 'int' 0\n    | |-<<<NULL>>>\n    | |-BinaryOperator 0x2f93cd0 <col:30, col:34> 'int' '<'\n    | | |-ImplicitCastExpr 0x2f93cb8 <col:30> 'int' <LValueToRValue>\n    | | | `-DeclRefExpr 0x2f93c70 <col:30> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | | `-IntegerLiteral 0x2f93c98 <col:34> 'int' 10\n    | |-UnaryOperator 0x2f93d20 <col:38, col:39> 'int' postfix '++'\n    | | `-DeclRefExpr 0x2f93cf8 <col:38> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | `-CompoundStmt 0x2f93d40 <col:43, col:44>\n    `-ReturnStmt 0x2f93da8 <col:46, col:53>\n      `-IntegerLiteral 0x2f93d88 <col:53> 'int' 0"
719:
|
732:
733: ;
734: $if $(@expr1073742909 $!@expr1073742910 $assertEquals $(@expr1073742911 "cppcheck-2.8/test/testclangimport.cpp" $, 734 $, "int main ( ) { for ( int i@1 = 0 ; i@1 < 10 ; ++ i@1 ) { } return 0 ; }" $, parse (@expr1073742912 clang@var152 ) $) $) { $return ; }
735: }
736:
737: void funcdecl1 ( ) {
738: const char clang@var153 [@expr1073742913 187 ] =@expr1073742914 "`-FunctionDecl 0x3122c30 <1.c:1:1, col:22> col:6 foo 'void (int, int)'\n  |-ParmVarDecl 0x3122ae0 <col:10, col:14> col:14 x 'int'\n  `-ParmVarDecl 0x3122b58 <col:17, col:21> col:21 y 'int'"
739:
740: ;
741: $if $(@expr1073742915 $!@expr1073742916 $assertEquals $(@expr1073742917 "cppcheck-2.8/test/testclangimport.cpp" $, 741 $, "void foo ( int x@1 , int y@2 ) ;" $, parse (@expr1073742918 clang@var153 ) $) $) { $return ; }
742: }
743:
744: void funcdecl2 ( ) {
745: const char clang@var154 [@expr1073742919 660 ] =@expr1073742920 "`-FunctionDecl 0x24b2c38 <1.c:1:1, line:4:1> line:1:5 foo 'int (int, int)'\n  |-ParmVarDecl 0x24b2ae0 <col:9, col:13> col:13 used x 'int'\n  |-ParmVarDecl 0x24b2b58 <col:16, col:20> col:20 used y 'int'\n  `-CompoundStmt 0x24b2de8 <line:2:1, line:4:1>\n    `-ReturnStmt 0x24b2dd0 <line:3:5, col:16>\n      `-BinaryOperator 0x24b2da8 <col:12, col:16> 'int' '/'\n        |-ImplicitCastExpr 0x24b2d78 <col:12> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x24b2d28 <col:12> 'int' lvalue ParmVar 0x24b2ae0 'x' 'int'\n        `-ImplicitCastExpr 0x24b2d90 <col:16> 'int' <LValueToRValue>\n          `-DeclRefExpr 0x24b2d50 <col:16> 'int' lvalue ParmVar 0x24b2b58 'y' 'int'"
746:
|
753:
754: ;
755: $if $(@expr1073742921 $!@expr1073742922 $assertEquals $(@expr1073742923 "cppcheck-2.8/test/testclangimport.cpp" $, 755 $, "int foo ( int x@1 , int y@2 ) { return x@1 / y@2 ; }" $, parse (@expr1073742924 clang@var154 ) $) $) { $return ; }
756: }
757:
758: void funcdecl3 ( ) {
759: const char clang@var155 [@expr1073742925 198 ] =@expr1073742926 "|-FunctionDecl 0x27cb6b8 <line:865:1, col:35> col:12 __overflow 'int (FILE *, int)' extern\n| |-ParmVarDecl 0x27cb528 <col:24, col:29> col:30 'FILE *'\n| `-ParmVarDecl 0x27cb5a0 <col:32> col:35 'int'"
760:
761: ;
762: $if $(@expr1073742927 $!@expr1073742928 $assertEquals $(@expr1073742929 "cppcheck-2.8/test/testclangimport.cpp" $, 762 $, "int __overflow ( FILE * , int ) ;" $, parse (@expr1073742930 clang@var155 ) $) $) { $return ; }
763: }
764:
765: void funcdecl4 ( ) {
766: const char clang@var156 [@expr1073742931 426 ] =@expr1073742932 "|-FunctionDecl 0x272bb60 <line:658:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern\n| |-ParmVarDecl 0x272cc40 <<invalid sloc>> <invalid sloc> 'const void *'\n| |-ParmVarDecl 0x272cca0 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| |-ParmVarDecl 0x272cd00 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| `-ParmVarDecl 0x272cd60 <<invalid sloc>> <invalid sloc> 'FILE *'"
767:
768:
769:
770: ;
771: $if $(@expr1073742933 $!@expr1073742934 $assertEquals $(@expr1073742935 "cppcheck-2.8/test/testclangimport.cpp" $, 771 $, "unsigned long fwrite ( const void * , unsigned long , unsigned long , FILE * ) ;" $, parse (@expr1073742936 clang@var156 ) $) $) { $return ; }
772: }
773:
774: void funcdecl5 ( ) {
775: const char clang@var157 [@expr1073742937 81 ] =@expr1073742938 "`-FunctionDecl 0x59d670 <1.c:1:1, col:28> col:20 foo 'void (void)' static inline" ;
776: $if $(@expr1073742939 $!@expr1073742940 $assertEquals $(@expr1073742941 "cppcheck-2.8/test/testclangimport.cpp" $, 776 $, "static inline void foo ( ) ;" $, parse (@expr1073742942 clang@var157 ) $) $) { $return ; }
777: }
778:
779: void funcdecl6 ( ) {
780: const char clang@var158 [@expr1073742943 133 ] =@expr1073742944 "`-FunctionDecl 0x196eea8 <1.cpp:3:5, col:27> col:12 foo 'void **(int)'\n  `-ParmVarDecl 0x196eda0 <col:17, col:21> col:21 count 'int'"
781: ;
782: $if $(@expr1073742945 $!@expr1073742946 $assertEquals $(@expr1073742947 "cppcheck-2.8/test/testclangimport.cpp" $, 782 $, "void * * foo ( int count@1 ) ;" $, parse (@expr1073742948 clang@var158 ) $) $) { $return ; }
783: }
784:
785: void functionTemplateDecl1 ( ) {
786: const char clang@var159 [@expr1073742949 64 ] =@expr1073742950 "`-FunctionTemplateDecl 0x3242860 <a.cpp:1:1, col:46> col:21 foo" ;
787: $if $(@expr1073742951 $!@expr1073742952 $assertEquals $(@expr1073742953 "cppcheck-2.8/test/testclangimport.cpp" $, 787 $, "" $, parse (@expr1073742954 clang@var159 ) $) $) { $return ; }
788: }
789:
790: void functionTemplateDecl2 ( ) {
791: const char clang@var160 [@expr1073742955 1598 ] =@expr1073742956 "|-FunctionTemplateDecl 0x333a860 <a.cpp:1:1, col:46> col:21 foo\n| |-TemplateTypeParmDecl 0x333a5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-FunctionDecl 0x333a7c0 <col:19, col:46> col:21 foo 'T (T)'\n| | |-ParmVarDecl 0x333a6c0 <col:25, col:27> col:27 referenced t 'T'\n| | `-CompoundStmt 0x333a980 <col:30, col:46>\n| |   `-ReturnStmt 0x333a968 <col:32, col:43>\n| |     `-BinaryOperator 0x333a940 <col:39, col:43> '<dependent type>' '+'\n| |       |-DeclRefExpr 0x333a8f8 <col:39> 'T' lvalue ParmVar 0x333a6c0 't' 'T'\n| |       `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n| `-FunctionDecl 0x333ae00 <col:19, col:46> col:21 used foo 'int (int)'\n|   |-TemplateArgument type 'int'\n|   |-ParmVarDecl 0x333ad00 <col:25, col:27> col:27 used t 'int':'int'\n|   `-CompoundStmt 0x333b0a8 <col:30, col:46>\n|     `-ReturnStmt 0x333b090 <col:32, col:43>\n|       `-BinaryOperator 0x333b068 <col:39, col:43> 'int' '+'\n|         |-ImplicitCastExpr 0x333b050 <col:39> 'int':'int' <LValueToRValue>\n|         | `-DeclRefExpr 0x333b028 <col:39> 'int':'int' lvalue ParmVar 0x333ad00 't' 'int':'int'\n|         `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n`-FunctionDecl 0x333a9f8 <line:2:1, col:22> col:1 invalid bar 'int ()'\n  `-CompoundStmt 0x333b010 <col:7, col:22>\n    `-CallExpr 0x333afe0 <col:9, col:19> 'int':'int'\n      |-ImplicitCastExpr 0x333afc8 <col:9, col:16> 'int (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x333af00 <col:9, col:16> 'int (int)' lvalue Function 0x333ae00 'foo' 'int (int)' (FunctionTemplate 0x333a860 'foo')\n      `-IntegerLiteral 0x333ab48 <col:18> 'int' 1"
792:
|
813:
814: ;
815: $if $(@expr1073742957 $!@expr1073742958 $assertEquals $(@expr1073742959 "cppcheck-2.8/test/testclangimport.cpp" $, 815 $, "int foo<int> ( int t@1 ) { return t@1 + 1 ; } int bar ( ) { foo ( 1 ) ; }" $, parse (@expr1073742960 clang@var160 ) $) $) { $return ; }
816: }
817:
818: void ifelse ( ) {
819: const char clang@var161 [@expr1073742961 626 ] =@expr1073742962 "`-FunctionDecl 0x2637ba8 <1.c:1:1, line:4:1> line:1:5 foo 'int (int)'\n  |-ParmVarDecl 0x2637ae0 <col:9, col:13> col:13 used x 'int'\n  `-CompoundStmt 0x2637d70 <col:16, line:4:1>\n    `-IfStmt 0x2637d38 <line:2:5, line:3:11>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-BinaryOperator 0x2637cf0 <line:2:9, col:13> 'int' '>'\n      | |-ImplicitCastExpr 0x2637cd8 <col:9> 'int' <LValueToRValue>\n      | | `-DeclRefExpr 0x2637c90 <col:9> 'int' lvalue ParmVar 0x2637ae0 'x' 'int'\n      | `-IntegerLiteral 0x2637cb8 <col:13> 'int' 10\n      |-CompoundStmt 0x2637d18 <col:17, col:18>\n      `-CompoundStmt 0x2637d28 <line:3:10, col:11>"
820:
|
829:
830: ;
831: $if $(@expr1073742963 $!@expr1073742964 $assertEquals $(@expr1073742965 "cppcheck-2.8/test/testclangimport.cpp" $, 831 $, "int foo ( int x@1 ) { if ( x@1 > 10 ) { } else { } }" $, parse (@expr1073742966 clang@var161 ) $) $) { $return ; }
832: }
833:
834: void ifStmt ( ) {
835:
836: const char clang@var162 [@expr1073742967 321 ] =@expr1073742968 "`-FunctionDecl 0x41d0690 <2.cpp:1:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x41d07f0 <col:12, col:24>\n    `-IfStmt 0x41d07b8 <col:14, col:22>\n      |-ImplicitCastExpr 0x41d0790 <col:18> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x41d0770 <col:18> 'int' 1\n      |-CompoundStmt 0x41d07a8 <col:21, col:22>\n"
837:
|
840:
841: ;
842: $if $(@expr1073742969 $!@expr1073742970 $assertEquals $(@expr1073742971 "cppcheck-2.8/test/testclangimport.cpp" $, 842 $, "void foo ( ) { if ( 1 ) { } }" $, parse (@expr1073742972 clang@var162 ) $) $) { $return ; }
843: }
844:
845: void initListExpr ( ) {
846: const char clang@var163 [@expr1073742973 283 ] =@expr1073742974 "|-VarDecl 0x397c680 <1.cpp:2:1, col:26> col:11 used ints 'const int [3]' cinit\n| `-InitListExpr 0x397c7d8 <col:20, col:26> 'const int [3]'\n|   |-IntegerLiteral 0x397c720 <col:21> 'int' 1\n|   |-IntegerLiteral 0x397c740 <col:23> 'int' 2\n|   `-IntegerLiteral 0x397c760 <col:25> 'int' 3"
847:
848:
849:
850: ;
851: $if $(@expr1073742975 $!@expr1073742976 $assertEquals $(@expr1073742977 "cppcheck-2.8/test/testclangimport.cpp" $, 851 $, "const int [3] ints@1 = { 1 , 2 , 3 } ;" $, parse (@expr1073742978 clang@var163 ) $) $) { $return ; }
852: }
853:
854: void labelStmt ( ) {
855: const char clang@var164 [@expr1073742979 221 ] =@expr1073742980 "`-FunctionDecl 0x2ed1ba0 <1.c:1:1, col:36> col:6 foo 'void (int)'\n  `-CompoundStmt 0x2ed1d00 <col:17, col:36>\n    `-LabelStmt 0x2ed1ce8 <col:19, col:30> 'loop'\n      `-GotoStmt 0x2ed1cd0 <col:25, col:30> 'loop' 0x2ed1c88"
856:
857:
858: ;
859: $if $(@expr1073742981 $!@expr1073742982 $assertEquals $(@expr1073742983 "cppcheck-2.8/test/testclangimport.cpp" $, 859 $, "void foo ( ) { loop : goto loop ; }" $, parse (@expr1073742984 clang@var164 ) $) $) { $return ; }
860: }
861:
862: void memberExpr ( ) {
863:
864:
865:
866: const char clang@var165 [@expr1073742985 636 ] =@expr1073742986 "|-RecordDecl 0x2441a88 <1.c:1:1, col:18> col:8 struct S definition\n| `-FieldDecl 0x2441b48 <col:12, col:16> col:16 referenced x 'int'\n`-FunctionDecl 0x2441cf8 <line:2:1, col:35> col:5 foo 'int (struct S)'\n  |-ParmVarDecl 0x2441be8 <col:9, col:18> col:18 used s 'struct S':'struct S'\n  `-CompoundStmt 0x2441e70 <col:21, col:35>\n    `-ReturnStmt 0x2441e58 <col:23, col:32>\n      `-ImplicitCastExpr 0x2441e40 <col:30, col:32> 'int' <LValueToRValue>\n        `-MemberExpr 0x2441e08 <col:30, col:32> 'int' lvalue .x 0x2441b48\n          `-DeclRefExpr 0x2441de0 <col:30> 'struct S':'struct S' lvalue ParmVar 0x2441be8 's' 'struct S':'struct S'"
867:
|
873:
874: ;
875: $if $(@expr1073742987 $!@expr1073742988 $assertEquals $(@expr1073742989 "cppcheck-2.8/test/testclangimport.cpp" $, 875 $, "struct S { int x@1 ; } ; int foo ( struct S s@2 ) { return s@2 . x@1 ; }" $, parse (@expr1073742990 clang@var165 ) $) $) { $return
876: ; }
877: }
878:
879: void namespaceDecl1 ( ) {
880: const char clang@var166 [@expr1073742991 115 ] =@expr1073742992 "`-NamespaceDecl 0x2e5f658 <hello.cpp:1:1, col:24> col:11 x\n  `-VarDecl 0x2e5f6d8 <col:15, col:19> col:19 var 'int'"
881: ;
882: $if $(@expr1073742993 $!@expr1073742994 $assertEquals $(@expr1073742995 "cppcheck-2.8/test/testclangimport.cpp" $, 882 $, "namespace x { int var@1 ; }" $, parse (@expr1073742996 clang@var166 ) $) $) { $return
883: ; }
884: }
885:
886: void namespaceDecl2 ( ) {
887: const char clang@var167 [@expr1073742997 170 ] =@expr1073742998 "`-NamespaceDecl 0x1753e60 <1.cpp:1:1, line:4:1> line:1:11 std\n  |-VisibilityAttr 0x1753ed0 <col:31, col:56> Default\n  `-VarDecl 0x1753f40 <line:3:5, col:9> col:9 x 'int'"
888:
889: ;
890: $if $(@expr1073742999 $!@expr1073743000 $assertEquals $(@expr1073743001 "cppcheck-2.8/test/testclangimport.cpp" $, 890 $, "namespace std { int x@1 ; }" $, parse (@expr1073743002 clang@var167 ) $) $) { $return
891: ; }
892: }
893:
894: void recordDecl1 ( ) {
895: const char clang@var168 [@expr1073743003 184 ] =@expr1073743004 "`-RecordDecl 0x354eac8 <1.c:1:1, line:4:1> line:1:8 struct S definition\n  |-FieldDecl 0x354eb88 <line:2:3, col:7> col:7 x 'int'\n  `-FieldDecl 0x354ebe8 <line:3:3, col:7> col:7 y 'int'"
896:
897: ;
898: $if $(@expr1073743005 $!@expr1073743006 $assertEquals $(@expr1073743007 "cppcheck-2.8/test/testclangimport.cpp" $, 898 $, "struct S { int x@1 ; int y@2 ; } ;" $, parse (@expr1073743008 clang@var168 ) $) $) { $return
899: ; }
900: }
901:
902: void recordDecl2 ( ) {
903: const char clang@var169 [@expr1073743009 123 ] =@expr1073743010 "`-RecordDecl 0x3befac8 <2.c:2:1, col:22> col:1 struct definition\n  `-FieldDecl 0x3befbf0 <col:10, col:19> col:14 val 'int'"
904: ;
905: $if $(@expr1073743011 $!@expr1073743012 $assertEquals $(@expr1073743013 "cppcheck-2.8/test/testclangimport.cpp" $, 905 $, "struct { int val@1 ; } ;" $, parse (@expr1073743014 clang@var169 ) $) $) { $return
906: ; }
907: }
908:
909: void switchStmt ( ) {
910: const char clang@var170 [@expr1073743015 486 ] =@expr1073743016 "`-FunctionDecl 0x2796ba0 <1.c:1:1, col:35> col:6 foo 'void (int)'\n  |-ParmVarDecl 0x2796ae0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2796d18 <col:17, col:35>\n    |-SwitchStmt 0x2796cc8 <col:19, col:32>\n    | |-<<<NULL>>>\n    | |-<<<NULL>>>\n    | |-ImplicitCastExpr 0x2796cb0 <col:27> 'int' <LValueToRValue>\n    | | `-DeclRefExpr 0x2796c88 <col:27> 'int' lvalue ParmVar 0x2796ae0 'x' 'int'\n    | `-CompoundStmt 0x2796cf8 <col:30, col:32>\n    `-NullStmt 0x2796d08 <col:33>"
911:
|
918:
919: ;
920: $if $(@expr1073743017 $!@expr1073743018 $assertEquals $(@expr1073743019 "cppcheck-2.8/test/testclangimport.cpp" $, 920 $, "void foo ( int x@1 ) { switch ( x@1 ) { } ; }" $, parse (@expr1073743020 clang@var170 ) $) $) { $return
921: ; }
922: }
923:
924: void typedefDecl1 ( ) {
925: const char clang@var171 [@expr1073743021 124 ] =@expr1073743022 "|-TypedefDecl 0x2d60180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\n| `-BuiltinType 0x2d5fe80 '__int128'"
926: ;
927: $if $(@expr1073743023 $!@expr1073743024 $assertEquals $(@expr1073743025 "cppcheck-2.8/test/testclangimport.cpp" $, 927 $, "typedef __int128 __int128_t ;" $, parse (@expr1073743026 clang@var171 ) $) $) { $return ; }
928: }
929:
930: void typedefDecl2 ( ) {
931: const char clang@var172 [@expr1073743027 221 ] =@expr1073743028 "|-TypedefDecl 0x2d604a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\n| `-RecordType 0x2d602c0 'struct __NSConstantString_tag'\n|   `-Record 0x2d60238 '__NSConstantString_tag'"
932:
933: ;
934: $if $(@expr1073743029 $!@expr1073743030 $assertEquals $(@expr1073743031 "cppcheck-2.8/test/testclangimport.cpp" $, 934 $, "typedef struct __NSConstantString_tag __NSConstantString ;" $, parse (@expr1073743032 clang@var172 ) $) $) { $return ; }
935: }
936:
937: void typedefDecl3 ( ) {
938: const char clang@var173 [@expr1073743033 165 ] =@expr1073743034 "|-TypedefDecl 0x2d60540 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\n| `-PointerType 0x2d60500 'char *'\n|   `-BuiltinType 0x2d5f980 'char'"
939:
940: ;
941: $if $(@expr1073743035 $!@expr1073743036 $assertEquals $(@expr1073743037 "cppcheck-2.8/test/testclangimport.cpp" $, 941 $, "typedef char * __builtin_ms_va_list ;" $, parse (@expr1073743038 clang@var173 ) $) $) { $return ; }
942: }
943:
944: void unaryExprOrTypeTraitExpr1 ( ) {
945: const char clang@var174 [@expr1073743039 215 ] =@expr1073743040 "`-VarDecl 0x24cc610 <a.cpp:1:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x24cc6e8 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x24cc6c8 <col:9, col:19> 'unsigned long' sizeof 'int'\n"
946:
947: ;
948: $if $(@expr1073743041 $!@expr1073743042 $assertEquals $(@expr1073743043 "cppcheck-2.8/test/testclangimport.cpp" $, 948 $, "int x@1 = sizeof ( int ) ;" $, parse (@expr1073743044 clang@var174 ) $) $) { $return ; }
949: }
950:
951: void unaryExprOrTypeTraitExpr2 ( ) {
952: const char clang@var175 [@expr1073743045 365 ] =@expr1073743046 "`-VarDecl 0x27c6c00 <line:3:5, col:23> col:9 x 'int' cinit\n  `-ImplicitCastExpr 0x27c6cc8 <col:13, col:23> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x27c6ca8 <col:13, col:23> 'unsigned long' sizeof\n      `-ParenExpr 0x27c6c88 <col:19, col:23> 'char [10]' lvalue\n        `-DeclRefExpr 0x27c6c60 <col:20> 'char [10]' lvalue Var 0x27c6b48 'buf' 'char [10]'"
953:
954:
955:
956: ;
957: $if $(@expr1073743047 $!@expr1073743048 $assertEquals $(@expr1073743049 "cppcheck-2.8/test/testclangimport.cpp" $, 957 $, "int x@1 = sizeof ( buf ) ;" $, parse (@expr1073743050 clang@var175 ) $) $) { $return ; }
958: }
959:
960: void unaryOperator ( ) {
961: const char clang@var176 [@expr1073743051 676 ] =@expr1073743052 "`-FunctionDecl 0x2dd9748 <1.cpp:2:1, col:44> col:5 foo 'int (int *)'\n  |-ParmVarDecl 0x2dd9680 <col:14, col:19> col:19 used p 'int *'\n  `-CompoundStmt 0x2dd9908 <col:22, col:44>\n    `-ReturnStmt 0x2dd98f0 <col:24, col:41>\n      `-BinaryOperator 0x2dd98c8 <col:31, col:41> 'int' '/'\n        |-IntegerLiteral 0x2dd9830 <col:31> 'int' 100000\n        `-ImplicitCastExpr 0x2dd98b0 <col:40, col:41> 'int' <LValueToRValue>\n          `-UnaryOperator 0x2dd9890 <col:40, col:41> 'int' lvalue prefix '*' cannot overflow\n            `-ImplicitCastExpr 0x2dd9878 <col:41> 'int *' <LValueToRValue>\n              `-DeclRefExpr 0x2dd9850 <col:41> 'int *' lvalue ParmVar 0x2dd9680 'p' 'int *'"
962:
|
969:
970: ;
971: $if $(@expr1073743053 $!@expr1073743054 $assertEquals $(@expr1073743055 "cppcheck-2.8/test/testclangimport.cpp" $, 971 $, "int foo ( int * p@1 ) { return 100000 / * p@1 ; }" $, parse (@expr1073743056 clang@var176 ) $) $) { $return ; }
972: }
973:
974: void vardecl1 ( ) {
975: const char clang@var177 [@expr1073743057 300 ] =@expr1073743058 "|-VarDecl 0x32b8aa0 <1.c:1:1, col:9> col:5 used a 'int' cinit\n| `-IntegerLiteral 0x32b8b40 <col:9> 'int' 1\n`-VarDecl 0x32b8b78 <line:2:1, col:9> col:5 b 'int' cinit\n  `-ImplicitCastExpr 0x32b8c00 <col:9> 'int' <LValueToRValue>\n    `-DeclRefExpr 0x32b8bd8 <col:9> 'int' lvalue Var 0x32b8aa0 'a' 'int'"
976:
977:
978:
979: ;
980:
981: $if $(@expr1073743059 $!@expr1073743060 $assertEquals $(@expr1073743061 "cppcheck-2.8/test/testclangimport.cpp" $, 981 $, "int a@1 = 1 ; int b@2 = a@1 ;" $, parse (@expr1073743062 clang@var177 ) $) $) { $return
982: ; }
983: }
984:
985: void vardecl2 ( ) {
986: const char clang@var178 [@expr1073743063 569 ] =@expr1073743064 "|-VarDecl 0x3873b50 <1.c:1:1, col:9> col:5 used a 'int [10]'\n`-FunctionDecl 0x3873c38 <line:3:1, line:6:1> line:3:6 foo 'void ()'\n  `-CompoundStmt 0x3873dd0 <line:4:1, line:6:1>\n    `-BinaryOperator 0x3873da8 <line:5:3, col:10> 'int' '='\n      |-ArraySubscriptExpr 0x3873d60 <col:3, col:6> 'int' lvalue\n      | |-ImplicitCastExpr 0x3873d48 <col:3> 'int *' <ArrayToPointerDecay>\n      | | `-DeclRefExpr 0x3873cd8 <col:3> 'int [10]' lvalue Var 0x3873b50 'a' 'int [10]'\n      | `-IntegerLiteral 0x3873d00 <col:5> 'int' 0\n      `-IntegerLiteral 0x3873d88 <col:10> 'int' 0\n"
987:
|
993:
994: ;
995:
996: $if $(@expr1073743065 $!@expr1073743066 $assertEquals $(@expr1073743067 "cppcheck-2.8/test/testclangimport.cpp" $, 996 $, "int [10] a@1 ; void foo ( ) { a@1 [ 0 ] = 0 ; }" $, parse (@expr1073743068 clang@var178 ) $) $) { $return
997: ; }
998: }
999:
1000: void vardecl3 ( ) {
1001: const char clang@var179 [@expr1073743069 61 ] =@expr1073743070 "`-VarDecl 0x25a8aa0 <1.c:1:1, col:12> col:12 p 'const int *'" ;
1002: $if $(@expr1073743071 $!@expr1073743072 $assertEquals $(@expr1073743073 "cppcheck-2.8/test/testclangimport.cpp" $, 1002 $, "const int * p@1 ;" $, parse (@expr1073743074 clang@var179 ) $) $) { $return ; }
1003: }
1004:
1005: void vardecl4 ( ) {
1006: const char clang@var180 [@expr1073743075 70 ] =@expr1073743076 "|-VarDecl 0x23d6c78 <line:137:1, col:14> col:14 stdin 'FILE *' extern" ;
1007: $if $(@expr1073743077 $!@expr1073743078 $assertEquals $(@expr1073743079 "cppcheck-2.8/test/testclangimport.cpp" $, 1007 $, "FILE * stdin@1 ;" $, parse (@expr1073743080 clang@var180 ) $) $) { $return ; }
1008: }
1009:
1010: void vardecl5 ( ) {
1011: const char clang@var181 [@expr1073743081 89 ] =@expr1073743082 "|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern" ;
1012: $if $(@expr1073743083 $!@expr1073743084 $assertEquals $(@expr1073743085 "cppcheck-2.8/test/testclangimport.cpp" $, 1012 $, "const char * const [] sys_errlist@1 ;" $, parse (@expr1073743086 clang@var181 ) $) $) { $return ; }
1013: }
1014:
1015: void vardecl6 ( ) {
1016: const char clang@var182 [@expr1073743087 112 ] =@expr1073743088 "`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3"
1017: ;
1018: $if $(@expr1073743089 $!@expr1073743090 $assertEquals $(@expr1073743091 "cppcheck-2.8/test/testclangimport.cpp" $, 1018 $, "static int x@1 = 3 ;" $, parse (@expr1073743092 clang@var182 ) $) $) { $return ; }
1019: }
1020:
1021: void vardecl7 ( ) {
1022: const char clang@var183 [@expr1073743093 72 ] =@expr1073743094 "`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'" ;
1023: $if $(@expr1073743095 $!@expr1073743096 $assertEquals $(@expr1073743097 "cppcheck-2.8/test/testclangimport.cpp" $, 1023 $, "void * * start@1 ;" $, parse (@expr1073743098 clang@var183 ) $) $) { $return ; }
1024: }
1025:
1026: void whileStmt1 ( ) {
1027: const char clang@var184 [@expr1073743099 264 ] =@expr1073743100 "`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>"
1028:
|
1031:
1032: ;
1033: $if $(@expr1073743101 $!@expr1073743102 $assertEquals $(@expr1073743103 "cppcheck-2.8/test/testclangimport.cpp" $, 1033 $, "void foo ( ) { while ( 0 ) { ; } }" $, parse (@expr1073743104 clang@var184 ) $) $) { $return
1034: ; }
1035: }
1036:
1037: void whileStmt2 ( ) {
1038:
1039: const char clang@var185 [@expr1073743105 323 ] =@expr1073743106 "`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>"
1040:
|
1043:
1044: ;
1045: $if $(@expr1073743107 $!@expr1073743108 $assertEquals $(@expr1073743109 "cppcheck-2.8/test/testclangimport.cpp" $, 1045 $, "void foo ( ) { while ( 1 ) { } }" $, parse (@expr1073743110 clang@var185 ) $) $) { $return ; }
1046: }
1047:
|
1058:
1059: void tokenIndex ( ) {
1060: const char clang@var186 [@expr1073743111 110 ] =@expr1073743112 "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"
1061: ;
1062: $if $(@expr1073743113 $!@expr1073743114 $assertEquals $(@expr1073743115 "cppcheck-2.8/test/testclangimport.cpp" $, 1062 $, "void foo ( ) { }" $, parse (@expr1073743116 clang@var186 ) $) $) { $return ; }
1063:
1064: $Settings $settings@var187 $; $settings@var187 $.@expr1073743117 $clang@var188 $=@expr1073743118 $true $; $settings@var187 $.@expr1073743119 $platform $(@expr1073743120 $cppcheck $::@expr1073743121 $Platform $::@expr1073743122 $PlatformType $::@expr1073743123 $Unix64 $) $; $Tokenizer $tokenizer@var189 $(@expr1073743124 $&@expr1073743125 $settings@var187 $, $this@expr1073743126 $) $; $std $::@expr1073743127 $istringstream $istr@var190 $(@expr1073743128 clang@var186 $) $; $clangimport $::@expr1073743129 $parseClangAstDump $(@expr1073743130 $&@expr1073743131 $tokenizer@var189 $, $istr@var190 $) $; $const $SymbolDatabase $* $db@var191 $; $db@var191 $=@expr1073743132 $tokenizer@var189 $.@expr1073743133 $getSymbolDatabase $(@expr1073743134 $) $; $if $(@expr1073743135 $!@expr1073743136 $assert_ $(@expr1073743137 "cppcheck-2.8/test/testclangimport.cpp" $, 1064 $, $db@var191 $) $) { $return ; }
1065: const Token * tok@var192 ; tok@var192 =@expr1073743138 tokenizer@var189 .@expr1073743139 tokens (@expr1073743140 ) ;
1066: $if $(@expr1073743141 $!@expr1073743142 $assertEquals $(@expr1073743143 "cppcheck-2.8/test/testclangimport.cpp" $, 1066 $, tok@var192 .@expr1073743144 index (@expr1073743145 ) +@expr1073743146 1 $, tok@var192 .@expr1073743147 next (@expr1073743148 ) .@expr1073743149 index (@expr1073743150 ) $) $) { $return ; }
1067: }
1068:
1069: void symbolDatabaseEnum1 ( ) {
1070: const char clang@var193 [@expr1073743153 482 ] =@expr1073743154 "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"
1071:
|
1075:
1076: ;
1077:
1078: $if $(@expr1073743155 $!@expr1073743156 $assertEquals $(@expr1073743157 "cppcheck-2.8/test/testclangimport.cpp" $, 1078 $, "namespace ns { enum abc { a , b , c } } ns :: abc x@1 = c ;" $, parse (@expr1073743158 clang@var193 ) $) $) { $return ; }
1079:
1080: $Settings $settings@var194 $; $settings@var194 $.@expr1073743159 $clang@var195 $=@expr1073743160 $true $; $settings@var194 $.@expr1073743161 $platform $(@expr1073743162 $cppcheck $::@expr1073743163 $Platform $::@expr1073743164 $PlatformType $::@expr1073743165 $Unix64 $) $; $Tokenizer $tokenizer@var196 $(@expr1073743166 $&@expr1073743167 $settings@var194 $, $this@expr1073743168 $) $; $std $::@expr1073743169 $istringstream $istr@var197 $(@expr1073743170 clang@var193 $) $; $clangimport $::@expr1073743171 $parseClangAstDump $(@expr1073743172 $&@expr1073743173 $tokenizer@var196 $, $istr@var197 $) $; $const $SymbolDatabase $* $db@var198 $; $db@var198 $=@expr1073743174 $tokenizer@var196 $.@expr1073743175 $getSymbolDatabase $(@expr1073743176 $) $; $if $(@expr1073743177 $!@expr1073743178 $assert_ $(@expr1073743179 "cppcheck-2.8/test/testclangimport.cpp" $, 1080 $, $db@var198 $) $) { $return ; }
1081:
1082:
1083: $if $(@expr1073743180 $!@expr1073743181 $assertEquals $(@expr1073743182 "cppcheck-2.8/test/testclangimport.cpp" $, 1083 $, 3 $, db@var198 .@expr1359 scopeList@var199 .@expr1073743184 size (@expr1073743185 ) $) $) { $return ; }
1084: const Scope &@expr1073743186 enumScope@var200 =@expr1073743187 db@var198 .@expr1359 scopeList@var199 .@expr1073743189 back (@expr1073743190 ) ;
1085: $if $(@expr1073743191 $!@expr1073743192 $assertEquals $(@expr1073743193 "cppcheck-2.8/test/testclangimport.cpp" $, 1085 $, Scope ::@expr1073743194 ScopeType ::@expr1073743195 eEnum@expr1073743151 $, enumScope@var200 .@expr1073743196 type@var201 $) $) { $return ; }
1086: $if $(@expr1073743197 $!@expr1073743198 $assertEquals $(@expr1073743199 "cppcheck-2.8/test/testclangimport.cpp" $, 1086 $, "abc" $, enumScope@var200 .@expr1073743200 className@var202 $) $) { $return ; }
1087: const Type * enumType@var203 ; enumType@var203 =@expr1073743201 enumScope@var200 .@expr1073743202 definedType@var204 ;
1088: $if $(@expr1073743203 $!@expr1073743204 $assertEquals $(@expr1073743205 "cppcheck-2.8/test/testclangimport.cpp" $, 1088 $, "abc" $, enumType@var203 .@expr1073743206 name (@expr1073743207 ) $) $) { $return ; }
1089:
1090:
1091: const Token * vartok@var205 ; vartok@var205 =@expr1073743208 Token ::@expr1073743209 findsimplematch (@expr1073743210 tokenizer@var196 .@expr1073743211 tokens (@expr1073743212 ) , "x" ) ;
1092: $if $(@expr1073743213 $!@expr1073743214 $assert_ $(@expr1073743215 "cppcheck-2.8/test/testclangimport.cpp" $, 1092 $, vartok@var205 $) $) { $return ; }
1093: $if $(@expr1073743216 $!@expr1073743217 $assert_ $(@expr1073743218 "cppcheck-2.8/test/testclangimport.cpp" $, 1093 $, vartok@var205 .@expr1395 variable (@expr1396 ) $) $) { $return ; }
1094: $if $(@expr1073743221 $!@expr1073743222 $assert_ $(@expr1073743223 "cppcheck-2.8/test/testclangimport.cpp" $, 1094 $, vartok@var205 .@expr1395 variable (@expr1396 ) .@expr1402 valueType (@expr1403 ) $) $) { $return ; }
1095: $if $(@expr1073743228 $!@expr1073743229 $assertEquals $(@expr1073743230 "cppcheck-2.8/test/testclangimport.cpp" $, 1095 $, unsigned long (@expr1073743231 &@expr1073743232 enumScope@var200 ) $, unsigned long (@expr1073743233 vartok@var205 .@expr1395 variable (@expr1396 ) .@expr1402 valueType (@expr1403 ) .@expr1073743238 typeScope@expr1073743152 ) $) $) { $return ; }
1096: }
1097:
1098: void symbolDatabaseFunction1 ( ) {
1099: const char clang@var206 [@expr1073743242 231 ] =@expr1073743243 "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n  |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 x 'int'\n  |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 y 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
1100:
1101:
1102: ;
1103:
1104: $Settings $settings@var207 $; $settings@var207 $.@expr1073743244 $clang@var208 $=@expr1073743245 $true $; $settings@var207 $.@expr1073743246 $platform $(@expr1073743247 $cppcheck $::@expr1073743248 $Platform $::@expr1073743249 $PlatformType $::@expr1073743250 $Unix64 $) $; $Tokenizer $tokenizer@var209 $(@expr1073743251 $&@expr1073743252 $settings@var207 $, $this@expr1073743253 $) $; $std $::@expr1073743254 $istringstream $istr@var210 $(@expr1073743255 clang@var206 $) $; $clangimport $::@expr1073743256 $parseClangAstDump $(@expr1073743257 $&@expr1073743258 $tokenizer@var209 $, $istr@var210 $) $; $const $SymbolDatabase $* $db@var211 $; $db@var211 $=@expr1073743259 $tokenizer@var209 $.@expr1073743260 $getSymbolDatabase $(@expr1073743261 $) $; $if $(@expr1073743262 $!@expr1073743263 $assert_ $(@expr1073743264 "cppcheck-2.8/test/testclangimport.cpp" $, 1104 $, $db@var211 $) $) { $return ; }
1105:
1106:
1107: $if $(@expr1073743265 $!@expr1073743266 $assertEquals $(@expr1073743267 "cppcheck-2.8/test/testclangimport.cpp" $, 1107 $, 1 $, db@var211 .@expr1444 functionScopes@var212 .@expr1073743269 size (@expr1073743270 ) $) $) { $return ; }
1108: const Scope * scope@var213 ; scope@var213 =@expr1073743271 db@var211 .@expr1444 functionScopes@var212 [@expr1073743273 0 ] ;
1109: const Function * func@var214 ; func@var214 =@expr1073743274 scope@var213 .@expr1073743275 function@var215 ;
1110: $if $(@expr1073743276 $!@expr1073743277 $assertEquals $(@expr1073743278 "cppcheck-2.8/test/testclangimport.cpp" $, 1110 $, 2 $, func@var214 .@expr1073743279 argCount (@expr1073743280 ) $) $) { $return ; }
1111: $if $(@expr1073743281 $!@expr1073743282 $assertEquals $(@expr1073743283 "cppcheck-2.8/test/testclangimport.cpp" $, 1111 $, "x" $, func@var214 .@expr1460 getArgumentVar (@expr1461 0 ) .@expr1073743286 name (@expr1073743287 ) $) $) { $return ; }
1112: $if $(@expr1073743288 $!@expr1073743289 $assertEquals $(@expr1073743290 "cppcheck-2.8/test/testclangimport.cpp" $, 1112 $, "y" $, func@var214 .@expr1460 getArgumentVar (@expr1468 1 ) .@expr1073743293 name (@expr1073743294 ) $) $) { $return ; }
1113: $if $(@expr1073743295 $!@expr1073743296 $assertEquals $(@expr1073743297 "cppcheck-2.8/test/testclangimport.cpp" $, 1113 $, ValueType ::@expr1474 Type ::@expr1475 INT@expr1415 $, func@var214 .@expr1460 getArgumentVar (@expr1461 0 ) .@expr1073743302 valueType (@expr1073743303 ) .@expr1073743304 type@expr1073743240 $) $) { $return ; }
1114: $if $(@expr1073743305 $!@expr1073743306 $assertEquals $(@expr1073743307 "cppcheck-2.8/test/testclangimport.cpp" $, 1114 $, ValueType ::@expr1474 Type ::@expr1475 INT@expr1415 $, func@var214 .@expr1460 getArgumentVar (@expr1468 1 ) .@expr1073743312 valueType (@expr1073743313 ) .@expr1073743314 type@expr1073743241 $) $) { $return ; }
1115: }
1116:
1117: void symbolDatabaseFunction2 ( ) {
1118: const char clang@var216 [@expr1073743315 227 ] =@expr1073743316 "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n| |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 'int'\n| |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
1119:
1120:
1121: ;
1122:
1123: $Settings $settings@var217 $; $settings@var217 $.@expr1073743317 $clang@var218 $=@expr1073743318 $true $; $settings@var217 $.@expr1073743319 $platform $(@expr1073743320 $cppcheck $::@expr1073743321 $Platform $::@expr1073743322 $PlatformType $::@expr1073743323 $Unix64 $) $; $Tokenizer $tokenizer@var219 $(@expr1073743324 $&@expr1073743325 $settings@var217 $, $this@expr1073743326 $) $; $std $::@expr1073743327 $istringstream $istr@var220 $(@expr1073743328 clang@var216 $) $; $clangimport $::@expr1073743329 $parseClangAstDump $(@expr1073743330 $&@expr1073743331 $tokenizer@var219 $, $istr@var220 $) $; $const $SymbolDatabase $* $db@var221 $; $db@var221 $=@expr1073743332 $tokenizer@var219 $.@expr1073743333 $getSymbolDatabase $(@expr1073743334 $) $; $if $(@expr1073743335 $!@expr1073743336 $assert_ $(@expr1073743337 "cppcheck-2.8/test/testclangimport.cpp" $, 1123 $, $db@var221 $) $) { $return ; }
1124:
1125:
1126: $if $(@expr1073743338 $!@expr1073743339 $assertEquals $(@expr1073743340 "cppcheck-2.8/test/testclangimport.cpp" $, 1126 $, 1 $, db@var221 .@expr1517 functionScopes@var222 .@expr1073743342 size (@expr1073743343 ) $) $) { $return ; }
1127: const Scope * scope@var223 ; scope@var223 =@expr1073743344 db@var221 .@expr1517 functionScopes@var222 [@expr1073743346 0 ] ;
1128: const Function * func@var224 ; func@var224 =@expr1073743347 scope@var223 .@expr1073743348 function@var225 ;
1129: $if $(@expr1073743349 $!@expr1073743350 $assertEquals $(@expr1073743351 "cppcheck-2.8/test/testclangimport.cpp" $, 1129 $, 2 $, func@var224 .@expr1073743352 argCount (@expr1073743353 ) $) $) { $return ; }
1130: $if $(@expr1073743354 $!@expr1073743355 $assertEquals $(@expr1073743356 "cppcheck-2.8/test/testclangimport.cpp" $, 1130 $, 0 $, (@expr1073743357 long long ) func@var224 .@expr1534 getArgumentVar (@expr1073743359 0 ) .@expr1073743360 nameToken (@expr1073743361 ) $) $) { $return ; }
1131: $if $(@expr1073743362 $!@expr1073743363 $assertEquals $(@expr1073743364 "cppcheck-2.8/test/testclangimport.cpp" $, 1131 $, 0 $, (@expr1073743365 long long ) func@var224 .@expr1534 getArgumentVar (@expr1073743367 1 ) .@expr1073743368 nameToken (@expr1073743369 ) $) $) { $return ; }
1132: }
1133:
1134: void symbolDatabaseFunction3 ( ) {
1135: const char clang@var226 [@expr1073743370 248 ] =@expr1073743371 "`-FunctionDecl 0x238fcd8 <9640.cpp:1:1, col:26> col:6 used bar 'bool (const char, int &)'\n  |-ParmVarDecl 0x238fb10 <col:10, col:16> col:20 'const char'\n  |-ParmVarDecl 0x238fbc0 <col:22, col:25> col:26 'int &'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
1136:
1137:
1138: ;
1139:
1140: $Settings $settings@var227 $; $settings@var227 $.@expr1073743372 $clang@var228 $=@expr1073743373 $true $; $settings@var227 $.@expr1073743374 $platform $(@expr1073743375 $cppcheck $::@expr1073743376 $Platform $::@expr1073743377 $PlatformType $::@expr1073743378 $Unix64 $) $; $Tokenizer $tokenizer@var229 $(@expr1073743379 $&@expr1073743380 $settings@var227 $, $this@expr1073743381 $) $; $std $::@expr1073743382 $istringstream $istr@var230 $(@expr1073743383 clang@var226 $) $; $clangimport $::@expr1073743384 $parseClangAstDump $(@expr1073743385 $&@expr1073743386 $tokenizer@var229 $, $istr@var230 $) $; $const $SymbolDatabase $* $db@var231 $; $db@var231 $=@expr1073743387 $tokenizer@var229 $.@expr1073743388 $getSymbolDatabase $(@expr1073743389 $) $; $if $(@expr1073743390 $!@expr1073743391 $assert_ $(@expr1073743392 "cppcheck-2.8/test/testclangimport.cpp" $, 1140 $, $db@var231 $) $) { $return ; }
1141:
1142:
1143: $if $(@expr1073743393 $!@expr1073743394 $assertEquals $(@expr1073743395 "cppcheck-2.8/test/testclangimport.cpp" $, 1143 $, 1 $, db@var231 .@expr1572 functionScopes@var232 .@expr1073743397 size (@expr1073743398 ) $) $) { $return ; }
1144: const Scope * scope@var233 ; scope@var233 =@expr1073743399 db@var231 .@expr1572 functionScopes@var232 [@expr1073743401 0 ] ;
1145: const Function * func@var234 ; func@var234 =@expr1073743402 scope@var233 .@expr1073743403 function@var235 ;
1146: $if $(@expr1073743404 $!@expr1073743405 $assertEquals $(@expr1073743406 "cppcheck-2.8/test/testclangimport.cpp" $, 1146 $, 2 $, func@var234 .@expr1073743407 argCount (@expr1073743408 ) $) $) { $return ; }
1147: $if $(@expr1073743409 $!@expr1073743410 $assertEquals $(@expr1073743411 "cppcheck-2.8/test/testclangimport.cpp" $, 1147 $, false $, func@var234 .@expr1588 getArgumentVar (@expr1073743413 0 ) .@expr1073743414 isReference (@expr1073743415 ) $) $) { $return ; }
1148: $if $(@expr1073743416 $!@expr1073743417 $assertEquals $(@expr1073743418 "cppcheck-2.8/test/testclangimport.cpp" $, 1148 $, true $, func@var234 .@expr1588 getArgumentVar (@expr1073743420 1 ) .@expr1073743421 isReference (@expr1073743422 ) $) $) { $return ; }
1149: }
1150:
1151: void symbolDatabaseFunctionConst ( ) {
1152: const char clang@var236 [@expr1073743423 147 ] =@expr1073743424 "`-CXXRecordDecl 0x7e2d98 <1.cpp:2:1, line:5:1> line:2:7 class foo definition\n  `-CXXMethodDecl 0x7e3000 <line:4:3, col:12> col:8 f 'void () const'"
1153: ;
1154:
1155: $Settings $settings@var237 $; $settings@var237 $.@expr1073743425 $clang@var238 $=@expr1073743426 $true $; $settings@var237 $.@expr1073743427 $platform $(@expr1073743428 $cppcheck $::@expr1073743429 $Platform $::@expr1073743430 $PlatformType $::@expr1073743431 $Unix64 $) $; $Tokenizer $tokenizer@var239 $(@expr1073743432 $&@expr1073743433 $settings@var237 $, $this@expr1073743434 $) $; $std $::@expr1073743435 $istringstream $istr@var240 $(@expr1073743436 clang@var236 $) $; $clangimport $::@expr1073743437 $parseClangAstDump $(@expr1073743438 $&@expr1073743439 $tokenizer@var239 $, $istr@var240 $) $; $const $SymbolDatabase $* $db@var241 $; $db@var241 $=@expr1073743440 $tokenizer@var239 $.@expr1073743441 $getSymbolDatabase $(@expr1073743442 $) $; $if $(@expr1073743443 $!@expr1073743444 $assert_ $(@expr1073743445 "cppcheck-2.8/test/testclangimport.cpp" $, 1155 $, $db@var241 $) $) { $return ; }
1156:
1157:
1158: $if $(@expr1073743446 $!@expr1073743447 $assertEquals $(@expr1073743448 "cppcheck-2.8/test/testclangimport.cpp" $, 1158 $, 2 $, db@var241 .@expr1625 scopeList@var242 .@expr1073743450 size (@expr1073743451 ) $) $) { $return ; }
1159: $if $(@expr1073743452 $!@expr1073743453 $assertEquals $(@expr1073743454 "cppcheck-2.8/test/testclangimport.cpp" $, 1159 $, 1 $, db@var241 .@expr1625 scopeList@var242 .@expr1632 back (@expr1633 ) .@expr1634 functionList .@expr1073743459 size (@expr1073743460 ) $) $) { $return ; }
1160: const Function &@expr1073743461 func@var243 =@expr1073743462 db@var241 .@expr1625 scopeList@var242 .@expr1632 back (@expr1633 ) .@expr1634 functionList .@expr1073743467 back (@expr1073743468 ) ;
1161: $if $(@expr1073743469 $!@expr1073743470 $assert_ $(@expr1073743471 "cppcheck-2.8/test/testclangimport.cpp" $, 1161 $, func@var243 .@expr1073743472 isConst (@expr1073743473 ) $) $) { $return ; }
1162: }
1163:
1164: void symbolDatabaseVariableRef ( ) {
1165: const char clang@var244 [@expr1073743474 407 ] =@expr1073743475 "`-FunctionDecl 0x1593df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x15940b0 <col:12, line:4:1>\n    |-DeclStmt 0x1593f58 <line:2:3, col:8>\n    | `-VarDecl 0x1593ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1594098 <line:3:3, col:15>\n      `-VarDecl 0x1593fb8 <col:3, col:14> col:8 ref 'int &' cinit\n        `-DeclRefExpr 0x1594020 <col:14> 'int' lvalue Var 0x1593ef0 'x' 'int'"
1166:
|
1170:
1171: ;
1172: $Settings $settings@var245 $; $settings@var245 $.@expr1073743476 $clang@var246 $=@expr1073743477 $true $; $settings@var245 $.@expr1073743478 $platform $(@expr1073743479 $cppcheck $::@expr1073743480 $Platform $::@expr1073743481 $PlatformType $::@expr1073743482 $Unix64 $) $; $Tokenizer $tokenizer@var247 $(@expr1073743483 $&@expr1073743484 $settings@var245 $, $this@expr1073743485 $) $; $std $::@expr1073743486 $istringstream $istr@var248 $(@expr1073743487 clang@var244 $) $; $clangimport $::@expr1073743488 $parseClangAstDump $(@expr1073743489 $&@expr1073743490 $tokenizer@var247 $, $istr@var248 $) $; $const $SymbolDatabase $* $db@var249 $; $db@var249 $=@expr1073743491 $tokenizer@var247 $.@expr1073743492 $getSymbolDatabase $(@expr1073743493 $) $; $if $(@expr1073743494 $!@expr1073743495 $assert_ $(@expr1073743496 "cppcheck-2.8/test/testclangimport.cpp" $, 1172 $, $db@var249 $) $) { $return ; }
1173: const Variable * refVar@var250 ; refVar@var250 =@expr1073743497 db@var249 .@expr1073743498 variableList (@expr1073743499 ) .@expr1073743500 back (@expr1073743501 ) ;
1174: $if $(@expr1073743502 $!@expr1073743503 $assert_ $(@expr1073743504 "cppcheck-2.8/test/testclangimport.cpp" $, 1174 $, refVar@var250 .@expr1073743505 isReference (@expr1073743506 ) $) $) { $return ; }
1175: }
1176:
1177: void symbolDatabaseVariableRRef ( ) {
1178: const char clang@var251 [@expr1073743507 801 ] =@expr1073743508 "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"
1179:
|
1188:
1189: ;
1190:
1191: $if $(@expr1073743509 $!@expr1073743510 $assertEquals $(@expr1073743511 "cppcheck-2.8/test/testclangimport.cpp" $, 1191 $, "void foo ( ) { int x@1 ; int && ref@2 = x@1 + 1 ; }" $, parse (@expr1073743512 clang@var251 ) $) $) { $return ; }
1192:
1193: $Settings $settings@var252 $; $settings@var252 $.@expr1073743513 $clang@var253 $=@expr1073743514 $true $; $settings@var252 $.@expr1073743515 $platform $(@expr1073743516 $cppcheck $::@expr1073743517 $Platform $::@expr1073743518 $PlatformType $::@expr1073743519 $Unix64 $) $; $Tokenizer $tokenizer@var254 $(@expr1073743520 $&@expr1073743521 $settings@var252 $, $this@expr1073743522 $) $; $std $::@expr1073743523 $istringstream $istr@var255 $(@expr1073743524 clang@var251 $) $; $clangimport $::@expr1073743525 $parseClangAstDump $(@expr1073743526 $&@expr1073743527 $tokenizer@var254 $, $istr@var255 $) $; $const $SymbolDatabase $* $db@var256 $; $db@var256 $=@expr1073743528 $tokenizer@var254 $.@expr1073743529 $getSymbolDatabase $(@expr1073743530 $) $; $if $(@expr1073743531 $!@expr1073743532 $assert_ $(@expr1073743533 "cppcheck-2.8/test/testclangimport.cpp" $, 1193 $, $db@var256 $) $) { $return ; }
1194: const Variable * refVar@var257 ; refVar@var257 =@expr1073743534 db@var256 .@expr1073743535 variableList (@expr1073743536 ) .@expr1073743537 back (@expr1073743538 ) ;
1195: $if $(@expr1073743539 $!@expr1073743540 $assert_ $(@expr1073743541 "cppcheck-2.8/test/testclangimport.cpp" $, 1195 $, refVar@var257 .@expr1073743542 isReference (@expr1073743543 ) $) $) { $return ; }
1196: $if $(@expr1073743544 $!@expr1073743545 $assert_ $(@expr1073743546 "cppcheck-2.8/test/testclangimport.cpp" $, 1196 $, refVar@var257 .@expr1073743547 isRValueReference (@expr1073743548 ) $) $) { $return ; }
1197: }
1198:
1199: void symbolDatabaseVariablePointerRef ( ) {
1200: const char clang@var258 [@expr1073743549 136 ] =@expr1073743550 "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"
1201: ;
1202:
1203: $if $(@expr1073743551 $!@expr1073743552 $assertEquals $(@expr1073743553 "cppcheck-2.8/test/testclangimport.cpp" $, 1203 $, "void foo ( int * & p@1 ) ;" $, parse (@expr1073743554 clang@var258 ) $) $) { $return ; }
1204:
1205: $Settings $settings@var259 $; $settings@var259 $.@expr1073743555 $clang@var260 $=@expr1073743556 $true $; $settings@var259 $.@expr1073743557 $platform $(@expr1073743558 $cppcheck $::@expr1073743559 $Platform $::@expr1073743560 $PlatformType $::@expr1073743561 $Unix64 $) $; $Tokenizer $tokenizer@var261 $(@expr1073743562 $&@expr1073743563 $settings@var259 $, $this@expr1073743564 $) $; $std $::@expr1073743565 $istringstream $istr@var262 $(@expr1073743566 clang@var258 $) $; $clangimport $::@expr1073743567 $parseClangAstDump $(@expr1073743568 $&@expr1073743569 $tokenizer@var261 $, $istr@var262 $) $; $const $SymbolDatabase $* $db@var263 $; $db@var263 $=@expr1073743570 $tokenizer@var261 $.@expr1073743571 $getSymbolDatabase $(@expr1073743572 $) $; $if $(@expr1073743573 $!@expr1073743574 $assert_ $(@expr1073743575 "cppcheck-2.8/test/testclangimport.cpp" $, 1205 $, $db@var263 $) $) { $return ; }
1206: const Variable * p@var264 ; p@var264 =@expr1073743576 db@var263 .@expr1073743577 variableList (@expr1073743578 ) .@expr1073743579 back (@expr1073743580 ) ;
1207: $if $(@expr1073743581 $!@expr1073743582 $assert_ $(@expr1073743583 "cppcheck-2.8/test/testclangimport.cpp" $, 1207 $, p@var264 .@expr1073743584 isPointer (@expr1073743585 ) $) $) { $return ; }
1208: $if $(@expr1073743586 $!@expr1073743587 $assert_ $(@expr1073743588 "cppcheck-2.8/test/testclangimport.cpp" $, 1208 $, p@var264 .@expr1073743589 isReference (@expr1073743590 ) $) $) { $return ; }
1209: }
1210:
1211: void symbolDatabaseNodeType1 ( ) {
1212: const char clang@var265 [@expr1073743591 597 ] =@expr1073743592 "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-BinaryOperator 0x3243a20 <col:10, col:12> 'long' '+'\n        |-ImplicitCastExpr 0x32439f0 <col:10> 'a::b':'long' <LValueToRValue>\n        | `-DeclRefExpr 0x32439a8 <col:10> 'a::b':'long' lvalue ParmVar 0x32437b0 'i' 'a::b':'long'\n        `-ImplicitCastExpr 0x3243a08 <col:12> 'long' <IntegralCast>\n          `-IntegerLiteral 0x32439d0 <col:12> 'int' 1\n"
1213:
|
1219:
1220: ;
1221:
1222: $Settings $settings@var266 $; $settings@var266 $.@expr1073743593 $clang@var267 $=@expr1073743594 $true $; $settings@var266 $.@expr1073743595 $platform $(@expr1073743596 $cppcheck $::@expr1073743597 $Platform $::@expr1073743598 $PlatformType $::@expr1073743599 $Unix64 $) $; $Tokenizer $tokenizer@var268 $(@expr1073743600 $&@expr1073743601 $settings@var266 $, $this@expr1073743602 $) $; $std $::@expr1073743603 $istringstream $istr@var269 $(@expr1073743604 clang@var265 $) $; $clangimport $::@expr1073743605 $parseClangAstDump $(@expr1073743606 $&@expr1073743607 $tokenizer@var268 $, $istr@var269 $) $; $const $SymbolDatabase $* $db@var270 $; $db@var270 $=@expr1073743608 $tokenizer@var268 $.@expr1073743609 $getSymbolDatabase $(@expr1073743610 $) $; $if $(@expr1073743611 $!@expr1073743612 $assert_ $(@expr1073743613 "cppcheck-2.8/test/testclangimport.cpp" $, 1222 $, $db@var270 $) $) { $return ; }
1223:
1224: const Token * tok@var271 ; tok@var271 =@expr1073743614 Token ::@expr1073743615 findsimplematch (@expr1073743616 tokenizer@var268 .@expr1073743617 tokens (@expr1073743618 ) , "i + 1" ) ;
1225: $if $(@expr1073743619 $!@expr1073743620 $assert_ $(@expr1073743621 "cppcheck-2.8/test/testclangimport.cpp" $, 1225 $, !@expr1073743622 !@expr1073743623 tok@var271 $) $) { $return ; }
1226: $if $(@expr1073743624 $!@expr1073743625 $assert_ $(@expr1073743626 "cppcheck-2.8/test/testclangimport.cpp" $, 1226 $, !@expr1073743627 !@expr1073743628 tok@var271 .@expr1805 valueType (@expr1806 ) $) $) { $return ; }
1227: $if $(@expr1073743631 $!@expr1073743632 $assertEquals $(@expr1073743633 "cppcheck-2.8/test/testclangimport.cpp" $, 1227 $, "signed long" $, tok@var271 .@expr1805 valueType (@expr1806 ) .@expr1073743636 str (@expr1073743637 ) $) $) { $return ; }
1228: }
1229:
1230: void symbolDatabaseForVariable ( ) {
1231: const char clang@var272 [@expr1073743640 432 ] =@expr1073743641 "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"
1232:
|
1239:
1240: ;
1241:
1242: $if $(@expr1073743642 $!@expr1073743643 $assertEquals $(@expr1073743644 "cppcheck-2.8/test/testclangimport.cpp" $, 1242 $, "void f ( ) { for ( int i@1 = 0 ; ; ) { } }" $, parse (@expr1073743645 clang@var272 ) $) $) { $return ; }
1243:
1244: $Settings $settings@var273 $; $settings@var273 $.@expr1073743646 $clang@var274 $=@expr1073743647 $true $; $settings@var273 $.@expr1073743648 $platform $(@expr1073743649 $cppcheck $::@expr1073743650 $Platform $::@expr1073743651 $PlatformType $::@expr1073743652 $Unix64 $) $; $Tokenizer $tokenizer@var275 $(@expr1073743653 $&@expr1073743654 $settings@var273 $, $this@expr1073743655 $) $; $std $::@expr1073743656 $istringstream $istr@var276 $(@expr1073743657 clang@var272 $) $; $clangimport $::@expr1073743658 $parseClangAstDump $(@expr1073743659 $&@expr1073743660 $tokenizer@var275 $, $istr@var276 $) $; $const $SymbolDatabase $* $db@var277 $; $db@var277 $=@expr1073743661 $tokenizer@var275 $.@expr1073743662 $getSymbolDatabase $(@expr1073743663 $) $; $if $(@expr1073743664 $!@expr1073743665 $assert_ $(@expr1073743666 "cppcheck-2.8/test/testclangimport.cpp" $, 1244 $, $db@var277 $) $) { $return ; }
1245:
1246: const Token * tok@var278 ; tok@var278 =@expr1073743667 Token ::@expr1073743668 findsimplematch (@expr1073743669 tokenizer@var275 .@expr1073743670 tokens (@expr1073743671 ) , "i" ) ;
1247: $if $(@expr1073743672 $!@expr1073743673 $assert_ $(@expr1073743674 "cppcheck-2.8/test/testclangimport.cpp" $, 1247 $, !@expr1073743675 !@expr1073743676 tok@var278 $) $) { $return ; }
1248: $if $(@expr1073743677 $!@expr1073743678 $assert_ $(@expr1073743679 "cppcheck-2.8/test/testclangimport.cpp" $, 1248 $, !@expr1073743680 !@expr1073743681 tok@var278 .@expr1858 variable (@expr1859 ) $) $) { $return ; }
1249: $if $(@expr1073743684 $!@expr1073743685 $assertEquals $(@expr1073743686 "cppcheck-2.8/test/testclangimport.cpp" $, 1249 $, Scope ::@expr1073743687 ScopeType ::@expr1073743688 eFor@expr1073743638 $, tok@var278 .@expr1858 variable (@expr1859 ) .@expr1073743691 scope (@expr1073743692 ) .@expr1073743693 type@expr1073743639 $) $) { $return ; }
1250: }
1251:
1252: void valueFlow1 ( ) {
1253:
1254: const char clang@var279 [@expr1073743694 424 ] =@expr1073743695 "|-RecordDecl 0x2fc5a88 <1.c:1:1, line:4:1> line:1:8 struct S definition\n| |-FieldDecl 0x2fc5b48 <line:2:3, col:7> col:7 x 'int'\n| `-FieldDecl 0x2fc5c10 <line:3:3, col:13> col:7 buf 'int [10]'\n`-VarDecl 0x2fc5c70 <line:6:1, col:25> col:5 sz 'int' cinit\n  `-ImplicitCastExpr 0x2fc5d88 <col:10, col:25> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x2fc5d68 <col:10, col:25> 'unsigned long' sizeof 'struct S':'struct S'"
1255:
|
1258:
1259: ;
1260: $Settings $settings@var280 $; $settings@var280 $.@expr1073743696 $clang@var281 $=@expr1073743697 $true $; $settings@var280 $.@expr1073743698 $platform $(@expr1073743699 $cppcheck $::@expr1073743700 $Platform $::@expr1073743701 $PlatformType $::@expr1073743702 $Unix64 $) $; $Tokenizer $tokenizer@var282 $(@expr1073743703 $&@expr1073743704 $settings@var280 $, $this@expr1073743705 $) $; $std $::@expr1073743706 $istringstream $istr@var283 $(@expr1073743707 clang@var279 $) $; $clangimport $::@expr1073743708 $parseClangAstDump $(@expr1073743709 $&@expr1073743710 $tokenizer@var282 $, $istr@var283 $) $; $const $SymbolDatabase $* $db@var284 $; $db@var284 $=@expr1073743711 $tokenizer@var282 $.@expr1073743712 $getSymbolDatabase $(@expr1073743713 $) $; $if $(@expr1073743714 $!@expr1073743715 $assert_ $(@expr1073743716 "cppcheck-2.8/test/testclangimport.cpp" $, 1260 $, $db@var284 $) $) { $return ; }
1261:
1262: const Token * tok@var285 ; tok@var285 =@expr1073743717 Token ::@expr1073743718 findsimplematch (@expr1073743719 tokenizer@var282 .@expr1073743720 tokens (@expr1073743721 ) , "sizeof (" ) ;
1263: $if $(@expr1073743722 $!@expr1073743723 $assert_ $(@expr1073743724 "cppcheck-2.8/test/testclangimport.cpp" $, 1263 $, !@expr1073743725 !@expr1073743726 tok@var285 $) $) { $return ; }
1264: tok@var285 =@expr1073743727 tok@var285 .@expr1073743728 next (@expr1073743729 ) ;
1265: $if $(@expr1073743730 $!@expr1073743731 $assert_ $(@expr1073743732 "cppcheck-2.8/test/testclangimport.cpp" $, 1265 $, tok@var285 .@expr1073743733 hasKnownIntValue (@expr1073743734 ) $) $) { $return ; }
1266: $if $(@expr1073743735 $!@expr1073743736 $assertEquals $(@expr1073743737 "cppcheck-2.8/test/testclangimport.cpp" $, 1266 $, 44 $, tok@var285 .@expr1073743738 getKnownIntValue (@expr1073743739 ) $) $) { $return ; }
1267: }
1268:
1269: void valueFlow2 ( ) {
1270:
1271:
1272: const char clang@var286 [@expr1073743740 457 ] =@expr1073743741 "|-VarDecl 0x10f6de8 <66.cpp:3:1, col:11> col:5 referenced buf 'int [42]'\n`-VarDecl 0x10f6eb0 <line:4:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x10f6f78 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x10f6f58 <col:9, col:19> 'unsigned long' sizeof\n      `-ParenExpr 0x10f6f38 <col:15, col:19> 'int [42]' lvalue\n        `-DeclRefExpr 0x10f6f18 <col:16> 'int [42]' lvalue Var 0x10f6de8 'buf' 'int [42]' non_odr_use_unevaluated"
1273:
|
1276:
1277: ;
1278:
1279: $Settings $settings@var287 $; $settings@var287 $.@expr1073743742 $clang@var288 $=@expr1073743743 $true $; $settings@var287 $.@expr1073743744 $platform $(@expr1073743745 $cppcheck $::@expr1073743746 $Platform $::@expr1073743747 $PlatformType $::@expr1073743748 $Unix64 $) $; $Tokenizer $tokenizer@var289 $(@expr1073743749 $&@expr1073743750 $settings@var287 $, $this@expr1073743751 $) $; $std $::@expr1073743752 $istringstream $istr@var290 $(@expr1073743753 clang@var286 $) $; $clangimport $::@expr1073743754 $parseClangAstDump $(@expr1073743755 $&@expr1073743756 $tokenizer@var289 $, $istr@var290 $) $; $const $SymbolDatabase $* $db@var291 $; $db@var291 $=@expr1073743757 $tokenizer@var289 $.@expr1073743758 $getSymbolDatabase $(@expr1073743759 $) $; $if $(@expr1073743760 $!@expr1073743761 $assert_ $(@expr1073743762 "cppcheck-2.8/test/testclangimport.cpp" $, 1279 $, $db@var291 $) $) { $return ; }
1280:
1281: const Token * tok@var292 ; tok@var292 =@expr1073743763 Token ::@expr1073743764 findsimplematch (@expr1073743765 tokenizer@var289 .@expr1073743766 tokens (@expr1073743767 ) , "sizeof (" ) ;
1282: $if $(@expr1073743768 $!@expr1073743769 $assert_ $(@expr1073743770 "cppcheck-2.8/test/testclangimport.cpp" $, 1282 $, !@expr1073743771 !@expr1073743772 tok@var292 $) $) { $return ; }
1283: tok@var292 =@expr1073743773 tok@var292 .@expr1073743774 next (@expr1073743775 ) ;
1284:
1285:
1286: }
1287:
1288: void valueType1 ( ) {
1289: const char clang@var293 [@expr1073743776 451 ] =@expr1073743777 "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-ImplicitCastExpr 0x2176ca8 <col:9> 'int' <IntegralCast>\n        `-ImplicitCastExpr 0x2176c90 <col:9> 'bool' <LValueToRValue>\n          `-DeclRefExpr 0x2176c60 <col:9> 'bool' lvalue Var 0x2176bd0 'e' 'bool'\n"
1290:
|
1294:
1295: ;
1296:
1297: $Settings $settings@var294 $; $settings@var294 $.@expr1073743778 $clang@var295 $=@expr1073743779 $true $; $settings@var294 $.@expr1073743780 $platform $(@expr1073743781 $cppcheck $::@expr1073743782 $Platform $::@expr1073743783 $PlatformType $::@expr1073743784 $Unix64 $) $; $Tokenizer $tokenizer@var296 $(@expr1073743785 $&@expr1073743786 $settings@var294 $, $this@expr1073743787 $) $; $std $::@expr1073743788 $istringstream $istr@var297 $(@expr1073743789 clang@var293 $) $; $clangimport $::@expr1073743790 $parseClangAstDump $(@expr1073743791 $&@expr1073743792 $tokenizer@var296 $, $istr@var297 $) $; $const $SymbolDatabase $* $db@var298 $; $db@var298 $=@expr1073743793 $tokenizer@var296 $.@expr1073743794 $getSymbolDatabase $(@expr1073743795 $) $; $if $(@expr1073743796 $!@expr1073743797 $assert_ $(@expr1073743798 "cppcheck-2.8/test/testclangimport.cpp" $, 1297 $, $db@var298 $) $) { $return ; }
1298:
1299: const Token * tok@var299 ; tok@var299 =@expr1073743799 Token ::@expr1073743800 findsimplematch (@expr1073743801 tokenizer@var296 .@expr1073743802 tokens (@expr1073743803 ) , "e" ) ;
1300: $if $(@expr1073743804 $!@expr1073743805 $assert_ $(@expr1073743806 "cppcheck-2.8/test/testclangimport.cpp" $, 1300 $, !@expr1073743807 !@expr1073743808 tok@var299 $) $) { $return ; }
1301: $if $(@expr1073743809 $!@expr1073743810 $assert_ $(@expr1073743811 "cppcheck-2.8/test/testclangimport.cpp" $, 1301 $, !@expr1073743812 !@expr1073743813 tok@var299 .@expr1990 valueType (@expr1991 ) $) $) { $return ; }
1302: $if $(@expr1073743816 $!@expr1073743817 $assertEquals $(@expr1073743818 "cppcheck-2.8/test/testclangimport.cpp" $, 1302 $, "bool" $, tok@var299 .@expr1990 valueType (@expr1991 ) .@expr1073743821 str (@expr1073743822 ) $) $) { $return ; }
1303: }
1304:
1305: void valueType2 ( ) {
1306: const char clang@var300 [@expr1073743823 216 ] =@expr1073743824 "`-VarDecl 0xc9eda0 <1.cpp:2:1, col:17> col:13 s 'const char *' cinit\n  `-ImplicitCastExpr 0xc9eef0 <col:17> 'const char *' <ArrayToPointerDecay>\n    `-StringLiteral 0xc9eed0 <col:17> 'const char [6]' lvalue \"hello\"\n"
1307:
1308: ;
1309:
1310: $Settings $settings@var301 $; $settings@var301 $.@expr1073743825 $clang@var302 $=@expr1073743826 $true $; $settings@var301 $.@expr1073743827 $platform $(@expr1073743828 $cppcheck $::@expr1073743829 $Platform $::@expr1073743830 $PlatformType $::@expr1073743831 $Unix64 $) $; $Tokenizer $tokenizer@var303 $(@expr1073743832 $&@expr1073743833 $settings@var301 $, $this@expr1073743834 $) $; $std $::@expr1073743835 $istringstream $istr@var304 $(@expr1073743836 clang@var300 $) $; $clangimport $::@expr1073743837 $parseClangAstDump $(@expr1073743838 $&@expr1073743839 $tokenizer@var303 $, $istr@var304 $) $; $const $SymbolDatabase $* $db@var305 $; $db@var305 $=@expr1073743840 $tokenizer@var303 $.@expr1073743841 $getSymbolDatabase $(@expr1073743842 $) $; $if $(@expr1073743843 $!@expr1073743844 $assert_ $(@expr1073743845 "cppcheck-2.8/test/testclangimport.cpp" $, 1310 $, $db@var305 $) $) { $return ; }
1311:
1312: const Token * tok@var306 ; tok@var306 =@expr1073743846 Token ::@expr1073743847 findsimplematch (@expr1073743848 tokenizer@var303 .@expr1073743849 tokens (@expr1073743850 ) , "\"hello\"" ) ;
1313: $if $(@expr1073743851 $!@expr1073743852 $assert_ $(@expr1073743853 "cppcheck-2.8/test/testclangimport.cpp" $, 1313 $, !@expr1073743854 !@expr1073743855 tok@var306 $) $) { $return ; }
1314: $if $(@expr1073743856 $!@expr1073743857 $assert_ $(@expr1073743858 "cppcheck-2.8/test/testclangimport.cpp" $, 1314 $, !@expr1073743859 !@expr1073743860 tok@var306 .@expr2037 valueType (@expr2038 ) $) $) { $return ; }
1315: $if $(@expr1073743863 $!@expr1073743864 $assertEquals $(@expr1073743865 "cppcheck-2.8/test/testclangimport.cpp" $, 1315 $, "const signed char *" $, tok@var306 .@expr2037 valueType (@expr2038 ) .@expr1073743868 str (@expr1073743869 ) $) $) { $return ; }
1316: }
1317: } ;
1318:
1319: $namespace ${ TestClangImport instance_TestClangImport@var307 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@85}
  v {!<=-1,!>=2,0@85}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 36
  "TestClangImport" always "TestClangImport"
Line 41
  ( always {!<=-1,!>=2}
  "breakStmt" always "breakStmt"
  false always 0
  false always 0
Line 42
  ( always {!<=-1,!>=2}
  "callExpr" always "callExpr"
  false always 0
  false always 0
Line 43
  ( always {!<=-1,!>=2}
  "caseStmt1" always "caseStmt1"
  false always 0
  false always 0
Line 44
  ( always {!<=-1,!>=2}
  "characterLiteral" always "characterLiteral"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "class1" always "class1"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "classTemplateDecl1" always "classTemplateDecl1"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "classTemplateDecl2" always "classTemplateDecl2"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "conditionalExpr" always "conditionalExpr"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "compoundAssignOperator" always "compoundAssignOperator"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "continueStmt" always "continueStmt"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "cstyleCastExpr" always "cstyleCastExpr"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "cxxBoolLiteralExpr" always "cxxBoolLiteralExpr"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "cxxConstructorDecl1" always "cxxConstructorDecl1"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "cxxConstructorDecl2" always "cxxConstructorDecl2"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "cxxConstructExpr1" always "cxxConstructExpr1"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "cxxConstructExpr2" always "cxxConstructExpr2"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "cxxConstructExpr3" always "cxxConstructExpr3"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "cxxDeleteExpr" always "cxxDeleteExpr"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "cxxDestructorDecl" always "cxxDestructorDecl"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "cxxForRangeStmt1" always "cxxForRangeStmt1"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "cxxForRangeStmt2" always "cxxForRangeStmt2"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "cxxFunctionalCastExpr" always "cxxFunctionalCastExpr"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "cxxMemberCall" always "cxxMemberCall"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "cxxMethodDecl1" always "cxxMethodDecl1"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "cxxMethodDecl2" always "cxxMethodDecl2"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "cxxMethodDecl3" always "cxxMethodDecl3"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "cxxMethodDecl4" always "cxxMethodDecl4"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "cxxNewExpr1" always "cxxNewExpr1"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "cxxNewExpr2" always "cxxNewExpr2"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "cxxNullPtrLiteralExpr" always "cxxNullPtrLiteralExpr"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "cxxOperatorCallExpr" always "cxxOperatorCallExpr"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "cxxRecordDecl1" always "cxxRecordDecl1"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "cxxRecordDecl2" always "cxxRecordDecl2"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "cxxRecordDeclDerived" always "cxxRecordDeclDerived"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "cxxStaticCastExpr1" always "cxxStaticCastExpr1"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "cxxStaticCastExpr2" always "cxxStaticCastExpr2"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "cxxStaticCastExpr3" always "cxxStaticCastExpr3"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "cxxStdInitializerListExpr" always "cxxStdInitializerListExpr"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "cxxThrowExpr" always "cxxThrowExpr"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "defaultStmt" always "defaultStmt"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "doStmt" always "doStmt"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "enumDecl1" always "enumDecl1"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "enumDecl2" always "enumDecl2"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "enumDecl3" always "enumDecl3"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "enumDecl4" always "enumDecl4"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "forStmt" always "forStmt"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "funcdecl1" always "funcdecl1"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "funcdecl2" always "funcdecl2"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "funcdecl3" always "funcdecl3"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "funcdecl4" always "funcdecl4"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "funcdecl5" always "funcdecl5"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "funcdecl6" always "funcdecl6"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "functionTemplateDecl1" always "functionTemplateDecl1"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "functionTemplateDecl2" always "functionTemplateDecl2"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "initListExpr" always "initListExpr"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "ifelse" always "ifelse"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "ifStmt" always "ifStmt"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "labelStmt" always "labelStmt"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "memberExpr" always "memberExpr"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "namespaceDecl1" always "namespaceDecl1"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "namespaceDecl2" always "namespaceDecl2"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "recordDecl1" always "recordDecl1"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "recordDecl2" always "recordDecl2"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "switchStmt" always "switchStmt"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "typedefDecl1" always "typedefDecl1"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "typedefDecl2" always "typedefDecl2"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "typedefDecl3" always "typedefDecl3"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "unaryExprOrTypeTraitExpr1" always "unaryExprOrTypeTraitExpr1"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "unaryExprOrTypeTraitExpr2" always "unaryExprOrTypeTraitExpr2"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "unaryOperator" always "unaryOperator"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "vardecl1" always "vardecl1"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "vardecl2" always "vardecl2"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "vardecl3" always "vardecl3"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "vardecl4" always "vardecl4"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "vardecl5" always "vardecl5"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "vardecl6" always "vardecl6"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "vardecl7" always "vardecl7"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "whileStmt1" always "whileStmt1"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "whileStmt2" always "whileStmt2"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "tokenIndex" always "tokenIndex"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "symbolDatabaseEnum1" always "symbolDatabaseEnum1"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "symbolDatabaseFunction1" always "symbolDatabaseFunction1"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "symbolDatabaseFunction2" always "symbolDatabaseFunction2"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "symbolDatabaseFunction3" always "symbolDatabaseFunction3"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "symbolDatabaseFunctionConst" always "symbolDatabaseFunctionConst"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "symbolDatabaseVariableRef" always "symbolDatabaseVariableRef"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "symbolDatabaseVariableRRef" always "symbolDatabaseVariableRRef"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "symbolDatabaseVariablePointerRef" always "symbolDatabaseVariablePointerRef"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "symbolDatabaseNodeType1" always "symbolDatabaseNodeType1"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "symbolDatabaseForVariable" always "symbolDatabaseForVariable"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "valueFlow1" always "valueFlow1"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "valueFlow2" always "valueFlow2"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "valueType1" always "valueType1"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "valueType2" always "valueType2"
  false always 0
  false always 0
Line 142
  = always 1
  true always 1
Line 143
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 144
  clang possible {"`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"@1,"`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"@2,"`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"@3,"|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"@4,"`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"@5,"`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>"@6,"`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>"@7,"`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'"@8,"`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3"@9,"|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern"@10}
Line 145
  & {lifetime[Address]=(tokenizer),!0}
Line 146
  ! always {!<=-1,!>=2}
Line 149
  true always 1
  false always 0
  false always 0
  false always 0
  false always 0
Line 153
  256 always 256
  = always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-BreakStmt 0x3687c18 <col:24>"
  "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-BreakStmt 0x3687c18 <col:24>" always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-BreakStmt 0x3687c18 <col:24>"
Line 159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  159 always 159
  "void foo ( ) { while ( 0 ) { break ; } }" always "void foo ( ) { while ( 0 ) { break ; } }"
  clang always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-BreakStmt 0x3687c18 <col:24>"
Line 163
  1038 always 1038
  = always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-CallExpr 0x7f5a6c04b158 <line:1:16, col:60> 'bool'\n      |-ImplicitCastExpr 0x7f5a6c04b140 <col:16, col:23> 'bool (*)(const Token *, const char *, int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x7f5a6c04b0a8 <col:16, col:23> 'bool (const Token *, const char *, int)' lvalue CXXMethod 0x43e5600 'Match' 'bool (const Token *, const char *, int)'\n      |-ImplicitCastExpr 0x7f5a6c04b1c8 <col:29> 'const Token *' <NoOp>\n      | `-ImplicitCastExpr 0x7f5a6c04b1b0 <col:29> 'Token *' <LValueToRValue>\n      |   `-DeclRefExpr 0x7f5a6c04b0e0 <col:29> 'Token *' lvalue Var 0x7f5a6c045968 'tokAfterCondition' 'Token *'\n      |-ImplicitCastExpr 0x7f5a6c04b1e0 <col:48> 'const char *' <ArrayToPointerDecay>\n      | `-StringLiteral 0x7f5a6c04b108 <col:48> 'const char [11]' lvalue \"%name% : {\"\n      `-CXXDefaultArgExpr 0x7f5a6c04b1f8 <<invalid sloc>> 'int'\n"
  "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-CallExpr 0x7f5a6c04b158 <line:1:16, col:60> 'bool'\n      |-ImplicitCastExpr 0x7f5a6c04b140 <col:16, col:23> 'bool (*)(const Token *, const char *, int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x7f5a6c04b0a8 <col:16, col:23> 'bool (const Token *, const char *, int)' lvalue CXXMethod 0x43e5600 'Match' 'bool (const Token *, const char *, int)'\n      |-ImplicitCastExpr 0x7f5a6c04b1c8 <col:29> 'const Token *' <NoOp>\n      | `-ImplicitCastExpr 0x7f5a6c04b1b0 <col:29> 'Token *' <LValueToRValue>\n      |   `-DeclRefExpr 0x7f5a6c04b0e0 <col:29> 'Token *' lvalue Var 0x7f5a6c045968 'tokAfterCondition' 'Token *'\n      |-ImplicitCastExpr 0x7f5a6c04b1e0 <col:48> 'const char *' <ArrayToPointerDecay>\n      | `-StringLiteral 0x7f5a6c04b108 <col:48> 'const char [11]' lvalue \"%name% : {\"\n      `-CXXDefaultArgExpr 0x7f5a6c04b1f8 <<invalid sloc>> 'int'\n" always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-CallExpr 0x7f5a6c04b158 <line:1:16, col:60> 'bool'\n      |-ImplicitCastExpr 0x7f5a6c04b140 <col:16, col:23> 'bool (*)(const Token *, const char *, int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x7f5a6c04b0a8 <col:16, col:23> 'bool (const Token *, const char *, int)' lvalue CXXMethod 0x43e5600 'Match' 'bool (const Token *, const char *, int)'\n      |-ImplicitCastExpr 0x7f5a6c04b1c8 <col:29> 'const Token *' <NoOp>\n      | `-ImplicitCastExpr 0x7f5a6c04b1b0 <col:29> 'Token *' <LValueToRValue>\n      |   `-DeclRefExpr 0x7f5a6c04b0e0 <col:29> 'Token *' lvalue Var 0x7f5a6c045968 'tokAfterCondition' 'Token *'\n      |-ImplicitCastExpr 0x7f5a6c04b1e0 <col:48> 'const char *' <ArrayToPointerDecay>\n      | `-StringLiteral 0x7f5a6c04b108 <col:48> 'const char [11]' lvalue \"%name% : {\"\n      `-CXXDefaultArgExpr 0x7f5a6c04b1f8 <<invalid sloc>> 'int'\n"
Line 175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  175 always 175
  "void foo ( int x@1 ) { Match ( tokAfterCondition , \"%name% : {\" ) ; }" always "void foo ( int x@1 ) { Match ( tokAfterCondition , \"%name% : {\" ) ; }"
  clang always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-CallExpr 0x7f5a6c04b158 <line:1:16, col:60> 'bool'\n      |-ImplicitCastExpr 0x7f5a6c04b140 <col:16, col:23> 'bool (*)(const Token *, const char *, int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x7f5a6c04b0a8 <col:16, col:23> 'bool (const Token *, const char *, int)' lvalue CXXMethod 0x43e5600 'Match' 'bool (const Token *, const char *, int)'\n      |-ImplicitCastExpr 0x7f5a6c04b1c8 <col:29> 'const Token *' <NoOp>\n      | `-ImplicitCastExpr 0x7f5a6c04b1b0 <col:29> 'Token *' <LValueToRValue>\n      |   `-DeclRefExpr 0x7f5a6c04b0e0 <col:29> 'Token *' lvalue Var 0x7f5a6c045968 'tokAfterCondition' 'Token *'\n      |-ImplicitCastExpr 0x7f5a6c04b1e0 <col:48> 'const char *' <ArrayToPointerDecay>\n      | `-StringLiteral 0x7f5a6c04b108 <col:48> 'const char [11]' lvalue \"%name% : {\"\n      `-CXXDefaultArgExpr 0x7f5a6c04b1f8 <<invalid sloc>> 'int'\n"
Line 179
  997 always 997
  = always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-SwitchStmt 0x2444c88 <line:2:5, line:7:5>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-ImplicitCastExpr 0x2444c70 <line:2:13> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x2444c48 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n      `-CompoundStmt 0x2444de0 <col:16, line:7:5>\n        |-CaseStmt 0x2444cd8 <line:3:9, line:5:15>\n        | |-IntegerLiteral 0x2444cb8 <line:3:14> 'int' 16\n        | |-<<<NULL>>>\n        | `-CaseStmt 0x2444d30 <line:4:9, line:5:15>\n        |   |-IntegerLiteral 0x2444d10 <line:4:14> 'int' 32\n        |   |-<<<NULL>>>\n        |   `-BinaryOperator 0x2444db0 <line:5:13, col:15> 'int' '='\n        |     |-DeclRefExpr 0x2444d68 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n        |     `-IntegerLiteral 0x2444d90 <col:15> 'int' 123\n        `-BreakStmt 0x2444dd8 <line:6:13>"
  "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-SwitchStmt 0x2444c88 <line:2:5, line:7:5>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-ImplicitCastExpr 0x2444c70 <line:2:13> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x2444c48 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n      `-CompoundStmt 0x2444de0 <col:16, line:7:5>\n        |-CaseStmt 0x2444cd8 <line:3:9, line:5:15>\n        | |-IntegerLiteral 0x2444cb8 <line:3:14> 'int' 16\n        | |-<<<NULL>>>\n        | `-CaseStmt 0x2444d30 <line:4:9, line:5:15>\n        |   |-IntegerLiteral 0x2444d10 <line:4:14> 'int' 32\n        |   |-<<<NULL>>>\n        |   `-BinaryOperator 0x2444db0 <line:5:13, col:15> 'int' '='\n        |     |-DeclRefExpr 0x2444d68 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n        |     `-IntegerLiteral 0x2444d90 <col:15> 'int' 123\n        `-BreakStmt 0x2444dd8 <line:6:13>" always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-SwitchStmt 0x2444c88 <line:2:5, line:7:5>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-ImplicitCastExpr 0x2444c70 <line:2:13> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x2444c48 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n      `-CompoundStmt 0x2444de0 <col:16, line:7:5>\n        |-CaseStmt 0x2444cd8 <line:3:9, line:5:15>\n        | |-IntegerLiteral 0x2444cb8 <line:3:14> 'int' 16\n        | |-<<<NULL>>>\n        | `-CaseStmt 0x2444d30 <line:4:9, line:5:15>\n        |   |-IntegerLiteral 0x2444d10 <line:4:14> 'int' 32\n        |   |-<<<NULL>>>\n        |   `-BinaryOperator 0x2444db0 <line:5:13, col:15> 'int' '='\n        |     |-DeclRefExpr 0x2444d68 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n        |     `-IntegerLiteral 0x2444d90 <col:15> 'int' 123\n        `-BreakStmt 0x2444dd8 <line:6:13>"
Line 198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  198 always 198
  "void foo ( int x@1 ) { switch ( x@1 ) { case 16 : case 32 : x@1 = 123 ; break ; } }" always "void foo ( int x@1 ) { switch ( x@1 ) { case 16 : case 32 : x@1 = 123 ; break ; } }"
  clang always "`-FunctionDecl 0x2444b60 <1.c:1:1, line:8:1> line:1:6 foo 'void (int)'\n  |-ParmVarDecl 0x2444aa0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2444e00 <col:17, line:8:1>\n    `-SwitchStmt 0x2444c88 <line:2:5, line:7:5>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-ImplicitCastExpr 0x2444c70 <line:2:13> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x2444c48 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n      `-CompoundStmt 0x2444de0 <col:16, line:7:5>\n        |-CaseStmt 0x2444cd8 <line:3:9, line:5:15>\n        | |-IntegerLiteral 0x2444cb8 <line:3:14> 'int' 16\n        | |-<<<NULL>>>\n        | `-CaseStmt 0x2444d30 <line:4:9, line:5:15>\n        |   |-IntegerLiteral 0x2444d10 <line:4:14> 'int' 32\n        |   |-<<<NULL>>>\n        |   `-BinaryOperator 0x2444db0 <line:5:13, col:15> 'int' '='\n        |     |-DeclRefExpr 0x2444d68 <col:13> 'int' lvalue ParmVar 0x2444aa0 'x' 'int'\n        |     `-IntegerLiteral 0x2444d90 <col:15> 'int' 123\n        `-BreakStmt 0x2444dd8 <line:6:13>"
Line 202
  112 always 112
  = always "`-VarDecl 0x3df8608 <a.cpp:1:1, col:10> col:6 c 'char' cinit\n  `-CharacterLiteral 0x3df86a8 <col:10> 'char' 120"
  "`-VarDecl 0x3df8608 <a.cpp:1:1, col:10> col:6 c 'char' cinit\n  `-CharacterLiteral 0x3df86a8 <col:10> 'char' 120" always "`-VarDecl 0x3df8608 <a.cpp:1:1, col:10> col:6 c 'char' cinit\n  `-CharacterLiteral 0x3df86a8 <col:10> 'char' 120"
Line 204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  204 always 204
  "char c@1 = 'x' ;" always "char c@1 = 'x' ;"
  clang always "`-VarDecl 0x3df8608 <a.cpp:1:1, col:10> col:6 c 'char' cinit\n  `-CharacterLiteral 0x3df86a8 <col:10> 'char' 120"
Line 208
  854 always 854
  = always "`-CXXRecordDecl 0x274c638 <a.cpp:1:1, col:25> col:7 class C definition\n  |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n  | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveConstructor exists simple trivial needs_implicit\n  | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveAssignment exists simple trivial needs_implicit\n  | `-Destructor simple irrelevant trivial needs_implicit\n  |-CXXRecordDecl 0x274c758 <col:1, col:7> col:7 implicit class C\n  `-CXXMethodDecl 0x274c870 <col:11, col:23> col:16 foo 'void ()'\n    `-CompoundStmt 0x274c930 <col:22, col:23>"
  "`-CXXRecordDecl 0x274c638 <a.cpp:1:1, col:25> col:7 class C definition\n  |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n  | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveConstructor exists simple trivial needs_implicit\n  | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveAssignment exists simple trivial needs_implicit\n  | `-Destructor simple irrelevant trivial needs_implicit\n  |-CXXRecordDecl 0x274c758 <col:1, col:7> col:7 implicit class C\n  `-CXXMethodDecl 0x274c870 <col:11, col:23> col:16 foo 'void ()'\n    `-CompoundStmt 0x274c930 <col:22, col:23>" always "`-CXXRecordDecl 0x274c638 <a.cpp:1:1, col:25> col:7 class C definition\n  |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n  | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveConstructor exists simple trivial needs_implicit\n  | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveAssignment exists simple trivial needs_implicit\n  | `-Destructor simple irrelevant trivial needs_implicit\n  |-CXXRecordDecl 0x274c758 <col:1, col:7> col:7 implicit class C\n  `-CXXMethodDecl 0x274c870 <col:11, col:23> col:16 foo 'void ()'\n    `-CompoundStmt 0x274c930 <col:22, col:23>"
Line 219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  219 always 219
  "class C { void foo ( ) { } } ;" always "class C { void foo ( ) { } } ;"
  clang always "`-CXXRecordDecl 0x274c638 <a.cpp:1:1, col:25> col:7 class C definition\n  |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n  | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n  | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveConstructor exists simple trivial needs_implicit\n  | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n  | |-MoveAssignment exists simple trivial needs_implicit\n  | `-Destructor simple irrelevant trivial needs_implicit\n  |-CXXRecordDecl 0x274c758 <col:1, col:7> col:7 implicit class C\n  `-CXXMethodDecl 0x274c870 <col:11, col:23> col:16 foo 'void ()'\n    `-CompoundStmt 0x274c930 <col:22, col:23>"
Line 223
  1173 always 1173
  = always "`-ClassTemplateDecl 0x29d1748 <a.cpp:1:1, col:59> col:25 C\n  |-TemplateTypeParmDecl 0x29d15f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n  `-CXXRecordDecl 0x29d16b0 <col:19, col:59> col:25 class C definition\n    |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n    | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveConstructor exists simple trivial needs_implicit\n    | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveAssignment exists simple trivial needs_implicit\n    | `-Destructor simple irrelevant trivial needs_implicit\n    |-CXXRecordDecl 0x29d19b0 <col:19, col:25> col:25 implicit class C\n    |-AccessSpecDecl 0x29d1a48 <col:29, col:35> col:29 public\n    `-CXXMethodDecl 0x29d1b20 <col:37, col:57> col:39 foo 'T ()'\n      `-CompoundStmt 0x29d1c18 <col:45, col:57>\n        `-ReturnStmt 0x29d1c00 <col:47, col:54>\n          `-IntegerLiteral 0x29d1be0 <col:54> 'int' 0"
  "`-ClassTemplateDecl 0x29d1748 <a.cpp:1:1, col:59> col:25 C\n  |-TemplateTypeParmDecl 0x29d15f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n  `-CXXRecordDecl 0x29d16b0 <col:19, col:59> col:25 class C definition\n    |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n    | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveConstructor exists simple trivial needs_implicit\n    | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveAssignment exists simple trivial needs_implicit\n    | `-Destructor simple irrelevant trivial needs_implicit\n    |-CXXRecordDecl 0x29d19b0 <col:19, col:25> col:25 implicit class C\n    |-AccessSpecDecl 0x29d1a48 <col:29, col:35> col:29 public\n    `-CXXMethodDecl 0x29d1b20 <col:37, col:57> col:39 foo 'T ()'\n      `-CompoundStmt 0x29d1c18 <col:45, col:57>\n        `-ReturnStmt 0x29d1c00 <col:47, col:54>\n          `-IntegerLiteral 0x29d1be0 <col:54> 'int' 0" always "`-ClassTemplateDecl 0x29d1748 <a.cpp:1:1, col:59> col:25 C\n  |-TemplateTypeParmDecl 0x29d15f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n  `-CXXRecordDecl 0x29d16b0 <col:19, col:59> col:25 class C definition\n    |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n    | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveConstructor exists simple trivial needs_implicit\n    | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveAssignment exists simple trivial needs_implicit\n    | `-Destructor simple irrelevant trivial needs_implicit\n    |-CXXRecordDecl 0x29d19b0 <col:19, col:25> col:25 implicit class C\n    |-AccessSpecDecl 0x29d1a48 <col:29, col:35> col:29 public\n    `-CXXMethodDecl 0x29d1b20 <col:37, col:57> col:39 foo 'T ()'\n      `-CompoundStmt 0x29d1c18 <col:45, col:57>\n        `-ReturnStmt 0x29d1c00 <col:47, col:54>\n          `-IntegerLiteral 0x29d1be0 <col:54> 'int' 0"
Line 239
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  239 always 239
  "" always ""
  clang always "`-ClassTemplateDecl 0x29d1748 <a.cpp:1:1, col:59> col:25 C\n  |-TemplateTypeParmDecl 0x29d15f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n  `-CXXRecordDecl 0x29d16b0 <col:19, col:59> col:25 class C definition\n    |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n    | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n    | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveConstructor exists simple trivial needs_implicit\n    | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n    | |-MoveAssignment exists simple trivial needs_implicit\n    | `-Destructor simple irrelevant trivial needs_implicit\n    |-CXXRecordDecl 0x29d19b0 <col:19, col:25> col:25 implicit class C\n    |-AccessSpecDecl 0x29d1a48 <col:29, col:35> col:29 public\n    `-CXXMethodDecl 0x29d1b20 <col:37, col:57> col:39 foo 'T ()'\n      `-CompoundStmt 0x29d1c18 <col:45, col:57>\n        `-ReturnStmt 0x29d1c00 <col:47, col:54>\n          `-IntegerLiteral 0x29d1be0 <col:54> 'int' 0"
Line 243
  2815 always 2815
  = always "|-ClassTemplateDecl 0x244e748 <a.cpp:1:1, col:59> col:25 C\n| |-TemplateTypeParmDecl 0x244e5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-CXXRecordDecl 0x244e6b0 <col:19, col:59> col:25 class C definition\n| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveConstructor exists simple trivial needs_implicit\n| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveAssignment exists simple trivial needs_implicit\n| | | `-Destructor simple irrelevant trivial needs_implicit\n| | |-CXXRecordDecl 0x244e9b0 <col:19, col:25> col:25 implicit class C\n| | |-AccessSpecDecl 0x244ea48 <col:29, col:35> col:29 public\n| | `-CXXMethodDecl 0x244eb20 <col:37, col:57> col:39 foo 'T ()'\n| |   `-CompoundStmt 0x244ec18 <col:45, col:57>\n| |     `-ReturnStmt 0x244ec00 <col:47, col:54>\n| |       `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n| `-ClassTemplateSpecializationDecl 0x244ed78 <col:1, col:59> col:25 class C definition\n|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr\n|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param\n|   | |-MoveConstructor exists simple trivial\n|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n|   | |-MoveAssignment exists simple trivial needs_implicit\n|   | `-Destructor simple irrelevant trivial needs_implicit\n|   |-TemplateArgument type 'int'\n|   |-CXXRecordDecl 0x244eff0 prev 0x244ed78 <col:19, col:25> col:25 implicit class C\n|   |-AccessSpecDecl 0x244f088 <col:29, col:35> col:29 public\n|   |-CXXMethodDecl 0x244f160 <col:37, col:57> col:39 used foo 'int ()'\n|   | `-CompoundStmt 0x247cb40 <col:45, col:57>\n|   |   `-ReturnStmt 0x247cb28 <col:47, col:54>\n|   |     `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n|   |-CXXConstructorDecl 0x247c540 <col:25> col:25 implicit used constexpr C 'void () noexcept' inline default trivial\n|   | `-CompoundStmt 0x247ca00 <col:25>\n|   |-CXXConstructorDecl 0x247c658 <col:25> col:25 implicit constexpr C 'void (const C<int> &)' inline default trivial noexcept-unevaluated 0x247c658\n|   | `-ParmVarDecl 0x247c790 <col:25> col:25 'const C<int> &'\n|   `-CXXConstructorDecl 0x247c828 <col:25> col:25 implicit constexpr C 'void (C<int> &&)' inline default trivial noexcept-unevaluated 0x247c828\n|     `-ParmVarDecl 0x247c960 <col:25> col:25 'C<int> &&'\n"
  "|-ClassTemplateDecl 0x244e748 <a.cpp:1:1, col:59> col:25 C\n| |-TemplateTypeParmDecl 0x244e5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-CXXRecordDecl 0x244e6b0 <col:19, col:59> col:25 class C definition\n| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveConstructor exists simple trivial needs_implicit\n| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveAssignment exists simple trivial needs_implicit\n| | | `-Destructor simple irrelevant trivial needs_implicit\n| | |-CXXRecordDecl 0x244e9b0 <col:19, col:25> col:25 implicit class C\n| | |-AccessSpecDecl 0x244ea48 <col:29, col:35> col:29 public\n| | `-CXXMethodDecl 0x244eb20 <col:37, col:57> col:39 foo 'T ()'\n| |   `-CompoundStmt 0x244ec18 <col:45, col:57>\n| |     `-ReturnStmt 0x244ec00 <col:47, col:54>\n| |       `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n| `-ClassTemplateSpecializationDecl 0x244ed78 <col:1, col:59> col:25 class C definition\n|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr\n|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param\n|   | |-MoveConstructor exists simple trivial\n|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n|   | |-MoveAssignment exists simple trivial needs_implicit\n|   | `-Destructor simple irrelevant trivial needs_implicit\n|   |-TemplateArgument type 'int'\n|   |-CXXRecordDecl 0x244eff0 prev 0x244ed78 <col:19, col:25> col:25 implicit class C\n|   |-AccessSpecDecl 0x244f088 <col:29, col:35> col:29 public\n|   |-CXXMethodDecl 0x244f160 <col:37, col:57> col:39 used foo 'int ()'\n|   | `-CompoundStmt 0x247cb40 <col:45, col:57>\n|   |   `-ReturnStmt 0x247cb28 <col:47, col:54>\n|   |     `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n|   |-CXXConstructorDecl 0x247c540 <col:25> col:25 implicit used constexpr C 'void () noexcept' inline default trivial\n|   | `-CompoundStmt 0x247ca00 <col:25>\n|   |-CXXConstructorDecl 0x247c658 <col:25> col:25 implicit constexpr C 'void (const C<int> &)' inline default trivial noexcept-unevaluated 0x247c658\n|   | `-ParmVarDecl 0x247c790 <col:25> col:25 'const C<int> &'\n|   `-CXXConstructorDecl 0x247c828 <col:25> col:25 implicit constexpr C 'void (C<int> &&)' inline default trivial noexcept-unevaluated 0x247c828\n|     `-ParmVarDecl 0x247c960 <col:25> col:25 'C<int> &&'\n" always "|-ClassTemplateDecl 0x244e748 <a.cpp:1:1, col:59> col:25 C\n| |-TemplateTypeParmDecl 0x244e5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-CXXRecordDecl 0x244e6b0 <col:19, col:59> col:25 class C definition\n| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveConstructor exists simple trivial needs_implicit\n| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveAssignment exists simple trivial needs_implicit\n| | | `-Destructor simple irrelevant trivial needs_implicit\n| | |-CXXRecordDecl 0x244e9b0 <col:19, col:25> col:25 implicit class C\n| | |-AccessSpecDecl 0x244ea48 <col:29, col:35> col:29 public\n| | `-CXXMethodDecl 0x244eb20 <col:37, col:57> col:39 foo 'T ()'\n| |   `-CompoundStmt 0x244ec18 <col:45, col:57>\n| |     `-ReturnStmt 0x244ec00 <col:47, col:54>\n| |       `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n| `-ClassTemplateSpecializationDecl 0x244ed78 <col:1, col:59> col:25 class C definition\n|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr\n|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param\n|   | |-MoveConstructor exists simple trivial\n|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n|   | |-MoveAssignment exists simple trivial needs_implicit\n|   | `-Destructor simple irrelevant trivial needs_implicit\n|   |-TemplateArgument type 'int'\n|   |-CXXRecordDecl 0x244eff0 prev 0x244ed78 <col:19, col:25> col:25 implicit class C\n|   |-AccessSpecDecl 0x244f088 <col:29, col:35> col:29 public\n|   |-CXXMethodDecl 0x244f160 <col:37, col:57> col:39 used foo 'int ()'\n|   | `-CompoundStmt 0x247cb40 <col:45, col:57>\n|   |   `-ReturnStmt 0x247cb28 <col:47, col:54>\n|   |     `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n|   |-CXXConstructorDecl 0x247c540 <col:25> col:25 implicit used constexpr C 'void () noexcept' inline default trivial\n|   | `-CompoundStmt 0x247ca00 <col:25>\n|   |-CXXConstructorDecl 0x247c658 <col:25> col:25 implicit constexpr C 'void (const C<int> &)' inline default trivial noexcept-unevaluated 0x247c658\n|   | `-ParmVarDecl 0x247c790 <col:25> col:25 'const C<int> &'\n|   `-CXXConstructorDecl 0x247c828 <col:25> col:25 implicit constexpr C 'void (C<int> &&)' inline default trivial noexcept-unevaluated 0x247c828\n|     `-ParmVarDecl 0x247c960 <col:25> col:25 'C<int> &&'\n"
Line 280
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  280 always 280
  "class C { int foo ( ) { return 0 ; } C ( ) { } C ( const C<int> & ) = default ; C ( C<int> && ) = default ; } ;" always "class C { int foo ( ) { return 0 ; } C ( ) { } C ( const C<int> & ) = default ; C ( C<int> && ) = default ; } ;"
  clang always "|-ClassTemplateDecl 0x244e748 <a.cpp:1:1, col:59> col:25 C\n| |-TemplateTypeParmDecl 0x244e5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-CXXRecordDecl 0x244e6b0 <col:19, col:59> col:25 class C definition\n| | |-DefinitionData empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveConstructor exists simple trivial needs_implicit\n| | | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | | |-MoveAssignment exists simple trivial needs_implicit\n| | | `-Destructor simple irrelevant trivial needs_implicit\n| | |-CXXRecordDecl 0x244e9b0 <col:19, col:25> col:25 implicit class C\n| | |-AccessSpecDecl 0x244ea48 <col:29, col:35> col:29 public\n| | `-CXXMethodDecl 0x244eb20 <col:37, col:57> col:39 foo 'T ()'\n| |   `-CompoundStmt 0x244ec18 <col:45, col:57>\n| |     `-ReturnStmt 0x244ec00 <col:47, col:54>\n| |       `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n| `-ClassTemplateSpecializationDecl 0x244ed78 <col:1, col:59> col:25 class C definition\n|   |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n|   | |-DefaultConstructor exists trivial constexpr defaulted_is_constexpr\n|   | |-CopyConstructor simple trivial has_const_param implicit_has_const_param\n|   | |-MoveConstructor exists simple trivial\n|   | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n|   | |-MoveAssignment exists simple trivial needs_implicit\n|   | `-Destructor simple irrelevant trivial needs_implicit\n|   |-TemplateArgument type 'int'\n|   |-CXXRecordDecl 0x244eff0 prev 0x244ed78 <col:19, col:25> col:25 implicit class C\n|   |-AccessSpecDecl 0x244f088 <col:29, col:35> col:29 public\n|   |-CXXMethodDecl 0x244f160 <col:37, col:57> col:39 used foo 'int ()'\n|   | `-CompoundStmt 0x247cb40 <col:45, col:57>\n|   |   `-ReturnStmt 0x247cb28 <col:47, col:54>\n|   |     `-IntegerLiteral 0x244ebe0 <col:54> 'int' 0\n|   |-CXXConstructorDecl 0x247c540 <col:25> col:25 implicit used constexpr C 'void () noexcept' inline default trivial\n|   | `-CompoundStmt 0x247ca00 <col:25>\n|   |-CXXConstructorDecl 0x247c658 <col:25> col:25 implicit constexpr C 'void (const C<int> &)' inline default trivial noexcept-unevaluated 0x247c658\n|   | `-ParmVarDecl 0x247c790 <col:25> col:25 'const C<int> &'\n|   `-CXXConstructorDecl 0x247c828 <col:25> col:25 implicit constexpr C 'void (C<int> &&)' inline default trivial noexcept-unevaluated 0x247c828\n|     `-ParmVarDecl 0x247c960 <col:25> col:25 'C<int> &&'\n"
Line 284
  536 always 536
  = always "`-VarDecl 0x257cc88 <line:4:1, col:13> col:5 x 'int' cinit\n  `-ConditionalOperator 0x257cda8 <col:9, col:13> 'int'\n    |-ImplicitCastExpr 0x257cd60 <col:9> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cce8 <col:9> 'int' lvalue Var 0x257cae0 'a' 'int'\n    |-ImplicitCastExpr 0x257cd78 <col:11> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cd10 <col:11> 'int' lvalue Var 0x257cb98 'b' 'int'\n    `-ImplicitCastExpr 0x257cd90 <col:13> 'int' <LValueToRValue>\n      `-DeclRefExpr 0x257cd38 <col:13> 'int' lvalue Var 0x257cc10 'c' 'int'"
  "`-VarDecl 0x257cc88 <line:4:1, col:13> col:5 x 'int' cinit\n  `-ConditionalOperator 0x257cda8 <col:9, col:13> 'int'\n    |-ImplicitCastExpr 0x257cd60 <col:9> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cce8 <col:9> 'int' lvalue Var 0x257cae0 'a' 'int'\n    |-ImplicitCastExpr 0x257cd78 <col:11> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cd10 <col:11> 'int' lvalue Var 0x257cb98 'b' 'int'\n    `-ImplicitCastExpr 0x257cd90 <col:13> 'int' <LValueToRValue>\n      `-DeclRefExpr 0x257cd38 <col:13> 'int' lvalue Var 0x257cc10 'c' 'int'" always "`-VarDecl 0x257cc88 <line:4:1, col:13> col:5 x 'int' cinit\n  `-ConditionalOperator 0x257cda8 <col:9, col:13> 'int'\n    |-ImplicitCastExpr 0x257cd60 <col:9> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cce8 <col:9> 'int' lvalue Var 0x257cae0 'a' 'int'\n    |-ImplicitCastExpr 0x257cd78 <col:11> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cd10 <col:11> 'int' lvalue Var 0x257cb98 'b' 'int'\n    `-ImplicitCastExpr 0x257cd90 <col:13> 'int' <LValueToRValue>\n      `-DeclRefExpr 0x257cd38 <col:13> 'int' lvalue Var 0x257cc10 'c' 'int'"
Line 292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  292 always 292
  "int x@1 = a ? b : c ;" always "int x@1 = a ? b : c ;"
  clang always "`-VarDecl 0x257cc88 <line:4:1, col:13> col:5 x 'int' cinit\n  `-ConditionalOperator 0x257cda8 <col:9, col:13> 'int'\n    |-ImplicitCastExpr 0x257cd60 <col:9> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cce8 <col:9> 'int' lvalue Var 0x257cae0 'a' 'int'\n    |-ImplicitCastExpr 0x257cd78 <col:11> 'int' <LValueToRValue>\n    | `-DeclRefExpr 0x257cd10 <col:11> 'int' lvalue Var 0x257cb98 'b' 'int'\n    `-ImplicitCastExpr 0x257cd90 <col:13> 'int' <LValueToRValue>\n      `-DeclRefExpr 0x257cd38 <col:13> 'int' lvalue Var 0x257cc10 'c' 'int'"
Line 296
  348 always 348
  = always "`-FunctionDecl 0x3570690 <1.cpp:2:1, col:25> col:6 f 'void ()'\n  `-CompoundStmt 0x3570880 <col:10, col:25>\n    `-CompoundAssignOperator 0x3570848 <col:19, col:22> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'\n      |-DeclRefExpr 0x3570800 <col:19> 'int' lvalue Var 0x3570788 'x' 'int'\n      `-IntegerLiteral 0x3570828 <col:22> 'int' 1"
  "`-FunctionDecl 0x3570690 <1.cpp:2:1, col:25> col:6 f 'void ()'\n  `-CompoundStmt 0x3570880 <col:10, col:25>\n    `-CompoundAssignOperator 0x3570848 <col:19, col:22> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'\n      |-DeclRefExpr 0x3570800 <col:19> 'int' lvalue Var 0x3570788 'x' 'int'\n      `-IntegerLiteral 0x3570828 <col:22> 'int' 1" always "`-FunctionDecl 0x3570690 <1.cpp:2:1, col:25> col:6 f 'void ()'\n  `-CompoundStmt 0x3570880 <col:10, col:25>\n    `-CompoundAssignOperator 0x3570848 <col:19, col:22> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'\n      |-DeclRefExpr 0x3570800 <col:19> 'int' lvalue Var 0x3570788 'x' 'int'\n      `-IntegerLiteral 0x3570828 <col:22> 'int' 1"
Line 301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  301 always 301
  "void f ( ) { x += 1 ; }" always "void f ( ) { x += 1 ; }"
  clang always "`-FunctionDecl 0x3570690 <1.cpp:2:1, col:25> col:6 f 'void ()'\n  `-CompoundStmt 0x3570880 <col:10, col:25>\n    `-CompoundAssignOperator 0x3570848 <col:19, col:22> 'int' lvalue '+=' ComputeLHSTy='int' ComputeResultTy='int'\n      |-DeclRefExpr 0x3570800 <col:19> 'int' lvalue Var 0x3570788 'x' 'int'\n      `-IntegerLiteral 0x3570828 <col:22> 'int' 1"
Line 305
  259 always 259
  = always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-ContinueStmt 0x2c31c18 <col:24>"
  "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-ContinueStmt 0x2c31c18 <col:24>" always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-ContinueStmt 0x2c31c18 <col:24>"
Line 311
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  311 always 311
  "void foo ( ) { while ( 0 ) { continue ; } }" always "void foo ( ) { while ( 0 ) { continue ; } }"
  clang always "`-FunctionDecl 0x2c31b18 <1.c:1:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x2c31c40 <col:12, col:34>\n    `-WhileStmt 0x2c31c20 <col:14, col:24>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x2c31bf8 <col:21> 'int' 0\n      `-ContinueStmt 0x2c31c18 <col:24>"
Line 315
  167 always 167
  = always "`-VarDecl 0x2336aa0 <1.c:1:1, col:14> col:5 x 'int' cinit\n  `-CStyleCastExpr 0x2336b70 <col:9, col:14> 'int' <NoOp>\n    `-CharacterLiteral 0x2336b40 <col:14> 'int' 97"
  "`-VarDecl 0x2336aa0 <1.c:1:1, col:14> col:5 x 'int' cinit\n  `-CStyleCastExpr 0x2336b70 <col:9, col:14> 'int' <NoOp>\n    `-CharacterLiteral 0x2336b40 <col:14> 'int' 97" always "`-VarDecl 0x2336aa0 <1.c:1:1, col:14> col:5 x 'int' cinit\n  `-CStyleCastExpr 0x2336b70 <col:9, col:14> 'int' <NoOp>\n    `-CharacterLiteral 0x2336b40 <col:14> 'int' 97"
Line 318
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  318 always 318
  "int x@1 = ( int ) 'a' ;" always "int x@1 = ( int ) 'a' ;"
  clang always "`-VarDecl 0x2336aa0 <1.c:1:1, col:14> col:5 x 'int' cinit\n  `-CStyleCastExpr 0x2336b70 <col:9, col:14> 'int' <NoOp>\n    `-CharacterLiteral 0x2336b40 <col:14> 'int' 97"
Line 322
  115 always 115
  = always "`-VarDecl 0x3940608 <a.cpp:1:1, col:10> col:6 x 'bool' cinit\n  `-CXXBoolLiteralExpr 0x39406a8 <col:10> 'bool' true"
  "`-VarDecl 0x3940608 <a.cpp:1:1, col:10> col:6 x 'bool' cinit\n  `-CXXBoolLiteralExpr 0x39406a8 <col:10> 'bool' true" always "`-VarDecl 0x3940608 <a.cpp:1:1, col:10> col:6 x 'bool' cinit\n  `-CXXBoolLiteralExpr 0x39406a8 <col:10> 'bool' true"
Line 324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  324 always 324
  "bool x@1 = true ;" always "bool x@1 = true ;"
  clang always "`-VarDecl 0x3940608 <a.cpp:1:1, col:10> col:6 x 'bool' cinit\n  `-CXXBoolLiteralExpr 0x39406a8 <col:10> 'bool' true"
Line 328
  408 always 408
  = always "|-CXXConstructorDecl 0x428e890 <col:11, col:24> col:11 C 'void ()'\n| `-CompoundStmt 0x428ea58 <col:15, col:24>\n|   `-BinaryOperator 0x428ea30 <col:17, col:21> 'int' lvalue '='\n|     |-MemberExpr 0x428e9d8 <col:17> 'int' lvalue ->x 0x428e958\n|     | `-CXXThisExpr 0x428e9c0 <col:17> 'C *' this\n|     `-IntegerLiteral 0x428ea10 <col:21> 'int' 0\n`-FieldDecl 0x428e958 <col:26, col:30> col:30 referenced x 'int'"
  "|-CXXConstructorDecl 0x428e890 <col:11, col:24> col:11 C 'void ()'\n| `-CompoundStmt 0x428ea58 <col:15, col:24>\n|   `-BinaryOperator 0x428ea30 <col:17, col:21> 'int' lvalue '='\n|     |-MemberExpr 0x428e9d8 <col:17> 'int' lvalue ->x 0x428e958\n|     | `-CXXThisExpr 0x428e9c0 <col:17> 'C *' this\n|     `-IntegerLiteral 0x428ea10 <col:21> 'int' 0\n`-FieldDecl 0x428e958 <col:26, col:30> col:30 referenced x 'int'" always "|-CXXConstructorDecl 0x428e890 <col:11, col:24> col:11 C 'void ()'\n| `-CompoundStmt 0x428ea58 <col:15, col:24>\n|   `-BinaryOperator 0x428ea30 <col:17, col:21> 'int' lvalue '='\n|     |-MemberExpr 0x428e9d8 <col:17> 'int' lvalue ->x 0x428e958\n|     | `-CXXThisExpr 0x428e9c0 <col:17> 'C *' this\n|     `-IntegerLiteral 0x428ea10 <col:21> 'int' 0\n`-FieldDecl 0x428e958 <col:26, col:30> col:30 referenced x 'int'"
Line 335
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  335 always 335
  "C ( ) { this . x@1 = 0 ; } int x@1" always "C ( ) { this . x@1 = 0 ; } int x@1"
  clang always "|-CXXConstructorDecl 0x428e890 <col:11, col:24> col:11 C 'void ()'\n| `-CompoundStmt 0x428ea58 <col:15, col:24>\n|   `-BinaryOperator 0x428ea30 <col:17, col:21> 'int' lvalue '='\n|     |-MemberExpr 0x428e9d8 <col:17> 'int' lvalue ->x 0x428e958\n|     | `-CXXThisExpr 0x428e9c0 <col:17> 'C *' this\n|     `-IntegerLiteral 0x428ea10 <col:21> 'int' 0\n`-FieldDecl 0x428e958 <col:26, col:30> col:30 referenced x 'int'"
Line 339
  240 always 240
  = always "`-CXXConstructorDecl 0x1c208c0 <col:11> col:11 implicit constexpr basic_string 'void (std::basic_string<char> &&)' inline default trivial noexcept-unevaluated 0x1c208c0\n  `-ParmVarDecl 0x1c209f0 <col:11> col:11 'std::basic_string<char> &&'"
  "`-CXXConstructorDecl 0x1c208c0 <col:11> col:11 implicit constexpr basic_string 'void (std::basic_string<char> &&)' inline default trivial noexcept-unevaluated 0x1c208c0\n  `-ParmVarDecl 0x1c209f0 <col:11> col:11 'std::basic_string<char> &&'" always "`-CXXConstructorDecl 0x1c208c0 <col:11> col:11 implicit constexpr basic_string 'void (std::basic_string<char> &&)' inline default trivial noexcept-unevaluated 0x1c208c0\n  `-ParmVarDecl 0x1c209f0 <col:11> col:11 'std::basic_string<char> &&'"
Line 341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  341 always 341
  "basic_string ( std::basic_string<char> && ) = default ;" always "basic_string ( std::basic_string<char> && ) = default ;"
  clang always "`-CXXConstructorDecl 0x1c208c0 <col:11> col:11 implicit constexpr basic_string 'void (std::basic_string<char> &&)' inline default trivial noexcept-unevaluated 0x1c208c0\n  `-ParmVarDecl 0x1c209f0 <col:11> col:11 'std::basic_string<char> &&'"
Line 345
  443 always 443
  = always "`-FunctionDecl 0x2dd7940 <line:2:1, col:30> col:5 f 'Foo (Foo)'\n  |-ParmVarDecl 0x2dd7880 <col:7, col:11> col:11 used foo 'Foo'\n  `-CompoundStmt 0x2dd80c0 <col:16, col:30>\n    `-ReturnStmt 0x2dd80a8 <col:18, col:25>\n      `-CXXConstructExpr 0x2dd8070 <col:25> 'Foo' 'void (Foo &&) noexcept'\n        `-ImplicitCastExpr 0x2dd7f28 <col:25> 'Foo' xvalue <NoOp>\n          `-DeclRefExpr 0x2dd7a28 <col:25> 'Foo' lvalue ParmVar 0x2dd7880 'foo' 'Foo'"
  "`-FunctionDecl 0x2dd7940 <line:2:1, col:30> col:5 f 'Foo (Foo)'\n  |-ParmVarDecl 0x2dd7880 <col:7, col:11> col:11 used foo 'Foo'\n  `-CompoundStmt 0x2dd80c0 <col:16, col:30>\n    `-ReturnStmt 0x2dd80a8 <col:18, col:25>\n      `-CXXConstructExpr 0x2dd8070 <col:25> 'Foo' 'void (Foo &&) noexcept'\n        `-ImplicitCastExpr 0x2dd7f28 <col:25> 'Foo' xvalue <NoOp>\n          `-DeclRefExpr 0x2dd7a28 <col:25> 'Foo' lvalue ParmVar 0x2dd7880 'foo' 'Foo'" always "`-FunctionDecl 0x2dd7940 <line:2:1, col:30> col:5 f 'Foo (Foo)'\n  |-ParmVarDecl 0x2dd7880 <col:7, col:11> col:11 used foo 'Foo'\n  `-CompoundStmt 0x2dd80c0 <col:16, col:30>\n    `-ReturnStmt 0x2dd80a8 <col:18, col:25>\n      `-CXXConstructExpr 0x2dd8070 <col:25> 'Foo' 'void (Foo &&) noexcept'\n        `-ImplicitCastExpr 0x2dd7f28 <col:25> 'Foo' xvalue <NoOp>\n          `-DeclRefExpr 0x2dd7a28 <col:25> 'Foo' lvalue ParmVar 0x2dd7880 'foo' 'Foo'"
Line 352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  352 always 352
  "Foo f ( Foo foo@1 ) { return foo@1 ; }" always "Foo f ( Foo foo@1 ) { return foo@1 ; }"
  clang always "`-FunctionDecl 0x2dd7940 <line:2:1, col:30> col:5 f 'Foo (Foo)'\n  |-ParmVarDecl 0x2dd7880 <col:7, col:11> col:11 used foo 'Foo'\n  `-CompoundStmt 0x2dd80c0 <col:16, col:30>\n    `-ReturnStmt 0x2dd80a8 <col:18, col:25>\n      `-CXXConstructExpr 0x2dd8070 <col:25> 'Foo' 'void (Foo &&) noexcept'\n        `-ImplicitCastExpr 0x2dd7f28 <col:25> 'Foo' xvalue <NoOp>\n          `-DeclRefExpr 0x2dd7a28 <col:25> 'Foo' lvalue ParmVar 0x2dd7880 'foo' 'Foo'"
Line 356
  272 always 272
  = always "`-FunctionDecl 0x3e44180 <1.cpp:2:1, col:30> col:13 f 'std::string ()'\n  `-CompoundStmt 0x3e4cb80 <col:17, col:30>\n    `-ReturnStmt 0x3e4cb68 <col:19, col:27>\n      `-CXXConstructExpr 0x3e4cb38 <col:26, col:27> 'std::string':'std::__cxx11::basic_string<char>' '....' list"
  "`-FunctionDecl 0x3e44180 <1.cpp:2:1, col:30> col:13 f 'std::string ()'\n  `-CompoundStmt 0x3e4cb80 <col:17, col:30>\n    `-ReturnStmt 0x3e4cb68 <col:19, col:27>\n      `-CXXConstructExpr 0x3e4cb38 <col:26, col:27> 'std::string':'std::__cxx11::basic_string<char>' '....' list" always "`-FunctionDecl 0x3e44180 <1.cpp:2:1, col:30> col:13 f 'std::string ()'\n  `-CompoundStmt 0x3e4cb80 <col:17, col:30>\n    `-ReturnStmt 0x3e4cb68 <col:19, col:27>\n      `-CXXConstructExpr 0x3e4cb38 <col:26, col:27> 'std::string':'std::__cxx11::basic_string<char>' '....' list"
Line 360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  360 always 360
  "std :: string f ( ) { return std :: string ( ) ; }" always "std :: string f ( ) { return std :: string ( ) ; }"
  clang always "`-FunctionDecl 0x3e44180 <1.cpp:2:1, col:30> col:13 f 'std::string ()'\n  `-CompoundStmt 0x3e4cb80 <col:17, col:30>\n    `-ReturnStmt 0x3e4cb68 <col:19, col:27>\n      `-CXXConstructExpr 0x3e4cb38 <col:26, col:27> 'std::string':'std::__cxx11::basic_string<char>' '....' list"
Line 364
  994 always 994
  = always "`-FunctionDecl 0x2c585b8 <1.cpp:4:1, col:39> col:6 f 'void ()'\n  `-CompoundStmt 0x2c589d0 <col:10, col:39>\n    |-DeclStmt 0x2c586d0 <col:12, col:19>\n    | `-VarDecl 0x2c58670 <col:12, col:18> col:18 used p 'char *'\n    `-DeclStmt 0x2c589b8 <col:21, col:37>\n      `-VarDecl 0x2c58798 <col:21, col:36> col:33 s 'std::string':'std::__cxx11::basic_string<char>' callinit\n        `-ExprWithCleanups 0x2c589a0 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>'\n          `-CXXConstructExpr 0x2c58960 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>' 'void (const char *, const std::allocator<char> &)'\n            |-ImplicitCastExpr 0x2c58870 <col:35> 'const char *' <NoOp>\n            | `-ImplicitCastExpr 0x2c58858 <col:35> 'char *' <LValueToRValue>\n            |   `-DeclRefExpr 0x2c58750 <col:35> 'char *' lvalue Var 0x2c58670 'p' 'char *'\n            `-CXXDefaultArgExpr 0x2c58940 <<invalid sloc>> 'const std::allocator<char>':'const std::allocator<char>' lvalue\n"
  "`-FunctionDecl 0x2c585b8 <1.cpp:4:1, col:39> col:6 f 'void ()'\n  `-CompoundStmt 0x2c589d0 <col:10, col:39>\n    |-DeclStmt 0x2c586d0 <col:12, col:19>\n    | `-VarDecl 0x2c58670 <col:12, col:18> col:18 used p 'char *'\n    `-DeclStmt 0x2c589b8 <col:21, col:37>\n      `-VarDecl 0x2c58798 <col:21, col:36> col:33 s 'std::string':'std::__cxx11::basic_string<char>' callinit\n        `-ExprWithCleanups 0x2c589a0 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>'\n          `-CXXConstructExpr 0x2c58960 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>' 'void (const char *, const std::allocator<char> &)'\n            |-ImplicitCastExpr 0x2c58870 <col:35> 'const char *' <NoOp>\n            | `-ImplicitCastExpr 0x2c58858 <col:35> 'char *' <LValueToRValue>\n            |   `-DeclRefExpr 0x2c58750 <col:35> 'char *' lvalue Var 0x2c58670 'p' 'char *'\n            `-CXXDefaultArgExpr 0x2c58940 <<invalid sloc>> 'const std::allocator<char>':'const std::allocator<char>' lvalue\n" always "`-FunctionDecl 0x2c585b8 <1.cpp:4:1, col:39> col:6 f 'void ()'\n  `-CompoundStmt 0x2c589d0 <col:10, col:39>\n    |-DeclStmt 0x2c586d0 <col:12, col:19>\n    | `-VarDecl 0x2c58670 <col:12, col:18> col:18 used p 'char *'\n    `-DeclStmt 0x2c589b8 <col:21, col:37>\n      `-VarDecl 0x2c58798 <col:21, col:36> col:33 s 'std::string':'std::__cxx11::basic_string<char>' callinit\n        `-ExprWithCleanups 0x2c589a0 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>'\n          `-CXXConstructExpr 0x2c58960 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>' 'void (const char *, const std::allocator<char> &)'\n            |-ImplicitCastExpr 0x2c58870 <col:35> 'const char *' <NoOp>\n            | `-ImplicitCastExpr 0x2c58858 <col:35> 'char *' <LValueToRValue>\n            |   `-DeclRefExpr 0x2c58750 <col:35> 'char *' lvalue Var 0x2c58670 'p' 'char *'\n            `-CXXDefaultArgExpr 0x2c58940 <<invalid sloc>> 'const std::allocator<char>':'const std::allocator<char>' lvalue\n"
Line 376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  376 always 376
  "void f ( ) { char * p@1 ; std :: string s@2 ( p@1 ) ; }" always "void f ( ) { char * p@1 ; std :: string s@2 ( p@1 ) ; }"
  clang always "`-FunctionDecl 0x2c585b8 <1.cpp:4:1, col:39> col:6 f 'void ()'\n  `-CompoundStmt 0x2c589d0 <col:10, col:39>\n    |-DeclStmt 0x2c586d0 <col:12, col:19>\n    | `-VarDecl 0x2c58670 <col:12, col:18> col:18 used p 'char *'\n    `-DeclStmt 0x2c589b8 <col:21, col:37>\n      `-VarDecl 0x2c58798 <col:21, col:36> col:33 s 'std::string':'std::__cxx11::basic_string<char>' callinit\n        `-ExprWithCleanups 0x2c589a0 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>'\n          `-CXXConstructExpr 0x2c58960 <col:33, col:36> 'std::string':'std::__cxx11::basic_string<char>' 'void (const char *, const std::allocator<char> &)'\n            |-ImplicitCastExpr 0x2c58870 <col:35> 'const char *' <NoOp>\n            | `-ImplicitCastExpr 0x2c58858 <col:35> 'char *' <LValueToRValue>\n            |   `-DeclRefExpr 0x2c58750 <col:35> 'char *' lvalue Var 0x2c58670 'p' 'char *'\n            `-CXXDefaultArgExpr 0x2c58940 <<invalid sloc>> 'const std::allocator<char>':'const std::allocator<char>' lvalue\n"
Line 380
  447 always 447
  = always "|-FunctionDecl 0x2e0e740 <1.cpp:1:1, col:28> col:6 f 'void (int *)'\n| |-ParmVarDecl 0x2e0e680 <col:8, col:13> col:13 used p 'int *'\n| `-CompoundStmt 0x2e0ee70 <col:16, col:28>\n|   `-CXXDeleteExpr 0x2e0ee48 <col:18, col:25> 'void' Function 0x2e0ebb8 'operator delete' 'void (void *) noexcept'\n|     `-ImplicitCastExpr 0x2e0e850 <col:25> 'int *' <LValueToRValue>\n|       `-DeclRefExpr 0x2e0e828 <col:25> 'int *' lvalue ParmVar 0x2e0e680 'p' 'int *'"
  "|-FunctionDecl 0x2e0e740 <1.cpp:1:1, col:28> col:6 f 'void (int *)'\n| |-ParmVarDecl 0x2e0e680 <col:8, col:13> col:13 used p 'int *'\n| `-CompoundStmt 0x2e0ee70 <col:16, col:28>\n|   `-CXXDeleteExpr 0x2e0ee48 <col:18, col:25> 'void' Function 0x2e0ebb8 'operator delete' 'void (void *) noexcept'\n|     `-ImplicitCastExpr 0x2e0e850 <col:25> 'int *' <LValueToRValue>\n|       `-DeclRefExpr 0x2e0e828 <col:25> 'int *' lvalue ParmVar 0x2e0e680 'p' 'int *'" always "|-FunctionDecl 0x2e0e740 <1.cpp:1:1, col:28> col:6 f 'void (int *)'\n| |-ParmVarDecl 0x2e0e680 <col:8, col:13> col:13 used p 'int *'\n| `-CompoundStmt 0x2e0ee70 <col:16, col:28>\n|   `-CXXDeleteExpr 0x2e0ee48 <col:18, col:25> 'void' Function 0x2e0ebb8 'operator delete' 'void (void *) noexcept'\n|     `-ImplicitCastExpr 0x2e0e850 <col:25> 'int *' <LValueToRValue>\n|       `-DeclRefExpr 0x2e0e828 <col:25> 'int *' lvalue ParmVar 0x2e0e680 'p' 'int *'"
Line 386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  386 always 386
  "void f ( int * p@1 ) { delete p@1 ; }" always "void f ( int * p@1 ) { delete p@1 ; }"
  clang always "|-FunctionDecl 0x2e0e740 <1.cpp:1:1, col:28> col:6 f 'void (int *)'\n| |-ParmVarDecl 0x2e0e680 <col:8, col:13> col:13 used p 'int *'\n| `-CompoundStmt 0x2e0ee70 <col:16, col:28>\n|   `-CXXDeleteExpr 0x2e0ee48 <col:18, col:25> 'void' Function 0x2e0ebb8 'operator delete' 'void (void *) noexcept'\n|     `-ImplicitCastExpr 0x2e0e850 <col:25> 'int *' <LValueToRValue>\n|       `-DeclRefExpr 0x2e0e828 <col:25> 'int *' lvalue ParmVar 0x2e0e680 'p' 'int *'"
Line 390
  196 always 196
  = always "`-CXXRecordDecl 0x8ecd60 <1.cpp:1:1, line:4:1> line:1:8 struct S definition\n  `-CXXDestructorDecl 0x8ed088 <line:3:3, col:9> col:3 ~S 'void () noexcept'\n    `-CompoundStmt 0x8ed1a8 <col:8, col:9>"
  "`-CXXRecordDecl 0x8ecd60 <1.cpp:1:1, line:4:1> line:1:8 struct S definition\n  `-CXXDestructorDecl 0x8ed088 <line:3:3, col:9> col:3 ~S 'void () noexcept'\n    `-CompoundStmt 0x8ed1a8 <col:8, col:9>" always "`-CXXRecordDecl 0x8ecd60 <1.cpp:1:1, line:4:1> line:1:8 struct S definition\n  `-CXXDestructorDecl 0x8ed088 <line:3:3, col:9> col:3 ~S 'void () noexcept'\n    `-CompoundStmt 0x8ed1a8 <col:8, col:9>"
Line 393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  393 always 393
  "struct S { ~S ( ) { } } ;" always "struct S { ~S ( ) { } } ;"
  clang always "`-CXXRecordDecl 0x8ecd60 <1.cpp:1:1, line:4:1> line:1:8 struct S definition\n  `-CXXDestructorDecl 0x8ed088 <line:3:3, col:9> col:3 ~S 'void () noexcept'\n    `-CompoundStmt 0x8ed1a8 <col:8, col:9>"
Line 397
  2523 always 2523
  = always "`-FunctionDecl 0x4280820 <line:4:1, line:8:1> line:4:6 foo 'void ()'\n  `-CompoundStmt 0x42810f0 <col:12, line:8:1>\n    `-CXXForRangeStmt 0x4281090 <line:5:3, line:7:3>\n      |-DeclStmt 0x4280c30 <line:5:17>\n      | `-VarDecl 0x42809c8 <col:17> col:17 implicit referenced __range1 'char const (&)[6]' cinit\n      |   `-DeclRefExpr 0x42808c0 <col:17> 'const char [6]' lvalue Var 0x4280678 'hello' 'const char [6]'\n      |-DeclStmt 0x4280ef8 <col:15>\n      | `-VarDecl 0x4280ca8 <col:15> col:15 implicit used __begin1 'const char *':'const char *' cinit\n      |   `-ImplicitCastExpr 0x4280e10 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0x4280c48 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |-DeclStmt 0x4280f10 <col:15>\n      | `-VarDecl 0x4280d18 <col:15, col:17> col:15 implicit used __end1 'const char *':'const char *' cinit\n      |   `-BinaryOperator 0x4280e60 <col:15, col:17> 'const char *' '+'\n      |     |-ImplicitCastExpr 0x4280e48 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0x4280c70 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |     `-IntegerLiteral 0x4280e28 <col:17> 'long' 6\n      |-BinaryOperator 0x4280fa8 <col:15> 'bool' '!='\n      | |-ImplicitCastExpr 0x4280f78 <col:15> 'const char *':'const char *' <LValueToRValue>\n      | | `-DeclRefExpr 0x4280f28 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      | `-ImplicitCastExpr 0x4280f90 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |   `-DeclRefExpr 0x4280f50 <col:15> 'const char *':'const char *' lvalue Var 0x4280d18 '__end1' 'const char *':'const char *'\n      |-UnaryOperator 0x4280ff8 <col:15> 'const char *':'const char *' lvalue prefix '++'\n      | `-DeclRefExpr 0x4280fd0 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      |-DeclStmt 0x4280958 <col:8, col:22>\n      | `-VarDecl 0x42808f8 <col:8, col:15> col:13 c1 'char' cinit\n      |   `-ImplicitCastExpr 0x4281078 <col:15> 'char' <LValueToRValue>\n      |     `-UnaryOperator 0x4281058 <col:15> 'const char' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0x4281040 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |         `-DeclRefExpr 0x4281018 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      `-CompoundStmt 0x42810e0 <col:24, line:7:3>"
  "`-FunctionDecl 0x4280820 <line:4:1, line:8:1> line:4:6 foo 'void ()'\n  `-CompoundStmt 0x42810f0 <col:12, line:8:1>\n    `-CXXForRangeStmt 0x4281090 <line:5:3, line:7:3>\n      |-DeclStmt 0x4280c30 <line:5:17>\n      | `-VarDecl 0x42809c8 <col:17> col:17 implicit referenced __range1 'char const (&)[6]' cinit\n      |   `-DeclRefExpr 0x42808c0 <col:17> 'const char [6]' lvalue Var 0x4280678 'hello' 'const char [6]'\n      |-DeclStmt 0x4280ef8 <col:15>\n      | `-VarDecl 0x4280ca8 <col:15> col:15 implicit used __begin1 'const char *':'const char *' cinit\n      |   `-ImplicitCastExpr 0x4280e10 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0x4280c48 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |-DeclStmt 0x4280f10 <col:15>\n      | `-VarDecl 0x4280d18 <col:15, col:17> col:15 implicit used __end1 'const char *':'const char *' cinit\n      |   `-BinaryOperator 0x4280e60 <col:15, col:17> 'const char *' '+'\n      |     |-ImplicitCastExpr 0x4280e48 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0x4280c70 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |     `-IntegerLiteral 0x4280e28 <col:17> 'long' 6\n      |-BinaryOperator 0x4280fa8 <col:15> 'bool' '!='\n      | |-ImplicitCastExpr 0x4280f78 <col:15> 'const char *':'const char *' <LValueToRValue>\n      | | `-DeclRefExpr 0x4280f28 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      | `-ImplicitCastExpr 0x4280f90 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |   `-DeclRefExpr 0x4280f50 <col:15> 'const char *':'const char *' lvalue Var 0x4280d18 '__end1' 'const char *':'const char *'\n      |-UnaryOperator 0x4280ff8 <col:15> 'const char *':'const char *' lvalue prefix '++'\n      | `-DeclRefExpr 0x4280fd0 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      |-DeclStmt 0x4280958 <col:8, col:22>\n      | `-VarDecl 0x42808f8 <col:8, col:15> col:13 c1 'char' cinit\n      |   `-ImplicitCastExpr 0x4281078 <col:15> 'char' <LValueToRValue>\n      |     `-UnaryOperator 0x4281058 <col:15> 'const char' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0x4281040 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |         `-DeclRefExpr 0x4281018 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      `-CompoundStmt 0x42810e0 <col:24, line:7:3>" always "`-FunctionDecl 0x4280820 <line:4:1, line:8:1> line:4:6 foo 'void ()'\n  `-CompoundStmt 0x42810f0 <col:12, line:8:1>\n    `-CXXForRangeStmt 0x4281090 <line:5:3, line:7:3>\n      |-DeclStmt 0x4280c30 <line:5:17>\n      | `-VarDecl 0x42809c8 <col:17> col:17 implicit referenced __range1 'char const (&)[6]' cinit\n      |   `-DeclRefExpr 0x42808c0 <col:17> 'const char [6]' lvalue Var 0x4280678 'hello' 'const char [6]'\n      |-DeclStmt 0x4280ef8 <col:15>\n      | `-VarDecl 0x4280ca8 <col:15> col:15 implicit used __begin1 'const char *':'const char *' cinit\n      |   `-ImplicitCastExpr 0x4280e10 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0x4280c48 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |-DeclStmt 0x4280f10 <col:15>\n      | `-VarDecl 0x4280d18 <col:15, col:17> col:15 implicit used __end1 'const char *':'const char *' cinit\n      |   `-BinaryOperator 0x4280e60 <col:15, col:17> 'const char *' '+'\n      |     |-ImplicitCastExpr 0x4280e48 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0x4280c70 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |     `-IntegerLiteral 0x4280e28 <col:17> 'long' 6\n      |-BinaryOperator 0x4280fa8 <col:15> 'bool' '!='\n      | |-ImplicitCastExpr 0x4280f78 <col:15> 'const char *':'const char *' <LValueToRValue>\n      | | `-DeclRefExpr 0x4280f28 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      | `-ImplicitCastExpr 0x4280f90 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |   `-DeclRefExpr 0x4280f50 <col:15> 'const char *':'const char *' lvalue Var 0x4280d18 '__end1' 'const char *':'const char *'\n      |-UnaryOperator 0x4280ff8 <col:15> 'const char *':'const char *' lvalue prefix '++'\n      | `-DeclRefExpr 0x4280fd0 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      |-DeclStmt 0x4280958 <col:8, col:22>\n      | `-VarDecl 0x42808f8 <col:8, col:15> col:13 c1 'char' cinit\n      |   `-ImplicitCastExpr 0x4281078 <col:15> 'char' <LValueToRValue>\n      |     `-UnaryOperator 0x4281058 <col:15> 'const char' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0x4281040 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |         `-DeclRefExpr 0x4281018 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      `-CompoundStmt 0x42810e0 <col:24, line:7:3>"
Line 427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  427 always 427
  "void foo ( ) { for ( char c1@1 : hello ) { } }" always "void foo ( ) { for ( char c1@1 : hello ) { } }"
  clang always "`-FunctionDecl 0x4280820 <line:4:1, line:8:1> line:4:6 foo 'void ()'\n  `-CompoundStmt 0x42810f0 <col:12, line:8:1>\n    `-CXXForRangeStmt 0x4281090 <line:5:3, line:7:3>\n      |-DeclStmt 0x4280c30 <line:5:17>\n      | `-VarDecl 0x42809c8 <col:17> col:17 implicit referenced __range1 'char const (&)[6]' cinit\n      |   `-DeclRefExpr 0x42808c0 <col:17> 'const char [6]' lvalue Var 0x4280678 'hello' 'const char [6]'\n      |-DeclStmt 0x4280ef8 <col:15>\n      | `-VarDecl 0x4280ca8 <col:15> col:15 implicit used __begin1 'const char *':'const char *' cinit\n      |   `-ImplicitCastExpr 0x4280e10 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0x4280c48 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |-DeclStmt 0x4280f10 <col:15>\n      | `-VarDecl 0x4280d18 <col:15, col:17> col:15 implicit used __end1 'const char *':'const char *' cinit\n      |   `-BinaryOperator 0x4280e60 <col:15, col:17> 'const char *' '+'\n      |     |-ImplicitCastExpr 0x4280e48 <col:15> 'const char *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0x4280c70 <col:15> 'char const[6]' lvalue Var 0x42809c8 '__range1' 'char const (&)[6]'\n      |     `-IntegerLiteral 0x4280e28 <col:17> 'long' 6\n      |-BinaryOperator 0x4280fa8 <col:15> 'bool' '!='\n      | |-ImplicitCastExpr 0x4280f78 <col:15> 'const char *':'const char *' <LValueToRValue>\n      | | `-DeclRefExpr 0x4280f28 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      | `-ImplicitCastExpr 0x4280f90 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |   `-DeclRefExpr 0x4280f50 <col:15> 'const char *':'const char *' lvalue Var 0x4280d18 '__end1' 'const char *':'const char *'\n      |-UnaryOperator 0x4280ff8 <col:15> 'const char *':'const char *' lvalue prefix '++'\n      | `-DeclRefExpr 0x4280fd0 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      |-DeclStmt 0x4280958 <col:8, col:22>\n      | `-VarDecl 0x42808f8 <col:8, col:15> col:13 c1 'char' cinit\n      |   `-ImplicitCastExpr 0x4281078 <col:15> 'char' <LValueToRValue>\n      |     `-UnaryOperator 0x4281058 <col:15> 'const char' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0x4281040 <col:15> 'const char *':'const char *' <LValueToRValue>\n      |         `-DeclRefExpr 0x4281018 <col:15> 'const char *':'const char *' lvalue Var 0x4280ca8 '__begin1' 'const char *':'const char *'\n      `-CompoundStmt 0x42810e0 <col:24, line:7:3>"
Line 433
  2492 always 2492
  = always "`-FunctionDecl 0xc15d98 <line:3:1, col:36> col:6 foo 'void ()'\n  `-CompoundStmt 0xc16668 <col:12, col:36>\n    `-CXXForRangeStmt 0xc165f8 <col:14, col:34>\n      |-<<<NULL>>>\n      |-DeclStmt 0xc161c0 <col:25>\n      | `-VarDecl 0xc15f48 <col:25> col:25 implicit referenced __range1 'int const (&)[4]' cinit\n      |   `-DeclRefExpr 0xc15e38 <col:25> 'const int [4]' lvalue Var 0xc15ac0 'values' 'const int [4]'\n      |-DeclStmt 0xc16498 <col:24>\n      | `-VarDecl 0xc16228 <col:24> col:24 implicit used __begin1 'const int *':'const int *' cinit\n      |   `-ImplicitCastExpr 0xc163b0 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0xc161d8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |-DeclStmt 0xc164b0 <col:24>\n      | `-VarDecl 0xc162a0 <col:24, col:25> col:24 implicit used __end1 'const int *':'const int *' cinit\n      |   `-BinaryOperator 0xc16400 <col:24, col:25> 'const int *' '+'\n      |     |-ImplicitCastExpr 0xc163e8 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0xc161f8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |     `-IntegerLiteral 0xc163c8 <col:25> 'long' 4\n      |-BinaryOperator 0xc16538 <col:24> 'bool' '!='\n      | |-ImplicitCastExpr 0xc16508 <col:24> 'const int *':'const int *' <LValueToRValue>\n      | | `-DeclRefExpr 0xc164c8 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      | `-ImplicitCastExpr 0xc16520 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |   `-DeclRefExpr 0xc164e8 <col:24> 'const int *':'const int *' lvalue Var 0xc162a0 '__end1' 'const int *':'const int *'\n      |-UnaryOperator 0xc16578 <col:24> 'const int *':'const int *' lvalue prefix '++'\n      | `-DeclRefExpr 0xc16558 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      |-DeclStmt 0xc15ed8 <col:19, col:31>\n      | `-VarDecl 0xc15e70 <col:19, col:24> col:23 v 'int' cinit\n      |   `-ImplicitCastExpr 0xc165e0 <col:24> 'int' <LValueToRValue>\n      |     `-UnaryOperator 0xc165c8 <col:24> 'const int' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0xc165b0 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |         `-DeclRefExpr 0xc16590 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      `-CompoundStmt 0xc16658 <col:33, col:34>"
  "`-FunctionDecl 0xc15d98 <line:3:1, col:36> col:6 foo 'void ()'\n  `-CompoundStmt 0xc16668 <col:12, col:36>\n    `-CXXForRangeStmt 0xc165f8 <col:14, col:34>\n      |-<<<NULL>>>\n      |-DeclStmt 0xc161c0 <col:25>\n      | `-VarDecl 0xc15f48 <col:25> col:25 implicit referenced __range1 'int const (&)[4]' cinit\n      |   `-DeclRefExpr 0xc15e38 <col:25> 'const int [4]' lvalue Var 0xc15ac0 'values' 'const int [4]'\n      |-DeclStmt 0xc16498 <col:24>\n      | `-VarDecl 0xc16228 <col:24> col:24 implicit used __begin1 'const int *':'const int *' cinit\n      |   `-ImplicitCastExpr 0xc163b0 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0xc161d8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |-DeclStmt 0xc164b0 <col:24>\n      | `-VarDecl 0xc162a0 <col:24, col:25> col:24 implicit used __end1 'const int *':'const int *' cinit\n      |   `-BinaryOperator 0xc16400 <col:24, col:25> 'const int *' '+'\n      |     |-ImplicitCastExpr 0xc163e8 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0xc161f8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |     `-IntegerLiteral 0xc163c8 <col:25> 'long' 4\n      |-BinaryOperator 0xc16538 <col:24> 'bool' '!='\n      | |-ImplicitCastExpr 0xc16508 <col:24> 'const int *':'const int *' <LValueToRValue>\n      | | `-DeclRefExpr 0xc164c8 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      | `-ImplicitCastExpr 0xc16520 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |   `-DeclRefExpr 0xc164e8 <col:24> 'const int *':'const int *' lvalue Var 0xc162a0 '__end1' 'const int *':'const int *'\n      |-UnaryOperator 0xc16578 <col:24> 'const int *':'const int *' lvalue prefix '++'\n      | `-DeclRefExpr 0xc16558 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      |-DeclStmt 0xc15ed8 <col:19, col:31>\n      | `-VarDecl 0xc15e70 <col:19, col:24> col:23 v 'int' cinit\n      |   `-ImplicitCastExpr 0xc165e0 <col:24> 'int' <LValueToRValue>\n      |     `-UnaryOperator 0xc165c8 <col:24> 'const int' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0xc165b0 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |         `-DeclRefExpr 0xc16590 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      `-CompoundStmt 0xc16658 <col:33, col:34>" always "`-FunctionDecl 0xc15d98 <line:3:1, col:36> col:6 foo 'void ()'\n  `-CompoundStmt 0xc16668 <col:12, col:36>\n    `-CXXForRangeStmt 0xc165f8 <col:14, col:34>\n      |-<<<NULL>>>\n      |-DeclStmt 0xc161c0 <col:25>\n      | `-VarDecl 0xc15f48 <col:25> col:25 implicit referenced __range1 'int const (&)[4]' cinit\n      |   `-DeclRefExpr 0xc15e38 <col:25> 'const int [4]' lvalue Var 0xc15ac0 'values' 'const int [4]'\n      |-DeclStmt 0xc16498 <col:24>\n      | `-VarDecl 0xc16228 <col:24> col:24 implicit used __begin1 'const int *':'const int *' cinit\n      |   `-ImplicitCastExpr 0xc163b0 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0xc161d8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |-DeclStmt 0xc164b0 <col:24>\n      | `-VarDecl 0xc162a0 <col:24, col:25> col:24 implicit used __end1 'const int *':'const int *' cinit\n      |   `-BinaryOperator 0xc16400 <col:24, col:25> 'const int *' '+'\n      |     |-ImplicitCastExpr 0xc163e8 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0xc161f8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |     `-IntegerLiteral 0xc163c8 <col:25> 'long' 4\n      |-BinaryOperator 0xc16538 <col:24> 'bool' '!='\n      | |-ImplicitCastExpr 0xc16508 <col:24> 'const int *':'const int *' <LValueToRValue>\n      | | `-DeclRefExpr 0xc164c8 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      | `-ImplicitCastExpr 0xc16520 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |   `-DeclRefExpr 0xc164e8 <col:24> 'const int *':'const int *' lvalue Var 0xc162a0 '__end1' 'const int *':'const int *'\n      |-UnaryOperator 0xc16578 <col:24> 'const int *':'const int *' lvalue prefix '++'\n      | `-DeclRefExpr 0xc16558 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      |-DeclStmt 0xc15ed8 <col:19, col:31>\n      | `-VarDecl 0xc15e70 <col:19, col:24> col:23 v 'int' cinit\n      |   `-ImplicitCastExpr 0xc165e0 <col:24> 'int' <LValueToRValue>\n      |     `-UnaryOperator 0xc165c8 <col:24> 'const int' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0xc165b0 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |         `-DeclRefExpr 0xc16590 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      `-CompoundStmt 0xc16658 <col:33, col:34>"
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  464 always 464
  "void foo ( ) { for ( int v@1 : values ) { } }" always "void foo ( ) { for ( int v@1 : values ) { } }"
  clang always "`-FunctionDecl 0xc15d98 <line:3:1, col:36> col:6 foo 'void ()'\n  `-CompoundStmt 0xc16668 <col:12, col:36>\n    `-CXXForRangeStmt 0xc165f8 <col:14, col:34>\n      |-<<<NULL>>>\n      |-DeclStmt 0xc161c0 <col:25>\n      | `-VarDecl 0xc15f48 <col:25> col:25 implicit referenced __range1 'int const (&)[4]' cinit\n      |   `-DeclRefExpr 0xc15e38 <col:25> 'const int [4]' lvalue Var 0xc15ac0 'values' 'const int [4]'\n      |-DeclStmt 0xc16498 <col:24>\n      | `-VarDecl 0xc16228 <col:24> col:24 implicit used __begin1 'const int *':'const int *' cinit\n      |   `-ImplicitCastExpr 0xc163b0 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     `-DeclRefExpr 0xc161d8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |-DeclStmt 0xc164b0 <col:24>\n      | `-VarDecl 0xc162a0 <col:24, col:25> col:24 implicit used __end1 'const int *':'const int *' cinit\n      |   `-BinaryOperator 0xc16400 <col:24, col:25> 'const int *' '+'\n      |     |-ImplicitCastExpr 0xc163e8 <col:24> 'const int *' <ArrayToPointerDecay>\n      |     | `-DeclRefExpr 0xc161f8 <col:24> 'int const[4]' lvalue Var 0xc15f48 '__range1' 'int const (&)[4]' non_odr_use_constant\n      |     `-IntegerLiteral 0xc163c8 <col:25> 'long' 4\n      |-BinaryOperator 0xc16538 <col:24> 'bool' '!='\n      | |-ImplicitCastExpr 0xc16508 <col:24> 'const int *':'const int *' <LValueToRValue>\n      | | `-DeclRefExpr 0xc164c8 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      | `-ImplicitCastExpr 0xc16520 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |   `-DeclRefExpr 0xc164e8 <col:24> 'const int *':'const int *' lvalue Var 0xc162a0 '__end1' 'const int *':'const int *'\n      |-UnaryOperator 0xc16578 <col:24> 'const int *':'const int *' lvalue prefix '++'\n      | `-DeclRefExpr 0xc16558 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      |-DeclStmt 0xc15ed8 <col:19, col:31>\n      | `-VarDecl 0xc15e70 <col:19, col:24> col:23 v 'int' cinit\n      |   `-ImplicitCastExpr 0xc165e0 <col:24> 'int' <LValueToRValue>\n      |     `-UnaryOperator 0xc165c8 <col:24> 'const int' lvalue prefix '*' cannot overflow\n      |       `-ImplicitCastExpr 0xc165b0 <col:24> 'const int *':'const int *' <LValueToRValue>\n      |         `-DeclRefExpr 0xc16590 <col:24> 'const int *':'const int *' lvalue Var 0xc16228 '__begin1' 'const int *':'const int *'\n      `-CompoundStmt 0xc16658 <col:33, col:34>"
Line 469
  1045 always 1045
  = always "`-FunctionDecl 0x156fe98 <line:1:1, line:3:1> line:1:5 main 'int (int, char **)'\n  |-ParmVarDecl 0x156fd00 <col:10, col:14> col:14 argc 'int'\n  |-ParmVarDecl 0x156fdb8 <col:20, col:27> col:27 argv 'char **'\n  `-CompoundStmt 0x1596410 <line:2:1, line:2:1>\n    |-DeclStmt 0x15946a8 <line:2:15, line:2:29>\n    | `-VarDecl 0x1570118 <line:2:15, line:2:28> col:11 used setCode 'MyVar<int>':'MyVar<int>' cinit\n    |   `-ExprWithCleanups 0x1594690 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>'\n    |     `-CXXConstructExpr 0x1594660 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (MyVar<int> &&) noexcept' elidable\n    |       `-MaterializeTemporaryExpr 0x1592b68 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' xvalue\n    |         `-CXXFunctionalCastExpr 0x1592b40 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' functional cast to MyVar<int> <ConstructorConversion>\n    |           `-CXXConstructExpr 0x15929f0 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (int)'\n    |             `-IntegerLiteral 0x1570248 <col:27> 'int' 5\n"
  "`-FunctionDecl 0x156fe98 <line:1:1, line:3:1> line:1:5 main 'int (int, char **)'\n  |-ParmVarDecl 0x156fd00 <col:10, col:14> col:14 argc 'int'\n  |-ParmVarDecl 0x156fdb8 <col:20, col:27> col:27 argv 'char **'\n  `-CompoundStmt 0x1596410 <line:2:1, line:2:1>\n    |-DeclStmt 0x15946a8 <line:2:15, line:2:29>\n    | `-VarDecl 0x1570118 <line:2:15, line:2:28> col:11 used setCode 'MyVar<int>':'MyVar<int>' cinit\n    |   `-ExprWithCleanups 0x1594690 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>'\n    |     `-CXXConstructExpr 0x1594660 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (MyVar<int> &&) noexcept' elidable\n    |       `-MaterializeTemporaryExpr 0x1592b68 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' xvalue\n    |         `-CXXFunctionalCastExpr 0x1592b40 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' functional cast to MyVar<int> <ConstructorConversion>\n    |           `-CXXConstructExpr 0x15929f0 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (int)'\n    |             `-IntegerLiteral 0x1570248 <col:27> 'int' 5\n" always "`-FunctionDecl 0x156fe98 <line:1:1, line:3:1> line:1:5 main 'int (int, char **)'\n  |-ParmVarDecl 0x156fd00 <col:10, col:14> col:14 argc 'int'\n  |-ParmVarDecl 0x156fdb8 <col:20, col:27> col:27 argv 'char **'\n  `-CompoundStmt 0x1596410 <line:2:1, line:2:1>\n    |-DeclStmt 0x15946a8 <line:2:15, line:2:29>\n    | `-VarDecl 0x1570118 <line:2:15, line:2:28> col:11 used setCode 'MyVar<int>':'MyVar<int>' cinit\n    |   `-ExprWithCleanups 0x1594690 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>'\n    |     `-CXXConstructExpr 0x1594660 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (MyVar<int> &&) noexcept' elidable\n    |       `-MaterializeTemporaryExpr 0x1592b68 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' xvalue\n    |         `-CXXFunctionalCastExpr 0x1592b40 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' functional cast to MyVar<int> <ConstructorConversion>\n    |           `-CXXConstructExpr 0x15929f0 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (int)'\n    |             `-IntegerLiteral 0x1570248 <col:27> 'int' 5\n"
Line 481
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  481 always 481
  "int main ( int argc@1 , char * * argv@2 ) { MyVar<int> setCode@3 = MyVar<int> ( 5 ) ; }" always "int main ( int argc@1 , char * * argv@2 ) { MyVar<int> setCode@3 = MyVar<int> ( 5 ) ; }"
  clang always "`-FunctionDecl 0x156fe98 <line:1:1, line:3:1> line:1:5 main 'int (int, char **)'\n  |-ParmVarDecl 0x156fd00 <col:10, col:14> col:14 argc 'int'\n  |-ParmVarDecl 0x156fdb8 <col:20, col:27> col:27 argv 'char **'\n  `-CompoundStmt 0x1596410 <line:2:1, line:2:1>\n    |-DeclStmt 0x15946a8 <line:2:15, line:2:29>\n    | `-VarDecl 0x1570118 <line:2:15, line:2:28> col:11 used setCode 'MyVar<int>':'MyVar<int>' cinit\n    |   `-ExprWithCleanups 0x1594690 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>'\n    |     `-CXXConstructExpr 0x1594660 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (MyVar<int> &&) noexcept' elidable\n    |       `-MaterializeTemporaryExpr 0x1592b68 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' xvalue\n    |         `-CXXFunctionalCastExpr 0x1592b40 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' functional cast to MyVar<int> <ConstructorConversion>\n    |           `-CXXConstructExpr 0x15929f0 <line:2:15, line:3:28> 'MyVar<int>':'MyVar<int>' 'void (int)'\n    |             `-IntegerLiteral 0x1570248 <col:27> 'int' 5\n"
Line 486
  574 always 574
  = always "`-FunctionDecl 0x320dc80 <line:2:1, col:33> col:6 bar 'void ()'\n  `-CompoundStmt 0x323bb08 <col:12, col:33>\n    |-DeclStmt 0x323ba40 <col:14, col:22>\n    | `-VarDecl 0x320df28 <col:14, col:21> col:21 used c 'C<int>':'C<int>' callinit\n    |   `-CXXConstructExpr 0x323ba10 <col:21> 'C<int>':'C<int>' 'void () noexcept'\n    `-CXXMemberCallExpr 0x323bab8 <col:24, col:30> 'int':'int'\n      `-MemberExpr 0x323ba80 <col:24, col:26> '<bound member function type>' .foo 0x320e160\n        `-DeclRefExpr 0x323ba58 <col:24> 'C<int>':'C<int>' lvalue Var 0x320df28 'c' 'C<int>':'C<int>'"
  "`-FunctionDecl 0x320dc80 <line:2:1, col:33> col:6 bar 'void ()'\n  `-CompoundStmt 0x323bb08 <col:12, col:33>\n    |-DeclStmt 0x323ba40 <col:14, col:22>\n    | `-VarDecl 0x320df28 <col:14, col:21> col:21 used c 'C<int>':'C<int>' callinit\n    |   `-CXXConstructExpr 0x323ba10 <col:21> 'C<int>':'C<int>' 'void () noexcept'\n    `-CXXMemberCallExpr 0x323bab8 <col:24, col:30> 'int':'int'\n      `-MemberExpr 0x323ba80 <col:24, col:26> '<bound member function type>' .foo 0x320e160\n        `-DeclRefExpr 0x323ba58 <col:24> 'C<int>':'C<int>' lvalue Var 0x320df28 'c' 'C<int>':'C<int>'" always "`-FunctionDecl 0x320dc80 <line:2:1, col:33> col:6 bar 'void ()'\n  `-CompoundStmt 0x323bb08 <col:12, col:33>\n    |-DeclStmt 0x323ba40 <col:14, col:22>\n    | `-VarDecl 0x320df28 <col:14, col:21> col:21 used c 'C<int>':'C<int>' callinit\n    |   `-CXXConstructExpr 0x323ba10 <col:21> 'C<int>':'C<int>' 'void () noexcept'\n    `-CXXMemberCallExpr 0x323bab8 <col:24, col:30> 'int':'int'\n      `-MemberExpr 0x323ba80 <col:24, col:26> '<bound member function type>' .foo 0x320e160\n        `-DeclRefExpr 0x323ba58 <col:24> 'C<int>':'C<int>' lvalue Var 0x320df28 'c' 'C<int>':'C<int>'"
Line 494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  494 always 494
  "void bar ( ) { C<int> c@1 ( C<int> ( ) ) ; c@1 . foo ( ) ; }" always "void bar ( ) { C<int> c@1 ( C<int> ( ) ) ; c@1 . foo ( ) ; }"
  clang always "`-FunctionDecl 0x320dc80 <line:2:1, col:33> col:6 bar 'void ()'\n  `-CompoundStmt 0x323bb08 <col:12, col:33>\n    |-DeclStmt 0x323ba40 <col:14, col:22>\n    | `-VarDecl 0x320df28 <col:14, col:21> col:21 used c 'C<int>':'C<int>' callinit\n    |   `-CXXConstructExpr 0x323ba10 <col:21> 'C<int>':'C<int>' 'void () noexcept'\n    `-CXXMemberCallExpr 0x323bab8 <col:24, col:30> 'int':'int'\n      `-MemberExpr 0x323ba80 <col:24, col:26> '<bound member function type>' .foo 0x320e160\n        `-DeclRefExpr 0x323ba58 <col:24> 'C<int>':'C<int>' lvalue Var 0x320df28 'c' 'C<int>':'C<int>'"
Line 498
  678 always 678
  = always "|-CXXMethodDecl 0x55c786f5ad60 <line:56:5, col:179> col:10 analyzeFile '_Bool (const std::string &, const std::string &, const std::string &, unsigned long long, std::list<ErrorLogger::ErrorMessage> *)'\n| |-ParmVarDecl 0x55c786f5a4c8 <col:22, col:41> col:41 buildDir 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a580 <col:51, col:70> col:70 sourcefile 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a638 <col:82, col:101> col:101 cfg 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a6a8 <col:106, col:125> col:125 checksum 'unsigned long long'\n| |-ParmVarDecl 0x55c786f5ac00 <col:135, col:173> col:173 errors 'std::list<ErrorLogger::ErrorMessage> *'\n  `-CompoundStmt 0x0 <>"
  "|-CXXMethodDecl 0x55c786f5ad60 <line:56:5, col:179> col:10 analyzeFile '_Bool (const std::string &, const std::string &, const std::string &, unsigned long long, std::list<ErrorLogger::ErrorMessage> *)'\n| |-ParmVarDecl 0x55c786f5a4c8 <col:22, col:41> col:41 buildDir 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a580 <col:51, col:70> col:70 sourcefile 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a638 <col:82, col:101> col:101 cfg 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a6a8 <col:106, col:125> col:125 checksum 'unsigned long long'\n| |-ParmVarDecl 0x55c786f5ac00 <col:135, col:173> col:173 errors 'std::list<ErrorLogger::ErrorMessage> *'\n  `-CompoundStmt 0x0 <>" always "|-CXXMethodDecl 0x55c786f5ad60 <line:56:5, col:179> col:10 analyzeFile '_Bool (const std::string &, const std::string &, const std::string &, unsigned long long, std::list<ErrorLogger::ErrorMessage> *)'\n| |-ParmVarDecl 0x55c786f5a4c8 <col:22, col:41> col:41 buildDir 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a580 <col:51, col:70> col:70 sourcefile 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a638 <col:82, col:101> col:101 cfg 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a6a8 <col:106, col:125> col:125 checksum 'unsigned long long'\n| |-ParmVarDecl 0x55c786f5ac00 <col:135, col:173> col:173 errors 'std::list<ErrorLogger::ErrorMessage> *'\n  `-CompoundStmt 0x0 <>"
Line 505
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  505 always 505
  "_Bool analyzeFile ( const std :: string & buildDir@1 , const std :: string & sourcefile@2 , const std :: string & cfg@3 , unsigned long long checksum@4 , std::list<ErrorLogger::ErrorMessage> * errors@5 ) { }" always "_Bool analyzeFile ( const std :: string & buildDir@1 , const std :: string & sourcefile@2 , const std :: string & cfg@3 , unsigned long long checksum@4 , std::list<ErrorLogger::ErrorMessage> * errors@5 ) { }"
  clang always "|-CXXMethodDecl 0x55c786f5ad60 <line:56:5, col:179> col:10 analyzeFile '_Bool (const std::string &, const std::string &, const std::string &, unsigned long long, std::list<ErrorLogger::ErrorMessage> *)'\n| |-ParmVarDecl 0x55c786f5a4c8 <col:22, col:41> col:41 buildDir 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a580 <col:51, col:70> col:70 sourcefile 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a638 <col:82, col:101> col:101 cfg 'const std::string &'\n| |-ParmVarDecl 0x55c786f5a6a8 <col:106, col:125> col:125 checksum 'unsigned long long'\n| |-ParmVarDecl 0x55c786f5ac00 <col:135, col:173> col:173 errors 'std::list<ErrorLogger::ErrorMessage> *'\n  `-CompoundStmt 0x0 <>"
Line 509
  362 always 362
  = always "`-CXXMethodDecl 0x220ecb0 parent 0x21e4c28 prev 0x21e5338 <line:11:1, line:18:1> line:14:1 find 'const typename char_traits<_CharT>::char_type *(const char_traits::char_type *, int, const char_traits::char_type &)'\n  `-CompoundStmt 0x220ede0 <line:15:1, line:18:1>\n    `-ReturnStmt 0x220edd0 <line:17:5, col:12>\n      `-IntegerLiteral 0x220edb0 <col:12> 'int' 0"
  "`-CXXMethodDecl 0x220ecb0 parent 0x21e4c28 prev 0x21e5338 <line:11:1, line:18:1> line:14:1 find 'const typename char_traits<_CharT>::char_type *(const char_traits::char_type *, int, const char_traits::char_type &)'\n  `-CompoundStmt 0x220ede0 <line:15:1, line:18:1>\n    `-ReturnStmt 0x220edd0 <line:17:5, col:12>\n      `-IntegerLiteral 0x220edb0 <col:12> 'int' 0" always "`-CXXMethodDecl 0x220ecb0 parent 0x21e4c28 prev 0x21e5338 <line:11:1, line:18:1> line:14:1 find 'const typename char_traits<_CharT>::char_type *(const char_traits::char_type *, int, const char_traits::char_type &)'\n  `-CompoundStmt 0x220ede0 <line:15:1, line:18:1>\n    `-ReturnStmt 0x220edd0 <line:17:5, col:12>\n      `-IntegerLiteral 0x220edb0 <col:12> 'int' 0"
Line 513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  513 always 513
  "" always ""
  clang always "`-CXXMethodDecl 0x220ecb0 parent 0x21e4c28 prev 0x21e5338 <line:11:1, line:18:1> line:14:1 find 'const typename char_traits<_CharT>::char_type *(const char_traits::char_type *, int, const char_traits::char_type &)'\n  `-CompoundStmt 0x220ede0 <line:15:1, line:18:1>\n    `-ReturnStmt 0x220edd0 <line:17:5, col:12>\n      `-IntegerLiteral 0x220edb0 <col:12> 'int' 0"
Line 517
  962 always 962
  = always "|-CXXRecordDecl 0x21cca40 <2.cpp:2:1, line:4:1> line:2:7 class Fred definition\n| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveConstructor exists simple trivial needs_implicit\n| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveAssignment exists simple trivial needs_implicit\n| | `-Destructor simple irrelevant trivial needs_implicit\n| |-CXXRecordDecl 0x21ccb58 <col:1, col:7> col:7 implicit class Fred\n| `-CXXMethodDecl 0x21ccc68 <line:3:1, col:10> col:6 foo 'void ()'\n`-CXXMethodDecl 0x21ccd60 parent 0x21cca40 prev 0x21ccc68 <line:6:1, col:19> col:12 foo 'void ()'\n  `-CompoundStmt 0x21cce50 <col:18, col:19>"
  "|-CXXRecordDecl 0x21cca40 <2.cpp:2:1, line:4:1> line:2:7 class Fred definition\n| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveConstructor exists simple trivial needs_implicit\n| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveAssignment exists simple trivial needs_implicit\n| | `-Destructor simple irrelevant trivial needs_implicit\n| |-CXXRecordDecl 0x21ccb58 <col:1, col:7> col:7 implicit class Fred\n| `-CXXMethodDecl 0x21ccc68 <line:3:1, col:10> col:6 foo 'void ()'\n`-CXXMethodDecl 0x21ccd60 parent 0x21cca40 prev 0x21ccc68 <line:6:1, col:19> col:12 foo 'void ()'\n  `-CompoundStmt 0x21cce50 <col:18, col:19>" always "|-CXXRecordDecl 0x21cca40 <2.cpp:2:1, line:4:1> line:2:7 class Fred definition\n| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveConstructor exists simple trivial needs_implicit\n| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveAssignment exists simple trivial needs_implicit\n| | `-Destructor simple irrelevant trivial needs_implicit\n| |-CXXRecordDecl 0x21ccb58 <col:1, col:7> col:7 implicit class Fred\n| `-CXXMethodDecl 0x21ccc68 <line:3:1, col:10> col:6 foo 'void ()'\n`-CXXMethodDecl 0x21ccd60 parent 0x21cca40 prev 0x21ccc68 <line:6:1, col:19> col:12 foo 'void ()'\n  `-CompoundStmt 0x21cce50 <col:18, col:19>"
Line 529
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  529 always 529
  "class Fred { void foo ( ) ; } ; void Fred :: foo ( ) { }" always "class Fred { void foo ( ) ; } ; void Fred :: foo ( ) { }"
  clang always "|-CXXRecordDecl 0x21cca40 <2.cpp:2:1, line:4:1> line:2:7 class Fred definition\n| |-DefinitionData pass_in_registers empty aggregate standard_layout trivially_copyable pod trivial literal has_constexpr_non_copy_move_ctor can_const_default_init\n| | |-DefaultConstructor exists trivial constexpr needs_implicit defaulted_is_constexpr\n| | |-CopyConstructor simple trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveConstructor exists simple trivial needs_implicit\n| | |-CopyAssignment trivial has_const_param needs_implicit implicit_has_const_param\n| | |-MoveAssignment exists simple trivial needs_implicit\n| | `-Destructor simple irrelevant trivial needs_implicit\n| |-CXXRecordDecl 0x21ccb58 <col:1, col:7> col:7 implicit class Fred\n| `-CXXMethodDecl 0x21ccc68 <line:3:1, col:10> col:6 foo 'void ()'\n`-CXXMethodDecl 0x21ccd60 parent 0x21cca40 prev 0x21ccc68 <line:6:1, col:19> col:12 foo 'void ()'\n  `-CompoundStmt 0x21cce50 <col:18, col:19>"
Line 533
  467 always 467
  = always "|-ClassTemplateSpecializationDecl 0x15d82f8 <line:7:3, line:18:3> line:8:12 struct char_traits definition\n| |-TemplateArgument type 'char'\n| | `-BuiltinType 0x15984c0 'char'\n| |-CXXRecordDecl 0x15d8520 <col:5, col:12> col:12 implicit struct char_traits\n| |-CXXMethodDecl 0x15d8738 <line:12:7, line:16:7> line:13:7 move 'char *(char *)' static\n| | |-ParmVarDecl 0x15d8630 <col:12, col:18> col:18 used __s1 'char *'\n| | `-CompoundStmt 0x15d88e8 <line:14:7, line:16:7>\n"
  "|-ClassTemplateSpecializationDecl 0x15d82f8 <line:7:3, line:18:3> line:8:12 struct char_traits definition\n| |-TemplateArgument type 'char'\n| | `-BuiltinType 0x15984c0 'char'\n| |-CXXRecordDecl 0x15d8520 <col:5, col:12> col:12 implicit struct char_traits\n| |-CXXMethodDecl 0x15d8738 <line:12:7, line:16:7> line:13:7 move 'char *(char *)' static\n| | |-ParmVarDecl 0x15d8630 <col:12, col:18> col:18 used __s1 'char *'\n| | `-CompoundStmt 0x15d88e8 <line:14:7, line:16:7>\n" always "|-ClassTemplateSpecializationDecl 0x15d82f8 <line:7:3, line:18:3> line:8:12 struct char_traits definition\n| |-TemplateArgument type 'char'\n| | `-BuiltinType 0x15984c0 'char'\n| |-CXXRecordDecl 0x15d8520 <col:5, col:12> col:12 implicit struct char_traits\n| |-CXXMethodDecl 0x15d8738 <line:12:7, line:16:7> line:13:7 move 'char *(char *)' static\n| | |-ParmVarDecl 0x15d8630 <col:12, col:18> col:18 used __s1 'char *'\n| | `-CompoundStmt 0x15d88e8 <line:14:7, line:16:7>\n"
Line 540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  540 always 540
  "struct char_traits<char> { static char * move ( char * __s1@1 ) { } } ;" always "struct char_traits<char> { static char * move ( char * __s1@1 ) { } } ;"
  clang always "|-ClassTemplateSpecializationDecl 0x15d82f8 <line:7:3, line:18:3> line:8:12 struct char_traits definition\n| |-TemplateArgument type 'char'\n| | `-BuiltinType 0x15984c0 'char'\n| |-CXXRecordDecl 0x15d8520 <col:5, col:12> col:12 implicit struct char_traits\n| |-CXXMethodDecl 0x15d8738 <line:12:7, line:16:7> line:13:7 move 'char *(char *)' static\n| | |-ParmVarDecl 0x15d8630 <col:12, col:18> col:18 used __s1 'char *'\n| | `-CompoundStmt 0x15d88e8 <line:14:7, line:16:7>\n"
Line 545
  472 always 472
  = always "|-VarDecl 0x3a97680 <1.cpp:2:1, col:14> col:6 i 'int *' cinit\n| `-CXXNewExpr 0x3a97d18 <col:10, col:14> 'int *' Function 0x3a97778 'operator new' 'void *(unsigned long)'\n`-VarDecl 0x3a97d80 <line:3:1, col:21> col:6 j 'int *' cinit\n  `-CXXNewExpr 0x3a97e68 <col:10, col:21> 'int *' array Function 0x3a978c0 'operator new[]' 'void *(unsigned long)'\n    `-ImplicitCastExpr 0x3a97e18 <col:18> 'unsigned long' <IntegralCast>\n      `-IntegerLiteral 0x3a97de0 <col:18> 'int' 100"
  "|-VarDecl 0x3a97680 <1.cpp:2:1, col:14> col:6 i 'int *' cinit\n| `-CXXNewExpr 0x3a97d18 <col:10, col:14> 'int *' Function 0x3a97778 'operator new' 'void *(unsigned long)'\n`-VarDecl 0x3a97d80 <line:3:1, col:21> col:6 j 'int *' cinit\n  `-CXXNewExpr 0x3a97e68 <col:10, col:21> 'int *' array Function 0x3a978c0 'operator new[]' 'void *(unsigned long)'\n    `-ImplicitCastExpr 0x3a97e18 <col:18> 'unsigned long' <IntegralCast>\n      `-IntegerLiteral 0x3a97de0 <col:18> 'int' 100" always "|-VarDecl 0x3a97680 <1.cpp:2:1, col:14> col:6 i 'int *' cinit\n| `-CXXNewExpr 0x3a97d18 <col:10, col:14> 'int *' Function 0x3a97778 'operator new' 'void *(unsigned long)'\n`-VarDecl 0x3a97d80 <line:3:1, col:21> col:6 j 'int *' cinit\n  `-CXXNewExpr 0x3a97e68 <col:10, col:21> 'int *' array Function 0x3a978c0 'operator new[]' 'void *(unsigned long)'\n    `-ImplicitCastExpr 0x3a97e18 <col:18> 'unsigned long' <IntegralCast>\n      `-IntegerLiteral 0x3a97de0 <col:18> 'int' 100"
Line 551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  551 always 551
  "int * i@1 = new int ; int * j@2 = new int [ 100 ] ;" always "int * i@1 = new int ; int * j@2 = new int [ 100 ] ;"
  clang always "|-VarDecl 0x3a97680 <1.cpp:2:1, col:14> col:6 i 'int *' cinit\n| `-CXXNewExpr 0x3a97d18 <col:10, col:14> 'int *' Function 0x3a97778 'operator new' 'void *(unsigned long)'\n`-VarDecl 0x3a97d80 <line:3:1, col:21> col:6 j 'int *' cinit\n  `-CXXNewExpr 0x3a97e68 <col:10, col:21> 'int *' array Function 0x3a978c0 'operator new[]' 'void *(unsigned long)'\n    `-ImplicitCastExpr 0x3a97e18 <col:18> 'unsigned long' <IntegralCast>\n      `-IntegerLiteral 0x3a97de0 <col:18> 'int' 100"
Line 556
  338 always 338
  = always "|-FunctionDecl 0x59a188 <line:7:1, line:9:1> line:7:11 f 'struct S *()'\n| `-CompoundStmt 0x5c4318 <col:15, line:9:1>\n|   `-ReturnStmt 0x5c4308 <line:8:3, col:14>\n|     `-CXXNewExpr 0x5c42c8 <col:10, col:14> 'S *' Function 0x59a378 'operator new' 'void *(unsigned long)'\n|       `-CXXConstructExpr 0x5c42a0 <col:14> 'S' 'void () noexcept'"
  "|-FunctionDecl 0x59a188 <line:7:1, line:9:1> line:7:11 f 'struct S *()'\n| `-CompoundStmt 0x5c4318 <col:15, line:9:1>\n|   `-ReturnStmt 0x5c4308 <line:8:3, col:14>\n|     `-CXXNewExpr 0x5c42c8 <col:10, col:14> 'S *' Function 0x59a378 'operator new' 'void *(unsigned long)'\n|       `-CXXConstructExpr 0x5c42a0 <col:14> 'S' 'void () noexcept'" always "|-FunctionDecl 0x59a188 <line:7:1, line:9:1> line:7:11 f 'struct S *()'\n| `-CompoundStmt 0x5c4318 <col:15, line:9:1>\n|   `-ReturnStmt 0x5c4308 <line:8:3, col:14>\n|     `-CXXNewExpr 0x5c42c8 <col:10, col:14> 'S *' Function 0x59a378 'operator new' 'void *(unsigned long)'\n|       `-CXXConstructExpr 0x5c42a0 <col:14> 'S' 'void () noexcept'"
Line 561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  561 always 561
  "struct S * f ( ) { return new S ( ) ; }" always "struct S * f ( ) { return new S ( ) ; }"
  clang always "|-FunctionDecl 0x59a188 <line:7:1, line:9:1> line:7:11 f 'struct S *()'\n| `-CompoundStmt 0x5c4318 <col:15, line:9:1>\n|   `-ReturnStmt 0x5c4308 <line:8:3, col:14>\n|     `-CXXNewExpr 0x5c42c8 <col:10, col:14> 'S *' Function 0x59a378 'operator new' 'void *(unsigned long)'\n|       `-CXXConstructExpr 0x5c42a0 <col:14> 'S' 'void () noexcept'"
Line 566
  200 always 200
  = always "`-VarDecl 0x2a7d650 <1.cpp:1:1, col:17> col:13 p 'const char *' cinit\n  `-ImplicitCastExpr 0x2a7d708 <col:17> 'const char *' <NullToPointer>\n    `-CXXNullPtrLiteralExpr 0x2a7d6f0 <col:17> 'nullptr_t'"
  "`-VarDecl 0x2a7d650 <1.cpp:1:1, col:17> col:13 p 'const char *' cinit\n  `-ImplicitCastExpr 0x2a7d708 <col:17> 'const char *' <NullToPointer>\n    `-CXXNullPtrLiteralExpr 0x2a7d6f0 <col:17> 'nullptr_t'" always "`-VarDecl 0x2a7d650 <1.cpp:1:1, col:17> col:13 p 'const char *' cinit\n  `-ImplicitCastExpr 0x2a7d708 <col:17> 'const char *' <NullToPointer>\n    `-CXXNullPtrLiteralExpr 0x2a7d6f0 <col:17> 'nullptr_t'"
Line 569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  569 always 569
  "const char * p@1 = nullptr ;" always "const char * p@1 = nullptr ;"
  clang always "`-VarDecl 0x2a7d650 <1.cpp:1:1, col:17> col:13 p 'const char *' cinit\n  `-ImplicitCastExpr 0x2a7d708 <col:17> 'const char *' <NullToPointer>\n    `-CXXNullPtrLiteralExpr 0x2a7d6f0 <col:17> 'nullptr_t'"
Line 573
  662 always 662
  = always "`-FunctionDecl 0x3c099f0 <line:2:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x3c37308 <col:12, col:24>\n    |-DeclStmt 0x3c0a060 <col:14, col:17>\n    | `-VarDecl 0x3c09ae0 <col:14, col:16> col:16 used c 'C' callinit\n    |   `-CXXConstructExpr 0x3c0a030 <col:16> 'C' 'void () noexcept'\n    `-CXXOperatorCallExpr 0x3c372c0 <col:19, col:21> 'void'\n      |-ImplicitCastExpr 0x3c372a8 <col:20> 'void (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x3c37250 <col:20> 'void (int)' lvalue CXXMethod 0x3c098c0 'operator=' 'void (int)'\n      |-DeclRefExpr 0x3c0a078 <col:19> 'C' lvalue Var 0x3c09ae0 'c' 'C'\n      `-IntegerLiteral 0x3c0a0a0 <col:21> 'int' 4"
  "`-FunctionDecl 0x3c099f0 <line:2:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x3c37308 <col:12, col:24>\n    |-DeclStmt 0x3c0a060 <col:14, col:17>\n    | `-VarDecl 0x3c09ae0 <col:14, col:16> col:16 used c 'C' callinit\n    |   `-CXXConstructExpr 0x3c0a030 <col:16> 'C' 'void () noexcept'\n    `-CXXOperatorCallExpr 0x3c372c0 <col:19, col:21> 'void'\n      |-ImplicitCastExpr 0x3c372a8 <col:20> 'void (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x3c37250 <col:20> 'void (int)' lvalue CXXMethod 0x3c098c0 'operator=' 'void (int)'\n      |-DeclRefExpr 0x3c0a078 <col:19> 'C' lvalue Var 0x3c09ae0 'c' 'C'\n      `-IntegerLiteral 0x3c0a0a0 <col:21> 'int' 4" always "`-FunctionDecl 0x3c099f0 <line:2:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x3c37308 <col:12, col:24>\n    |-DeclStmt 0x3c0a060 <col:14, col:17>\n    | `-VarDecl 0x3c09ae0 <col:14, col:16> col:16 used c 'C' callinit\n    |   `-CXXConstructExpr 0x3c0a030 <col:16> 'C' 'void () noexcept'\n    `-CXXOperatorCallExpr 0x3c372c0 <col:19, col:21> 'void'\n      |-ImplicitCastExpr 0x3c372a8 <col:20> 'void (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x3c37250 <col:20> 'void (int)' lvalue CXXMethod 0x3c098c0 'operator=' 'void (int)'\n      |-DeclRefExpr 0x3c0a078 <col:19> 'C' lvalue Var 0x3c09ae0 'c' 'C'\n      `-IntegerLiteral 0x3c0a0a0 <col:21> 'int' 4"
Line 583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  583 always 583
  "void foo ( ) { C c@1 ( C ( ) ) ; c@1 . operator= ( 4 ) ; }" always "void foo ( ) { C c@1 ( C ( ) ) ; c@1 . operator= ( 4 ) ; }"
  clang always "`-FunctionDecl 0x3c099f0 <line:2:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x3c37308 <col:12, col:24>\n    |-DeclStmt 0x3c0a060 <col:14, col:17>\n    | `-VarDecl 0x3c09ae0 <col:14, col:16> col:16 used c 'C' callinit\n    |   `-CXXConstructExpr 0x3c0a030 <col:16> 'C' 'void () noexcept'\n    `-CXXOperatorCallExpr 0x3c372c0 <col:19, col:21> 'void'\n      |-ImplicitCastExpr 0x3c372a8 <col:20> 'void (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x3c37250 <col:20> 'void (int)' lvalue CXXMethod 0x3c098c0 'operator=' 'void (int)'\n      |-DeclRefExpr 0x3c0a078 <col:19> 'C' lvalue Var 0x3c09ae0 'c' 'C'\n      `-IntegerLiteral 0x3c0a0a0 <col:21> 'int' 4"
Line 587
  61 always 61
  = always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 class Foo"
  "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 class Foo" always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 class Foo"
Line 588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  588 always 588
  "class Foo ;" always "class Foo ;"
  clang always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 class Foo"
Line 592
  73 always 73
  = always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 struct Foo definition"
  "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 struct Foo definition" always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 struct Foo definition"
Line 593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  593 always 593
  "struct Foo { } ;" always "struct Foo { } ;"
  clang always "`-CXXRecordDecl 0x34cc5f8 <1.cpp:2:1, col:7> col:7 struct Foo definition"
Line 597
  425 always 425
  = always "|-CXXRecordDecl 0x19ccd38 <e.cpp:4:1, line:6:1> line:4:8 referenced struct base definition\n| `-VarDecl 0x19ccf00 <line:5:5, col:35> col:27 value 'const bool' static constexpr cinit\n|   |-value: Int 0\n|   `-CXXBoolLiteralExpr 0x19ccf68 <col:35> 'bool' false\n`-CXXRecordDecl 0x19ccfe8 <line:8:1, col:32> col:8 struct derived definition\n  |-public 'base'\n  `-CXXRecordDecl 0x19cd150 <col:1, col:8> col:8 implicit struct derived"
  "|-CXXRecordDecl 0x19ccd38 <e.cpp:4:1, line:6:1> line:4:8 referenced struct base definition\n| `-VarDecl 0x19ccf00 <line:5:5, col:35> col:27 value 'const bool' static constexpr cinit\n|   |-value: Int 0\n|   `-CXXBoolLiteralExpr 0x19ccf68 <col:35> 'bool' false\n`-CXXRecordDecl 0x19ccfe8 <line:8:1, col:32> col:8 struct derived definition\n  |-public 'base'\n  `-CXXRecordDecl 0x19cd150 <col:1, col:8> col:8 implicit struct derived" always "|-CXXRecordDecl 0x19ccd38 <e.cpp:4:1, line:6:1> line:4:8 referenced struct base definition\n| `-VarDecl 0x19ccf00 <line:5:5, col:35> col:27 value 'const bool' static constexpr cinit\n|   |-value: Int 0\n|   `-CXXBoolLiteralExpr 0x19ccf68 <col:35> 'bool' false\n`-CXXRecordDecl 0x19ccfe8 <line:8:1, col:32> col:8 struct derived definition\n  |-public 'base'\n  `-CXXRecordDecl 0x19cd150 <col:1, col:8> col:8 implicit struct derived"
Line 605
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  605 always 605
  "struct base { static const bool value@1 = false ; } ; struct derived : public base { } ;" always "struct base { static const bool value@1 = false ; } ; struct derived : public base { } ;"
  clang always "|-CXXRecordDecl 0x19ccd38 <e.cpp:4:1, line:6:1> line:4:8 referenced struct base definition\n| `-VarDecl 0x19ccf00 <line:5:5, col:35> col:27 value 'const bool' static constexpr cinit\n|   |-value: Int 0\n|   `-CXXBoolLiteralExpr 0x19ccf68 <col:35> 'bool' false\n`-CXXRecordDecl 0x19ccfe8 <line:8:1, col:32> col:8 struct derived definition\n  |-public 'base'\n  `-CXXRecordDecl 0x19cd150 <col:1, col:8> col:8 implicit struct derived"
Line 609
  186 always 186
  = always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x2e0e728 <col:9, col:27> 'int' static_cast<int> <NoOp>\n    `-IntegerLiteral 0x2e0e6f0 <col:26> 'int' 0"
  "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x2e0e728 <col:9, col:27> 'int' static_cast<int> <NoOp>\n    `-IntegerLiteral 0x2e0e6f0 <col:26> 'int' 0" always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x2e0e728 <col:9, col:27> 'int' static_cast<int> <NoOp>\n    `-IntegerLiteral 0x2e0e6f0 <col:26> 'int' 0"
Line 612
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  612 always 612
  "int a@1 = static_cast<int> ( 0 ) ;" always "int a@1 = static_cast<int> ( 0 ) ;"
  clang always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x2e0e728 <col:9, col:27> 'int' static_cast<int> <NoOp>\n    `-IntegerLiteral 0x2e0e6f0 <col:26> 'int' 0"
Line 616
  612 always 612
  = always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x3e453e8 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' xvalue static_cast<struct std::_Rb_tree_iterator<struct std::pair<const class std::__cxx11::basic_string<char>, struct Library::AllocFunc> > &&> <NoOp>\n    `-DeclRefExpr 0x3e453b0 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' lvalue ParmVar 0x3e45250 '' 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> > &&'"
  "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x3e453e8 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' xvalue static_cast<struct std::_Rb_tree_iterator<struct std::pair<const class std::__cxx11::basic_string<char>, struct Library::AllocFunc> > &&> <NoOp>\n    `-DeclRefExpr 0x3e453b0 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' lvalue ParmVar 0x3e45250 '' 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> > &&'" always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x3e453e8 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' xvalue static_cast<struct std::_Rb_tree_iterator<struct std::pair<const class std::__cxx11::basic_string<char>, struct Library::AllocFunc> > &&> <NoOp>\n    `-DeclRefExpr 0x3e453b0 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' lvalue ParmVar 0x3e45250 '' 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> > &&'"
Line 619
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  619 always 619
  "int a@1 = static_cast<structstd::_Rb_tree_iterator<structstd::pair<constclassstd::__cxx11::basic_string<char>,structLibrary::AllocFunc>>&&> ( <NoName> ) ;" always "int a@1 = static_cast<structstd::_Rb_tree_iterator<structstd::pair<constclassstd::__cxx11::basic_string<char>,structLibrary::AllocFunc>>&&> ( <NoName> ) ;"
  clang always "`-VarDecl 0x2e0e650 <a.cpp:2:1, col:27> col:5 a 'int' cinit\n  `-CXXStaticCastExpr 0x3e453e8 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' xvalue static_cast<struct std::_Rb_tree_iterator<struct std::pair<const class std::__cxx11::basic_string<char>, struct Library::AllocFunc> > &&> <NoOp>\n    `-DeclRefExpr 0x3e453b0 <col:12> 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> >' lvalue ParmVar 0x3e45250 '' 'std::_Rb_tree_iterator<std::pair<const std::__cxx11::basic_string<char>, Library::AllocFunc> > &&'"
Line 623
  1069 always 1069
  = always "`-ClassTemplateSpecializationDecl 0xd842d8 <line:4:3, line:7:3> line:4:21 struct char_traits definition\n  |-TemplateArgument type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  |-CXXRecordDecl 0xd84500 <col:14, col:21> col:21 implicit struct char_traits\n  |-TypedefDecl 0xd845a0 <line:5:7, col:20> col:20 referenced char_type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  `-CXXMethodDecl 0xd847b0 <line:6:7, col:80> col:18 assign 'char_traits<char>::char_type *(char_traits<char>::char_type *)'\n    |-ParmVarDecl 0xd84670 <col:25, col:36> col:36 used __s 'char_traits<char>::char_type *'\n    `-CompoundStmt 0xd848f8 <col:41, col:80>\n      `-ReturnStmt 0xd848e8 <col:43, col:77>\n        `-CXXStaticCastExpr 0xd848b8 <col:50, col:77> 'char_traits<char>::char_type *' static_cast<char_traits<char>::char_type *> <NoOp>\n          `-ImplicitCastExpr 0xd848a0 <col:74> 'char_traits<char>::char_type *' <LValueToRValue> part_of_explicit_cast\n            `-DeclRefExpr 0xd84870 <col:74> 'char_traits<char>::char_type *' lvalue ParmVar 0xd84670 '__s' 'char_traits<char>::char_type *'\n"
  "`-ClassTemplateSpecializationDecl 0xd842d8 <line:4:3, line:7:3> line:4:21 struct char_traits definition\n  |-TemplateArgument type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  |-CXXRecordDecl 0xd84500 <col:14, col:21> col:21 implicit struct char_traits\n  |-TypedefDecl 0xd845a0 <line:5:7, col:20> col:20 referenced char_type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  `-CXXMethodDecl 0xd847b0 <line:6:7, col:80> col:18 assign 'char_traits<char>::char_type *(char_traits<char>::char_type *)'\n    |-ParmVarDecl 0xd84670 <col:25, col:36> col:36 used __s 'char_traits<char>::char_type *'\n    `-CompoundStmt 0xd848f8 <col:41, col:80>\n      `-ReturnStmt 0xd848e8 <col:43, col:77>\n        `-CXXStaticCastExpr 0xd848b8 <col:50, col:77> 'char_traits<char>::char_type *' static_cast<char_traits<char>::char_type *> <NoOp>\n          `-ImplicitCastExpr 0xd848a0 <col:74> 'char_traits<char>::char_type *' <LValueToRValue> part_of_explicit_cast\n            `-DeclRefExpr 0xd84870 <col:74> 'char_traits<char>::char_type *' lvalue ParmVar 0xd84670 '__s' 'char_traits<char>::char_type *'\n" always "`-ClassTemplateSpecializationDecl 0xd842d8 <line:4:3, line:7:3> line:4:21 struct char_traits definition\n  |-TemplateArgument type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  |-CXXRecordDecl 0xd84500 <col:14, col:21> col:21 implicit struct char_traits\n  |-TypedefDecl 0xd845a0 <line:5:7, col:20> col:20 referenced char_type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  `-CXXMethodDecl 0xd847b0 <line:6:7, col:80> col:18 assign 'char_traits<char>::char_type *(char_traits<char>::char_type *)'\n    |-ParmVarDecl 0xd84670 <col:25, col:36> col:36 used __s 'char_traits<char>::char_type *'\n    `-CompoundStmt 0xd848f8 <col:41, col:80>\n      `-ReturnStmt 0xd848e8 <col:43, col:77>\n        `-CXXStaticCastExpr 0xd848b8 <col:50, col:77> 'char_traits<char>::char_type *' static_cast<char_traits<char>::char_type *> <NoOp>\n          `-ImplicitCastExpr 0xd848a0 <col:74> 'char_traits<char>::char_type *' <LValueToRValue> part_of_explicit_cast\n            `-DeclRefExpr 0xd84870 <col:74> 'char_traits<char>::char_type *' lvalue ParmVar 0xd84670 '__s' 'char_traits<char>::char_type *'\n"
Line 637
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  637 always 637
  "struct char_traits<char> { typedef char char_type ; char_traits<char>::char_type * assign ( char_traits<char>::char_type * __s@1 ) { return static_cast<char_traits<char>::char_type*> ( __s@1 ) ; } } ;" always "struct char_traits<char> { typedef char char_type ; char_traits<char>::char_type * assign ( char_traits<char>::char_type * __s@1 ) { return static_cast<char_traits<char>::char_type*> ( __s@1 ) ; } } ;"
  clang always "`-ClassTemplateSpecializationDecl 0xd842d8 <line:4:3, line:7:3> line:4:21 struct char_traits definition\n  |-TemplateArgument type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  |-CXXRecordDecl 0xd84500 <col:14, col:21> col:21 implicit struct char_traits\n  |-TypedefDecl 0xd845a0 <line:5:7, col:20> col:20 referenced char_type 'char'\n  | `-BuiltinType 0xd444c0 'char'\n  `-CXXMethodDecl 0xd847b0 <line:6:7, col:80> col:18 assign 'char_traits<char>::char_type *(char_traits<char>::char_type *)'\n    |-ParmVarDecl 0xd84670 <col:25, col:36> col:36 used __s 'char_traits<char>::char_type *'\n    `-CompoundStmt 0xd848f8 <col:41, col:80>\n      `-ReturnStmt 0xd848e8 <col:43, col:77>\n        `-CXXStaticCastExpr 0xd848b8 <col:50, col:77> 'char_traits<char>::char_type *' static_cast<char_traits<char>::char_type *> <NoOp>\n          `-ImplicitCastExpr 0xd848a0 <col:74> 'char_traits<char>::char_type *' <LValueToRValue> part_of_explicit_cast\n            `-DeclRefExpr 0xd84870 <col:74> 'char_traits<char>::char_type *' lvalue ParmVar 0xd84670 '__s' 'char_traits<char>::char_type *'\n"
Line 641
  1138 always 1138
  = always "`-VarDecl 0x2f92060 <1.cpp:3:1, col:25> col:18 x 'std::vector<int>':'std::vector<int, std::allocator<int> >' listinit\n  `-ExprWithCleanups 0x2fb0b40 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >'\n    `-CXXConstructExpr 0x2fb0b00 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >' 'void (initializer_list<std::vector<int, std::allocator<int> >::value_type>, const std::vector<int, std::allocator<int> >::allocator_type &)' list std::initializer_list\n      |-CXXStdInitializerListExpr 0x2fb0928 <col:19, col:25> 'initializer_list<std::vector<int, std::allocator<int> >::value_type>':'std::initializer_list<int>'\n      | `-MaterializeTemporaryExpr 0x2fb0910 <col:19, col:25> 'const int [3]' xvalue\n      |   `-InitListExpr 0x2fb08b8 <col:19, col:25> 'const int [3]'\n      |     |-IntegerLiteral 0x2f920c0 <col:20> 'int' 1\n      |     |-IntegerLiteral 0x2f920e0 <col:22> 'int' 2\n      |     `-IntegerLiteral 0x2f92100 <col:24> 'int' 3\n      `-CXXDefaultArgExpr 0x2fb0ae0 <<invalid sloc>> 'const std::vector<int, std::allocator<int> >::allocator_type':'const std::allocator<int>' lvalue"
  "`-VarDecl 0x2f92060 <1.cpp:3:1, col:25> col:18 x 'std::vector<int>':'std::vector<int, std::allocator<int> >' listinit\n  `-ExprWithCleanups 0x2fb0b40 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >'\n    `-CXXConstructExpr 0x2fb0b00 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >' 'void (initializer_list<std::vector<int, std::allocator<int> >::value_type>, const std::vector<int, std::allocator<int> >::allocator_type &)' list std::initializer_list\n      |-CXXStdInitializerListExpr 0x2fb0928 <col:19, col:25> 'initializer_list<std::vector<int, std::allocator<int> >::value_type>':'std::initializer_list<int>'\n      | `-MaterializeTemporaryExpr 0x2fb0910 <col:19, col:25> 'const int [3]' xvalue\n      |   `-InitListExpr 0x2fb08b8 <col:19, col:25> 'const int [3]'\n      |     |-IntegerLiteral 0x2f920c0 <col:20> 'int' 1\n      |     |-IntegerLiteral 0x2f920e0 <col:22> 'int' 2\n      |     `-IntegerLiteral 0x2f92100 <col:24> 'int' 3\n      `-CXXDefaultArgExpr 0x2fb0ae0 <<invalid sloc>> 'const std::vector<int, std::allocator<int> >::allocator_type':'const std::allocator<int>' lvalue" always "`-VarDecl 0x2f92060 <1.cpp:3:1, col:25> col:18 x 'std::vector<int>':'std::vector<int, std::allocator<int> >' listinit\n  `-ExprWithCleanups 0x2fb0b40 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >'\n    `-CXXConstructExpr 0x2fb0b00 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >' 'void (initializer_list<std::vector<int, std::allocator<int> >::value_type>, const std::vector<int, std::allocator<int> >::allocator_type &)' list std::initializer_list\n      |-CXXStdInitializerListExpr 0x2fb0928 <col:19, col:25> 'initializer_list<std::vector<int, std::allocator<int> >::value_type>':'std::initializer_list<int>'\n      | `-MaterializeTemporaryExpr 0x2fb0910 <col:19, col:25> 'const int [3]' xvalue\n      |   `-InitListExpr 0x2fb08b8 <col:19, col:25> 'const int [3]'\n      |     |-IntegerLiteral 0x2f920c0 <col:20> 'int' 1\n      |     |-IntegerLiteral 0x2f920e0 <col:22> 'int' 2\n      |     `-IntegerLiteral 0x2f92100 <col:24> 'int' 3\n      `-CXXDefaultArgExpr 0x2fb0ae0 <<invalid sloc>> 'const std::vector<int, std::allocator<int> >::allocator_type':'const std::allocator<int>' lvalue"
Line 651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  651 always 651
  "std :: vector<int> x@1 { 1 , 2 , 3 } ;" always "std :: vector<int> x@1 { 1 , 2 , 3 } ;"
  clang always "`-VarDecl 0x2f92060 <1.cpp:3:1, col:25> col:18 x 'std::vector<int>':'std::vector<int, std::allocator<int> >' listinit\n  `-ExprWithCleanups 0x2fb0b40 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >'\n    `-CXXConstructExpr 0x2fb0b00 <col:18, col:25> 'std::vector<int>':'std::vector<int, std::allocator<int> >' 'void (initializer_list<std::vector<int, std::allocator<int> >::value_type>, const std::vector<int, std::allocator<int> >::allocator_type &)' list std::initializer_list\n      |-CXXStdInitializerListExpr 0x2fb0928 <col:19, col:25> 'initializer_list<std::vector<int, std::allocator<int> >::value_type>':'std::initializer_list<int>'\n      | `-MaterializeTemporaryExpr 0x2fb0910 <col:19, col:25> 'const int [3]' xvalue\n      |   `-InitListExpr 0x2fb08b8 <col:19, col:25> 'const int [3]'\n      |     |-IntegerLiteral 0x2f920c0 <col:20> 'int' 1\n      |     |-IntegerLiteral 0x2f920e0 <col:22> 'int' 2\n      |     `-IntegerLiteral 0x2f92100 <col:24> 'int' 3\n      `-CXXDefaultArgExpr 0x2fb0ae0 <<invalid sloc>> 'const std::vector<int, std::allocator<int> >::allocator_type':'const std::allocator<int>' lvalue"
Line 655
  212 always 212
  = always "`-FunctionDecl 0x3701690 <1.cpp:2:1, col:23> col:6 foo 'void ()'\n  `-CompoundStmt 0x37017b0 <col:12, col:23>\n    `-CXXThrowExpr 0x3701790 <col:14, col:20> 'void'\n      `-IntegerLiteral 0x3701770 <col:20> 'int' 1"
  "`-FunctionDecl 0x3701690 <1.cpp:2:1, col:23> col:6 foo 'void ()'\n  `-CompoundStmt 0x37017b0 <col:12, col:23>\n    `-CXXThrowExpr 0x3701790 <col:14, col:20> 'void'\n      `-IntegerLiteral 0x3701770 <col:20> 'int' 1" always "`-FunctionDecl 0x3701690 <1.cpp:2:1, col:23> col:6 foo 'void ()'\n  `-CompoundStmt 0x37017b0 <col:12, col:23>\n    `-CXXThrowExpr 0x3701790 <col:14, col:20> 'void'\n      `-IntegerLiteral 0x3701770 <col:20> 'int' 1"
Line 659
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  659 always 659
  "void foo ( ) { throw 1 ; }" always "void foo ( ) { throw 1 ; }"
  clang always "`-FunctionDecl 0x3701690 <1.cpp:2:1, col:23> col:6 foo 'void ()'\n  `-CompoundStmt 0x37017b0 <col:12, col:23>\n    `-CXXThrowExpr 0x3701790 <col:14, col:20> 'void'\n      `-IntegerLiteral 0x3701770 <col:20> 'int' 1"
Line 663
  591 always 591
  = always "`-FunctionDecl 0x18476b8 <1.c:3:1, line:9:1> line:3:5 foo 'int (int)'\n  |-ParmVarDecl 0x18475e0 <col:9, col:13> col:13 used rc 'int'\n  `-CompoundStmt 0x1847868 <line:4:1, line:9:1>\n    `-SwitchStmt 0x18477e0 <line:5:3, line:8:3>\n      |-ImplicitCastExpr 0x18477c8 <line:5:10> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x18477a8 <col:10> 'int' lvalue ParmVar 0x18475e0 'rc' 'int'\n      `-CompoundStmt 0x1847850 <col:14, line:8:3>\n        `-DefaultStmt 0x1847830 <line:6:3, line:7:12>\n          `-ReturnStmt 0x1847820 <col:5, col:12>\n            `-IntegerLiteral 0x1847800 <col:12> 'int' 1"
  "`-FunctionDecl 0x18476b8 <1.c:3:1, line:9:1> line:3:5 foo 'int (int)'\n  |-ParmVarDecl 0x18475e0 <col:9, col:13> col:13 used rc 'int'\n  `-CompoundStmt 0x1847868 <line:4:1, line:9:1>\n    `-SwitchStmt 0x18477e0 <line:5:3, line:8:3>\n      |-ImplicitCastExpr 0x18477c8 <line:5:10> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x18477a8 <col:10> 'int' lvalue ParmVar 0x18475e0 'rc' 'int'\n      `-CompoundStmt 0x1847850 <col:14, line:8:3>\n        `-DefaultStmt 0x1847830 <line:6:3, line:7:12>\n          `-ReturnStmt 0x1847820 <col:5, col:12>\n            `-IntegerLiteral 0x1847800 <col:12> 'int' 1" always "`-FunctionDecl 0x18476b8 <1.c:3:1, line:9:1> line:3:5 foo 'int (int)'\n  |-ParmVarDecl 0x18475e0 <col:9, col:13> col:13 used rc 'int'\n  `-CompoundStmt 0x1847868 <line:4:1, line:9:1>\n    `-SwitchStmt 0x18477e0 <line:5:3, line:8:3>\n      |-ImplicitCastExpr 0x18477c8 <line:5:10> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x18477a8 <col:10> 'int' lvalue ParmVar 0x18475e0 'rc' 'int'\n      `-CompoundStmt 0x1847850 <col:14, line:8:3>\n        `-DefaultStmt 0x1847830 <line:6:3, line:7:12>\n          `-ReturnStmt 0x1847820 <col:5, col:12>\n            `-IntegerLiteral 0x1847800 <col:12> 'int' 1"
Line 673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  673 always 673
  "int foo ( int rc@1 ) { switch ( rc@1 ) { default : return 1 ; } }" always "int foo ( int rc@1 ) { switch ( rc@1 ) { default : return 1 ; } }"
  clang always "`-FunctionDecl 0x18476b8 <1.c:3:1, line:9:1> line:3:5 foo 'int (int)'\n  |-ParmVarDecl 0x18475e0 <col:9, col:13> col:13 used rc 'int'\n  `-CompoundStmt 0x1847868 <line:4:1, line:9:1>\n    `-SwitchStmt 0x18477e0 <line:5:3, line:8:3>\n      |-ImplicitCastExpr 0x18477c8 <line:5:10> 'int' <LValueToRValue>\n      | `-DeclRefExpr 0x18477a8 <col:10> 'int' lvalue ParmVar 0x18475e0 'rc' 'int'\n      `-CompoundStmt 0x1847850 <col:14, line:8:3>\n        `-DefaultStmt 0x1847830 <line:6:3, line:7:12>\n          `-ReturnStmt 0x1847820 <col:5, col:12>\n            `-IntegerLiteral 0x1847800 <col:12> 'int' 1"
Line 677
  396 always 396
  = always "`-FunctionDecl 0x27fbbc8 <line:2:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x27fbd08 <col:12, col:34>\n    `-DoStmt 0x27fbce8 <col:14, col:31>\n      |-CompoundStmt 0x27fbcb0 <col:17, col:22>\n      | `-UnaryOperator 0x27fbc90 <col:18, col:19> 'int' postfix '++'\n      |   `-DeclRefExpr 0x27fbc68 <col:18> 'int' lvalue Var 0x27fbae0 'x' 'int'\n      `-IntegerLiteral 0x27fbcc8 <col:30> 'int' 1"
  "`-FunctionDecl 0x27fbbc8 <line:2:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x27fbd08 <col:12, col:34>\n    `-DoStmt 0x27fbce8 <col:14, col:31>\n      |-CompoundStmt 0x27fbcb0 <col:17, col:22>\n      | `-UnaryOperator 0x27fbc90 <col:18, col:19> 'int' postfix '++'\n      |   `-DeclRefExpr 0x27fbc68 <col:18> 'int' lvalue Var 0x27fbae0 'x' 'int'\n      `-IntegerLiteral 0x27fbcc8 <col:30> 'int' 1" always "`-FunctionDecl 0x27fbbc8 <line:2:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x27fbd08 <col:12, col:34>\n    `-DoStmt 0x27fbce8 <col:14, col:31>\n      |-CompoundStmt 0x27fbcb0 <col:17, col:22>\n      | `-UnaryOperator 0x27fbc90 <col:18, col:19> 'int' postfix '++'\n      |   `-DeclRefExpr 0x27fbc68 <col:18> 'int' lvalue Var 0x27fbae0 'x' 'int'\n      `-IntegerLiteral 0x27fbcc8 <col:30> 'int' 1"
Line 684
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  684 always 684
  "void foo ( ) { do { ++ x ; } while ( 1 ) ; }" always "void foo ( ) { do { ++ x ; } while ( 1 ) ; }"
  clang always "`-FunctionDecl 0x27fbbc8 <line:2:1, col:34> col:6 foo 'void ()'\n  `-CompoundStmt 0x27fbd08 <col:12, col:34>\n    `-DoStmt 0x27fbce8 <col:14, col:31>\n      |-CompoundStmt 0x27fbcb0 <col:17, col:22>\n      | `-UnaryOperator 0x27fbc90 <col:18, col:19> 'int' postfix '++'\n      |   `-DeclRefExpr 0x27fbc68 <col:18> 'int' lvalue Var 0x27fbae0 'x' 'int'\n      `-IntegerLiteral 0x27fbcc8 <col:30> 'int' 1"
Line 688
  237 always 237
  = always "`-EnumDecl 0x2660660 <line:3:1, col:16> col:6 referenced abc\n  |-EnumConstantDecl 0x2660720 <col:11> col:11 referenced a 'abc'\n  |-EnumConstantDecl 0x2660768 <col:13> col:13 b 'abc'\n  `-EnumConstantDecl 0x26607b0 <col:15> col:15 c 'abc'"
  "`-EnumDecl 0x2660660 <line:3:1, col:16> col:6 referenced abc\n  |-EnumConstantDecl 0x2660720 <col:11> col:11 referenced a 'abc'\n  |-EnumConstantDecl 0x2660768 <col:13> col:13 b 'abc'\n  `-EnumConstantDecl 0x26607b0 <col:15> col:15 c 'abc'" always "`-EnumDecl 0x2660660 <line:3:1, col:16> col:6 referenced abc\n  |-EnumConstantDecl 0x2660720 <col:11> col:11 referenced a 'abc'\n  |-EnumConstantDecl 0x2660768 <col:13> col:13 b 'abc'\n  `-EnumConstantDecl 0x26607b0 <col:15> col:15 c 'abc'"
Line 692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  692 always 692
  "enum abc { a , b , c }" always "enum abc { a , b , c }"
  clang always "`-EnumDecl 0x2660660 <line:3:1, col:16> col:6 referenced abc\n  |-EnumConstantDecl 0x2660720 <col:11> col:11 referenced a 'abc'\n  |-EnumConstantDecl 0x2660768 <col:13> col:13 b 'abc'\n  `-EnumConstantDecl 0x26607b0 <col:15> col:15 c 'abc'"
Line 696
  80 always 80
  = always "`-EnumDecl 0xb55d50 <2.cpp:4:3, col:44> col:8 syntax_option_type 'unsigned int'"
  "`-EnumDecl 0xb55d50 <2.cpp:4:3, col:44> col:8 syntax_option_type 'unsigned int'" always "`-EnumDecl 0xb55d50 <2.cpp:4:3, col:44> col:8 syntax_option_type 'unsigned int'"
Line 697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  697 always 697
  "enum syntax_option_type : unsigned int { }" always "enum syntax_option_type : unsigned int { }"
  clang always "`-EnumDecl 0xb55d50 <2.cpp:4:3, col:44> col:8 syntax_option_type 'unsigned int'"
Line 701
  240 always 240
  = always "|-EnumDecl 0x1586e48 <2.cpp:1:3, line:5:3> line:1:8 __syntax_option\n| |-EnumConstantDecl 0x1586f18 <line:3:5> col:5 referenced _S_polynomial '__syntax_option'\n| `-EnumConstantDecl 0x1586f68 <line:4:5> col:5 _S_syntax_last '__syntax_option'"
  "|-EnumDecl 0x1586e48 <2.cpp:1:3, line:5:3> line:1:8 __syntax_option\n| |-EnumConstantDecl 0x1586f18 <line:3:5> col:5 referenced _S_polynomial '__syntax_option'\n| `-EnumConstantDecl 0x1586f68 <line:4:5> col:5 _S_syntax_last '__syntax_option'" always "|-EnumDecl 0x1586e48 <2.cpp:1:3, line:5:3> line:1:8 __syntax_option\n| |-EnumConstantDecl 0x1586f18 <line:3:5> col:5 referenced _S_polynomial '__syntax_option'\n| `-EnumConstantDecl 0x1586f68 <line:4:5> col:5 _S_syntax_last '__syntax_option'"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  704 always 704
  "enum __syntax_option { _S_polynomial , _S_syntax_last }" always "enum __syntax_option { _S_polynomial , _S_syntax_last }"
  clang always "|-EnumDecl 0x1586e48 <2.cpp:1:3, line:5:3> line:1:8 __syntax_option\n| |-EnumConstantDecl 0x1586f18 <line:3:5> col:5 referenced _S_polynomial '__syntax_option'\n| `-EnumConstantDecl 0x1586f68 <line:4:5> col:5 _S_syntax_last '__syntax_option'"
Line 708
  546 always 546
  = always "|-EnumDecl 0xace1f8 <e1.cpp:3:1, col:51> col:1\n| |-EnumConstantDecl 0xace2c8 <col:7> col:7 A '(anonymous enum at e1.cpp:3:1)'\n| |-EnumConstantDecl 0xace318 <col:16> col:16 B '(anonymous enum at e1.cpp:3:1)'\n| `-EnumConstantDecl 0xace3b8 <col:46> col:46 referenced C '(anonymous enum at e1.cpp:3:1)'\n`-VarDecl 0xace470 <col:1, col:66> col:53 x 'enum (anonymous enum at e1.cpp:3:1)':'(anonymous enum at e1.cpp:3:1)' cinit\n  `-DeclRefExpr 0xace520 <col:66> '(anonymous enum at e1.cpp:3:1)' EnumConstant 0xace3b8 'C' '(anonymous enum at e1.cpp:3:1)'"
  "|-EnumDecl 0xace1f8 <e1.cpp:3:1, col:51> col:1\n| |-EnumConstantDecl 0xace2c8 <col:7> col:7 A '(anonymous enum at e1.cpp:3:1)'\n| |-EnumConstantDecl 0xace318 <col:16> col:16 B '(anonymous enum at e1.cpp:3:1)'\n| `-EnumConstantDecl 0xace3b8 <col:46> col:46 referenced C '(anonymous enum at e1.cpp:3:1)'\n`-VarDecl 0xace470 <col:1, col:66> col:53 x 'enum (anonymous enum at e1.cpp:3:1)':'(anonymous enum at e1.cpp:3:1)' cinit\n  `-DeclRefExpr 0xace520 <col:66> '(anonymous enum at e1.cpp:3:1)' EnumConstant 0xace3b8 'C' '(anonymous enum at e1.cpp:3:1)'" always "|-EnumDecl 0xace1f8 <e1.cpp:3:1, col:51> col:1\n| |-EnumConstantDecl 0xace2c8 <col:7> col:7 A '(anonymous enum at e1.cpp:3:1)'\n| |-EnumConstantDecl 0xace318 <col:16> col:16 B '(anonymous enum at e1.cpp:3:1)'\n| `-EnumConstantDecl 0xace3b8 <col:46> col:46 referenced C '(anonymous enum at e1.cpp:3:1)'\n`-VarDecl 0xace470 <col:1, col:66> col:53 x 'enum (anonymous enum at e1.cpp:3:1)':'(anonymous enum at e1.cpp:3:1)' cinit\n  `-DeclRefExpr 0xace520 <col:66> '(anonymous enum at e1.cpp:3:1)' EnumConstant 0xace3b8 'C' '(anonymous enum at e1.cpp:3:1)'"
Line 714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  714 always 714
  "enum { A , B , C } x@1 = C ;" always "enum { A , B , C } x@1 = C ;"
  clang always "|-EnumDecl 0xace1f8 <e1.cpp:3:1, col:51> col:1\n| |-EnumConstantDecl 0xace2c8 <col:7> col:7 A '(anonymous enum at e1.cpp:3:1)'\n| |-EnumConstantDecl 0xace318 <col:16> col:16 B '(anonymous enum at e1.cpp:3:1)'\n| `-EnumConstantDecl 0xace3b8 <col:46> col:46 referenced C '(anonymous enum at e1.cpp:3:1)'\n`-VarDecl 0xace470 <col:1, col:66> col:53 x 'enum (anonymous enum at e1.cpp:3:1)':'(anonymous enum at e1.cpp:3:1)' cinit\n  `-DeclRefExpr 0xace520 <col:66> '(anonymous enum at e1.cpp:3:1)' EnumConstant 0xace3b8 'C' '(anonymous enum at e1.cpp:3:1)'"
Line 718
  886 always 886
  = always "`-FunctionDecl 0x2f93ae0 <1.c:1:1, col:56> col:5 main 'int ()'\n  `-CompoundStmt 0x2f93dc0 <col:12, col:56>\n    |-ForStmt 0x2f93d50 <col:14, col:44>\n    | |-DeclStmt 0x2f93c58 <col:19, col:28>\n    | | `-VarDecl 0x2f93bd8 <col:19, col:27> col:23 used i 'int' cinit\n    | |   `-IntegerLiteral 0x2f93c38 <col:27> 'int' 0\n    | |-<<<NULL>>>\n    | |-BinaryOperator 0x2f93cd0 <col:30, col:34> 'int' '<'\n    | | |-ImplicitCastExpr 0x2f93cb8 <col:30> 'int' <LValueToRValue>\n    | | | `-DeclRefExpr 0x2f93c70 <col:30> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | | `-IntegerLiteral 0x2f93c98 <col:34> 'int' 10\n    | |-UnaryOperator 0x2f93d20 <col:38, col:39> 'int' postfix '++'\n    | | `-DeclRefExpr 0x2f93cf8 <col:38> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | `-CompoundStmt 0x2f93d40 <col:43, col:44>\n    `-ReturnStmt 0x2f93da8 <col:46, col:53>\n      `-IntegerLiteral 0x2f93d88 <col:53> 'int' 0"
  "`-FunctionDecl 0x2f93ae0 <1.c:1:1, col:56> col:5 main 'int ()'\n  `-CompoundStmt 0x2f93dc0 <col:12, col:56>\n    |-ForStmt 0x2f93d50 <col:14, col:44>\n    | |-DeclStmt 0x2f93c58 <col:19, col:28>\n    | | `-VarDecl 0x2f93bd8 <col:19, col:27> col:23 used i 'int' cinit\n    | |   `-IntegerLiteral 0x2f93c38 <col:27> 'int' 0\n    | |-<<<NULL>>>\n    | |-BinaryOperator 0x2f93cd0 <col:30, col:34> 'int' '<'\n    | | |-ImplicitCastExpr 0x2f93cb8 <col:30> 'int' <LValueToRValue>\n    | | | `-DeclRefExpr 0x2f93c70 <col:30> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | | `-IntegerLiteral 0x2f93c98 <col:34> 'int' 10\n    | |-UnaryOperator 0x2f93d20 <col:38, col:39> 'int' postfix '++'\n    | | `-DeclRefExpr 0x2f93cf8 <col:38> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | `-CompoundStmt 0x2f93d40 <col:43, col:44>\n    `-ReturnStmt 0x2f93da8 <col:46, col:53>\n      `-IntegerLiteral 0x2f93d88 <col:53> 'int' 0" always "`-FunctionDecl 0x2f93ae0 <1.c:1:1, col:56> col:5 main 'int ()'\n  `-CompoundStmt 0x2f93dc0 <col:12, col:56>\n    |-ForStmt 0x2f93d50 <col:14, col:44>\n    | |-DeclStmt 0x2f93c58 <col:19, col:28>\n    | | `-VarDecl 0x2f93bd8 <col:19, col:27> col:23 used i 'int' cinit\n    | |   `-IntegerLiteral 0x2f93c38 <col:27> 'int' 0\n    | |-<<<NULL>>>\n    | |-BinaryOperator 0x2f93cd0 <col:30, col:34> 'int' '<'\n    | | |-ImplicitCastExpr 0x2f93cb8 <col:30> 'int' <LValueToRValue>\n    | | | `-DeclRefExpr 0x2f93c70 <col:30> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | | `-IntegerLiteral 0x2f93c98 <col:34> 'int' 10\n    | |-UnaryOperator 0x2f93d20 <col:38, col:39> 'int' postfix '++'\n    | | `-DeclRefExpr 0x2f93cf8 <col:38> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | `-CompoundStmt 0x2f93d40 <col:43, col:44>\n    `-ReturnStmt 0x2f93da8 <col:46, col:53>\n      `-IntegerLiteral 0x2f93d88 <col:53> 'int' 0"
Line 734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  734 always 734
  "int main ( ) { for ( int i@1 = 0 ; i@1 < 10 ; ++ i@1 ) { } return 0 ; }" always "int main ( ) { for ( int i@1 = 0 ; i@1 < 10 ; ++ i@1 ) { } return 0 ; }"
  clang always "`-FunctionDecl 0x2f93ae0 <1.c:1:1, col:56> col:5 main 'int ()'\n  `-CompoundStmt 0x2f93dc0 <col:12, col:56>\n    |-ForStmt 0x2f93d50 <col:14, col:44>\n    | |-DeclStmt 0x2f93c58 <col:19, col:28>\n    | | `-VarDecl 0x2f93bd8 <col:19, col:27> col:23 used i 'int' cinit\n    | |   `-IntegerLiteral 0x2f93c38 <col:27> 'int' 0\n    | |-<<<NULL>>>\n    | |-BinaryOperator 0x2f93cd0 <col:30, col:34> 'int' '<'\n    | | |-ImplicitCastExpr 0x2f93cb8 <col:30> 'int' <LValueToRValue>\n    | | | `-DeclRefExpr 0x2f93c70 <col:30> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | | `-IntegerLiteral 0x2f93c98 <col:34> 'int' 10\n    | |-UnaryOperator 0x2f93d20 <col:38, col:39> 'int' postfix '++'\n    | | `-DeclRefExpr 0x2f93cf8 <col:38> 'int' lvalue Var 0x2f93bd8 'i' 'int'\n    | `-CompoundStmt 0x2f93d40 <col:43, col:44>\n    `-ReturnStmt 0x2f93da8 <col:46, col:53>\n      `-IntegerLiteral 0x2f93d88 <col:53> 'int' 0"
Line 738
  187 always 187
  = always "`-FunctionDecl 0x3122c30 <1.c:1:1, col:22> col:6 foo 'void (int, int)'\n  |-ParmVarDecl 0x3122ae0 <col:10, col:14> col:14 x 'int'\n  `-ParmVarDecl 0x3122b58 <col:17, col:21> col:21 y 'int'"
  "`-FunctionDecl 0x3122c30 <1.c:1:1, col:22> col:6 foo 'void (int, int)'\n  |-ParmVarDecl 0x3122ae0 <col:10, col:14> col:14 x 'int'\n  `-ParmVarDecl 0x3122b58 <col:17, col:21> col:21 y 'int'" always "`-FunctionDecl 0x3122c30 <1.c:1:1, col:22> col:6 foo 'void (int, int)'\n  |-ParmVarDecl 0x3122ae0 <col:10, col:14> col:14 x 'int'\n  `-ParmVarDecl 0x3122b58 <col:17, col:21> col:21 y 'int'"
Line 741
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  741 always 741
  "void foo ( int x@1 , int y@2 ) ;" always "void foo ( int x@1 , int y@2 ) ;"
  clang always "`-FunctionDecl 0x3122c30 <1.c:1:1, col:22> col:6 foo 'void (int, int)'\n  |-ParmVarDecl 0x3122ae0 <col:10, col:14> col:14 x 'int'\n  `-ParmVarDecl 0x3122b58 <col:17, col:21> col:21 y 'int'"
Line 745
  660 always 660
  = always "`-FunctionDecl 0x24b2c38 <1.c:1:1, line:4:1> line:1:5 foo 'int (int, int)'\n  |-ParmVarDecl 0x24b2ae0 <col:9, col:13> col:13 used x 'int'\n  |-ParmVarDecl 0x24b2b58 <col:16, col:20> col:20 used y 'int'\n  `-CompoundStmt 0x24b2de8 <line:2:1, line:4:1>\n    `-ReturnStmt 0x24b2dd0 <line:3:5, col:16>\n      `-BinaryOperator 0x24b2da8 <col:12, col:16> 'int' '/'\n        |-ImplicitCastExpr 0x24b2d78 <col:12> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x24b2d28 <col:12> 'int' lvalue ParmVar 0x24b2ae0 'x' 'int'\n        `-ImplicitCastExpr 0x24b2d90 <col:16> 'int' <LValueToRValue>\n          `-DeclRefExpr 0x24b2d50 <col:16> 'int' lvalue ParmVar 0x24b2b58 'y' 'int'"
  "`-FunctionDecl 0x24b2c38 <1.c:1:1, line:4:1> line:1:5 foo 'int (int, int)'\n  |-ParmVarDecl 0x24b2ae0 <col:9, col:13> col:13 used x 'int'\n  |-ParmVarDecl 0x24b2b58 <col:16, col:20> col:20 used y 'int'\n  `-CompoundStmt 0x24b2de8 <line:2:1, line:4:1>\n    `-ReturnStmt 0x24b2dd0 <line:3:5, col:16>\n      `-BinaryOperator 0x24b2da8 <col:12, col:16> 'int' '/'\n        |-ImplicitCastExpr 0x24b2d78 <col:12> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x24b2d28 <col:12> 'int' lvalue ParmVar 0x24b2ae0 'x' 'int'\n        `-ImplicitCastExpr 0x24b2d90 <col:16> 'int' <LValueToRValue>\n          `-DeclRefExpr 0x24b2d50 <col:16> 'int' lvalue ParmVar 0x24b2b58 'y' 'int'" always "`-FunctionDecl 0x24b2c38 <1.c:1:1, line:4:1> line:1:5 foo 'int (int, int)'\n  |-ParmVarDecl 0x24b2ae0 <col:9, col:13> col:13 used x 'int'\n  |-ParmVarDecl 0x24b2b58 <col:16, col:20> col:20 used y 'int'\n  `-CompoundStmt 0x24b2de8 <line:2:1, line:4:1>\n    `-ReturnStmt 0x24b2dd0 <line:3:5, col:16>\n      `-BinaryOperator 0x24b2da8 <col:12, col:16> 'int' '/'\n        |-ImplicitCastExpr 0x24b2d78 <col:12> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x24b2d28 <col:12> 'int' lvalue ParmVar 0x24b2ae0 'x' 'int'\n        `-ImplicitCastExpr 0x24b2d90 <col:16> 'int' <LValueToRValue>\n          `-DeclRefExpr 0x24b2d50 <col:16> 'int' lvalue ParmVar 0x24b2b58 'y' 'int'"
Line 755
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  755 always 755
  "int foo ( int x@1 , int y@2 ) { return x@1 / y@2 ; }" always "int foo ( int x@1 , int y@2 ) { return x@1 / y@2 ; }"
  clang always "`-FunctionDecl 0x24b2c38 <1.c:1:1, line:4:1> line:1:5 foo 'int (int, int)'\n  |-ParmVarDecl 0x24b2ae0 <col:9, col:13> col:13 used x 'int'\n  |-ParmVarDecl 0x24b2b58 <col:16, col:20> col:20 used y 'int'\n  `-CompoundStmt 0x24b2de8 <line:2:1, line:4:1>\n    `-ReturnStmt 0x24b2dd0 <line:3:5, col:16>\n      `-BinaryOperator 0x24b2da8 <col:12, col:16> 'int' '/'\n        |-ImplicitCastExpr 0x24b2d78 <col:12> 'int' <LValueToRValue>\n        | `-DeclRefExpr 0x24b2d28 <col:12> 'int' lvalue ParmVar 0x24b2ae0 'x' 'int'\n        `-ImplicitCastExpr 0x24b2d90 <col:16> 'int' <LValueToRValue>\n          `-DeclRefExpr 0x24b2d50 <col:16> 'int' lvalue ParmVar 0x24b2b58 'y' 'int'"
Line 759
  198 always 198
  = always "|-FunctionDecl 0x27cb6b8 <line:865:1, col:35> col:12 __overflow 'int (FILE *, int)' extern\n| |-ParmVarDecl 0x27cb528 <col:24, col:29> col:30 'FILE *'\n| `-ParmVarDecl 0x27cb5a0 <col:32> col:35 'int'"
  "|-FunctionDecl 0x27cb6b8 <line:865:1, col:35> col:12 __overflow 'int (FILE *, int)' extern\n| |-ParmVarDecl 0x27cb528 <col:24, col:29> col:30 'FILE *'\n| `-ParmVarDecl 0x27cb5a0 <col:32> col:35 'int'" always "|-FunctionDecl 0x27cb6b8 <line:865:1, col:35> col:12 __overflow 'int (FILE *, int)' extern\n| |-ParmVarDecl 0x27cb528 <col:24, col:29> col:30 'FILE *'\n| `-ParmVarDecl 0x27cb5a0 <col:32> col:35 'int'"
Line 762
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  762 always 762
  "int __overflow ( FILE * , int ) ;" always "int __overflow ( FILE * , int ) ;"
  clang always "|-FunctionDecl 0x27cb6b8 <line:865:1, col:35> col:12 __overflow 'int (FILE *, int)' extern\n| |-ParmVarDecl 0x27cb528 <col:24, col:29> col:30 'FILE *'\n| `-ParmVarDecl 0x27cb5a0 <col:32> col:35 'int'"
Line 766
  426 always 426
  = always "|-FunctionDecl 0x272bb60 <line:658:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern\n| |-ParmVarDecl 0x272cc40 <<invalid sloc>> <invalid sloc> 'const void *'\n| |-ParmVarDecl 0x272cca0 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| |-ParmVarDecl 0x272cd00 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| `-ParmVarDecl 0x272cd60 <<invalid sloc>> <invalid sloc> 'FILE *'"
  "|-FunctionDecl 0x272bb60 <line:658:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern\n| |-ParmVarDecl 0x272cc40 <<invalid sloc>> <invalid sloc> 'const void *'\n| |-ParmVarDecl 0x272cca0 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| |-ParmVarDecl 0x272cd00 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| `-ParmVarDecl 0x272cd60 <<invalid sloc>> <invalid sloc> 'FILE *'" always "|-FunctionDecl 0x272bb60 <line:658:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern\n| |-ParmVarDecl 0x272cc40 <<invalid sloc>> <invalid sloc> 'const void *'\n| |-ParmVarDecl 0x272cca0 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| |-ParmVarDecl 0x272cd00 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| `-ParmVarDecl 0x272cd60 <<invalid sloc>> <invalid sloc> 'FILE *'"
Line 771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  771 always 771
  "unsigned long fwrite ( const void * , unsigned long , unsigned long , FILE * ) ;" always "unsigned long fwrite ( const void * , unsigned long , unsigned long , FILE * ) ;"
  clang always "|-FunctionDecl 0x272bb60 <line:658:15> col:15 implicit fwrite 'unsigned long (const void *, unsigned long, unsigned long, FILE *)' extern\n| |-ParmVarDecl 0x272cc40 <<invalid sloc>> <invalid sloc> 'const void *'\n| |-ParmVarDecl 0x272cca0 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| |-ParmVarDecl 0x272cd00 <<invalid sloc>> <invalid sloc> 'unsigned long'\n| `-ParmVarDecl 0x272cd60 <<invalid sloc>> <invalid sloc> 'FILE *'"
Line 775
  81 always 81
  = always "`-FunctionDecl 0x59d670 <1.c:1:1, col:28> col:20 foo 'void (void)' static inline"
  "`-FunctionDecl 0x59d670 <1.c:1:1, col:28> col:20 foo 'void (void)' static inline" always "`-FunctionDecl 0x59d670 <1.c:1:1, col:28> col:20 foo 'void (void)' static inline"
Line 776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  776 always 776
  "static inline void foo ( ) ;" always "static inline void foo ( ) ;"
  clang always "`-FunctionDecl 0x59d670 <1.c:1:1, col:28> col:20 foo 'void (void)' static inline"
Line 780
  133 always 133
  = always "`-FunctionDecl 0x196eea8 <1.cpp:3:5, col:27> col:12 foo 'void **(int)'\n  `-ParmVarDecl 0x196eda0 <col:17, col:21> col:21 count 'int'"
  "`-FunctionDecl 0x196eea8 <1.cpp:3:5, col:27> col:12 foo 'void **(int)'\n  `-ParmVarDecl 0x196eda0 <col:17, col:21> col:21 count 'int'" always "`-FunctionDecl 0x196eea8 <1.cpp:3:5, col:27> col:12 foo 'void **(int)'\n  `-ParmVarDecl 0x196eda0 <col:17, col:21> col:21 count 'int'"
Line 782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  782 always 782
  "void * * foo ( int count@1 ) ;" always "void * * foo ( int count@1 ) ;"
  clang always "`-FunctionDecl 0x196eea8 <1.cpp:3:5, col:27> col:12 foo 'void **(int)'\n  `-ParmVarDecl 0x196eda0 <col:17, col:21> col:21 count 'int'"
Line 786
  64 always 64
  = always "`-FunctionTemplateDecl 0x3242860 <a.cpp:1:1, col:46> col:21 foo"
  "`-FunctionTemplateDecl 0x3242860 <a.cpp:1:1, col:46> col:21 foo" always "`-FunctionTemplateDecl 0x3242860 <a.cpp:1:1, col:46> col:21 foo"
Line 787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  787 always 787
  "" always ""
  clang always "`-FunctionTemplateDecl 0x3242860 <a.cpp:1:1, col:46> col:21 foo"
Line 791
  1598 always 1598
  = always "|-FunctionTemplateDecl 0x333a860 <a.cpp:1:1, col:46> col:21 foo\n| |-TemplateTypeParmDecl 0x333a5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-FunctionDecl 0x333a7c0 <col:19, col:46> col:21 foo 'T (T)'\n| | |-ParmVarDecl 0x333a6c0 <col:25, col:27> col:27 referenced t 'T'\n| | `-CompoundStmt 0x333a980 <col:30, col:46>\n| |   `-ReturnStmt 0x333a968 <col:32, col:43>\n| |     `-BinaryOperator 0x333a940 <col:39, col:43> '<dependent type>' '+'\n| |       |-DeclRefExpr 0x333a8f8 <col:39> 'T' lvalue ParmVar 0x333a6c0 't' 'T'\n| |       `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n| `-FunctionDecl 0x333ae00 <col:19, col:46> col:21 used foo 'int (int)'\n|   |-TemplateArgument type 'int'\n|   |-ParmVarDecl 0x333ad00 <col:25, col:27> col:27 used t 'int':'int'\n|   `-CompoundStmt 0x333b0a8 <col:30, col:46>\n|     `-ReturnStmt 0x333b090 <col:32, col:43>\n|       `-BinaryOperator 0x333b068 <col:39, col:43> 'int' '+'\n|         |-ImplicitCastExpr 0x333b050 <col:39> 'int':'int' <LValueToRValue>\n|         | `-DeclRefExpr 0x333b028 <col:39> 'int':'int' lvalue ParmVar 0x333ad00 't' 'int':'int'\n|         `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n`-FunctionDecl 0x333a9f8 <line:2:1, col:22> col:1 invalid bar 'int ()'\n  `-CompoundStmt 0x333b010 <col:7, col:22>\n    `-CallExpr 0x333afe0 <col:9, col:19> 'int':'int'\n      |-ImplicitCastExpr 0x333afc8 <col:9, col:16> 'int (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x333af00 <col:9, col:16> 'int (int)' lvalue Function 0x333ae00 'foo' 'int (int)' (FunctionTemplate 0x333a860 'foo')\n      `-IntegerLiteral 0x333ab48 <col:18> 'int' 1"
  "|-FunctionTemplateDecl 0x333a860 <a.cpp:1:1, col:46> col:21 foo\n| |-TemplateTypeParmDecl 0x333a5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-FunctionDecl 0x333a7c0 <col:19, col:46> col:21 foo 'T (T)'\n| | |-ParmVarDecl 0x333a6c0 <col:25, col:27> col:27 referenced t 'T'\n| | `-CompoundStmt 0x333a980 <col:30, col:46>\n| |   `-ReturnStmt 0x333a968 <col:32, col:43>\n| |     `-BinaryOperator 0x333a940 <col:39, col:43> '<dependent type>' '+'\n| |       |-DeclRefExpr 0x333a8f8 <col:39> 'T' lvalue ParmVar 0x333a6c0 't' 'T'\n| |       `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n| `-FunctionDecl 0x333ae00 <col:19, col:46> col:21 used foo 'int (int)'\n|   |-TemplateArgument type 'int'\n|   |-ParmVarDecl 0x333ad00 <col:25, col:27> col:27 used t 'int':'int'\n|   `-CompoundStmt 0x333b0a8 <col:30, col:46>\n|     `-ReturnStmt 0x333b090 <col:32, col:43>\n|       `-BinaryOperator 0x333b068 <col:39, col:43> 'int' '+'\n|         |-ImplicitCastExpr 0x333b050 <col:39> 'int':'int' <LValueToRValue>\n|         | `-DeclRefExpr 0x333b028 <col:39> 'int':'int' lvalue ParmVar 0x333ad00 't' 'int':'int'\n|         `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n`-FunctionDecl 0x333a9f8 <line:2:1, col:22> col:1 invalid bar 'int ()'\n  `-CompoundStmt 0x333b010 <col:7, col:22>\n    `-CallExpr 0x333afe0 <col:9, col:19> 'int':'int'\n      |-ImplicitCastExpr 0x333afc8 <col:9, col:16> 'int (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x333af00 <col:9, col:16> 'int (int)' lvalue Function 0x333ae00 'foo' 'int (int)' (FunctionTemplate 0x333a860 'foo')\n      `-IntegerLiteral 0x333ab48 <col:18> 'int' 1" always "|-FunctionTemplateDecl 0x333a860 <a.cpp:1:1, col:46> col:21 foo\n| |-TemplateTypeParmDecl 0x333a5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-FunctionDecl 0x333a7c0 <col:19, col:46> col:21 foo 'T (T)'\n| | |-ParmVarDecl 0x333a6c0 <col:25, col:27> col:27 referenced t 'T'\n| | `-CompoundStmt 0x333a980 <col:30, col:46>\n| |   `-ReturnStmt 0x333a968 <col:32, col:43>\n| |     `-BinaryOperator 0x333a940 <col:39, col:43> '<dependent type>' '+'\n| |       |-DeclRefExpr 0x333a8f8 <col:39> 'T' lvalue ParmVar 0x333a6c0 't' 'T'\n| |       `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n| `-FunctionDecl 0x333ae00 <col:19, col:46> col:21 used foo 'int (int)'\n|   |-TemplateArgument type 'int'\n|   |-ParmVarDecl 0x333ad00 <col:25, col:27> col:27 used t 'int':'int'\n|   `-CompoundStmt 0x333b0a8 <col:30, col:46>\n|     `-ReturnStmt 0x333b090 <col:32, col:43>\n|       `-BinaryOperator 0x333b068 <col:39, col:43> 'int' '+'\n|         |-ImplicitCastExpr 0x333b050 <col:39> 'int':'int' <LValueToRValue>\n|         | `-DeclRefExpr 0x333b028 <col:39> 'int':'int' lvalue ParmVar 0x333ad00 't' 'int':'int'\n|         `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n`-FunctionDecl 0x333a9f8 <line:2:1, col:22> col:1 invalid bar 'int ()'\n  `-CompoundStmt 0x333b010 <col:7, col:22>\n    `-CallExpr 0x333afe0 <col:9, col:19> 'int':'int'\n      |-ImplicitCastExpr 0x333afc8 <col:9, col:16> 'int (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x333af00 <col:9, col:16> 'int (int)' lvalue Function 0x333ae00 'foo' 'int (int)' (FunctionTemplate 0x333a860 'foo')\n      `-IntegerLiteral 0x333ab48 <col:18> 'int' 1"
Line 815
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  815 always 815
  "int foo<int> ( int t@1 ) { return t@1 + 1 ; } int bar ( ) { foo ( 1 ) ; }" always "int foo<int> ( int t@1 ) { return t@1 + 1 ; } int bar ( ) { foo ( 1 ) ; }"
  clang always "|-FunctionTemplateDecl 0x333a860 <a.cpp:1:1, col:46> col:21 foo\n| |-TemplateTypeParmDecl 0x333a5f8 <col:10, col:16> col:16 referenced class depth 0 index 0 T\n| |-FunctionDecl 0x333a7c0 <col:19, col:46> col:21 foo 'T (T)'\n| | |-ParmVarDecl 0x333a6c0 <col:25, col:27> col:27 referenced t 'T'\n| | `-CompoundStmt 0x333a980 <col:30, col:46>\n| |   `-ReturnStmt 0x333a968 <col:32, col:43>\n| |     `-BinaryOperator 0x333a940 <col:39, col:43> '<dependent type>' '+'\n| |       |-DeclRefExpr 0x333a8f8 <col:39> 'T' lvalue ParmVar 0x333a6c0 't' 'T'\n| |       `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n| `-FunctionDecl 0x333ae00 <col:19, col:46> col:21 used foo 'int (int)'\n|   |-TemplateArgument type 'int'\n|   |-ParmVarDecl 0x333ad00 <col:25, col:27> col:27 used t 'int':'int'\n|   `-CompoundStmt 0x333b0a8 <col:30, col:46>\n|     `-ReturnStmt 0x333b090 <col:32, col:43>\n|       `-BinaryOperator 0x333b068 <col:39, col:43> 'int' '+'\n|         |-ImplicitCastExpr 0x333b050 <col:39> 'int':'int' <LValueToRValue>\n|         | `-DeclRefExpr 0x333b028 <col:39> 'int':'int' lvalue ParmVar 0x333ad00 't' 'int':'int'\n|         `-IntegerLiteral 0x333a920 <col:43> 'int' 1\n`-FunctionDecl 0x333a9f8 <line:2:1, col:22> col:1 invalid bar 'int ()'\n  `-CompoundStmt 0x333b010 <col:7, col:22>\n    `-CallExpr 0x333afe0 <col:9, col:19> 'int':'int'\n      |-ImplicitCastExpr 0x333afc8 <col:9, col:16> 'int (*)(int)' <FunctionToPointerDecay>\n      | `-DeclRefExpr 0x333af00 <col:9, col:16> 'int (int)' lvalue Function 0x333ae00 'foo' 'int (int)' (FunctionTemplate 0x333a860 'foo')\n      `-IntegerLiteral 0x333ab48 <col:18> 'int' 1"
Line 819
  626 always 626
  = always "`-FunctionDecl 0x2637ba8 <1.c:1:1, line:4:1> line:1:5 foo 'int (int)'\n  |-ParmVarDecl 0x2637ae0 <col:9, col:13> col:13 used x 'int'\n  `-CompoundStmt 0x2637d70 <col:16, line:4:1>\n    `-IfStmt 0x2637d38 <line:2:5, line:3:11>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-BinaryOperator 0x2637cf0 <line:2:9, col:13> 'int' '>'\n      | |-ImplicitCastExpr 0x2637cd8 <col:9> 'int' <LValueToRValue>\n      | | `-DeclRefExpr 0x2637c90 <col:9> 'int' lvalue ParmVar 0x2637ae0 'x' 'int'\n      | `-IntegerLiteral 0x2637cb8 <col:13> 'int' 10\n      |-CompoundStmt 0x2637d18 <col:17, col:18>\n      `-CompoundStmt 0x2637d28 <line:3:10, col:11>"
  "`-FunctionDecl 0x2637ba8 <1.c:1:1, line:4:1> line:1:5 foo 'int (int)'\n  |-ParmVarDecl 0x2637ae0 <col:9, col:13> col:13 used x 'int'\n  `-CompoundStmt 0x2637d70 <col:16, line:4:1>\n    `-IfStmt 0x2637d38 <line:2:5, line:3:11>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-BinaryOperator 0x2637cf0 <line:2:9, col:13> 'int' '>'\n      | |-ImplicitCastExpr 0x2637cd8 <col:9> 'int' <LValueToRValue>\n      | | `-DeclRefExpr 0x2637c90 <col:9> 'int' lvalue ParmVar 0x2637ae0 'x' 'int'\n      | `-IntegerLiteral 0x2637cb8 <col:13> 'int' 10\n      |-CompoundStmt 0x2637d18 <col:17, col:18>\n      `-CompoundStmt 0x2637d28 <line:3:10, col:11>" always "`-FunctionDecl 0x2637ba8 <1.c:1:1, line:4:1> line:1:5 foo 'int (int)'\n  |-ParmVarDecl 0x2637ae0 <col:9, col:13> col:13 used x 'int'\n  `-CompoundStmt 0x2637d70 <col:16, line:4:1>\n    `-IfStmt 0x2637d38 <line:2:5, line:3:11>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-BinaryOperator 0x2637cf0 <line:2:9, col:13> 'int' '>'\n      | |-ImplicitCastExpr 0x2637cd8 <col:9> 'int' <LValueToRValue>\n      | | `-DeclRefExpr 0x2637c90 <col:9> 'int' lvalue ParmVar 0x2637ae0 'x' 'int'\n      | `-IntegerLiteral 0x2637cb8 <col:13> 'int' 10\n      |-CompoundStmt 0x2637d18 <col:17, col:18>\n      `-CompoundStmt 0x2637d28 <line:3:10, col:11>"
Line 831
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  831 always 831
  "int foo ( int x@1 ) { if ( x@1 > 10 ) { } else { } }" always "int foo ( int x@1 ) { if ( x@1 > 10 ) { } else { } }"
  clang always "`-FunctionDecl 0x2637ba8 <1.c:1:1, line:4:1> line:1:5 foo 'int (int)'\n  |-ParmVarDecl 0x2637ae0 <col:9, col:13> col:13 used x 'int'\n  `-CompoundStmt 0x2637d70 <col:16, line:4:1>\n    `-IfStmt 0x2637d38 <line:2:5, line:3:11>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-BinaryOperator 0x2637cf0 <line:2:9, col:13> 'int' '>'\n      | |-ImplicitCastExpr 0x2637cd8 <col:9> 'int' <LValueToRValue>\n      | | `-DeclRefExpr 0x2637c90 <col:9> 'int' lvalue ParmVar 0x2637ae0 'x' 'int'\n      | `-IntegerLiteral 0x2637cb8 <col:13> 'int' 10\n      |-CompoundStmt 0x2637d18 <col:17, col:18>\n      `-CompoundStmt 0x2637d28 <line:3:10, col:11>"
Line 836
  321 always 321
  = always "`-FunctionDecl 0x41d0690 <2.cpp:1:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x41d07f0 <col:12, col:24>\n    `-IfStmt 0x41d07b8 <col:14, col:22>\n      |-ImplicitCastExpr 0x41d0790 <col:18> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x41d0770 <col:18> 'int' 1\n      |-CompoundStmt 0x41d07a8 <col:21, col:22>\n"
  "`-FunctionDecl 0x41d0690 <2.cpp:1:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x41d07f0 <col:12, col:24>\n    `-IfStmt 0x41d07b8 <col:14, col:22>\n      |-ImplicitCastExpr 0x41d0790 <col:18> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x41d0770 <col:18> 'int' 1\n      |-CompoundStmt 0x41d07a8 <col:21, col:22>\n" always "`-FunctionDecl 0x41d0690 <2.cpp:1:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x41d07f0 <col:12, col:24>\n    `-IfStmt 0x41d07b8 <col:14, col:22>\n      |-ImplicitCastExpr 0x41d0790 <col:18> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x41d0770 <col:18> 'int' 1\n      |-CompoundStmt 0x41d07a8 <col:21, col:22>\n"
Line 842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  842 always 842
  "void foo ( ) { if ( 1 ) { } }" always "void foo ( ) { if ( 1 ) { } }"
  clang always "`-FunctionDecl 0x41d0690 <2.cpp:1:1, col:24> col:6 foo 'void ()'\n  `-CompoundStmt 0x41d07f0 <col:12, col:24>\n    `-IfStmt 0x41d07b8 <col:14, col:22>\n      |-ImplicitCastExpr 0x41d0790 <col:18> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x41d0770 <col:18> 'int' 1\n      |-CompoundStmt 0x41d07a8 <col:21, col:22>\n"
Line 846
  283 always 283
  = always "|-VarDecl 0x397c680 <1.cpp:2:1, col:26> col:11 used ints 'const int [3]' cinit\n| `-InitListExpr 0x397c7d8 <col:20, col:26> 'const int [3]'\n|   |-IntegerLiteral 0x397c720 <col:21> 'int' 1\n|   |-IntegerLiteral 0x397c740 <col:23> 'int' 2\n|   `-IntegerLiteral 0x397c760 <col:25> 'int' 3"
  "|-VarDecl 0x397c680 <1.cpp:2:1, col:26> col:11 used ints 'const int [3]' cinit\n| `-InitListExpr 0x397c7d8 <col:20, col:26> 'const int [3]'\n|   |-IntegerLiteral 0x397c720 <col:21> 'int' 1\n|   |-IntegerLiteral 0x397c740 <col:23> 'int' 2\n|   `-IntegerLiteral 0x397c760 <col:25> 'int' 3" always "|-VarDecl 0x397c680 <1.cpp:2:1, col:26> col:11 used ints 'const int [3]' cinit\n| `-InitListExpr 0x397c7d8 <col:20, col:26> 'const int [3]'\n|   |-IntegerLiteral 0x397c720 <col:21> 'int' 1\n|   |-IntegerLiteral 0x397c740 <col:23> 'int' 2\n|   `-IntegerLiteral 0x397c760 <col:25> 'int' 3"
Line 851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  851 always 851
  "const int [3] ints@1 = { 1 , 2 , 3 } ;" always "const int [3] ints@1 = { 1 , 2 , 3 } ;"
  clang always "|-VarDecl 0x397c680 <1.cpp:2:1, col:26> col:11 used ints 'const int [3]' cinit\n| `-InitListExpr 0x397c7d8 <col:20, col:26> 'const int [3]'\n|   |-IntegerLiteral 0x397c720 <col:21> 'int' 1\n|   |-IntegerLiteral 0x397c740 <col:23> 'int' 2\n|   `-IntegerLiteral 0x397c760 <col:25> 'int' 3"
Line 855
  221 always 221
  = always "`-FunctionDecl 0x2ed1ba0 <1.c:1:1, col:36> col:6 foo 'void (int)'\n  `-CompoundStmt 0x2ed1d00 <col:17, col:36>\n    `-LabelStmt 0x2ed1ce8 <col:19, col:30> 'loop'\n      `-GotoStmt 0x2ed1cd0 <col:25, col:30> 'loop' 0x2ed1c88"
  "`-FunctionDecl 0x2ed1ba0 <1.c:1:1, col:36> col:6 foo 'void (int)'\n  `-CompoundStmt 0x2ed1d00 <col:17, col:36>\n    `-LabelStmt 0x2ed1ce8 <col:19, col:30> 'loop'\n      `-GotoStmt 0x2ed1cd0 <col:25, col:30> 'loop' 0x2ed1c88" always "`-FunctionDecl 0x2ed1ba0 <1.c:1:1, col:36> col:6 foo 'void (int)'\n  `-CompoundStmt 0x2ed1d00 <col:17, col:36>\n    `-LabelStmt 0x2ed1ce8 <col:19, col:30> 'loop'\n      `-GotoStmt 0x2ed1cd0 <col:25, col:30> 'loop' 0x2ed1c88"
Line 859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  859 always 859
  "void foo ( ) { loop : goto loop ; }" always "void foo ( ) { loop : goto loop ; }"
  clang always "`-FunctionDecl 0x2ed1ba0 <1.c:1:1, col:36> col:6 foo 'void (int)'\n  `-CompoundStmt 0x2ed1d00 <col:17, col:36>\n    `-LabelStmt 0x2ed1ce8 <col:19, col:30> 'loop'\n      `-GotoStmt 0x2ed1cd0 <col:25, col:30> 'loop' 0x2ed1c88"
Line 866
  636 always 636
  = always "|-RecordDecl 0x2441a88 <1.c:1:1, col:18> col:8 struct S definition\n| `-FieldDecl 0x2441b48 <col:12, col:16> col:16 referenced x 'int'\n`-FunctionDecl 0x2441cf8 <line:2:1, col:35> col:5 foo 'int (struct S)'\n  |-ParmVarDecl 0x2441be8 <col:9, col:18> col:18 used s 'struct S':'struct S'\n  `-CompoundStmt 0x2441e70 <col:21, col:35>\n    `-ReturnStmt 0x2441e58 <col:23, col:32>\n      `-ImplicitCastExpr 0x2441e40 <col:30, col:32> 'int' <LValueToRValue>\n        `-MemberExpr 0x2441e08 <col:30, col:32> 'int' lvalue .x 0x2441b48\n          `-DeclRefExpr 0x2441de0 <col:30> 'struct S':'struct S' lvalue ParmVar 0x2441be8 's' 'struct S':'struct S'"
  "|-RecordDecl 0x2441a88 <1.c:1:1, col:18> col:8 struct S definition\n| `-FieldDecl 0x2441b48 <col:12, col:16> col:16 referenced x 'int'\n`-FunctionDecl 0x2441cf8 <line:2:1, col:35> col:5 foo 'int (struct S)'\n  |-ParmVarDecl 0x2441be8 <col:9, col:18> col:18 used s 'struct S':'struct S'\n  `-CompoundStmt 0x2441e70 <col:21, col:35>\n    `-ReturnStmt 0x2441e58 <col:23, col:32>\n      `-ImplicitCastExpr 0x2441e40 <col:30, col:32> 'int' <LValueToRValue>\n        `-MemberExpr 0x2441e08 <col:30, col:32> 'int' lvalue .x 0x2441b48\n          `-DeclRefExpr 0x2441de0 <col:30> 'struct S':'struct S' lvalue ParmVar 0x2441be8 's' 'struct S':'struct S'" always "|-RecordDecl 0x2441a88 <1.c:1:1, col:18> col:8 struct S definition\n| `-FieldDecl 0x2441b48 <col:12, col:16> col:16 referenced x 'int'\n`-FunctionDecl 0x2441cf8 <line:2:1, col:35> col:5 foo 'int (struct S)'\n  |-ParmVarDecl 0x2441be8 <col:9, col:18> col:18 used s 'struct S':'struct S'\n  `-CompoundStmt 0x2441e70 <col:21, col:35>\n    `-ReturnStmt 0x2441e58 <col:23, col:32>\n      `-ImplicitCastExpr 0x2441e40 <col:30, col:32> 'int' <LValueToRValue>\n        `-MemberExpr 0x2441e08 <col:30, col:32> 'int' lvalue .x 0x2441b48\n          `-DeclRefExpr 0x2441de0 <col:30> 'struct S':'struct S' lvalue ParmVar 0x2441be8 's' 'struct S':'struct S'"
Line 875
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  875 always 875
  "struct S { int x@1 ; } ; int foo ( struct S s@2 ) { return s@2 . x@1 ; }" always "struct S { int x@1 ; } ; int foo ( struct S s@2 ) { return s@2 . x@1 ; }"
  clang always "|-RecordDecl 0x2441a88 <1.c:1:1, col:18> col:8 struct S definition\n| `-FieldDecl 0x2441b48 <col:12, col:16> col:16 referenced x 'int'\n`-FunctionDecl 0x2441cf8 <line:2:1, col:35> col:5 foo 'int (struct S)'\n  |-ParmVarDecl 0x2441be8 <col:9, col:18> col:18 used s 'struct S':'struct S'\n  `-CompoundStmt 0x2441e70 <col:21, col:35>\n    `-ReturnStmt 0x2441e58 <col:23, col:32>\n      `-ImplicitCastExpr 0x2441e40 <col:30, col:32> 'int' <LValueToRValue>\n        `-MemberExpr 0x2441e08 <col:30, col:32> 'int' lvalue .x 0x2441b48\n          `-DeclRefExpr 0x2441de0 <col:30> 'struct S':'struct S' lvalue ParmVar 0x2441be8 's' 'struct S':'struct S'"
Line 880
  115 always 115
  = always "`-NamespaceDecl 0x2e5f658 <hello.cpp:1:1, col:24> col:11 x\n  `-VarDecl 0x2e5f6d8 <col:15, col:19> col:19 var 'int'"
  "`-NamespaceDecl 0x2e5f658 <hello.cpp:1:1, col:24> col:11 x\n  `-VarDecl 0x2e5f6d8 <col:15, col:19> col:19 var 'int'" always "`-NamespaceDecl 0x2e5f658 <hello.cpp:1:1, col:24> col:11 x\n  `-VarDecl 0x2e5f6d8 <col:15, col:19> col:19 var 'int'"
Line 882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  882 always 882
  "namespace x { int var@1 ; }" always "namespace x { int var@1 ; }"
  clang always "`-NamespaceDecl 0x2e5f658 <hello.cpp:1:1, col:24> col:11 x\n  `-VarDecl 0x2e5f6d8 <col:15, col:19> col:19 var 'int'"
Line 887
  170 always 170
  = always "`-NamespaceDecl 0x1753e60 <1.cpp:1:1, line:4:1> line:1:11 std\n  |-VisibilityAttr 0x1753ed0 <col:31, col:56> Default\n  `-VarDecl 0x1753f40 <line:3:5, col:9> col:9 x 'int'"
  "`-NamespaceDecl 0x1753e60 <1.cpp:1:1, line:4:1> line:1:11 std\n  |-VisibilityAttr 0x1753ed0 <col:31, col:56> Default\n  `-VarDecl 0x1753f40 <line:3:5, col:9> col:9 x 'int'" always "`-NamespaceDecl 0x1753e60 <1.cpp:1:1, line:4:1> line:1:11 std\n  |-VisibilityAttr 0x1753ed0 <col:31, col:56> Default\n  `-VarDecl 0x1753f40 <line:3:5, col:9> col:9 x 'int'"
Line 890
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  890 always 890
  "namespace std { int x@1 ; }" always "namespace std { int x@1 ; }"
  clang always "`-NamespaceDecl 0x1753e60 <1.cpp:1:1, line:4:1> line:1:11 std\n  |-VisibilityAttr 0x1753ed0 <col:31, col:56> Default\n  `-VarDecl 0x1753f40 <line:3:5, col:9> col:9 x 'int'"
Line 895
  184 always 184
  = always "`-RecordDecl 0x354eac8 <1.c:1:1, line:4:1> line:1:8 struct S definition\n  |-FieldDecl 0x354eb88 <line:2:3, col:7> col:7 x 'int'\n  `-FieldDecl 0x354ebe8 <line:3:3, col:7> col:7 y 'int'"
  "`-RecordDecl 0x354eac8 <1.c:1:1, line:4:1> line:1:8 struct S definition\n  |-FieldDecl 0x354eb88 <line:2:3, col:7> col:7 x 'int'\n  `-FieldDecl 0x354ebe8 <line:3:3, col:7> col:7 y 'int'" always "`-RecordDecl 0x354eac8 <1.c:1:1, line:4:1> line:1:8 struct S definition\n  |-FieldDecl 0x354eb88 <line:2:3, col:7> col:7 x 'int'\n  `-FieldDecl 0x354ebe8 <line:3:3, col:7> col:7 y 'int'"
Line 898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  898 always 898
  "struct S { int x@1 ; int y@2 ; } ;" always "struct S { int x@1 ; int y@2 ; } ;"
  clang always "`-RecordDecl 0x354eac8 <1.c:1:1, line:4:1> line:1:8 struct S definition\n  |-FieldDecl 0x354eb88 <line:2:3, col:7> col:7 x 'int'\n  `-FieldDecl 0x354ebe8 <line:3:3, col:7> col:7 y 'int'"
Line 903
  123 always 123
  = always "`-RecordDecl 0x3befac8 <2.c:2:1, col:22> col:1 struct definition\n  `-FieldDecl 0x3befbf0 <col:10, col:19> col:14 val 'int'"
  "`-RecordDecl 0x3befac8 <2.c:2:1, col:22> col:1 struct definition\n  `-FieldDecl 0x3befbf0 <col:10, col:19> col:14 val 'int'" always "`-RecordDecl 0x3befac8 <2.c:2:1, col:22> col:1 struct definition\n  `-FieldDecl 0x3befbf0 <col:10, col:19> col:14 val 'int'"
Line 905
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  905 always 905
  "struct { int val@1 ; } ;" always "struct { int val@1 ; } ;"
  clang always "`-RecordDecl 0x3befac8 <2.c:2:1, col:22> col:1 struct definition\n  `-FieldDecl 0x3befbf0 <col:10, col:19> col:14 val 'int'"
Line 910
  486 always 486
  = always "`-FunctionDecl 0x2796ba0 <1.c:1:1, col:35> col:6 foo 'void (int)'\n  |-ParmVarDecl 0x2796ae0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2796d18 <col:17, col:35>\n    |-SwitchStmt 0x2796cc8 <col:19, col:32>\n    | |-<<<NULL>>>\n    | |-<<<NULL>>>\n    | |-ImplicitCastExpr 0x2796cb0 <col:27> 'int' <LValueToRValue>\n    | | `-DeclRefExpr 0x2796c88 <col:27> 'int' lvalue ParmVar 0x2796ae0 'x' 'int'\n    | `-CompoundStmt 0x2796cf8 <col:30, col:32>\n    `-NullStmt 0x2796d08 <col:33>"
  "`-FunctionDecl 0x2796ba0 <1.c:1:1, col:35> col:6 foo 'void (int)'\n  |-ParmVarDecl 0x2796ae0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2796d18 <col:17, col:35>\n    |-SwitchStmt 0x2796cc8 <col:19, col:32>\n    | |-<<<NULL>>>\n    | |-<<<NULL>>>\n    | |-ImplicitCastExpr 0x2796cb0 <col:27> 'int' <LValueToRValue>\n    | | `-DeclRefExpr 0x2796c88 <col:27> 'int' lvalue ParmVar 0x2796ae0 'x' 'int'\n    | `-CompoundStmt 0x2796cf8 <col:30, col:32>\n    `-NullStmt 0x2796d08 <col:33>" always "`-FunctionDecl 0x2796ba0 <1.c:1:1, col:35> col:6 foo 'void (int)'\n  |-ParmVarDecl 0x2796ae0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2796d18 <col:17, col:35>\n    |-SwitchStmt 0x2796cc8 <col:19, col:32>\n    | |-<<<NULL>>>\n    | |-<<<NULL>>>\n    | |-ImplicitCastExpr 0x2796cb0 <col:27> 'int' <LValueToRValue>\n    | | `-DeclRefExpr 0x2796c88 <col:27> 'int' lvalue ParmVar 0x2796ae0 'x' 'int'\n    | `-CompoundStmt 0x2796cf8 <col:30, col:32>\n    `-NullStmt 0x2796d08 <col:33>"
Line 920
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  920 always 920
  "void foo ( int x@1 ) { switch ( x@1 ) { } ; }" always "void foo ( int x@1 ) { switch ( x@1 ) { } ; }"
  clang always "`-FunctionDecl 0x2796ba0 <1.c:1:1, col:35> col:6 foo 'void (int)'\n  |-ParmVarDecl 0x2796ae0 <col:10, col:14> col:14 used x 'int'\n  `-CompoundStmt 0x2796d18 <col:17, col:35>\n    |-SwitchStmt 0x2796cc8 <col:19, col:32>\n    | |-<<<NULL>>>\n    | |-<<<NULL>>>\n    | |-ImplicitCastExpr 0x2796cb0 <col:27> 'int' <LValueToRValue>\n    | | `-DeclRefExpr 0x2796c88 <col:27> 'int' lvalue ParmVar 0x2796ae0 'x' 'int'\n    | `-CompoundStmt 0x2796cf8 <col:30, col:32>\n    `-NullStmt 0x2796d08 <col:33>"
Line 925
  124 always 124
  = always "|-TypedefDecl 0x2d60180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\n| `-BuiltinType 0x2d5fe80 '__int128'"
  "|-TypedefDecl 0x2d60180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\n| `-BuiltinType 0x2d5fe80 '__int128'" always "|-TypedefDecl 0x2d60180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\n| `-BuiltinType 0x2d5fe80 '__int128'"
Line 927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  927 always 927
  "typedef __int128 __int128_t ;" always "typedef __int128 __int128_t ;"
  clang always "|-TypedefDecl 0x2d60180 <<invalid sloc>> <invalid sloc> implicit __int128_t '__int128'\n| `-BuiltinType 0x2d5fe80 '__int128'"
Line 931
  221 always 221
  = always "|-TypedefDecl 0x2d604a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\n| `-RecordType 0x2d602c0 'struct __NSConstantString_tag'\n|   `-Record 0x2d60238 '__NSConstantString_tag'"
  "|-TypedefDecl 0x2d604a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\n| `-RecordType 0x2d602c0 'struct __NSConstantString_tag'\n|   `-Record 0x2d60238 '__NSConstantString_tag'" always "|-TypedefDecl 0x2d604a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\n| `-RecordType 0x2d602c0 'struct __NSConstantString_tag'\n|   `-Record 0x2d60238 '__NSConstantString_tag'"
Line 934
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  934 always 934
  "typedef struct __NSConstantString_tag __NSConstantString ;" always "typedef struct __NSConstantString_tag __NSConstantString ;"
  clang always "|-TypedefDecl 0x2d604a8 <<invalid sloc>> <invalid sloc> implicit __NSConstantString 'struct __NSConstantString_tag'\n| `-RecordType 0x2d602c0 'struct __NSConstantString_tag'\n|   `-Record 0x2d60238 '__NSConstantString_tag'"
Line 938
  165 always 165
  = always "|-TypedefDecl 0x2d60540 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\n| `-PointerType 0x2d60500 'char *'\n|   `-BuiltinType 0x2d5f980 'char'"
  "|-TypedefDecl 0x2d60540 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\n| `-PointerType 0x2d60500 'char *'\n|   `-BuiltinType 0x2d5f980 'char'" always "|-TypedefDecl 0x2d60540 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\n| `-PointerType 0x2d60500 'char *'\n|   `-BuiltinType 0x2d5f980 'char'"
Line 941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  941 always 941
  "typedef char * __builtin_ms_va_list ;" always "typedef char * __builtin_ms_va_list ;"
  clang always "|-TypedefDecl 0x2d60540 <<invalid sloc>> <invalid sloc> implicit __builtin_ms_va_list 'char *'\n| `-PointerType 0x2d60500 'char *'\n|   `-BuiltinType 0x2d5f980 'char'"
Line 945
  215 always 215
  = always "`-VarDecl 0x24cc610 <a.cpp:1:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x24cc6e8 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x24cc6c8 <col:9, col:19> 'unsigned long' sizeof 'int'\n"
  "`-VarDecl 0x24cc610 <a.cpp:1:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x24cc6e8 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x24cc6c8 <col:9, col:19> 'unsigned long' sizeof 'int'\n" always "`-VarDecl 0x24cc610 <a.cpp:1:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x24cc6e8 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x24cc6c8 <col:9, col:19> 'unsigned long' sizeof 'int'\n"
Line 948
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  948 always 948
  "int x@1 = sizeof ( int ) ;" always "int x@1 = sizeof ( int ) ;"
  clang always "`-VarDecl 0x24cc610 <a.cpp:1:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x24cc6e8 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x24cc6c8 <col:9, col:19> 'unsigned long' sizeof 'int'\n"
Line 952
  365 always 365
  = always "`-VarDecl 0x27c6c00 <line:3:5, col:23> col:9 x 'int' cinit\n  `-ImplicitCastExpr 0x27c6cc8 <col:13, col:23> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x27c6ca8 <col:13, col:23> 'unsigned long' sizeof\n      `-ParenExpr 0x27c6c88 <col:19, col:23> 'char [10]' lvalue\n        `-DeclRefExpr 0x27c6c60 <col:20> 'char [10]' lvalue Var 0x27c6b48 'buf' 'char [10]'"
  "`-VarDecl 0x27c6c00 <line:3:5, col:23> col:9 x 'int' cinit\n  `-ImplicitCastExpr 0x27c6cc8 <col:13, col:23> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x27c6ca8 <col:13, col:23> 'unsigned long' sizeof\n      `-ParenExpr 0x27c6c88 <col:19, col:23> 'char [10]' lvalue\n        `-DeclRefExpr 0x27c6c60 <col:20> 'char [10]' lvalue Var 0x27c6b48 'buf' 'char [10]'" always "`-VarDecl 0x27c6c00 <line:3:5, col:23> col:9 x 'int' cinit\n  `-ImplicitCastExpr 0x27c6cc8 <col:13, col:23> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x27c6ca8 <col:13, col:23> 'unsigned long' sizeof\n      `-ParenExpr 0x27c6c88 <col:19, col:23> 'char [10]' lvalue\n        `-DeclRefExpr 0x27c6c60 <col:20> 'char [10]' lvalue Var 0x27c6b48 'buf' 'char [10]'"
Line 957
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  957 always 957
  "int x@1 = sizeof ( buf ) ;" always "int x@1 = sizeof ( buf ) ;"
  clang always "`-VarDecl 0x27c6c00 <line:3:5, col:23> col:9 x 'int' cinit\n  `-ImplicitCastExpr 0x27c6cc8 <col:13, col:23> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x27c6ca8 <col:13, col:23> 'unsigned long' sizeof\n      `-ParenExpr 0x27c6c88 <col:19, col:23> 'char [10]' lvalue\n        `-DeclRefExpr 0x27c6c60 <col:20> 'char [10]' lvalue Var 0x27c6b48 'buf' 'char [10]'"
Line 961
  676 always 676
  = always "`-FunctionDecl 0x2dd9748 <1.cpp:2:1, col:44> col:5 foo 'int (int *)'\n  |-ParmVarDecl 0x2dd9680 <col:14, col:19> col:19 used p 'int *'\n  `-CompoundStmt 0x2dd9908 <col:22, col:44>\n    `-ReturnStmt 0x2dd98f0 <col:24, col:41>\n      `-BinaryOperator 0x2dd98c8 <col:31, col:41> 'int' '/'\n        |-IntegerLiteral 0x2dd9830 <col:31> 'int' 100000\n        `-ImplicitCastExpr 0x2dd98b0 <col:40, col:41> 'int' <LValueToRValue>\n          `-UnaryOperator 0x2dd9890 <col:40, col:41> 'int' lvalue prefix '*' cannot overflow\n            `-ImplicitCastExpr 0x2dd9878 <col:41> 'int *' <LValueToRValue>\n              `-DeclRefExpr 0x2dd9850 <col:41> 'int *' lvalue ParmVar 0x2dd9680 'p' 'int *'"
  "`-FunctionDecl 0x2dd9748 <1.cpp:2:1, col:44> col:5 foo 'int (int *)'\n  |-ParmVarDecl 0x2dd9680 <col:14, col:19> col:19 used p 'int *'\n  `-CompoundStmt 0x2dd9908 <col:22, col:44>\n    `-ReturnStmt 0x2dd98f0 <col:24, col:41>\n      `-BinaryOperator 0x2dd98c8 <col:31, col:41> 'int' '/'\n        |-IntegerLiteral 0x2dd9830 <col:31> 'int' 100000\n        `-ImplicitCastExpr 0x2dd98b0 <col:40, col:41> 'int' <LValueToRValue>\n          `-UnaryOperator 0x2dd9890 <col:40, col:41> 'int' lvalue prefix '*' cannot overflow\n            `-ImplicitCastExpr 0x2dd9878 <col:41> 'int *' <LValueToRValue>\n              `-DeclRefExpr 0x2dd9850 <col:41> 'int *' lvalue ParmVar 0x2dd9680 'p' 'int *'" always "`-FunctionDecl 0x2dd9748 <1.cpp:2:1, col:44> col:5 foo 'int (int *)'\n  |-ParmVarDecl 0x2dd9680 <col:14, col:19> col:19 used p 'int *'\n  `-CompoundStmt 0x2dd9908 <col:22, col:44>\n    `-ReturnStmt 0x2dd98f0 <col:24, col:41>\n      `-BinaryOperator 0x2dd98c8 <col:31, col:41> 'int' '/'\n        |-IntegerLiteral 0x2dd9830 <col:31> 'int' 100000\n        `-ImplicitCastExpr 0x2dd98b0 <col:40, col:41> 'int' <LValueToRValue>\n          `-UnaryOperator 0x2dd9890 <col:40, col:41> 'int' lvalue prefix '*' cannot overflow\n            `-ImplicitCastExpr 0x2dd9878 <col:41> 'int *' <LValueToRValue>\n              `-DeclRefExpr 0x2dd9850 <col:41> 'int *' lvalue ParmVar 0x2dd9680 'p' 'int *'"
Line 971
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  971 always 971
  "int foo ( int * p@1 ) { return 100000 / * p@1 ; }" always "int foo ( int * p@1 ) { return 100000 / * p@1 ; }"
  clang always "`-FunctionDecl 0x2dd9748 <1.cpp:2:1, col:44> col:5 foo 'int (int *)'\n  |-ParmVarDecl 0x2dd9680 <col:14, col:19> col:19 used p 'int *'\n  `-CompoundStmt 0x2dd9908 <col:22, col:44>\n    `-ReturnStmt 0x2dd98f0 <col:24, col:41>\n      `-BinaryOperator 0x2dd98c8 <col:31, col:41> 'int' '/'\n        |-IntegerLiteral 0x2dd9830 <col:31> 'int' 100000\n        `-ImplicitCastExpr 0x2dd98b0 <col:40, col:41> 'int' <LValueToRValue>\n          `-UnaryOperator 0x2dd9890 <col:40, col:41> 'int' lvalue prefix '*' cannot overflow\n            `-ImplicitCastExpr 0x2dd9878 <col:41> 'int *' <LValueToRValue>\n              `-DeclRefExpr 0x2dd9850 <col:41> 'int *' lvalue ParmVar 0x2dd9680 'p' 'int *'"
Line 975
  300 always 300
  = always "|-VarDecl 0x32b8aa0 <1.c:1:1, col:9> col:5 used a 'int' cinit\n| `-IntegerLiteral 0x32b8b40 <col:9> 'int' 1\n`-VarDecl 0x32b8b78 <line:2:1, col:9> col:5 b 'int' cinit\n  `-ImplicitCastExpr 0x32b8c00 <col:9> 'int' <LValueToRValue>\n    `-DeclRefExpr 0x32b8bd8 <col:9> 'int' lvalue Var 0x32b8aa0 'a' 'int'"
  "|-VarDecl 0x32b8aa0 <1.c:1:1, col:9> col:5 used a 'int' cinit\n| `-IntegerLiteral 0x32b8b40 <col:9> 'int' 1\n`-VarDecl 0x32b8b78 <line:2:1, col:9> col:5 b 'int' cinit\n  `-ImplicitCastExpr 0x32b8c00 <col:9> 'int' <LValueToRValue>\n    `-DeclRefExpr 0x32b8bd8 <col:9> 'int' lvalue Var 0x32b8aa0 'a' 'int'" always "|-VarDecl 0x32b8aa0 <1.c:1:1, col:9> col:5 used a 'int' cinit\n| `-IntegerLiteral 0x32b8b40 <col:9> 'int' 1\n`-VarDecl 0x32b8b78 <line:2:1, col:9> col:5 b 'int' cinit\n  `-ImplicitCastExpr 0x32b8c00 <col:9> 'int' <LValueToRValue>\n    `-DeclRefExpr 0x32b8bd8 <col:9> 'int' lvalue Var 0x32b8aa0 'a' 'int'"
Line 981
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  981 always 981
  "int a@1 = 1 ; int b@2 = a@1 ;" always "int a@1 = 1 ; int b@2 = a@1 ;"
  clang always "|-VarDecl 0x32b8aa0 <1.c:1:1, col:9> col:5 used a 'int' cinit\n| `-IntegerLiteral 0x32b8b40 <col:9> 'int' 1\n`-VarDecl 0x32b8b78 <line:2:1, col:9> col:5 b 'int' cinit\n  `-ImplicitCastExpr 0x32b8c00 <col:9> 'int' <LValueToRValue>\n    `-DeclRefExpr 0x32b8bd8 <col:9> 'int' lvalue Var 0x32b8aa0 'a' 'int'"
Line 986
  569 always 569
  = always "|-VarDecl 0x3873b50 <1.c:1:1, col:9> col:5 used a 'int [10]'\n`-FunctionDecl 0x3873c38 <line:3:1, line:6:1> line:3:6 foo 'void ()'\n  `-CompoundStmt 0x3873dd0 <line:4:1, line:6:1>\n    `-BinaryOperator 0x3873da8 <line:5:3, col:10> 'int' '='\n      |-ArraySubscriptExpr 0x3873d60 <col:3, col:6> 'int' lvalue\n      | |-ImplicitCastExpr 0x3873d48 <col:3> 'int *' <ArrayToPointerDecay>\n      | | `-DeclRefExpr 0x3873cd8 <col:3> 'int [10]' lvalue Var 0x3873b50 'a' 'int [10]'\n      | `-IntegerLiteral 0x3873d00 <col:5> 'int' 0\n      `-IntegerLiteral 0x3873d88 <col:10> 'int' 0\n"
  "|-VarDecl 0x3873b50 <1.c:1:1, col:9> col:5 used a 'int [10]'\n`-FunctionDecl 0x3873c38 <line:3:1, line:6:1> line:3:6 foo 'void ()'\n  `-CompoundStmt 0x3873dd0 <line:4:1, line:6:1>\n    `-BinaryOperator 0x3873da8 <line:5:3, col:10> 'int' '='\n      |-ArraySubscriptExpr 0x3873d60 <col:3, col:6> 'int' lvalue\n      | |-ImplicitCastExpr 0x3873d48 <col:3> 'int *' <ArrayToPointerDecay>\n      | | `-DeclRefExpr 0x3873cd8 <col:3> 'int [10]' lvalue Var 0x3873b50 'a' 'int [10]'\n      | `-IntegerLiteral 0x3873d00 <col:5> 'int' 0\n      `-IntegerLiteral 0x3873d88 <col:10> 'int' 0\n" always "|-VarDecl 0x3873b50 <1.c:1:1, col:9> col:5 used a 'int [10]'\n`-FunctionDecl 0x3873c38 <line:3:1, line:6:1> line:3:6 foo 'void ()'\n  `-CompoundStmt 0x3873dd0 <line:4:1, line:6:1>\n    `-BinaryOperator 0x3873da8 <line:5:3, col:10> 'int' '='\n      |-ArraySubscriptExpr 0x3873d60 <col:3, col:6> 'int' lvalue\n      | |-ImplicitCastExpr 0x3873d48 <col:3> 'int *' <ArrayToPointerDecay>\n      | | `-DeclRefExpr 0x3873cd8 <col:3> 'int [10]' lvalue Var 0x3873b50 'a' 'int [10]'\n      | `-IntegerLiteral 0x3873d00 <col:5> 'int' 0\n      `-IntegerLiteral 0x3873d88 <col:10> 'int' 0\n"
Line 996
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  996 always 996
  "int [10] a@1 ; void foo ( ) { a@1 [ 0 ] = 0 ; }" always "int [10] a@1 ; void foo ( ) { a@1 [ 0 ] = 0 ; }"
  clang always "|-VarDecl 0x3873b50 <1.c:1:1, col:9> col:5 used a 'int [10]'\n`-FunctionDecl 0x3873c38 <line:3:1, line:6:1> line:3:6 foo 'void ()'\n  `-CompoundStmt 0x3873dd0 <line:4:1, line:6:1>\n    `-BinaryOperator 0x3873da8 <line:5:3, col:10> 'int' '='\n      |-ArraySubscriptExpr 0x3873d60 <col:3, col:6> 'int' lvalue\n      | |-ImplicitCastExpr 0x3873d48 <col:3> 'int *' <ArrayToPointerDecay>\n      | | `-DeclRefExpr 0x3873cd8 <col:3> 'int [10]' lvalue Var 0x3873b50 'a' 'int [10]'\n      | `-IntegerLiteral 0x3873d00 <col:5> 'int' 0\n      `-IntegerLiteral 0x3873d88 <col:10> 'int' 0\n"
Line 1001
  61 always 61
  = always "`-VarDecl 0x25a8aa0 <1.c:1:1, col:12> col:12 p 'const int *'"
  "`-VarDecl 0x25a8aa0 <1.c:1:1, col:12> col:12 p 'const int *'" always "`-VarDecl 0x25a8aa0 <1.c:1:1, col:12> col:12 p 'const int *'"
Line 1002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1002 always 1002
  "const int * p@1 ;" always "const int * p@1 ;"
  clang always "`-VarDecl 0x25a8aa0 <1.c:1:1, col:12> col:12 p 'const int *'"
Line 1006
  70 always 70
  = always "|-VarDecl 0x23d6c78 <line:137:1, col:14> col:14 stdin 'FILE *' extern"
  "|-VarDecl 0x23d6c78 <line:137:1, col:14> col:14 stdin 'FILE *' extern" always "|-VarDecl 0x23d6c78 <line:137:1, col:14> col:14 stdin 'FILE *' extern"
Line 1007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1007 always 1007
  "FILE * stdin@1 ;" always "FILE * stdin@1 ;"
  clang always "|-VarDecl 0x23d6c78 <line:137:1, col:14> col:14 stdin 'FILE *' extern"
Line 1011
  89 always 89
  = always "|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern"
  "|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern" always "|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern"
Line 1012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1012 always 1012
  "const char * const [] sys_errlist@1 ;" always "const char * const [] sys_errlist@1 ;"
  clang always "|-VarDecl 0x2e31fc0 <line:27:1, col:38> col:26 sys_errlist 'const char *const []' extern"
Line 1016
  112 always 112
  = always "`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3"
  "`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3" always "`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3"
Line 1018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1018 always 1018
  "static int x@1 = 3 ;" always "static int x@1 = 3 ;"
  clang always "`-VarDecl 0x278e170 <1.c:1:1, col:16> col:12 x 'int' static cinit\n  `-IntegerLiteral 0x278e220 <col:16> 'int' 3"
Line 1022
  72 always 72
  = always "`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'"
  "`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'" always "`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'"
Line 1023
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1023 always 1023
  "void * * start@1 ;" always "void * * start@1 ;"
  clang always "`-VarDecl 0x2071f20 <1.cpp:2:1, col:23> col:9 start 'void *(*)(void *)'"
Line 1027
  264 always 264
  = always "`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>"
  "`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>" always "`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>"
Line 1033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1033 always 1033
  "void foo ( ) { while ( 0 ) { ; } }" always "void foo ( ) { while ( 0 ) { ; } }"
  clang always "`-FunctionDecl 0x3d45b18 <1.c:1:1, line:3:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x3d45c48 <col:12, line:3:1>\n    `-WhileStmt 0x3d45c28 <line:2:5, col:14>\n      |-<<<NULL>>>\n      |-IntegerLiteral 0x3d45bf8 <col:12> 'int' 0\n      `-NullStmt 0x3d45c18 <col:14>"
Line 1039
  323 always 323
  = always "`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>"
  "`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>" always "`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>"
Line 1045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1045 always 1045
  "void foo ( ) { while ( 1 ) { } }" always "void foo ( ) { while ( 1 ) { } }"
  clang always "`-FunctionDecl 0x1c99ac8 <1.cpp:1:1, col:27> col:6 foo 'void ()'\n  `-CompoundStmt 0x1c99c10 <col:12, col:27>\n    `-WhileStmt 0x1c99bf8 <col:14, col:25>\n      |-ImplicitCastExpr 0x1c99bd0 <col:21> 'bool' <IntegralToBoolean>\n      | `-IntegerLiteral 0x1c99bb0 <col:21> 'int' 1\n      `-CompoundStmt 0x1c99be8 <col:24, col:25>"
Line 1060
  110 always 110
  = always "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"
  "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>" always "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"
Line 1062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1062 always 1062
  "void foo ( ) { }" always "void foo ( ) { }"
  clang always "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"
Line 1064
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x1e07dd0 <67.cpp:1:1, col:13> col:6 foo 'void ()'\n  `-CompoundStmt 0x1e07eb8 <col:12, col:13>"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1064 always 1064
Line 1066
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1066 always 1066
  1 always 1
Line 1070
  482 always 482
  = always "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"
  "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n" always "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"
Line 1078
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1078 always 1078
  "namespace ns { enum abc { a , b , c } } ns :: abc x@1 = c ;" always "namespace ns { enum abc { a , b , c } } ns :: abc x@1 = c ;"
  clang always "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"
Line 1080
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "|-NamespaceDecl 0x29ad5f8 <1.cpp:1:1, line:3:1> line:1:11 ns\n| `-EnumDecl 0x29ad660 <line:2:1, col:16> col:6 referenced abc\n|   |-EnumConstantDecl 0x29ad720 <col:11> col:11 a 'ns::abc'\n|   |-EnumConstantDecl 0x29ad768 <col:13> col:13 b 'ns::abc'\n|   `-EnumConstantDecl 0x29ad7b0 <col:15> col:15 referenced c 'ns::abc'\n`-VarDecl 0x29ad898 <line:5:1, col:22> col:9 x 'ns::abc':'ns::abc' cinit\n  `-DeclRefExpr 0x29ad998 <col:13, col:22> 'ns::abc' EnumConstant 0x29ad7b0 'c' 'ns::abc'\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1080 always 1080
Line 1083
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1083 always 1083
  3 always 3
Line 1085
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1085 always 1085
Line 1086
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1086 always 1086
  "abc" always "abc"
Line 1088
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1088 always 1088
  "abc" always "abc"
  enumType always symbolic=(enumScope.definedType)
Line 1091
  "x" always "x"
Line 1092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1092 always 1092
Line 1093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1093 always 1093
Line 1094
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1094 always 1094
Line 1095
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1095 always 1095
  ( always !<=0
  & {lifetime[Address]=(enumScope),!0}
  ( always !<=-1
Line 1099
  231 always 231
  = always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n  |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 x 'int'\n  |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 y 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n  |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 x 'int'\n  |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 y 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n" always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n  |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 x 'int'\n  |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 y 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
Line 1104
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n  |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 x 'int'\n  |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 y 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1104 always 1104
Line 1107
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1107 always 1107
  1 always 1
Line 1108
  0 always 0
Line 1109
  scope always symbolic=(db->functionScopes[0])
Line 1110
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1110 always 1110
  2 always 2
  func always symbolic=(scope->function)
Line 1111
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1111 always 1111
  "x" always "x"
  func always symbolic=(scope->function)
  0 always 0
Line 1112
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1112 always 1112
  "y" always "y"
  1 always 1
Line 1113
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1113 always 1113
  0 always 0
Line 1114
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1114 always 1114
  1 always 1
Line 1118
  227 always 227
  = always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n| |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 'int'\n| |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n| |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 'int'\n| |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n" always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n| |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 'int'\n| |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
Line 1123
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "|-FunctionDecl 0x3aea7a0 <1.cpp:2:1, col:22> col:6 used foo 'void (int, int)'\n| |-ParmVarDecl 0x3aea650 <col:10, col:14> col:14 'int'\n| |-ParmVarDecl 0x3aea6c8 <col:17, col:21> col:21 'int'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1123 always 1123
Line 1126
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1126 always 1126
  1 always 1
Line 1127
  0 always 0
Line 1128
  scope always symbolic=(db->functionScopes[0])
Line 1129
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1129 always 1129
  2 always 2
  func always symbolic=(scope->function)
Line 1130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1130 always 1130
  0 always 0
  func always symbolic=(scope->function)
  0 always 0
Line 1131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1131 always 1131
  0 always 0
  1 always 1
Line 1135
  248 always 248
  = always "`-FunctionDecl 0x238fcd8 <9640.cpp:1:1, col:26> col:6 used bar 'bool (const char, int &)'\n  |-ParmVarDecl 0x238fb10 <col:10, col:16> col:20 'const char'\n  |-ParmVarDecl 0x238fbc0 <col:22, col:25> col:26 'int &'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  "`-FunctionDecl 0x238fcd8 <9640.cpp:1:1, col:26> col:6 used bar 'bool (const char, int &)'\n  |-ParmVarDecl 0x238fb10 <col:10, col:16> col:20 'const char'\n  |-ParmVarDecl 0x238fbc0 <col:22, col:25> col:26 'int &'\n  `-CompoundStmt 0x3d45c48 <col:12>\n" always "`-FunctionDecl 0x238fcd8 <9640.cpp:1:1, col:26> col:6 used bar 'bool (const char, int &)'\n  |-ParmVarDecl 0x238fb10 <col:10, col:16> col:20 'const char'\n  |-ParmVarDecl 0x238fbc0 <col:22, col:25> col:26 'int &'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
Line 1140
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x238fcd8 <9640.cpp:1:1, col:26> col:6 used bar 'bool (const char, int &)'\n  |-ParmVarDecl 0x238fb10 <col:10, col:16> col:20 'const char'\n  |-ParmVarDecl 0x238fbc0 <col:22, col:25> col:26 'int &'\n  `-CompoundStmt 0x3d45c48 <col:12>\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1140 always 1140
Line 1143
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1143 always 1143
  1 always 1
Line 1144
  0 always 0
Line 1145
  scope always symbolic=(db->functionScopes[0])
Line 1146
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1146 always 1146
  2 always 2
  func always symbolic=(scope->function)
Line 1147
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1147 always 1147
  false always 0
  func always symbolic=(scope->function)
  0 always 0
Line 1148
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1148 always 1148
  true always 1
  1 always 1
Line 1152
  147 always 147
  = always "`-CXXRecordDecl 0x7e2d98 <1.cpp:2:1, line:5:1> line:2:7 class foo definition\n  `-CXXMethodDecl 0x7e3000 <line:4:3, col:12> col:8 f 'void () const'"
  "`-CXXRecordDecl 0x7e2d98 <1.cpp:2:1, line:5:1> line:2:7 class foo definition\n  `-CXXMethodDecl 0x7e3000 <line:4:3, col:12> col:8 f 'void () const'" always "`-CXXRecordDecl 0x7e2d98 <1.cpp:2:1, line:5:1> line:2:7 class foo definition\n  `-CXXMethodDecl 0x7e3000 <line:4:3, col:12> col:8 f 'void () const'"
Line 1155
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-CXXRecordDecl 0x7e2d98 <1.cpp:2:1, line:5:1> line:2:7 class foo definition\n  `-CXXMethodDecl 0x7e3000 <line:4:3, col:12> col:8 f 'void () const'"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1155 always 1155
Line 1158
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1158 always 1158
  2 always 2
Line 1159
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1159 always 1159
  1 always 1
Line 1161
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1161 always 1161
Line 1165
  407 always 407
  = always "`-FunctionDecl 0x1593df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x15940b0 <col:12, line:4:1>\n    |-DeclStmt 0x1593f58 <line:2:3, col:8>\n    | `-VarDecl 0x1593ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1594098 <line:3:3, col:15>\n      `-VarDecl 0x1593fb8 <col:3, col:14> col:8 ref 'int &' cinit\n        `-DeclRefExpr 0x1594020 <col:14> 'int' lvalue Var 0x1593ef0 'x' 'int'"
  "`-FunctionDecl 0x1593df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x15940b0 <col:12, line:4:1>\n    |-DeclStmt 0x1593f58 <line:2:3, col:8>\n    | `-VarDecl 0x1593ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1594098 <line:3:3, col:15>\n      `-VarDecl 0x1593fb8 <col:3, col:14> col:8 ref 'int &' cinit\n        `-DeclRefExpr 0x1594020 <col:14> 'int' lvalue Var 0x1593ef0 'x' 'int'" always "`-FunctionDecl 0x1593df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x15940b0 <col:12, line:4:1>\n    |-DeclStmt 0x1593f58 <line:2:3, col:8>\n    | `-VarDecl 0x1593ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1594098 <line:3:3, col:15>\n      `-VarDecl 0x1593fb8 <col:3, col:14> col:8 ref 'int &' cinit\n        `-DeclRefExpr 0x1594020 <col:14> 'int' lvalue Var 0x1593ef0 'x' 'int'"
Line 1172
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x1593df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x15940b0 <col:12, line:4:1>\n    |-DeclStmt 0x1593f58 <line:2:3, col:8>\n    | `-VarDecl 0x1593ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1594098 <line:3:3, col:15>\n      `-VarDecl 0x1593fb8 <col:3, col:14> col:8 ref 'int &' cinit\n        `-DeclRefExpr 0x1594020 <col:14> 'int' lvalue Var 0x1593ef0 'x' 'int'"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1172 always 1172
Line 1174
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1174 always 1174
Line 1178
  801 always 801
  = always "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"
  "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n" always "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"
Line 1191
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1191 always 1191
  "void foo ( ) { int x@1 ; int && ref@2 = x@1 + 1 ; }" always "void foo ( ) { int x@1 ; int && ref@2 = x@1 + 1 ; }"
  clang always "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"
Line 1193
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x1a40df0 <3.cpp:1:1, line:4:1> line:1:6 foo 'void ()'\n  `-CompoundStmt 0x1a41180 <col:12, line:4:1>\n    |-DeclStmt 0x1a40f58 <line:2:3, col:8>\n    | `-VarDecl 0x1a40ef0 <col:3, col:7> col:7 used x 'int'\n    `-DeclStmt 0x1a41168 <line:3:3, col:18>\n      `-VarDecl 0x1a40fb8 <col:3, col:17> col:9 ref 'int &&' cinit\n        `-ExprWithCleanups 0x1a410f8 <col:15, col:17> 'int' xvalue\n          `-MaterializeTemporaryExpr 0x1a41098 <col:15, col:17> 'int' xvalue extended by Var 0x1a40fb8 'ref' 'int &&'\n            `-BinaryOperator 0x1a41078 <col:15, col:17> 'int' '+'\n              |-ImplicitCastExpr 0x1a41060 <col:15> 'int' <LValueToRValue>\n              | `-DeclRefExpr 0x1a41020 <col:15> 'int' lvalue Var 0x1a40ef0 'x' 'int'\n              `-IntegerLiteral 0x1a41040 <col:17> 'int' 1\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1193 always 1193
Line 1195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1195 always 1195
Line 1196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1196 always 1196
Line 1200
  136 always 136
  = always "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"
  "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n" always "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"
Line 1203
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1203 always 1203
  "void foo ( int * & p@1 ) ;" always "void foo ( int * & p@1 ) ;"
  clang always "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"
Line 1205
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x9b4f10 <3.cpp:1:1, col:17> col:6 used foo 'void (int *&)'\n  `-ParmVarDecl 0x9b4e40 <col:10, col:16> col:16 p 'int *&'\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1205 always 1205
Line 1207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1207 always 1207
Line 1208
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1208 always 1208
Line 1212
  597 always 597
  = always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-BinaryOperator 0x3243a20 <col:10, col:12> 'long' '+'\n        |-ImplicitCastExpr 0x32439f0 <col:10> 'a::b':'long' <LValueToRValue>\n        | `-DeclRefExpr 0x32439a8 <col:10> 'a::b':'long' lvalue ParmVar 0x32437b0 'i' 'a::b':'long'\n        `-ImplicitCastExpr 0x3243a08 <col:12> 'long' <IntegralCast>\n          `-IntegerLiteral 0x32439d0 <col:12> 'int' 1\n"
  "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-BinaryOperator 0x3243a20 <col:10, col:12> 'long' '+'\n        |-ImplicitCastExpr 0x32439f0 <col:10> 'a::b':'long' <LValueToRValue>\n        | `-DeclRefExpr 0x32439a8 <col:10> 'a::b':'long' lvalue ParmVar 0x32437b0 'i' 'a::b':'long'\n        `-ImplicitCastExpr 0x3243a08 <col:12> 'long' <IntegralCast>\n          `-IntegerLiteral 0x32439d0 <col:12> 'int' 1\n" always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-BinaryOperator 0x3243a20 <col:10, col:12> 'long' '+'\n        |-ImplicitCastExpr 0x32439f0 <col:10> 'a::b':'long' <LValueToRValue>\n        | `-DeclRefExpr 0x32439a8 <col:10> 'a::b':'long' lvalue ParmVar 0x32437b0 'i' 'a::b':'long'\n        `-ImplicitCastExpr 0x3243a08 <col:12> 'long' <IntegralCast>\n          `-IntegerLiteral 0x32439d0 <col:12> 'int' 1\n"
Line 1222
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-BinaryOperator 0x3243a20 <col:10, col:12> 'long' '+'\n        |-ImplicitCastExpr 0x32439f0 <col:10> 'a::b':'long' <LValueToRValue>\n        | `-DeclRefExpr 0x32439a8 <col:10> 'a::b':'long' lvalue ParmVar 0x32437b0 'i' 'a::b':'long'\n        `-ImplicitCastExpr 0x3243a08 <col:12> 'long' <IntegralCast>\n          `-IntegerLiteral 0x32439d0 <col:12> 'int' 1\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1222 always 1222
Line 1224
  "i + 1" always "i + 1"
Line 1225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1225 always 1225
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1226 always 1226
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1227
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1227 always 1227
  "signed long" always "signed long"
Line 1231
  432 always 432
  = always "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"
  "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>" always "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"
Line 1242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1242 always 1242
  "void f ( ) { for ( int i@1 = 0 ; ; ) { } }" always "void f ( ) { for ( int i@1 = 0 ; ; ) { } }"
  clang always "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"
Line 1244
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x38f8bb0 <10100.c:2:1, line:4:1> line:2:6 f 'void (void)'\n  `-CompoundStmt 0x38f8d88 <col:14, line:4:1>\n    `-ForStmt 0x38f8d50 <line:3:5, col:26>\n      |-DeclStmt 0x38f8d28 <col:10, col:19>\n      | `-VarDecl 0x38f8ca8 <col:10, col:18> col:14 i 'int' cinit\n      |   `-IntegerLiteral 0x38f8d08 <col:18> 'int' 0\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      |-<<<NULL>>>\n      `-CompoundStmt 0x38f8d40 <col:25, col:26>"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1244 always 1244
Line 1246
  "i" always "i"
Line 1247
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1247 always 1247
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1248 always 1248
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1249
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1249 always 1249
Line 1254
  424 always 424
  = always "|-RecordDecl 0x2fc5a88 <1.c:1:1, line:4:1> line:1:8 struct S definition\n| |-FieldDecl 0x2fc5b48 <line:2:3, col:7> col:7 x 'int'\n| `-FieldDecl 0x2fc5c10 <line:3:3, col:13> col:7 buf 'int [10]'\n`-VarDecl 0x2fc5c70 <line:6:1, col:25> col:5 sz 'int' cinit\n  `-ImplicitCastExpr 0x2fc5d88 <col:10, col:25> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x2fc5d68 <col:10, col:25> 'unsigned long' sizeof 'struct S':'struct S'"
  "|-RecordDecl 0x2fc5a88 <1.c:1:1, line:4:1> line:1:8 struct S definition\n| |-FieldDecl 0x2fc5b48 <line:2:3, col:7> col:7 x 'int'\n| `-FieldDecl 0x2fc5c10 <line:3:3, col:13> col:7 buf 'int [10]'\n`-VarDecl 0x2fc5c70 <line:6:1, col:25> col:5 sz 'int' cinit\n  `-ImplicitCastExpr 0x2fc5d88 <col:10, col:25> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x2fc5d68 <col:10, col:25> 'unsigned long' sizeof 'struct S':'struct S'" always "|-RecordDecl 0x2fc5a88 <1.c:1:1, line:4:1> line:1:8 struct S definition\n| |-FieldDecl 0x2fc5b48 <line:2:3, col:7> col:7 x 'int'\n| `-FieldDecl 0x2fc5c10 <line:3:3, col:13> col:7 buf 'int [10]'\n`-VarDecl 0x2fc5c70 <line:6:1, col:25> col:5 sz 'int' cinit\n  `-ImplicitCastExpr 0x2fc5d88 <col:10, col:25> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x2fc5d68 <col:10, col:25> 'unsigned long' sizeof 'struct S':'struct S'"
Line 1260
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "|-RecordDecl 0x2fc5a88 <1.c:1:1, line:4:1> line:1:8 struct S definition\n| |-FieldDecl 0x2fc5b48 <line:2:3, col:7> col:7 x 'int'\n| `-FieldDecl 0x2fc5c10 <line:3:3, col:13> col:7 buf 'int [10]'\n`-VarDecl 0x2fc5c70 <line:6:1, col:25> col:5 sz 'int' cinit\n  `-ImplicitCastExpr 0x2fc5d88 <col:10, col:25> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x2fc5d68 <col:10, col:25> 'unsigned long' sizeof 'struct S':'struct S'"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1260 always 1260
Line 1262
  "sizeof (" always "sizeof ("
Line 1263
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1263 always 1263
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1265 always 1265
Line 1266
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1266 always 1266
  44 always 44
Line 1272
  457 always 457
  = always "|-VarDecl 0x10f6de8 <66.cpp:3:1, col:11> col:5 referenced buf 'int [42]'\n`-VarDecl 0x10f6eb0 <line:4:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x10f6f78 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x10f6f58 <col:9, col:19> 'unsigned long' sizeof\n      `-ParenExpr 0x10f6f38 <col:15, col:19> 'int [42]' lvalue\n        `-DeclRefExpr 0x10f6f18 <col:16> 'int [42]' lvalue Var 0x10f6de8 'buf' 'int [42]' non_odr_use_unevaluated"
  "|-VarDecl 0x10f6de8 <66.cpp:3:1, col:11> col:5 referenced buf 'int [42]'\n`-VarDecl 0x10f6eb0 <line:4:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x10f6f78 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x10f6f58 <col:9, col:19> 'unsigned long' sizeof\n      `-ParenExpr 0x10f6f38 <col:15, col:19> 'int [42]' lvalue\n        `-DeclRefExpr 0x10f6f18 <col:16> 'int [42]' lvalue Var 0x10f6de8 'buf' 'int [42]' non_odr_use_unevaluated" always "|-VarDecl 0x10f6de8 <66.cpp:3:1, col:11> col:5 referenced buf 'int [42]'\n`-VarDecl 0x10f6eb0 <line:4:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x10f6f78 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x10f6f58 <col:9, col:19> 'unsigned long' sizeof\n      `-ParenExpr 0x10f6f38 <col:15, col:19> 'int [42]' lvalue\n        `-DeclRefExpr 0x10f6f18 <col:16> 'int [42]' lvalue Var 0x10f6de8 'buf' 'int [42]' non_odr_use_unevaluated"
Line 1279
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "|-VarDecl 0x10f6de8 <66.cpp:3:1, col:11> col:5 referenced buf 'int [42]'\n`-VarDecl 0x10f6eb0 <line:4:1, col:19> col:5 x 'int' cinit\n  `-ImplicitCastExpr 0x10f6f78 <col:9, col:19> 'int' <IntegralCast>\n    `-UnaryExprOrTypeTraitExpr 0x10f6f58 <col:9, col:19> 'unsigned long' sizeof\n      `-ParenExpr 0x10f6f38 <col:15, col:19> 'int [42]' lvalue\n        `-DeclRefExpr 0x10f6f18 <col:16> 'int [42]' lvalue Var 0x10f6de8 'buf' 'int [42]' non_odr_use_unevaluated"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1279 always 1279
Line 1281
  "sizeof (" always "sizeof ("
Line 1282
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1282 always 1282
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1289
  451 always 451
  = always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-ImplicitCastExpr 0x2176ca8 <col:9> 'int' <IntegralCast>\n        `-ImplicitCastExpr 0x2176c90 <col:9> 'bool' <LValueToRValue>\n          `-DeclRefExpr 0x2176c60 <col:9> 'bool' lvalue Var 0x2176bd0 'e' 'bool'\n"
  "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-ImplicitCastExpr 0x2176ca8 <col:9> 'int' <IntegralCast>\n        `-ImplicitCastExpr 0x2176c90 <col:9> 'bool' <LValueToRValue>\n          `-DeclRefExpr 0x2176c60 <col:9> 'bool' lvalue Var 0x2176bd0 'e' 'bool'\n" always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-ImplicitCastExpr 0x2176ca8 <col:9> 'int' <IntegralCast>\n        `-ImplicitCastExpr 0x2176c90 <col:9> 'bool' <LValueToRValue>\n          `-DeclRefExpr 0x2176c60 <col:9> 'bool' lvalue Var 0x2176bd0 'e' 'bool'\n"
Line 1297
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-FunctionDecl 0x32438c0 <line:5:1, line:7:1> line:5:6 foo 'a::b (a::b)'\n  |-ParmVarDecl 0x32437b0 <col:10, col:15> col:15 used i 'a::b':'long'\n  `-CompoundStmt 0x3243a60 <col:18, line:7:1>\n    `-ReturnStmt 0x3243a48 <line:6:3, col:12>\n      `-ImplicitCastExpr 0x2176ca8 <col:9> 'int' <IntegralCast>\n        `-ImplicitCastExpr 0x2176c90 <col:9> 'bool' <LValueToRValue>\n          `-DeclRefExpr 0x2176c60 <col:9> 'bool' lvalue Var 0x2176bd0 'e' 'bool'\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1297 always 1297
Line 1299
  "e" always "e"
Line 1300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1300 always 1300
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1301 always 1301
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1302
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1302 always 1302
  "bool" always "bool"
Line 1306
  216 always 216
  = always "`-VarDecl 0xc9eda0 <1.cpp:2:1, col:17> col:13 s 'const char *' cinit\n  `-ImplicitCastExpr 0xc9eef0 <col:17> 'const char *' <ArrayToPointerDecay>\n    `-StringLiteral 0xc9eed0 <col:17> 'const char [6]' lvalue \"hello\"\n"
  "`-VarDecl 0xc9eda0 <1.cpp:2:1, col:17> col:13 s 'const char *' cinit\n  `-ImplicitCastExpr 0xc9eef0 <col:17> 'const char *' <ArrayToPointerDecay>\n    `-StringLiteral 0xc9eed0 <col:17> 'const char [6]' lvalue \"hello\"\n" always "`-VarDecl 0xc9eda0 <1.cpp:2:1, col:17> col:13 s 'const char *' cinit\n  `-ImplicitCastExpr 0xc9eef0 <col:17> 'const char *' <ArrayToPointerDecay>\n    `-StringLiteral 0xc9eed0 <col:17> 'const char [6]' lvalue \"hello\"\n"
Line 1310
  = always 1
  true always 1
  & {lifetime[Address]=(settings),!0}
  this always !0
  clang always "`-VarDecl 0xc9eda0 <1.cpp:2:1, col:17> col:13 s 'const char *' cinit\n  `-ImplicitCastExpr 0xc9eef0 <col:17> 'const char *' <ArrayToPointerDecay>\n    `-StringLiteral 0xc9eed0 <col:17> 'const char [6]' lvalue \"hello\"\n"
  & {lifetime[Address]=(tokenizer),!0}
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1310 always 1310
Line 1312
  "\"hello\"" always "\"hello\""
Line 1313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1313 always 1313
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1314 always 1314
  ! always {!<=-1,!>=2}
  ! always {!<=-1,!>=2}
Line 1315
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testclangimport.cpp" always "cppcheck-2.8/test/testclangimport.cpp"
  1315 always 1315
  "const signed char *" always "const signed char *"
