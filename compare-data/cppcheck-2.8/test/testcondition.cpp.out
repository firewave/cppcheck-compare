

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741958 expected@var22 !=@expr1073741959 actual@var23 ) {
62: std ::@expr1073741960 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741961 expected@var22 ;
64: std ::@expr1073741962 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741963 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741964 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741965 str (@expr1073741966 ) , actualStr@var26 .@expr1073741967 str (@expr1073741968 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741969 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741970 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741971 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741972 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testcondition.cpp

1:
|
37:
38: class TestCondition : public TestFixture {
39: public:
40: TestCondition ( ) : TestFixture ( "TestCondition" ) { }
41:
42: private:
43: Settings settings0@var102 ;
44: Settings settings1@var103 ;
45:
46: void run ( ) override {
47:
48: settings0@var102 .@expr1073741976 platform (@expr1073741977 cppcheck ::@expr154 Platform ::@expr155 PlatformType ::@expr156 Native@expr149 ) ;
49: settings1@var103 .@expr1073741981 platform (@expr1073741982 cppcheck ::@expr154 Platform ::@expr155 PlatformType ::@expr156 Native@expr149 ) ;
50:
51: $do ${ $if $(@expr1073741986 settings0@var102 .@expr163 library@var104 $.@expr1073741988 $load $(@expr1073741989 $exename@var11 $.@expr1073741990 $c_str $(@expr1073741991 $) $, "qt.cfg" $) $.@expr1073741992 $errorcode $!=@expr1073741993 $Library $::@expr1073741994 $ErrorCode $::@expr1073741995 $OK $) ${ $complainMissingLib $(@expr1073741996 "qt.cfg" $) $; $return $; $} $} $while $(@expr1073741997 $false $) ;
52: $do ${ $if $(@expr1073741998 settings0@var102 .@expr163 library@var104 $.@expr1073742000 $load $(@expr1073742001 $exename@var11 $.@expr1073742002 $c_str $(@expr1073742003 $) $, "std.cfg" $) $.@expr1073742004 $errorcode $!=@expr1073742005 $Library $::@expr1073742006 $ErrorCode $::@expr1073742007 $OK $) ${ $complainMissingLib $(@expr1073742008 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742009 $false $) ;
53:
54: settings0@var102 .@expr186 severity@var105 .@expr187 enable (@expr1073742012 Severity ::@expr189 style@expr150 ) ;
55: settings0@var102 .@expr186 severity@var105 .@expr187 enable (@expr1073742016 Severity ::@expr193 warning@expr151 ) ;
56:
57: const char cfg@var106 [@expr1073742018 79 ] =@expr1073742019 "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>"
58:
59:
60: ;
61: tinyxml2 ::@expr1073742020 XMLDocument xmldoc@var107 ;
62: xmldoc@var107 .@expr1073742021 Parse (@expr1073742022 cfg@var106 , sizeof (@expr1073742023 cfg@var106 ) ) ;
63: settings1@var103 .@expr200 severity@var108 .@expr201 enable (@expr1073742026 Severity ::@expr189 style@expr150 ) ;
64: settings1@var103 .@expr200 severity@var108 .@expr201 enable (@expr1073742030 Severity ::@expr193 warning@expr151 ) ;
65: settings1@var103 .@expr1073742032 library@var109 .@expr1073742033 load (@expr1073742034 xmldoc@var107 ) ;
66:
67: $do ${ $if $(@expr1073742035 $prepareTest $(@expr1073742036 "assignAndCompare" $) $) ${ $setVerbose $(@expr1073742037 $false $) $; assignAndCompare $(@expr1073742038 $) $; $} $} $while $(@expr1073742039 $false $) ;
68: $do ${ $if $(@expr1073742040 $prepareTest $(@expr1073742041 "mismatchingBitAnd" $) $) ${ $setVerbose $(@expr1073742042 $false $) $; mismatchingBitAnd $(@expr1073742043 $) $; $} $} $while $(@expr1073742044 $false $) ;
69: $do ${ $if $(@expr1073742045 $prepareTest $(@expr1073742046 "comparison" $) $) ${ $setVerbose $(@expr1073742047 $false $) $; comparison $(@expr1073742048 $) $; $} $} $while $(@expr1073742049 $false $) ;
70: $do ${ $if $(@expr1073742050 $prepareTest $(@expr1073742051 "multicompare" $) $) ${ $setVerbose $(@expr1073742052 $false $) $; multicompare $(@expr1073742053 $) $; $} $} $while $(@expr1073742054 $false $) ;
71: $do ${ $if $(@expr1073742055 $prepareTest $(@expr1073742056 "overlappingElseIfCondition" $) $) ${ $setVerbose $(@expr1073742057 $false $) $; overlappingElseIfCondition $(@expr1073742058 $) $; $} $} $while $(@expr1073742059 $false $) ;
72: $do ${ $if $(@expr1073742060 $prepareTest $(@expr1073742061 "oppositeElseIfCondition" $) $) ${ $setVerbose $(@expr1073742062 $false $) $; oppositeElseIfCondition $(@expr1073742063 $) $; $} $} $while $(@expr1073742064 $false $) ;
73:
74: $do ${ $if $(@expr1073742065 $prepareTest $(@expr1073742066 "checkBadBitmaskCheck" $) $) ${ $setVerbose $(@expr1073742067 $false $) $; checkBadBitmaskCheck $(@expr1073742068 $) $; $} $} $while $(@expr1073742069 $false $) ;
75:
76: $do ${ $if $(@expr1073742070 $prepareTest $(@expr1073742071 "incorrectLogicOperator1" $) $) ${ $setVerbose $(@expr1073742072 $false $) $; incorrectLogicOperator1 $(@expr1073742073 $) $; $} $} $while $(@expr1073742074 $false $) ;
77: $do ${ $if $(@expr1073742075 $prepareTest $(@expr1073742076 "incorrectLogicOperator2" $) $) ${ $setVerbose $(@expr1073742077 $false $) $; incorrectLogicOperator2 $(@expr1073742078 $) $; $} $} $while $(@expr1073742079 $false $) ;
78: $do ${ $if $(@expr1073742080 $prepareTest $(@expr1073742081 "incorrectLogicOperator3" $) $) ${ $setVerbose $(@expr1073742082 $false $) $; incorrectLogicOperator3 $(@expr1073742083 $) $; $} $} $while $(@expr1073742084 $false $) ;
79: $do ${ $if $(@expr1073742085 $prepareTest $(@expr1073742086 "incorrectLogicOperator4" $) $) ${ $setVerbose $(@expr1073742087 $false $) $; incorrectLogicOperator4 $(@expr1073742088 $) $; $} $} $while $(@expr1073742089 $false $) ;
80: $do ${ $if $(@expr1073742090 $prepareTest $(@expr1073742091 "incorrectLogicOperator5" $) $) ${ $setVerbose $(@expr1073742092 $false $) $; incorrectLogicOperator5 $(@expr1073742093 $) $; $} $} $while $(@expr1073742094 $false $) ;
81: $do ${ $if $(@expr1073742095 $prepareTest $(@expr1073742096 "incorrectLogicOperator6" $) $) ${ $setVerbose $(@expr1073742097 $false $) $; incorrectLogicOperator6 $(@expr1073742098 $) $; $} $} $while $(@expr1073742099 $false $) ;
82: $do ${ $if $(@expr1073742100 $prepareTest $(@expr1073742101 "incorrectLogicOperator7" $) $) ${ $setVerbose $(@expr1073742102 $false $) $; incorrectLogicOperator7 $(@expr1073742103 $) $; $} $} $while $(@expr1073742104 $false $) ;
83: $do ${ $if $(@expr1073742105 $prepareTest $(@expr1073742106 "incorrectLogicOperator8" $) $) ${ $setVerbose $(@expr1073742107 $false $) $; incorrectLogicOperator8 $(@expr1073742108 $) $; $} $} $while $(@expr1073742109 $false $) ;
84: $do ${ $if $(@expr1073742110 $prepareTest $(@expr1073742111 "incorrectLogicOperator9" $) $) ${ $setVerbose $(@expr1073742112 $false $) $; incorrectLogicOperator9 $(@expr1073742113 $) $; $} $} $while $(@expr1073742114 $false $) ;
85: $do ${ $if $(@expr1073742115 $prepareTest $(@expr1073742116 "incorrectLogicOperator10" $) $) ${ $setVerbose $(@expr1073742117 $false $) $; incorrectLogicOperator10 $(@expr1073742118 $) $; $} $} $while $(@expr1073742119 $false $) ;
86: $do ${ $if $(@expr1073742120 $prepareTest $(@expr1073742121 "incorrectLogicOperator11" $) $) ${ $setVerbose $(@expr1073742122 $false $) $; incorrectLogicOperator11 $(@expr1073742123 $) $; $} $} $while $(@expr1073742124 $false $) ;
87: $do ${ $if $(@expr1073742125 $prepareTest $(@expr1073742126 "incorrectLogicOperator12" $) $) ${ $setVerbose $(@expr1073742127 $false $) $; incorrectLogicOperator12 $(@expr1073742128 $) $; $} $} $while $(@expr1073742129 $false $) ;
88: $do ${ $if $(@expr1073742130 $prepareTest $(@expr1073742131 "incorrectLogicOperator13" $) $) ${ $setVerbose $(@expr1073742132 $false $) $; incorrectLogicOperator13 $(@expr1073742133 $) $; $} $} $while $(@expr1073742134 $false $) ;
89: $do ${ $if $(@expr1073742135 $prepareTest $(@expr1073742136 "incorrectLogicOperator14" $) $) ${ $setVerbose $(@expr1073742137 $false $) $; incorrectLogicOperator14 $(@expr1073742138 $) $; $} $} $while $(@expr1073742139 $false $) ;
90: $do ${ $if $(@expr1073742140 $prepareTest $(@expr1073742141 "incorrectLogicOperator15" $) $) ${ $setVerbose $(@expr1073742142 $false $) $; incorrectLogicOperator15 $(@expr1073742143 $) $; $} $} $while $(@expr1073742144 $false $) ;
91: $do ${ $if $(@expr1073742145 $prepareTest $(@expr1073742146 "incorrectLogicOperator16" $) $) ${ $setVerbose $(@expr1073742147 $false $) $; incorrectLogicOperator16 $(@expr1073742148 $) $; $} $} $while $(@expr1073742149 $false $) ;
92: $do ${ $if $(@expr1073742150 $prepareTest $(@expr1073742151 "secondAlwaysTrueFalseWhenFirstTrueError" $) $) ${ $setVerbose $(@expr1073742152 $false $) $; secondAlwaysTrueFalseWhenFirstTrueError $(@expr1073742153 $) $; $} $} $while $(@expr1073742154 $false $) ;
93: $do ${ $if $(@expr1073742155 $prepareTest $(@expr1073742156 "incorrectLogicOp_condSwapping" $) $) ${ $setVerbose $(@expr1073742157 $false $) $; incorrectLogicOp_condSwapping $(@expr1073742158 $) $; $} $} $while $(@expr1073742159 $false $) ;
94: $do ${ $if $(@expr1073742160 $prepareTest $(@expr1073742161 "testBug5895" $) $) ${ $setVerbose $(@expr1073742162 $false $) $; testBug5895 $(@expr1073742163 $) $; $} $} $while $(@expr1073742164 $false $) ;
95: $do ${ $if $(@expr1073742165 $prepareTest $(@expr1073742166 "testBug5309" $) $) ${ $setVerbose $(@expr1073742167 $false $) $; testBug5309 $(@expr1073742168 $) $; $} $} $while $(@expr1073742169 $false $) ;
96:
97: $do ${ $if $(@expr1073742170 $prepareTest $(@expr1073742171 "modulo" $) $) ${ $setVerbose $(@expr1073742172 $false $) $; modulo $(@expr1073742173 $) $; $} $} $while $(@expr1073742174 $false $) ;
98:
99: $do ${ $if $(@expr1073742175 $prepareTest $(@expr1073742176 "oppositeInnerCondition" $) $) ${ $setVerbose $(@expr1073742177 $false $) $; oppositeInnerCondition $(@expr1073742178 $) $; $} $} $while $(@expr1073742179 $false $) ;
100: $do ${ $if $(@expr1073742180 $prepareTest $(@expr1073742181 "oppositeInnerConditionPointers" $) $) ${ $setVerbose $(@expr1073742182 $false $) $; oppositeInnerConditionPointers $(@expr1073742183 $) $; $} $} $while $(@expr1073742184 $false $) ;
101: $do ${ $if $(@expr1073742185 $prepareTest $(@expr1073742186 "oppositeInnerConditionClass" $) $) ${ $setVerbose $(@expr1073742187 $false $) $; oppositeInnerConditionClass $(@expr1073742188 $) $; $} $} $while $(@expr1073742189 $false $) ;
102: $do ${ $if $(@expr1073742190 $prepareTest $(@expr1073742191 "oppositeInnerConditionUndeclaredVariable" $) $) ${ $setVerbose $(@expr1073742192 $false $) $; oppositeInnerConditionUndeclaredVariable $(@expr1073742193 $) $; $} $} $while $(@expr1073742194 $false $) ;
103: $do ${ $if $(@expr1073742195 $prepareTest $(@expr1073742196 "oppositeInnerConditionAlias" $) $) ${ $setVerbose $(@expr1073742197 $false $) $; oppositeInnerConditionAlias $(@expr1073742198 $) $; $} $} $while $(@expr1073742199 $false $) ;
104: $do ${ $if $(@expr1073742200 $prepareTest $(@expr1073742201 "oppositeInnerCondition2" $) $) ${ $setVerbose $(@expr1073742202 $false $) $; oppositeInnerCondition2 $(@expr1073742203 $) $; $} $} $while $(@expr1073742204 $false $) ;
105: $do ${ $if $(@expr1073742205 $prepareTest $(@expr1073742206 "oppositeInnerCondition3" $) $) ${ $setVerbose $(@expr1073742207 $false $) $; oppositeInnerCondition3 $(@expr1073742208 $) $; $} $} $while $(@expr1073742209 $false $) ;
106: $do ${ $if $(@expr1073742210 $prepareTest $(@expr1073742211 "oppositeInnerConditionAnd" $) $) ${ $setVerbose $(@expr1073742212 $false $) $; oppositeInnerConditionAnd $(@expr1073742213 $) $; $} $} $while $(@expr1073742214 $false $) ;
107: $do ${ $if $(@expr1073742215 $prepareTest $(@expr1073742216 "oppositeInnerConditionEmpty" $) $) ${ $setVerbose $(@expr1073742217 $false $) $; oppositeInnerConditionEmpty $(@expr1073742218 $) $; $} $} $while $(@expr1073742219 $false $) ;
108: $do ${ $if $(@expr1073742220 $prepareTest $(@expr1073742221 "oppositeInnerConditionFollowVar" $) $) ${ $setVerbose $(@expr1073742222 $false $) $; oppositeInnerConditionFollowVar $(@expr1073742223 $) $; $} $} $while $(@expr1073742224 $false $) ;
109:
110: $do ${ $if $(@expr1073742225 $prepareTest $(@expr1073742226 "identicalInnerCondition" $) $) ${ $setVerbose $(@expr1073742227 $false $) $; identicalInnerCondition $(@expr1073742228 $) $; $} $} $while $(@expr1073742229 $false $) ;
111:
112: $do ${ $if $(@expr1073742230 $prepareTest $(@expr1073742231 "identicalConditionAfterEarlyExit" $) $) ${ $setVerbose $(@expr1073742232 $false $) $; identicalConditionAfterEarlyExit $(@expr1073742233 $) $; $} $} $while $(@expr1073742234 $false $) ;
113: $do ${ $if $(@expr1073742235 $prepareTest $(@expr1073742236 "innerConditionModified" $) $) ${ $setVerbose $(@expr1073742237 $false $) $; innerConditionModified $(@expr1073742238 $) $; $} $} $while $(@expr1073742239 $false $) ;
114:
115: $do ${ $if $(@expr1073742240 $prepareTest $(@expr1073742241 "clarifyCondition1" $) $) ${ $setVerbose $(@expr1073742242 $false $) $; clarifyCondition1 $(@expr1073742243 $) $; $} $} $while $(@expr1073742244 $false $) ;
116: $do ${ $if $(@expr1073742245 $prepareTest $(@expr1073742246 "clarifyCondition2" $) $) ${ $setVerbose $(@expr1073742247 $false $) $; clarifyCondition2 $(@expr1073742248 $) $; $} $} $while $(@expr1073742249 $false $) ;
117: $do ${ $if $(@expr1073742250 $prepareTest $(@expr1073742251 "clarifyCondition3" $) $) ${ $setVerbose $(@expr1073742252 $false $) $; clarifyCondition3 $(@expr1073742253 $) $; $} $} $while $(@expr1073742254 $false $) ;
118: $do ${ $if $(@expr1073742255 $prepareTest $(@expr1073742256 "clarifyCondition4" $) $) ${ $setVerbose $(@expr1073742257 $false $) $; clarifyCondition4 $(@expr1073742258 $) $; $} $} $while $(@expr1073742259 $false $) ;
119: $do ${ $if $(@expr1073742260 $prepareTest $(@expr1073742261 "clarifyCondition5" $) $) ${ $setVerbose $(@expr1073742262 $false $) $; clarifyCondition5 $(@expr1073742263 $) $; $} $} $while $(@expr1073742264 $false $) ;
120: $do ${ $if $(@expr1073742265 $prepareTest $(@expr1073742266 "clarifyCondition6" $) $) ${ $setVerbose $(@expr1073742267 $false $) $; clarifyCondition6 $(@expr1073742268 $) $; $} $} $while $(@expr1073742269 $false $) ;
121: $do ${ $if $(@expr1073742270 $prepareTest $(@expr1073742271 "clarifyCondition7" $) $) ${ $setVerbose $(@expr1073742272 $false $) $; clarifyCondition7 $(@expr1073742273 $) $; $} $} $while $(@expr1073742274 $false $) ;
122: $do ${ $if $(@expr1073742275 $prepareTest $(@expr1073742276 "clarifyCondition8" $) $) ${ $setVerbose $(@expr1073742277 $false $) $; clarifyCondition8 $(@expr1073742278 $) $; $} $} $while $(@expr1073742279 $false $) ;
123:
124: $do ${ $if $(@expr1073742280 $prepareTest $(@expr1073742281 "alwaysTrue" $) $) ${ $setVerbose $(@expr1073742282 $false $) $; alwaysTrue $(@expr1073742283 $) $; $} $} $while $(@expr1073742284 $false $) ;
125: $do ${ $if $(@expr1073742285 $prepareTest $(@expr1073742286 "alwaysTrueSymbolic" $) $) ${ $setVerbose $(@expr1073742287 $false $) $; alwaysTrueSymbolic $(@expr1073742288 $) $; $} $} $while $(@expr1073742289 $false $) ;
126: $do ${ $if $(@expr1073742290 $prepareTest $(@expr1073742291 "alwaysTrueInfer" $) $) ${ $setVerbose $(@expr1073742292 $false $) $; alwaysTrueInfer $(@expr1073742293 $) $; $} $} $while $(@expr1073742294 $false $) ;
127: $do ${ $if $(@expr1073742295 $prepareTest $(@expr1073742296 "alwaysTrueContainer" $) $) ${ $setVerbose $(@expr1073742297 $false $) $; alwaysTrueContainer $(@expr1073742298 $) $; $} $} $while $(@expr1073742299 $false $) ;
128: $do ${ $if $(@expr1073742300 $prepareTest $(@expr1073742301 "alwaysTrueLoop" $) $) ${ $setVerbose $(@expr1073742302 $false $) $; alwaysTrueLoop $(@expr1073742303 $) $; $} $} $while $(@expr1073742304 $false $) ;
129: $do ${ $if $(@expr1073742305 $prepareTest $(@expr1073742306 "alwaysTrueTryCatch" $) $) ${ $setVerbose $(@expr1073742307 $false $) $; alwaysTrueTryCatch $(@expr1073742308 $) $; $} $} $while $(@expr1073742309 $false $) ;
130: $do ${ $if $(@expr1073742310 $prepareTest $(@expr1073742311 "multiConditionAlwaysTrue" $) $) ${ $setVerbose $(@expr1073742312 $false $) $; multiConditionAlwaysTrue $(@expr1073742313 $) $; $} $} $while $(@expr1073742314 $false $) ;
131: $do ${ $if $(@expr1073742315 $prepareTest $(@expr1073742316 "duplicateCondition" $) $) ${ $setVerbose $(@expr1073742317 $false $) $; duplicateCondition $(@expr1073742318 $) $; $} $} $while $(@expr1073742319 $false $) ;
132:
133: $do ${ $if $(@expr1073742320 $prepareTest $(@expr1073742321 "checkInvalidTestForOverflow" $) $) ${ $setVerbose $(@expr1073742322 $false $) $; checkInvalidTestForOverflow $(@expr1073742323 $) $; $} $} $while $(@expr1073742324 $false $) ;
134: $do ${ $if $(@expr1073742325 $prepareTest $(@expr1073742326 "checkConditionIsAlwaysTrueOrFalseInsideIfWhile" $) $) ${ $setVerbose $(@expr1073742327 $false $) $; checkConditionIsAlwaysTrueOrFalseInsideIfWhile $(@expr1073742328 $) $; $} $} $while $(@expr1073742329 $false $) ;
135: $do ${ $if $(@expr1073742330 $prepareTest $(@expr1073742331 "alwaysTrueFalseInLogicalOperators" $) $) ${ $setVerbose $(@expr1073742332 $false $) $; alwaysTrueFalseInLogicalOperators $(@expr1073742333 $) $; $} $} $while $(@expr1073742334 $false $) ;
136: $do ${ $if $(@expr1073742335 $prepareTest $(@expr1073742336 "pointerAdditionResultNotNull" $) $) ${ $setVerbose $(@expr1073742337 $false $) $; pointerAdditionResultNotNull $(@expr1073742338 $) $; $} $} $while $(@expr1073742339 $false $) ;
137: $do ${ $if $(@expr1073742340 $prepareTest $(@expr1073742341 "duplicateConditionalAssign" $) $) ${ $setVerbose $(@expr1073742342 $false $) $; duplicateConditionalAssign $(@expr1073742343 $) $; $} $} $while $(@expr1073742344 $false $) ;
138:
139: $do ${ $if $(@expr1073742345 $prepareTest $(@expr1073742346 "checkAssignmentInCondition" $) $) ${ $setVerbose $(@expr1073742347 $false $) $; checkAssignmentInCondition $(@expr1073742348 $) $; $} $} $while $(@expr1073742349 $false $) ;
140: $do ${ $if $(@expr1073742350 $prepareTest $(@expr1073742351 "compareOutOfTypeRange" $) $) ${ $setVerbose $(@expr1073742352 $false $) $; compareOutOfTypeRange $(@expr1073742353 $) $; $} $} $while $(@expr1073742354 $false $) ;
141: $do ${ $if $(@expr1073742355 $prepareTest $(@expr1073742356 "knownConditionCast" $) $) ${ $setVerbose $(@expr1073742357 $false $) $; knownConditionCast $(@expr1073742358 $) $; $} $} $while $(@expr1073742359 $false $) ;
142: $do ${ $if $(@expr1073742360 $prepareTest $(@expr1073742361 "knownConditionIncrementLoop" $) $) ${ $setVerbose $(@expr1073742362 $false $) $; knownConditionIncrementLoop $(@expr1073742363 $) $; $} $} $while $(@expr1073742364 $false $) ;
143: }
144:
145: void check ( const char code@var110 [ ] , Settings * settings@var111 , const char * filename@var112 = "test.cpp" ) {
146:
147: errout@var100 .@expr1073742365 str (@expr1073742366 "" ) ;
148:
149:
150: std ::@expr1073742367 vector < std ::@expr544 string > files@var113 (@expr1073742369 1 , filename@var112 ) ;
151: std ::@expr1073742370 istringstream istr@var114 (@expr1073742371 code@var110 ) ;
152: const simplecpp ::@expr1073742372 TokenList tokens1@var115 (@expr1073742373 istr@var114 , files@var113 , files@var113 [@expr1073742374 0 ] ) ;
153:
154:
155: simplecpp ::@expr1073742375 TokenList tokens2@var116 (@expr1073742376 files@var113 ) ;
156: std ::@expr1073742377 map < std ::@expr544 string , simplecpp ::@expr544 TokenList *@expr1073742380 > filedata@var117 ;
157: simplecpp ::@expr1073742381 preprocess (@expr1073742382 tokens2@var116 , tokens1@var115 , files@var113 , filedata@var117 , simplecpp ::@expr1073742383 DUI (@expr1073742384 ) ) ;
158:
159: Preprocessor preprocessor@var118 (@expr1073742385 *@expr1073742386 settings@var111 , nullptr ) ;
160: preprocessor@var118 .@expr1073742387 setDirectives (@expr1073742388 tokens1@var115 ) ;
161:
162:
163: Tokenizer tokenizer@var119 (@expr1073742389 settings@var111 , this@expr566 ) ;
164: tokenizer@var119 .@expr1073742391 createTokens (@expr1073742392 std ::@expr1073742393 move (@expr1073742394 tokens2@var116 ) ) ;
165: tokenizer@var119 .@expr1073742395 simplifyTokens1 (@expr1073742396 "" ) ;
166: tokenizer@var119 .@expr1073742397 setPreprocessor (@expr1073742398 &@expr1073742399 preprocessor@var118 ) ;
167:
168:
169: CheckCondition checkCondition@var120 ;
170: checkCondition@var120 .@expr1073742400 runChecks (@expr1073742401 &@expr1073742402 tokenizer@var119 , settings@var111 , this@expr566 ) ;
171: }
172:
173: void check ( const char code@var121 [ ] , const char * filename@var122 = "test.cpp" , bool inconclusive@var123 = false ) {
174: settings0@var102 .@expr1073742404 certainty@var124 .@expr1073742405 setEnabled (@expr1073742406 Certainty ::@expr1073742407 inconclusive@expr1073742403 , inconclusive@var123 ) ;
175: check (@expr1073742408 code@var121 , &@expr1073742409 settings0@var102 , filename@var122 ) ;
176: }
177:
178: void assignAndCompare ( ) {
179:
180: check (@expr1073742410 "void foo(int x)\n{\n    int y = x & 4;\n    if (y == 3);\n}"
181:
182:
183:
184: ) ;
185: $if $(@expr1073742411 $!@expr1073742412 $assertEquals $(@expr1073742413 "cppcheck-2.8/test/testcondition.cpp" $, 185 $, "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
186:
187: check (@expr1073742416 "void foo(int x)\n{\n    int y = x & 4;\n    if (y != 3);\n}"
188:
189:
190:
191: ) ;
192: $if $(@expr1073742417 $!@expr1073742418 $assertEquals $(@expr1073742419 "cppcheck-2.8/test/testcondition.cpp" $, 192 $, "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y!=3' is always true.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
193:
194:
195: check (@expr1073742422 "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x710);\n}"
196:
197:
198: ) ;
199: $if $(@expr1073742423 $!@expr1073742424 $assertEquals $(@expr1073742425 "cppcheck-2.8/test/testcondition.cpp" $, 199 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==0x710' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
200:
201: check (@expr1073742428 "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x71f);\n}"
202:
203:
204: ) ;
205: $if $(@expr1073742429 $!@expr1073742430 $assertEquals $(@expr1073742431 "cppcheck-2.8/test/testcondition.cpp" $, 205 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
206:
207:
208: check (@expr1073742434 "void foo(int x) {\n    int y = (x+1) | 1;\n    if (y == 2);\n}"
209:
210:
211: ) ;
212: $if $(@expr1073742435 $!@expr1073742436 $assertEquals $(@expr1073742437 "cppcheck-2.8/test/testcondition.cpp" $, 212 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
213:
214: check (@expr1073742440 "void foo() {\n    int y = 1 | x();\n    if (y == 2);\n}"
215:
216:
217: ) ;
218: $if $(@expr1073742441 $!@expr1073742442 $assertEquals $(@expr1073742443 "cppcheck-2.8/test/testcondition.cpp" $, 218 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
219:
220:
221: check (@expr1073742446 "void foo(int x) {\n    int y = x & 4;\n    if ((y == 3) && (z == 1));\n}"
222:
223:
224: ) ;
225: $if $(@expr1073742447 $!@expr1073742448 $assertEquals $(@expr1073742449 "cppcheck-2.8/test/testcondition.cpp" $, 225 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
226:
227: check (@expr1073742452 "void foo(int x) {\n    int y = x & 4;\n    if ((x==123) || ((y == 3) && (z == 1)));\n}"
228:
229:
230: ) ;
231: $if $(@expr1073742453 $!@expr1073742454 $assertEquals $(@expr1073742455 "cppcheck-2.8/test/testcondition.cpp" $, 231 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
232:
233: check (@expr1073742458 "void f(int x) {\n    int y = x & 7;\n    if (setvalue(&y) && y != 8);\n}"
234:
235:
236: ) ;
237: $if $(@expr1073742459 $!@expr1073742460 $assertEquals $(@expr1073742461 "cppcheck-2.8/test/testcondition.cpp" $, 237 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
238:
239:
240: check (@expr1073742464 "void f(int x) {\n    int y = x & 7;\n    if (z) y=0;\n    else { if (y==8); }\n}"
241:
242:
243:
244: ) ;
245: $if $(@expr1073742465 $!@expr1073742466 $assertEquals $(@expr1073742467 "cppcheck-2.8/test/testcondition.cpp" $, 245 $, "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
246:
247:
248: check (@expr1073742470 "void f(int x) {\n    int y = x & 7;\n    while (y==8);\n}"
249:
250:
251: ) ;
252: $if $(@expr1073742471 $!@expr1073742472 $assertEquals $(@expr1073742473 "cppcheck-2.8/test/testcondition.cpp" $, 252 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
253:
254: check (@expr1073742476 "void f(int x) {\n    extern int y; y = x & 7;\n    while (y==8);\n}"
255:
256:
257: ) ;
258: $if $(@expr1073742477 $!@expr1073742478 $assertEquals $(@expr1073742479 "cppcheck-2.8/test/testcondition.cpp" $, 258 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
259:
260: check (@expr1073742482 "void f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) y--;\n    }\n}"
261:
|
265:
266: ) ;
267: $if $(@expr1073742483 $!@expr1073742484 $assertEquals $(@expr1073742485 "cppcheck-2.8/test/testcondition.cpp" $, 267 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
268:
269: check (@expr1073742488 "void g(int x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}"
270:
|
275:
276: ) ;
277: $if $(@expr1073742489 $!@expr1073742490 $assertEquals $(@expr1073742491 "cppcheck-2.8/test/testcondition.cpp" $, 277 $, "[test.cpp:5] -> [test.cpp:6]: (style) Mismatching assignment and comparison, comparison 'y!=0' is always true.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return
278:
279: ; }
280:
281: check (@expr1073742494 "void g(int &x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}"
282:
|
287:
288: ) ;
289: $if $(@expr1073742495 $!@expr1073742496 $assertEquals $(@expr1073742497 "cppcheck-2.8/test/testcondition.cpp" $, 289 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
290:
291:
292: check (@expr1073742500 "void f(int x) {\n    int y = x & 7;\n    do_something();\n    if (y==8);\n}"
293:
294:
295:
296: ) ;
297: $if $(@expr1073742501 $!@expr1073742502 $assertEquals $(@expr1073742503 "cppcheck-2.8/test/testcondition.cpp" $, 297 $, "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
298:
299: check (@expr1073742506 "void f(int x) {\n    int y = x & 7;\n    do_something(&y);\n    if (y==8);\n}"
300:
301:
302:
303: ) ;
304: $if $(@expr1073742507 $!@expr1073742508 $assertEquals $(@expr1073742509 "cppcheck-2.8/test/testcondition.cpp" $, 304 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
305:
306: check (@expr1073742512 "void do_something(int);\nvoid f(int x) {\n    int y = x & 7;\n    do_something(y);\n    if (y==8);\n}"
307:
|
310:
311: ) ;
312: $if $(@expr1073742513 $!@expr1073742514 $assertEquals $(@expr1073742515 "cppcheck-2.8/test/testcondition.cpp" $, 312 $, "[test.cpp:3] -> [test.cpp:5]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
313:
314: check (@expr1073742518 "void f(int x) {\n    extern int y; y = x & 7;\n    do_something();\n    if (y==8);\n}"
315:
316:
317:
318: ) ;
319: $if $(@expr1073742519 $!@expr1073742520 $assertEquals $(@expr1073742521 "cppcheck-2.8/test/testcondition.cpp" $, 319 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
320:
321:
322: check (@expr1073742524 "void f(int x) {\n    x = x & 1;\n    x = x & 1 ? 1 : -1;\n    if(x != -1) { }\n}"
323:
324:
325:
326: ) ;
327: $if $(@expr1073742525 $!@expr1073742526 $assertEquals $(@expr1073742527 "cppcheck-2.8/test/testcondition.cpp" $, 327 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
328:
329:
330: check (@expr1073742530 "void f() {\n    int x = *(char*)&0x12345678;\n    if (x==18) { }\n}"
331:
332:
333: ) ;
334: $if $(@expr1073742531 $!@expr1073742532 $assertEquals $(@expr1073742533 "cppcheck-2.8/test/testcondition.cpp" $, 334 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
335:
336:
337: check (@expr1073742536 "void foo(int x) {\n    y = 2 | x;\n    if(y == 1) {}\n}"
338:
339:
340: ) ;
341: $if $(@expr1073742537 $!@expr1073742538 $assertEquals $(@expr1073742539 "cppcheck-2.8/test/testcondition.cpp" $, 341 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
342:
343:
344: check (@expr1073742542 "void foo(int x) {\n    int y = -2 | x;\n    if (y==1) {}\n}"
345:
346:
347: ) ;
348: $if $(@expr1073742543 $!@expr1073742544 $assertEquals $(@expr1073742545 "cppcheck-2.8/test/testcondition.cpp" $, 348 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
349:
350:
351: check (@expr1073742548 "void foo(int x) {\n    int y = 2 | x;\n    bar(&y);\n    if (y==1) {}\n}"
352:
353:
354:
355: ) ;
356: $if $(@expr1073742549 $!@expr1073742550 $assertEquals $(@expr1073742551 "cppcheck-2.8/test/testcondition.cpp" $, 356 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
357:
358:
359: check (@expr1073742554 "SdrObject* ApplyGraphicToObject() {\n    if (&rHitObject) {}\n    else if (rHitObject.IsClosedObj() && !&rHitObject) { }\n}"
360:
361:
362: ) ;
363: $if $(@expr1073742555 $!@expr1073742556 $assertEquals $(@expr1073742557 "cppcheck-2.8/test/testcondition.cpp" $, 363 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
364:
365:
366: check (@expr1073742560 "void f(int a0, int n) {\n  int c = a0 & 3;\n  for (int a = 0; a < n; a++) {\n    c++;\n    if (c == 4)\n      c  = 0;\n  }\n}"
367:
|
372:
373: ) ;
374: $if $(@expr1073742561 $!@expr1073742562 $assertEquals $(@expr1073742563 "cppcheck-2.8/test/testcondition.cpp" $, 374 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
375:
376: check (@expr1073742566 "void f(int a) {\n  int x = a & 1;\n  while (x <= 4) {\n    if (x != 5) {}\n  }\n}"
377:
|
380:
381: ) ;
382: $if $(@expr1073742567 $!@expr1073742568 $assertEquals $(@expr1073742569 "cppcheck-2.8/test/testcondition.cpp" $, 382 $, "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'x!=5' is always true.\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
383:
384: check (@expr1073742572 "void f(int a) {\n  int x = a & 1;\n  while ((x += 4) < 10) {\n    if (x != 5) {}\n  }\n}"
385:
|
388:
389: ) ;
390: $if $(@expr1073742573 $!@expr1073742574 $assertEquals $(@expr1073742575 "cppcheck-2.8/test/testcondition.cpp" $, 390 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
391:
392: check (@expr1073742578 "void f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
393:
|
396:
397: ) ;
398: $if $(@expr1073742579 $!@expr1073742580 $assertEquals $(@expr1073742581 "cppcheck-2.8/test/testcondition.cpp" $, 398 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
399:
400: check (@expr1073742584 "void g(int x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
401:
|
405:
406: ) ;
407: $if $(@expr1073742585 $!@expr1073742586 $assertEquals $(@expr1073742587 "cppcheck-2.8/test/testcondition.cpp" $, 407 $, "[test.cpp:4]: (style) Condition 'x' is always true\n" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
408:
409: check (@expr1073742590 "void g(int & x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
410:
|
414:
415: ) ;
416: $if $(@expr1073742591 $!@expr1073742592 $assertEquals $(@expr1073742593 "cppcheck-2.8/test/testcondition.cpp" $, 416 $, "" $, errout@var100 .@expr590 str (@expr591 ) $) $) { $return ; }
417:
418: }
419:
420: void mismatchingBitAnd ( ) {
421: check (@expr1073742596 "void f(int a) {\n    int b = a & 0xf0;\n    b &= 1;\n}"
422:
423:
424: ) ;
425: $if $(@expr1073742597 $!@expr1073742598 $assertEquals $(@expr1073742599 "cppcheck-2.8/test/testcondition.cpp" $, 425 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n" $, errout@var100 .@expr776 str (@expr777 ) $) $) { $return ; }
426:
427: check (@expr1073742602 "void f(int a) {\n    int b = a & 0xf0;\n    int c = b & 1;\n}"
428:
429:
430: ) ;
431: $if $(@expr1073742603 $!@expr1073742604 $assertEquals $(@expr1073742605 "cppcheck-2.8/test/testcondition.cpp" $, 431 $, "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n" $, errout@var100 .@expr776 str (@expr777 ) $) $) { $return ; }
432:
433: check (@expr1073742608 "void f(int a) {\n    int b = a;    switch (x) {\n    case 1: b &= 1; break;\n    case 2: b &= 2; break;\n    };\n}"
434:
|
438:
439: ) ;
440: $if $(@expr1073742609 $!@expr1073742610 $assertEquals $(@expr1073742611 "cppcheck-2.8/test/testcondition.cpp" $, 440 $, "" $, errout@var100 .@expr776 str (@expr777 ) $) $) { $return ; }
441: }
442:
443: void comparison ( ) {
444:
445:
446: check (@expr1073742614 "void f(int a) {\n assert( (a & 0x07) == 8U );\n}" ) ;
447: $if $(@expr1073742615 $!@expr1073742616 $assertEquals $(@expr1073742617 "cppcheck-2.8/test/testcondition.cpp" $, 447 $, "[test.cpp:2]: (style) Expression '(X & 0x7) == 0x8' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
448: check (@expr1073742620 "void f(int a) {\n assert( (a & b & 4 & c ) == 3 );\n}" ) ;
449: $if $(@expr1073742621 $!@expr1073742622 $assertEquals $(@expr1073742623 "cppcheck-2.8/test/testcondition.cpp" $, 449 $, "[test.cpp:2]: (style) Expression '(X & 0x4) == 0x3' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
450: check (@expr1073742626 "void f(int a) {\n assert( (a | 0x07) == 8U );\n}" ) ;
451: $if $(@expr1073742627 $!@expr1073742628 $assertEquals $(@expr1073742629 "cppcheck-2.8/test/testcondition.cpp" $, 451 $, "[test.cpp:2]: (style) Expression '(X | 0x7) == 0x8' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
452: check (@expr1073742632 "void f(int a) {\n assert( (a & 0x07) == 7U );\n}" ) ;
453: $if $(@expr1073742633 $!@expr1073742634 $assertEquals $(@expr1073742635 "cppcheck-2.8/test/testcondition.cpp" $, 453 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
454: check (@expr1073742638 "void f(int a) {\n assert( (a | 0x01) == -15 );\n}" ) ;
455: $if $(@expr1073742639 $!@expr1073742640 $assertEquals $(@expr1073742641 "cppcheck-2.8/test/testcondition.cpp" $, 455 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
456:
457: check (@expr1073742644 "void f(int a) {\n assert( (a & 0x07) != 8U );\n}" ) ;
458: $if $(@expr1073742645 $!@expr1073742646 $assertEquals $(@expr1073742647 "cppcheck-2.8/test/testcondition.cpp" $, 458 $, "[test.cpp:2]: (style) Expression '(X & 0x7) != 0x8' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
459: check (@expr1073742650 "void f(int a) {\n assert( (a | 0x07) != 8U );\n}" ) ;
460: $if $(@expr1073742651 $!@expr1073742652 $assertEquals $(@expr1073742653 "cppcheck-2.8/test/testcondition.cpp" $, 460 $, "[test.cpp:2]: (style) Expression '(X | 0x7) != 0x8' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
461: check (@expr1073742656 "void f(int a) {\n assert( (a & 0x07) != 7U );\n}" ) ;
462: $if $(@expr1073742657 $!@expr1073742658 $assertEquals $(@expr1073742659 "cppcheck-2.8/test/testcondition.cpp" $, 462 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
463: check (@expr1073742662 "void f(int a) {\n assert( (a | 0x07) != 7U );\n}" ) ;
464: $if $(@expr1073742663 $!@expr1073742664 $assertEquals $(@expr1073742665 "cppcheck-2.8/test/testcondition.cpp" $, 464 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
465:
466: check (@expr1073742668 "void f(int a) {\n assert( (a & 0x07) >= 8U );\n}" ) ;
467: $if $(@expr1073742669 $!@expr1073742670 $assertEquals $(@expr1073742671 "cppcheck-2.8/test/testcondition.cpp" $, 467 $, "[test.cpp:2]: (style) Expression '(X & 0x7) >= 0x8' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
468: check (@expr1073742674 "void f(unsigned int a) {\n assert( (a | 0x7) >= 7U );\n}" ) ;
469: $if $(@expr1073742675 $!@expr1073742676 $assertEquals $(@expr1073742677 "cppcheck-2.8/test/testcondition.cpp" $, 469 $, "[test.cpp:2]: (style) Expression '(X | 0x7) >= 0x7' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
470: check (@expr1073742680 "void f(int a) {\n assert( (a & 0x07) >= 7U );\n}" ) ;
471: $if $(@expr1073742681 $!@expr1073742682 $assertEquals $(@expr1073742683 "cppcheck-2.8/test/testcondition.cpp" $, 471 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
472: check (@expr1073742686 "void f(int a) {\n assert( (a | 0x07) >= 8U );\n}" ) ;
473: $if $(@expr1073742687 $!@expr1073742688 $assertEquals $(@expr1073742689 "cppcheck-2.8/test/testcondition.cpp" $, 473 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
474:
475: check (@expr1073742692 "void f(int a) {\n assert( (a & 0x07) > 7U );\n}" ) ;
476: $if $(@expr1073742693 $!@expr1073742694 $assertEquals $(@expr1073742695 "cppcheck-2.8/test/testcondition.cpp" $, 476 $, "[test.cpp:2]: (style) Expression '(X & 0x7) > 0x7' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
477: check (@expr1073742698 "void f(unsigned int a) {\n assert( (a | 0x7) > 6U );\n}" ) ;
478: $if $(@expr1073742699 $!@expr1073742700 $assertEquals $(@expr1073742701 "cppcheck-2.8/test/testcondition.cpp" $, 478 $, "[test.cpp:2]: (style) Expression '(X | 0x7) > 0x6' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
479: check (@expr1073742704 "void f(int a) {\n assert( (a & 0x07) > 6U );\n}" ) ;
480: $if $(@expr1073742705 $!@expr1073742706 $assertEquals $(@expr1073742707 "cppcheck-2.8/test/testcondition.cpp" $, 480 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
481: check (@expr1073742710 "void f(int a) {\n assert( (a | 0x07) > 7U );\n}" ) ;
482: $if $(@expr1073742711 $!@expr1073742712 $assertEquals $(@expr1073742713 "cppcheck-2.8/test/testcondition.cpp" $, 482 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
483:
484: check (@expr1073742716 "void f(int a) {\n assert( (a & 0x07) <= 7U );\n}" ) ;
485: $if $(@expr1073742717 $!@expr1073742718 $assertEquals $(@expr1073742719 "cppcheck-2.8/test/testcondition.cpp" $, 485 $, "[test.cpp:2]: (style) Expression '(X & 0x7) <= 0x7' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
486: check (@expr1073742722 "void f(unsigned int a) {\n assert( (a | 0x08) <= 7U );\n}" ) ;
487: $if $(@expr1073742723 $!@expr1073742724 $assertEquals $(@expr1073742725 "cppcheck-2.8/test/testcondition.cpp" $, 487 $, "[test.cpp:2]: (style) Expression '(X | 0x8) <= 0x7' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
488: check (@expr1073742728 "void f(int a) {\n assert( (a & 0x07) <= 6U );\n}" ) ;
489: $if $(@expr1073742729 $!@expr1073742730 $assertEquals $(@expr1073742731 "cppcheck-2.8/test/testcondition.cpp" $, 489 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
490: check (@expr1073742734 "void f(int a) {\n assert( (a | 0x08) <= 7U );\n}" ) ;
491: $if $(@expr1073742735 $!@expr1073742736 $assertEquals $(@expr1073742737 "cppcheck-2.8/test/testcondition.cpp" $, 491 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
492:
493: check (@expr1073742740 "void f(int a) {\n assert( (a & 0x07) < 8U );\n}" ) ;
494: $if $(@expr1073742741 $!@expr1073742742 $assertEquals $(@expr1073742743 "cppcheck-2.8/test/testcondition.cpp" $, 494 $, "[test.cpp:2]: (style) Expression '(X & 0x7) < 0x8' is always true.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
495: check (@expr1073742746 "void f(unsigned int a) {\n assert( (a | 0x07) < 7U );\n}" ) ;
496: $if $(@expr1073742747 $!@expr1073742748 $assertEquals $(@expr1073742749 "cppcheck-2.8/test/testcondition.cpp" $, 496 $, "[test.cpp:2]: (style) Expression '(X | 0x7) < 0x7' is always false.\n" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
497: check (@expr1073742752 "void f(int a) {\n assert( (a & 0x07) < 3U );\n}" ) ;
498: $if $(@expr1073742753 $!@expr1073742754 $assertEquals $(@expr1073742755 "cppcheck-2.8/test/testcondition.cpp" $, 498 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
499: check (@expr1073742758 "void f(int a) {\n assert( (a | 0x07) < 7U );\n}" ) ;
500: $if $(@expr1073742759 $!@expr1073742760 $assertEquals $(@expr1073742761 "cppcheck-2.8/test/testcondition.cpp" $, 500 $, "" $, errout@var100 .@expr794 str (@expr795 ) $) $) { $return ; }
501: }
502:
503:
504: void multicompare ( ) {
505: check (@expr1073742764 "void foo(int x)\n{\n    if (x & 7);\n    else { if (x == 1); }\n}"
506:
507:
508:
509: ) ;
510: $if $(@expr1073742765 $!@expr1073742766 $assertEquals $(@expr1073742767 "cppcheck-2.8/test/testcondition.cpp" $, 510 $, "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
511:
512: check (@expr1073742770 "void foo(int x)\n{\n    if (x & 7);\n    else { if (x & 1); }\n}"
513:
514:
515:
516: ) ;
517: $if $(@expr1073742771 $!@expr1073742772 $assertEquals $(@expr1073742773 "cppcheck-2.8/test/testcondition.cpp" $, 517 $, "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
518:
519: check (@expr1073742776 "extern int bar() __attribute__((pure));\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}"
520:
|
523:
524: ) ;
525: $if $(@expr1073742777 $!@expr1073742778 $assertEquals $(@expr1073742779 "cppcheck-2.8/test/testcondition.cpp" $, 525 $, "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
526:
527: $checkPureFunction_ $(@expr1073742782 "extern int bar();\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}" $, "cppcheck-2.8/test/testcondition.cpp" $, 527 $)
528:
|
531:
532: ;
533: $if $(@expr1073742783 $!@expr1073742784 $assertEquals $(@expr1073742785 "cppcheck-2.8/test/testcondition.cpp" $, 533 $, "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
534:
535:
536: check (@expr1073742788 "void foo() {\n    if (a) {}\n    else if (!!a) {}\n}"
537:
538:
539: ) ;
540: $if $(@expr1073742789 $!@expr1073742790 $assertEquals $(@expr1073742791 "cppcheck-2.8/test/testcondition.cpp" $, 540 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
541:
542:
543: check (@expr1073742794 "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i == 3) {}\n}\n"
544:
|
548:
549: ) ;
550: $if $(@expr1073742795 $!@expr1073742796 $assertEquals $(@expr1073742797 "cppcheck-2.8/test/testcondition.cpp" $, 550 $, "" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
551:
552: check (@expr1073742800 "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i != 3) {}\n}\n"
553:
|
557:
558: ) ;
559: $if $(@expr1073742801 $!@expr1073742802 $assertEquals $(@expr1073742803 "cppcheck-2.8/test/testcondition.cpp" $, 559 $, "" $, errout@var100 .@expr944 str (@expr945 ) $) $) { $return ; }
560: }
561:
562: void checkPureFunction_ ( const char code@var125 [ ] , const char * file@var126 , int line@var127 ) {
563:
564: errout@var100 .@expr1073742806 str (@expr1073742807 "" ) ;
565:
566:
567: Tokenizer tokenizer@var128 (@expr1073742808 &@expr985 settings1@var103 , this@expr986 ) ;
568: std ::@expr1073742811 istringstream istr@var129 (@expr1073742812 code@var125 ) ;
569: $assert_ $(@expr1073742813 file@var126 $, line@var127 $, $(@expr1073742814 tokenizer@var128 .@expr1073742815 tokenize (@expr1073742816 istr@var129 , "test.cpp" ) $) $) ;
570:
571: CheckCondition checkCondition@var130 ;
572: checkCondition@var130 .@expr1073742817 runChecks (@expr1073742818 &@expr1073742819 tokenizer@var128 , &@expr985 settings1@var103 , this@expr986 ) ;
573: }
574:
575: void overlappingElseIfCondition ( ) {
576: check (@expr997 "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}"
577:
578:
579: ) ;
580: $if $(@expr1073742822 $!@expr1073742823 $assertEquals $(@expr1073742824 "cppcheck-2.8/test/testcondition.cpp" $, 580 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
581:
582: check (@expr997 "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}"
583:
584:
585: ) ;
586: $if $(@expr1073742828 $!@expr1073742829 $assertEquals $(@expr1073742830 "cppcheck-2.8/test/testcondition.cpp" $, 586 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
587:
588: check (@expr1073742833 "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 1) { b = 3; } } }\n}"
589:
590:
591:
592: ) ;
593: $if $(@expr1073742834 $!@expr1073742835 $assertEquals $(@expr1073742836 "cppcheck-2.8/test/testcondition.cpp" $, 593 $, "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
594:
595: check (@expr1073742839 "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 2) { b = 3; } } }\n}"
596:
597:
598:
599: ) ;
600: $if $(@expr1073742840 $!@expr1073742841 $assertEquals $(@expr1073742842 "cppcheck-2.8/test/testcondition.cpp" $, 600 $, "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
601:
602: check (@expr1073742845 "void f(int a, int &b) {\n    if (a++) { b = 1; }\n    else { if (a++) { b = 2; }\n    else { if (a++) { b = 3; } } }\n}"
603:
604:
605:
606: ) ;
607: $if $(@expr1073742846 $!@expr1073742847 $assertEquals $(@expr1073742848 "cppcheck-2.8/test/testcondition.cpp" $, 607 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
608:
609: check (@expr1073742851 "void f(int a, int &b) {\n    if (!strtok(NULL, \" \")) { b = 1; }\n    else { if (!strtok(NULL, \" \")) { b = 2; } }\n}"
610:
611:
612: ) ;
613: $if $(@expr1073742852 $!@expr1073742853 $assertEquals $(@expr1073742854 "cppcheck-2.8/test/testcondition.cpp" $, 613 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
614:
615: {
616: check (@expr1073742857 "void f(Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}"
617:
618:
619: ) ;
620: $if $(@expr1073742858 $!@expr1073742859 $assertEquals $(@expr1073742860 "cppcheck-2.8/test/testcondition.cpp" $, 620 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
621:
622: check (@expr1073742863 "void f(const Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}"
623:
624:
625: ) ;
626: $if $(@expr1073742864 $!@expr1073742865 $assertEquals $(@expr1073742866 "cppcheck-2.8/test/testcondition.cpp" $, 626 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
627: }
628:
629: check (@expr1073742869 "void f(int a, int &b) {\n   x = x / 2;\n   if (x < 100) { b = 1; }\n   else { x = x / 2; if (x < 100) { b = 2; } }\n}"
630:
631:
632:
633: ) ;
634: $if $(@expr1073742870 $!@expr1073742871 $assertEquals $(@expr1073742872 "cppcheck-2.8/test/testcondition.cpp" $, 634 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
635:
636: check (@expr1073742875 "void f(int i) {\n   if(i == 0x02e2000000 || i == 0xa0c6000000)\n       foo(i);\n}"
637:
638:
639: ) ;
640: $if $(@expr1073742876 $!@expr1073742877 $assertEquals $(@expr1073742878 "cppcheck-2.8/test/testcondition.cpp" $, 640 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
641:
642:
643: check (@expr1073742881 "int fitInt(long long int nValue){\n    if( nValue < 0x7fffffffLL )\n    {\n        return 32;\n    }\n    if( nValue < 0x7fffffffffffLL )\n    {\n        return 48;\n    }\n    else {\n        if( nValue < 0x7fffffffffffffffLL )\n        {\n            return 64;\n        } else\n        {\n            return -1;\n        }\n    }\n}"
644:
|
660:
661: ) ;
662: $if $(@expr1073742882 $!@expr1073742883 $assertEquals $(@expr1073742884 "cppcheck-2.8/test/testcondition.cpp" $, 662 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
663:
664: check (@expr1073742887 "void f(WIDGET *widget) {\n  if (dynamic_cast<BUTTON*>(widget)){}\n  else if (dynamic_cast<LABEL*>(widget)){}\n}"
665:
666:
667: ) ;
668: $if $(@expr1073742888 $!@expr1073742889 $assertEquals $(@expr1073742890 "cppcheck-2.8/test/testcondition.cpp" $, 668 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
669:
670: check (@expr1073742893 "void f(int x) {\n  if (x & 1) {}\n  else if (x == 0) {}\n}"
671:
672:
673: ) ;
674: $if $(@expr1073742894 $!@expr1073742895 $assertEquals $(@expr1073742896 "cppcheck-2.8/test/testcondition.cpp" $, 674 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
675:
676: check (@expr1073742899 "void f(int x) {\n  if (x & 15) {}\n  else if (x == 40) {}\n}"
677:
678:
679: ) ;
680: $if $(@expr1073742900 $!@expr1073742901 $assertEquals $(@expr1073742902 "cppcheck-2.8/test/testcondition.cpp" $, 680 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
681:
682: check (@expr1073742905 "void f(int x) {\n  if (x == sizeof(double)) {}\n  else { if (x == sizeof(long double)) {} }}"
683:
684:
685: ) ;
686: $if $(@expr1073742906 $!@expr1073742907 $assertEquals $(@expr1073742908 "cppcheck-2.8/test/testcondition.cpp" $, 686 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
687:
688: check (@expr1073742911 "void f(int x) {\n  if (x & 0x08) {}\n  else if (x & 0xF8) {}\n}"
689:
690:
691: ) ;
692: $if $(@expr1073742912 $!@expr1073742913 $assertEquals $(@expr1073742914 "cppcheck-2.8/test/testcondition.cpp" $, 692 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
693:
694: check (@expr1073742917 "void f(int x) {\n  if (x & 0xF8) {}\n  else if (x & 0x08) {}\n}"
695:
696:
697: ) ;
698: $if $(@expr1073742918 $!@expr1073742919 $assertEquals $(@expr1073742920 "cppcheck-2.8/test/testcondition.cpp" $, 698 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
699:
700: check (@expr1073742923 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !!a){}\n}"
701:
702:
703: ) ;
704: $if $(@expr1073742924 $!@expr1073742925 $assertEquals $(@expr1073742926 "cppcheck-2.8/test/testcondition.cpp" $, 704 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
705:
706: check (@expr1073742929 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && a){}\n}"
707:
708:
709: ) ;
710: $if $(@expr1073742930 $!@expr1073742931 $assertEquals $(@expr1073742932 "cppcheck-2.8/test/testcondition.cpp" $, 710 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
711:
712: check (@expr1073742935 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !!a){}\n}"
713:
714:
715: ) ;
716: $if $(@expr1073742936 $!@expr1073742937 $assertEquals $(@expr1073742938 "cppcheck-2.8/test/testcondition.cpp" $, 716 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
717:
718: check (@expr1073742941 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !(!a)){}\n}"
719:
720:
721: ) ;
722: $if $(@expr1073742942 $!@expr1073742943 $assertEquals $(@expr1073742944 "cppcheck-2.8/test/testcondition.cpp" $, 722 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
723:
724: check (@expr1073742947 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !(!a)){}\n}"
725:
726:
727: ) ;
728: $if $(@expr1073742948 $!@expr1073742949 $assertEquals $(@expr1073742950 "cppcheck-2.8/test/testcondition.cpp" $, 728 $, "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
729:
730: check (@expr1073742953 "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!(b) && !!(a+b)){}\n}"
731:
732:
733: ) ;
734: $if $(@expr1073742954 $!@expr1073742955 $assertEquals $(@expr1073742956 "cppcheck-2.8/test/testcondition.cpp" $, 734 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
735:
736:
737: check (@expr1073742959 "enum MaskValues\n{\n    Value1 = 0x00000001,\n    Value2 = 0x00000002\n};\nvoid TestFunction(int value) {\n    if ( value & (int)Value1 ) {}\n    else if ( value & (int)Value2 ) {}\n}"
738:
|
744:
745: ) ;
746: $if $(@expr1073742960 $!@expr1073742961 $assertEquals $(@expr1073742962 "cppcheck-2.8/test/testcondition.cpp" $, 746 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
747:
748: check (@expr1073742965 "void f(size_t x) {\n    if (x == sizeof(int)) {}\n    else { if (x == sizeof(long))} {}\n}\n"
749:
750:
751: ) ;
752: $if $(@expr1073742966 $!@expr1073742967 $assertEquals $(@expr1073742968 "cppcheck-2.8/test/testcondition.cpp" $, 752 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
753:
754: check (@expr1073742971 "void f(size_t x) {\n    if (x == sizeof(long)) {}\n    else { if (x == sizeof(long long))} {}\n}\n"
755:
756:
757: ) ;
758: $if $(@expr1073742972 $!@expr1073742973 $assertEquals $(@expr1073742974 "cppcheck-2.8/test/testcondition.cpp" $, 758 $, "" $, errout@var100 .@expr1001 str (@expr1002 ) $) $) { $return ; }
759: }
760:
761: void oppositeElseIfCondition ( ) {
762: setMultiline (@expr1073742977 ) ;
763:
764: check (@expr1073742978 "void f(int x) {\n    if (x) {}\n    else if (!x) {}\n}"
765:
766:
767: ) ;
768: $if $(@expr1073742979 $!@expr1073742980 $assertEquals $(@expr1073742981 "cppcheck-2.8/test/testcondition.cpp" $, 768 $, "test.cpp:3:style:Expression is always true because 'else if' condition is opposite to previous condition at line 2.\ntest.cpp:2:note:first condition\ntest.cpp:3:note:else if condition is opposite to first condition\n" $, errout@var100 .@expr1158 str (@expr1159 ) $) $) { $return
769:
770: ; }
771:
772: check (@expr1073742984 "void f(int x) {\n    int y = x;\n    if (x) {}\n    else if (!y) {}\n}"
773:
774:
775:
776: ) ;
777: $if $(@expr1073742985 $!@expr1073742986 $assertEquals $(@expr1073742987 "cppcheck-2.8/test/testcondition.cpp" $, 777 $, "test.cpp:4:style:Expression is always true because 'else if' condition is opposite to previous condition at line 3.\ntest.cpp:2:note:'y' is assigned value 'x' here.\ntest.cpp:3:note:first condition\ntest.cpp:4:note:else if condition is opposite to first condition\n" $, errout@var100 .@expr1158 str (@expr1159 ) $) $) { $return
778:
779:
780: ; }
781: }
782:
783: void checkBadBitmaskCheck ( ) {
784: check (@expr1073742990 "bool f(int x) {\n    bool b = x | 0x02;\n    return b;\n}"
785:
786:
787: ) ;
788: $if $(@expr1073742991 $!@expr1073742992 $assertEquals $(@expr1073742993 "cppcheck-2.8/test/testcondition.cpp" $, 788 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
789:
790: check (@expr1073742996 "bool f(int x) {\n    bool b = 0x02 | x;\n    return b;\n}"
791:
792:
793: ) ;
794: $if $(@expr1073742997 $!@expr1073742998 $assertEquals $(@expr1073742999 "cppcheck-2.8/test/testcondition.cpp" $, 794 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
795:
796: check (@expr1073743002 "int f(int x) {\n    int b = x | 0x02;\n    return b;\n}"
797:
798:
799: ) ;
800: $if $(@expr1073743003 $!@expr1073743004 $assertEquals $(@expr1073743005 "cppcheck-2.8/test/testcondition.cpp" $, 800 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
801:
802: check (@expr1073743008 "bool f(int x) {\n    bool b = x & 0x02;\n    return b;\n}"
803:
804:
805: ) ;
806: $if $(@expr1073743009 $!@expr1073743010 $assertEquals $(@expr1073743011 "cppcheck-2.8/test/testcondition.cpp" $, 806 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
807:
808: check (@expr1073743014 "bool f(int x) {\n    if(x | 0x02)\n        return b;\n}"
809:
810:
811: ) ;
812: $if $(@expr1073743015 $!@expr1073743016 $assertEquals $(@expr1073743017 "cppcheck-2.8/test/testcondition.cpp" $, 812 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
813:
814: check (@expr1073743020 "bool f(int x) {\n    int y = 0x1;\n    if(b) y = 0;\n    if(x | y)\n        return b;\n}"
815:
|
818:
819: ) ;
820: $if $(@expr1073743021 $!@expr1073743022 $assertEquals $(@expr1073743023 "cppcheck-2.8/test/testcondition.cpp" $, 820 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
821:
822: check (@expr1073743026 "bool f(int x) {\n    foo(a && (x | 0x02));\n}"
823:
824: ) ;
825: $if $(@expr1073743027 $!@expr1073743028 $assertEquals $(@expr1073743029 "cppcheck-2.8/test/testcondition.cpp" $, 825 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
826:
827: check (@expr1073743032 "int f(int x) {\n    return (x | 0x02) ? 0 : 5;\n}"
828:
829: ) ;
830: $if $(@expr1073743033 $!@expr1073743034 $assertEquals $(@expr1073743035 "cppcheck-2.8/test/testcondition.cpp" $, 830 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
831:
832: check (@expr1073743038 "int f(int x) {\n    return x ? (x | 0x02) : 5;\n}"
833:
834: ) ;
835: $if $(@expr1073743039 $!@expr1073743040 $assertEquals $(@expr1073743041 "cppcheck-2.8/test/testcondition.cpp" $, 835 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
836:
837: check (@expr1073743044 "bool f(int x) {\n    return x | 0x02;\n}"
838:
839: ) ;
840: $if $(@expr1073743045 $!@expr1073743046 $assertEquals $(@expr1073743047 "cppcheck-2.8/test/testcondition.cpp" $, 840 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
841:
842: check (@expr1073743050 "bool f(int x) {\n  if (x) {\n    return x | 0x02;\n  }\n  return 0;\n}"
843:
|
846:
847: ) ;
848: $if $(@expr1073743051 $!@expr1073743052 $assertEquals $(@expr1073743053 "cppcheck-2.8/test/testcondition.cpp" $, 848 $, "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
849:
850: check (@expr1073743056 "const bool f(int x) {\n    return x | 0x02;\n}"
851:
852: ) ;
853: $if $(@expr1073743057 $!@expr1073743058 $assertEquals $(@expr1073743059 "cppcheck-2.8/test/testcondition.cpp" $, 853 $, "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
854:
855: check (@expr1073743062 "struct F {\n  static const bool f(int x) {\n      return x | 0x02;\n  }\n};"
856:
857:
858:
859: ) ;
860: $if $(@expr1073743063 $!@expr1073743064 $assertEquals $(@expr1073743065 "cppcheck-2.8/test/testcondition.cpp" $, 860 $, "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
861:
862: check (@expr1073743068 "struct F {\n  typedef bool b_t;\n};\nF::b_t f(int x) {\n  return x | 0x02;\n}"
863:
|
866:
867: ) ;
868: $if $(@expr1073743069 $!@expr1073743070 $assertEquals $(@expr1073743071 "cppcheck-2.8/test/testcondition.cpp" $, 868 $, "[test.cpp:5]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
869:
870: check (@expr1073743074 "int f(int x) {\n    return x | 0x02;\n}"
871:
872: ) ;
873: $if $(@expr1073743075 $!@expr1073743076 $assertEquals $(@expr1073743077 "cppcheck-2.8/test/testcondition.cpp" $, 873 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
874:
875: check (@expr1073743080 "void create_rop_masks_4( rop_mask_bits *bits) {\nDWORD mask_offset;\nBYTE *and_bits = bits->and;\nrop_mask *rop_mask;\nand_bits[mask_offset] |= (rop_mask->and & 0x0f);\n}"
876:
|
879:
880: ) ;
881: $if $(@expr1073743081 $!@expr1073743082 $assertEquals $(@expr1073743083 "cppcheck-2.8/test/testcondition.cpp" $, 881 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
882:
883: check (@expr1073743086 "void f(unsigned a, unsigned b) {\n  unsigned cmd1 = b & 0x0F;\n  if (cmd1 | a) {\n    if (b == 0x0C) {}\n  }\n}"
884:
|
887:
888: ) ;
889: $if $(@expr1073743087 $!@expr1073743088 $assertEquals $(@expr1073743089 "cppcheck-2.8/test/testcondition.cpp" $, 889 $, "" $, errout@var100 .@expr1170 str (@expr1171 ) $) $) { $return ; }
890: }
891:
892:
893: void incorrectLogicOperator1 ( ) {
894: check (@expr1073743092 "void f(int x) {\n    if ((x != 1) || (x != 3))\n        a++;\n}"
895:
896:
897: ) ;
898: $if $(@expr1073743093 $!@expr1073743094 $assertEquals $(@expr1073743095 "cppcheck-2.8/test/testcondition.cpp" $, 898 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
899:
900: check (@expr1073743098 "void f(int x) {\n    if (1 != x || 3 != x)\n        a++;\n}"
901:
902:
903: ) ;
904: $if $(@expr1073743099 $!@expr1073743100 $assertEquals $(@expr1073743101 "cppcheck-2.8/test/testcondition.cpp" $, 904 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
905:
906: check (@expr1073743104 "void f(int x) {\n  if (x<0 && !x) {}\n}"
907:
908: ) ;
909: $if $(@expr1073743105 $!@expr1073743106 $assertEquals $(@expr1073743107 "cppcheck-2.8/test/testcondition.cpp" $, 909 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 0 && !x.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
910:
911: check (@expr1073743110 "void f(int x) {\n  if (x==0 && x) {}\n}"
912:
913: ) ;
914: $if $(@expr1073743111 $!@expr1073743112 $assertEquals $(@expr1073743113 "cppcheck-2.8/test/testcondition.cpp" $, 914 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 0 && x.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
915:
916: check (@expr1073743116 "void f(int x) {\n    if (y == 1 && x == 1 && x == 7) { }\n}"
917:
918: ) ;
919: $if $(@expr1073743117 $!@expr1073743118 $assertEquals $(@expr1073743119 "cppcheck-2.8/test/testcondition.cpp" $, 919 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 7.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
920:
921: check (@expr1073743122 "void f(int x, int y) {\n    if (x != 1 || y != 1)\n        a++;\n}"
922:
923:
924: ) ;
925: $if $(@expr1073743123 $!@expr1073743124 $assertEquals $(@expr1073743125 "cppcheck-2.8/test/testcondition.cpp" $, 925 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
926:
927: check (@expr1073743128 "void f(int x, int y) {\n    if ((y == 1) && (x != 1) || (x != 3))\n        a++;\n}"
928:
929:
930: ) ;
931: $if $(@expr1073743129 $!@expr1073743130 $assertEquals $(@expr1073743131 "cppcheck-2.8/test/testcondition.cpp" $, 931 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
932:
933: check (@expr1073743134 "void f(int x, int y) {\n    if ((x != 1) || (x != 3) && (y == 1))\n        a++;\n}"
934:
935:
936:
937: ) ;
938: $if $(@expr1073743135 $!@expr1073743136 $assertEquals $(@expr1073743137 "cppcheck-2.8/test/testcondition.cpp" $, 938 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x!=3' is always true\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
939:
940: check (@expr1073743140 "void f(int x) {\n    if ((x != 1) && (x != 3))\n        a++;\n}"
941:
942:
943: ) ;
944: $if $(@expr1073743141 $!@expr1073743142 $assertEquals $(@expr1073743143 "cppcheck-2.8/test/testcondition.cpp" $, 944 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
945:
946: check (@expr1073743146 "void f(int x) {\n    if ((x == 1) || (x == 3))\n        a++;\n}"
947:
948:
949: ) ;
950: $if $(@expr1073743147 $!@expr1073743148 $assertEquals $(@expr1073743149 "cppcheck-2.8/test/testcondition.cpp" $, 950 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
951:
952: check (@expr1073743152 "void f(int x, int y) {\n    if ((x != 1) || (y != 3))\n        a++;\n}"
953:
954:
955: ) ;
956: $if $(@expr1073743153 $!@expr1073743154 $assertEquals $(@expr1073743155 "cppcheck-2.8/test/testcondition.cpp" $, 956 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
957:
958: check (@expr1073743158 "void f(int x, int y) {\n    if ((x != hotdog) || (y != hotdog))\n        a++;\n}"
959:
960:
961: ) ;
962: $if $(@expr1073743159 $!@expr1073743160 $assertEquals $(@expr1073743161 "cppcheck-2.8/test/testcondition.cpp" $, 962 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
963:
964: check (@expr1073743164 "void f(int x, int y) {\n    if ((x != 5) || (y != 5))\n        a++;\n}"
965:
966:
967: ) ;
968: $if $(@expr1073743165 $!@expr1073743166 $assertEquals $(@expr1073743167 "cppcheck-2.8/test/testcondition.cpp" $, 968 $, "" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
969:
970:
971: check (@expr1073743170 "void f(int x) {\n    if ((x != 5) || (x != 6))\n        a++;\n}"
972:
973:
974: ) ;
975: $if $(@expr1073743171 $!@expr1073743172 $assertEquals $(@expr1073743173 "cppcheck-2.8/test/testcondition.cpp" $, 975 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 5 || x != 6.\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
976:
977: check (@expr1073743176 "void f(unsigned int a, unsigned int b, unsigned int c) {\n    if((a != b) || (c != b) || (c != a))\n    {\n        return true;\n    }\n    return false;\n}"
978:
|
982:
983: ) ;
984: $if $(@expr1073743177 $!@expr1073743178 $assertEquals $(@expr1073743179 "cppcheck-2.8/test/testcondition.cpp" $, 984 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'c!=a' is always false\n" $, errout@var100 .@expr1272 str (@expr1273 ) $) $) { $return ; }
985: }
986:
987: void incorrectLogicOperator2 ( ) {
988: check (@expr1073743182 "void f(float x) {\n    if ((x == 1) && (x == 1.0))\n        a++;\n}"
989:
990:
991: ) ;
992: $if $(@expr1073743183 $!@expr1073743184 $assertEquals $(@expr1073743185 "cppcheck-2.8/test/testcondition.cpp" $, 992 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
993:
994: check (@expr1073743188 "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}"
995:
996:
997: ) ;
998: $if $(@expr1073743189 $!@expr1073743190 $assertEquals $(@expr1073743191 "cppcheck-2.8/test/testcondition.cpp" $, 998 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0x00000001' is always true\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
999:
1000: check (@expr1073743194 "void f(int x) {\n    if (x == 1 && x == 3)\n        a++;\n}"
1001:
1002:
1003: ) ;
1004: $if $(@expr1073743195 $!@expr1073743196 $assertEquals $(@expr1073743197 "cppcheck-2.8/test/testcondition.cpp" $, 1004 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1005:
1006: check (@expr1073743200 "void f(int x) {\n    if (x == 1.0 && x == 3.0)\n        a++;\n}"
1007:
1008:
1009: ) ;
1010: $if $(@expr1073743201 $!@expr1073743202 $assertEquals $(@expr1073743203 "cppcheck-2.8/test/testcondition.cpp" $, 1010 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1011:
1012: check (@expr1073743206 "void f(float x) {\n    if (x == 1 && x == 1.0)\n        a++;\n}"
1013:
1014:
1015: ) ;
1016: $if $(@expr1073743207 $!@expr1073743208 $assertEquals $(@expr1073743209 "cppcheck-2.8/test/testcondition.cpp" $, 1016 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1017:
1018: check (@expr1073743212 "void bar(float f) {\n    if ((f > 0) && (f < 1)) {}\n}"
1019:
1020: ) ;
1021: $if $(@expr1073743213 $!@expr1073743214 $assertEquals $(@expr1073743215 "cppcheck-2.8/test/testcondition.cpp" $, 1021 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1022:
1023: check (@expr1073743218 "void f(int x) {\n    if (x < 1 && x > 1)\n        a++;\n}"
1024:
1025:
1026: ) ;
1027: $if $(@expr1073743219 $!@expr1073743220 $assertEquals $(@expr1073743221 "cppcheck-2.8/test/testcondition.cpp" $, 1027 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1028:
1029: check (@expr1073743224 "void f(int x) {\n    if (x < 1.0 && x > 1.0)\n        a++;\n}"
1030:
1031:
1032: ) ;
1033: $if $(@expr1073743225 $!@expr1073743226 $assertEquals $(@expr1073743227 "cppcheck-2.8/test/testcondition.cpp" $, 1033 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 1.0.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1034:
1035: check (@expr1073743230 "void f(int x) {\n    if (x < 1 && x > 1.0)\n        a++;\n}"
1036:
1037:
1038: ) ;
1039: $if $(@expr1073743231 $!@expr1073743232 $assertEquals $(@expr1073743233 "cppcheck-2.8/test/testcondition.cpp" $, 1039 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.0.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1040:
1041: check (@expr1073743236 "void f(int x) {\n    if (x >= 1.0 && x <= 1.001)\n        a++;\n}"
1042:
1043:
1044: ) ;
1045: $if $(@expr1073743237 $!@expr1073743238 $assertEquals $(@expr1073743239 "cppcheck-2.8/test/testcondition.cpp" $, 1045 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1046:
1047: check (@expr1073743242 "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}"
1048:
1049:
1050: ) ;
1051: $if $(@expr1073743243 $!@expr1073743244 $assertEquals $(@expr1073743245 "cppcheck-2.8/test/testcondition.cpp" $, 1051 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1052:
1053: check (@expr1073743248 "void f(float x) {\n    if (x < 1.0 && x > 3.0)\n        a++;\n}"
1054:
1055:
1056: ) ;
1057: $if $(@expr1073743249 $!@expr1073743250 $assertEquals $(@expr1073743251 "cppcheck-2.8/test/testcondition.cpp" $, 1057 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 3.0.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1058:
1059: check (@expr1073743254 "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}"
1060:
1061:
1062: ) ;
1063: $if $(@expr1073743255 $!@expr1073743256 $assertEquals $(@expr1073743257 "cppcheck-2.8/test/testcondition.cpp" $, 1063 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1064:
1065: check (@expr1073743260 "void f(int x) {\n    if (x < 3 && x > 1)\n        a++;\n}"
1066:
1067:
1068: ) ;
1069: $if $(@expr1073743261 $!@expr1073743262 $assertEquals $(@expr1073743263 "cppcheck-2.8/test/testcondition.cpp" $, 1069 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1070:
1071: check (@expr1073743266 "void f(int x) {\n    if (x > 3 || x < 10)\n        a++;\n}"
1072:
1073:
1074: ) ;
1075: $if $(@expr1073743267 $!@expr1073743268 $assertEquals $(@expr1073743269 "cppcheck-2.8/test/testcondition.cpp" $, 1075 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x < 10.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1076:
1077: check (@expr1073743272 "void f(int x) {\n    if (x >= 3 || x <= 10)\n        a++;\n}"
1078:
1079:
1080: ) ;
1081: $if $(@expr1073743273 $!@expr1073743274 $assertEquals $(@expr1073743275 "cppcheck-2.8/test/testcondition.cpp" $, 1081 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 10.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1082:
1083: check (@expr1073743278 "void f(int x) {\n    if (x >= 3 || x < 10)\n        a++;\n}"
1084:
1085:
1086: ) ;
1087: $if $(@expr1073743279 $!@expr1073743280 $assertEquals $(@expr1073743281 "cppcheck-2.8/test/testcondition.cpp" $, 1087 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 10.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1088:
1089: check (@expr1073743284 "void f(int x) {\n    if (x > 3 || x <= 10)\n        a++;\n}"
1090:
1091:
1092: ) ;
1093: $if $(@expr1073743285 $!@expr1073743286 $assertEquals $(@expr1073743287 "cppcheck-2.8/test/testcondition.cpp" $, 1093 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 10.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1094:
1095: check (@expr1073743290 "void f(int x) {\n    if (x > 3 || x < 3)\n        a++;\n}"
1096:
1097:
1098: ) ;
1099: $if $(@expr1073743291 $!@expr1073743292 $assertEquals $(@expr1073743293 "cppcheck-2.8/test/testcondition.cpp" $, 1099 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1100:
1101: check (@expr1073743296 "void f(int x) {\n    if (x >= 3 || x <= 3)\n        a++;\n}"
1102:
1103:
1104:
1105: ) ;
1106: $if $(@expr1073743297 $!@expr1073743298 $assertEquals $(@expr1073743299 "cppcheck-2.8/test/testcondition.cpp" $, 1106 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1107:
1108: check (@expr1073743302 "void f(int x) {\n    if (x >= 3 || x < 3)\n        a++;\n}"
1109:
1110:
1111:
1112: ) ;
1113: $if $(@expr1073743303 $!@expr1073743304 $assertEquals $(@expr1073743305 "cppcheck-2.8/test/testcondition.cpp" $, 1113 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1114:
1115: check (@expr1073743308 "void f(int x) {\n    if (x > 3 || x <= 3)\n        a++;\n}"
1116:
1117:
1118:
1119: ) ;
1120: $if $(@expr1073743309 $!@expr1073743310 $assertEquals $(@expr1073743311 "cppcheck-2.8/test/testcondition.cpp" $, 1120 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1121:
1122: check (@expr1073743314 "void f(int x) {\n   if((x==3) && (x!=4))\n        a++;\n}"
1123:
1124:
1125: ) ;
1126: $if $(@expr1073743315 $!@expr1073743316 $assertEquals $(@expr1073743317 "cppcheck-2.8/test/testcondition.cpp" $, 1126 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1127:
1128: check (@expr1073743320 "void f(const std::string &s) {\n    const std::size_t p = s.find(\"42\");\n    const std::size_t * const ptr = &p;\n    if(p != std::string::npos && p == 0 && *ptr != 1){;}\n}"
1129:
1130:
1131:
1132: ) ;
1133: $if $(@expr1073743321 $!@expr1073743322 $assertEquals $(@expr1073743323 "cppcheck-2.8/test/testcondition.cpp" $, 1133 $, "[test.cpp:4] -> [test.cpp:4]: (style) Condition '*ptr!=1' is always true\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1134:
1135: check (@expr1073743326 "void f(int x) {\n    if ((x!=4) && (x==3))\n        a++;\n}"
1136:
1137:
1138: ) ;
1139: $if $(@expr1073743327 $!@expr1073743328 $assertEquals $(@expr1073743329 "cppcheck-2.8/test/testcondition.cpp" $, 1139 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1140:
1141: check (@expr1073743332 "void f(int x) {\n    if ((x==3) || (x!=4))\n        a++;\n}"
1142:
1143:
1144: ) ;
1145: $if $(@expr1073743333 $!@expr1073743334 $assertEquals $(@expr1073743335 "cppcheck-2.8/test/testcondition.cpp" $, 1145 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1146:
1147: check (@expr1073743338 "void f(int x) {\n    if ((x!=4) || (x==3))\n        a++;\n}"
1148:
1149:
1150: ) ;
1151: $if $(@expr1073743339 $!@expr1073743340 $assertEquals $(@expr1073743341 "cppcheck-2.8/test/testcondition.cpp" $, 1151 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1152:
1153: check (@expr1073743344 "void f(int x) {\n    if ((x==3) && (x!=3))\n        a++;\n}"
1154:
1155:
1156: ) ;
1157: $if $(@expr1073743345 $!@expr1073743346 $assertEquals $(@expr1073743347 "cppcheck-2.8/test/testcondition.cpp" $, 1157 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 3 && x != 3.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1158:
1159: check (@expr1073743350 "void f(int x) {\n    if ((x==6) || (x!=6))\n        a++;\n}"
1160:
1161:
1162: ) ;
1163: $if $(@expr1073743351 $!@expr1073743352 $assertEquals $(@expr1073743353 "cppcheck-2.8/test/testcondition.cpp" $, 1163 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x == 6 || x != 6.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1164:
1165: check (@expr1073743356 "void f(int x) {\n    if (x > 10 || x < 3)\n        a++;\n}"
1166:
1167:
1168: ) ;
1169: $if $(@expr1073743357 $!@expr1073743358 $assertEquals $(@expr1073743359 "cppcheck-2.8/test/testcondition.cpp" $, 1169 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1170:
1171: check (@expr1073743362 "void f(int x) {\n    if (x > 5 && x == 1)\n        a++;\n}"
1172:
1173:
1174: ) ;
1175: $if $(@expr1073743363 $!@expr1073743364 $assertEquals $(@expr1073743365 "cppcheck-2.8/test/testcondition.cpp" $, 1175 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1176:
1177: check (@expr1073743368 "void f(int x) {\n    if (x > 5 && x == 6)\n        a++;\n}"
1178:
1179:
1180: ) ;
1181: $if $(@expr1073743369 $!@expr1073743370 $assertEquals $(@expr1073743371 "cppcheck-2.8/test/testcondition.cpp" $, 1181 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 6', the comparison 'x > 5' is always true.\n" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1182:
1183:
1184: check (@expr1073743374 "void f() {\n    if ( &q != &a && &q != &b ) { }\n}"
1185:
1186: ) ;
1187: $if $(@expr1073743375 $!@expr1073743376 $assertEquals $(@expr1073743377 "cppcheck-2.8/test/testcondition.cpp" $, 1187 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1188:
1189:
1190: check (@expr1073743380 "void f(int m_x2, int w, int x) {\n    if (x + w - 1 > m_x2 || m_x2 < 0 )\n        m_x2 = x + w - 1;\n}"
1191:
1192:
1193: ) ;
1194: $if $(@expr1073743381 $!@expr1073743382 $assertEquals $(@expr1073743383 "cppcheck-2.8/test/testcondition.cpp" $, 1194 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1195:
1196: check (@expr1073743386 "void f(float x) {\n  if (x <= 1.0e20 && x >= -1.0e20) {}\n}"
1197:
1198: ) ;
1199: $if $(@expr1073743387 $!@expr1073743388 $assertEquals $(@expr1073743389 "cppcheck-2.8/test/testcondition.cpp" $, 1199 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1200:
1201: check (@expr1073743392 "void f(float x) {\n  if (x >= 1.0e20 && x <= 1.0e21) {}\n}"
1202:
1203: ) ;
1204: $if $(@expr1073743393 $!@expr1073743394 $assertEquals $(@expr1073743395 "cppcheck-2.8/test/testcondition.cpp" $, 1204 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1205:
1206: check (@expr1073743398 "void f(float x) {\n  if (x <= -1.0e20 && x >= -1.0e21) {}\n}"
1207:
1208: ) ;
1209: $if $(@expr1073743399 $!@expr1073743400 $assertEquals $(@expr1073743401 "cppcheck-2.8/test/testcondition.cpp" $, 1209 $, "" $, errout@var100 .@expr1362 str (@expr1363 ) $) $) { $return ; }
1210: }
1211:
1212: void incorrectLogicOperator3 ( ) {
1213: check (@expr1073743404 "void f(int x, bool& b) {\n    b = x > 5 && x == 1;\n    c = x < 1 && x == 3;\n    d = x >= 5 && x == 1;\n    e = x <= 1 && x == 3;\n}"
1214:
|
1217:
1218: ) ;
1219: $if $(@expr1073743405 $!@expr1073743406 $assertEquals $(@expr1073743407 "cppcheck-2.8/test/testcondition.cpp" $, 1219 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n[test.cpp:3]: (warning) Logical conjunction always evaluates to false: x < 1 && x == 3.\n[test.cpp:4]: (warning) Logical conjunction always evaluates to false: x >= 5 && x == 1.\n[test.cpp:5]: (warning) Logical conjunction always evaluates to false: x <= 1 && x == 3.\n" $, errout@var100 .@expr1073743408 str (@expr1073743409 ) $) $) { $return
1220:
1221:
1222: ; }
1223: }
1224:
1225: void incorrectLogicOperator4 ( ) {
1226: check (@expr1073743410 "#define ZERO 0\nvoid f(int x) {\n  if (x && x != ZERO) {}\n}"
1227:
1228:
1229: ) ;
1230: $if $(@expr1073743411 $!@expr1073743412 $assertEquals $(@expr1073743413 "cppcheck-2.8/test/testcondition.cpp" $, 1230 $, "" $, errout@var100 .@expr1590 str (@expr1591 ) $) $) { $return ; }
1231:
1232: check (@expr1073743416 "void f(int N) {\n    T a[20] = { 0 };\n    for (int i = 0; i < N; ++i) {\n        if (0 < a[i] && a[i] < 1) {}\n    }\n}\n"
1233:
|
1236:
1237: ) ;
1238: $if $(@expr1073743417 $!@expr1073743418 $assertEquals $(@expr1073743419 "cppcheck-2.8/test/testcondition.cpp" $, 1238 $, "" $, errout@var100 .@expr1590 str (@expr1591 ) $) $) { $return ; }
1239: }
1240:
1241: void incorrectLogicOperator5 ( ) {
1242: check (@expr1073743422 "void f(int x) {\n  if (x+3 > 2 || x+3 < 10) {}\n}"
1243:
1244: ) ;
1245: $if $(@expr1073743423 $!@expr1073743424 $assertEquals $(@expr1073743425 "cppcheck-2.8/test/testcondition.cpp" $, 1245 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: EXPR > 2 || EXPR < 10.\n" $, errout@var100 .@expr1073743426 str (@expr1073743427 ) $) $) { $return ; }
1246: }
1247:
1248: void incorrectLogicOperator6 ( ) {
1249: check (@expr1073743428 "void f(char x) {\n  if (x == '1' || x == '2') {}\n}"
1250:
1251: , "test.cpp" , true ) ;
1252: $if $(@expr1073743429 $!@expr1073743430 $assertEquals $(@expr1073743431 "cppcheck-2.8/test/testcondition.cpp" $, 1252 $, "" $, errout@var100 .@expr1608 str (@expr1609 ) $) $) { $return ; }
1253:
1254: check (@expr1073743434 "void f(char x) {\n  if (x == '1' && x == '2') {}\n}"
1255:
1256: , "test.cpp" , true ) ;
1257: $if $(@expr1073743435 $!@expr1073743436 $assertEquals $(@expr1073743437 "cppcheck-2.8/test/testcondition.cpp" $, 1257 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == '1' && x == '2'.\n" $, errout@var100 .@expr1608 str (@expr1609 ) $) $) { $return ; }
1258:
1259: check (@expr1073743440 "int f(char c) {\n  return (c >= 'a' && c <= 'z');\n}"
1260:
1261: , "test.cpp" , true ) ;
1262: $if $(@expr1073743441 $!@expr1073743442 $assertEquals $(@expr1073743443 "cppcheck-2.8/test/testcondition.cpp" $, 1262 $, "" $, errout@var100 .@expr1608 str (@expr1609 ) $) $) { $return ; }
1263:
1264: check (@expr1073743446 "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}"
1265:
1266: , "test.cpp" , true ) ;
1267: $if $(@expr1073743447 $!@expr1073743448 $assertEquals $(@expr1073743449 "cppcheck-2.8/test/testcondition.cpp" $, 1267 $, "[test.cpp:2]: (warning, inconclusive) Logical conjunction always evaluates to false: c <= 'a' && c >= 'z'.\n" $, errout@var100 .@expr1608 str (@expr1609 ) $) $) { $return ; }
1268:
1269: check (@expr1073743452 "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}"
1270:
1271: , "test.cpp" , false ) ;
1272: $if $(@expr1073743453 $!@expr1073743454 $assertEquals $(@expr1073743455 "cppcheck-2.8/test/testcondition.cpp" $, 1272 $, "" $, errout@var100 .@expr1608 str (@expr1609 ) $) $) { $return ; }
1273: }
1274:
1275: void incorrectLogicOperator7 ( ) {
1276: check (@expr1073743458 "void f(int i) {\n  if (i || !i) {}\n}"
1277:
1278: ) ;
1279: $if $(@expr1073743459 $!@expr1073743460 $assertEquals $(@expr1073743461 "cppcheck-2.8/test/testcondition.cpp" $, 1279 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: i || !(i).\n" $, errout@var100 .@expr1638 str (@expr1639 ) $) $) { $return ; }
1280:
1281: check (@expr1073743464 "void f(int a, int b) {\n  if (a>b || a<=b) {}\n}"
1282:
1283: ) ;
1284: $if $(@expr1073743465 $!@expr1073743466 $assertEquals $(@expr1073743467 "cppcheck-2.8/test/testcondition.cpp" $, 1284 $, "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: a > b || a <= b.\n" $, errout@var100 .@expr1638 str (@expr1639 ) $) $) { $return ; }
1285:
1286: check (@expr1073743470 "void f(int a, int b) {\n  if (a>b || a<b) {}\n}"
1287:
1288: ) ;
1289: $if $(@expr1073743471 $!@expr1073743472 $assertEquals $(@expr1073743473 "cppcheck-2.8/test/testcondition.cpp" $, 1289 $, "" $, errout@var100 .@expr1638 str (@expr1639 ) $) $) { $return ; }
1290:
1291:
1292: check (@expr1073743476 "template<typename T> T icdf( const T uniform ) {\n   if ((0<uniform) && (uniform<1))\n     {}\n}"
1293:
1294:
1295: ) ;
1296: $if $(@expr1073743477 $!@expr1073743478 $assertEquals $(@expr1073743479 "cppcheck-2.8/test/testcondition.cpp" $, 1296 $, "" $, errout@var100 .@expr1638 str (@expr1639 ) $) $) { $return ; }
1297:
1298:
1299: check (@expr1073743482 "double neg = -1.0 - 1.0e-13;\nvoid foo() {\n    if ((neg < -1.0) && (neg > -1.0 - 1.0e-12))\n        return;\n    else\n        return;\n}"
1300:
|
1304:
1305: ) ;
1306: $if $(@expr1073743483 $!@expr1073743484 $assertEquals $(@expr1073743485 "cppcheck-2.8/test/testcondition.cpp" $, 1306 $, "" $, errout@var100 .@expr1638 str (@expr1639 ) $) $) { $return ; }
1307: }
1308:
1309: void incorrectLogicOperator8 ( ) {
1310: check (@expr1073743488 "void f(int i) {\n  if (!(i!=10) && !(i!=20)) {}\n}"
1311:
1312: ) ;
1313: $if $(@expr1073743489 $!@expr1073743490 $assertEquals $(@expr1073743491 "cppcheck-2.8/test/testcondition.cpp" $, 1313 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: !(i != 10) && !(i != 20).\n" $, errout@var100 .@expr1073743492 str (@expr1073743493 ) $) $) { $return ; }
1314: }
1315:
1316: void incorrectLogicOperator9 ( ) {
1317: check (@expr1073743494 "class MyType;\nclass OtherType;\nvoid foo (OtherType* obj) {\n    assert((!obj) || dynamic_cast<MyType*>(obj));\n}"
1318:
1319:
1320:
1321: ) ;
1322: $if $(@expr1073743495 $!@expr1073743496 $assertEquals $(@expr1073743497 "cppcheck-2.8/test/testcondition.cpp" $, 1322 $, "" $, errout@var100 .@expr1073743498 str (@expr1073743499 ) $) $) { $return ; }
1323: }
1324:
1325: void incorrectLogicOperator10 ( ) {
1326: check (@expr1073743500 "typedef enum { A, B } Type_t;\nvoid f(Type_t t) {\n    if ((t == A) && (t == B))\n    {}\n}"
1327:
1328:
1329:
1330: ) ;
1331: $if $(@expr1073743501 $!@expr1073743502 $assertEquals $(@expr1073743503 "cppcheck-2.8/test/testcondition.cpp" $, 1331 $, "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: t == 0 && t == 1.\n" $, errout@var100 .@expr1073743504 str (@expr1073743505 ) $) $) { $return ; }
1332: }
1333:
1334: void incorrectLogicOperator11 ( ) {
1335: check (@expr1073743506 "void foo(int i, const int n) { if ( i < n && i == n ) {} }" ) ;
1336: $if $(@expr1073743507 $!@expr1073743508 $assertEquals $(@expr1073743509 "cppcheck-2.8/test/testcondition.cpp" $, 1336 $, "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i < n && i == n.\n" $, errout@var100 .@expr1686 str (@expr1687 ) $) $) { $return ; }
1337:
1338: check (@expr1073743512 "void foo(int i, const int n) { if ( i > n && i == n ) {} }" ) ;
1339: $if $(@expr1073743513 $!@expr1073743514 $assertEquals $(@expr1073743515 "cppcheck-2.8/test/testcondition.cpp" $, 1339 $, "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i > n && i == n.\n" $, errout@var100 .@expr1686 str (@expr1687 ) $) $) { $return ; }
1340:
1341: check (@expr1073743518 "void foo(int i, const int n) { if ( i == n && i > n ) {} }" ) ;
1342: $if $(@expr1073743519 $!@expr1073743520 $assertEquals $(@expr1073743521 "cppcheck-2.8/test/testcondition.cpp" $, 1342 $, "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i > n.\n" $, errout@var100 .@expr1686 str (@expr1687 ) $) $) { $return ; }
1343:
1344: check (@expr1073743524 "void foo(int i, const int n) { if ( i == n && i < n ) {} }" ) ;
1345: $if $(@expr1073743525 $!@expr1073743526 $assertEquals $(@expr1073743527 "cppcheck-2.8/test/testcondition.cpp" $, 1345 $, "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i < n.\n" $, errout@var100 .@expr1686 str (@expr1687 ) $) $) { $return ; }
1346: }
1347:
1348: void incorrectLogicOperator12 ( ) {
1349: check (@expr1073743530 "struct A {\n    void f() const;\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
1350:
|
1357:
1358: ) ;
1359: $if $(@expr1073743531 $!@expr1073743532 $assertEquals $(@expr1073743533 "cppcheck-2.8/test/testcondition.cpp" $, 1359 $, "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:8]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n" $, errout@var100 .@expr1710 str (@expr1711 ) $) $) { $return ; }
1360:
1361: check (@expr1073743536 "struct A {\n    void f();\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
1362:
|
1369:
1370: ) ;
1371: $if $(@expr1073743537 $!@expr1073743538 $assertEquals $(@expr1073743539 "cppcheck-2.8/test/testcondition.cpp" $, 1371 $, "" $, errout@var100 .@expr1710 str (@expr1711 ) $) $) { $return ; }
1372:
1373: check (@expr1073743542 "void foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
1374:
|
1378:
1379: ) ;
1380: $if $(@expr1073743543 $!@expr1073743544 $assertEquals $(@expr1073743545 "cppcheck-2.8/test/testcondition.cpp" $, 1380 $, "" $, errout@var100 .@expr1710 str (@expr1711 ) $) $) { $return ; }
1381:
1382: check (@expr1073743548 "void foo(A a) {\n  const A x = a;\n  const A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
1383:
|
1387:
1388: ) ;
1389: $if $(@expr1073743549 $!@expr1073743550 $assertEquals $(@expr1073743551 "cppcheck-2.8/test/testcondition.cpp" $, 1389 $, "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n" $, errout@var100 .@expr1710 str (@expr1711 ) $) $) { $return ; }
1390: }
1391:
1392: void incorrectLogicOperator13 ( ) {
1393:
1394: check (@expr1073743554 "void f(const int &v) {\n    const int x=v;\n    if ((v == 1) && (x == 2)) {;}\n}"
1395:
1396:
1397: ) ;
1398: $if $(@expr1073743555 $!@expr1073743556 $assertEquals $(@expr1073743557 "cppcheck-2.8/test/testcondition.cpp" $, 1398 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: v == 1 && x == 2.\n" $, errout@var100 .@expr1734 str (@expr1735 ) $) $) { $return ; }
1399:
1400: check (@expr1073743560 "void f2(const int *v) {\n    const int *x=v;\n    if ((*v == 1) && (*x == 2)) {;}\n}"
1401:
1402:
1403: ) ;
1404: $if $(@expr1073743561 $!@expr1073743562 $assertEquals $(@expr1073743563 "cppcheck-2.8/test/testcondition.cpp" $, 1404 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: *(v) == 1 && *(x) == 2.\n" $, errout@var100 .@expr1734 str (@expr1735 ) $) $) { $return ; }
1405: }
1406:
1407: void incorrectLogicOperator14 ( ) {
1408: check (@expr1073743566 "static const std ::string h;\nclass i {\npublic:\n  struct j {\n    std ::string k;\n    std ::string l;\n  };\n  struct a {\n    enum { m = 1 };\n  };\n} b;\nnamespace n {\nclass c;\n}\nstruct o {\n  enum { p, d, q, r };\n  enum { e, f };\n\npublic:\n  class j {\n  public:\n    class s {\n      std ::string a;\n    };\n  };\n};\nnamespace n {\nclass b;\n}\nnamespace aa {\nclass d {\npublic:\n  char t;\n  enum {} u;\n};\n} // namespace aa\nnamespace aa {\nstruct e {};\n} // namespace aa\nclass a;\nclass w {\npublic:\n  enum { x };\n  struct {\n  } y;\n  std ::string z;\n};\nclass ab {\n  friend class c;\n\npublic:\n  class ac {\n    void e(const ac &v) const;\n  };\n};\nclass f;\nclass ad {\n  friend class e;\n  enum { e, ae, ag, ah, ai, aj, ak, a, b };\n  class c {};\n  class d {\n    enum am { f, an, ao, ap, aq, ar, b, as, at, c, au };\n    enum av { aw, ax, ay, az, e, ba, bb, bc, bd, a };\n    struct b {\n      am action;\n      av c;\n    };\n  };\n  class e {\n  public:\n    std ::string e;\n    class f {\n    } f;\n    class be {\n    public:\n    };\n    std ::vector<be> bf;\n    enum { bg, b } c;\n  };\n  struct bh {\n    std ::map<int, d> b;\n  };\n  std ::map<std ::string, bh> bi;\n  struct {\n    int b;\n    char bj;\n  } bk;\n  class a {\n  public:\n    std ::set<std ::string> b;\n  };\n};\nclass bl;\nclass al;\nclass bm;\nclass f;\nclass b;\nclass bn;\nnamespace bo {\nclass bp {\npublic:\n  typedef std ::pair<const f *, std ::string> bq;\n  typedef std ::list<bq> br;\n};\nconst bo ::bp *dg(const f *a, const al *b);\n} // namespace bo\nconst bn *dh(const f *d, bo ::bp ::br &bs);\nclass f {\npublic:\n  struct bt {};\n  std ::vector<a> f;\n};\nclass bu;\nclass a;\nclass c;\nstruct bv {};\nclass af {\nprivate:\npublic:\n  enum { b, d, e, f, c, bw };\n  void a(int c);\n  af *bx() const;\n};\nnamespace by {\nclass b;\n}\nclass b {\npublic:\n  bool d, c;\n};\nclass bz;\nclass f;\nclass ca {\n  friend class b;\n\npublic:\n  const bm *cb() const { return cc; }\n  f *d(f *e, bool f) const;\n  int e() { return ++cd; }\n  bl *const c;\n  bm *cc;\n  std ::map<std ::string, int> ce;\n  int cd;\n  bz *a;\n};\nnamespace n {\nclass c;\nclass d;\n} // namespace n\nclass cf {\npublic:\n  explicit cf(const std ::string &aname);\n  cf(const std ::string &aname, const ca *cg, const al *ch, bl *ci)\n      : cj(cg), ck(ch), cl(ci), cn(aname) {}\n\nprotected:\n  const ca *const cj;\n  const al *const ck;\n  bl *const cl;\n  const std ::string cn;\n};\nclass cm : public cf {\npublic:\n  void cp();\n  std ::string d() const;\n};\nstruct co {\n  co();\n  const bu *a;\n  enum f {};\n  enum {\n    b = (1 << 0),\n    c = (1 << 1),\n  };\n  void d(bool e);\n};\nclass bu {\n  friend class e;\n\npublic:\n  struct f {};\n  enum { d, cr, cq, ct, cs, e, a, b, c, dd, cu, cv, cw, cx, cy, cz, da };\n  const f *db;\n  const af *dc;\n} f{};\nclass bm {\npublic:\n  std ::list<bu> df;\n  std ::vector<const bu *> de;\n  mutable std ::set<std ::string> f;\n};\nvoid cm ::cp() {\n  const bm *a = cj->cb();\n  for (const bu *b : a->de)\n    for (af *c = b->dc->bx();;) {\n      af *d = c;\n      af *e = c;\n      bool f(d);\n      bool g(e);\n      if (f && g)\n        ;\n    }\n}"
1409:
|
1609:
1610: ) ;
1611: $if $(@expr1073743567 $!@expr1073743568 $assertEquals $(@expr1073743569 "cppcheck-2.8/test/testcondition.cpp" $, 1611 $, "[test.cpp:200] -> [test.cpp:200]: (style) Condition 'g' is always true\n" $, errout@var100 .@expr1073743570 str (@expr1073743571 ) $) $) { $return ; }
1612: }
1613:
1614: void incorrectLogicOperator15 ( ) {
1615:
1616: check (@expr1073743572 "struct PipeRoute {\n    std::deque<int> points;\n    std::deque<int> estimates;\n};\nvoid CleanPipeRoutes(std::map<int, PipeRoute*>& pipeRoutes) {\n    for (auto it = pipeRoutes.begin(); it != pipeRoutes.end(); ) {\n        PipeRoute* curRoute = it->second;\n        if (curRoute->points.empty() && curRoute->estimates.size() != 2)\n        {\n            delete curRoute;\n            it = pipeRoutes.erase(it);\n        }\n        else\n        {\n            ++it;\n        }\n    }\n}\n"
1617:
|
1632:
1633: ) ;
1634: $if $(@expr1073743573 $!@expr1073743574 $assertEquals $(@expr1073743575 "cppcheck-2.8/test/testcondition.cpp" $, 1634 $, "" $, errout@var100 .@expr1073743576 str (@expr1073743577 ) $) $) { $return ; }
1635: }
1636:
1637: void incorrectLogicOperator16 ( ) {
1638: check (@expr1073743578 "void foo(void* p) {\n    if (!p || p == -1) { }\n}\n"
1639:
1640: ) ;
1641: $if $(@expr1073743579 $!@expr1073743580 $assertEquals $(@expr1073743581 "cppcheck-2.8/test/testcondition.cpp" $, 1641 $, "" $, errout@var100 .@expr1073743582 str (@expr1073743583 ) $) $) { $return ; }
1642: }
1643:
1644: void secondAlwaysTrueFalseWhenFirstTrueError ( ) {
1645: check (@expr1073743584 "void f(int x) {\n    if (x > 5 && x != 1)\n        a++;\n}"
1646:
1647:
1648: ) ;
1649: $if $(@expr1073743585 $!@expr1073743586 $assertEquals $(@expr1073743587 "cppcheck-2.8/test/testcondition.cpp" $, 1649 $, "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1650:
1651: check (@expr1073743590 "void f(int x) {\n    if (x > 5 && x != 6)\n        a++;\n}"
1652:
1653:
1654: ) ;
1655: $if $(@expr1073743591 $!@expr1073743592 $assertEquals $(@expr1073743593 "cppcheck-2.8/test/testcondition.cpp" $, 1655 $, "" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1656:
1657: check (@expr1073743596 "void f(int x) {\n    if ((x > 5) && (x != 1))\n        a++;\n}"
1658:
1659:
1660: ) ;
1661: $if $(@expr1073743597 $!@expr1073743598 $assertEquals $(@expr1073743599 "cppcheck-2.8/test/testcondition.cpp" $, 1661 $, "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1662:
1663: check (@expr1073743602 "void f(int x) {\n    if ((x > 5) && (x != 6))\n        a++;\n}"
1664:
1665:
1666: ) ;
1667: $if $(@expr1073743603 $!@expr1073743604 $assertEquals $(@expr1073743605 "cppcheck-2.8/test/testcondition.cpp" $, 1667 $, "" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return ; }
1668:
1669: check (@expr1073743608 "void f(int x, bool& b) {\n    b = x > 3 || x == 4;\n    c = x < 5 || x == 4;\n    d = x >= 3 || x == 4;\n    e = x <= 5 || x == 4;\n}"
1670:
|
1673:
1674: ) ;
1675: $if $(@expr1073743609 $!@expr1073743610 $assertEquals $(@expr1073743611 "cppcheck-2.8/test/testcondition.cpp" $, 1675 $, "[test.cpp:2]: (style) Redundant condition: If 'x == 4', the comparison 'x > 3' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x == 4', the comparison 'x < 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x == 4', the comparison 'x >= 3' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x == 4', the comparison 'x <= 5' is always true.\n" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return
1676:
1677:
1678: ; }
1679:
1680: check (@expr1073743614 "void f(int x, bool& b) {\n    b = x > 5 || x != 1;\n    c = x < 1 || x != 3;\n    d = x >= 5 || x != 1;\n    e = x <= 1 || x != 3;\n}"
1681:
|
1684:
1685: ) ;
1686: $if $(@expr1073743615 $!@expr1073743616 $assertEquals $(@expr1073743617 "cppcheck-2.8/test/testcondition.cpp" $, 1686 $, "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x < 1', the comparison 'x != 3' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x >= 5', the comparison 'x != 1' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x <= 1', the comparison 'x != 3' is always true.\n" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return
1687:
1688:
1689: ; }
1690:
1691: check (@expr1073743620 "void f(int x, bool& b) {\n    b = x > 6 && x > 5;\n    c = x > 5 || x > 6;\n    d = x < 6 && x < 5;\n    e = x < 5 || x < 6;\n}"
1692:
|
1695:
1696: ) ;
1697: $if $(@expr1073743621 $!@expr1073743622 $assertEquals $(@expr1073743623 "cppcheck-2.8/test/testcondition.cpp" $, 1697 $, "[test.cpp:2]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n" $, errout@var100 .@expr1764 str (@expr1765 ) $) $) { $return
1698:
1699:
1700: ; }
1701: }
1702:
1703: void incorrectLogicOp_condSwapping ( ) {
1704: check (@expr1073743626 "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}"
1705:
1706:
1707: ) ;
1708: $if $(@expr1073743627 $!@expr1073743628 $assertEquals $(@expr1073743629 "cppcheck-2.8/test/testcondition.cpp" $, 1708 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1709:
1710: check (@expr1073743632 "void f(int x) {\n    if (1 > x && x > 3)\n        a++;\n}"
1711:
1712:
1713: ) ;
1714: $if $(@expr1073743633 $!@expr1073743634 $assertEquals $(@expr1073743635 "cppcheck-2.8/test/testcondition.cpp" $, 1714 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1715:
1716: check (@expr1073743638 "void f(int x) {\n    if (x < 1 && 3 < x)\n        a++;\n}"
1717:
1718:
1719: ) ;
1720: $if $(@expr1073743639 $!@expr1073743640 $assertEquals $(@expr1073743641 "cppcheck-2.8/test/testcondition.cpp" $, 1720 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1721:
1722: check (@expr1073743644 "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}"
1723:
1724:
1725: ) ;
1726: $if $(@expr1073743645 $!@expr1073743646 $assertEquals $(@expr1073743647 "cppcheck-2.8/test/testcondition.cpp" $, 1726 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1727:
1728: check (@expr1073743650 "void f(int x) {\n    if (x > 3 && x < 1)\n        a++;\n}"
1729:
1730:
1731: ) ;
1732: $if $(@expr1073743651 $!@expr1073743652 $assertEquals $(@expr1073743653 "cppcheck-2.8/test/testcondition.cpp" $, 1732 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1733:
1734: check (@expr1073743656 "void f(int x) {\n    if (3 < x && x < 1)\n        a++;\n}"
1735:
1736:
1737: ) ;
1738: $if $(@expr1073743657 $!@expr1073743658 $assertEquals $(@expr1073743659 "cppcheck-2.8/test/testcondition.cpp" $, 1738 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1739:
1740: check (@expr1073743662 "void f(int x) {\n    if (x > 3 && 1 > x)\n        a++;\n}"
1741:
1742:
1743: ) ;
1744: $if $(@expr1073743663 $!@expr1073743664 $assertEquals $(@expr1073743665 "cppcheck-2.8/test/testcondition.cpp" $, 1744 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1745:
1746: check (@expr1073743668 "void f(int x) {\n    if (3 < x && 1 > x)\n        a++;\n}"
1747:
1748:
1749: ) ;
1750: $if $(@expr1073743669 $!@expr1073743670 $assertEquals $(@expr1073743671 "cppcheck-2.8/test/testcondition.cpp" $, 1750 $, "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" $, errout@var100 .@expr1806 str (@expr1807 ) $) $) { $return ; }
1751: }
1752:
1753: void modulo ( ) {
1754: check (@expr1073743674 "bool f(bool& b1, bool& b2, bool& b3) {\n    b1 = a % 5 == 4;\n    b2 = a % c == 100000;\n    b3 = a % 5 == c;\n    return a % 5 == 5-p;\n}"
1755:
|
1758:
1759: ) ;
1760: $if $(@expr1073743675 $!@expr1073743676 $assertEquals $(@expr1073743677 "cppcheck-2.8/test/testcondition.cpp" $, 1760 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
1761:
1762: check (@expr1073743680 "bool f(bool& b1, bool& b2, bool& b3, bool& b4, bool& b5) {\n    b1 = a % 5 < 5;\n    b2 = a % 5 <= 5;\n    b3 = a % 5 == 5;\n    b4 = a % 5 != 5;\n    b5 = a % 5 >= 5;\n    return a % 5 > 5;\n}"
1763:
|
1768:
1769: ) ;
1770: $if $(@expr1073743681 $!@expr1073743682 $assertEquals $(@expr1073743683 "cppcheck-2.8/test/testcondition.cpp" $, 1770 $, "[test.cpp:7]: (style) Condition 'a%5>5' is always false\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:5]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:6]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:7]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return
1771:
|
1777:
1778: ; }
1779:
1780: check (@expr1073743686 "void f(bool& b1, bool& b2) {\n    b1 = bar() % 5 < 889;\n    if(x[593] % 5 <= 5)\n        b2 = x.a % 5 == 5;\n}"
1781:
1782:
1783:
1784: ) ;
1785: $if $(@expr1073743687 $!@expr1073743688 $assertEquals $(@expr1073743689 "cppcheck-2.8/test/testcondition.cpp" $, 1785 $, "[test.cpp:3]: (style) Condition 'x[593]%5<=5' is always true\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return
1786:
|
1789:
1790: ; }
1791:
1792: check (@expr1073743692 "void f() {\n    if (a % 2 + b % 2 == 2)\n        foo();\n}"
1793:
1794:
1795: ) ;
1796: $if $(@expr1073743693 $!@expr1073743694 $assertEquals $(@expr1073743695 "cppcheck-2.8/test/testcondition.cpp" $, 1796 $, "" $, errout@var100 .@expr1854 str (@expr1855 ) $) $) { $return ; }
1797: }
1798:
1799: void oppositeInnerCondition ( ) {
1800: check (@expr1073743698 "void foo(int a, int b) {\n    if(a==b)\n        if(a!=b)\n            cout << a;\n}"
1801:
1802:
1803:
1804: ) ;
1805: $if $(@expr1073743699 $!@expr1073743700 $assertEquals $(@expr1073743701 "cppcheck-2.8/test/testcondition.cpp" $, 1805 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1806:
1807: check (@expr1073743704 "bool foo(int a, int b) {\n    if(a==b)\n        return a!=b;\n    return false;\n}"
1808:
1809:
1810:
1811: ) ;
1812: $if $(@expr1073743705 $!@expr1073743706 $assertEquals $(@expr1073743707 "cppcheck-2.8/test/testcondition.cpp" $, 1812 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'return' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1813:
1814: check (@expr1073743710 "void foo(int a, int b) {\n    if(a==b)\n        if(b!=a)\n            cout << a;\n}"
1815:
1816:
1817:
1818: ) ;
1819: $if $(@expr1073743711 $!@expr1073743712 $assertEquals $(@expr1073743713 "cppcheck-2.8/test/testcondition.cpp" $, 1819 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1820:
1821: check (@expr1073743716 "void foo(int a) {\n    if(a >= 50) {\n        if(a < 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}"
1822:
|
1827:
1828: ) ;
1829: $if $(@expr1073743717 $!@expr1073743718 $assertEquals $(@expr1073743719 "cppcheck-2.8/test/testcondition.cpp" $, 1829 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1830:
1831:
1832: check (@expr1073743722 "void foo(int a) {\n    if(a >= 50) {\n        if(a > 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}"
1833:
|
1838:
1839: ) ;
1840: $if $(@expr1073743723 $!@expr1073743724 $assertEquals $(@expr1073743725 "cppcheck-2.8/test/testcondition.cpp" $, 1840 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1841:
1842:
1843: check (@expr1073743728 "class foo {\n    void bar() {\n        if (tok == '(') {\n            next();\n            if (tok == ',') {\n                next();\n                if (tok != ',') {\n                    op->reg2 = asm_parse_reg();\n                }\n                skip(',');\n            }\n        }\n    }\n    void next();\n    const char *tok;\n};"
1844:
|
1857:
1858: ) ;
1859: $if $(@expr1073743729 $!@expr1073743730 $assertEquals $(@expr1073743731 "cppcheck-2.8/test/testcondition.cpp" $, 1859 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1860:
1861: check (@expr1073743734 "void foo(int i)\n{\n   if(i > 5) {\n       i = bar();\n       if(i < 5) {\n           cout << a;\n       }\n    }\n}"
1862:
|
1868:
1869: ) ;
1870: $if $(@expr1073743735 $!@expr1073743736 $assertEquals $(@expr1073743737 "cppcheck-2.8/test/testcondition.cpp" $, 1870 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1871:
1872: check (@expr1073743740 "void foo(int& i) {\n    i=6;\n}\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
1873:
|
1880:
1881: ) ;
1882: $if $(@expr1073743741 $!@expr1073743742 $assertEquals $(@expr1073743743 "cppcheck-2.8/test/testcondition.cpp" $, 1882 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1883:
1884: check (@expr1073743746 "void foo(int& i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
1885:
|
1891:
1892: ) ;
1893: $if $(@expr1073743747 $!@expr1073743748 $assertEquals $(@expr1073743749 "cppcheck-2.8/test/testcondition.cpp" $, 1893 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1894:
1895: check (@expr1073743752 "void foo(int i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
1896:
|
1901:
1902: ) ;
1903: $if $(@expr1073743753 $!@expr1073743754 $assertEquals $(@expr1073743755 "cppcheck-2.8/test/testcondition.cpp" $, 1903 $, "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1904:
1905: check (@expr1073743758 "void foo(const int &i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
1906:
|
1911:
1912: ) ;
1913: $if $(@expr1073743759 $!@expr1073743760 $assertEquals $(@expr1073743761 "cppcheck-2.8/test/testcondition.cpp" $, 1913 $, "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1914:
1915: check (@expr1073743764 "void foo(int i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
1916:
|
1922:
1923: ) ;
1924: $if $(@expr1073743765 $!@expr1073743766 $assertEquals $(@expr1073743767 "cppcheck-2.8/test/testcondition.cpp" $, 1924 $, "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1925:
1926: check (@expr1073743770 "class C { void f(int &i) const; };\nvoid foo(C c, int i) {\n  if (i==5) {\n    c.f(i);\n    if (i != 5) {}\n  }\n}"
1927:
|
1931:
1932: ) ;
1933: $if $(@expr1073743771 $!@expr1073743772 $assertEquals $(@expr1073743773 "cppcheck-2.8/test/testcondition.cpp" $, 1933 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1934:
1935:
1936: check (@expr1073743776 "int generic_write_sync(int,int,int);\n\nvoid cifs_writev(int i) {\n   int rc = __generic_file_aio_write();\n   if (rc > 0){\n       err = generic_write_sync(file, iocb->ki_pos - rc, rc);\n       if(rc < 0) {\n           err = rc;\n       }\n    }\n}"
1937:
|
1945:
1946: ) ;
1947: $if $(@expr1073743777 $!@expr1073743778 $assertEquals $(@expr1073743779 "cppcheck-2.8/test/testcondition.cpp" $, 1947 $, "[test.cpp:5] -> [test.cpp:7]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1948:
1949:
1950:
1951: check (@expr1073743782 "void testOppositeConditions2() {\n  int array[2] = { 0, 0 };\n  if (array[0] < 2) {\n    array[0] += 5;\n    if (array[0] > 2) {}\n  }\n}"
1952:
|
1956:
1957: ) ;
1958: $if $(@expr1073743783 $!@expr1073743784 $assertEquals $(@expr1073743785 "cppcheck-2.8/test/testcondition.cpp" $, 1958 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1959:
1960:
1961: check (@expr1073743788 "void foo(A *a) {\n   if(a) {\n       B *b = dynamic_cast<B*>(a);\n       if(!b) {}\n    }\n}"
1962:
|
1965:
1966: ) ;
1967: $if $(@expr1073743789 $!@expr1073743790 $assertEquals $(@expr1073743791 "cppcheck-2.8/test/testcondition.cpp" $, 1967 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1968:
1969: check (@expr1073743794 "void foo(int a) {\n   if(a) {\n       int b = a;\n       if(!b) {}\n    }\n}"
1970:
|
1973:
1974: ) ;
1975: $if $(@expr1073743795 $!@expr1073743796 $assertEquals $(@expr1073743797 "cppcheck-2.8/test/testcondition.cpp" $, 1975 $, "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1976:
1977: check (@expr1073743800 "void foo(unsigned u) {\n  if (u != 0) {\n    for (int i=0; i<32; i++) {\n      if (u == 0) {}\n      u = x;\n    }\n  }\n}"
1978:
|
1983:
1984: ) ;
1985: $if $(@expr1073743801 $!@expr1073743802 $assertEquals $(@expr1073743803 "cppcheck-2.8/test/testcondition.cpp" $, 1985 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1986:
1987:
1988: check (@expr1073743806 "void f() {\n  for (int i=0;i<4;i++) {\n    if (i==5) {}\n  }\n}"
1989:
1990:
1991:
1992: ) ;
1993: $if $(@expr1073743807 $!@expr1073743808 $assertEquals $(@expr1073743809 "cppcheck-2.8/test/testcondition.cpp" $, 1993 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
1994:
1995:
1996: check (@expr1073743812 "void Delete(SS_CELLCOORD upperleft) {\n    if ((upperleft.Col == -1) && (upperleft.Row == -1)) {\n        GetActiveCell(&(upperleft.Col), &(upperleft.Row));\n        if (upperleft.Row == -1) {}\n    }\n}"
1997:
|
2000:
2001: ) ;
2002: $if $(@expr1073743813 $!@expr1073743814 $assertEquals $(@expr1073743815 "cppcheck-2.8/test/testcondition.cpp" $, 2002 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2003:
2004:
2005: check (@expr1073743818 "struct A {\n    void DoTest() {\n        if (!IsSet()) {\n            m_value = true;\n            if (IsSet());\n        }\n    }\n    bool IsSet() const { return m_value; }\n    bool m_value = false;\n};"
2006:
|
2013:
2014: ) ;
2015: $if $(@expr1073743819 $!@expr1073743820 $assertEquals $(@expr1073743821 "cppcheck-2.8/test/testcondition.cpp" $, 2015 $, "" $, errout@var100 .@expr1878 str (@expr1879 ) $) $) { $return ; }
2016: }
2017:
2018: void oppositeInnerConditionPointers ( ) {
2019: check (@expr1073743824 "void f(struct ABC *abc) {\n   struct AB *ab = abc->ab;\n   if (ab->a == 123){\n       do_something(abc);\n       if (ab->a != 123) {\n           err = rc;\n       }\n    }\n}"
2020:
|
2026:
2027: ) ;
2028: $if $(@expr1073743825 $!@expr1073743826 $assertEquals $(@expr1073743827 "cppcheck-2.8/test/testcondition.cpp" $, 2028 $, "" $, errout@var100 .@expr2004 str (@expr2005 ) $) $) { $return ; }
2029:
2030: check (@expr1073743830 "void Fred::f() {\n  if (this->next_ == map_man_->table_) {\n    this->next_ = n;\n    if (this->next_ != map_man_->table_) {}\n  }\n}"
2031:
|
2034:
2035: ) ;
2036: $if $(@expr1073743831 $!@expr1073743832 $assertEquals $(@expr1073743833 "cppcheck-2.8/test/testcondition.cpp" $, 2036 $, "" $, errout@var100 .@expr2004 str (@expr2005 ) $) $) { $return ; }
2037:
2038: check (@expr1073743836 "void test(float *f) {\n  if(*f>10) {\n    (*f) += 0.1f;\n    if(*f<10) {}\n  }\n}"
2039:
|
2042:
2043: ) ;
2044: $if $(@expr1073743837 $!@expr1073743838 $assertEquals $(@expr1073743839 "cppcheck-2.8/test/testcondition.cpp" $, 2044 $, "" $, errout@var100 .@expr2004 str (@expr2005 ) $) $) { $return ; }
2045:
2046: check (@expr1073743842 "int * f(int * x, int * y) {\n    if(!x) return x;\n    return y;\n}"
2047:
2048:
2049: ) ;
2050: $if $(@expr1073743843 $!@expr1073743844 $assertEquals $(@expr1073743845 "cppcheck-2.8/test/testcondition.cpp" $, 2050 $, "" $, errout@var100 .@expr2004 str (@expr2005 ) $) $) { $return ; }
2051: }
2052:
2053: void oppositeInnerConditionClass ( ) {
2054:
2055: check (@expr1073743848 "void f() {\n  const Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
2056:
|
2060:
2061: ) ;
2062: $if $(@expr1073743849 $!@expr1073743850 $assertEquals $(@expr1073743851 "cppcheck-2.8/test/testcondition.cpp" $, 2062 $, "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2028 str (@expr2029 ) $) $) { $return ; }
2063:
2064: check (@expr1073743854 "class Fred { public: bool isValid() const; void dostuff() const; };\nvoid f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
2065:
|
2070:
2071: ) ;
2072: $if $(@expr1073743855 $!@expr1073743856 $assertEquals $(@expr1073743857 "cppcheck-2.8/test/testcondition.cpp" $, 2072 $, "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2028 str (@expr2029 ) $) $) { $return ; }
2073:
2074: check (@expr1073743860 "void f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
2075:
|
2079:
2080: ) ;
2081: $if $(@expr1073743861 $!@expr1073743862 $assertEquals $(@expr1073743863 "cppcheck-2.8/test/testcondition.cpp" $, 2081 $, "" $, errout@var100 .@expr2028 str (@expr2029 ) $) $) { $return ; }
2082:
2083:
2084: check (@expr1073743866 "class TranslationHandler {\nQTranslator *mTranslator;\nvoid SetLanguage() {\n   if (mTranslator) {\n             qApp->removeTranslator(mTranslator);\n        }\n   }\n};"
2085:
|
2090:
2091: ) ;
2092: $if $(@expr1073743867 $!@expr1073743868 $assertEquals $(@expr1073743869 "cppcheck-2.8/test/testcondition.cpp" $, 2092 $, "" $, errout@var100 .@expr2028 str (@expr2029 ) $) $) { $return ; }
2093:
2094: check (@expr1073743872 "bool f(std::ofstream &CFileStream) {\n  if(!CFileStream.good()) { return; }\n  CFileStream << \"abc\";\n  if (!CFileStream.good()) {}\n}"
2095:
2096:
2097:
2098: ) ;
2099: $if $(@expr1073743873 $!@expr1073743874 $assertEquals $(@expr1073743875 "cppcheck-2.8/test/testcondition.cpp" $, 2099 $, "" $, errout@var100 .@expr2028 str (@expr2029 ) $) $) { $return ; }
2100: }
2101:
2102: void oppositeInnerConditionUndeclaredVariable ( ) {
2103:
2104: check (@expr1073743878 "void f() {\n   if (x == -1){\n       x = do_something();\n       if (x != -1) {}\n    }\n}"
2105:
|
2108:
2109: ) ;
2110: $if $(@expr1073743879 $!@expr1073743880 $assertEquals $(@expr1073743881 "cppcheck-2.8/test/testcondition.cpp" $, 2110 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2111:
2112:
2113: check (@expr1073743884 "void f() {\n   if (r < w){\n       r += 3;\n       if (r > w) {}\n    }\n}"
2114:
|
2117:
2118: ) ;
2119: $if $(@expr1073743885 $!@expr1073743886 $assertEquals $(@expr1073743887 "cppcheck-2.8/test/testcondition.cpp" $, 2119 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2120:
2121:
2122: check (@expr1073743890 "void foo() {\n   if(i) {\n       i++;\n       if(!i) {}\n    }\n}"
2123:
|
2126:
2127: ) ;
2128: $if $(@expr1073743891 $!@expr1073743892 $assertEquals $(@expr1073743893 "cppcheck-2.8/test/testcondition.cpp" $, 2128 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2129:
2130:
2131: check (@expr1073743896 "void f(int x) {\n  if (a[x] > 0) {\n    a[x] -= dt;\n    if (a[x] < 0) {}\n  }\n}"
2132:
|
2135:
2136: ) ;
2137: $if $(@expr1073743897 $!@expr1073743898 $assertEquals $(@expr1073743899 "cppcheck-2.8/test/testcondition.cpp" $, 2137 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2138:
2139:
2140: check (@expr1073743902 "void Foo::Bar() {\n   if(var){\n      --var;\n      if(!var){}\n      else {}\n   }\n}"
2141:
|
2145:
2146: ) ;
2147: $if $(@expr1073743903 $!@expr1073743904 $assertEquals $(@expr1073743905 "cppcheck-2.8/test/testcondition.cpp" $, 2147 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2148:
2149:
2150: check (@expr1073743908 "bool f() {\n  if (rec.lLength==0) {\n    rec.Delete(i);\n    if (rec.lLength!=0) {}\n  }\n}"
2151:
|
2154:
2155: ) ;
2156: $if $(@expr1073743909 $!@expr1073743910 $assertEquals $(@expr1073743911 "cppcheck-2.8/test/testcondition.cpp" $, 2156 $, "" $, errout@var100 .@expr2058 str (@expr2059 ) $) $) { $return ; }
2157: }
2158:
2159: void oppositeInnerConditionAlias ( ) {
2160: check (@expr1073743914 "void f() {\n  struct S s;\n  bool hasFailed = false;\n  s.status = &hasFailed;\n\n  if (! hasFailed) {\n    doStuff(&s);\n    if (hasFailed) {}\n  }\n}"
2161:
|
2168:
2169: ) ;
2170: $if $(@expr1073743915 $!@expr1073743916 $assertEquals $(@expr1073743917 "cppcheck-2.8/test/testcondition.cpp" $, 2170 $, "[test.cpp:6]: (style) Condition '!hasFailed' is always true\n" $, errout@var100 .@expr1073743918 str (@expr1073743919 ) $) $) { $return ; }
2171: }
2172:
2173: void oppositeInnerCondition2 ( ) {
2174:
2175: check (@expr1073743920 "void f(int x) {\n\n  if (x<4) {\n    if (x==5) {}\n  }\n}"
2176:
|
2179:
2180: ) ;
2181: $if $(@expr1073743921 $!@expr1073743922 $assertEquals $(@expr1073743923 "cppcheck-2.8/test/testcondition.cpp" $, 2181 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2182: ; }
2183: check (@expr1073743926 "void f(int x) {\n\n  if (x<4) {\n    if (x!=5) {}\n  }\n}"
2184:
|
2187:
2188: ) ;
2189: $if $(@expr1073743927 $!@expr1073743928 $assertEquals $(@expr1073743929 "cppcheck-2.8/test/testcondition.cpp" $, 2189 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=5' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2190: check (@expr1073743932 "void f(int x) {\n\n  if (x<4) {\n    if (x>5) {}\n  }\n}"
2191:
|
2194:
2195: ) ;
2196: $if $(@expr1073743933 $!@expr1073743934 $assertEquals $(@expr1073743935 "cppcheck-2.8/test/testcondition.cpp" $, 2196 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2197: ; }
2198: check (@expr1073743938 "void f(int x) {\n\n  if (x<4) {\n    if (x>=5) {}\n  }\n}"
2199:
|
2202:
2203: ) ;
2204: $if $(@expr1073743939 $!@expr1073743940 $assertEquals $(@expr1073743941 "cppcheck-2.8/test/testcondition.cpp" $, 2204 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2205: ; }
2206: check (@expr1073743944 "void f(int x) {\n\n  if (x<4) {\n    if (x<5) {}\n  }\n}"
2207:
|
2210:
2211: ) ;
2212: $if $(@expr1073743945 $!@expr1073743946 $assertEquals $(@expr1073743947 "cppcheck-2.8/test/testcondition.cpp" $, 2212 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2213: check (@expr1073743950 "void f(int x) {\n\n  if (x<4) {\n    if (x<=5) {}\n  }\n}"
2214:
|
2217:
2218: ) ;
2219: $if $(@expr1073743951 $!@expr1073743952 $assertEquals $(@expr1073743953 "cppcheck-2.8/test/testcondition.cpp" $, 2219 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=5' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2220:
2221: check (@expr1073743956 "void f(int x) {\n\n  if (x<5) {\n    if (x==4) {}\n  }\n}"
2222:
|
2225:
2226: ) ;
2227: $if $(@expr1073743957 $!@expr1073743958 $assertEquals $(@expr1073743959 "cppcheck-2.8/test/testcondition.cpp" $, 2227 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2228: check (@expr1073743962 "void f(int x) {\n\n  if (x<5) {\n    if (x!=4) {}\n  }\n}"
2229:
|
2232:
2233: ) ;
2234: $if $(@expr1073743963 $!@expr1073743964 $assertEquals $(@expr1073743965 "cppcheck-2.8/test/testcondition.cpp" $, 2234 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2235: check (@expr1073743968 "void f(int x) {\n\n  if (x<5) {\n    if (x!=6) {}\n  }\n}"
2236:
|
2239:
2240: ) ;
2241: $if $(@expr1073743969 $!@expr1073743970 $assertEquals $(@expr1073743971 "cppcheck-2.8/test/testcondition.cpp" $, 2241 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=6' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2242: check (@expr1073743974 "void f(int x) {\n\n  if (x<5) {\n    if (x>4) {}\n  }\n}"
2243:
|
2246:
2247: ) ;
2248: $if $(@expr1073743975 $!@expr1073743976 $assertEquals $(@expr1073743977 "cppcheck-2.8/test/testcondition.cpp" $, 2248 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always false\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2249: check (@expr1073743980 "void f(int x) {\n\n  if (x<5) {\n    if (x>=4) {}\n  }\n}"
2250:
|
2253:
2254: ) ;
2255: $if $(@expr1073743981 $!@expr1073743982 $assertEquals $(@expr1073743983 "cppcheck-2.8/test/testcondition.cpp" $, 2255 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2256: check (@expr1073743986 "void f(int x) {\n\n  if (x<5) {\n    if (x<4) {}\n  }\n}"
2257:
|
2260:
2261: ) ;
2262: $if $(@expr1073743987 $!@expr1073743988 $assertEquals $(@expr1073743989 "cppcheck-2.8/test/testcondition.cpp" $, 2262 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2263: check (@expr1073743992 "void f(int x) {\n\n  if (x<5) {\n    if (x<=4) {}\n  }\n}"
2264:
|
2267:
2268: ) ;
2269: $if $(@expr1073743993 $!@expr1073743994 $assertEquals $(@expr1073743995 "cppcheck-2.8/test/testcondition.cpp" $, 2269 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=4' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2270:
2271:
2272: check (@expr1073743998 "void f(int x) {\n\n  if (x>4) {\n    if (x==5) {}\n  }\n}"
2273:
|
2276:
2277: ) ;
2278: $if $(@expr1073743999 $!@expr1073744000 $assertEquals $(@expr1073744001 "cppcheck-2.8/test/testcondition.cpp" $, 2278 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2279: check (@expr1073744004 "void f(int x) {\n\n  if (x>4) {\n    if (x>5) {}\n  }\n}"
2280:
|
2283:
2284: ) ;
2285: $if $(@expr1073744005 $!@expr1073744006 $assertEquals $(@expr1073744007 "cppcheck-2.8/test/testcondition.cpp" $, 2285 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2286: check (@expr1073744010 "void f(int x) {\n\n  if (x>4) {\n    if (x>=5) {}\n  }\n}"
2287:
|
2290:
2291: ) ;
2292: $if $(@expr1073744011 $!@expr1073744012 $assertEquals $(@expr1073744013 "cppcheck-2.8/test/testcondition.cpp" $, 2292 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=5' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2293: check (@expr1073744016 "void f(int x) {\n\n  if (x>4) {\n    if (x<5) {}\n  }\n}"
2294:
|
2297:
2298: ) ;
2299: $if $(@expr1073744017 $!@expr1073744018 $assertEquals $(@expr1073744019 "cppcheck-2.8/test/testcondition.cpp" $, 2299 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always false\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2300: check (@expr1073744022 "void f(int x) {\n\n  if (x>4) {\n    if (x<=5) {}\n  }\n}"
2301:
|
2304:
2305: ) ;
2306: $if $(@expr1073744023 $!@expr1073744024 $assertEquals $(@expr1073744025 "cppcheck-2.8/test/testcondition.cpp" $, 2306 $, "" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2307:
2308: check (@expr1073744028 "void f(int x) {\n\n  if (x>5) {\n    if (x==4) {}\n  }\n}"
2309:
|
2312:
2313: ) ;
2314: $if $(@expr1073744029 $!@expr1073744030 $assertEquals $(@expr1073744031 "cppcheck-2.8/test/testcondition.cpp" $, 2314 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2315: ; }
2316: check (@expr1073744034 "void f(int x) {\n\n  if (x>5) {\n    if (x>4) {}\n  }\n}"
2317:
|
2320:
2321: ) ;
2322: $if $(@expr1073744035 $!@expr1073744036 $assertEquals $(@expr1073744037 "cppcheck-2.8/test/testcondition.cpp" $, 2322 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2323: check (@expr1073744040 "void f(int x) {\n\n  if (x>5) {\n    if (x>=4) {}\n  }\n}"
2324:
|
2327:
2328: ) ;
2329: $if $(@expr1073744041 $!@expr1073744042 $assertEquals $(@expr1073744043 "cppcheck-2.8/test/testcondition.cpp" $, 2329 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=4' is always true\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2330: check (@expr1073744046 "void f(int x) {\n\n  if (x>5) {\n    if (x<4) {}\n  }\n}"
2331:
|
2334:
2335: ) ;
2336: $if $(@expr1073744047 $!@expr1073744048 $assertEquals $(@expr1073744049 "cppcheck-2.8/test/testcondition.cpp" $, 2336 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2337: ; }
2338: check (@expr1073744052 "void f(int x) {\n\n  if (x>5) {\n    if (x<=4) {}\n  }\n}"
2339:
|
2342:
2343: ) ;
2344: $if $(@expr1073744053 $!@expr1073744054 $assertEquals $(@expr1073744055 "cppcheck-2.8/test/testcondition.cpp" $, 2344 $, "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return
2345: ; }
2346:
2347: check (@expr1073744058 "void f(int x) {\n  if (x < 4) {\n    if (10 < x) {}\n  }\n}"
2348:
2349:
2350:
2351: ) ;
2352: $if $(@expr1073744059 $!@expr1073744060 $assertEquals $(@expr1073744061 "cppcheck-2.8/test/testcondition.cpp" $, 2352 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2100 str (@expr2101 ) $) $) { $return ; }
2353: }
2354:
2355: void oppositeInnerCondition3 ( ) {
2356: check (@expr1073744064 "void f3(char c) { if(c=='x') if(c=='y') {}}" ) ;
2357: $if $(@expr1073744065 $!@expr1073744066 $assertEquals $(@expr1073744067 "cppcheck-2.8/test/testcondition.cpp" $, 2357 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2358:
2359: check (@expr1073744070 "void f4(char *p) { if(*p=='x') if(*p=='y') {}}" ) ;
2360: $if $(@expr1073744071 $!@expr1073744072 $assertEquals $(@expr1073744073 "cppcheck-2.8/test/testcondition.cpp" $, 2360 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2361:
2362: check (@expr1073744076 "void f5(const char * const p) { if(*p=='x') if(*p=='y') {}}" ) ;
2363: $if $(@expr1073744077 $!@expr1073744078 $assertEquals $(@expr1073744079 "cppcheck-2.8/test/testcondition.cpp" $, 2363 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2364:
2365: check (@expr1073744082 "void f5(const char * const p) { if('x'==*p) if('y'==*p) {}}" ) ;
2366: $if $(@expr1073744083 $!@expr1073744084 $assertEquals $(@expr1073744085 "cppcheck-2.8/test/testcondition.cpp" $, 2366 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2367:
2368: check (@expr1073744088 "void f6(char * const p) { if(*p=='x') if(*p=='y') {}}" ) ;
2369: $if $(@expr1073744089 $!@expr1073744090 $assertEquals $(@expr1073744091 "cppcheck-2.8/test/testcondition.cpp" $, 2369 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2370:
2371: check (@expr1073744094 "void f7(const char * p) { if(*p=='x') if(*p=='y') {}}" ) ;
2372: $if $(@expr1073744095 $!@expr1073744096 $assertEquals $(@expr1073744097 "cppcheck-2.8/test/testcondition.cpp" $, 2372 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2373:
2374: check (@expr1073744100 "void f8(int i) { if(i==4) if(i==2) {}}" ) ;
2375: $if $(@expr1073744101 $!@expr1073744102 $assertEquals $(@expr1073744103 "cppcheck-2.8/test/testcondition.cpp" $, 2375 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2376:
2377: check (@expr1073744106 "void f9(int *p) { if (*p==4) if(*p==2) {}}" ) ;
2378: $if $(@expr1073744107 $!@expr1073744108 $assertEquals $(@expr1073744109 "cppcheck-2.8/test/testcondition.cpp" $, 2378 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2379:
2380: check (@expr1073744112 "void f10(int * const p) { if (*p==4) if(*p==2) {}}" ) ;
2381: $if $(@expr1073744113 $!@expr1073744114 $assertEquals $(@expr1073744115 "cppcheck-2.8/test/testcondition.cpp" $, 2381 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2382:
2383: check (@expr1073744118 "void f11(const int *p) { if (*p==4) if(*p==2) {}}" ) ;
2384: $if $(@expr1073744119 $!@expr1073744120 $assertEquals $(@expr1073744121 "cppcheck-2.8/test/testcondition.cpp" $, 2384 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2385:
2386: check (@expr1073744124 "void f12(const int * const p) { if (*p==4) if(*p==2) {}}" ) ;
2387: $if $(@expr1073744125 $!@expr1073744126 $assertEquals $(@expr1073744127 "cppcheck-2.8/test/testcondition.cpp" $, 2387 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2388:
2389: check (@expr1073744130 "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==2) {}}"
2390:
2391:
2392:
2393: ) ;
2394: $if $(@expr1073744131 $!@expr1073744132 $assertEquals $(@expr1073744133 "cppcheck-2.8/test/testcondition.cpp" $, 2394 $, "" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2395:
2396: check (@expr1073744136 "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==4) {}}"
2397:
2398:
2399:
2400: ) ;
2401: $if $(@expr1073744137 $!@expr1073744138 $assertEquals $(@expr1073744139 "cppcheck-2.8/test/testcondition.cpp" $, 2401 $, "" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2402:
2403: check (@expr1073744142 "void f3(char a, char b) { if(a==b) if(a==0) {}}" ) ;
2404: $if $(@expr1073744143 $!@expr1073744144 $assertEquals $(@expr1073744145 "cppcheck-2.8/test/testcondition.cpp" $, 2404 $, "" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2405:
2406: check (@expr1073744148 "void f(int x) { if (x == 1) if (x != 1) {} }" ) ;
2407: $if $(@expr1073744149 $!@expr1073744150 $assertEquals $(@expr1073744151 "cppcheck-2.8/test/testcondition.cpp" $, 2407 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2244 str (@expr2245 ) $) $) { $return ; }
2408: }
2409:
2410: void oppositeInnerConditionAnd ( ) {
2411: check (@expr1073744154 "void f(int x) {\n  if (a>3 && x > 100) {\n    if (x < 10) {}\n  }}"
2412:
2413:
2414:
2415: ) ;
2416: $if $(@expr1073744155 $!@expr1073744156 $assertEquals $(@expr1073744157 "cppcheck-2.8/test/testcondition.cpp" $, 2416 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2334 str (@expr2335 ) $) $) { $return ; }
2417:
2418: check (@expr1073744160 "void f(bool x, const int a, const int b) {\n        if(x && a < b)\n            if( x && a > b){}\n}\n"
2419:
2420:
2421: ) ;
2422: $if $(@expr1073744161 $!@expr1073744162 $assertEquals $(@expr1073744163 "cppcheck-2.8/test/testcondition.cpp" $, 2422 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2334 str (@expr2335 ) $) $) { $return ; }
2423: }
2424:
2425: void oppositeInnerConditionEmpty ( ) {
2426: check (@expr1073744166 "void f1(const std::string &s) { if(s.size() > 42) if(s.empty()) {}}" ) ;
2427: $if $(@expr1073744167 $!@expr1073744168 $assertEquals $(@expr1073744169 "cppcheck-2.8/test/testcondition.cpp" $, 2427 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2428:
2429: check (@expr1073744172 "void f1(const std::string &s) { if(s.size() > 0) if(s.empty()) {}}" ) ;
2430: $if $(@expr1073744173 $!@expr1073744174 $assertEquals $(@expr1073744175 "cppcheck-2.8/test/testcondition.cpp" $, 2430 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2431:
2432: check (@expr1073744178 "void f1(const std::string &s) { if(s.size() < 0) if(s.empty()) {}} " ) ;
2433: $if $(@expr1073744179 $!@expr1073744180 $assertEquals $(@expr1073744181 "cppcheck-2.8/test/testcondition.cpp" $, 2433 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2434:
2435: check (@expr1073744184 "void f1(const std::string &s) { if(s.empty()) if(s.size() > 42) {}}" ) ;
2436: $if $(@expr1073744185 $!@expr1073744186 $assertEquals $(@expr1073744187 "cppcheck-2.8/test/testcondition.cpp" $, 2436 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2437:
2438: check (@expr1073744190 "template<class T> void f1(const T &s) { if(s.size() > 42) if(s.empty()) {}}" ) ;
2439: $if $(@expr1073744191 $!@expr1073744192 $assertEquals $(@expr1073744193 "cppcheck-2.8/test/testcondition.cpp" $, 2439 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2440:
2441: check (@expr1073744196 "void f2(const std::wstring &s) { if(s.empty()) if(s.size() > 42) {}}" ) ;
2442: $if $(@expr1073744197 $!@expr1073744198 $assertEquals $(@expr1073744199 "cppcheck-2.8/test/testcondition.cpp" $, 2442 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2443:
2444: check (@expr1073744202 "void f1(QString s) { if(s.isEmpty()) if(s.length() > 42) {}}" ) ;
2445: $if $(@expr1073744203 $!@expr1073744204 $assertEquals $(@expr1073744205 "cppcheck-2.8/test/testcondition.cpp" $, 2445 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2446:
2447: check (@expr1073744208 "void f1(const std::string &s, bool b) { if(s.empty() || ((s.size() == 1) && b)) {}}" ) ;
2448: $if $(@expr1073744209 $!@expr1073744210 $assertEquals $(@expr1073744211 "cppcheck-2.8/test/testcondition.cpp" $, 2448 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2449:
2450: check (@expr1073744214 "void f1(const std::string &x, const std::string &y) { if(x.size() > 42) if(y.empty()) {}}" ) ;
2451: $if $(@expr1073744215 $!@expr1073744216 $assertEquals $(@expr1073744217 "cppcheck-2.8/test/testcondition.cpp" $, 2451 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2452:
2453: check (@expr1073744220 "void f1(const std::string &x, const std::string &y) { if(y.empty()) if(x.size() > 42) {}}" ) ;
2454: $if $(@expr1073744221 $!@expr1073744222 $assertEquals $(@expr1073744223 "cppcheck-2.8/test/testcondition.cpp" $, 2454 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2455:
2456: check (@expr1073744226 "void f1(const std::string v[10]) { if(v[0].size() > 42) if(v[1].empty()) {}}" ) ;
2457: $if $(@expr1073744227 $!@expr1073744228 $assertEquals $(@expr1073744229 "cppcheck-2.8/test/testcondition.cpp" $, 2457 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2458:
2459: check (@expr1073744232 "void f1(const std::string &s) { if(s.size() <= 1) if(s.empty()) {}}" ) ;
2460: $if $(@expr1073744233 $!@expr1073744234 $assertEquals $(@expr1073744235 "cppcheck-2.8/test/testcondition.cpp" $, 2460 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2461:
2462: check (@expr1073744238 "void f1(const std::string &s) { if(s.size() <= 2) if(s.empty()) {}}" ) ;
2463: $if $(@expr1073744239 $!@expr1073744240 $assertEquals $(@expr1073744241 "cppcheck-2.8/test/testcondition.cpp" $, 2463 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2464:
2465: check (@expr1073744244 "void f1(const std::string &s) { if(s.size() < 2) if(s.empty()) {}}" ) ;
2466: $if $(@expr1073744245 $!@expr1073744246 $assertEquals $(@expr1073744247 "cppcheck-2.8/test/testcondition.cpp" $, 2466 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2467:
2468: check (@expr1073744250 "void f1(const std::string &s) { if(s.size() >= 0) if(s.empty()) {}} " ) ;
2469: $if $(@expr1073744251 $!@expr1073744252 $assertEquals $(@expr1073744253 "cppcheck-2.8/test/testcondition.cpp" $, 2469 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2470:
2471:
2472: check (@expr1073744256 "void f1(const std::string &s) { if(s.size() <= 0) if(s.empty()) {}}" ) ;
2473: $if $(@expr1073744257 $!@expr1073744258 $assertEquals $(@expr1073744259 "cppcheck-2.8/test/testcondition.cpp" $, 2473 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2474:
2475:
2476: check (@expr1073744262 "void f1(const std::string &s) { if(s.size() < 1) if(s.empty()) {}}" ) ;
2477: $if $(@expr1073744263 $!@expr1073744264 $assertEquals $(@expr1073744265 "cppcheck-2.8/test/testcondition.cpp" $, 2477 $, "" $, errout@var100 .@expr2346 str (@expr2347 ) $) $) { $return ; }
2478: }
2479:
2480: void oppositeInnerConditionFollowVar ( ) {
2481: check (@expr1073744268 "struct X {\n    void f() {\n        const int flag = get();\n        if (flag) {\n            bar();\n            if (!get()) {}\n        }\n    }\n    void bar();\n    int get() const;\n};"
2482:
|
2490:
2491: ) ;
2492: $if $(@expr1073744269 $!@expr1073744270 $assertEquals $(@expr1073744271 "cppcheck-2.8/test/testcondition.cpp" $, 2492 $, "" $, errout@var100 .@expr2448 str (@expr2449 ) $) $) { $return ; }
2493:
2494: check (@expr1073744274 "struct CD {\n    bool state;\n    void foo()  {\n        const bool flag = this->get();\n        if (flag) {\n            this->bar();\n            if (!this->get()) return;\n        }\n    }\n    bool get() const;\n    void bar();\n};\n"
2495:
|
2504:
2505: ) ;
2506: $if $(@expr1073744275 $!@expr1073744276 $assertEquals $(@expr1073744277 "cppcheck-2.8/test/testcondition.cpp" $, 2506 $, "" $, errout@var100 .@expr2448 str (@expr2449 ) $) $) { $return ; }
2507:
2508: check (@expr1073744280 "class C {\npublic:\n  bool f() const { return x > 0; }\n  void g();\n  int x = 0;\n};\n\nvoid C::g() {\n  bool b = f();\n  x += 1;\n  if (!b && f()) {}\n}"
2509:
|
2518:
2519: ) ;
2520: $if $(@expr1073744281 $!@expr1073744282 $assertEquals $(@expr1073744283 "cppcheck-2.8/test/testcondition.cpp" $, 2520 $, "" $, errout@var100 .@expr2448 str (@expr2449 ) $) $) { $return ; }
2521:
2522: check (@expr1073744286 "void f(double d) {\n    if (d != 0) {\n        int i = d;\n        if (i == 0) {}\n    }\n}\n"
2523:
|
2526:
2527: ) ;
2528: $if $(@expr1073744287 $!@expr1073744288 $assertEquals $(@expr1073744289 "cppcheck-2.8/test/testcondition.cpp" $, 2528 $, "" $, errout@var100 .@expr2448 str (@expr2449 ) $) $) { $return ; }
2529: }
2530:
2531: void identicalInnerCondition ( ) {
2532: check (@expr1073744292 "void f1(int a, int b) { if(a==b) if(a==b) {}}" ) ;
2533: $if $(@expr1073744293 $!@expr1073744294 $assertEquals $(@expr1073744295 "cppcheck-2.8/test/testcondition.cpp" $, 2533 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2534:
2535: check (@expr1073744298 "void f2(int a, int b) { if(a!=b) if(a!=b) {}}" ) ;
2536: $if $(@expr1073744299 $!@expr1073744300 $assertEquals $(@expr1073744301 "cppcheck-2.8/test/testcondition.cpp" $, 2536 $, "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2537:
2538:
2539: check (@expr1073744304 "void f(bool a, bool b) {\n  if(a && b) {\n     if(a) {}\n     else  {}\n  }\n}"
2540:
|
2543:
2544: ) ;
2545: $if $(@expr1073744305 $!@expr1073744306 $assertEquals $(@expr1073744307 "cppcheck-2.8/test/testcondition.cpp" $, 2545 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical inner 'if' condition is always true.\n" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2546:
2547: check (@expr1073744310 "bool f(int a, int b) {\n    if(a == b) { return a == b; }\n    return false;\n}"
2548:
2549:
2550: ) ;
2551: $if $(@expr1073744311 $!@expr1073744312 $assertEquals $(@expr1073744313 "cppcheck-2.8/test/testcondition.cpp" $, 2551 $, "[test.cpp:2] -> [test.cpp:2]: (warning) Identical inner 'return' condition is always true.\n" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2552:
2553: check (@expr1073744316 "bool f(bool a) {\n    if(a) { return a; }\n    return false;\n}"
2554:
2555:
2556: ) ;
2557: $if $(@expr1073744317 $!@expr1073744318 $assertEquals $(@expr1073744319 "cppcheck-2.8/test/testcondition.cpp" $, 2557 $, "" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2558:
2559: check (@expr1073744322 "int* f(int* a, int * b) {\n    if(a) { return a; }\n    return b;\n}"
2560:
2561:
2562: ) ;
2563: $if $(@expr1073744323 $!@expr1073744324 $assertEquals $(@expr1073744325 "cppcheck-2.8/test/testcondition.cpp" $, 2563 $, "" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2564:
2565: check (@expr1073744328 "int* f(std::shared_ptr<int> a, std::shared_ptr<int> b) {\n    if(a.get()) { return a.get(); }\n    return b.get();\n}"
2566:
2567:
2568: ) ;
2569: $if $(@expr1073744329 $!@expr1073744330 $assertEquals $(@expr1073744331 "cppcheck-2.8/test/testcondition.cpp" $, 2569 $, "" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2570:
2571: check (@expr1073744334 "struct A { int * x; };\nint* f(A a, int * b) {\n    if(a.x) { return a.x; }\n    return b;\n}"
2572:
2573:
2574:
2575: ) ;
2576: $if $(@expr1073744335 $!@expr1073744336 $assertEquals $(@expr1073744337 "cppcheck-2.8/test/testcondition.cpp" $, 2576 $, "" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2577:
2578: check (@expr1073744340 "void f() {\n    uint32_t value;\n    get_value(&value);\n    int opt_function_capable = (value >> 28) & 1;\n    if (opt_function_capable) {\n        value = 0;\n        get_value (&value);\n        if ((value >> 28) & 1) {}\n    }\n}"
2579:
|
2586:
2587: ) ;
2588: $if $(@expr1073744341 $!@expr1073744342 $assertEquals $(@expr1073744343 "cppcheck-2.8/test/testcondition.cpp" $, 2588 $, "" $, errout@var100 .@expr2472 str (@expr2473 ) $) $) { $return ; }
2589: }
2590:
2591: void identicalConditionAfterEarlyExit ( ) {
2592: check (@expr1073744346 "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100) {}\n}"
2593:
2594:
2595: ) ;
2596: $if $(@expr1073744347 $!@expr1073744348 $assertEquals $(@expr1073744349 "cppcheck-2.8/test/testcondition.cpp" $, 2596 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2597:
2598: check (@expr1073744352 "bool f(int x) {\n  if (x > 100) { return false; }\n  return x > 100;\n}"
2599:
2600:
2601: ) ;
2602: $if $(@expr1073744353 $!@expr1073744354 $assertEquals $(@expr1073744355 "cppcheck-2.8/test/testcondition.cpp" $, 2602 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition and return expression 'x>100', return value is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2603:
2604: check (@expr1073744358 "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 || y > 100) {}\n}"
2605:
2606:
2607: ) ;
2608: $if $(@expr1073744359 $!@expr1073744360 $assertEquals $(@expr1073744361 "cppcheck-2.8/test/testcondition.cpp" $, 2608 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2609:
2610: check (@expr1073744364 "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 && y > 100) {}\n}"
2611:
2612:
2613: ) ;
2614: $if $(@expr1073744365 $!@expr1073744366 $assertEquals $(@expr1073744367 "cppcheck-2.8/test/testcondition.cpp" $, 2614 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2615:
2616: check (@expr1073744370 "void f(int x) {\n  if (x > 100) { return; }\n  if (abc) {}\n  if (x > 100) {}\n}"
2617:
2618:
2619:
2620: ) ;
2621: $if $(@expr1073744371 $!@expr1073744372 $assertEquals $(@expr1073744373 "cppcheck-2.8/test/testcondition.cpp" $, 2621 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2622:
2623: check (@expr1073744376 "void f(int x) {\n  if (x > 100) { return; }\n  while (abc) { y = x; }\n  if (x > 100) {}\n}"
2624:
2625:
2626:
2627: ) ;
2628: $if $(@expr1073744377 $!@expr1073744378 $assertEquals $(@expr1073744379 "cppcheck-2.8/test/testcondition.cpp" $, 2628 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2629:
2630: check (@expr1073744382 "void f(int x) {\n  if (x > 100) { return; }\n  X(do);\n  if (x > 100) {}\n}"
2631:
2632:
2633:
2634: ) ;
2635:
2636: $if $(@expr1073744383 $!@expr1073744384 $assertEquals $(@expr1073744385 "cppcheck-2.8/test/testcondition.cpp" $, 2636 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x>100' is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2637:
2638: check (@expr1073744388 "void f(const int *i) {\n  if (!i) return;\n  if (!num1tok) { *num1 = *num2; }\n  if (!i) {}\n}"
2639:
2640:
2641:
2642: ) ;
2643: $if $(@expr1073744389 $!@expr1073744390 $assertEquals $(@expr1073744391 "cppcheck-2.8/test/testcondition.cpp" $, 2643 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition '!i', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2644:
2645: check (@expr1073744394 "void C::f(Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}"
2646:
|
2649:
2650: ) ;
2651: $if $(@expr1073744395 $!@expr1073744396 $assertEquals $(@expr1073744397 "cppcheck-2.8/test/testcondition.cpp" $, 2651 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2652:
2653: check (@expr1073744400 "struct C { void f(const Tree &coreTree); };\nvoid C::f(const Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}"
2654:
|
2658:
2659: ) ;
2660: $if $(@expr1073744401 $!@expr1073744402 $assertEquals $(@expr1073744403 "cppcheck-2.8/test/testcondition.cpp" $, 2660 $, "[test.cpp:3] -> [test.cpp:6]: (warning) Identical condition '!coreTree.build()', second condition is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2661:
2662: check (@expr1073744406 "void f(int x) {\n  switch(type) {\n  case 1:\n    if (x == 0) return 1;\n    else return 2;\n  case 2:\n    if (x == 0) return 3;\n    else return 4;\n  }\n  return 0;\n}"
2663:
|
2671:
2672: ) ;
2673: $if $(@expr1073744407 $!@expr1073744408 $assertEquals $(@expr1073744409 "cppcheck-2.8/test/testcondition.cpp" $, 2673 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2674:
2675: check (@expr1073744412 "static int failed = 0;\nvoid f() {\n  if (failed) return;\n  checkBuffer();\n  if (failed) {}\n}"
2676:
|
2679:
2680: ) ;
2681: $if $(@expr1073744413 $!@expr1073744414 $assertEquals $(@expr1073744415 "cppcheck-2.8/test/testcondition.cpp" $, 2681 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2682:
2683:
2684: check (@expr1073744418 "void f(const uint32_t *section, int32_t  start) {\n  if(10<=section[start]) { return; }\n  if(++start<100 && 10<=section[start]) { }\n}"
2685:
2686:
2687: ) ;
2688: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testcondition.cpp" $, 2688 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2689:
2690:
2691: check (@expr1073744424 "void readNCBITree(std::istream &in) {\n  char ch;\n  in >> ch;\n  if (ch != '|') return;\n  in >> ch;\n  if (ch != '|') {}\n}"
2692:
|
2696:
2697: ) ;
2698: $if $(@expr1073744425 $!@expr1073744426 $assertEquals $(@expr1073744427 "cppcheck-2.8/test/testcondition.cpp" $, 2698 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2699:
2700:
2701: check (@expr1073744430 "struct A {\n    void f() {\n        if (this->FileIndex >= 0) return;\n        this->FileIndex = 1 ;\n        if (this->FileIndex < 0) return;\n    }\n    int FileIndex;\n};"
2702:
|
2707:
2708: ) ;
2709: $if $(@expr1073744431 $!@expr1073744432 $assertEquals $(@expr1073744433 "cppcheck-2.8/test/testcondition.cpp" $, 2709 $, "[test.cpp:5]: (style) Condition 'this->FileIndex<0' is always false\n" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2710:
2711:
2712: check (@expr1073744436 "short Do() {\n    short ret = bar1();\n    if ( ret )\n        return ret;\n#ifdef FEATURE\n    ret = bar2();\n#endif\n    return ret;\n}"
2713:
|
2719:
2720: ) ;
2721: $if $(@expr1073744437 $!@expr1073744438 $assertEquals $(@expr1073744439 "cppcheck-2.8/test/testcondition.cpp" $, 2721 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2722:
2723:
2724: check (@expr1073744442 "int f() {\n    int i = 0;\n    auto f = [&](bool b) { if (b) ++i; };\n    if (i) return i;\n    f(true);\n    if (i) return i;\n    return 0;\n}\n"
2725:
|
2730:
2731: ) ;
2732: $if $(@expr1073744443 $!@expr1073744444 $assertEquals $(@expr1073744445 "cppcheck-2.8/test/testcondition.cpp" $, 2732 $, "" $, errout@var100 .@expr2526 str (@expr2527 ) $) $) { $return ; }
2733: }
2734:
2735: void innerConditionModified ( ) {
2736: check (@expr1073744448 "void f(int x, int y) {\n  if (x == 0) {\n    x += y;\n    if (x == 0) {}\n  }\n}"
2737:
|
2740:
2741: ) ;
2742: $if $(@expr1073744449 $!@expr1073744450 $assertEquals $(@expr1073744451 "cppcheck-2.8/test/testcondition.cpp" $, 2742 $, "" $, errout@var100 .@expr2628 str (@expr2629 ) $) $) { $return ; }
2743:
2744: check (@expr1073744454 "void f(int x) {\n  if (x == 0) {\n    x += y;\n    if (x == 1) {}\n  }\n}"
2745:
|
2748:
2749: ) ;
2750: $if $(@expr1073744455 $!@expr1073744456 $assertEquals $(@expr1073744457 "cppcheck-2.8/test/testcondition.cpp" $, 2750 $, "" $, errout@var100 .@expr2628 str (@expr2629 ) $) $) { $return ; }
2751:
2752: check (@expr1073744460 "void f(int * x, int * y) {\n  if (x[*y] == 0) {\n    (*y)++;\n    if (x[*y] == 0) {}\n  }\n}"
2753:
|
2756:
2757: ) ;
2758: $if $(@expr1073744461 $!@expr1073744462 $assertEquals $(@expr1073744463 "cppcheck-2.8/test/testcondition.cpp" $, 2758 $, "" $, errout@var100 .@expr2628 str (@expr2629 ) $) $) { $return ; }
2759: }
2760:
2761:
2762: void clarifyCondition1 ( ) {
2763: check (@expr1073744466 "void f() {\n    if (x = b() < 0) {}\n}"
2764:
2765: ) ;
2766: $if $(@expr1073744467 $!@expr1073744468 $assertEquals $(@expr1073744469 "cppcheck-2.8/test/testcondition.cpp" $, 2766 $, "[test.cpp:2]: (style) Suspicious condition (assignment + comparison); Clarify expression with parentheses.\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2767:
2768: check (@expr1073744472 "void f(int i) {\n    for (i = 0; i < 10; i++) {}\n}"
2769:
2770: ) ;
2771: $if $(@expr1073744473 $!@expr1073744474 $assertEquals $(@expr1073744475 "cppcheck-2.8/test/testcondition.cpp" $, 2771 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2772:
2773: check (@expr1073744478 "void f() {\n    x = a<int>(); if (x) {}\n}"
2774:
2775: ) ;
2776: $if $(@expr1073744479 $!@expr1073744480 $assertEquals $(@expr1073744481 "cppcheck-2.8/test/testcondition.cpp" $, 2776 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2777:
2778: check (@expr1073744484 "void f() {\n    if (x = b < 0 ? 1 : 2) {}\n}"
2779:
2780: ) ;
2781: $if $(@expr1073744485 $!@expr1073744486 $assertEquals $(@expr1073744487 "cppcheck-2.8/test/testcondition.cpp" $, 2781 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2782:
2783: check (@expr1073744490 "void f() {\n    int y = rand(), z = rand();\n    if (y || (!y && z));\n}"
2784:
2785:
2786: ) ;
2787: $if $(@expr1073744491 $!@expr1073744492 $assertEquals $(@expr1073744493 "cppcheck-2.8/test/testcondition.cpp" $, 2787 $, "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2788:
2789: check (@expr1073744496 "void f() {\n    int y = rand(), z = rand();\n    if (y || !y && z);\n}"
2790:
2791:
2792: ) ;
2793: $if $(@expr1073744497 $!@expr1073744498 $assertEquals $(@expr1073744499 "cppcheck-2.8/test/testcondition.cpp" $, 2793 $, "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2794:
2795: check (@expr1073744502 "void f() {\n    if (!a || a && b) {}\n}"
2796:
2797: ) ;
2798: $if $(@expr1073744503 $!@expr1073744504 $assertEquals $(@expr1073744505 "cppcheck-2.8/test/testcondition.cpp" $, 2798 $, "[test.cpp:2]: (style) Redundant condition: a. '!a || (a && b)' is equivalent to '!a || b'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2799:
2800:
2801: check (@expr1073744508 "void f(const Token *tok) {\n    if (!tok->next()->function() ||\n        (tok->next()->function() && tok->next()->function()->isConstructor()));\n}"
2802:
2803:
2804: ) ;
2805: $if $(@expr1073744509 $!@expr1073744510 $assertEquals $(@expr1073744511 "cppcheck-2.8/test/testcondition.cpp" $, 2805 $, "[test.cpp:2]: (style) Redundant condition: tok->next()->function(). '!A || (A && B)' is equivalent to '!A || B'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2806:
2807: check (@expr1073744514 "void f() {\n    if (!tok->next()->function() ||\n        (!tok->next()->function() && tok->next()->function()->isConstructor()));\n}"
2808:
2809:
2810: ) ;
2811: $if $(@expr1073744515 $!@expr1073744516 $assertEquals $(@expr1073744517 "cppcheck-2.8/test/testcondition.cpp" $, 2811 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2812:
2813: check (@expr1073744520 "void f() {\n    if (!tok->next()->function() ||\n        (!tok2->next()->function() && tok->next()->function()->isConstructor()));\n}"
2814:
2815:
2816: ) ;
2817: $if $(@expr1073744521 $!@expr1073744522 $assertEquals $(@expr1073744523 "cppcheck-2.8/test/testcondition.cpp" $, 2817 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2818:
2819: check (@expr1073744526 "void f(const Token *tok) {\n    if (!tok->next(1)->function(1) ||\n        (tok->next(1)->function(1) && tok->next(1)->function(1)->isConstructor()));\n}"
2820:
2821:
2822: ) ;
2823: $if $(@expr1073744527 $!@expr1073744528 $assertEquals $(@expr1073744529 "cppcheck-2.8/test/testcondition.cpp" $, 2823 $, "[test.cpp:2]: (style) Redundant condition: tok->next(1)->function(1). '!A || (A && B)' is equivalent to '!A || B'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2824:
2825: check (@expr1073744532 "void f() {\n    if (!tok->next()->function(1) ||\n        (tok->next()->function(2) && tok->next()->function()->isConstructor()));\n}"
2826:
2827:
2828: ) ;
2829: $if $(@expr1073744533 $!@expr1073744534 $assertEquals $(@expr1073744535 "cppcheck-2.8/test/testcondition.cpp" $, 2829 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2830:
2831: check (@expr1073744538 "void f() {\n   int y = rand(), z = rand();\n   if (y==0 || y!=0 && z);\n}"
2832:
2833:
2834: ) ;
2835: $if $(@expr1073744539 $!@expr1073744540 $assertEquals $(@expr1073744541 "cppcheck-2.8/test/testcondition.cpp" $, 2835 $, "[test.cpp:3]: (style) Redundant condition: y!=0. 'y==0 || (y!=0 && z)' is equivalent to 'y==0 || z'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2836:
2837: check (@expr1073744544 "void f() {\n  if (x>0 || (x<0 && y)) {}\n}"
2838:
2839: ) ;
2840: $if $(@expr1073744545 $!@expr1073744546 $assertEquals $(@expr1073744547 "cppcheck-2.8/test/testcondition.cpp" $, 2840 $, "" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2841:
2842:
2843: check (@expr1073744550 "void f() {\n  if (!dead || (dead && (*it).ticks > 0)) {}\n}"
2844:
2845: ) ;
2846: $if $(@expr1073744551 $!@expr1073744552 $assertEquals $(@expr1073744553 "cppcheck-2.8/test/testcondition.cpp" $, 2846 $, "[test.cpp:2]: (style) Redundant condition: dead. '!dead || (dead && (*it).ticks>0)' is equivalent to '!dead || (*it).ticks>0'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2847:
2848: check (@expr1073744556 "void f() {\n  if (!x || (x && (2>(y-1)))) {}\n}"
2849:
2850: ) ;
2851: $if $(@expr1073744557 $!@expr1073744558 $assertEquals $(@expr1073744559 "cppcheck-2.8/test/testcondition.cpp" $, 2851 $, "[test.cpp:2]: (style) Redundant condition: x. '!x || (x && 2>(y-1))' is equivalent to '!x || 2>(y-1)'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2852:
2853: check (@expr1073744562 "void f(bool a, bool b) {\n    if (a || (a && b)) {}\n}"
2854:
2855: ) ;
2856: $if $(@expr1073744563 $!@expr1073744564 $assertEquals $(@expr1073744565 "cppcheck-2.8/test/testcondition.cpp" $, 2856 $, "[test.cpp:2]: (style) Redundant condition: a. 'a || (a && b)' is equivalent to 'a'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2857:
2858: check (@expr1073744568 "void f(bool a, bool b) {\n    if (a && (a || b)) {}\n}"
2859:
2860: ) ;
2861: $if $(@expr1073744569 $!@expr1073744570 $assertEquals $(@expr1073744571 "cppcheck-2.8/test/testcondition.cpp" $, 2861 $, "[test.cpp:2]: (style) Redundant condition: a. 'a && (a || b)' is equivalent to 'a'\n" $, errout@var100 .@expr2646 str (@expr2647 ) $) $) { $return ; }
2862: }
2863:
2864:
2865: void clarifyCondition2 ( ) {
2866: check (@expr1073744574 "void f() {\n    if (x & 3 == 2) {}\n}"
2867:
2868: ) ;
2869: $if $(@expr1073744575 $!@expr1073744576 $assertEquals $(@expr1073744577 "cppcheck-2.8/test/testcondition.cpp" $, 2869 $, "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n[test.cpp:2]: (style) Condition 'x&3==2' is always false\n" $, errout@var100 .@expr2754 str (@expr2755 ) $) $) { $return
2870:
2871: ; }
2872:
2873: check (@expr1073744580 "void f() {\n    if (a & fred1.x == fred2.y) {}\n}"
2874:
2875: ) ;
2876: $if $(@expr1073744581 $!@expr1073744582 $assertEquals $(@expr1073744583 "cppcheck-2.8/test/testcondition.cpp" $, 2876 $, "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" $, errout@var100 .@expr2754 str (@expr2755 ) $) $) { $return
2877:
2878: ; }
2879: }
2880:
2881:
2882: void clarifyCondition3 ( ) {
2883: check (@expr1073744586 "void f(int w) {\n    if(!w & 0x8000) {}\n}"
2884:
2885: ) ;
2886: $if $(@expr1073744587 $!@expr1073744588 $assertEquals $(@expr1073744589 "cppcheck-2.8/test/testcondition.cpp" $, 2886 $, "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2887:
2888: check (@expr1073744592 "void f(int w) {\n    if((!w) & 0x8000) {}\n}"
2889:
2890: ) ;
2891: $if $(@expr1073744593 $!@expr1073744594 $assertEquals $(@expr1073744595 "cppcheck-2.8/test/testcondition.cpp" $, 2891 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2892:
2893: check (@expr1073744598 "void f() {\n    if (x == foo() & 2) {}\n}"
2894:
2895: ) ;
2896: $if $(@expr1073744599 $!@expr1073744600 $assertEquals $(@expr1073744601 "cppcheck-2.8/test/testcondition.cpp" $, 2896 $, "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2897:
2898: check (@expr1073744604 "void f() {\n    if (2 & x == foo()) {}\n}"
2899:
2900: ) ;
2901: $if $(@expr1073744605 $!@expr1073744606 $assertEquals $(@expr1073744607 "cppcheck-2.8/test/testcondition.cpp" $, 2901 $, "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2902:
2903: check (@expr1073744610 "void f() {\n    if (2 & (x == foo())) {}\n}"
2904:
2905: ) ;
2906: $if $(@expr1073744611 $!@expr1073744612 $assertEquals $(@expr1073744613 "cppcheck-2.8/test/testcondition.cpp" $, 2906 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2907:
2908: check (@expr1073744616 "void f(std::list<int> &ints) { }" ) ;
2909: $if $(@expr1073744617 $!@expr1073744618 $assertEquals $(@expr1073744619 "cppcheck-2.8/test/testcondition.cpp" $, 2909 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2910:
2911: check (@expr1073744622 "void f() { A<x &> a; }" ) ;
2912: $if $(@expr1073744623 $!@expr1073744624 $assertEquals $(@expr1073744625 "cppcheck-2.8/test/testcondition.cpp" $, 2912 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2913:
2914: check (@expr1073744628 "void f() { a(x<y|z,0); }" , "test.c" ) ;
2915: $if $(@expr1073744629 $!@expr1073744630 $assertEquals $(@expr1073744631 "cppcheck-2.8/test/testcondition.cpp" $, 2915 $, "[test.c:1]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2916:
2917: check (@expr1073744634 "class A<B&,C>;" , "test.cpp" ) ;
2918: $if $(@expr1073744635 $!@expr1073744636 $assertEquals $(@expr1073744637 "cppcheck-2.8/test/testcondition.cpp" $, 2918 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2919:
2920: check (@expr1073744640 "void f() {\n    if (result != (char *)&inline_result) { }\n}"
2921:
2922: ) ;
2923: $if $(@expr1073744641 $!@expr1073744642 $assertEquals $(@expr1073744643 "cppcheck-2.8/test/testcondition.cpp" $, 2923 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2924:
2925:
2926: check (@expr1073744646 "void f(bool a, bool b) {\n    C & a & b;\n}"
2927:
2928: ) ;
2929: $if $(@expr1073744647 $!@expr1073744648 $assertEquals $(@expr1073744649 "cppcheck-2.8/test/testcondition.cpp" $, 2929 $, "" $, errout@var100 .@expr2766 str (@expr2767 ) $) $) { $return ; }
2930: }
2931:
2932: void clarifyCondition4 ( ) {
2933: check (@expr1073744652 "typedef double SomeType;\ntypedef std::pair<std::string,SomeType> PairType;\nstruct S\n{\n     bool operator()\n         ( PairType const & left\n         , PairType const & right) const\n     {\n         return left.first < right.first;\n     }\n}"
2934:
|
2942:
2943: ) ;
2944: $if $(@expr1073744653 $!@expr1073744654 $assertEquals $(@expr1073744655 "cppcheck-2.8/test/testcondition.cpp" $, 2944 $, "" $, errout@var100 .@expr1073744656 str (@expr1073744657 ) $) $) { $return ; }
2945: }
2946:
2947: void clarifyCondition5 ( ) {
2948: check (@expr1073744658 "template<bool B> struct CWinTraits;\nCWinTraits<WS_CHILD|WS_VISIBLE>::GetWndStyle(0);"
2949: ) ;
2950: $if $(@expr1073744659 $!@expr1073744660 $assertEquals $(@expr1073744661 "cppcheck-2.8/test/testcondition.cpp" $, 2950 $, "" $, errout@var100 .@expr1073744662 str (@expr1073744663 ) $) $) { $return ; }
2951: }
2952:
2953: void clarifyCondition6 ( ) {
2954: check (@expr1073744664 "template<class Y>\nSharedPtr& operator=( SharedPtr<Y> const & r ) {\n    px = r.px;\n    return *this;\n}"
2955:
2956:
2957:
2958: ) ;
2959: $if $(@expr1073744665 $!@expr1073744666 $assertEquals $(@expr1073744667 "cppcheck-2.8/test/testcondition.cpp" $, 2959 $, "" $, errout@var100 .@expr1073744668 str (@expr1073744669 ) $) $) { $return ; }
2960: }
2961:
2962: void clarifyCondition7 ( ) {
2963:
2964: check (@expr1073744670 "void f(bool error) {\n    bool & withoutSideEffects=found.first->second;\n    execute(secondExpression, &programMemory, &result, &error);\n}"
2965:
2966:
2967: ) ;
2968: $if $(@expr1073744671 $!@expr1073744672 $assertEquals $(@expr1073744673 "cppcheck-2.8/test/testcondition.cpp" $, 2968 $, "" $, errout@var100 .@expr1073744674 str (@expr1073744675 ) $) $) { $return ; }
2969: }
2970:
2971: void clarifyCondition8 ( ) {
2972:
2973:
2974: check (@expr1073744676 "bool a();\nbool f(bool b) {\n    return (a() & b);\n}"
2975:
2976:
2977: ) ;
2978: $if $(@expr1073744677 $!@expr1073744678 $assertEquals $(@expr1073744679 "cppcheck-2.8/test/testcondition.cpp" $, 2978 $, "" $, errout@var100 .@expr2856 str (@expr2857 ) $) $) { $return ; }
2979:
2980: check (@expr1073744682 "bool f(bool *a, bool b) {\n    return (a[10] & b);\n}"
2981:
2982: ) ;
2983: $if $(@expr1073744683 $!@expr1073744684 $assertEquals $(@expr1073744685 "cppcheck-2.8/test/testcondition.cpp" $, 2983 $, "" $, errout@var100 .@expr2856 str (@expr2857 ) $) $) { $return ; }
2984:
2985: check (@expr1073744688 "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (a.a & b);\n}"
2986:
2987:
2988: ) ;
2989: $if $(@expr1073744689 $!@expr1073744690 $assertEquals $(@expr1073744691 "cppcheck-2.8/test/testcondition.cpp" $, 2989 $, "" $, errout@var100 .@expr2856 str (@expr2857 ) $) $) { $return ; }
2990:
2991: check (@expr1073744694 "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (A::a & b);\n}"
2992:
2993:
2994: ) ;
2995: $if $(@expr1073744695 $!@expr1073744696 $assertEquals $(@expr1073744697 "cppcheck-2.8/test/testcondition.cpp" $, 2995 $, "" $, errout@var100 .@expr2856 str (@expr2857 ) $) $) { $return ; }
2996: }
2997:
2998: void testBug5895 ( ) {
2999: check (@expr1073744700 "void png_parse(uint64_t init, int buf_size) {\n    if (init == 0x89504e470d0a1a0a || init == 0x8a4d4e470d0a1a0a)\n        ;\n}"
3000:
3001:
3002: ) ;
3003: $if $(@expr1073744701 $!@expr1073744702 $assertEquals $(@expr1073744703 "cppcheck-2.8/test/testcondition.cpp" $, 3003 $, "" $, errout@var100 .@expr1073744704 str (@expr1073744705 ) $) $) { $return ; }
3004: }
3005:
3006: void testBug5309 ( ) {
3007: check (@expr1073744706 "extern uint64_t value;\nvoid foo() {\n    if( ( value >= 0x7ff0000000000001ULL )\n            && ( value <= 0x7fffffffffffffffULL ) );\n}"
3008:
3009:
3010:
3011: ) ;
3012: $if $(@expr1073744707 $!@expr1073744708 $assertEquals $(@expr1073744709 "cppcheck-2.8/test/testcondition.cpp" $, 3012 $, "" $, errout@var100 .@expr1073744710 str (@expr1073744711 ) $) $) { $return ; }
3013: }
3014:
3015: void alwaysTrue ( ) {
3016:
3017: check (@expr1073744712 "void f(const struct S *s) {\n  int x1 = s->x;\n  int x2 = s->x;\n  if (x1 == 10 && x2 == 10) {}\n}"
3018:
3019:
3020:
3021: ) ;
3022: $if $(@expr1073744713 $!@expr1073744714 $assertEquals $(@expr1073744715 "cppcheck-2.8/test/testcondition.cpp" $, 3022 $, "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'x2==10' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3023:
3024: check (@expr1073744718 "void f ()\n{\n    int a;\n    int b = 0;\n    int ret;\n \n    a = rand();\n    while (((0 < a) && (a < 2)) && ((8 < a) && (a < 10))) \n    {\n        b += a;\n        a ++;\n    }\n    ret = b;\n}"
3025:
|
3036:
3037: ) ;
3038: $if $(@expr1073744719 $!@expr1073744720 $assertEquals $(@expr1073744721 "cppcheck-2.8/test/testcondition.cpp" $, 3038 $, "[test.cpp:8] -> [test.cpp:8]: (style) Condition '8<a' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3039:
3040: check (@expr1073744724 "void f() {\n  int x = 0;\n  if (a) { return; }\n  if (!x) {}\n}"
3041:
3042:
3043:
3044: ) ;
3045: $if $(@expr1073744725 $!@expr1073744726 $assertEquals $(@expr1073744727 "cppcheck-2.8/test/testcondition.cpp" $, 3045 $, "[test.cpp:4]: (style) Condition '!x' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3046:
3047: check (@expr1073744730 "bool f(int x) {\n  if(x == 0) { x++; return x == 0; }\n  return false;\n}"
3048:
3049:
3050: ) ;
3051: $if $(@expr1073744731 $!@expr1073744732 $assertEquals $(@expr1073744733 "cppcheck-2.8/test/testcondition.cpp" $, 3051 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3052:
3053: check (@expr1073744736 "void f() {\n  int x = 0;\n  A(x++ == 1);\n  A(x++ == 2);\n}"
3054:
3055:
3056:
3057: ) ;
3058: $todoAssertEquals $(@expr1073744737 "cppcheck-2.8/test/testcondition.cpp" $, 3058 $, "function argument is always true? however is code really weird/suspicious?" $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) ;
3059:
3060: check (@expr1073744740 "bool foo(int bar) {\n  bool ret = false;\n  if (bar == 1)\n    return ret;\n  if (bar == 2)\n    ret = true;\n  return ret;\n}"
3061:
|
3066:
3067: ) ;
3068: $if $(@expr1073744741 $!@expr1073744742 $assertEquals $(@expr1073744743 "cppcheck-2.8/test/testcondition.cpp" $, 3068 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3069:
3070: check (@expr1073744746 "void f1(const std::string &s) { if(s.empty()) if(s.size() == 0) {}}" ) ;
3071: $if $(@expr1073744747 $!@expr1073744748 $assertEquals $(@expr1073744749 "cppcheck-2.8/test/testcondition.cpp" $, 3071 $, "[test.cpp:1] -> [test.cpp:1]: (style) Condition 's.size()==0' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3072:
3073: check (@expr1073744752 "void f() {\n   int buf[42];\n   if( buf != 0) {}\n}"
3074:
3075:
3076: ) ;
3077: $if $(@expr1073744753 $!@expr1073744754 $assertEquals $(@expr1073744755 "cppcheck-2.8/test/testcondition.cpp" $, 3077 $, "[test.cpp:3]: (style) Condition 'buf!=0' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3078:
3079: check (@expr1073744758 "void f() {\n   int buf[42];\n   if( !buf ) {}\n}"
3080:
3081:
3082: ) ;
3083: $if $(@expr1073744759 $!@expr1073744760 $assertEquals $(@expr1073744761 "cppcheck-2.8/test/testcondition.cpp" $, 3083 $, "[test.cpp:3]: (style) Condition '!buf' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3084:
3085: check (@expr1073744764 "void f() {\n   int buf[42];\n   bool b = buf;\n   if( b ) {}\n}"
3086:
3087:
3088:
3089: ) ;
3090: $if $(@expr1073744765 $!@expr1073744766 $assertEquals $(@expr1073744767 "cppcheck-2.8/test/testcondition.cpp" $, 3090 $, "[test.cpp:4]: (style) Condition 'b' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3091:
3092: check (@expr1073744770 "void f() {\n   int buf[42];\n   bool b = buf;\n   if( !b ) {}\n}"
3093:
3094:
3095:
3096: ) ;
3097: $if $(@expr1073744771 $!@expr1073744772 $assertEquals $(@expr1073744773 "cppcheck-2.8/test/testcondition.cpp" $, 3097 $, "[test.cpp:4]: (style) Condition '!b' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3098:
3099: check (@expr1073744776 "void f() {\n   int buf[42];\n   int * p = nullptr;\n   if( buf == p ) {}\n}"
3100:
3101:
3102:
3103: ) ;
3104: $if $(@expr1073744777 $!@expr1073744778 $assertEquals $(@expr1073744779 "cppcheck-2.8/test/testcondition.cpp" $, 3104 $, "[test.cpp:4]: (style) Condition 'buf==p' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3105:
3106: check (@expr1073744782 "void f(bool x) {\n   int buf[42];\n   if( buf || x ) {}\n}"
3107:
3108:
3109: ) ;
3110: $if $(@expr1073744783 $!@expr1073744784 $assertEquals $(@expr1073744785 "cppcheck-2.8/test/testcondition.cpp" $, 3110 $, "[test.cpp:3]: (style) Condition 'buf' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3111:
3112: check (@expr1073744788 "void f(int * p) {\n   int buf[42];\n   if( buf == p ) {}\n}"
3113:
3114:
3115: ) ;
3116: $if $(@expr1073744789 $!@expr1073744790 $assertEquals $(@expr1073744791 "cppcheck-2.8/test/testcondition.cpp" $, 3116 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3117:
3118: check (@expr1073744794 "void f() {\n   int buf[42];\n   int p[42];\n   if( buf == p ) {}\n}"
3119:
3120:
3121:
3122: ) ;
3123: $if $(@expr1073744795 $!@expr1073744796 $assertEquals $(@expr1073744797 "cppcheck-2.8/test/testcondition.cpp" $, 3123 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3124:
3125: check (@expr1073744800 "void f() {\n   int buf[42];\n   if( buf == 1) {}\n}"
3126:
3127:
3128: ) ;
3129: $if $(@expr1073744801 $!@expr1073744802 $assertEquals $(@expr1073744803 "cppcheck-2.8/test/testcondition.cpp" $, 3129 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3130:
3131:
3132: check (@expr1073744806 "#define NOT !\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (NOT x) {}\n}"
3133:
|
3136:
3137: ) ;
3138: $if $(@expr1073744807 $!@expr1073744808 $assertEquals $(@expr1073744809 "cppcheck-2.8/test/testcondition.cpp" $, 3138 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3139:
3140: check (@expr1073744812 "#define M  x != 0\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (M) {}\n}"
3141:
|
3144:
3145: ) ;
3146: $if $(@expr1073744813 $!@expr1073744814 $assertEquals $(@expr1073744815 "cppcheck-2.8/test/testcondition.cpp" $, 3146 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3147:
3148: check (@expr1073744818 "#define IF(X)  if (X && x())\nvoid f() {\n  IF(1) {}\n}"
3149:
3150:
3151: ) ;
3152: $if $(@expr1073744819 $!@expr1073744820 $assertEquals $(@expr1073744821 "cppcheck-2.8/test/testcondition.cpp" $, 3152 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3153:
3154:
3155: check (@expr1073744824 "void f() {\n  if (sizeof(char) != 123) {}\n  if (123 != sizeof(char)) {}\n}"
3156:
3157:
3158: ) ;
3159: $if $(@expr1073744825 $!@expr1073744826 $assertEquals $(@expr1073744827 "cppcheck-2.8/test/testcondition.cpp" $, 3159 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3160:
3161: check (@expr1073744830 "void f() {\n  int x = 123;\n  if (sizeof(char) != x) {}\n  if (x != sizeof(char)) {}\n}"
3162:
3163:
3164:
3165: ) ;
3166: $todoAssertEquals $(@expr1073744831 "cppcheck-2.8/test/testcondition.cpp" $, 3166 $, "[test.cpp:3]: (style) Condition 'sizeof(char)!=x' is always true\n[test.cpp:4]: (style) Condition 'x!=sizeof(char)' is always true\n" $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $)
3167: ;
3168:
3169:
3170:
3171: check (@expr1073744834 "void f() {\n  int x = 0;\n  assert(x == 0);\n}"
3172:
3173:
3174: ) ;
3175: $if $(@expr1073744835 $!@expr1073744836 $assertEquals $(@expr1073744837 "cppcheck-2.8/test/testcondition.cpp" $, 3175 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3176:
3177:
3178: check (@expr1073744840 "void f(bool b) {\n    if (b) {\n        if (bar(!b)) {}\n    }\n}"
3179:
3180:
3181:
3182: ) ;
3183: $if $(@expr1073744841 $!@expr1073744842 $assertEquals $(@expr1073744843 "cppcheck-2.8/test/testcondition.cpp" $, 3183 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3184:
3185:
3186:
3187: check (@expr1073744846 "void foo(int x) {\n    if (x<0)\n    {\n        assert(0 && \"bla\");\n        ASSERT(0 && \"bla\");\n        assert_foo(0 && \"bla\");\n        ASSERT_FOO(0 && \"bla\");\n        assert((int)(0==0));\n        assert((int)(0==0) && \"bla\");\n    }\n}"
3188:
|
3196:
3197: ) ;
3198: $if $(@expr1073744847 $!@expr1073744848 $assertEquals $(@expr1073744849 "cppcheck-2.8/test/testcondition.cpp" $, 3198 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3199:
3200:
3201: check (@expr1073744852 "void f() {\n  if('a'){}\n  if(L'b'){}\n  if(1 && 'c'){}\n  int x = 'd' ? 1 : 2;\n}"
3202:
|
3205:
3206: ) ;
3207: $if $(@expr1073744853 $!@expr1073744854 $assertEquals $(@expr1073744855 "cppcheck-2.8/test/testcondition.cpp" $, 3207 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3208:
3209:
3210: check (@expr1073744858 "void f(int i)\n{\n        if(i > 4)\n          for( int x = 0; i < 3; ++x){}\n}"
3211:
3212:
3213:
3214: ) ;
3215: $if $(@expr1073744859 $!@expr1073744860 $assertEquals $(@expr1073744861 "cppcheck-2.8/test/testcondition.cpp" $, 3215 $, "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'i<3' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3216:
3217:
3218: check (@expr1073744864 "void f() { if(true) {} }" ) ;
3219: $if $(@expr1073744865 $!@expr1073744866 $assertEquals $(@expr1073744867 "cppcheck-2.8/test/testcondition.cpp" $, 3219 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3220:
3221: check (@expr1073744870 "void f() { if(false) {} }" ) ;
3222: $if $(@expr1073744871 $!@expr1073744872 $assertEquals $(@expr1073744873 "cppcheck-2.8/test/testcondition.cpp" $, 3222 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3223:
3224: check (@expr1073744876 "void f() { if(!true) {} }" ) ;
3225: $if $(@expr1073744877 $!@expr1073744878 $assertEquals $(@expr1073744879 "cppcheck-2.8/test/testcondition.cpp" $, 3225 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3226:
3227: check (@expr1073744882 "void f() { if(!false) {} }" ) ;
3228: $if $(@expr1073744883 $!@expr1073744884 $assertEquals $(@expr1073744885 "cppcheck-2.8/test/testcondition.cpp" $, 3228 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3229:
3230: check (@expr1073744888 "void f() { if(0) {} }" ) ;
3231: $if $(@expr1073744889 $!@expr1073744890 $assertEquals $(@expr1073744891 "cppcheck-2.8/test/testcondition.cpp" $, 3231 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3232:
3233: check (@expr1073744894 "void f() { if(1) {} }" ) ;
3234: $if $(@expr1073744895 $!@expr1073744896 $assertEquals $(@expr1073744897 "cppcheck-2.8/test/testcondition.cpp" $, 3234 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3235:
3236: check (@expr1073744900 "void f(int i) {\n    bool b = false;\n    if (i == 0) b = true;\n    else if (!b && i == 1) {}\n    if (b)\n    {}\n}"
3237:
|
3241:
3242: ) ;
3243: $if $(@expr1073744901 $!@expr1073744902 $assertEquals $(@expr1073744903 "cppcheck-2.8/test/testcondition.cpp" $, 3243 $, "[test.cpp:4]: (style) Condition '!b' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3244:
3245: check (@expr1073744906 "bool f() { return nullptr; }" ) ;
3246: $if $(@expr1073744907 $!@expr1073744908 $assertEquals $(@expr1073744909 "cppcheck-2.8/test/testcondition.cpp" $, 3246 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3247:
3248: check (@expr1073744912 "enum E { A };\nbool f() { return A; }"
3249: ) ;
3250: $if $(@expr1073744913 $!@expr1073744914 $assertEquals $(@expr1073744915 "cppcheck-2.8/test/testcondition.cpp" $, 3250 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3251:
3252: check (@expr1073744918 "bool f() {\n    const int x = 0;\n    return x;\n}"
3253:
3254:
3255: ) ;
3256: $if $(@expr1073744919 $!@expr1073744920 $assertEquals $(@expr1073744921 "cppcheck-2.8/test/testcondition.cpp" $, 3256 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3257:
3258: check (@expr1073744924 "int f(void){return 1/abs(10);}" ) ;
3259: $if $(@expr1073744925 $!@expr1073744926 $assertEquals $(@expr1073744927 "cppcheck-2.8/test/testcondition.cpp" $, 3259 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3260:
3261: check (@expr1073744930 "bool f() {\n    int x = 0;\n    return x;\n}"
3262:
3263:
3264: ) ;
3265: $if $(@expr1073744931 $!@expr1073744932 $assertEquals $(@expr1073744933 "cppcheck-2.8/test/testcondition.cpp" $, 3265 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3266:
3267: check (@expr1073744936 "bool f() {\n    const int a = 50;\n    const int b = 52;\n    return a+b;\n}"
3268:
3269:
3270:
3271: ) ;
3272: $if $(@expr1073744937 $!@expr1073744938 $assertEquals $(@expr1073744939 "cppcheck-2.8/test/testcondition.cpp" $, 3272 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3273:
3274: check (@expr1073744942 "int f() {\n    int a = 50;\n    int b = 52;\n    a++;\n    b++;\n    return a+b;\n}"
3275:
|
3279:
3280: ) ;
3281: $if $(@expr1073744943 $!@expr1073744944 $assertEquals $(@expr1073744945 "cppcheck-2.8/test/testcondition.cpp" $, 3281 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3282:
3283: check (@expr1073744948 "bool& g();\nbool f() {\n    bool & b = g();\n    b = false;\n    return b;\n}"
3284:
|
3287:
3288: ) ;
3289: $if $(@expr1073744949 $!@expr1073744950 $assertEquals $(@expr1073744951 "cppcheck-2.8/test/testcondition.cpp" $, 3289 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3290:
3291: check (@expr1073744954 "struct A {\n    bool b;\n    bool f() {\n        b = false;\n        return b;\n    }\n};"
3292:
|
3296:
3297: ) ;
3298: $if $(@expr1073744955 $!@expr1073744956 $assertEquals $(@expr1073744957 "cppcheck-2.8/test/testcondition.cpp" $, 3298 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3299:
3300: check (@expr1073744960 "bool f(long maxtime) {\n  if (std::time(0) > maxtime)\n    return std::time(0) > maxtime;\n}"
3301:
3302:
3303: ) ;
3304: $if $(@expr1073744961 $!@expr1073744962 $assertEquals $(@expr1073744963 "cppcheck-2.8/test/testcondition.cpp" $, 3304 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3305:
3306: check (@expr1073744966 "void foo(double param) {\n  while(bar()) {\n    if (param<0.)\n       return;\n  }\n  if (param<0.)\n    return;\n}"
3307:
|
3312:
3313: ) ;
3314: $if $(@expr1073744967 $!@expr1073744968 $assertEquals $(@expr1073744969 "cppcheck-2.8/test/testcondition.cpp" $, 3314 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3315:
3316: check (@expr1073744972 "void foo(int i) {\n  if (i==42)\n  {\n    bar();\n  }\n  if (cond && (42==i))\n    return;\n}"
3317:
|
3322:
3323: ) ;
3324: $if $(@expr1073744973 $!@expr1073744974 $assertEquals $(@expr1073744975 "cppcheck-2.8/test/testcondition.cpp" $, 3324 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3325:
3326:
3327: check (@expr1073744978 "class a {\n  int b;\n  c(b);\n  void f() {\n    if (b) return;\n  }\n};"
3328:
|
3332:
3333: ) ;
3334: $if $(@expr1073744979 $!@expr1073744980 $assertEquals $(@expr1073744981 "cppcheck-2.8/test/testcondition.cpp" $, 3334 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3335:
3336: check (@expr1073744984 "void f(const char* x, const char* t) {\n    if (!(strcmp(x, y) == 0)) { return; }\n}"
3337:
3338: ) ;
3339: $if $(@expr1073744985 $!@expr1073744986 $assertEquals $(@expr1073744987 "cppcheck-2.8/test/testcondition.cpp" $, 3339 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3340:
3341: check (@expr1073744990 "void f(const int a[]){ if (a == 0){} }" ) ;
3342: $if $(@expr1073744991 $!@expr1073744992 $assertEquals $(@expr1073744993 "cppcheck-2.8/test/testcondition.cpp" $, 3342 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3343:
3344: check (@expr1073744996 "struct S {\n  bool operator<(const S&);\n};\nint main() {\n  S s;\n  bool c = s<s;\n  if (c) return 0;\n  else return 42;\n}"
3345:
|
3351:
3352: ) ;
3353: $if $(@expr1073744997 $!@expr1073744998 $assertEquals $(@expr1073744999 "cppcheck-2.8/test/testcondition.cpp" $, 3353 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3354:
3355: check (@expr1073745002 "long X::g(bool unknown, int& result) {\n    long ret = 0;\n    bool f = false;\n    f = f || unknown;\n    f ? result = 42 : ret = -1;\n    return ret;\n}"
3356:
|
3360:
3361: ) ;
3362: $if $(@expr1073745003 $!@expr1073745004 $assertEquals $(@expr1073745005 "cppcheck-2.8/test/testcondition.cpp" $, 3362 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3363:
3364: check (@expr1073745008 "int f(void *handle) {\n    if (!handle) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
3365:
3366:
3367:
3368: ) ;
3369: $if $(@expr1073745009 $!@expr1073745010 $assertEquals $(@expr1073745011 "cppcheck-2.8/test/testcondition.cpp" $, 3369 $, "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'handle' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3370:
3371: check (@expr1073745014 "int f(void *handle) {\n    if (handle == 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
3372:
3373:
3374:
3375: ) ;
3376: $if $(@expr1073745015 $!@expr1073745016 $assertEquals $(@expr1073745017 "cppcheck-2.8/test/testcondition.cpp" $, 3376 $, "[test.cpp:3]: (style) Condition 'handle' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3377:
3378: check (@expr1073745020 "int f(void *handle) {\n    if (handle != 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
3379:
3380:
3381:
3382: ) ;
3383: $if $(@expr1073745021 $!@expr1073745022 $assertEquals $(@expr1073745023 "cppcheck-2.8/test/testcondition.cpp" $, 3383 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'handle!=0', second condition is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3384:
3385: check (@expr1073745026 "void f(void* x, void* y) {\n    if (x == nullptr && y == nullptr)\n        return;\n    if (x == nullptr || y == nullptr)\n        return;\n}"
3386:
|
3389:
3390: ) ;
3391: $if $(@expr1073745027 $!@expr1073745028 $assertEquals $(@expr1073745029 "cppcheck-2.8/test/testcondition.cpp" $, 3391 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3392:
3393: check (@expr1073745032 "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n        if (a == b)\n            break;\n    }\n    if (a) {}\n}"
3394:
|
3400:
3401: ) ;
3402: $if $(@expr1073745033 $!@expr1073745034 $assertEquals $(@expr1073745035 "cppcheck-2.8/test/testcondition.cpp" $, 3402 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3403:
3404: check (@expr1073745038 "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n    }\n    if (a) {}\n}"
3405:
|
3409:
3410: ) ;
3411: $if $(@expr1073745039 $!@expr1073745040 $assertEquals $(@expr1073745041 "cppcheck-2.8/test/testcondition.cpp" $, 3411 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'a' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3412:
3413: check (@expr1073745044 "void f(int * x, bool b) {\n    if (!x && b) {}\n    else if (x) {}\n}"
3414:
3415:
3416: ) ;
3417: $if $(@expr1073745045 $!@expr1073745046 $assertEquals $(@expr1073745047 "cppcheck-2.8/test/testcondition.cpp" $, 3417 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3418:
3419: check (@expr1073745050 "void f() {\n    const std::string x=\"xyz\";\n    if(!x.empty()){}\n}"
3420:
3421:
3422: ) ;
3423: $if $(@expr1073745051 $!@expr1073745052 $assertEquals $(@expr1073745053 "cppcheck-2.8/test/testcondition.cpp" $, 3423 $, "[test.cpp:3]: (style) Condition '!x.empty()' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3424:
3425: check (@expr1073745056 "std::string g();\nvoid f() {\n    const std::string msg = g();\n    if(!msg.empty()){}\n}"
3426:
3427:
3428:
3429: ) ;
3430: $if $(@expr1073745057 $!@expr1073745058 $assertEquals $(@expr1073745059 "cppcheck-2.8/test/testcondition.cpp" $, 3430 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3431:
3432: check (@expr1073745062 "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        if(array){}\n    }\n}"
3433:
|
3437:
3438: ) ;
3439: $if $(@expr1073745063 $!@expr1073745064 $assertEquals $(@expr1073745065 "cppcheck-2.8/test/testcondition.cpp" $, 3439 $, "[test.cpp:5]: (style) Condition 'array' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3440:
3441: check (@expr1073745068 "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        else if(array){}\n    }\n}"
3442:
|
3446:
3447: ) ;
3448: $if $(@expr1073745069 $!@expr1073745070 $assertEquals $(@expr1073745071 "cppcheck-2.8/test/testcondition.cpp" $, 3448 $, "[test.cpp:5]: (style) Condition 'array' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3449:
3450:
3451: check (@expr1073745074 "int f() {\n    constexpr bool x = true;\n    if constexpr (x)\n        return 0;\n    else\n        return 1;\n}"
3452:
|
3456:
3457: ) ;
3458: $if $(@expr1073745075 $!@expr1073745076 $assertEquals $(@expr1073745077 "cppcheck-2.8/test/testcondition.cpp" $, 3458 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3459:
3460:
3461: check (@expr1073745080 "void f() {\n    const size_t a(8 * sizeof(short));\n    const size_t b(8 * sizeof(int));\n    if constexpr (a == 16 && b == 16) {}\n    else if constexpr (a == 16 && b == 32) {}\n}\n"
3462:
|
3465:
3466: ) ;
3467: $if $(@expr1073745081 $!@expr1073745082 $assertEquals $(@expr1073745083 "cppcheck-2.8/test/testcondition.cpp" $, 3467 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3468:
3469:
3470: check (@expr1073745086 "struct S {\n  int a;\n  int b;\n};\nvoid g(S s, bool& x);\nvoid f() {\n  bool x = false;\n  g({0, 1}, x);\n  if (x) {}\n}"
3471:
|
3478:
3479: ) ;
3480: $if $(@expr1073745087 $!@expr1073745088 $assertEquals $(@expr1073745089 "cppcheck-2.8/test/testcondition.cpp" $, 3480 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3481:
3482:
3483: check (@expr1073745092 "class A {};\nclass B : public A {};\nvoid f(A* x) {\n  if (!x)\n    return;\n  auto b = dynamic_cast<B*>(x);\n  if (b) {}\n}"
3484:
|
3489:
3490: ) ;
3491: $if $(@expr1073745093 $!@expr1073745094 $assertEquals $(@expr1073745095 "cppcheck-2.8/test/testcondition.cpp" $, 3491 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3492:
3493: check (@expr1073745098 "int foo() {\n    auto x = getX();\n    if (x == nullptr)\n        return 1;\n    auto y = dynamic_cast<Y*>(x)\n    if (y == nullptr)\n        return 2;\n    return 3;\n}\n"
3494:
|
3500:
3501: ) ;
3502: $if $(@expr1073745099 $!@expr1073745100 $assertEquals $(@expr1073745101 "cppcheck-2.8/test/testcondition.cpp" $, 3502 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3503:
3504:
3505: check (@expr1073745104 "bool g();\nvoid f(bool x) {\n    if (x) while(x) x = g();\n}"
3506:
3507:
3508: ) ;
3509: $if $(@expr1073745105 $!@expr1073745106 $assertEquals $(@expr1073745107 "cppcheck-2.8/test/testcondition.cpp" $, 3509 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3510:
3511:
3512: check (@expr1073745110 "void f(std::istringstream& iss) {\n   std::string x;\n   while (iss) {\n       iss >> x;\n       if (!iss) break;\n   }\n}"
3513:
|
3517:
3518: ) ;
3519: $if $(@expr1073745111 $!@expr1073745112 $assertEquals $(@expr1073745113 "cppcheck-2.8/test/testcondition.cpp" $, 3519 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3520:
3521:
3522: check (@expr1073745116 "struct A { void* g(); };\nvoid f() {\n    A a;\n    void* b = a.g();\n    if (!b) return;\n    void* c = a.g();\n    if (!c) return;\n    bool compare = c == b;\n}"
3523:
|
3529:
3530: ) ;
3531: $if $(@expr1073745117 $!@expr1073745118 $assertEquals $(@expr1073745119 "cppcheck-2.8/test/testcondition.cpp" $, 3531 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3532:
3533:
3534: check (@expr1073745122 "void f(char c) {\n    if (c == '.') {}\n    else if (isdigit(c) != 0) {}\n}"
3535:
3536:
3537: ) ;
3538: $if $(@expr1073745123 $!@expr1073745124 $assertEquals $(@expr1073745125 "cppcheck-2.8/test/testcondition.cpp" $, 3538 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3539:
3540:
3541: check (@expr1073745128 "int f(int x) {\n    const bool b = x < 42;\n    if(b) return b?0:-1;\n    return 42;\n}"
3542:
3543:
3544:
3545: ) ;
3546: $if $(@expr1073745129 $!@expr1073745130 $assertEquals $(@expr1073745131 "cppcheck-2.8/test/testcondition.cpp" $, 3546 $, "[test.cpp:3] -> [test.cpp:3]: (style) Condition 'b' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3547:
3548:
3549: check (@expr1073745134 "uint8_t g();\nvoid f() {\n    const uint8_t v = g();\n    if((v != 0x00)) {\n        if( (v & 0x01) == 0x00) {}\n    }\n}"
3550:
|
3554:
3555: ) ;
3556: $if $(@expr1073745135 $!@expr1073745136 $assertEquals $(@expr1073745137 "cppcheck-2.8/test/testcondition.cpp" $, 3556 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3557:
3558:
3559: check (@expr1073745140 "void f(long x) {\n    if (x <= 0L)\n        return;\n    if (x % 360L == 0)\n        return;\n}"
3560:
|
3563:
3564: ) ;
3565: $if $(@expr1073745141 $!@expr1073745142 $assertEquals $(@expr1073745143 "cppcheck-2.8/test/testcondition.cpp" $, 3565 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3566:
3567: check (@expr1073745146 "int f(int a, int b) {\n    static const int x = 10;\n    return x == 1 ? a : b;\n}"
3568:
3569:
3570: ) ;
3571: $if $(@expr1073745147 $!@expr1073745148 $assertEquals $(@expr1073745149 "cppcheck-2.8/test/testcondition.cpp" $, 3571 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3572:
3573: check (@expr1073745152 "const bool x = false;\nvoid f() {\n    if (x) {}\n}"
3574:
3575:
3576: ) ;
3577: $if $(@expr1073745153 $!@expr1073745154 $assertEquals $(@expr1073745155 "cppcheck-2.8/test/testcondition.cpp" $, 3577 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3578:
3579: check (@expr1073745158 "const bool x = false;\nvoid f() {\n    if (!x) {}\n}"
3580:
3581:
3582: ) ;
3583: $if $(@expr1073745159 $!@expr1073745160 $assertEquals $(@expr1073745161 "cppcheck-2.8/test/testcondition.cpp" $, 3583 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3584:
3585:
3586: check (@expr1073745164 "void f(int a) {\n    bool ok = false;\n    const char * r = nullptr;\n    do_something(&r);\n    if (r != nullptr)\n        ok = a != 0;\n    if (ok) {}\n}"
3587:
|
3592:
3593: ) ;
3594: $if $(@expr1073745165 $!@expr1073745166 $assertEquals $(@expr1073745167 "cppcheck-2.8/test/testcondition.cpp" $, 3594 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3595:
3596:
3597: check (@expr1073745170 "bool g();\nvoid f() {\n    bool b = false;\n    do {\n        do {\n            if (g())\n                break;\n            b = true;\n        } while(false);\n    } while(!b);\n}\n"
3598:
|
3606:
3607: ) ;
3608: $if $(@expr1073745171 $!@expr1073745172 $assertEquals $(@expr1073745173 "cppcheck-2.8/test/testcondition.cpp" $, 3608 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3609:
3610:
3611: check (@expr1073745176 "void f(const std::string &s) {\n    for (std::string::const_iterator it = s.begin(); it != s.end(); ++it) {\n        const unsigned char c = static_cast<unsigned char>(*it);\n        if (c == '0') {}\n        else if ((c == 'a' || c == 'A')\n                 || (c == 'b' || c == 'B')) {}\n        else {}\n    }\n}\n"
3612:
|
3618:
3619: ) ;
3620: $if $(@expr1073745177 $!@expr1073745178 $assertEquals $(@expr1073745179 "cppcheck-2.8/test/testcondition.cpp" $, 3620 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3621:
3622:
3623: check (@expr1073745182 "int main(int argc, char* argv[]) {\n  int foo = 0;\n  struct option options[] = {\n    {\"foo\", no_argument, &foo, \'f\'},\n    {NULL, 0, NULL, 0},\n  };\n  getopt_long(argc, argv, \"f\", options, NULL);\n  if (foo) {}\n}\n"
3624:
|
3630:
3631: ) ;
3632: $if $(@expr1073745183 $!@expr1073745184 $assertEquals $(@expr1073745185 "cppcheck-2.8/test/testcondition.cpp" $, 3632 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3633:
3634: check (@expr1073745188 "struct a {\n  int *b();\n};\nbool g(a c, a* d) {\n  a *v, *e = v = &c;\n  if (!v)\n    return true;\n  int *f = v->b();\n  if (f)\n    v = nullptr;\n  if (v == nullptr && e) {}\n  return d;\n}\n"
3635:
|
3645:
3646: ) ;
3647: $if $(@expr1073745189 $!@expr1073745190 $assertEquals $(@expr1073745191 "cppcheck-2.8/test/testcondition.cpp" $, 3647 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3648:
3649:
3650: check (@expr1073745194 "struct a {\n    int* p;\n};\nvoid g(a*);\nvoid f() {\n    struct a b;\n    uint32_t p = (uint32_t) -1;\n    b.p = (void *) &p;\n    int r = g(&b);\n    if (r == 0)\n        if (p != (uint32_t) -1) {}\n}\n"
3651:
|
3660:
3661: ) ;
3662: $if $(@expr1073745195 $!@expr1073745196 $assertEquals $(@expr1073745197 "cppcheck-2.8/test/testcondition.cpp" $, 3662 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3663:
3664:
3665: check (@expr1073745200 "int g(int);\nbool h(int*);\nint f(int *x) {\n    int y = g(0);\n    if (!y) {\n        if (h(x)) {\n            y = g(1);\n            if (y) {}\n            return 0;\n        }\n        if (!y) {}\n    }\n    return 0;\n}\n"
3666:
|
3677:
3678: ) ;
3679: $if $(@expr1073745201 $!@expr1073745202 $assertEquals $(@expr1073745203 "cppcheck-2.8/test/testcondition.cpp" $, 3679 $, "[test.cpp:5] -> [test.cpp:11]: (style) Condition '!y' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3680:
3681:
3682: check (@expr1073745206 "bool foo(bool b);\nbool thud(const std::vector<std::wstring>& Arr, const std::wstring& Str) {\n  if (Arr.empty() && Str.empty())\n    return false;\n  bool OldFormat = Arr.empty() && !Str.empty();\n  if (OldFormat)\n    return foo(OldFormat);\n  return false;\n}\n"
3683:
|
3689:
3690: ) ;
3691: $if $(@expr1073745207 $!@expr1073745208 $assertEquals $(@expr1073745209 "cppcheck-2.8/test/testcondition.cpp" $, 3691 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3692:
3693:
3694: check (@expr1073745212 "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
3695:
|
3699:
3700: ) ;
3701: $if $(@expr1073745213 $!@expr1073745214 $assertEquals $(@expr1073745215 "cppcheck-2.8/test/testcondition.cpp" $, 3701 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3702:
3703: check (@expr1073745218 "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
3704:
|
3708:
3709: ) ;
3710: $if $(@expr1073745219 $!@expr1073745220 $assertEquals $(@expr1073745221 "cppcheck-2.8/test/testcondition.cpp" $, 3710 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3711:
3712: check (@expr1073745224 "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{'a', 'b'}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
3713:
|
3717:
3718: ) ;
3719: $if $(@expr1073745225 $!@expr1073745226 $assertEquals $(@expr1073745227 "cppcheck-2.8/test/testcondition.cpp" $, 3719 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3720:
3721: check (@expr1073745230 "bool GetFirst(const std::string &first);\nbool GetNext(const std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
3722:
|
3726:
3727: ) ;
3728: $if $(@expr1073745231 $!@expr1073745232 $assertEquals $(@expr1073745233 "cppcheck-2.8/test/testcondition.cpp" $, 3728 $, "[test.cpp:5]: (style) Condition 'name.empty()' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3729:
3730:
3731: check (@expr1073745236 "void foo(unsigned int x) {\n    if ((100 - x) > 0) {}\n}\n"
3732:
3733: ) ;
3734: $if $(@expr1073745237 $!@expr1073745238 $assertEquals $(@expr1073745239 "cppcheck-2.8/test/testcondition.cpp" $, 3734 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3735:
3736:
3737: check (@expr1073745242 "void foo(unsigned int x) {\n    if (x == -1) {}\n}\n"
3738:
3739: ) ;
3740: $if $(@expr1073745243 $!@expr1073745244 $assertEquals $(@expr1073745245 "cppcheck-2.8/test/testcondition.cpp" $, 3740 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3741:
3742:
3743: check (@expr1073745248 "struct AB {\n    int a;\n};\nstruct ABC {\n    AB* ab;\n};\nvoid g(ABC*);\nint f(struct ABC *abc) {\n    int err = 0;\n    AB *ab = abc->ab;\n    if (ab->a == 123){\n        g(abc);\n        if (ab->a != 123) {\n            err = 1;\n        }\n    }\n    return err;\n}\n"
3744:
|
3759:
3760: ) ;
3761: $if $(@expr1073745249 $!@expr1073745250 $assertEquals $(@expr1073745251 "cppcheck-2.8/test/testcondition.cpp" $, 3761 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3762:
3763:
3764: check (@expr1073745254 "void foo(int x) {\n    if(x)\n        if(x == 1) {}\n}\n"
3765:
3766:
3767: ) ;
3768: $if $(@expr1073745255 $!@expr1073745256 $assertEquals $(@expr1073745257 "cppcheck-2.8/test/testcondition.cpp" $, 3768 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3769:
3770: check (@expr1073745260 "void foo(int x) {\n    if(x) {}\n    else\n        if(x == 1) {}\n}\n"
3771:
3772:
3773:
3774: ) ;
3775: $if $(@expr1073745261 $!@expr1073745262 $assertEquals $(@expr1073745263 "cppcheck-2.8/test/testcondition.cpp" $, 3775 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3776:
3777:
3778: check (@expr1073745266 "void foo(unsigned int max) {\n    unsigned int num = max - 1;\n    if (num < 0) {}\n}"
3779:
3780:
3781: ) ;
3782: $if $(@expr1073745267 $!@expr1073745268 $assertEquals $(@expr1073745269 "cppcheck-2.8/test/testcondition.cpp" $, 3782 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3783:
3784:
3785: check (@expr1073745272 "void foo(size_t len, int start) {\n    if (start < 0) {\n        start = len+start;\n        if (start < 0) {}\n    }\n}\n"
3786:
|
3789:
3790: ) ;
3791: $if $(@expr1073745273 $!@expr1073745274 $assertEquals $(@expr1073745275 "cppcheck-2.8/test/testcondition.cpp" $, 3791 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3792:
3793:
3794: check (@expr1073745278 "int tok;\nvoid next();\nvoid parse_attribute() {\n    if (tok == '(') {\n        int parenthesis = 0;\n        do {\n            if (tok == '(')\n                parenthesis++;\n            else if (tok == ')')\n                parenthesis--;\n            next();\n        } while (parenthesis && tok != -1);\n    }\n}\n"
3795:
|
3806:
3807: ) ;
3808: $if $(@expr1073745279 $!@expr1073745280 $assertEquals $(@expr1073745281 "cppcheck-2.8/test/testcondition.cpp" $, 3808 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3809:
3810:
3811: check (@expr1073745284 "void f(int i) {\n    if(abs(i) == -1) {}\n}\n"
3812:
3813: ) ;
3814: $if $(@expr1073745285 $!@expr1073745286 $assertEquals $(@expr1073745287 "cppcheck-2.8/test/testcondition.cpp" $, 3814 $, "[test.cpp:2]: (style) Condition 'abs(i)==-1' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3815:
3816:
3817: check (@expr1073745290 "void f(int i) {\n    if(i > 0 && abs(i) == i) {}\n}\n"
3818:
3819: ) ;
3820: $if $(@expr1073745291 $!@expr1073745292 $assertEquals $(@expr1073745293 "cppcheck-2.8/test/testcondition.cpp" $, 3820 $, "[test.cpp:2]: (style) Condition 'abs(i)==i' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3821:
3822: check (@expr1073745296 "void f(int i) {\n    if(i < 0 && abs(i) == i) {}\n}\n"
3823:
3824: ) ;
3825: $if $(@expr1073745297 $!@expr1073745298 $assertEquals $(@expr1073745299 "cppcheck-2.8/test/testcondition.cpp" $, 3825 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'abs(i)==i' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3826:
3827: check (@expr1073745302 "void f(int i) {\n    if(i > -3 && abs(i) == i) {}\n}\n"
3828:
3829: ) ;
3830: $if $(@expr1073745303 $!@expr1073745304 $assertEquals $(@expr1073745305 "cppcheck-2.8/test/testcondition.cpp" $, 3830 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3831:
3832:
3833: check (@expr1073745308 "bool f(bool a, bool b) {\n    return a || ! b || ! a;\n}\n"
3834:
3835: ) ;
3836: $if $(@expr1073745309 $!@expr1073745310 $assertEquals $(@expr1073745311 "cppcheck-2.8/test/testcondition.cpp" $, 3836 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3837:
3838:
3839: check (@expr1073745314 "void f(int i) {\n    if (i >= 64) {}\n    else if (i >= 32) {\n        i &= 31;\n        if (i == 0) {}\n        else {}\n    }\n}\n"
3840:
|
3845:
3846: ) ;
3847: $if $(@expr1073745315 $!@expr1073745316 $assertEquals $(@expr1073745317 "cppcheck-2.8/test/testcondition.cpp" $, 3847 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3848:
3849:
3850: check (@expr1073745320 "void f() {\n    int i = 0;\n    do {} while (i++ == 0);\n}\n"
3851:
3852:
3853: ) ;
3854: $if $(@expr1073745321 $!@expr1073745322 $assertEquals $(@expr1073745323 "cppcheck-2.8/test/testcondition.cpp" $, 3854 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3855:
3856:
3857: check (@expr1073745326 "static void fun(message_t *message) {\n    if (message->length >= 1) {\n        switch (data[0]) {}\n    }\n    uint8_t d0 = message->length > 0 ? data[0] : 0xff;\n}\n"
3858:
|
3861:
3862: ) ;
3863: $if $(@expr1073745327 $!@expr1073745328 $assertEquals $(@expr1073745329 "cppcheck-2.8/test/testcondition.cpp" $, 3863 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3864:
3865:
3866: check (@expr1073745332 "void f(bool b) {\n    if (b)\n        return;\n    if (g(&b) || b)\n        return;\n}\n"
3867:
|
3870:
3871: ) ;
3872: $if $(@expr1073745333 $!@expr1073745334 $assertEquals $(@expr1073745335 "cppcheck-2.8/test/testcondition.cpp" $, 3872 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3873:
3874:
3875: check (@expr1073745338 "bool bar(int &);\nvoid f(int a, int b) {\n    if (a + b == 3)\n        return;\n    if (bar(a) && (a + b == 3)) {}\n}\n"
3876:
|
3879:
3880: ) ;
3881: $if $(@expr1073745339 $!@expr1073745340 $assertEquals $(@expr1073745341 "cppcheck-2.8/test/testcondition.cpp" $, 3881 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3882:
3883:
3884: check (@expr1073745344 "void f() {\n  Obj* PObj = nullptr;\n  bool b = false;\n  if (GetObj(PObj) && PObj != nullptr)\n    b = true;\n  if (b) {}\n}\n"
3885:
|
3889:
3890: ) ;
3891: $if $(@expr1073745345 $!@expr1073745346 $assertEquals $(@expr1073745347 "cppcheck-2.8/test/testcondition.cpp" $, 3891 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3892:
3893:
3894: check (@expr1073745350 "static volatile sig_atomic_t is_running;\nstatic void handler(int signum) {\n    is_running = 0;\n}\nvoid f() {\n    signal(SIGINT, &handler);\n    is_running = 1;\n    while (is_running) {}\n}\n"
3895:
|
3901:
3902: ) ;
3903: $if $(@expr1073745351 $!@expr1073745352 $assertEquals $(@expr1073745353 "cppcheck-2.8/test/testcondition.cpp" $, 3903 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3904:
3905:
3906: check (@expr1073745356 "auto func(const std::tuple<int, int>& t) {\n  auto& [foo, bar] = t;\n  std::cout << foo << bar << std::endl;\n  return foo < bar;\n}\n"
3907:
3908:
3909:
3910: ) ;
3911: $if $(@expr1073745357 $!@expr1073745358 $assertEquals $(@expr1073745359 "cppcheck-2.8/test/testcondition.cpp" $, 3911 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3912:
3913:
3914: check (@expr1073745362 "void f() {\n    static bool init = true;\n    if (init)\n        init = false;\n}\n"
3915:
3916:
3917:
3918: ) ;
3919: $if $(@expr1073745363 $!@expr1073745364 $assertEquals $(@expr1073745365 "cppcheck-2.8/test/testcondition.cpp" $, 3919 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3920:
3921: check (@expr1073745368 "void f() {\n    static bool init(true);\n    if (init)\n        init = false;\n}\n"
3922:
3923:
3924:
3925: ) ;
3926: $if $(@expr1073745369 $!@expr1073745370 $assertEquals $(@expr1073745371 "cppcheck-2.8/test/testcondition.cpp" $, 3926 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3927:
3928: check (@expr1073745374 "void f() {\n    static bool init{ true };\n    if (init)\n        init = false;\n}\n"
3929:
3930:
3931:
3932: ) ;
3933: $if $(@expr1073745375 $!@expr1073745376 $assertEquals $(@expr1073745377 "cppcheck-2.8/test/testcondition.cpp" $, 3933 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3934:
3935:
3936: check (@expr1073745380 "void f() {\n    static int var(1);\n    if (var == 1) {}\n}\n"
3937:
3938:
3939: ) ;
3940: $if $(@expr1073745381 $!@expr1073745382 $assertEquals $(@expr1073745383 "cppcheck-2.8/test/testcondition.cpp" $, 3940 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3941:
3942: check (@expr1073745386 "void f() {\n    static int var{ 1 };\n    if (var == 1) {}\n}\n"
3943:
3944:
3945: ) ;
3946: $if $(@expr1073745387 $!@expr1073745388 $assertEquals $(@expr1073745389 "cppcheck-2.8/test/testcondition.cpp" $, 3946 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3947:
3948: check (@expr1073745392 "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3949:
|
3953:
3954: ) ;
3955: $if $(@expr1073745393 $!@expr1073745394 $assertEquals $(@expr1073745395 "cppcheck-2.8/test/testcondition.cpp" $, 3955 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3956:
3957: check (@expr1073745398 "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3958:
|
3962:
3963: ) ;
3964: $if $(@expr1073745399 $!@expr1073745400 $assertEquals $(@expr1073745401 "cppcheck-2.8/test/testcondition.cpp" $, 3964 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3965:
3966: check (@expr1073745404 "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3967:
|
3971:
3972: ) ;
3973: $if $(@expr1073745405 $!@expr1073745406 $assertEquals $(@expr1073745407 "cppcheck-2.8/test/testcondition.cpp" $, 3973 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3974:
3975: check (@expr1073745410 "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3976:
|
3980:
3981: ) ;
3982: $if $(@expr1073745411 $!@expr1073745412 $assertEquals $(@expr1073745413 "cppcheck-2.8/test/testcondition.cpp" $, 3982 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3983:
3984: check (@expr1073745416 "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3985:
|
3989:
3990: ) ;
3991: $if $(@expr1073745417 $!@expr1073745418 $assertEquals $(@expr1073745419 "cppcheck-2.8/test/testcondition.cpp" $, 3991 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
3992:
3993: check (@expr1073745422 "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
3994:
|
3998:
3999: ) ;
4000: $if $(@expr1073745423 $!@expr1073745424 $assertEquals $(@expr1073745425 "cppcheck-2.8/test/testcondition.cpp" $, 4000 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4001:
4002:
4003: check (@expr1073745428 "bool f() {\n    bool b = false;\n    b = true;\n    return b;\n}\n"
4004:
4005:
4006:
4007: ) ;
4008: $if $(@expr1073745429 $!@expr1073745430 $assertEquals $(@expr1073745431 "cppcheck-2.8/test/testcondition.cpp" $, 4008 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4009:
4010:
4011: check (@expr1073745434 "struct Object {\n  int _count=0;\n   void increment() { ++_count;}\n   auto get() const { return _count; }\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object) : _object(object) {}\n  void do_something() { _object.increment(); }\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n"
4012:
|
4030:
4031: ) ;
4032: $if $(@expr1073745435 $!@expr1073745436 $assertEquals $(@expr1073745437 "cppcheck-2.8/test/testcondition.cpp" $, 4032 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4033:
4034: check (@expr1073745440 "struct Object {\n  int _count=0;\n   auto get() const;\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object);\n  void do_something();\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n"
4035:
|
4052:
4053: ) ;
4054: $if $(@expr1073745441 $!@expr1073745442 $assertEquals $(@expr1073745443 "cppcheck-2.8/test/testcondition.cpp" $, 4054 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4055:
4056: check (@expr1073745446 "void f(const uint32_t u) {\n	const uint32_t v = u < 4;\n	if (v) {\n		const uint32_t w = v < 2;\n		if (w) {}\n	}\n}\n"
4057:
|
4061:
4062: ) ;
4063: $if $(@expr1073745447 $!@expr1073745448 $assertEquals $(@expr1073745449 "cppcheck-2.8/test/testcondition.cpp" $, 4063 $, "[test.cpp:5]: (style) Condition 'w' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4064:
4065: check (@expr1073745452 "void f(double d) {\n    if (d != 0) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n"
4066:
|
4069:
4070: ) ;
4071: $if $(@expr1073745453 $!@expr1073745454 $assertEquals $(@expr1073745455 "cppcheck-2.8/test/testcondition.cpp" $, 4071 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4072:
4073: check (@expr1073745458 "void f(double d) {\n    if (0 != d) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n"
4074:
|
4077:
4078: ) ;
4079: $if $(@expr1073745459 $!@expr1073745460 $assertEquals $(@expr1073745461 "cppcheck-2.8/test/testcondition.cpp" $, 4079 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4080:
4081: check (@expr1073745464 "struct A { double d; }\nvoid f(A a) {\n    if (a.d != 0) {\n        int i = a.d;\n        if (i == 0) {}\n    }\n}\n"
4082:
|
4086:
4087: ) ;
4088: $if $(@expr1073745465 $!@expr1073745466 $assertEquals $(@expr1073745467 "cppcheck-2.8/test/testcondition.cpp" $, 4088 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4089:
4090: check (@expr1073745470 "void f() {\n    if(strlen(\"abc\") == 3) {;}\n    if(strlen(\"abc\") == 1) {;}\n    if(wcslen(L\"abc\") == 3) {;}\n    if(wcslen(L\"abc\") == 1) {;}\n}\n"
4091:
|
4094:
4095: ) ;
4096: $if $(@expr1073745471 $!@expr1073745472 $assertEquals $(@expr1073745473 "cppcheck-2.8/test/testcondition.cpp" $, 4096 $, "[test.cpp:2]: (style) Condition 'strlen(\"abc\")==3' is always true\n[test.cpp:3]: (style) Condition 'strlen(\"abc\")==1' is always false\n[test.cpp:4]: (style) Condition 'wcslen(L\"abc\")==3' is always true\n[test.cpp:5]: (style) Condition 'wcslen(L\"abc\")==1' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return
4097:
4098:
4099:
4100: ; }
4101:
4102: check (@expr1073745476 "int foo(bool a, bool b) {\n  if(!a && b && (!a == !b))\n   return 1;\n  return 0;\n}\n"
4103:
4104:
4105:
4106: ) ;
4107: $if $(@expr1073745477 $!@expr1073745478 $assertEquals $(@expr1073745479 "cppcheck-2.8/test/testcondition.cpp" $, 4107 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a==!b' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4108:
4109:
4110: check (@expr1073745482 "struct S {\n    int f() const { return g() ? 0 : 1; }\n    bool g() const { return u == 18446744073709551615ULL; }\n    unsigned long long u{};\n};\n"
4111:
4112:
4113:
4114: ) ;
4115: $if $(@expr1073745483 $!@expr1073745484 $assertEquals $(@expr1073745485 "cppcheck-2.8/test/testcondition.cpp" $, 4115 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4116:
4117:
4118: check (@expr1073745488 "void f(double d) { if ((d * 0) != 0) {} }" ) ;
4119: $if $(@expr1073745489 $!@expr1073745490 $assertEquals $(@expr1073745491 "cppcheck-2.8/test/testcondition.cpp" $, 4119 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4120:
4121:
4122: check (@expr1073745494 "struct S {\n    int* p;\n    void f() const;\n    int g();\n};\nvoid S::f() {\n    if ((p == NULL) || ((p) && (g() >= *p))) {}\n}\n"
4123:
|
4128:
4129: ) ;
4130: $if $(@expr1073745495 $!@expr1073745496 $assertEquals $(@expr1073745497 "cppcheck-2.8/test/testcondition.cpp" $, 4130 $, "[test.cpp:7]: (style) Condition 'p' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4131:
4132:
4133: check (@expr1073745500 "struct Interface {\n    virtual int method() = 0;\n};\nstruct Child : Interface {\n   int method() override { return 0; }\n   auto foo() {\n       if (method() == 0)\n           return true;\n       else\n           return false;\n   }\n};\nstruct GrandChild : Child {\n   int method() override  { return 1; }\n};\n"
4134:
|
4146:
4147: ) ;
4148: $if $(@expr1073745501 $!@expr1073745502 $assertEquals $(@expr1073745503 "cppcheck-2.8/test/testcondition.cpp" $, 4148 $, "" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4149:
4150:
4151: check (@expr1073745506 "struct S { int i; };\nvoid f(S& s) {\n    if (!(s.i > 0) && (s.i != 0))\n        s.i = 0;\n    else if (s.i < 0)\n        s.s = 0;\n}\n"
4152:
|
4156:
4157: ) ;
4158: $if $(@expr1073745507 $!@expr1073745508 $assertEquals $(@expr1073745509 "cppcheck-2.8/test/testcondition.cpp" $, 4158 $, "[test.cpp:3] -> [test.cpp:5]: (style) Condition 's.i<0' is always false\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return ; }
4159:
4160:
4161: check (@expr1073745512 "int bar(int i) { return i; }\nvoid foo() {\n    if (bar(1) == 0 && bar(1) > 0) {}\n}\n"
4162:
4163:
4164: ) ;
4165: $if $(@expr1073745513 $!@expr1073745514 $assertEquals $(@expr1073745515 "cppcheck-2.8/test/testcondition.cpp" $, 4165 $, "[test.cpp:3]: (style) Condition 'bar(1)==0' is always false\n[test.cpp:3]: (style) Condition 'bar(1)>0' is always true\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return
4166:
4167: ; }
4168:
4169: check (@expr1073745518 "struct S { int bar(int i) const; };\nvoid foo(const S& s) {\n    if (s.bar(1) == 0 && s.bar(1) > 0) {}\n}\n"
4170:
4171:
4172: ) ;
4173: $if $(@expr1073745519 $!@expr1073745520 $assertEquals $(@expr1073745521 "cppcheck-2.8/test/testcondition.cpp" $, 4173 $, "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: s.bar(1) == 0 && s.bar(1) > 0.\n" $, errout@var100 .@expr2892 str (@expr2893 ) $) $) { $return
4174: ; }
4175: }
4176:
4177: void alwaysTrueSymbolic ( )
4178: {
4179: check (@expr1073745524 "void f(const uint32_t x) {\n    uint32_t y[1];\n    y[0]=x;\n    if(x > 0 || y[0] < 42){}\n}\n"
4180:
4181:
4182:
4183: ) ;
4184: $if $(@expr1073745525 $!@expr1073745526 $assertEquals $(@expr1073745527 "cppcheck-2.8/test/testcondition.cpp" $, 4184 $, "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'y[0]<42' is always true\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4185:
4186: check (@expr1073745530 "void f(int x, int y) {\n    if(x < y && x < 42) {\n        --x;\n        if(x == y) {}\n    }\n}\n"
4187:
|
4190:
4191: ) ;
4192: $if $(@expr1073745531 $!@expr1073745532 $assertEquals $(@expr1073745533 "cppcheck-2.8/test/testcondition.cpp" $, 4192 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==y' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4193:
4194: check (@expr1073745536 "void f(bool a, bool b) {  if (a == b && a && !b){} }" ) ;
4195: $if $(@expr1073745537 $!@expr1073745538 $assertEquals $(@expr1073745539 "cppcheck-2.8/test/testcondition.cpp" $, 4195 $, "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!b' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4196:
4197: check (@expr1073745542 "bool f(bool a, bool b) { if(a && b && (!a)){} }" ) ;
4198: $if $(@expr1073745543 $!@expr1073745544 $assertEquals $(@expr1073745545 "cppcheck-2.8/test/testcondition.cpp" $, 4198 $, "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!a' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4199:
4200: check (@expr1073745548 "void f(int x, int y) {\n  if (x < y) {\n    auto z = y - x;\n    if (z < 1) {}\n  }\n}\n"
4201:
|
4204:
4205: ) ;
4206: $if $(@expr1073745549 $!@expr1073745550 $assertEquals $(@expr1073745551 "cppcheck-2.8/test/testcondition.cpp" $, 4206 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'z<1' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4207:
4208: check (@expr1073745554 "bool f(int &index, const int s, const double * const array, double & x) {\n    if (index >= s)\n        return false;\n    else {\n        x = array[index];\n        return (index++) >= s;\n    }\n}\n"
4209:
|
4214:
4215: ) ;
4216: $if $(@expr1073745555 $!@expr1073745556 $assertEquals $(@expr1073745557 "cppcheck-2.8/test/testcondition.cpp" $, 4216 $, "[test.cpp:2] -> [test.cpp:6]: (style) Condition '(index++)>=s' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4217:
4218: check (@expr1073745560 "struct a {\n  a *b() const;\n} c;\nvoid d() {\n  a *e = nullptr;\n  e = c.b();\n  if (e) {}\n}\n"
4219:
|
4224:
4225: ) ;
4226: $if $(@expr1073745561 $!@expr1073745562 $assertEquals $(@expr1073745563 "cppcheck-2.8/test/testcondition.cpp" $, 4226 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4227:
4228: check (@expr1073745566 "int g(int i) {\n  if (i < 256)\n    return 1;\n  const int N = 2 * i;\n  i -= 256;\n  if (i == 0)\n    return 0;\n  return N;\n}\n"
4229:
|
4235:
4236: ) ;
4237: $if $(@expr1073745567 $!@expr1073745568 $assertEquals $(@expr1073745569 "cppcheck-2.8/test/testcondition.cpp" $, 4237 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4238:
4239: check (@expr1073745572 "void f(int i, int j) {\n    if (i < j) {\n        i++;\n        if (i >= j)\n            return;\n        i++;\n        if (i >= j) {}\n    }\n}\n"
4240:
|
4246:
4247: ) ;
4248: $if $(@expr1073745573 $!@expr1073745574 $assertEquals $(@expr1073745575 "cppcheck-2.8/test/testcondition.cpp" $, 4248 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4249:
4250: check (@expr1073745578 "int get_delta() {\n    clock_t now_ms = (clock() / (CLOCKS_PER_SEC / 1000));\n    static clock_t last_clock_ms = now_ms;\n    clock_t delta = now_ms - last_clock_ms;\n    last_clock_ms = now_ms;\n    if (delta > 50)\n        delta = 50;\n    return delta;\n}\n"
4251:
|
4257:
4258: ) ;
4259: $if $(@expr1073745579 $!@expr1073745580 $assertEquals $(@expr1073745581 "cppcheck-2.8/test/testcondition.cpp" $, 4259 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4260:
4261:
4262: check (@expr1073745584 "struct C {\n  int GetI() const { return i; }\n  int i{};\n};\nstruct B {\n    C *m_PC{};\n    Modify();\n};\nstruct D : B {\n  void test();  \n};\nvoid D::test() {\n    const int I = m_PC->GetI();\n    Modify();\n    if (m_PC->GetI() != I) {}\n}\n"
4263:
|
4276:
4277: ) ;
4278: $if $(@expr1073745585 $!@expr1073745586 $assertEquals $(@expr1073745587 "cppcheck-2.8/test/testcondition.cpp" $, 4278 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4279:
4280:
4281: check (@expr1073745590 "struct Data {\n  Base* PBase{};\n};\nvoid f(Data* BaseData) {\n  Base* PObj = BaseData->PBase;\n  if (PObj == nullptr)\n    return;\n  Derived* pD = dynamic_cast<Derived*>(PObj);\n  if (pD) {}\n}\n"
4282:
|
4289:
4290: ) ;
4291: $if $(@expr1073745591 $!@expr1073745592 $assertEquals $(@expr1073745593 "cppcheck-2.8/test/testcondition.cpp" $, 4291 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4292:
4293:
4294: check (@expr1073745596 "void f(const uint32_t v) {\n    const uint32_t v16 = v >> 16;\n    if (v16) {\n        const uint32_t v8 = v16 >> 8;\n        if (v8) {}\n    }\n}\n"
4295:
|
4299:
4300: ) ;
4301: $if $(@expr1073745597 $!@expr1073745598 $assertEquals $(@expr1073745599 "cppcheck-2.8/test/testcondition.cpp" $, 4301 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4302:
4303:
4304: check (@expr1073745602 "void foo(struct diag_msg *msg) {\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n}\n"
4305:
|
4310:
4311: ) ;
4312: $if $(@expr1073745603 $!@expr1073745604 $assertEquals $(@expr1073745605 "cppcheck-2.8/test/testcondition.cpp" $, 4312 $, "" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4313:
4314: check (@expr1073745608 "int foo(bool a, bool b) {\n  if((!a == !b) && !a && b)\n   return 1;\n  return 0;\n}\n"
4315:
4316:
4317:
4318: ) ;
4319: $if $(@expr1073745609 $!@expr1073745610 $assertEquals $(@expr1073745611 "cppcheck-2.8/test/testcondition.cpp" $, 4319 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'b' is always false\n" $, errout@var100 .@expr3704 str (@expr3705 ) $) $) { $return ; }
4320: }
4321:
4322: void alwaysTrueInfer ( ) {
4323: check (@expr1073745614 "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x == 1) {}\n    }\n}"
4324:
|
4327:
4328: ) ;
4329: $if $(@expr1073745615 $!@expr1073745616 $assertEquals $(@expr1073745617 "cppcheck-2.8/test/testcondition.cpp" $, 4329 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4330:
4331: check (@expr1073745620 "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x != 1) {}\n    }\n}"
4332:
|
4335:
4336: ) ;
4337: $if $(@expr1073745621 $!@expr1073745622 $assertEquals $(@expr1073745623 "cppcheck-2.8/test/testcondition.cpp" $, 4337 $, "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x!=1' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4338:
4339:
4340: check (@expr1073745626 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x == -1) {}\n        else {}\n    }\n}"
4341:
|
4347:
4348: ) ;
4349: $if $(@expr1073745627 $!@expr1073745628 $assertEquals $(@expr1073745629 "cppcheck-2.8/test/testcondition.cpp" $, 4349 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x==-1' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4350:
4351: check (@expr1073745632 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x != -1) {}\n        else {}\n    }\n}"
4352:
|
4358:
4359: ) ;
4360: $if $(@expr1073745633 $!@expr1073745634 $assertEquals $(@expr1073745635 "cppcheck-2.8/test/testcondition.cpp" $, 4360 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x!=-1' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4361:
4362: check (@expr1073745638 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x >= -1) {}\n        else {}\n    }\n}"
4363:
|
4369:
4370: ) ;
4371: $if $(@expr1073745639 $!@expr1073745640 $assertEquals $(@expr1073745641 "cppcheck-2.8/test/testcondition.cpp" $, 4371 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>=-1' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4372:
4373: check (@expr1073745644 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > -1) {}\n        else {}\n    }\n}"
4374:
|
4380:
4381: ) ;
4382: $if $(@expr1073745645 $!@expr1073745646 $assertEquals $(@expr1073745647 "cppcheck-2.8/test/testcondition.cpp" $, 4382 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>-1' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4383:
4384: check (@expr1073745650 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x < -1) {}\n        else {}\n    }\n}"
4385:
|
4391:
4392: ) ;
4393: $if $(@expr1073745651 $!@expr1073745652 $assertEquals $(@expr1073745653 "cppcheck-2.8/test/testcondition.cpp" $, 4393 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<-1' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4394:
4395: check (@expr1073745656 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x <= -1) {}\n        else {}\n    }\n}"
4396:
|
4402:
4403: ) ;
4404: $if $(@expr1073745657 $!@expr1073745658 $assertEquals $(@expr1073745659 "cppcheck-2.8/test/testcondition.cpp" $, 4404 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<=-1' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4405:
4406: check (@expr1073745662 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 7) {}\n        else {}\n    }\n}"
4407:
|
4413:
4414: ) ;
4415: $if $(@expr1073745663 $!@expr1073745664 $assertEquals $(@expr1073745665 "cppcheck-2.8/test/testcondition.cpp" $, 4415 $, "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>7' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4416:
4417: check (@expr1073745668 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 9) {}\n        else {}\n    }\n}"
4418:
|
4424:
4425: ) ;
4426: $if $(@expr1073745669 $!@expr1073745670 $assertEquals $(@expr1073745671 "cppcheck-2.8/test/testcondition.cpp" $, 4426 $, "" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4427:
4428: check (@expr1073745674 "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 10) {}\n        else {}\n    }\n}"
4429:
|
4435:
4436: ) ;
4437: $if $(@expr1073745675 $!@expr1073745676 $assertEquals $(@expr1073745677 "cppcheck-2.8/test/testcondition.cpp" $, 4437 $, "" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4438:
4439:
4440: check (@expr1073745680 "int f(int pos, int a) {\n    if (pos <= 0)\n        pos = 0;\n    else if (pos < a)\n        if(pos > 0)\n            --pos;\n    return pos;\n}"
4441:
|
4446:
4447: ) ;
4448: $if $(@expr1073745681 $!@expr1073745682 $assertEquals $(@expr1073745683 "cppcheck-2.8/test/testcondition.cpp" $, 4448 $, "[test.cpp:2] -> [test.cpp:5]: (style) Condition 'pos>0' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4449:
4450:
4451: check (@expr1073745686 "void f(int x) {\n    if (x > 127) {\n        if ( (x>255) || (-128>x) )\n            return;\n    }\n}"
4452:
|
4455:
4456: ) ;
4457: $if $(@expr1073745687 $!@expr1073745688 $assertEquals $(@expr1073745689 "cppcheck-2.8/test/testcondition.cpp" $, 4457 $, "[test.cpp:2] -> [test.cpp:3]: (style) Condition '-128>x' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4458:
4459:
4460: check (@expr1073745692 "void f() {\n    for(int i = 0; i < 19; ++i)\n        if(i<=18) {}\n}\n"
4461:
4462:
4463: ) ;
4464: $if $(@expr1073745693 $!@expr1073745694 $assertEquals $(@expr1073745695 "cppcheck-2.8/test/testcondition.cpp" $, 4464 $, "[test.cpp:3]: (style) Condition 'i<=18' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4465:
4466:
4467: check (@expr1073745698 "void f() {\n    for(int x = 0; x < 3; ++x)\n        if(x == -5) {}\n}"
4468:
4469:
4470: ) ;
4471: $if $(@expr1073745699 $!@expr1073745700 $assertEquals $(@expr1073745701 "cppcheck-2.8/test/testcondition.cpp" $, 4471 $, "[test.cpp:3]: (style) Condition 'x==-5' is always false\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4472:
4473:
4474: check (@expr1073745704 "int f(void) {\n    for(int i = 0; i <1; ++i)\n        if(i == 0) return 1; \n        else return 0;\n    return -1;\n}"
4475:
|
4478:
4479: ) ;
4480: $if $(@expr1073745705 $!@expr1073745706 $assertEquals $(@expr1073745707 "cppcheck-2.8/test/testcondition.cpp" $, 4480 $, "[test.cpp:3]: (style) Condition 'i==0' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4481:
4482: check (@expr1073745710 "void f(unsigned int u1, unsigned int u2) {\n    if (u1 <= 10 && u2 >= 20) {\n        if (u1 != u2) {}\n    }\n}\n"
4483:
4484:
4485:
4486: ) ;
4487: $if $(@expr1073745711 $!@expr1073745712 $assertEquals $(@expr1073745713 "cppcheck-2.8/test/testcondition.cpp" $, 4487 $, "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'u1!=u2' is always true\n" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4488:
4489:
4490: check (@expr1073745716 "void f(int N) {\n    if (N > 0) {\n        while (N)\n            N = test();\n    }\n}\n"
4491:
|
4494:
4495: ) ;
4496: $if $(@expr1073745717 $!@expr1073745718 $assertEquals $(@expr1073745719 "cppcheck-2.8/test/testcondition.cpp" $, 4496 $, "" $, errout@var100 .@expr3794 str (@expr3795 ) $) $) { $return ; }
4497: }
4498:
4499: void alwaysTrueContainer ( ) {
4500:
4501: check (@expr1073745722 "void c1(std::vector<double>&);\nvoid c2(std::vector<double>&);\nvoid foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}"
4502:
|
4510:
4511: ) ;
4512: $if $(@expr1073745723 $!@expr1073745724 $assertEquals $(@expr1073745725 "cppcheck-2.8/test/testcondition.cpp" $, 4512 $, "" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4513:
4514: check (@expr1073745728 "void foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}"
4515:
|
4521:
4522: ) ;
4523: $if $(@expr1073745729 $!@expr1073745730 $assertEquals $(@expr1073745731 "cppcheck-2.8/test/testcondition.cpp" $, 4523 $, "" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4524:
4525: check (@expr1073745734 "struct A {\n    std::vector<int> v;\n    void g();\n    void f(bool b) {\n        v.clear();\n        g();\n        return !v.empty();\n    }\n};\n"
4526:
|
4532:
4533: ) ;
4534: $if $(@expr1073745735 $!@expr1073745736 $assertEquals $(@expr1073745737 "cppcheck-2.8/test/testcondition.cpp" $, 4534 $, "" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4535:
4536:
4537: check (@expr1073745740 "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s == \"ab\" ) return;\n    if( s.size() < 3 ) return;\n}\n"
4538:
4539:
4540:
4541: ) ;
4542: $if $(@expr1073745741 $!@expr1073745742 $assertEquals $(@expr1073745743 "cppcheck-2.8/test/testcondition.cpp" $, 4542 $, "" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4543:
4544: check (@expr1073745746 "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s != \"ab\" )\n        if( s.size() < 3 ) return;\n}\n"
4545:
4546:
4547:
4548: ) ;
4549: $if $(@expr1073745747 $!@expr1073745748 $assertEquals $(@expr1073745749 "cppcheck-2.8/test/testcondition.cpp" $, 4549 $, "" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4550:
4551:
4552: check (@expr1073745752 "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw 0;\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n"
4553:
|
4557:
4558: ) ;
4559: $if $(@expr1073745753 $!@expr1073745754 $assertEquals $(@expr1073745755 "cppcheck-2.8/test/testcondition.cpp" $, 4559 $, "[test.cpp:4]: (style) Condition 'it!=vector.end()' is always true\n" $, errout@var100 .@expr3902 str (@expr3903 ) $) $) { $return ; }
4560: }
4561:
4562: void alwaysTrueLoop ( )
4563: {
4564: check (@expr1073745758 "long foo() {\n  bool bUpdated = false;\n  long Ret{};\n  do {\n    Ret = bar();\n    if (Ret == 0) {\n      if (bUpdated)\n        return 1;\n      bUpdated = true;\n    }\n    else\n      bUpdated = false;\n  }\n  while (bUpdated);\n  return Ret;\n}\n"
4565:
|
4578:
4579: ) ;
4580: $if $(@expr1073745759 $!@expr1073745760 $assertEquals $(@expr1073745761 "cppcheck-2.8/test/testcondition.cpp" $, 4580 $, "" $, errout@var100 .@expr3938 str (@expr3939 ) $) $) { $return ; }
4581:
4582: check (@expr1073745764 "bool foo() {\n  bool bFirst = true;\n  do {\n    if (bFirst)\n      bar();\n    if (baz())\n      break;       \n    bFirst = false;\n  } while (true);\n  return bFirst;\n}\n"
4583:
|
4591:
4592: ) ;
4593: $if $(@expr1073745765 $!@expr1073745766 $assertEquals $(@expr1073745767 "cppcheck-2.8/test/testcondition.cpp" $, 4593 $, "" $, errout@var100 .@expr3938 str (@expr3939 ) $) $) { $return ; }
4594:
4595: check (@expr1073745770 "void f() {\n   void * pool = NULL;\n   do {\n      pool = malloc(40);\n      if (dostuff())\n         break;\n      pool = NULL;\n   }\n   while (0);\n   if (pool) {}\n}\n"
4596:
|
4604:
4605: ) ;
4606: $if $(@expr1073745771 $!@expr1073745772 $assertEquals $(@expr1073745773 "cppcheck-2.8/test/testcondition.cpp" $, 4606 $, "" $, errout@var100 .@expr3938 str (@expr3939 ) $) $) { $return ; }
4607:
4608:
4609: check (@expr1073745776 "void f(const int A[], int Len) {\n  if (Len <= 0)\n    return;\n  int I = 0;\n  while (I < Len) {\n    int K = I + 1;\n    for (; K < Len; K++) {\n      if (A[I] != A[K])\n        break;\n    } \n    I = K;   \n  }\n}\n"
4610:
|
4620:
4621: ) ;
4622: $if $(@expr1073745777 $!@expr1073745778 $assertEquals $(@expr1073745779 "cppcheck-2.8/test/testcondition.cpp" $, 4622 $, "" $, errout@var100 .@expr3938 str (@expr3939 ) $) $) { $return ; }
4623: }
4624:
4625: void alwaysTrueTryCatch ( )
4626: {
4627: check (@expr1073745782 "void g();\nvoid f(int x)\n{\n    if( x ) {\n        try {\n            g();\n        }\n        catch(...) {\n            return;\n        }\n    }\n    g();\n    if( x ) {\n        g();\n    }\n}\n"
4628:
|
4641:
4642: ) ;
4643: $if $(@expr1073745783 $!@expr1073745784 $assertEquals $(@expr1073745785 "cppcheck-2.8/test/testcondition.cpp" $, 4643 $, "" $, errout@var100 .@expr3962 str (@expr3963 ) $) $) { $return ; }
4644:
4645: check (@expr1073745788 "void g();\nvoid h();\nvoid f(int x) {\n    if( x ) {\n        try {\n            g();\n            return;\n        }\n        catch( ... ) {}\n    }\n    h();\n    if( x ) {\n        g();\n    }\n}\n"
4646:
|
4658:
4659: ) ;
4660: $if $(@expr1073745789 $!@expr1073745790 $assertEquals $(@expr1073745791 "cppcheck-2.8/test/testcondition.cpp" $, 4660 $, "" $, errout@var100 .@expr3962 str (@expr3963 ) $) $) { $return ; }
4661: }
4662:
4663: void multiConditionAlwaysTrue ( ) {
4664: check (@expr1073745794 "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if (val > 0) {}\n}"
4665:
4666:
4667:
4668: ) ;
4669: $if $(@expr1073745795 $!@expr1073745796 $assertEquals $(@expr1073745797 "cppcheck-2.8/test/testcondition.cpp" $, 4669 $, "" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return ; }
4670:
4671: check (@expr1073745800 "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val > 0) {}\n  }\n}"
4672:
|
4675:
4676: ) ;
4677: $if $(@expr1073745801 $!@expr1073745802 $assertEquals $(@expr1073745803 "cppcheck-2.8/test/testcondition.cpp" $, 4677 $, "" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return ; }
4678:
4679: check (@expr1073745806 "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val < 0) {}\n  }\n}"
4680:
|
4683:
4684: ) ;
4685: $if $(@expr1073745807 $!@expr1073745808 $assertEquals $(@expr1073745809 "cppcheck-2.8/test/testcondition.cpp" $, 4685 $, "" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return ; }
4686:
4687: check (@expr1073745812 "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}"
4688:
|
4691:
4692: ) ;
4693: $if $(@expr1073745813 $!@expr1073745814 $assertEquals $(@expr1073745815 "cppcheck-2.8/test/testcondition.cpp" $, 4693 $, "[test.cpp:4]: (style) Condition 'activate' is always false\n[test.cpp:5]: (style) Condition 'foo' is always false\n" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return
4694: ; }
4695:
4696:
4697: check (@expr1073745818 "void f() {\n  const int b[2] = { 1,0 };\n  if(b[1] == 2) {}\n}"
4698:
4699:
4700: ) ;
4701: $if $(@expr1073745819 $!@expr1073745820 $assertEquals $(@expr1073745821 "cppcheck-2.8/test/testcondition.cpp" $, 4701 $, "[test.cpp:3]: (style) Condition 'b[1]==2' is always false\n" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return ; }
4702:
4703:
4704: check (@expr1073745824 "void f(bool a, bool b) {\n    if (a && b){;}\n    else if (!a && b){;}\n    else if (!a && !b){;}\n    else {;}\n}\n"
4705:
|
4708:
4709: ) ;
4710: $if $(@expr1073745825 $!@expr1073745826 $assertEquals $(@expr1073745827 "cppcheck-2.8/test/testcondition.cpp" $, 4710 $, "" $, errout@var100 .@expr3974 str (@expr3975 ) $) $) { $return ; }
4711: }
4712:
4713: void duplicateCondition ( ) {
4714: check (@expr1073745830 "void f(bool x) {\n    if(x) {}\n    if(x) {}\n}"
4715:
4716:
4717: ) ;
4718: $if $(@expr1073745831 $!@expr1073745832 $assertEquals $(@expr1073745833 "cppcheck-2.8/test/testcondition.cpp" $, 4718 $, "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return
4719: ; }
4720:
4721: check (@expr1073745836 "void f(int x) {\n    if(x == 1) {}\n    if(x == 1) {}\n}"
4722:
4723:
4724: ) ;
4725: $if $(@expr1073745837 $!@expr1073745838 $assertEquals $(@expr1073745839 "cppcheck-2.8/test/testcondition.cpp" $, 4725 $, "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return
4726: ; }
4727:
4728: check (@expr1073745842 "void f(int x) {\n    if(x == 1) {}\n    if(x == 2) {}\n}"
4729:
4730:
4731: ) ;
4732: $if $(@expr1073745843 $!@expr1073745844 $assertEquals $(@expr1073745845 "cppcheck-2.8/test/testcondition.cpp" $, 4732 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4733:
4734: check (@expr1073745848 "void f(int x) {\n    if(x == 1) {}\n    if(x != 1) {}\n}"
4735:
4736:
4737: ) ;
4738: $if $(@expr1073745849 $!@expr1073745850 $assertEquals $(@expr1073745851 "cppcheck-2.8/test/testcondition.cpp" $, 4738 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4739:
4740: check (@expr1073745854 "void f(bool x) {\n    if(x) {}\n    g();\n    if(x) {}\n}"
4741:
4742:
4743:
4744: ) ;
4745: $if $(@expr1073745855 $!@expr1073745856 $assertEquals $(@expr1073745857 "cppcheck-2.8/test/testcondition.cpp" $, 4745 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4746:
4747: check (@expr1073745860 "void f(int x) {\n    if(x == 1) { x++; }\n    if(x == 1) {}\n}"
4748:
4749:
4750: ) ;
4751: $if $(@expr1073745861 $!@expr1073745862 $assertEquals $(@expr1073745863 "cppcheck-2.8/test/testcondition.cpp" $, 4751 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4752:
4753:
4754: check (@expr1073745866 "void g(int** v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  int* d[] = {&a, &b};\n  g(d);\n  if (a) {}\n  if (b) {}\n}"
4755:
|
4761:
4762: ) ;
4763: $if $(@expr1073745867 $!@expr1073745868 $assertEquals $(@expr1073745869 "cppcheck-2.8/test/testcondition.cpp" $, 4763 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4764:
4765:
4766: check (@expr1073745872 "struct c {\n  int* p;\n};\nvoid g(struct c* v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  struct c d[] = {{&a}, {&b}};\n  g(d);\n  if (a) {}\n  if (b) {}\n}"
4767:
|
4776:
4777: ) ;
4778: $if $(@expr1073745873 $!@expr1073745874 $assertEquals $(@expr1073745875 "cppcheck-2.8/test/testcondition.cpp" $, 4778 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4779:
4780:
4781: check (@expr1073745878 "void f(const std::string& x) {\n  auto y = x;\n  if (x.empty()) y = \"1\";\n  if (y.empty()) return;\n}"
4782:
4783:
4784:
4785: ) ;
4786: $if $(@expr1073745879 $!@expr1073745880 $assertEquals $(@expr1073745881 "cppcheck-2.8/test/testcondition.cpp" $, 4786 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4787:
4788:
4789: check (@expr1073745884 "struct A {int b;};\nvoid f(A a, int c) {\n    if (a.b) a.b = c;\n    if (a.b) {}\n}"
4790:
4791:
4792:
4793: ) ;
4794: $if $(@expr1073745885 $!@expr1073745886 $assertEquals $(@expr1073745887 "cppcheck-2.8/test/testcondition.cpp" $, 4794 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4795:
4796: check (@expr1073745890 "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void c();\n    void d() {\n        if(b()) {\n            c();\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
4797:
|
4809:
4810: ) ;
4811: $if $(@expr1073745891 $!@expr1073745892 $assertEquals $(@expr1073745893 "cppcheck-2.8/test/testcondition.cpp" $, 4811 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4812:
4813: check (@expr1073745896 "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n            a = 2;\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
4814:
|
4825:
4826: ) ;
4827: $if $(@expr1073745897 $!@expr1073745898 $assertEquals $(@expr1073745899 "cppcheck-2.8/test/testcondition.cpp" $, 4827 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4828:
4829: check (@expr1073745902 "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
4830:
|
4840:
4841: ) ;
4842: $if $(@expr1073745903 $!@expr1073745904 $assertEquals $(@expr1073745905 "cppcheck-2.8/test/testcondition.cpp" $, 4842 $, "[test.cpp:7] -> [test.cpp:9]: (style) The if condition is the same as the previous if condition\n" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return
4843: ; }
4844:
4845: check (@expr1073745908 "void f(bool a, bool b) {\n    auto g = [&] { b = !a; };\n    if (b)\n        g();\n    if (b) {}\n}\n"
4846:
|
4849:
4850: ) ;
4851: $if $(@expr1073745909 $!@expr1073745910 $assertEquals $(@expr1073745911 "cppcheck-2.8/test/testcondition.cpp" $, 4851 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4852:
4853: check (@expr1073745914 "void g(bool& a);\nvoid f(bool b) {\n    auto h = std::bind(&g, std::ref(b));\n    if (b)\n        h();\n    if (b) {}\n}\n"
4854:
|
4858:
4859: ) ;
4860: $if $(@expr1073745915 $!@expr1073745916 $assertEquals $(@expr1073745917 "cppcheck-2.8/test/testcondition.cpp" $, 4860 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4861:
4862: check (@expr1073745920 "void f(int *i) {\n  if (*i == 0) {\n    *i = 1;\n  }\n  if (*i == 0) {\n  }\n}\n"
4863:
|
4867:
4868: ) ;
4869: $if $(@expr1073745921 $!@expr1073745922 $assertEquals $(@expr1073745923 "cppcheck-2.8/test/testcondition.cpp" $, 4869 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4870:
4871: check (@expr1073745926 "void g(std::function<void()>);\nvoid f(std::vector<int> v) {\n    auto x = [&v] { v.push_back(1); };\n    if(v.empty()) {\n        g(x);\n    }\n    if(v.empty())\n        return;\n    return;\n}\n"
4872:
|
4879:
4880: ) ;
4881: $if $(@expr1073745927 $!@expr1073745928 $assertEquals $(@expr1073745929 "cppcheck-2.8/test/testcondition.cpp" $, 4881 $, "" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4882:
4883: check (@expr1073745932 "struct S { int i; };\nint f(const S& s) {\n    int a = 0, b = 0;\n    if (s.i == 0)\n        a = 1;\n    if (s.i == 0)\n        b = 1;\n    return a + b;\n}\n"
4884:
|
4890:
4891: ) ;
4892: $if $(@expr1073745933 $!@expr1073745934 $assertEquals $(@expr1073745935 "cppcheck-2.8/test/testcondition.cpp" $, 4892 $, "[test.cpp:4] -> [test.cpp:6]: (style) The if condition is the same as the previous if condition\n" $, errout@var100 .@expr4010 str (@expr4011 ) $) $) { $return ; }
4893:
4894:
4895: check (@expr1073745938 "void assign(const MMA& other) {\n    if (mPA.cols != other.mPA.cols || mPA.rows != other.mPA.rows)\n        ;\n    if (other.mPA.cols > 0 && other.mPA.rows > 0)\n        ;\n}"
4896:
|
4899:
4900: ) ;
4901: }
4902:
4903: void checkInvalidTestForOverflow ( ) {
4904: check (@expr1073745939 "void f(char *p, unsigned int x) {\n    assert((p + x) < p);\n}"
4905:
4906: ) ;
4907: $if $(@expr1073745940 $!@expr1073745941 $assertEquals $(@expr1073745942 "cppcheck-2.8/test/testcondition.cpp" $, 4907 $, "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)<p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4908:
4909: check (@expr1073745945 "void f(char *p, unsigned int x) {\n    assert((p + x) >= p);\n}"
4910:
4911: ) ;
4912: $if $(@expr1073745946 $!@expr1073745947 $assertEquals $(@expr1073745948 "cppcheck-2.8/test/testcondition.cpp" $, 4912 $, "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)>=p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4913:
4914: check (@expr1073745951 "void f(char *p, unsigned int x) {\n    assert(p > (p + x));\n}"
4915:
4916: ) ;
4917: $if $(@expr1073745952 $!@expr1073745953 $assertEquals $(@expr1073745954 "cppcheck-2.8/test/testcondition.cpp" $, 4917 $, "[test.cpp:2]: (warning) Invalid test for overflow 'p>(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4918:
4919: check (@expr1073745957 "void f(char *p, unsigned int x) {\n    assert(p <= (p + x));\n}"
4920:
4921: ) ;
4922: $if $(@expr1073745958 $!@expr1073745959 $assertEquals $(@expr1073745960 "cppcheck-2.8/test/testcondition.cpp" $, 4922 $, "[test.cpp:2]: (warning) Invalid test for overflow 'p<=(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4923:
4924: check (@expr1073745963 "void f(signed int x) {\n    assert(x + 100U < x);\n}"
4925:
4926: ) ;
4927: $if $(@expr1073745964 $!@expr1073745965 $assertEquals $(@expr1073745966 "cppcheck-2.8/test/testcondition.cpp" $, 4927 $, "" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4928:
|
4933:
4934: check (@expr1073745969 "int f(int x) { return x + 10 > x; }" ) ;
4935: $if $(@expr1073745970 $!@expr1073745971 $assertEquals $(@expr1073745972 "cppcheck-2.8/test/testcondition.cpp" $, 4935 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4936:
4937: check (@expr1073745975 "int f(int x) { return x + 10 >= x; }" ) ;
4938: $if $(@expr1073745976 $!@expr1073745977 $assertEquals $(@expr1073745978 "cppcheck-2.8/test/testcondition.cpp" $, 4938 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4939:
4940: check (@expr1073745981 "int f(int x) { return x + 10 < x; }" ) ;
4941: $if $(@expr1073745982 $!@expr1073745983 $assertEquals $(@expr1073745984 "cppcheck-2.8/test/testcondition.cpp" $, 4941 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4942:
4943: check (@expr1073745987 "int f(int x) { return x + 10 <= x; }" ) ;
4944: $if $(@expr1073745988 $!@expr1073745989 $assertEquals $(@expr1073745990 "cppcheck-2.8/test/testcondition.cpp" $, 4944 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4945:
4946: check (@expr1073745993 "int f(int x) { return x - 10 > x; }" ) ;
4947: $if $(@expr1073745994 $!@expr1073745995 $assertEquals $(@expr1073745996 "cppcheck-2.8/test/testcondition.cpp" $, 4947 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4948:
4949: check (@expr1073745999 "int f(int x) { return x - 10 >= x; }" ) ;
4950: $if $(@expr1073746000 $!@expr1073746001 $assertEquals $(@expr1073746002 "cppcheck-2.8/test/testcondition.cpp" $, 4950 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4951:
4952: check (@expr1073746005 "int f(int x) { return x - 10 < x; }" ) ;
4953: $if $(@expr1073746006 $!@expr1073746007 $assertEquals $(@expr1073746008 "cppcheck-2.8/test/testcondition.cpp" $, 4953 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4954:
4955: check (@expr1073746011 "int f(int x) { return x - 10 <= x; }" ) ;
4956: $if $(@expr1073746012 $!@expr1073746013 $assertEquals $(@expr1073746014 "cppcheck-2.8/test/testcondition.cpp" $, 4956 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4957:
|
4961:
4962: check (@expr1073746017 "int f(int x, int y) { return x + y < x; }" ) ;
4963: $if $(@expr1073746018 $!@expr1073746019 $assertEquals $(@expr1073746020 "cppcheck-2.8/test/testcondition.cpp" $, 4963 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4964:
4965: check (@expr1073746023 "int f(int x, int y) { return x + y <= x; }" ) ;
4966: $if $(@expr1073746024 $!@expr1073746025 $assertEquals $(@expr1073746026 "cppcheck-2.8/test/testcondition.cpp" $, 4966 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4967:
4968: check (@expr1073746029 "int f(int x, int y) { return x + y > x; }" ) ;
4969: $if $(@expr1073746030 $!@expr1073746031 $assertEquals $(@expr1073746032 "cppcheck-2.8/test/testcondition.cpp" $, 4969 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4970:
4971: check (@expr1073746035 "int f(int x, int y) { return x + y >= x; }" ) ;
4972: $if $(@expr1073746036 $!@expr1073746037 $assertEquals $(@expr1073746038 "cppcheck-2.8/test/testcondition.cpp" $, 4972 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x+y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4973:
4974:
4975: check (@expr1073746041 "int f(int x, int y) { return x - y < x; }" ) ;
4976: $if $(@expr1073746042 $!@expr1073746043 $assertEquals $(@expr1073746044 "cppcheck-2.8/test/testcondition.cpp" $, 4976 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4977:
4978: check (@expr1073746047 "int f(int x, int y) { return x - y <= x; }" ) ;
4979: $if $(@expr1073746048 $!@expr1073746049 $assertEquals $(@expr1073746050 "cppcheck-2.8/test/testcondition.cpp" $, 4979 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4980:
4981: check (@expr1073746053 "int f(int x, int y) { return x - y > x; }" ) ;
4982: $if $(@expr1073746054 $!@expr1073746055 $assertEquals $(@expr1073746056 "cppcheck-2.8/test/testcondition.cpp" $, 4982 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4983:
4984: check (@expr1073746059 "int f(int x, int y) { return x - y >= x; }" ) ;
4985: $if $(@expr1073746060 $!@expr1073746061 $assertEquals $(@expr1073746062 "cppcheck-2.8/test/testcondition.cpp" $, 4985 $, $"[test.cpp:1]: (warning) Invalid test for overflow 'x-y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n" $, errout@var100 .@expr4119 str (@expr4120 ) $) $) { $return ; }
4986: }
4987:
4988: void checkConditionIsAlwaysTrueOrFalseInsideIfWhile ( ) {
4989: check (@expr1073746065 "void f() {\n    enum states {A,B,C};\n    const unsigned g_flags = B|C;\n    if(g_flags & A) {}\n}"
4990:
4991:
4992:
4993: ) ;
4994: $if $(@expr1073746066 $!@expr1073746067 $assertEquals $(@expr1073746068 "cppcheck-2.8/test/testcondition.cpp" $, 4994 $, "[test.cpp:4]: (style) Condition 'g_flags&A' is always false\n" $, errout@var100 .@expr4245 str (@expr4246 ) $) $) { $return ; }
4995:
4996: check (@expr1073746071 "void f() {\n    int a = 5;    if(a) {}\n}"
4997:
4998:
4999: ) ;
5000: $if $(@expr1073746072 $!@expr1073746073 $assertEquals $(@expr1073746074 "cppcheck-2.8/test/testcondition.cpp" $, 5000 $, "[test.cpp:2]: (style) Condition 'a' is always true\n" $, errout@var100 .@expr4245 str (@expr4246 ) $) $) { $return ; }
5001:
5002: check (@expr1073746077 "void f() {\n    int a = 5;    while(a + 1) { a--; }\n}"
5003:
5004:
5005: ) ;
5006: $if $(@expr1073746078 $!@expr1073746079 $assertEquals $(@expr1073746080 "cppcheck-2.8/test/testcondition.cpp" $, 5006 $, "" $, errout@var100 .@expr4245 str (@expr4246 ) $) $) { $return ; }
5007:
5008: check (@expr1073746083 "void f() {\n    int a = 5;    while(a + 1) { return; }\n}"
5009:
5010:
5011: ) ;
5012: $if $(@expr1073746084 $!@expr1073746085 $assertEquals $(@expr1073746086 "cppcheck-2.8/test/testcondition.cpp" $, 5012 $, "[test.cpp:2]: (style) Condition 'a+1' is always true\n" $, errout@var100 .@expr4245 str (@expr4246 ) $) $) { $return ; }
5013: }
5014:
5015: void alwaysTrueFalseInLogicalOperators ( ) {
5016: check (@expr1073746089 "bool f();\nvoid foo() { bool x = true; if(x||f()) {}}"
5017: ) ;
5018: $if $(@expr1073746090 $!@expr1073746091 $assertEquals $(@expr1073746092 "cppcheck-2.8/test/testcondition.cpp" $, 5018 $, "[test.cpp:2]: (style) Condition 'x' is always true\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5019:
5020: check (@expr1073746095 "void foo(bool b) { bool x = true; if(x||b) {}}" ) ;
5021: $if $(@expr1073746096 $!@expr1073746097 $assertEquals $(@expr1073746098 "cppcheck-2.8/test/testcondition.cpp" $, 5021 $, "[test.cpp:1]: (style) Condition 'x' is always true\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5022:
5023: check (@expr1073746101 "void foo(bool b) { if(true||b) {}}" ) ;
5024: $if $(@expr1073746102 $!@expr1073746103 $assertEquals $(@expr1073746104 "cppcheck-2.8/test/testcondition.cpp" $, 5024 $, "" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5025:
5026: check (@expr1073746107 "bool f();\nvoid foo() { bool x = false; if(x||f()) {}}"
5027: ) ;
5028: $if $(@expr1073746108 $!@expr1073746109 $assertEquals $(@expr1073746110 "cppcheck-2.8/test/testcondition.cpp" $, 5028 $, "[test.cpp:2]: (style) Condition 'x' is always false\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5029:
5030: check (@expr1073746113 "bool f();\nvoid foo() { bool x = false; if(x&&f()) {}}"
5031: ) ;
5032: $if $(@expr1073746114 $!@expr1073746115 $assertEquals $(@expr1073746116 "cppcheck-2.8/test/testcondition.cpp" $, 5032 $, "[test.cpp:2]: (style) Condition 'x' is always false\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5033:
5034: check (@expr1073746119 "void foo(bool b) { bool x = false; if(x&&b) {}}" ) ;
5035: $if $(@expr1073746120 $!@expr1073746121 $assertEquals $(@expr1073746122 "cppcheck-2.8/test/testcondition.cpp" $, 5035 $, "[test.cpp:1]: (style) Condition 'x' is always false\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5036:
5037: check (@expr1073746125 "void foo(bool b) { if(false&&b) {}}" ) ;
5038: $if $(@expr1073746126 $!@expr1073746127 $assertEquals $(@expr1073746128 "cppcheck-2.8/test/testcondition.cpp" $, 5038 $, "" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5039:
5040: check (@expr1073746131 "bool f();\nvoid foo() { bool x = true; if(x&&f()) {}}"
5041: ) ;
5042: $if $(@expr1073746132 $!@expr1073746133 $assertEquals $(@expr1073746134 "cppcheck-2.8/test/testcondition.cpp" $, 5042 $, "[test.cpp:2]: (style) Condition 'x' is always true\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5043:
5044:
5045: check (@expr1073746137 "bool f(const std::string &s) {\n        return s.size()>2U && s[0]=='4' && s[0]=='2';\n}\n"
5046:
5047: ) ;
5048: $if $(@expr1073746138 $!@expr1073746139 $assertEquals $(@expr1073746140 "cppcheck-2.8/test/testcondition.cpp" $, 5048 $, "[test.cpp:2] -> [test.cpp:2]: (style) Condition 's[0]=='2'' is always false\n" $, errout@var100 .@expr4269 str (@expr4270 ) $) $) { $return ; }
5049: }
5050:
5051: void pointerAdditionResultNotNull ( ) {
5052: check (@expr1073746143 "void f(char *ptr) {\n  if (ptr + 1 != 0);\n}"
5053:
5054: ) ;
5055: $if $(@expr1073746144 $!@expr1073746145 $assertEquals $(@expr1073746146 "cppcheck-2.8/test/testcondition.cpp" $, 5055 $, "[test.cpp:2]: (warning) Comparison is wrong. Result of 'ptr+1' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.\n" $, errout@var100 .@expr1073746147 str (@expr1073746148 ) $) $) { $return ; }
5056: }
5057:
5058: void duplicateConditionalAssign ( ) {
5059: setMultiline (@expr1073746149 ) ;
5060:
5061: check (@expr1073746150 "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n}"
5062:
5063:
5064: ) ;
5065: $if $(@expr1073746151 $!@expr1073746152 $assertEquals $(@expr1073746153 "cppcheck-2.8/test/testcondition.cpp" $, 5065 $, "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return
5066:
5067: ; }
5068:
5069: check (@expr1073746156 "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n}"
5070:
5071:
5072: ) ;
5073: $if $(@expr1073746157 $!@expr1073746158 $assertEquals $(@expr1073746159 "cppcheck-2.8/test/testcondition.cpp" $, 5073 $, "test.cpp:2:style:The statement 'if (x!=y) x=y' is logically equivalent to 'x=y'.\ntest.cpp:3:note:Assignment 'x=y'\ntest.cpp:2:note:Condition 'x!=y' is redundant\n" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return
5074:
5075: ; }
5076:
5077: check (@expr1073746162 "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n    else\n        x = 1;\n}"
5078:
|
5081:
5082: ) ;
5083: $if $(@expr1073746163 $!@expr1073746164 $assertEquals $(@expr1073746165 "cppcheck-2.8/test/testcondition.cpp" $, 5083 $, "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return
5084:
5085: ; }
5086:
5087: check (@expr1073746168 "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n    else\n        x = 1;\n}"
5088:
|
5091:
5092: ) ;
5093: $if $(@expr1073746169 $!@expr1073746170 $assertEquals $(@expr1073746171 "cppcheck-2.8/test/testcondition.cpp" $, 5093 $, "" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return ; }
5094:
5095: check (@expr1073746174 "void f(int& x, int y) {\n    if (x == y)\n        x = y + 1;\n}"
5096:
5097:
5098: ) ;
5099: $if $(@expr1073746175 $!@expr1073746176 $assertEquals $(@expr1073746177 "cppcheck-2.8/test/testcondition.cpp" $, 5099 $, "" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return ; }
5100:
5101: check (@expr1073746180 "void g();\nvoid f(int& x, int y) {\n    if (x == y) {\n        x = y;\n        g();\n    }\n}"
5102:
|
5106:
5107: ) ;
5108: $if $(@expr1073746181 $!@expr1073746182 $assertEquals $(@expr1073746183 "cppcheck-2.8/test/testcondition.cpp" $, 5108 $, "" $, errout@var100 .@expr4330 str (@expr4331 ) $) $) { $return ; }
5109: }
5110:
5111: void checkAssignmentInCondition ( ) {
5112: check (@expr1073746186 "void f(std::string s) {\n    if (s=\"123\"){}\n}"
5113:
5114: ) ;
5115: $if $(@expr1073746187 $!@expr1073746188 $assertEquals $(@expr1073746189 "cppcheck-2.8/test/testcondition.cpp" $, 5115 $, "[test.cpp:2]: (style) Suspicious assignment in condition. Condition 's=\"123\"' is always true.\n" $, errout@var100 .@expr4366 str (@expr4367 ) $) $) { $return ; }
5116:
5117: check (@expr1073746192 "void f(std::string *p) {\n    if (p=foo()){}\n}"
5118:
5119: ) ;
5120: $if $(@expr1073746193 $!@expr1073746194 $assertEquals $(@expr1073746195 "cppcheck-2.8/test/testcondition.cpp" $, 5120 $, "" $, errout@var100 .@expr4366 str (@expr4367 ) $) $) { $return ; }
5121: }
5122:
5123: void compareOutOfTypeRange ( ) {
5124: Settings settingsUnix64@var131 ;
5125: settingsUnix64@var131 .@expr1073746200 severity@var132 .@expr1073746201 enable (@expr1073746202 Severity ::@expr1073746203 style@expr1073746198 ) ;
5126: settingsUnix64@var131 .@expr1073746204 platform (@expr1073746205 cppcheck ::@expr1073746206 Platform ::@expr1073746207 PlatformType ::@expr1073746208 Unix64@expr1073746199 ) ;
5127:
5128: check (@expr1073746209 "void f(unsigned char c) {\n  if (c == 256) {}\n}"
5129:
5130: , &@expr4386 settingsUnix64@var131 ) ;
5131: $if $(@expr1073746211 $!@expr1073746212 $assertEquals $(@expr1073746213 "cppcheck-2.8/test/testcondition.cpp" $, 5131 $, "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5132:
5133: check (@expr1073746216 "void f(unsigned char* b, int i) {\n  if (b[i] == 256) {}\n}"
5134:
5135: , &@expr4386 settingsUnix64@var131 ) ;
5136: $if $(@expr1073746218 $!@expr1073746219 $assertEquals $(@expr1073746220 "cppcheck-2.8/test/testcondition.cpp" $, 5136 $, "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5137:
5138: check (@expr1073746223 "void f(unsigned char c) {\n  if (c == 255) {}\n}"
5139:
5140: , &@expr4386 settingsUnix64@var131 ) ;
5141: $if $(@expr1073746225 $!@expr1073746226 $assertEquals $(@expr1073746227 "cppcheck-2.8/test/testcondition.cpp" $, 5141 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5142:
5143: check (@expr1073746230 "void f(bool b) {\n  if (b == true) {}\n}"
5144:
5145: , &@expr4386 settingsUnix64@var131 ) ;
5146: $if $(@expr1073746232 $!@expr1073746233 $assertEquals $(@expr1073746234 "cppcheck-2.8/test/testcondition.cpp" $, 5146 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5147:
5148:
5149: check (@expr1073746237 "void f(signed char x) {\n  if (x == 0xff) {}\n}"
5150:
5151: , &@expr4386 settingsUnix64@var131 ) ;
5152: $if $(@expr1073746239 $!@expr1073746240 $assertEquals $(@expr1073746241 "cppcheck-2.8/test/testcondition.cpp" $, 5152 $, "[test.cpp:2]: (style) Comparing expression of type 'signed char' against value 255. Condition is always false.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5153:
5154: check (@expr1073746244 "void f(short x) {\n  if (x == 0xffff) {}\n}"
5155:
5156: , &@expr4386 settingsUnix64@var131 ) ;
5157: $if $(@expr1073746246 $!@expr1073746247 $assertEquals $(@expr1073746248 "cppcheck-2.8/test/testcondition.cpp" $, 5157 $, "[test.cpp:2]: (style) Comparing expression of type 'signed short' against value 65535. Condition is always false.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5158:
5159: check (@expr1073746251 "void f(int x) {\n  if (x == 0xffffffff) {}\n}"
5160:
5161: , &@expr4386 settingsUnix64@var131 ) ;
5162: $if $(@expr1073746253 $!@expr1073746254 $assertEquals $(@expr1073746255 "cppcheck-2.8/test/testcondition.cpp" $, 5162 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5163:
5164: check (@expr1073746258 "void f(long x) {\n  if (x == ~0L) {}\n}"
5165:
5166: , &@expr4386 settingsUnix64@var131 ) ;
5167: $if $(@expr1073746260 $!@expr1073746261 $assertEquals $(@expr1073746262 "cppcheck-2.8/test/testcondition.cpp" $, 5167 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5168:
5169: check (@expr1073746265 "void f(long long x) {\n  if (x == ~0LL) {}\n}"
5170:
5171: , &@expr4386 settingsUnix64@var131 ) ;
5172: $if $(@expr1073746267 $!@expr1073746268 $assertEquals $(@expr1073746269 "cppcheck-2.8/test/testcondition.cpp" $, 5172 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5173:
5174: check (@expr1073746272 "void f() {\n  char c;\n  if ((c = foo()) != -1) {}\n}"
5175:
5176:
5177: , &@expr4386 settingsUnix64@var131 ) ;
5178: $if $(@expr1073746274 $!@expr1073746275 $assertEquals $(@expr1073746276 "cppcheck-2.8/test/testcondition.cpp" $, 5178 $, "" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5179:
5180: check (@expr1073746279 "void f(int x) {\n  if (x < 3000000000) {}\n}"
5181:
5182: , &@expr4386 settingsUnix64@var131 ) ;
5183: $if $(@expr1073746281 $!@expr1073746282 $assertEquals $(@expr1073746283 "cppcheck-2.8/test/testcondition.cpp" $, 5183 $, "[test.cpp:2]: (style) Comparing expression of type 'signed int' against value 3000000000. Condition is always true.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return ; }
5184:
5185: check (@expr1073746286 "void f(const signed char i) {\n    if (i >  -129) {}\n    if (i >= -128) {}\n    if (i >= -127) {}\n    if (i <  +128) {}\n    if (i <= +127) {}\n    if (i <= +126) {}\n}\n"
5186:
|
5191:
5192: , &@expr4386 settingsUnix64@var131 ) ;
5193: $if $(@expr1073746288 $!@expr1073746289 $assertEquals $(@expr1073746290 "cppcheck-2.8/test/testcondition.cpp" $, 5193 $, "[test.cpp:2]: (style) Comparing expression of type 'const signed char' against value -129. Condition is always true.\n[test.cpp:3]: (style) Comparing expression of type 'const signed char' against value -128. Condition is always true.\n[test.cpp:5]: (style) Comparing expression of type 'const signed char' against value 128. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const signed char' against value 127. Condition is always true.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return
5194:
5195:
5196:
5197: ; }
5198:
5199: check (@expr1073746293 "void f(const unsigned char u) {\n    if (u >  0) {}\n    if (u <  0) {}\n    if (u >= 0) {}\n    if (u <= 0) {}\n    if (u >  255) {}\n    if (u <  255) {}\n    if (u >= 255) {}\n    if (u <= 255) {}\n    if (0   <  u) {}\n    if (0   >  u) {}\n    if (0   <= u) {}\n    if (0   >= u) {}\n    if (255 <  u) {}\n    if (255 >  u) {}\n    if (255 <= u) {}\n    if (255 >= u) {}\n}\n"
5200:
|
5215:
5216: , &@expr4386 settingsUnix64@var131 ) ;
5217: $if $(@expr1073746295 $!@expr1073746296 $assertEquals $(@expr1073746297 "cppcheck-2.8/test/testcondition.cpp" $, 5217 $, "[test.cpp:3]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:4]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:9]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n[test.cpp:11]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:12]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:14]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:17]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n" $, errout@var100 .@expr4390 str (@expr4391 ) $) $) { $return
5218:
|
5224:
5225: ; }
5226: }
5227:
5228: void knownConditionCast ( ) {
5229: check (@expr1073746300 "void f(int i) {\n    if (i < 0 || (unsigned)i > 5) {}\n}\n"
5230:
5231: ) ;
5232: $if $(@expr1073746301 $!@expr1073746302 $assertEquals $(@expr1073746303 "cppcheck-2.8/test/testcondition.cpp" $, 5232 $, "" $, errout@var100 .@expr1073746304 str (@expr1073746305 ) $) $) { $return ; }
5233: }
5234:
5235: void knownConditionIncrementLoop ( ) {
5236: check (@expr1073746306 "void f() {\n    int a = 0;\n    while (++a < 5) {}\n    if (a == 1) {}\n    std::cout << a;\n}\n"
5237:
|
5240:
5241: ) ;
5242: $if $(@expr1073746307 $!@expr1073746308 $assertEquals $(@expr1073746309 "cppcheck-2.8/test/testcondition.cpp" $, 5242 $, "" $, errout@var100 .@expr1073746310 str (@expr1073746311 ) $) $) { $return ; }
5243: }
5244: } ;
5245:
5246: $namespace ${ TestCondition instance_TestCondition@var133 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@137}
  v {!<=-1,!>=2,0@137}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 40
  "TestCondition" always "TestCondition"
Line 51
  ( {lifetime[Object]=(exename),!0}
  "qt.cfg" always "qt.cfg"
  != always {!<=-1,!>=2}
  "qt.cfg" always "qt.cfg"
  false always 0
Line 52
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 57
  79 always 79
  = always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>"
Line 62
  cfg always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>"
  sizeof always 79
  ( always 79
  cfg always "<?xml version=\"1.0\"?>\n<def>\n  <function name=\"bar\"> <pure/> </function>\n</def>"
Line 67
  ( always {!<=-1,!>=2}
  "assignAndCompare" always "assignAndCompare"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "mismatchingBitAnd" always "mismatchingBitAnd"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "comparison" always "comparison"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "multicompare" always "multicompare"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "overlappingElseIfCondition" always "overlappingElseIfCondition"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "oppositeElseIfCondition" always "oppositeElseIfCondition"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "checkBadBitmaskCheck" always "checkBadBitmaskCheck"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator1" always "incorrectLogicOperator1"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator2" always "incorrectLogicOperator2"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator3" always "incorrectLogicOperator3"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator4" always "incorrectLogicOperator4"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator5" always "incorrectLogicOperator5"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator6" always "incorrectLogicOperator6"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator7" always "incorrectLogicOperator7"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator8" always "incorrectLogicOperator8"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator9" always "incorrectLogicOperator9"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator10" always "incorrectLogicOperator10"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator11" always "incorrectLogicOperator11"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator12" always "incorrectLogicOperator12"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator13" always "incorrectLogicOperator13"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator14" always "incorrectLogicOperator14"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator15" always "incorrectLogicOperator15"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "incorrectLogicOperator16" always "incorrectLogicOperator16"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "secondAlwaysTrueFalseWhenFirstTrueError" always "secondAlwaysTrueFalseWhenFirstTrueError"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "incorrectLogicOp_condSwapping" always "incorrectLogicOp_condSwapping"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "testBug5895" always "testBug5895"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "testBug5309" always "testBug5309"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "modulo" always "modulo"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "oppositeInnerCondition" always "oppositeInnerCondition"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionPointers" always "oppositeInnerConditionPointers"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionClass" always "oppositeInnerConditionClass"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionUndeclaredVariable" always "oppositeInnerConditionUndeclaredVariable"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionAlias" always "oppositeInnerConditionAlias"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "oppositeInnerCondition2" always "oppositeInnerCondition2"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "oppositeInnerCondition3" always "oppositeInnerCondition3"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionAnd" always "oppositeInnerConditionAnd"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionEmpty" always "oppositeInnerConditionEmpty"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "oppositeInnerConditionFollowVar" always "oppositeInnerConditionFollowVar"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "identicalInnerCondition" always "identicalInnerCondition"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "identicalConditionAfterEarlyExit" always "identicalConditionAfterEarlyExit"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "innerConditionModified" always "innerConditionModified"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "clarifyCondition1" always "clarifyCondition1"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "clarifyCondition2" always "clarifyCondition2"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "clarifyCondition3" always "clarifyCondition3"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "clarifyCondition4" always "clarifyCondition4"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "clarifyCondition5" always "clarifyCondition5"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "clarifyCondition6" always "clarifyCondition6"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "clarifyCondition7" always "clarifyCondition7"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "clarifyCondition8" always "clarifyCondition8"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "alwaysTrue" always "alwaysTrue"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "alwaysTrueSymbolic" always "alwaysTrueSymbolic"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "alwaysTrueInfer" always "alwaysTrueInfer"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "alwaysTrueContainer" always "alwaysTrueContainer"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "alwaysTrueLoop" always "alwaysTrueLoop"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "alwaysTrueTryCatch" always "alwaysTrueTryCatch"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "multiConditionAlwaysTrue" always "multiConditionAlwaysTrue"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "duplicateCondition" always "duplicateCondition"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "checkInvalidTestForOverflow" always "checkInvalidTestForOverflow"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "checkConditionIsAlwaysTrueOrFalseInsideIfWhile" always "checkConditionIsAlwaysTrueOrFalseInsideIfWhile"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "alwaysTrueFalseInLogicalOperators" always "alwaysTrueFalseInLogicalOperators"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "pointerAdditionResultNotNull" always "pointerAdditionResultNotNull"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "duplicateConditionalAssign" always "duplicateConditionalAssign"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "checkAssignmentInCondition" always "checkAssignmentInCondition"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "compareOutOfTypeRange" always "compareOutOfTypeRange"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "knownConditionCast" always "knownConditionCast"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "knownConditionIncrementLoop" always "knownConditionIncrementLoop"
  false always 0
  false always 0
Line 145
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
Line 147
  "" always ""
Line 150
  1 always 1
  filename possible "test.cpp"
Line 151
  code possible {"void f(unsigned char c) {\n  if (c == 256) {}\n}"@3,"void f(unsigned char* b, int i) {\n  if (b[i] == 256) {}\n}"@4,"void f(unsigned char c) {\n  if (c == 255) {}\n}"@5,"void f(bool b) {\n  if (b == true) {}\n}"@6,"void f(signed char x) {\n  if (x == 0xff) {}\n}"@7,"void f(short x) {\n  if (x == 0xffff) {}\n}"@8,"void f(int x) {\n  if (x == 0xffffffff) {}\n}"@9,"void f(long x) {\n  if (x == ~0L) {}\n}"@10,"void f(long long x) {\n  if (x == ~0LL) {}\n}"@11,"void f() {\n  char c;\n  if ((c = foo()) != -1) {}\n}"@12}
Line 152
  files always size=1
  0 always 0
Line 157
  filedata always size=0
Line 159
  settings inconclusive {lifetime[Address]=(settingsUnix64)@3,lifetime[Address]=(settingsUnix64)@4,lifetime[Address]=(settingsUnix64)@5,lifetime[Address]=(settingsUnix64)@6,lifetime[Address]=(settingsUnix64)@7,lifetime[Address]=(settingsUnix64)@8,lifetime[Address]=(settingsUnix64)@9,lifetime[Address]=(settingsUnix64)@10,lifetime[Address]=(settingsUnix64)@11,lifetime[Address]=(settingsUnix64)@12}
  nullptr always 0
Line 163
  settings inconclusive {lifetime[Address]=(settingsUnix64)@3,lifetime[Address]=(settingsUnix64)@4,lifetime[Address]=(settingsUnix64)@5,lifetime[Address]=(settingsUnix64)@6,lifetime[Address]=(settingsUnix64)@7,lifetime[Address]=(settingsUnix64)@8,lifetime[Address]=(settingsUnix64)@9,lifetime[Address]=(settingsUnix64)@10,lifetime[Address]=(settingsUnix64)@11,lifetime[Address]=(settingsUnix64)@12}
  this always !0
Line 165
  "" always ""
Line 166
  & {lifetime[Address]=(preprocessor),!0}
Line 170
  & {lifetime[Address]=(tokenizer),!0}
  settings inconclusive {lifetime[Address]=(settingsUnix64)@3,lifetime[Address]=(settingsUnix64)@4,lifetime[Address]=(settingsUnix64)@5,lifetime[Address]=(settingsUnix64)@6,lifetime[Address]=(settingsUnix64)@7,lifetime[Address]=(settingsUnix64)@8,lifetime[Address]=(settingsUnix64)@9,lifetime[Address]=(settingsUnix64)@10,lifetime[Address]=(settingsUnix64)@11,lifetime[Address]=(settingsUnix64)@12}
  this always !0
Line 173
  , always "test.cpp"
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 0
  inconclusive always {!<=-1,!>=2}
  = always 0
  false always 0
Line 174
  inconclusive {!<=-1,!>=2,1@219,0@223}
Line 175
  code possible {"void f() {\n    int a = 0;\n    while (++a < 5) {}\n    if (a == 1) {}\n    std::cout << a;\n}\n"@1,"void f(int i) {\n    if (i < 0 || (unsigned)i > 5) {}\n}\n"@2,"void f(std::string s) {\n    if (s=\"123\"){}\n}"@16,"void f(std::string *p) {\n    if (p=foo()){}\n}"@17,"void f(int& x, int y) {\n    if (x == y)\n        x = y;\n}"@19,"void f(int& x, int y) {\n    if (x != y)\n        x = y;\n}"@20,"void f(int& x, int y) {\n    if (x == y)\n        x = y;\n    else\n        x = 1;\n}"@21,"void f(int& x, int y) {\n    if (x != y)\n        x = y;\n    else\n        x = 1;\n}"@22,"void f(int& x, int y) {\n    if (x == y)\n        x = y + 1;\n}"@23,"void g();\nvoid f(int& x, int y) {\n    if (x == y) {\n        x = y;\n        g();\n    }\n}"@24}
  & {lifetime[Address]=(settings0),!0}
  filename {"test.c"@27,"test.cpp"@28,"test.cpp"@219,"test.cpp"@220,"test.cpp"@221,"test.cpp"@222,"test.cpp"@223,"test.cpp"}
Line 180
  "void foo(int x)\n{\n    int y = x & 4;\n    if (y == 3);\n}" always "void foo(int x)\n{\n    int y = x & 4;\n    if (y == 3);\n}"
Line 185
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  185 always 185
  "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n"
Line 187
  "void foo(int x)\n{\n    int y = x & 4;\n    if (y != 3);\n}" always "void foo(int x)\n{\n    int y = x & 4;\n    if (y != 3);\n}"
Line 192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  192 always 192
  "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y!=3' is always true.\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y!=3' is always true.\n"
Line 195
  "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x710);\n}" always "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x710);\n}"
Line 199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  199 always 199
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==0x710' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==0x710' is always false.\n"
Line 201
  "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x71f);\n}" always "void foo(int x) {\n    int y = x | 0x14;\n    if (y == 0x71f);\n}"
Line 205
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  205 always 205
  "" always ""
Line 208
  "void foo(int x) {\n    int y = (x+1) | 1;\n    if (y == 2);\n}" always "void foo(int x) {\n    int y = (x+1) | 1;\n    if (y == 2);\n}"
Line 212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  212 always 212
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n"
Line 214
  "void foo() {\n    int y = 1 | x();\n    if (y == 2);\n}" always "void foo() {\n    int y = 1 | x();\n    if (y == 2);\n}"
Line 218
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  218 always 218
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==2' is always false.\n"
Line 221
  "void foo(int x) {\n    int y = x & 4;\n    if ((y == 3) && (z == 1));\n}" always "void foo(int x) {\n    int y = x & 4;\n    if ((y == 3) && (z == 1));\n}"
Line 225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  225 always 225
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n"
Line 227
  "void foo(int x) {\n    int y = x & 4;\n    if ((x==123) || ((y == 3) && (z == 1)));\n}" always "void foo(int x) {\n    int y = x & 4;\n    if ((x==123) || ((y == 3) && (z == 1)));\n}"
Line 231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  231 always 231
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==3' is always false.\n"
Line 233
  "void f(int x) {\n    int y = x & 7;\n    if (setvalue(&y) && y != 8);\n}" always "void f(int x) {\n    int y = x & 7;\n    if (setvalue(&y) && y != 8);\n}"
Line 237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  237 always 237
  "" always ""
Line 240
  "void f(int x) {\n    int y = x & 7;\n    if (z) y=0;\n    else { if (y==8); }\n}" always "void f(int x) {\n    int y = x & 7;\n    if (z) y=0;\n    else { if (y==8); }\n}"
Line 245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  245 always 245
  "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n"
Line 248
  "void f(int x) {\n    int y = x & 7;\n    while (y==8);\n}" always "void f(int x) {\n    int y = x & 7;\n    while (y==8);\n}"
Line 252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  252 always 252
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n"
Line 254
  "void f(int x) {\n    extern int y; y = x & 7;\n    while (y==8);\n}" always "void f(int x) {\n    extern int y; y = x & 7;\n    while (y==8);\n}"
Line 258
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  258 always 258
  "" always ""
Line 260
  "void f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) y--;\n    }\n}" always "void f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) y--;\n    }\n}"
Line 267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  267 always 267
  "" always ""
Line 269
  "void g(int x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}" always "void g(int x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}"
Line 277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  277 always 277
  "[test.cpp:5] -> [test.cpp:6]: (style) Mismatching assignment and comparison, comparison 'y!=0' is always true.\n" always "[test.cpp:5] -> [test.cpp:6]: (style) Mismatching assignment and comparison, comparison 'y!=0' is always true.\n"
Line 281
  "void g(int &x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}" always "void g(int &x);\nvoid f(int x) {\n    int a = 100;\n    while (x) {\n        int y = 16 | a;\n        while (y != 0) g(y);\n    }\n}"
Line 289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  289 always 289
  "" always ""
Line 292
  "void f(int x) {\n    int y = x & 7;\n    do_something();\n    if (y==8);\n}" always "void f(int x) {\n    int y = x & 7;\n    do_something();\n    if (y==8);\n}"
Line 297
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  297 always 297
  "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n"
Line 299
  "void f(int x) {\n    int y = x & 7;\n    do_something(&y);\n    if (y==8);\n}" always "void f(int x) {\n    int y = x & 7;\n    do_something(&y);\n    if (y==8);\n}"
Line 304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  304 always 304
  "" always ""
Line 306
  "void do_something(int);\nvoid f(int x) {\n    int y = x & 7;\n    do_something(y);\n    if (y==8);\n}" always "void do_something(int);\nvoid f(int x) {\n    int y = x & 7;\n    do_something(y);\n    if (y==8);\n}"
Line 312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  312 always 312
  "[test.cpp:3] -> [test.cpp:5]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n" always "[test.cpp:3] -> [test.cpp:5]: (style) Mismatching assignment and comparison, comparison 'y==8' is always false.\n"
Line 314
  "void f(int x) {\n    extern int y; y = x & 7;\n    do_something();\n    if (y==8);\n}" always "void f(int x) {\n    extern int y; y = x & 7;\n    do_something();\n    if (y==8);\n}"
Line 319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  319 always 319
  "" always ""
Line 322
  "void f(int x) {\n    x = x & 1;\n    x = x & 1 ? 1 : -1;\n    if(x != -1) { }\n}" always "void f(int x) {\n    x = x & 1;\n    x = x & 1 ? 1 : -1;\n    if(x != -1) { }\n}"
Line 327
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  327 always 327
  "" always ""
Line 330
  "void f() {\n    int x = *(char*)&0x12345678;\n    if (x==18) { }\n}" always "void f() {\n    int x = *(char*)&0x12345678;\n    if (x==18) { }\n}"
Line 334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  334 always 334
  "" always ""
Line 337
  "void foo(int x) {\n    y = 2 | x;\n    if(y == 1) {}\n}" always "void foo(int x) {\n    y = 2 | x;\n    if(y == 1) {}\n}"
Line 341
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  341 always 341
  "" always ""
Line 344
  "void foo(int x) {\n    int y = -2 | x;\n    if (y==1) {}\n}" always "void foo(int x) {\n    int y = -2 | x;\n    if (y==1) {}\n}"
Line 348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  348 always 348
  "" always ""
Line 351
  "void foo(int x) {\n    int y = 2 | x;\n    bar(&y);\n    if (y==1) {}\n}" always "void foo(int x) {\n    int y = 2 | x;\n    bar(&y);\n    if (y==1) {}\n}"
Line 356
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  356 always 356
  "" always ""
Line 359
  "SdrObject* ApplyGraphicToObject() {\n    if (&rHitObject) {}\n    else if (rHitObject.IsClosedObj() && !&rHitObject) { }\n}" always "SdrObject* ApplyGraphicToObject() {\n    if (&rHitObject) {}\n    else if (rHitObject.IsClosedObj() && !&rHitObject) { }\n}"
Line 363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  363 always 363
  "" always ""
Line 366
  "void f(int a0, int n) {\n  int c = a0 & 3;\n  for (int a = 0; a < n; a++) {\n    c++;\n    if (c == 4)\n      c  = 0;\n  }\n}" always "void f(int a0, int n) {\n  int c = a0 & 3;\n  for (int a = 0; a < n; a++) {\n    c++;\n    if (c == 4)\n      c  = 0;\n  }\n}"
Line 374
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  374 always 374
  "" always ""
Line 376
  "void f(int a) {\n  int x = a & 1;\n  while (x <= 4) {\n    if (x != 5) {}\n  }\n}" always "void f(int a) {\n  int x = a & 1;\n  while (x <= 4) {\n    if (x != 5) {}\n  }\n}"
Line 382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  382 always 382
  "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'x!=5' is always true.\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Mismatching assignment and comparison, comparison 'x!=5' is always true.\n"
Line 384
  "void f(int a) {\n  int x = a & 1;\n  while ((x += 4) < 10) {\n    if (x != 5) {}\n  }\n}" always "void f(int a) {\n  int x = a & 1;\n  while ((x += 4) < 10) {\n    if (x != 5) {}\n  }\n}"
Line 390
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  390 always 390
  "" always ""
Line 392
  "void f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}" always "void f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
Line 398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  398 always 398
  "" always ""
Line 400
  "void g(int x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}" always "void g(int x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
Line 407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  407 always 407
  "[test.cpp:4]: (style) Condition 'x' is always true\n" always "[test.cpp:4]: (style) Condition 'x' is always true\n"
Line 409
  "void g(int & x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}" always "void g(int & x);\nvoid f() {\n    int x = 100;\n    while (x) {\n        g(x);\n    }\n}"
Line 416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  416 always 416
  "" always ""
Line 421
  "void f(int a) {\n    int b = a & 0xf0;\n    b &= 1;\n}" always "void f(int a) {\n    int b = a & 0xf0;\n    b &= 1;\n}"
Line 425
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  425 always 425
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n"
Line 427
  "void f(int a) {\n    int b = a & 0xf0;\n    int c = b & 1;\n}" always "void f(int a) {\n    int b = a & 0xf0;\n    int c = b & 1;\n}"
Line 431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  431 always 431
  "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Mismatching bitmasks. Result is always 0 (X = Y & 0xf0; Z = X & 0x1; => Z=0).\n"
Line 433
  "void f(int a) {\n    int b = a;    switch (x) {\n    case 1: b &= 1; break;\n    case 2: b &= 2; break;\n    };\n}" always "void f(int a) {\n    int b = a;    switch (x) {\n    case 1: b &= 1; break;\n    case 2: b &= 2; break;\n    };\n}"
Line 440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  440 always 440
  "" always ""
Line 446
  "void f(int a) {\n assert( (a & 0x07) == 8U );\n}" always "void f(int a) {\n assert( (a & 0x07) == 8U );\n}"
Line 447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  447 always 447
  "[test.cpp:2]: (style) Expression '(X & 0x7) == 0x8' is always false.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) == 0x8' is always false.\n"
Line 448
  "void f(int a) {\n assert( (a & b & 4 & c ) == 3 );\n}" always "void f(int a) {\n assert( (a & b & 4 & c ) == 3 );\n}"
Line 449
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  449 always 449
  "[test.cpp:2]: (style) Expression '(X & 0x4) == 0x3' is always false.\n" always "[test.cpp:2]: (style) Expression '(X & 0x4) == 0x3' is always false.\n"
Line 450
  "void f(int a) {\n assert( (a | 0x07) == 8U );\n}" always "void f(int a) {\n assert( (a | 0x07) == 8U );\n}"
Line 451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  451 always 451
  "[test.cpp:2]: (style) Expression '(X | 0x7) == 0x8' is always false.\n" always "[test.cpp:2]: (style) Expression '(X | 0x7) == 0x8' is always false.\n"
Line 452
  "void f(int a) {\n assert( (a & 0x07) == 7U );\n}" always "void f(int a) {\n assert( (a & 0x07) == 7U );\n}"
Line 453
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  453 always 453
  "" always ""
Line 454
  "void f(int a) {\n assert( (a | 0x01) == -15 );\n}" always "void f(int a) {\n assert( (a | 0x01) == -15 );\n}"
Line 455
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  455 always 455
  "" always ""
Line 457
  "void f(int a) {\n assert( (a & 0x07) != 8U );\n}" always "void f(int a) {\n assert( (a & 0x07) != 8U );\n}"
Line 458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  458 always 458
  "[test.cpp:2]: (style) Expression '(X & 0x7) != 0x8' is always true.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) != 0x8' is always true.\n"
Line 459
  "void f(int a) {\n assert( (a | 0x07) != 8U );\n}" always "void f(int a) {\n assert( (a | 0x07) != 8U );\n}"
Line 460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  460 always 460
  "[test.cpp:2]: (style) Expression '(X | 0x7) != 0x8' is always true.\n" always "[test.cpp:2]: (style) Expression '(X | 0x7) != 0x8' is always true.\n"
Line 461
  "void f(int a) {\n assert( (a & 0x07) != 7U );\n}" always "void f(int a) {\n assert( (a & 0x07) != 7U );\n}"
Line 462
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  462 always 462
  "" always ""
Line 463
  "void f(int a) {\n assert( (a | 0x07) != 7U );\n}" always "void f(int a) {\n assert( (a | 0x07) != 7U );\n}"
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  464 always 464
  "" always ""
Line 466
  "void f(int a) {\n assert( (a & 0x07) >= 8U );\n}" always "void f(int a) {\n assert( (a & 0x07) >= 8U );\n}"
Line 467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  467 always 467
  "[test.cpp:2]: (style) Expression '(X & 0x7) >= 0x8' is always false.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) >= 0x8' is always false.\n"
Line 468
  "void f(unsigned int a) {\n assert( (a | 0x7) >= 7U );\n}" always "void f(unsigned int a) {\n assert( (a | 0x7) >= 7U );\n}"
Line 469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  469 always 469
  "[test.cpp:2]: (style) Expression '(X | 0x7) >= 0x7' is always true.\n" always "[test.cpp:2]: (style) Expression '(X | 0x7) >= 0x7' is always true.\n"
Line 470
  "void f(int a) {\n assert( (a & 0x07) >= 7U );\n}" always "void f(int a) {\n assert( (a & 0x07) >= 7U );\n}"
Line 471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  471 always 471
  "" always ""
Line 472
  "void f(int a) {\n assert( (a | 0x07) >= 8U );\n}" always "void f(int a) {\n assert( (a | 0x07) >= 8U );\n}"
Line 473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  473 always 473
  "" always ""
Line 475
  "void f(int a) {\n assert( (a & 0x07) > 7U );\n}" always "void f(int a) {\n assert( (a & 0x07) > 7U );\n}"
Line 476
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  476 always 476
  "[test.cpp:2]: (style) Expression '(X & 0x7) > 0x7' is always false.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) > 0x7' is always false.\n"
Line 477
  "void f(unsigned int a) {\n assert( (a | 0x7) > 6U );\n}" always "void f(unsigned int a) {\n assert( (a | 0x7) > 6U );\n}"
Line 478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  478 always 478
  "[test.cpp:2]: (style) Expression '(X | 0x7) > 0x6' is always true.\n" always "[test.cpp:2]: (style) Expression '(X | 0x7) > 0x6' is always true.\n"
Line 479
  "void f(int a) {\n assert( (a & 0x07) > 6U );\n}" always "void f(int a) {\n assert( (a & 0x07) > 6U );\n}"
Line 480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  480 always 480
  "" always ""
Line 481
  "void f(int a) {\n assert( (a | 0x07) > 7U );\n}" always "void f(int a) {\n assert( (a | 0x07) > 7U );\n}"
Line 482
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  482 always 482
  "" always ""
Line 484
  "void f(int a) {\n assert( (a & 0x07) <= 7U );\n}" always "void f(int a) {\n assert( (a & 0x07) <= 7U );\n}"
Line 485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  485 always 485
  "[test.cpp:2]: (style) Expression '(X & 0x7) <= 0x7' is always true.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) <= 0x7' is always true.\n"
Line 486
  "void f(unsigned int a) {\n assert( (a | 0x08) <= 7U );\n}" always "void f(unsigned int a) {\n assert( (a | 0x08) <= 7U );\n}"
Line 487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  487 always 487
  "[test.cpp:2]: (style) Expression '(X | 0x8) <= 0x7' is always false.\n" always "[test.cpp:2]: (style) Expression '(X | 0x8) <= 0x7' is always false.\n"
Line 488
  "void f(int a) {\n assert( (a & 0x07) <= 6U );\n}" always "void f(int a) {\n assert( (a & 0x07) <= 6U );\n}"
Line 489
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  489 always 489
  "" always ""
Line 490
  "void f(int a) {\n assert( (a | 0x08) <= 7U );\n}" always "void f(int a) {\n assert( (a | 0x08) <= 7U );\n}"
Line 491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  491 always 491
  "" always ""
Line 493
  "void f(int a) {\n assert( (a & 0x07) < 8U );\n}" always "void f(int a) {\n assert( (a & 0x07) < 8U );\n}"
Line 494
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  494 always 494
  "[test.cpp:2]: (style) Expression '(X & 0x7) < 0x8' is always true.\n" always "[test.cpp:2]: (style) Expression '(X & 0x7) < 0x8' is always true.\n"
Line 495
  "void f(unsigned int a) {\n assert( (a | 0x07) < 7U );\n}" always "void f(unsigned int a) {\n assert( (a | 0x07) < 7U );\n}"
Line 496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  496 always 496
  "[test.cpp:2]: (style) Expression '(X | 0x7) < 0x7' is always false.\n" always "[test.cpp:2]: (style) Expression '(X | 0x7) < 0x7' is always false.\n"
Line 497
  "void f(int a) {\n assert( (a & 0x07) < 3U );\n}" always "void f(int a) {\n assert( (a & 0x07) < 3U );\n}"
Line 498
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  498 always 498
  "" always ""
Line 499
  "void f(int a) {\n assert( (a | 0x07) < 7U );\n}" always "void f(int a) {\n assert( (a | 0x07) < 7U );\n}"
Line 500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  500 always 500
  "" always ""
Line 505
  "void foo(int x)\n{\n    if (x & 7);\n    else { if (x == 1); }\n}" always "void foo(int x)\n{\n    if (x & 7);\n    else { if (x == 1); }\n}"
Line 510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  510 always 510
  "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" always "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n"
Line 512
  "void foo(int x)\n{\n    if (x & 7);\n    else { if (x & 1); }\n}" always "void foo(int x)\n{\n    if (x & 7);\n    else { if (x & 1); }\n}"
Line 517
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  517 always 517
  "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" always "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n"
Line 519
  "extern int bar() __attribute__((pure));\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}" always "extern int bar() __attribute__((pure));\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}"
Line 525
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  525 always 525
  "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n" always "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n"
Line 527
  "extern int bar();\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}" always "extern int bar();\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}"
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  527 always 527
Line 533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  533 always 533
  "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n" always "[test.cpp:5]: (style) Expression is always false because 'else if' condition matches previous condition at line 4.\n"
Line 536
  "void foo() {\n    if (a) {}\n    else if (!!a) {}\n}" always "void foo() {\n    if (a) {}\n    else if (!!a) {}\n}"
Line 540
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  540 always 540
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 543
  "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i == 3) {}\n}\n" always "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i == 3) {}\n}\n"
Line 550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  550 always 550
  "" always ""
Line 552
  "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i != 3) {}\n}\n" always "int f();\nvoid g() {\n    int i = f();\n    if (i == 3) {}\n    else if ((i = f()) == 5) {}\n    else if (i != 3) {}\n}\n"
Line 559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  559 always 559
  "" always ""
Line 564
  "" always ""
Line 567
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 568
  code possible "extern int bar();\nvoid foo(int x)\n{\n    if ( bar() >1 && b) {}\n    else if (bar() >1 && b) {}\n}"@73
Line 569
  ( always {!<=-1,!>=2}
  file inconclusive "cppcheck-2.8/test/testcondition.cpp"@73
  line inconclusive 527@73
  "test.cpp" always "test.cpp"
Line 572
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings1),!0}
  this always !0
Line 576
  "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}" always "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}"
Line 580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  580 always 580
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 582
  "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}" always "void f(int a, int &b) {\n    if (a) { b = 1; }\n    else { if (a) { b = 2; } }\n}"
Line 586
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  586 always 586
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 588
  "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 1) { b = 3; } } }\n}" always "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 1) { b = 3; } } }\n}"
Line 593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  593 always 593
  "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 595
  "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 2) { b = 3; } } }\n}" always "void f(int a, int &b) {\n    if (a == 1) { b = 1; }\n    else { if (a == 2) { b = 2; }\n    else { if (a == 2) { b = 3; } } }\n}"
Line 600
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  600 always 600
  "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n" always "[test.cpp:4]: (style) Expression is always false because 'else if' condition matches previous condition at line 3.\n"
Line 602
  "void f(int a, int &b) {\n    if (a++) { b = 1; }\n    else { if (a++) { b = 2; }\n    else { if (a++) { b = 3; } } }\n}" always "void f(int a, int &b) {\n    if (a++) { b = 1; }\n    else { if (a++) { b = 2; }\n    else { if (a++) { b = 3; } } }\n}"
Line 607
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  607 always 607
  "" always ""
Line 609
  "void f(int a, int &b) {\n    if (!strtok(NULL, \" \")) { b = 1; }\n    else { if (!strtok(NULL, \" \")) { b = 2; } }\n}" always "void f(int a, int &b) {\n    if (!strtok(NULL, \" \")) { b = 1; }\n    else { if (!strtok(NULL, \" \")) { b = 2; } }\n}"
Line 613
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  613 always 613
  "" always ""
Line 616
  "void f(Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}" always "void f(Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}"
Line 620
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  620 always 620
  "" always ""
Line 622
  "void f(const Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}" always "void f(const Class &c) {\n    if (c.dostuff() == 3) {}\n    else { if (c.dostuff() == 3) {} }\n}"
Line 626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  626 always 626
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 629
  "void f(int a, int &b) {\n   x = x / 2;\n   if (x < 100) { b = 1; }\n   else { x = x / 2; if (x < 100) { b = 2; } }\n}" always "void f(int a, int &b) {\n   x = x / 2;\n   if (x < 100) { b = 1; }\n   else { x = x / 2; if (x < 100) { b = 2; } }\n}"
Line 634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  634 always 634
  "" always ""
Line 636
  "void f(int i) {\n   if(i == 0x02e2000000 || i == 0xa0c6000000)\n       foo(i);\n}" always "void f(int i) {\n   if(i == 0x02e2000000 || i == 0xa0c6000000)\n       foo(i);\n}"
Line 640
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  640 always 640
  "" always ""
Line 643
  "int fitInt(long long int nValue){\n    if( nValue < 0x7fffffffLL )\n    {\n        return 32;\n    }\n    if( nValue < 0x7fffffffffffLL )\n    {\n        return 48;\n    }\n    else {\n        if( nValue < 0x7fffffffffffffffLL )\n        {\n            return 64;\n        } else\n        {\n            return -1;\n        }\n    }\n}" always "int fitInt(long long int nValue){\n    if( nValue < 0x7fffffffLL )\n    {\n        return 32;\n    }\n    if( nValue < 0x7fffffffffffLL )\n    {\n        return 48;\n    }\n    else {\n        if( nValue < 0x7fffffffffffffffLL )\n        {\n            return 64;\n        } else\n        {\n            return -1;\n        }\n    }\n}"
Line 662
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  662 always 662
  "" always ""
Line 664
  "void f(WIDGET *widget) {\n  if (dynamic_cast<BUTTON*>(widget)){}\n  else if (dynamic_cast<LABEL*>(widget)){}\n}" always "void f(WIDGET *widget) {\n  if (dynamic_cast<BUTTON*>(widget)){}\n  else if (dynamic_cast<LABEL*>(widget)){}\n}"
Line 668
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  668 always 668
  "" always ""
Line 670
  "void f(int x) {\n  if (x & 1) {}\n  else if (x == 0) {}\n}" always "void f(int x) {\n  if (x & 1) {}\n  else if (x == 0) {}\n}"
Line 674
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  674 always 674
  "" always ""
Line 676
  "void f(int x) {\n  if (x & 15) {}\n  else if (x == 40) {}\n}" always "void f(int x) {\n  if (x & 15) {}\n  else if (x == 40) {}\n}"
Line 680
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  680 always 680
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 682
  "void f(int x) {\n  if (x == sizeof(double)) {}\n  else { if (x == sizeof(long double)) {} }}" always "void f(int x) {\n  if (x == sizeof(double)) {}\n  else { if (x == sizeof(long double)) {} }}"
Line 686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  686 always 686
  "" always ""
Line 688
  "void f(int x) {\n  if (x & 0x08) {}\n  else if (x & 0xF8) {}\n}" always "void f(int x) {\n  if (x & 0x08) {}\n  else if (x & 0xF8) {}\n}"
Line 692
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  692 always 692
  "" always ""
Line 694
  "void f(int x) {\n  if (x & 0xF8) {}\n  else if (x & 0x08) {}\n}" always "void f(int x) {\n  if (x & 0xF8) {}\n  else if (x & 0x08) {}\n}"
Line 698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  698 always 698
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 700
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !!a){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !!a){}\n}"
Line 704
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  704 always 704
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 706
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && a){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && a){}\n}"
Line 710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  710 always 710
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 712
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !!a){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !!a){}\n}"
Line 716
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  716 always 716
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 718
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !(!a)){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( b && !(!a)){}\n}"
Line 722
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  722 always 722
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 724
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !(!a)){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!b && !(!a)){}\n}"
Line 728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  728 always 728
  "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n" always "[test.cpp:3]: (style) Expression is always false because 'else if' condition matches previous condition at line 2.\n"
Line 730
  "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!(b) && !!(a+b)){}\n}" always "void f(bool a, bool b) {\n   if(a && b){}\n   else if( !!(b) && !!(a+b)){}\n}"
Line 734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  734 always 734
  "" always ""
Line 737
  "enum MaskValues\n{\n    Value1 = 0x00000001,\n    Value2 = 0x00000002\n};\nvoid TestFunction(int value) {\n    if ( value & (int)Value1 ) {}\n    else if ( value & (int)Value2 ) {}\n}" always "enum MaskValues\n{\n    Value1 = 0x00000001,\n    Value2 = 0x00000002\n};\nvoid TestFunction(int value) {\n    if ( value & (int)Value1 ) {}\n    else if ( value & (int)Value2 ) {}\n}"
Line 746
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  746 always 746
  "" always ""
Line 748
  "void f(size_t x) {\n    if (x == sizeof(int)) {}\n    else { if (x == sizeof(long))} {}\n}\n" always "void f(size_t x) {\n    if (x == sizeof(int)) {}\n    else { if (x == sizeof(long))} {}\n}\n"
Line 752
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  752 always 752
  "" always ""
Line 754
  "void f(size_t x) {\n    if (x == sizeof(long)) {}\n    else { if (x == sizeof(long long))} {}\n}\n" always "void f(size_t x) {\n    if (x == sizeof(long)) {}\n    else { if (x == sizeof(long long))} {}\n}\n"
Line 758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  758 always 758
  "" always ""
Line 764
  "void f(int x) {\n    if (x) {}\n    else if (!x) {}\n}" always "void f(int x) {\n    if (x) {}\n    else if (!x) {}\n}"
Line 768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  768 always 768
  "test.cpp:3:style:Expression is always true because 'else if' condition is opposite to previous condition at line 2.\ntest.cpp:2:note:first condition\ntest.cpp:3:note:else if condition is opposite to first condition\n" always "test.cpp:3:style:Expression is always true because 'else if' condition is opposite to previous condition at line 2.\ntest.cpp:2:note:first condition\ntest.cpp:3:note:else if condition is opposite to first condition\n"
Line 772
  "void f(int x) {\n    int y = x;\n    if (x) {}\n    else if (!y) {}\n}" always "void f(int x) {\n    int y = x;\n    if (x) {}\n    else if (!y) {}\n}"
Line 777
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  777 always 777
  "test.cpp:4:style:Expression is always true because 'else if' condition is opposite to previous condition at line 3.\ntest.cpp:2:note:'y' is assigned value 'x' here.\ntest.cpp:3:note:first condition\ntest.cpp:4:note:else if condition is opposite to first condition\n" always "test.cpp:4:style:Expression is always true because 'else if' condition is opposite to previous condition at line 3.\ntest.cpp:2:note:'y' is assigned value 'x' here.\ntest.cpp:3:note:first condition\ntest.cpp:4:note:else if condition is opposite to first condition\n"
Line 784
  "bool f(int x) {\n    bool b = x | 0x02;\n    return b;\n}" always "bool f(int x) {\n    bool b = x | 0x02;\n    return b;\n}"
Line 788
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  788 always 788
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 790
  "bool f(int x) {\n    bool b = 0x02 | x;\n    return b;\n}" always "bool f(int x) {\n    bool b = 0x02 | x;\n    return b;\n}"
Line 794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  794 always 794
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 796
  "int f(int x) {\n    int b = x | 0x02;\n    return b;\n}" always "int f(int x) {\n    int b = x | 0x02;\n    return b;\n}"
Line 800
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  800 always 800
  "" always ""
Line 802
  "bool f(int x) {\n    bool b = x & 0x02;\n    return b;\n}" always "bool f(int x) {\n    bool b = x & 0x02;\n    return b;\n}"
Line 806
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  806 always 806
  "" always ""
Line 808
  "bool f(int x) {\n    if(x | 0x02)\n        return b;\n}" always "bool f(int x) {\n    if(x | 0x02)\n        return b;\n}"
Line 812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  812 always 812
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 814
  "bool f(int x) {\n    int y = 0x1;\n    if(b) y = 0;\n    if(x | y)\n        return b;\n}" always "bool f(int x) {\n    int y = 0x1;\n    if(b) y = 0;\n    if(x | y)\n        return b;\n}"
Line 820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  820 always 820
  "" always ""
Line 822
  "bool f(int x) {\n    foo(a && (x | 0x02));\n}" always "bool f(int x) {\n    foo(a && (x | 0x02));\n}"
Line 825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  825 always 825
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 827
  "int f(int x) {\n    return (x | 0x02) ? 0 : 5;\n}" always "int f(int x) {\n    return (x | 0x02) ? 0 : 5;\n}"
Line 830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  830 always 830
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 832
  "int f(int x) {\n    return x ? (x | 0x02) : 5;\n}" always "int f(int x) {\n    return x ? (x | 0x02) : 5;\n}"
Line 835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  835 always 835
  "" always ""
Line 837
  "bool f(int x) {\n    return x | 0x02;\n}" always "bool f(int x) {\n    return x | 0x02;\n}"
Line 840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  840 always 840
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 842
  "bool f(int x) {\n  if (x) {\n    return x | 0x02;\n  }\n  return 0;\n}" always "bool f(int x) {\n  if (x) {\n    return x | 0x02;\n  }\n  return 0;\n}"
Line 848
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  848 always 848
  "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 850
  "const bool f(int x) {\n    return x | 0x02;\n}" always "const bool f(int x) {\n    return x | 0x02;\n}"
Line 853
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  853 always 853
  "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:2]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 855
  "struct F {\n  static const bool f(int x) {\n      return x | 0x02;\n  }\n};" always "struct F {\n  static const bool f(int x) {\n      return x | 0x02;\n  }\n};"
Line 860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  860 always 860
  "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:3]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 862
  "struct F {\n  typedef bool b_t;\n};\nF::b_t f(int x) {\n  return x | 0x02;\n}" always "struct F {\n  typedef bool b_t;\n};\nF::b_t f(int x) {\n  return x | 0x02;\n}"
Line 868
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  868 always 868
  "[test.cpp:5]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n" always "[test.cpp:5]: (warning) Result of operator '|' is always true if one operand is non-zero. Did you intend to use '&'?\n"
Line 870
  "int f(int x) {\n    return x | 0x02;\n}" always "int f(int x) {\n    return x | 0x02;\n}"
Line 873
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  873 always 873
  "" always ""
Line 875
  "void create_rop_masks_4( rop_mask_bits *bits) {\nDWORD mask_offset;\nBYTE *and_bits = bits->and;\nrop_mask *rop_mask;\nand_bits[mask_offset] |= (rop_mask->and & 0x0f);\n}" always "void create_rop_masks_4( rop_mask_bits *bits) {\nDWORD mask_offset;\nBYTE *and_bits = bits->and;\nrop_mask *rop_mask;\nand_bits[mask_offset] |= (rop_mask->and & 0x0f);\n}"
Line 881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  881 always 881
  "" always ""
Line 883
  "void f(unsigned a, unsigned b) {\n  unsigned cmd1 = b & 0x0F;\n  if (cmd1 | a) {\n    if (b == 0x0C) {}\n  }\n}" always "void f(unsigned a, unsigned b) {\n  unsigned cmd1 = b & 0x0F;\n  if (cmd1 | a) {\n    if (b == 0x0C) {}\n  }\n}"
Line 889
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  889 always 889
  "" always ""
Line 894
  "void f(int x) {\n    if ((x != 1) || (x != 3))\n        a++;\n}" always "void f(int x) {\n    if ((x != 1) || (x != 3))\n        a++;\n}"
Line 898
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  898 always 898
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n"
Line 900
  "void f(int x) {\n    if (1 != x || 3 != x)\n        a++;\n}" always "void f(int x) {\n    if (1 != x || 3 != x)\n        a++;\n}"
Line 904
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  904 always 904
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 1 || x != 3.\n"
Line 906
  "void f(int x) {\n  if (x<0 && !x) {}\n}" always "void f(int x) {\n  if (x<0 && !x) {}\n}"
Line 909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  909 always 909
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 0 && !x.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 0 && !x.\n"
Line 911
  "void f(int x) {\n  if (x==0 && x) {}\n}" always "void f(int x) {\n  if (x==0 && x) {}\n}"
Line 914
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  914 always 914
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 0 && x.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 0 && x.\n"
Line 916
  "void f(int x) {\n    if (y == 1 && x == 1 && x == 7) { }\n}" always "void f(int x) {\n    if (y == 1 && x == 1 && x == 7) { }\n}"
Line 919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  919 always 919
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 7.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 7.\n"
Line 921
  "void f(int x, int y) {\n    if (x != 1 || y != 1)\n        a++;\n}" always "void f(int x, int y) {\n    if (x != 1 || y != 1)\n        a++;\n}"
Line 925
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  925 always 925
  "" always ""
Line 927
  "void f(int x, int y) {\n    if ((y == 1) && (x != 1) || (x != 3))\n        a++;\n}" always "void f(int x, int y) {\n    if ((y == 1) && (x != 1) || (x != 3))\n        a++;\n}"
Line 931
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  931 always 931
  "" always ""
Line 933
  "void f(int x, int y) {\n    if ((x != 1) || (x != 3) && (y == 1))\n        a++;\n}" always "void f(int x, int y) {\n    if ((x != 1) || (x != 3) && (y == 1))\n        a++;\n}"
Line 938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  938 always 938
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x!=3' is always true\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x!=3' is always true\n"
Line 940
  "void f(int x) {\n    if ((x != 1) && (x != 3))\n        a++;\n}" always "void f(int x) {\n    if ((x != 1) && (x != 3))\n        a++;\n}"
Line 944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  944 always 944
  "" always ""
Line 946
  "void f(int x) {\n    if ((x == 1) || (x == 3))\n        a++;\n}" always "void f(int x) {\n    if ((x == 1) || (x == 3))\n        a++;\n}"
Line 950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  950 always 950
  "" always ""
Line 952
  "void f(int x, int y) {\n    if ((x != 1) || (y != 3))\n        a++;\n}" always "void f(int x, int y) {\n    if ((x != 1) || (y != 3))\n        a++;\n}"
Line 956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  956 always 956
  "" always ""
Line 958
  "void f(int x, int y) {\n    if ((x != hotdog) || (y != hotdog))\n        a++;\n}" always "void f(int x, int y) {\n    if ((x != hotdog) || (y != hotdog))\n        a++;\n}"
Line 962
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  962 always 962
  "" always ""
Line 964
  "void f(int x, int y) {\n    if ((x != 5) || (y != 5))\n        a++;\n}" always "void f(int x, int y) {\n    if ((x != 5) || (y != 5))\n        a++;\n}"
Line 968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  968 always 968
  "" always ""
Line 971
  "void f(int x) {\n    if ((x != 5) || (x != 6))\n        a++;\n}" always "void f(int x) {\n    if ((x != 5) || (x != 6))\n        a++;\n}"
Line 975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  975 always 975
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 5 || x != 6.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x != 5 || x != 6.\n"
Line 977
  "void f(unsigned int a, unsigned int b, unsigned int c) {\n    if((a != b) || (c != b) || (c != a))\n    {\n        return true;\n    }\n    return false;\n}" always "void f(unsigned int a, unsigned int b, unsigned int c) {\n    if((a != b) || (c != b) || (c != a))\n    {\n        return true;\n    }\n    return false;\n}"
Line 984
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  984 always 984
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'c!=a' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'c!=a' is always false\n"
Line 988
  "void f(float x) {\n    if ((x == 1) && (x == 1.0))\n        a++;\n}" always "void f(float x) {\n    if ((x == 1) && (x == 1.0))\n        a++;\n}"
Line 992
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  992 always 992
  "" always ""
Line 994
  "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}" always "void f(int x) {\n    if ((x == 1) && (x == 0x00000001))\n        a++;\n}"
Line 998
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  998 always 998
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0x00000001' is always true\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0x00000001' is always true\n"
Line 1000
  "void f(int x) {\n    if (x == 1 && x == 3)\n        a++;\n}" always "void f(int x) {\n    if (x == 1 && x == 3)\n        a++;\n}"
Line 1004
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1004 always 1004
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 1 && x == 3.\n"
Line 1006
  "void f(int x) {\n    if (x == 1.0 && x == 3.0)\n        a++;\n}" always "void f(int x) {\n    if (x == 1.0 && x == 3.0)\n        a++;\n}"
Line 1010
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1010 always 1010
  "" always ""
Line 1012
  "void f(float x) {\n    if (x == 1 && x == 1.0)\n        a++;\n}" always "void f(float x) {\n    if (x == 1 && x == 1.0)\n        a++;\n}"
Line 1016
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1016 always 1016
  "" always ""
Line 1018
  "void bar(float f) {\n    if ((f > 0) && (f < 1)) {}\n}" always "void bar(float f) {\n    if ((f > 0) && (f < 1)) {}\n}"
Line 1021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1021 always 1021
  "" always ""
Line 1023
  "void f(int x) {\n    if (x < 1 && x > 1)\n        a++;\n}" always "void f(int x) {\n    if (x < 1 && x > 1)\n        a++;\n}"
Line 1027
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1027 always 1027
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.\n"
Line 1029
  "void f(int x) {\n    if (x < 1.0 && x > 1.0)\n        a++;\n}" always "void f(int x) {\n    if (x < 1.0 && x > 1.0)\n        a++;\n}"
Line 1033
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1033 always 1033
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 1.0.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 1.0.\n"
Line 1035
  "void f(int x) {\n    if (x < 1 && x > 1.0)\n        a++;\n}" always "void f(int x) {\n    if (x < 1 && x > 1.0)\n        a++;\n}"
Line 1039
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1039 always 1039
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.0.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 1.0.\n"
Line 1041
  "void f(int x) {\n    if (x >= 1.0 && x <= 1.001)\n        a++;\n}" always "void f(int x) {\n    if (x >= 1.0 && x <= 1.001)\n        a++;\n}"
Line 1045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1045 always 1045
  "" always ""
Line 1047
  "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}" always "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}"
Line 1051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1051 always 1051
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1053
  "void f(float x) {\n    if (x < 1.0 && x > 3.0)\n        a++;\n}" always "void f(float x) {\n    if (x < 1.0 && x > 3.0)\n        a++;\n}"
Line 1057
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1057 always 1057
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 3.0.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1.0 && x > 3.0.\n"
Line 1059
  "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}" always "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}"
Line 1063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1063 always 1063
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1065
  "void f(int x) {\n    if (x < 3 && x > 1)\n        a++;\n}" always "void f(int x) {\n    if (x < 3 && x > 1)\n        a++;\n}"
Line 1069
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1069 always 1069
  "" always ""
Line 1071
  "void f(int x) {\n    if (x > 3 || x < 10)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 || x < 10)\n        a++;\n}"
Line 1075
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1075 always 1075
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x < 10.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x < 10.\n"
Line 1077
  "void f(int x) {\n    if (x >= 3 || x <= 10)\n        a++;\n}" always "void f(int x) {\n    if (x >= 3 || x <= 10)\n        a++;\n}"
Line 1081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1081 always 1081
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 10.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 10.\n"
Line 1083
  "void f(int x) {\n    if (x >= 3 || x < 10)\n        a++;\n}" always "void f(int x) {\n    if (x >= 3 || x < 10)\n        a++;\n}"
Line 1087
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1087 always 1087
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 10.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 10.\n"
Line 1089
  "void f(int x) {\n    if (x > 3 || x <= 10)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 || x <= 10)\n        a++;\n}"
Line 1093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1093 always 1093
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 10.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 10.\n"
Line 1095
  "void f(int x) {\n    if (x > 3 || x < 3)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 || x < 3)\n        a++;\n}"
Line 1099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1099 always 1099
  "" always ""
Line 1101
  "void f(int x) {\n    if (x >= 3 || x <= 3)\n        a++;\n}" always "void f(int x) {\n    if (x >= 3 || x <= 3)\n        a++;\n}"
Line 1106
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1106 always 1106
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 3.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x <= 3.\n"
Line 1108
  "void f(int x) {\n    if (x >= 3 || x < 3)\n        a++;\n}" always "void f(int x) {\n    if (x >= 3 || x < 3)\n        a++;\n}"
Line 1113
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1113 always 1113
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 3.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x >= 3 || x < 3.\n"
Line 1115
  "void f(int x) {\n    if (x > 3 || x <= 3)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 || x <= 3)\n        a++;\n}"
Line 1120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1120 always 1120
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 3.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x > 3 || x <= 3.\n"
Line 1122
  "void f(int x) {\n   if((x==3) && (x!=4))\n        a++;\n}" always "void f(int x) {\n   if((x==3) && (x!=4))\n        a++;\n}"
Line 1126
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1126 always 1126
  "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n"
Line 1128
  "void f(const std::string &s) {\n    const std::size_t p = s.find(\"42\");\n    const std::size_t * const ptr = &p;\n    if(p != std::string::npos && p == 0 && *ptr != 1){;}\n}" always "void f(const std::string &s) {\n    const std::size_t p = s.find(\"42\");\n    const std::size_t * const ptr = &p;\n    if(p != std::string::npos && p == 0 && *ptr != 1){;}\n}"
Line 1133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1133 always 1133
  "[test.cpp:4] -> [test.cpp:4]: (style) Condition '*ptr!=1' is always true\n" always "[test.cpp:4] -> [test.cpp:4]: (style) Condition '*ptr!=1' is always true\n"
Line 1135
  "void f(int x) {\n    if ((x!=4) && (x==3))\n        a++;\n}" always "void f(int x) {\n    if ((x!=4) && (x==3))\n        a++;\n}"
Line 1139
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1139 always 1139
  "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n"
Line 1141
  "void f(int x) {\n    if ((x==3) || (x!=4))\n        a++;\n}" always "void f(int x) {\n    if ((x==3) || (x!=4))\n        a++;\n}"
Line 1145
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1145 always 1145
  "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n"
Line 1147
  "void f(int x) {\n    if ((x!=4) || (x==3))\n        a++;\n}" always "void f(int x) {\n    if ((x!=4) || (x==3))\n        a++;\n}"
Line 1151
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1151 always 1151
  "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 3', the comparison 'x != 4' is always true.\n"
Line 1153
  "void f(int x) {\n    if ((x==3) && (x!=3))\n        a++;\n}" always "void f(int x) {\n    if ((x==3) && (x!=3))\n        a++;\n}"
Line 1157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1157 always 1157
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 3 && x != 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == 3 && x != 3.\n"
Line 1159
  "void f(int x) {\n    if ((x==6) || (x!=6))\n        a++;\n}" always "void f(int x) {\n    if ((x==6) || (x!=6))\n        a++;\n}"
Line 1163
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1163 always 1163
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x == 6 || x != 6.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: x == 6 || x != 6.\n"
Line 1165
  "void f(int x) {\n    if (x > 10 || x < 3)\n        a++;\n}" always "void f(int x) {\n    if (x > 10 || x < 3)\n        a++;\n}"
Line 1169
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1169 always 1169
  "" always ""
Line 1171
  "void f(int x) {\n    if (x > 5 && x == 1)\n        a++;\n}" always "void f(int x) {\n    if (x > 5 && x == 1)\n        a++;\n}"
Line 1175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1175 always 1175
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n"
Line 1177
  "void f(int x) {\n    if (x > 5 && x == 6)\n        a++;\n}" always "void f(int x) {\n    if (x > 5 && x == 6)\n        a++;\n}"
Line 1181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1181 always 1181
  "[test.cpp:2]: (style) Redundant condition: If 'x == 6', the comparison 'x > 5' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 6', the comparison 'x > 5' is always true.\n"
Line 1184
  "void f() {\n    if ( &q != &a && &q != &b ) { }\n}" always "void f() {\n    if ( &q != &a && &q != &b ) { }\n}"
Line 1187
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1187 always 1187
  "" always ""
Line 1190
  "void f(int m_x2, int w, int x) {\n    if (x + w - 1 > m_x2 || m_x2 < 0 )\n        m_x2 = x + w - 1;\n}" always "void f(int m_x2, int w, int x) {\n    if (x + w - 1 > m_x2 || m_x2 < 0 )\n        m_x2 = x + w - 1;\n}"
Line 1194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1194 always 1194
  "" always ""
Line 1196
  "void f(float x) {\n  if (x <= 1.0e20 && x >= -1.0e20) {}\n}" always "void f(float x) {\n  if (x <= 1.0e20 && x >= -1.0e20) {}\n}"
Line 1199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1199 always 1199
  "" always ""
Line 1201
  "void f(float x) {\n  if (x >= 1.0e20 && x <= 1.0e21) {}\n}" always "void f(float x) {\n  if (x >= 1.0e20 && x <= 1.0e21) {}\n}"
Line 1204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1204 always 1204
  "" always ""
Line 1206
  "void f(float x) {\n  if (x <= -1.0e20 && x >= -1.0e21) {}\n}" always "void f(float x) {\n  if (x <= -1.0e20 && x >= -1.0e21) {}\n}"
Line 1209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1209 always 1209
  "" always ""
Line 1213
  "void f(int x, bool& b) {\n    b = x > 5 && x == 1;\n    c = x < 1 && x == 3;\n    d = x >= 5 && x == 1;\n    e = x <= 1 && x == 3;\n}" always "void f(int x, bool& b) {\n    b = x > 5 && x == 1;\n    c = x < 1 && x == 3;\n    d = x >= 5 && x == 1;\n    e = x <= 1 && x == 3;\n}"
Line 1219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1219 always 1219
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n[test.cpp:3]: (warning) Logical conjunction always evaluates to false: x < 1 && x == 3.\n[test.cpp:4]: (warning) Logical conjunction always evaluates to false: x >= 5 && x == 1.\n[test.cpp:5]: (warning) Logical conjunction always evaluates to false: x <= 1 && x == 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 5 && x == 1.\n[test.cpp:3]: (warning) Logical conjunction always evaluates to false: x < 1 && x == 3.\n[test.cpp:4]: (warning) Logical conjunction always evaluates to false: x >= 5 && x == 1.\n[test.cpp:5]: (warning) Logical conjunction always evaluates to false: x <= 1 && x == 3.\n"
Line 1226
  "#define ZERO 0\nvoid f(int x) {\n  if (x && x != ZERO) {}\n}" always "#define ZERO 0\nvoid f(int x) {\n  if (x && x != ZERO) {}\n}"
Line 1230
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1230 always 1230
  "" always ""
Line 1232
  "void f(int N) {\n    T a[20] = { 0 };\n    for (int i = 0; i < N; ++i) {\n        if (0 < a[i] && a[i] < 1) {}\n    }\n}\n" always "void f(int N) {\n    T a[20] = { 0 };\n    for (int i = 0; i < N; ++i) {\n        if (0 < a[i] && a[i] < 1) {}\n    }\n}\n"
Line 1238
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1238 always 1238
  "" always ""
Line 1242
  "void f(int x) {\n  if (x+3 > 2 || x+3 < 10) {}\n}" always "void f(int x) {\n  if (x+3 > 2 || x+3 < 10) {}\n}"
Line 1245
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1245 always 1245
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: EXPR > 2 || EXPR < 10.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: EXPR > 2 || EXPR < 10.\n"
Line 1249
  "void f(char x) {\n  if (x == '1' || x == '2') {}\n}" always "void f(char x) {\n  if (x == '1' || x == '2') {}\n}"
Line 1251
  "test.cpp" always "test.cpp"
  true always 1
Line 1252
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1252 always 1252
  "" always ""
Line 1254
  "void f(char x) {\n  if (x == '1' && x == '2') {}\n}" always "void f(char x) {\n  if (x == '1' && x == '2') {}\n}"
Line 1256
  "test.cpp" always "test.cpp"
  true always 1
Line 1257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1257 always 1257
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == '1' && x == '2'.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x == '1' && x == '2'.\n"
Line 1259
  "int f(char c) {\n  return (c >= 'a' && c <= 'z');\n}" always "int f(char c) {\n  return (c >= 'a' && c <= 'z');\n}"
Line 1261
  "test.cpp" always "test.cpp"
  true always 1
Line 1262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1262 always 1262
  "" always ""
Line 1264
  "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}" always "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}"
Line 1266
  "test.cpp" always "test.cpp"
  true always 1
Line 1267
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1267 always 1267
  "[test.cpp:2]: (warning, inconclusive) Logical conjunction always evaluates to false: c <= 'a' && c >= 'z'.\n" always "[test.cpp:2]: (warning, inconclusive) Logical conjunction always evaluates to false: c <= 'a' && c >= 'z'.\n"
Line 1269
  "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}" always "int f(char c) {\n  return (c <= 'a' && c >= 'z');\n}"
Line 1271
  "test.cpp" always "test.cpp"
  false always 0
Line 1272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1272 always 1272
  "" always ""
Line 1276
  "void f(int i) {\n  if (i || !i) {}\n}" always "void f(int i) {\n  if (i || !i) {}\n}"
Line 1279
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1279 always 1279
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: i || !(i).\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: i || !(i).\n"
Line 1281
  "void f(int a, int b) {\n  if (a>b || a<=b) {}\n}" always "void f(int a, int b) {\n  if (a>b || a<=b) {}\n}"
Line 1284
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1284 always 1284
  "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: a > b || a <= b.\n" always "[test.cpp:2]: (warning) Logical disjunction always evaluates to true: a > b || a <= b.\n"
Line 1286
  "void f(int a, int b) {\n  if (a>b || a<b) {}\n}" always "void f(int a, int b) {\n  if (a>b || a<b) {}\n}"
Line 1289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1289 always 1289
  "" always ""
Line 1292
  "template<typename T> T icdf( const T uniform ) {\n   if ((0<uniform) && (uniform<1))\n     {}\n}" always "template<typename T> T icdf( const T uniform ) {\n   if ((0<uniform) && (uniform<1))\n     {}\n}"
Line 1296
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1296 always 1296
  "" always ""
Line 1299
  "double neg = -1.0 - 1.0e-13;\nvoid foo() {\n    if ((neg < -1.0) && (neg > -1.0 - 1.0e-12))\n        return;\n    else\n        return;\n}" always "double neg = -1.0 - 1.0e-13;\nvoid foo() {\n    if ((neg < -1.0) && (neg > -1.0 - 1.0e-12))\n        return;\n    else\n        return;\n}"
Line 1306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1306 always 1306
  "" always ""
Line 1310
  "void f(int i) {\n  if (!(i!=10) && !(i!=20)) {}\n}" always "void f(int i) {\n  if (!(i!=10) && !(i!=20)) {}\n}"
Line 1313
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1313 always 1313
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: !(i != 10) && !(i != 20).\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: !(i != 10) && !(i != 20).\n"
Line 1317
  "class MyType;\nclass OtherType;\nvoid foo (OtherType* obj) {\n    assert((!obj) || dynamic_cast<MyType*>(obj));\n}" always "class MyType;\nclass OtherType;\nvoid foo (OtherType* obj) {\n    assert((!obj) || dynamic_cast<MyType*>(obj));\n}"
Line 1322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1322 always 1322
  "" always ""
Line 1326
  "typedef enum { A, B } Type_t;\nvoid f(Type_t t) {\n    if ((t == A) && (t == B))\n    {}\n}" always "typedef enum { A, B } Type_t;\nvoid f(Type_t t) {\n    if ((t == A) && (t == B))\n    {}\n}"
Line 1331
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1331 always 1331
  "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: t == 0 && t == 1.\n" always "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: t == 0 && t == 1.\n"
Line 1335
  "void foo(int i, const int n) { if ( i < n && i == n ) {} }" always "void foo(int i, const int n) { if ( i < n && i == n ) {} }"
Line 1336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1336 always 1336
  "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i < n && i == n.\n" always "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i < n && i == n.\n"
Line 1338
  "void foo(int i, const int n) { if ( i > n && i == n ) {} }" always "void foo(int i, const int n) { if ( i > n && i == n ) {} }"
Line 1339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1339 always 1339
  "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i > n && i == n.\n" always "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i > n && i == n.\n"
Line 1341
  "void foo(int i, const int n) { if ( i == n && i > n ) {} }" always "void foo(int i, const int n) { if ( i == n && i > n ) {} }"
Line 1342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1342 always 1342
  "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i > n.\n" always "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i > n.\n"
Line 1344
  "void foo(int i, const int n) { if ( i == n && i < n ) {} }" always "void foo(int i, const int n) { if ( i == n && i < n ) {} }"
Line 1345
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1345 always 1345
  "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i < n.\n" always "[test.cpp:1]: (warning) Logical conjunction always evaluates to false: i == n && i < n.\n"
Line 1349
  "struct A {\n    void f() const;\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}" always "struct A {\n    void f() const;\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
Line 1359
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1359 always 1359
  "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:8]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n" always "[test.cpp:5] -> [test.cpp:6] -> [test.cpp:8]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n"
Line 1361
  "struct A {\n    void f();\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}" always "struct A {\n    void f();\n};\nvoid foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
Line 1371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1371 always 1371
  "" always ""
Line 1373
  "void foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}" always "void foo(A a) {\n  A x = a;\n  A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
Line 1380
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1380 always 1380
  "" always ""
Line 1382
  "void foo(A a) {\n  const A x = a;\n  const A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}" always "void foo(A a) {\n  const A x = a;\n  const A y = a;\n  y.f();\n  if (a > x && a < y)\n    return;\n}"
Line 1389
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1389 always 1389
  "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n" always "[test.cpp:2] -> [test.cpp:3] -> [test.cpp:5]: (warning) Logical conjunction always evaluates to false: a > x && a < y.\n"
Line 1394
  "void f(const int &v) {\n    const int x=v;\n    if ((v == 1) && (x == 2)) {;}\n}" always "void f(const int &v) {\n    const int x=v;\n    if ((v == 1) && (x == 2)) {;}\n}"
Line 1398
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1398 always 1398
  "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: v == 1 && x == 2.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: v == 1 && x == 2.\n"
Line 1400
  "void f2(const int *v) {\n    const int *x=v;\n    if ((*v == 1) && (*x == 2)) {;}\n}" always "void f2(const int *v) {\n    const int *x=v;\n    if ((*v == 1) && (*x == 2)) {;}\n}"
Line 1404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1404 always 1404
  "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: *(v) == 1 && *(x) == 2.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Logical conjunction always evaluates to false: *(v) == 1 && *(x) == 2.\n"
Line 1408
  "static const std ::string h;\nclass i {\npublic:\n  struct j {\n    std ::string k;\n    std ::string l;\n  };\n  struct a {\n    enum { m = 1 };\n  };\n} b;\nnamespace n {\nclass c;\n}\nstruct o {\n  enum { p, d, q, r };\n  enum { e, f };\n\npublic:\n  class j {\n  public:\n    class s {\n      std ::string a;\n    };\n  };\n};\nnamespace n {\nclass b;\n}\nnamespace aa {\nclass d {\npublic:\n  char t;\n  enum {} u;\n};\n} // namespace aa\nnamespace aa {\nstruct e {};\n} // namespace aa\nclass a;\nclass w {\npublic:\n  enum { x };\n  struct {\n  } y;\n  std ::string z;\n};\nclass ab {\n  friend class c;\n\npublic:\n  class ac {\n    void e(const ac &v) const;\n  };\n};\nclass f;\nclass ad {\n  friend class e;\n  enum { e, ae, ag, ah, ai, aj, ak, a, b };\n  class c {};\n  class d {\n    enum am { f, an, ao, ap, aq, ar, b, as, at, c, au };\n    enum av { aw, ax, ay, az, e, ba, bb, bc, bd, a };\n    struct b {\n      am action;\n      av c;\n    };\n  };\n  class e {\n  public:\n    std ::string e;\n    class f {\n    } f;\n    class be {\n    public:\n    };\n    std ::vector<be> bf;\n    enum { bg, b } c;\n  };\n  struct bh {\n    std ::map<int, d> b;\n  };\n  std ::map<std ::string, bh> bi;\n  struct {\n    int b;\n    char bj;\n  } bk;\n  class a {\n  public:\n    std ::set<std ::string> b;\n  };\n};\nclass bl;\nclass al;\nclass bm;\nclass f;\nclass b;\nclass bn;\nnamespace bo {\nclass bp {\npublic:\n  typedef std ::pair<const f *, std ::string> bq;\n  typedef std ::list<bq> br;\n};\nconst bo ::bp *dg(const f *a, const al *b);\n} // namespace bo\nconst bn *dh(const f *d, bo ::bp ::br &bs);\nclass f {\npublic:\n  struct bt {};\n  std ::vector<a> f;\n};\nclass bu;\nclass a;\nclass c;\nstruct bv {};\nclass af {\nprivate:\npublic:\n  enum { b, d, e, f, c, bw };\n  void a(int c);\n  af *bx() const;\n};\nnamespace by {\nclass b;\n}\nclass b {\npublic:\n  bool d, c;\n};\nclass bz;\nclass f;\nclass ca {\n  friend class b;\n\npublic:\n  const bm *cb() const { return cc; }\n  f *d(f *e, bool f) const;\n  int e() { return ++cd; }\n  bl *const c;\n  bm *cc;\n  std ::map<std ::string, int> ce;\n  int cd;\n  bz *a;\n};\nnamespace n {\nclass c;\nclass d;\n} // namespace n\nclass cf {\npublic:\n  explicit cf(const std ::string &aname);\n  cf(const std ::string &aname, const ca *cg, const al *ch, bl *ci)\n      : cj(cg), ck(ch), cl(ci), cn(aname) {}\n\nprotected:\n  const ca *const cj;\n  const al *const ck;\n  bl *const cl;\n  const std ::string cn;\n};\nclass cm : public cf {\npublic:\n  void cp();\n  std ::string d() const;\n};\nstruct co {\n  co();\n  const bu *a;\n  enum f {};\n  enum {\n    b = (1 << 0),\n    c = (1 << 1),\n  };\n  void d(bool e);\n};\nclass bu {\n  friend class e;\n\npublic:\n  struct f {};\n  enum { d, cr, cq, ct, cs, e, a, b, c, dd, cu, cv, cw, cx, cy, cz, da };\n  const f *db;\n  const af *dc;\n} f{};\nclass bm {\npublic:\n  std ::list<bu> df;\n  std ::vector<const bu *> de;\n  mutable std ::set<std ::string> f;\n};\nvoid cm ::cp() {\n  const bm *a = cj->cb();\n  for (const bu *b : a->de)\n    for (af *c = b->dc->bx();;) {\n      af *d = c;\n      af *e = c;\n      bool f(d);\n      bool g(e);\n      if (f && g)\n        ;\n    }\n}" always "static const std ::string h;\nclass i {\npublic:\n  struct j {\n    std ::string k;\n    std ::string l;\n  };\n  struct a {\n    enum { m = 1 };\n  };\n} b;\nnamespace n {\nclass c;\n}\nstruct o {\n  enum { p, d, q, r };\n  enum { e, f };\n\npublic:\n  class j {\n  public:\n    class s {\n      std ::string a;\n    };\n  };\n};\nnamespace n {\nclass b;\n}\nnamespace aa {\nclass d {\npublic:\n  char t;\n  enum {} u;\n};\n} // namespace aa\nnamespace aa {\nstruct e {};\n} // namespace aa\nclass a;\nclass w {\npublic:\n  enum { x };\n  struct {\n  } y;\n  std ::string z;\n};\nclass ab {\n  friend class c;\n\npublic:\n  class ac {\n    void e(const ac &v) const;\n  };\n};\nclass f;\nclass ad {\n  friend class e;\n  enum { e, ae, ag, ah, ai, aj, ak, a, b };\n  class c {};\n  class d {\n    enum am { f, an, ao, ap, aq, ar, b, as, at, c, au };\n    enum av { aw, ax, ay, az, e, ba, bb, bc, bd, a };\n    struct b {\n      am action;\n      av c;\n    };\n  };\n  class e {\n  public:\n    std ::string e;\n    class f {\n    } f;\n    class be {\n    public:\n    };\n    std ::vector<be> bf;\n    enum { bg, b } c;\n  };\n  struct bh {\n    std ::map<int, d> b;\n  };\n  std ::map<std ::string, bh> bi;\n  struct {\n    int b;\n    char bj;\n  } bk;\n  class a {\n  public:\n    std ::set<std ::string> b;\n  };\n};\nclass bl;\nclass al;\nclass bm;\nclass f;\nclass b;\nclass bn;\nnamespace bo {\nclass bp {\npublic:\n  typedef std ::pair<const f *, std ::string> bq;\n  typedef std ::list<bq> br;\n};\nconst bo ::bp *dg(const f *a, const al *b);\n} // namespace bo\nconst bn *dh(const f *d, bo ::bp ::br &bs);\nclass f {\npublic:\n  struct bt {};\n  std ::vector<a> f;\n};\nclass bu;\nclass a;\nclass c;\nstruct bv {};\nclass af {\nprivate:\npublic:\n  enum { b, d, e, f, c, bw };\n  void a(int c);\n  af *bx() const;\n};\nnamespace by {\nclass b;\n}\nclass b {\npublic:\n  bool d, c;\n};\nclass bz;\nclass f;\nclass ca {\n  friend class b;\n\npublic:\n  const bm *cb() const { return cc; }\n  f *d(f *e, bool f) const;\n  int e() { return ++cd; }\n  bl *const c;\n  bm *cc;\n  std ::map<std ::string, int> ce;\n  int cd;\n  bz *a;\n};\nnamespace n {\nclass c;\nclass d;\n} // namespace n\nclass cf {\npublic:\n  explicit cf(const std ::string &aname);\n  cf(const std ::string &aname, const ca *cg, const al *ch, bl *ci)\n      : cj(cg), ck(ch), cl(ci), cn(aname) {}\n\nprotected:\n  const ca *const cj;\n  const al *const ck;\n  bl *const cl;\n  const std ::string cn;\n};\nclass cm : public cf {\npublic:\n  void cp();\n  std ::string d() const;\n};\nstruct co {\n  co();\n  const bu *a;\n  enum f {};\n  enum {\n    b = (1 << 0),\n    c = (1 << 1),\n  };\n  void d(bool e);\n};\nclass bu {\n  friend class e;\n\npublic:\n  struct f {};\n  enum { d, cr, cq, ct, cs, e, a, b, c, dd, cu, cv, cw, cx, cy, cz, da };\n  const f *db;\n  const af *dc;\n} f{};\nclass bm {\npublic:\n  std ::list<bu> df;\n  std ::vector<const bu *> de;\n  mutable std ::set<std ::string> f;\n};\nvoid cm ::cp() {\n  const bm *a = cj->cb();\n  for (const bu *b : a->de)\n    for (af *c = b->dc->bx();;) {\n      af *d = c;\n      af *e = c;\n      bool f(d);\n      bool g(e);\n      if (f && g)\n        ;\n    }\n}"
Line 1611
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1611 always 1611
  "[test.cpp:200] -> [test.cpp:200]: (style) Condition 'g' is always true\n" always "[test.cpp:200] -> [test.cpp:200]: (style) Condition 'g' is always true\n"
Line 1616
  "struct PipeRoute {\n    std::deque<int> points;\n    std::deque<int> estimates;\n};\nvoid CleanPipeRoutes(std::map<int, PipeRoute*>& pipeRoutes) {\n    for (auto it = pipeRoutes.begin(); it != pipeRoutes.end(); ) {\n        PipeRoute* curRoute = it->second;\n        if (curRoute->points.empty() && curRoute->estimates.size() != 2)\n        {\n            delete curRoute;\n            it = pipeRoutes.erase(it);\n        }\n        else\n        {\n            ++it;\n        }\n    }\n}\n" always "struct PipeRoute {\n    std::deque<int> points;\n    std::deque<int> estimates;\n};\nvoid CleanPipeRoutes(std::map<int, PipeRoute*>& pipeRoutes) {\n    for (auto it = pipeRoutes.begin(); it != pipeRoutes.end(); ) {\n        PipeRoute* curRoute = it->second;\n        if (curRoute->points.empty() && curRoute->estimates.size() != 2)\n        {\n            delete curRoute;\n            it = pipeRoutes.erase(it);\n        }\n        else\n        {\n            ++it;\n        }\n    }\n}\n"
Line 1634
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1634 always 1634
  "" always ""
Line 1638
  "void foo(void* p) {\n    if (!p || p == -1) { }\n}\n" always "void foo(void* p) {\n    if (!p || p == -1) { }\n}\n"
Line 1641
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1641 always 1641
  "" always ""
Line 1645
  "void f(int x) {\n    if (x > 5 && x != 1)\n        a++;\n}" always "void f(int x) {\n    if (x > 5 && x != 1)\n        a++;\n}"
Line 1649
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1649 always 1649
  "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n"
Line 1651
  "void f(int x) {\n    if (x > 5 && x != 6)\n        a++;\n}" always "void f(int x) {\n    if (x > 5 && x != 6)\n        a++;\n}"
Line 1655
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1655 always 1655
  "" always ""
Line 1657
  "void f(int x) {\n    if ((x > 5) && (x != 1))\n        a++;\n}" always "void f(int x) {\n    if ((x > 5) && (x != 1))\n        a++;\n}"
Line 1661
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1661 always 1661
  "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n"
Line 1663
  "void f(int x) {\n    if ((x > 5) && (x != 6))\n        a++;\n}" always "void f(int x) {\n    if ((x > 5) && (x != 6))\n        a++;\n}"
Line 1667
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1667 always 1667
  "" always ""
Line 1669
  "void f(int x, bool& b) {\n    b = x > 3 || x == 4;\n    c = x < 5 || x == 4;\n    d = x >= 3 || x == 4;\n    e = x <= 5 || x == 4;\n}" always "void f(int x, bool& b) {\n    b = x > 3 || x == 4;\n    c = x < 5 || x == 4;\n    d = x >= 3 || x == 4;\n    e = x <= 5 || x == 4;\n}"
Line 1675
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1675 always 1675
  "[test.cpp:2]: (style) Redundant condition: If 'x == 4', the comparison 'x > 3' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x == 4', the comparison 'x < 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x == 4', the comparison 'x >= 3' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x == 4', the comparison 'x <= 5' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x == 4', the comparison 'x > 3' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x == 4', the comparison 'x < 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x == 4', the comparison 'x >= 3' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x == 4', the comparison 'x <= 5' is always true.\n"
Line 1680
  "void f(int x, bool& b) {\n    b = x > 5 || x != 1;\n    c = x < 1 || x != 3;\n    d = x >= 5 || x != 1;\n    e = x <= 1 || x != 3;\n}" always "void f(int x, bool& b) {\n    b = x > 5 || x != 1;\n    c = x < 1 || x != 3;\n    d = x >= 5 || x != 1;\n    e = x <= 1 || x != 3;\n}"
Line 1686
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1686 always 1686
  "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x < 1', the comparison 'x != 3' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x >= 5', the comparison 'x != 1' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x <= 1', the comparison 'x != 3' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x > 5', the comparison 'x != 1' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x < 1', the comparison 'x != 3' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x >= 5', the comparison 'x != 1' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x <= 1', the comparison 'x != 3' is always true.\n"
Line 1691
  "void f(int x, bool& b) {\n    b = x > 6 && x > 5;\n    c = x > 5 || x > 6;\n    d = x < 6 && x < 5;\n    e = x < 5 || x < 6;\n}" always "void f(int x, bool& b) {\n    b = x > 6 && x > 5;\n    c = x > 5 || x > 6;\n    d = x < 6 && x < 5;\n    e = x < 5 || x < 6;\n}"
Line 1697
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1697 always 1697
  "[test.cpp:2]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n" always "[test.cpp:2]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:3]: (style) Redundant condition: If 'x > 6', the comparison 'x > 5' is always true.\n[test.cpp:4]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n[test.cpp:5]: (style) Redundant condition: If 'x < 5', the comparison 'x < 6' is always true.\n"
Line 1704
  "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}" always "void f(int x) {\n    if (x < 1 && x > 3)\n        a++;\n}"
Line 1708
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1708 always 1708
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1710
  "void f(int x) {\n    if (1 > x && x > 3)\n        a++;\n}" always "void f(int x) {\n    if (1 > x && x > 3)\n        a++;\n}"
Line 1714
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1714 always 1714
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1716
  "void f(int x) {\n    if (x < 1 && 3 < x)\n        a++;\n}" always "void f(int x) {\n    if (x < 1 && 3 < x)\n        a++;\n}"
Line 1720
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1720 always 1720
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1722
  "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}" always "void f(int x) {\n    if (1 > x && 3 < x)\n        a++;\n}"
Line 1726
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1726 always 1726
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x < 1 && x > 3.\n"
Line 1728
  "void f(int x) {\n    if (x > 3 && x < 1)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 && x < 1)\n        a++;\n}"
Line 1732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1732 always 1732
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n"
Line 1734
  "void f(int x) {\n    if (3 < x && x < 1)\n        a++;\n}" always "void f(int x) {\n    if (3 < x && x < 1)\n        a++;\n}"
Line 1738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1738 always 1738
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n"
Line 1740
  "void f(int x) {\n    if (x > 3 && 1 > x)\n        a++;\n}" always "void f(int x) {\n    if (x > 3 && 1 > x)\n        a++;\n}"
Line 1744
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1744 always 1744
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n"
Line 1746
  "void f(int x) {\n    if (3 < x && 1 > x)\n        a++;\n}" always "void f(int x) {\n    if (3 < x && 1 > x)\n        a++;\n}"
Line 1750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1750 always 1750
  "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n" always "[test.cpp:2]: (warning) Logical conjunction always evaluates to false: x > 3 && x < 1.\n"
Line 1754
  "bool f(bool& b1, bool& b2, bool& b3) {\n    b1 = a % 5 == 4;\n    b2 = a % c == 100000;\n    b3 = a % 5 == c;\n    return a % 5 == 5-p;\n}" always "bool f(bool& b1, bool& b2, bool& b3) {\n    b1 = a % 5 == 4;\n    b2 = a % c == 100000;\n    b3 = a % 5 == c;\n    return a % 5 == 5-p;\n}"
Line 1760
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1760 always 1760
  "" always ""
Line 1762
  "bool f(bool& b1, bool& b2, bool& b3, bool& b4, bool& b5) {\n    b1 = a % 5 < 5;\n    b2 = a % 5 <= 5;\n    b3 = a % 5 == 5;\n    b4 = a % 5 != 5;\n    b5 = a % 5 >= 5;\n    return a % 5 > 5;\n}" always "bool f(bool& b1, bool& b2, bool& b3, bool& b4, bool& b5) {\n    b1 = a % 5 < 5;\n    b2 = a % 5 <= 5;\n    b3 = a % 5 == 5;\n    b4 = a % 5 != 5;\n    b5 = a % 5 >= 5;\n    return a % 5 > 5;\n}"
Line 1770
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1770 always 1770
  "[test.cpp:7]: (style) Condition 'a%5>5' is always false\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:5]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:6]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:7]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n" always "[test.cpp:7]: (style) Condition 'a%5>5' is always false\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:5]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:6]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:7]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n"
Line 1780
  "void f(bool& b1, bool& b2) {\n    b1 = bar() % 5 < 889;\n    if(x[593] % 5 <= 5)\n        b2 = x.a % 5 == 5;\n}" always "void f(bool& b1, bool& b2) {\n    b1 = bar() % 5 < 889;\n    if(x[593] % 5 <= 5)\n        b2 = x.a % 5 == 5;\n}"
Line 1785
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1785 always 1785
  "[test.cpp:3]: (style) Condition 'x[593]%5<=5' is always true\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n" always "[test.cpp:3]: (style) Condition 'x[593]%5<=5' is always true\n[test.cpp:2]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:3]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n[test.cpp:4]: (warning) Comparison of modulo result is predetermined, because it is always less than 5.\n"
Line 1792
  "void f() {\n    if (a % 2 + b % 2 == 2)\n        foo();\n}" always "void f() {\n    if (a % 2 + b % 2 == 2)\n        foo();\n}"
Line 1796
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1796 always 1796
  "" always ""
Line 1800
  "void foo(int a, int b) {\n    if(a==b)\n        if(a!=b)\n            cout << a;\n}" always "void foo(int a, int b) {\n    if(a==b)\n        if(a!=b)\n            cout << a;\n}"
Line 1805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1805 always 1805
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1807
  "bool foo(int a, int b) {\n    if(a==b)\n        return a!=b;\n    return false;\n}" always "bool foo(int a, int b) {\n    if(a==b)\n        return a!=b;\n    return false;\n}"
Line 1812
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1812 always 1812
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'return' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'return' condition leads to a dead code block.\n"
Line 1814
  "void foo(int a, int b) {\n    if(a==b)\n        if(b!=a)\n            cout << a;\n}" always "void foo(int a, int b) {\n    if(a==b)\n        if(b!=a)\n            cout << a;\n}"
Line 1819
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1819 always 1819
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1821
  "void foo(int a) {\n    if(a >= 50) {\n        if(a < 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}" always "void foo(int a) {\n    if(a >= 50) {\n        if(a < 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}"
Line 1829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1829 always 1829
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1832
  "void foo(int a) {\n    if(a >= 50) {\n        if(a > 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}" always "void foo(int a) {\n    if(a >= 50) {\n        if(a > 50)\n            cout << a;\n        else\n            cout << 100;\n    }\n}"
Line 1840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1840 always 1840
  "" always ""
Line 1843
  "class foo {\n    void bar() {\n        if (tok == '(') {\n            next();\n            if (tok == ',') {\n                next();\n                if (tok != ',') {\n                    op->reg2 = asm_parse_reg();\n                }\n                skip(',');\n            }\n        }\n    }\n    void next();\n    const char *tok;\n};" always "class foo {\n    void bar() {\n        if (tok == '(') {\n            next();\n            if (tok == ',') {\n                next();\n                if (tok != ',') {\n                    op->reg2 = asm_parse_reg();\n                }\n                skip(',');\n            }\n        }\n    }\n    void next();\n    const char *tok;\n};"
Line 1859
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1859 always 1859
  "" always ""
Line 1861
  "void foo(int i)\n{\n   if(i > 5) {\n       i = bar();\n       if(i < 5) {\n           cout << a;\n       }\n    }\n}" always "void foo(int i)\n{\n   if(i > 5) {\n       i = bar();\n       if(i < 5) {\n           cout << a;\n       }\n    }\n}"
Line 1870
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1870 always 1870
  "" always ""
Line 1872
  "void foo(int& i) {\n    i=6;\n}\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}" always "void foo(int& i) {\n    i=6;\n}\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
Line 1882
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1882 always 1882
  "" always ""
Line 1884
  "void foo(int& i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}" always "void foo(int& i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
Line 1893
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1893 always 1893
  "" always ""
Line 1895
  "void foo(int i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}" always "void foo(int i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
Line 1903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1903 always 1903
  "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1905
  "void foo(const int &i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}" always "void foo(const int &i);\nvoid bar(int i) {\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
Line 1913
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1913 always 1913
  "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1915
  "void foo(int i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}" always "void foo(int i);\nvoid bar() {\n    int i; i = func();\n    if(i>5) {\n        foo(i);\n        if(i<5) {\n        }\n    }\n}"
Line 1924
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1924 always 1924
  "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1926
  "class C { void f(int &i) const; };\nvoid foo(C c, int i) {\n  if (i==5) {\n    c.f(i);\n    if (i != 5) {}\n  }\n}" always "class C { void f(int &i) const; };\nvoid foo(C c, int i) {\n  if (i==5) {\n    c.f(i);\n    if (i != 5) {}\n  }\n}"
Line 1933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1933 always 1933
  "" always ""
Line 1936
  "int generic_write_sync(int,int,int);\n\nvoid cifs_writev(int i) {\n   int rc = __generic_file_aio_write();\n   if (rc > 0){\n       err = generic_write_sync(file, iocb->ki_pos - rc, rc);\n       if(rc < 0) {\n           err = rc;\n       }\n    }\n}" always "int generic_write_sync(int,int,int);\n\nvoid cifs_writev(int i) {\n   int rc = __generic_file_aio_write();\n   if (rc > 0){\n       err = generic_write_sync(file, iocb->ki_pos - rc, rc);\n       if(rc < 0) {\n           err = rc;\n       }\n    }\n}"
Line 1947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1947 always 1947
  "[test.cpp:5] -> [test.cpp:7]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:5] -> [test.cpp:7]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1951
  "void testOppositeConditions2() {\n  int array[2] = { 0, 0 };\n  if (array[0] < 2) {\n    array[0] += 5;\n    if (array[0] > 2) {}\n  }\n}" always "void testOppositeConditions2() {\n  int array[2] = { 0, 0 };\n  if (array[0] < 2) {\n    array[0] += 5;\n    if (array[0] > 2) {}\n  }\n}"
Line 1958
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1958 always 1958
  "" always ""
Line 1961
  "void foo(A *a) {\n   if(a) {\n       B *b = dynamic_cast<B*>(a);\n       if(!b) {}\n    }\n}" always "void foo(A *a) {\n   if(a) {\n       B *b = dynamic_cast<B*>(a);\n       if(!b) {}\n    }\n}"
Line 1967
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1967 always 1967
  "" always ""
Line 1969
  "void foo(int a) {\n   if(a) {\n       int b = a;\n       if(!b) {}\n    }\n}" always "void foo(int a) {\n   if(a) {\n       int b = a;\n       if(!b) {}\n    }\n}"
Line 1975
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1975 always 1975
  "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:2] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1977
  "void foo(unsigned u) {\n  if (u != 0) {\n    for (int i=0; i<32; i++) {\n      if (u == 0) {}\n      u = x;\n    }\n  }\n}" always "void foo(unsigned u) {\n  if (u != 0) {\n    for (int i=0; i<32; i++) {\n      if (u == 0) {}\n      u = x;\n    }\n  }\n}"
Line 1985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1985 always 1985
  "" always ""
Line 1988
  "void f() {\n  for (int i=0;i<4;i++) {\n    if (i==5) {}\n  }\n}" always "void f() {\n  for (int i=0;i<4;i++) {\n    if (i==5) {}\n  }\n}"
Line 1993
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  1993 always 1993
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 1996
  "void Delete(SS_CELLCOORD upperleft) {\n    if ((upperleft.Col == -1) && (upperleft.Row == -1)) {\n        GetActiveCell(&(upperleft.Col), &(upperleft.Row));\n        if (upperleft.Row == -1) {}\n    }\n}" always "void Delete(SS_CELLCOORD upperleft) {\n    if ((upperleft.Col == -1) && (upperleft.Row == -1)) {\n        GetActiveCell(&(upperleft.Col), &(upperleft.Row));\n        if (upperleft.Row == -1) {}\n    }\n}"
Line 2002
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2002 always 2002
  "" always ""
Line 2005
  "struct A {\n    void DoTest() {\n        if (!IsSet()) {\n            m_value = true;\n            if (IsSet());\n        }\n    }\n    bool IsSet() const { return m_value; }\n    bool m_value = false;\n};" always "struct A {\n    void DoTest() {\n        if (!IsSet()) {\n            m_value = true;\n            if (IsSet());\n        }\n    }\n    bool IsSet() const { return m_value; }\n    bool m_value = false;\n};"
Line 2015
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2015 always 2015
  "" always ""
Line 2019
  "void f(struct ABC *abc) {\n   struct AB *ab = abc->ab;\n   if (ab->a == 123){\n       do_something(abc);\n       if (ab->a != 123) {\n           err = rc;\n       }\n    }\n}" always "void f(struct ABC *abc) {\n   struct AB *ab = abc->ab;\n   if (ab->a == 123){\n       do_something(abc);\n       if (ab->a != 123) {\n           err = rc;\n       }\n    }\n}"
Line 2028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2028 always 2028
  "" always ""
Line 2030
  "void Fred::f() {\n  if (this->next_ == map_man_->table_) {\n    this->next_ = n;\n    if (this->next_ != map_man_->table_) {}\n  }\n}" always "void Fred::f() {\n  if (this->next_ == map_man_->table_) {\n    this->next_ = n;\n    if (this->next_ != map_man_->table_) {}\n  }\n}"
Line 2036
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2036 always 2036
  "" always ""
Line 2038
  "void test(float *f) {\n  if(*f>10) {\n    (*f) += 0.1f;\n    if(*f<10) {}\n  }\n}" always "void test(float *f) {\n  if(*f>10) {\n    (*f) += 0.1f;\n    if(*f<10) {}\n  }\n}"
Line 2044
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2044 always 2044
  "" always ""
Line 2046
  "int * f(int * x, int * y) {\n    if(!x) return x;\n    return y;\n}" always "int * f(int * x, int * y) {\n    if(!x) return x;\n    return y;\n}"
Line 2050
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2050 always 2050
  "" always ""
Line 2055
  "void f() {\n  const Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}" always "void f() {\n  const Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
Line 2062
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2062 always 2062
  "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:5]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2064
  "class Fred { public: bool isValid() const; void dostuff() const; };\nvoid f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}" always "class Fred { public: bool isValid() const; void dostuff() const; };\nvoid f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
Line 2072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2072 always 2072
  "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:4] -> [test.cpp:6]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2074
  "void f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}" always "void f() {\n  Fred fred;\n  if (fred.isValid()) {\n    fred.dostuff();\n    if (!fred.isValid()) {}\n  }\n}"
Line 2081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2081 always 2081
  "" always ""
Line 2084
  "class TranslationHandler {\nQTranslator *mTranslator;\nvoid SetLanguage() {\n   if (mTranslator) {\n             qApp->removeTranslator(mTranslator);\n        }\n   }\n};" always "class TranslationHandler {\nQTranslator *mTranslator;\nvoid SetLanguage() {\n   if (mTranslator) {\n             qApp->removeTranslator(mTranslator);\n        }\n   }\n};"
Line 2092
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2092 always 2092
  "" always ""
Line 2094
  "bool f(std::ofstream &CFileStream) {\n  if(!CFileStream.good()) { return; }\n  CFileStream << \"abc\";\n  if (!CFileStream.good()) {}\n}" always "bool f(std::ofstream &CFileStream) {\n  if(!CFileStream.good()) { return; }\n  CFileStream << \"abc\";\n  if (!CFileStream.good()) {}\n}"
Line 2099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2099 always 2099
  "" always ""
Line 2104
  "void f() {\n   if (x == -1){\n       x = do_something();\n       if (x != -1) {}\n    }\n}" always "void f() {\n   if (x == -1){\n       x = do_something();\n       if (x != -1) {}\n    }\n}"
Line 2110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2110 always 2110
  "" always ""
Line 2113
  "void f() {\n   if (r < w){\n       r += 3;\n       if (r > w) {}\n    }\n}" always "void f() {\n   if (r < w){\n       r += 3;\n       if (r > w) {}\n    }\n}"
Line 2119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2119 always 2119
  "" always ""
Line 2122
  "void foo() {\n   if(i) {\n       i++;\n       if(!i) {}\n    }\n}" always "void foo() {\n   if(i) {\n       i++;\n       if(!i) {}\n    }\n}"
Line 2128
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2128 always 2128
  "" always ""
Line 2131
  "void f(int x) {\n  if (a[x] > 0) {\n    a[x] -= dt;\n    if (a[x] < 0) {}\n  }\n}" always "void f(int x) {\n  if (a[x] > 0) {\n    a[x] -= dt;\n    if (a[x] < 0) {}\n  }\n}"
Line 2137
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2137 always 2137
  "" always ""
Line 2140
  "void Foo::Bar() {\n   if(var){\n      --var;\n      if(!var){}\n      else {}\n   }\n}" always "void Foo::Bar() {\n   if(var){\n      --var;\n      if(!var){}\n      else {}\n   }\n}"
Line 2147
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2147 always 2147
  "" always ""
Line 2150
  "bool f() {\n  if (rec.lLength==0) {\n    rec.Delete(i);\n    if (rec.lLength!=0) {}\n  }\n}" always "bool f() {\n  if (rec.lLength==0) {\n    rec.Delete(i);\n    if (rec.lLength!=0) {}\n  }\n}"
Line 2156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2156 always 2156
  "" always ""
Line 2160
  "void f() {\n  struct S s;\n  bool hasFailed = false;\n  s.status = &hasFailed;\n\n  if (! hasFailed) {\n    doStuff(&s);\n    if (hasFailed) {}\n  }\n}" always "void f() {\n  struct S s;\n  bool hasFailed = false;\n  s.status = &hasFailed;\n\n  if (! hasFailed) {\n    doStuff(&s);\n    if (hasFailed) {}\n  }\n}"
Line 2170
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2170 always 2170
  "[test.cpp:6]: (style) Condition '!hasFailed' is always true\n" always "[test.cpp:6]: (style) Condition '!hasFailed' is always true\n"
Line 2175
  "void f(int x) {\n\n  if (x<4) {\n    if (x==5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x==5) {}\n  }\n}"
Line 2181
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2181 always 2181
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2183
  "void f(int x) {\n\n  if (x<4) {\n    if (x!=5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x!=5) {}\n  }\n}"
Line 2189
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2189 always 2189
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=5' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=5' is always true\n"
Line 2190
  "void f(int x) {\n\n  if (x<4) {\n    if (x>5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x>5) {}\n  }\n}"
Line 2196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2196 always 2196
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2198
  "void f(int x) {\n\n  if (x<4) {\n    if (x>=5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x>=5) {}\n  }\n}"
Line 2204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2204 always 2204
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2206
  "void f(int x) {\n\n  if (x<4) {\n    if (x<5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x<5) {}\n  }\n}"
Line 2212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2212 always 2212
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always true\n"
Line 2213
  "void f(int x) {\n\n  if (x<4) {\n    if (x<=5) {}\n  }\n}" always "void f(int x) {\n\n  if (x<4) {\n    if (x<=5) {}\n  }\n}"
Line 2219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2219 always 2219
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=5' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=5' is always true\n"
Line 2221
  "void f(int x) {\n\n  if (x<5) {\n    if (x==4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x==4) {}\n  }\n}"
Line 2227
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2227 always 2227
  "" always ""
Line 2228
  "void f(int x) {\n\n  if (x<5) {\n    if (x!=4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x!=4) {}\n  }\n}"
Line 2234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2234 always 2234
  "" always ""
Line 2235
  "void f(int x) {\n\n  if (x<5) {\n    if (x!=6) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x!=6) {}\n  }\n}"
Line 2241
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2241 always 2241
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=6' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x!=6' is always true\n"
Line 2242
  "void f(int x) {\n\n  if (x<5) {\n    if (x>4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x>4) {}\n  }\n}"
Line 2248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2248 always 2248
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always false\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always false\n"
Line 2249
  "void f(int x) {\n\n  if (x<5) {\n    if (x>=4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x>=4) {}\n  }\n}"
Line 2255
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2255 always 2255
  "" always ""
Line 2256
  "void f(int x) {\n\n  if (x<5) {\n    if (x<4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x<4) {}\n  }\n}"
Line 2262
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2262 always 2262
  "" always ""
Line 2263
  "void f(int x) {\n\n  if (x<5) {\n    if (x<=4) {}\n  }\n}" always "void f(int x) {\n\n  if (x<5) {\n    if (x<=4) {}\n  }\n}"
Line 2269
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2269 always 2269
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=4' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<=4' is always true\n"
Line 2272
  "void f(int x) {\n\n  if (x>4) {\n    if (x==5) {}\n  }\n}" always "void f(int x) {\n\n  if (x>4) {\n    if (x==5) {}\n  }\n}"
Line 2278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2278 always 2278
  "" always ""
Line 2279
  "void f(int x) {\n\n  if (x>4) {\n    if (x>5) {}\n  }\n}" always "void f(int x) {\n\n  if (x>4) {\n    if (x>5) {}\n  }\n}"
Line 2285
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2285 always 2285
  "" always ""
Line 2286
  "void f(int x) {\n\n  if (x>4) {\n    if (x>=5) {}\n  }\n}" always "void f(int x) {\n\n  if (x>4) {\n    if (x>=5) {}\n  }\n}"
Line 2292
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2292 always 2292
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=5' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=5' is always true\n"
Line 2293
  "void f(int x) {\n\n  if (x>4) {\n    if (x<5) {}\n  }\n}" always "void f(int x) {\n\n  if (x>4) {\n    if (x<5) {}\n  }\n}"
Line 2299
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2299 always 2299
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always false\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x<5' is always false\n"
Line 2300
  "void f(int x) {\n\n  if (x>4) {\n    if (x<=5) {}\n  }\n}" always "void f(int x) {\n\n  if (x>4) {\n    if (x<=5) {}\n  }\n}"
Line 2306
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2306 always 2306
  "" always ""
Line 2308
  "void f(int x) {\n\n  if (x>5) {\n    if (x==4) {}\n  }\n}" always "void f(int x) {\n\n  if (x>5) {\n    if (x==4) {}\n  }\n}"
Line 2314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2314 always 2314
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2316
  "void f(int x) {\n\n  if (x>5) {\n    if (x>4) {}\n  }\n}" always "void f(int x) {\n\n  if (x>5) {\n    if (x>4) {}\n  }\n}"
Line 2322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2322 always 2322
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>4' is always true\n"
Line 2323
  "void f(int x) {\n\n  if (x>5) {\n    if (x>=4) {}\n  }\n}" always "void f(int x) {\n\n  if (x>5) {\n    if (x>=4) {}\n  }\n}"
Line 2329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2329 always 2329
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=4' is always true\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'x>=4' is always true\n"
Line 2330
  "void f(int x) {\n\n  if (x>5) {\n    if (x<4) {}\n  }\n}" always "void f(int x) {\n\n  if (x>5) {\n    if (x<4) {}\n  }\n}"
Line 2336
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2336 always 2336
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2338
  "void f(int x) {\n\n  if (x>5) {\n    if (x<=4) {}\n  }\n}" always "void f(int x) {\n\n  if (x>5) {\n    if (x<=4) {}\n  }\n}"
Line 2344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2344 always 2344
  "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:3] -> [test.cpp:4]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2347
  "void f(int x) {\n  if (x < 4) {\n    if (10 < x) {}\n  }\n}" always "void f(int x) {\n  if (x < 4) {\n    if (10 < x) {}\n  }\n}"
Line 2352
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2352 always 2352
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2356
  "void f3(char c) { if(c=='x') if(c=='y') {}}" always "void f3(char c) { if(c=='x') if(c=='y') {}}"
Line 2357
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2357 always 2357
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2359
  "void f4(char *p) { if(*p=='x') if(*p=='y') {}}" always "void f4(char *p) { if(*p=='x') if(*p=='y') {}}"
Line 2360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2360 always 2360
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2362
  "void f5(const char * const p) { if(*p=='x') if(*p=='y') {}}" always "void f5(const char * const p) { if(*p=='x') if(*p=='y') {}}"
Line 2363
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2363 always 2363
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2365
  "void f5(const char * const p) { if('x'==*p) if('y'==*p) {}}" always "void f5(const char * const p) { if('x'==*p) if('y'==*p) {}}"
Line 2366
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2366 always 2366
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2368
  "void f6(char * const p) { if(*p=='x') if(*p=='y') {}}" always "void f6(char * const p) { if(*p=='x') if(*p=='y') {}}"
Line 2369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2369 always 2369
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2371
  "void f7(const char * p) { if(*p=='x') if(*p=='y') {}}" always "void f7(const char * p) { if(*p=='x') if(*p=='y') {}}"
Line 2372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2372 always 2372
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2374
  "void f8(int i) { if(i==4) if(i==2) {}}" always "void f8(int i) { if(i==4) if(i==2) {}}"
Line 2375
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2375 always 2375
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2377
  "void f9(int *p) { if (*p==4) if(*p==2) {}}" always "void f9(int *p) { if (*p==4) if(*p==2) {}}"
Line 2378
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2378 always 2378
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2380
  "void f10(int * const p) { if (*p==4) if(*p==2) {}}" always "void f10(int * const p) { if (*p==4) if(*p==2) {}}"
Line 2381
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2381 always 2381
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2383
  "void f11(const int *p) { if (*p==4) if(*p==2) {}}" always "void f11(const int *p) { if (*p==4) if(*p==2) {}}"
Line 2384
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2384 always 2384
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2386
  "void f12(const int * const p) { if (*p==4) if(*p==2) {}}" always "void f12(const int * const p) { if (*p==4) if(*p==2) {}}"
Line 2387
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2387 always 2387
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2389
  "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==2) {}}" always "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==2) {}}"
Line 2394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2394 always 2394
  "" always ""
Line 2396
  "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==4) {}}" always "struct foo {\n    int a;\n    int b;\n};\nvoid f(foo x) { if(x.a==4) if(x.b==4) {}}"
Line 2401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2401 always 2401
  "" always ""
Line 2403
  "void f3(char a, char b) { if(a==b) if(a==0) {}}" always "void f3(char a, char b) { if(a==b) if(a==0) {}}"
Line 2404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2404 always 2404
  "" always ""
Line 2406
  "void f(int x) { if (x == 1) if (x != 1) {} }" always "void f(int x) { if (x == 1) if (x != 1) {} }"
Line 2407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2407 always 2407
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2411
  "void f(int x) {\n  if (a>3 && x > 100) {\n    if (x < 10) {}\n  }}" always "void f(int x) {\n  if (a>3 && x > 100) {\n    if (x < 10) {}\n  }}"
Line 2416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2416 always 2416
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2418
  "void f(bool x, const int a, const int b) {\n        if(x && a < b)\n            if( x && a > b){}\n}\n" always "void f(bool x, const int a, const int b) {\n        if(x && a < b)\n            if( x && a > b){}\n}\n"
Line 2422
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2422 always 2422
  "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2426
  "void f1(const std::string &s) { if(s.size() > 42) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() > 42) if(s.empty()) {}}"
Line 2427
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2427 always 2427
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2429
  "void f1(const std::string &s) { if(s.size() > 0) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() > 0) if(s.empty()) {}}"
Line 2430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2430 always 2430
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2432
  "void f1(const std::string &s) { if(s.size() < 0) if(s.empty()) {}} " always "void f1(const std::string &s) { if(s.size() < 0) if(s.empty()) {}} "
Line 2433
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2433 always 2433
  "" always ""
Line 2435
  "void f1(const std::string &s) { if(s.empty()) if(s.size() > 42) {}}" always "void f1(const std::string &s) { if(s.empty()) if(s.size() > 42) {}}"
Line 2436
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2436 always 2436
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2438
  "template<class T> void f1(const T &s) { if(s.size() > 42) if(s.empty()) {}}" always "template<class T> void f1(const T &s) { if(s.size() > 42) if(s.empty()) {}}"
Line 2439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2439 always 2439
  "" always ""
Line 2441
  "void f2(const std::wstring &s) { if(s.empty()) if(s.size() > 42) {}}" always "void f2(const std::wstring &s) { if(s.empty()) if(s.size() > 42) {}}"
Line 2442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2442 always 2442
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2444
  "void f1(QString s) { if(s.isEmpty()) if(s.length() > 42) {}}" always "void f1(QString s) { if(s.isEmpty()) if(s.length() > 42) {}}"
Line 2445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2445 always 2445
  "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Opposite inner 'if' condition leads to a dead code block.\n"
Line 2447
  "void f1(const std::string &s, bool b) { if(s.empty() || ((s.size() == 1) && b)) {}}" always "void f1(const std::string &s, bool b) { if(s.empty() || ((s.size() == 1) && b)) {}}"
Line 2448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2448 always 2448
  "" always ""
Line 2450
  "void f1(const std::string &x, const std::string &y) { if(x.size() > 42) if(y.empty()) {}}" always "void f1(const std::string &x, const std::string &y) { if(x.size() > 42) if(y.empty()) {}}"
Line 2451
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2451 always 2451
  "" always ""
Line 2453
  "void f1(const std::string &x, const std::string &y) { if(y.empty()) if(x.size() > 42) {}}" always "void f1(const std::string &x, const std::string &y) { if(y.empty()) if(x.size() > 42) {}}"
Line 2454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2454 always 2454
  "" always ""
Line 2456
  "void f1(const std::string v[10]) { if(v[0].size() > 42) if(v[1].empty()) {}}" always "void f1(const std::string v[10]) { if(v[0].size() > 42) if(v[1].empty()) {}}"
Line 2457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2457 always 2457
  "" always ""
Line 2459
  "void f1(const std::string &s) { if(s.size() <= 1) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() <= 1) if(s.empty()) {}}"
Line 2460
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2460 always 2460
  "" always ""
Line 2462
  "void f1(const std::string &s) { if(s.size() <= 2) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() <= 2) if(s.empty()) {}}"
Line 2463
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2463 always 2463
  "" always ""
Line 2465
  "void f1(const std::string &s) { if(s.size() < 2) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() < 2) if(s.empty()) {}}"
Line 2466
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2466 always 2466
  "" always ""
Line 2468
  "void f1(const std::string &s) { if(s.size() >= 0) if(s.empty()) {}} " always "void f1(const std::string &s) { if(s.size() >= 0) if(s.empty()) {}} "
Line 2469
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2469 always 2469
  "" always ""
Line 2472
  "void f1(const std::string &s) { if(s.size() <= 0) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() <= 0) if(s.empty()) {}}"
Line 2473
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2473 always 2473
  "" always ""
Line 2476
  "void f1(const std::string &s) { if(s.size() < 1) if(s.empty()) {}}" always "void f1(const std::string &s) { if(s.size() < 1) if(s.empty()) {}}"
Line 2477
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2477 always 2477
  "" always ""
Line 2481
  "struct X {\n    void f() {\n        const int flag = get();\n        if (flag) {\n            bar();\n            if (!get()) {}\n        }\n    }\n    void bar();\n    int get() const;\n};" always "struct X {\n    void f() {\n        const int flag = get();\n        if (flag) {\n            bar();\n            if (!get()) {}\n        }\n    }\n    void bar();\n    int get() const;\n};"
Line 2492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2492 always 2492
  "" always ""
Line 2494
  "struct CD {\n    bool state;\n    void foo()  {\n        const bool flag = this->get();\n        if (flag) {\n            this->bar();\n            if (!this->get()) return;\n        }\n    }\n    bool get() const;\n    void bar();\n};\n" always "struct CD {\n    bool state;\n    void foo()  {\n        const bool flag = this->get();\n        if (flag) {\n            this->bar();\n            if (!this->get()) return;\n        }\n    }\n    bool get() const;\n    void bar();\n};\n"
Line 2506
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2506 always 2506
  "" always ""
Line 2508
  "class C {\npublic:\n  bool f() const { return x > 0; }\n  void g();\n  int x = 0;\n};\n\nvoid C::g() {\n  bool b = f();\n  x += 1;\n  if (!b && f()) {}\n}" always "class C {\npublic:\n  bool f() const { return x > 0; }\n  void g();\n  int x = 0;\n};\n\nvoid C::g() {\n  bool b = f();\n  x += 1;\n  if (!b && f()) {}\n}"
Line 2520
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2520 always 2520
  "" always ""
Line 2522
  "void f(double d) {\n    if (d != 0) {\n        int i = d;\n        if (i == 0) {}\n    }\n}\n" always "void f(double d) {\n    if (d != 0) {\n        int i = d;\n        if (i == 0) {}\n    }\n}\n"
Line 2528
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2528 always 2528
  "" always ""
Line 2532
  "void f1(int a, int b) { if(a==b) if(a==b) {}}" always "void f1(int a, int b) { if(a==b) if(a==b) {}}"
Line 2533
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2533 always 2533
  "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n"
Line 2535
  "void f2(int a, int b) { if(a!=b) if(a!=b) {}}" always "void f2(int a, int b) { if(a!=b) if(a!=b) {}}"
Line 2536
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2536 always 2536
  "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n" always "[test.cpp:1] -> [test.cpp:1]: (warning) Identical inner 'if' condition is always true.\n"
Line 2539
  "void f(bool a, bool b) {\n  if(a && b) {\n     if(a) {}\n     else  {}\n  }\n}" always "void f(bool a, bool b) {\n  if(a && b) {\n     if(a) {}\n     else  {}\n  }\n}"
Line 2545
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2545 always 2545
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical inner 'if' condition is always true.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical inner 'if' condition is always true.\n"
Line 2547
  "bool f(int a, int b) {\n    if(a == b) { return a == b; }\n    return false;\n}" always "bool f(int a, int b) {\n    if(a == b) { return a == b; }\n    return false;\n}"
Line 2551
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2551 always 2551
  "[test.cpp:2] -> [test.cpp:2]: (warning) Identical inner 'return' condition is always true.\n" always "[test.cpp:2] -> [test.cpp:2]: (warning) Identical inner 'return' condition is always true.\n"
Line 2553
  "bool f(bool a) {\n    if(a) { return a; }\n    return false;\n}" always "bool f(bool a) {\n    if(a) { return a; }\n    return false;\n}"
Line 2557
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2557 always 2557
  "" always ""
Line 2559
  "int* f(int* a, int * b) {\n    if(a) { return a; }\n    return b;\n}" always "int* f(int* a, int * b) {\n    if(a) { return a; }\n    return b;\n}"
Line 2563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2563 always 2563
  "" always ""
Line 2565
  "int* f(std::shared_ptr<int> a, std::shared_ptr<int> b) {\n    if(a.get()) { return a.get(); }\n    return b.get();\n}" always "int* f(std::shared_ptr<int> a, std::shared_ptr<int> b) {\n    if(a.get()) { return a.get(); }\n    return b.get();\n}"
Line 2569
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2569 always 2569
  "" always ""
Line 2571
  "struct A { int * x; };\nint* f(A a, int * b) {\n    if(a.x) { return a.x; }\n    return b;\n}" always "struct A { int * x; };\nint* f(A a, int * b) {\n    if(a.x) { return a.x; }\n    return b;\n}"
Line 2576
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2576 always 2576
  "" always ""
Line 2578
  "void f() {\n    uint32_t value;\n    get_value(&value);\n    int opt_function_capable = (value >> 28) & 1;\n    if (opt_function_capable) {\n        value = 0;\n        get_value (&value);\n        if ((value >> 28) & 1) {}\n    }\n}" always "void f() {\n    uint32_t value;\n    get_value(&value);\n    int opt_function_capable = (value >> 28) & 1;\n    if (opt_function_capable) {\n        value = 0;\n        get_value (&value);\n        if ((value >> 28) & 1) {}\n    }\n}"
Line 2588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2588 always 2588
  "" always ""
Line 2592
  "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100) {}\n}"
Line 2596
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2596 always 2596
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n"
Line 2598
  "bool f(int x) {\n  if (x > 100) { return false; }\n  return x > 100;\n}" always "bool f(int x) {\n  if (x > 100) { return false; }\n  return x > 100;\n}"
Line 2602
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2602 always 2602
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition and return expression 'x>100', return value is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition and return expression 'x>100', return value is always false\n"
Line 2604
  "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 || y > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 || y > 100) {}\n}"
Line 2608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2608 always 2608
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n"
Line 2610
  "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 && y > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  if (x > 100 && y > 100) {}\n}"
Line 2614
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2614 always 2614
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'x>100', second condition is always false\n"
Line 2616
  "void f(int x) {\n  if (x > 100) { return; }\n  if (abc) {}\n  if (x > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  if (abc) {}\n  if (x > 100) {}\n}"
Line 2621
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2621 always 2621
  "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n"
Line 2623
  "void f(int x) {\n  if (x > 100) { return; }\n  while (abc) { y = x; }\n  if (x > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  while (abc) { y = x; }\n  if (x > 100) {}\n}"
Line 2628
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2628 always 2628
  "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition 'x>100', second condition is always false\n"
Line 2630
  "void f(int x) {\n  if (x > 100) { return; }\n  X(do);\n  if (x > 100) {}\n}" always "void f(int x) {\n  if (x > 100) { return; }\n  X(do);\n  if (x > 100) {}\n}"
Line 2636
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2636 always 2636
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x>100' is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x>100' is always false\n"
Line 2638
  "void f(const int *i) {\n  if (!i) return;\n  if (!num1tok) { *num1 = *num2; }\n  if (!i) {}\n}" always "void f(const int *i) {\n  if (!i) return;\n  if (!num1tok) { *num1 = *num2; }\n  if (!i) {}\n}"
Line 2643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2643 always 2643
  "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition '!i', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Identical condition '!i', second condition is always false\n"
Line 2645
  "void C::f(Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}" always "void C::f(Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}"
Line 2651
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2651 always 2651
  "" always ""
Line 2653
  "struct C { void f(const Tree &coreTree); };\nvoid C::f(const Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}" always "struct C { void f(const Tree &coreTree); };\nvoid C::f(const Tree &coreTree) {\n  if(!coreTree.build())\n    return;\n  coreTree.dostuff();\n  if(!coreTree.build()) {}\n}"
Line 2660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2660 always 2660
  "[test.cpp:3] -> [test.cpp:6]: (warning) Identical condition '!coreTree.build()', second condition is always false\n" always "[test.cpp:3] -> [test.cpp:6]: (warning) Identical condition '!coreTree.build()', second condition is always false\n"
Line 2662
  "void f(int x) {\n  switch(type) {\n  case 1:\n    if (x == 0) return 1;\n    else return 2;\n  case 2:\n    if (x == 0) return 3;\n    else return 4;\n  }\n  return 0;\n}" always "void f(int x) {\n  switch(type) {\n  case 1:\n    if (x == 0) return 1;\n    else return 2;\n  case 2:\n    if (x == 0) return 3;\n    else return 4;\n  }\n  return 0;\n}"
Line 2673
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2673 always 2673
  "" always ""
Line 2675
  "static int failed = 0;\nvoid f() {\n  if (failed) return;\n  checkBuffer();\n  if (failed) {}\n}" always "static int failed = 0;\nvoid f() {\n  if (failed) return;\n  checkBuffer();\n  if (failed) {}\n}"
Line 2681
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2681 always 2681
  "" always ""
Line 2684
  "void f(const uint32_t *section, int32_t  start) {\n  if(10<=section[start]) { return; }\n  if(++start<100 && 10<=section[start]) { }\n}" always "void f(const uint32_t *section, int32_t  start) {\n  if(10<=section[start]) { return; }\n  if(++start<100 && 10<=section[start]) { }\n}"
Line 2688
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2688 always 2688
  "" always ""
Line 2691
  "void readNCBITree(std::istream &in) {\n  char ch;\n  in >> ch;\n  if (ch != '|') return;\n  in >> ch;\n  if (ch != '|') {}\n}" always "void readNCBITree(std::istream &in) {\n  char ch;\n  in >> ch;\n  if (ch != '|') return;\n  in >> ch;\n  if (ch != '|') {}\n}"
Line 2698
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2698 always 2698
  "" always ""
Line 2701
  "struct A {\n    void f() {\n        if (this->FileIndex >= 0) return;\n        this->FileIndex = 1 ;\n        if (this->FileIndex < 0) return;\n    }\n    int FileIndex;\n};" always "struct A {\n    void f() {\n        if (this->FileIndex >= 0) return;\n        this->FileIndex = 1 ;\n        if (this->FileIndex < 0) return;\n    }\n    int FileIndex;\n};"
Line 2709
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2709 always 2709
  "[test.cpp:5]: (style) Condition 'this->FileIndex<0' is always false\n" always "[test.cpp:5]: (style) Condition 'this->FileIndex<0' is always false\n"
Line 2712
  "short Do() {\n    short ret = bar1();\n    if ( ret )\n        return ret;\n#ifdef FEATURE\n    ret = bar2();\n#endif\n    return ret;\n}" always "short Do() {\n    short ret = bar1();\n    if ( ret )\n        return ret;\n#ifdef FEATURE\n    ret = bar2();\n#endif\n    return ret;\n}"
Line 2721
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2721 always 2721
  "" always ""
Line 2724
  "int f() {\n    int i = 0;\n    auto f = [&](bool b) { if (b) ++i; };\n    if (i) return i;\n    f(true);\n    if (i) return i;\n    return 0;\n}\n" always "int f() {\n    int i = 0;\n    auto f = [&](bool b) { if (b) ++i; };\n    if (i) return i;\n    f(true);\n    if (i) return i;\n    return 0;\n}\n"
Line 2732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2732 always 2732
  "" always ""
Line 2736
  "void f(int x, int y) {\n  if (x == 0) {\n    x += y;\n    if (x == 0) {}\n  }\n}" always "void f(int x, int y) {\n  if (x == 0) {\n    x += y;\n    if (x == 0) {}\n  }\n}"
Line 2742
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2742 always 2742
  "" always ""
Line 2744
  "void f(int x) {\n  if (x == 0) {\n    x += y;\n    if (x == 1) {}\n  }\n}" always "void f(int x) {\n  if (x == 0) {\n    x += y;\n    if (x == 1) {}\n  }\n}"
Line 2750
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2750 always 2750
  "" always ""
Line 2752
  "void f(int * x, int * y) {\n  if (x[*y] == 0) {\n    (*y)++;\n    if (x[*y] == 0) {}\n  }\n}" always "void f(int * x, int * y) {\n  if (x[*y] == 0) {\n    (*y)++;\n    if (x[*y] == 0) {}\n  }\n}"
Line 2758
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2758 always 2758
  "" always ""
Line 2763
  "void f() {\n    if (x = b() < 0) {}\n}" always "void f() {\n    if (x = b() < 0) {}\n}"
Line 2766
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2766 always 2766
  "[test.cpp:2]: (style) Suspicious condition (assignment + comparison); Clarify expression with parentheses.\n" always "[test.cpp:2]: (style) Suspicious condition (assignment + comparison); Clarify expression with parentheses.\n"
Line 2768
  "void f(int i) {\n    for (i = 0; i < 10; i++) {}\n}" always "void f(int i) {\n    for (i = 0; i < 10; i++) {}\n}"
Line 2771
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2771 always 2771
  "" always ""
Line 2773
  "void f() {\n    x = a<int>(); if (x) {}\n}" always "void f() {\n    x = a<int>(); if (x) {}\n}"
Line 2776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2776 always 2776
  "" always ""
Line 2778
  "void f() {\n    if (x = b < 0 ? 1 : 2) {}\n}" always "void f() {\n    if (x = b < 0 ? 1 : 2) {}\n}"
Line 2781
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2781 always 2781
  "" always ""
Line 2783
  "void f() {\n    int y = rand(), z = rand();\n    if (y || (!y && z));\n}" always "void f() {\n    int y = rand(), z = rand();\n    if (y || (!y && z));\n}"
Line 2787
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2787 always 2787
  "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n" always "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n"
Line 2789
  "void f() {\n    int y = rand(), z = rand();\n    if (y || !y && z);\n}" always "void f() {\n    int y = rand(), z = rand();\n    if (y || !y && z);\n}"
Line 2793
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2793 always 2793
  "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n" always "[test.cpp:3]: (style) Redundant condition: !y. 'y || (!y && z)' is equivalent to 'y || z'\n"
Line 2795
  "void f() {\n    if (!a || a && b) {}\n}" always "void f() {\n    if (!a || a && b) {}\n}"
Line 2798
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2798 always 2798
  "[test.cpp:2]: (style) Redundant condition: a. '!a || (a && b)' is equivalent to '!a || b'\n" always "[test.cpp:2]: (style) Redundant condition: a. '!a || (a && b)' is equivalent to '!a || b'\n"
Line 2801
  "void f(const Token *tok) {\n    if (!tok->next()->function() ||\n        (tok->next()->function() && tok->next()->function()->isConstructor()));\n}" always "void f(const Token *tok) {\n    if (!tok->next()->function() ||\n        (tok->next()->function() && tok->next()->function()->isConstructor()));\n}"
Line 2805
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2805 always 2805
  "[test.cpp:2]: (style) Redundant condition: tok->next()->function(). '!A || (A && B)' is equivalent to '!A || B'\n" always "[test.cpp:2]: (style) Redundant condition: tok->next()->function(). '!A || (A && B)' is equivalent to '!A || B'\n"
Line 2807
  "void f() {\n    if (!tok->next()->function() ||\n        (!tok->next()->function() && tok->next()->function()->isConstructor()));\n}" always "void f() {\n    if (!tok->next()->function() ||\n        (!tok->next()->function() && tok->next()->function()->isConstructor()));\n}"
Line 2811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2811 always 2811
  "" always ""
Line 2813
  "void f() {\n    if (!tok->next()->function() ||\n        (!tok2->next()->function() && tok->next()->function()->isConstructor()));\n}" always "void f() {\n    if (!tok->next()->function() ||\n        (!tok2->next()->function() && tok->next()->function()->isConstructor()));\n}"
Line 2817
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2817 always 2817
  "" always ""
Line 2819
  "void f(const Token *tok) {\n    if (!tok->next(1)->function(1) ||\n        (tok->next(1)->function(1) && tok->next(1)->function(1)->isConstructor()));\n}" always "void f(const Token *tok) {\n    if (!tok->next(1)->function(1) ||\n        (tok->next(1)->function(1) && tok->next(1)->function(1)->isConstructor()));\n}"
Line 2823
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2823 always 2823
  "[test.cpp:2]: (style) Redundant condition: tok->next(1)->function(1). '!A || (A && B)' is equivalent to '!A || B'\n" always "[test.cpp:2]: (style) Redundant condition: tok->next(1)->function(1). '!A || (A && B)' is equivalent to '!A || B'\n"
Line 2825
  "void f() {\n    if (!tok->next()->function(1) ||\n        (tok->next()->function(2) && tok->next()->function()->isConstructor()));\n}" always "void f() {\n    if (!tok->next()->function(1) ||\n        (tok->next()->function(2) && tok->next()->function()->isConstructor()));\n}"
Line 2829
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2829 always 2829
  "" always ""
Line 2831
  "void f() {\n   int y = rand(), z = rand();\n   if (y==0 || y!=0 && z);\n}" always "void f() {\n   int y = rand(), z = rand();\n   if (y==0 || y!=0 && z);\n}"
Line 2835
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2835 always 2835
  "[test.cpp:3]: (style) Redundant condition: y!=0. 'y==0 || (y!=0 && z)' is equivalent to 'y==0 || z'\n" always "[test.cpp:3]: (style) Redundant condition: y!=0. 'y==0 || (y!=0 && z)' is equivalent to 'y==0 || z'\n"
Line 2837
  "void f() {\n  if (x>0 || (x<0 && y)) {}\n}" always "void f() {\n  if (x>0 || (x<0 && y)) {}\n}"
Line 2840
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2840 always 2840
  "" always ""
Line 2843
  "void f() {\n  if (!dead || (dead && (*it).ticks > 0)) {}\n}" always "void f() {\n  if (!dead || (dead && (*it).ticks > 0)) {}\n}"
Line 2846
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2846 always 2846
  "[test.cpp:2]: (style) Redundant condition: dead. '!dead || (dead && (*it).ticks>0)' is equivalent to '!dead || (*it).ticks>0'\n" always "[test.cpp:2]: (style) Redundant condition: dead. '!dead || (dead && (*it).ticks>0)' is equivalent to '!dead || (*it).ticks>0'\n"
Line 2848
  "void f() {\n  if (!x || (x && (2>(y-1)))) {}\n}" always "void f() {\n  if (!x || (x && (2>(y-1)))) {}\n}"
Line 2851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2851 always 2851
  "[test.cpp:2]: (style) Redundant condition: x. '!x || (x && 2>(y-1))' is equivalent to '!x || 2>(y-1)'\n" always "[test.cpp:2]: (style) Redundant condition: x. '!x || (x && 2>(y-1))' is equivalent to '!x || 2>(y-1)'\n"
Line 2853
  "void f(bool a, bool b) {\n    if (a || (a && b)) {}\n}" always "void f(bool a, bool b) {\n    if (a || (a && b)) {}\n}"
Line 2856
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2856 always 2856
  "[test.cpp:2]: (style) Redundant condition: a. 'a || (a && b)' is equivalent to 'a'\n" always "[test.cpp:2]: (style) Redundant condition: a. 'a || (a && b)' is equivalent to 'a'\n"
Line 2858
  "void f(bool a, bool b) {\n    if (a && (a || b)) {}\n}" always "void f(bool a, bool b) {\n    if (a && (a || b)) {}\n}"
Line 2861
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2861 always 2861
  "[test.cpp:2]: (style) Redundant condition: a. 'a && (a || b)' is equivalent to 'a'\n" always "[test.cpp:2]: (style) Redundant condition: a. 'a && (a || b)' is equivalent to 'a'\n"
Line 2866
  "void f() {\n    if (x & 3 == 2) {}\n}" always "void f() {\n    if (x & 3 == 2) {}\n}"
Line 2869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2869 always 2869
  "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n[test.cpp:2]: (style) Condition 'x&3==2' is always false\n" always "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n[test.cpp:2]: (style) Condition 'x&3==2' is always false\n"
Line 2873
  "void f() {\n    if (a & fred1.x == fred2.y) {}\n}" always "void f() {\n    if (a & fred1.x == fred2.y) {}\n}"
Line 2876
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2876 always 2876
  "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" always "[test.cpp:2]: (style) Suspicious condition (bitwise operator + comparison); Clarify expression with parentheses.\n[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
Line 2883
  "void f(int w) {\n    if(!w & 0x8000) {}\n}" always "void f(int w) {\n    if(!w & 0x8000) {}\n}"
Line 2886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2886 always 2886
  "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" always "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
Line 2888
  "void f(int w) {\n    if((!w) & 0x8000) {}\n}" always "void f(int w) {\n    if((!w) & 0x8000) {}\n}"
Line 2891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2891 always 2891
  "" always ""
Line 2893
  "void f() {\n    if (x == foo() & 2) {}\n}" always "void f() {\n    if (x == foo() & 2) {}\n}"
Line 2896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2896 always 2896
  "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" always "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
Line 2898
  "void f() {\n    if (2 & x == foo()) {}\n}" always "void f() {\n    if (2 & x == foo()) {}\n}"
Line 2901
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2901 always 2901
  "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" always "[test.cpp:2]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
Line 2903
  "void f() {\n    if (2 & (x == foo())) {}\n}" always "void f() {\n    if (2 & (x == foo())) {}\n}"
Line 2906
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2906 always 2906
  "" always ""
Line 2908
  "void f(std::list<int> &ints) { }" always "void f(std::list<int> &ints) { }"
Line 2909
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2909 always 2909
  "" always ""
Line 2911
  "void f() { A<x &> a; }" always "void f() { A<x &> a; }"
Line 2912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2912 always 2912
  "" always ""
Line 2914
  "void f() { a(x<y|z,0); }" always "void f() { a(x<y|z,0); }"
  "test.c" always "test.c"
Line 2915
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2915 always 2915
  "[test.c:1]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n" always "[test.c:1]: (style) Boolean result is used in bitwise operation. Clarify expression with parentheses.\n"
Line 2917
  "class A<B&,C>;" always "class A<B&,C>;"
  "test.cpp" always "test.cpp"
Line 2918
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2918 always 2918
  "" always ""
Line 2920
  "void f() {\n    if (result != (char *)&inline_result) { }\n}" always "void f() {\n    if (result != (char *)&inline_result) { }\n}"
Line 2923
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2923 always 2923
  "" always ""
Line 2926
  "void f(bool a, bool b) {\n    C & a & b;\n}" always "void f(bool a, bool b) {\n    C & a & b;\n}"
Line 2929
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2929 always 2929
  "" always ""
Line 2933
  "typedef double SomeType;\ntypedef std::pair<std::string,SomeType> PairType;\nstruct S\n{\n     bool operator()\n         ( PairType const & left\n         , PairType const & right) const\n     {\n         return left.first < right.first;\n     }\n}" always "typedef double SomeType;\ntypedef std::pair<std::string,SomeType> PairType;\nstruct S\n{\n     bool operator()\n         ( PairType const & left\n         , PairType const & right) const\n     {\n         return left.first < right.first;\n     }\n}"
Line 2944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2944 always 2944
  "" always ""
Line 2948
  "template<bool B> struct CWinTraits;\nCWinTraits<WS_CHILD|WS_VISIBLE>::GetWndStyle(0);" always "template<bool B> struct CWinTraits;\nCWinTraits<WS_CHILD|WS_VISIBLE>::GetWndStyle(0);"
Line 2950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2950 always 2950
  "" always ""
Line 2954
  "template<class Y>\nSharedPtr& operator=( SharedPtr<Y> const & r ) {\n    px = r.px;\n    return *this;\n}" always "template<class Y>\nSharedPtr& operator=( SharedPtr<Y> const & r ) {\n    px = r.px;\n    return *this;\n}"
Line 2959
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2959 always 2959
  "" always ""
Line 2964
  "void f(bool error) {\n    bool & withoutSideEffects=found.first->second;\n    execute(secondExpression, &programMemory, &result, &error);\n}" always "void f(bool error) {\n    bool & withoutSideEffects=found.first->second;\n    execute(secondExpression, &programMemory, &result, &error);\n}"
Line 2968
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2968 always 2968
  "" always ""
Line 2974
  "bool a();\nbool f(bool b) {\n    return (a() & b);\n}" always "bool a();\nbool f(bool b) {\n    return (a() & b);\n}"
Line 2978
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2978 always 2978
  "" always ""
Line 2980
  "bool f(bool *a, bool b) {\n    return (a[10] & b);\n}" always "bool f(bool *a, bool b) {\n    return (a[10] & b);\n}"
Line 2983
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2983 always 2983
  "" always ""
Line 2985
  "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (a.a & b);\n}" always "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (a.a & b);\n}"
Line 2989
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2989 always 2989
  "" always ""
Line 2991
  "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (A::a & b);\n}" always "struct A { bool a; };\nbool f(struct A a, bool b) {\n    return (A::a & b);\n}"
Line 2995
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  2995 always 2995
  "" always ""
Line 2999
  "void png_parse(uint64_t init, int buf_size) {\n    if (init == 0x89504e470d0a1a0a || init == 0x8a4d4e470d0a1a0a)\n        ;\n}" always "void png_parse(uint64_t init, int buf_size) {\n    if (init == 0x89504e470d0a1a0a || init == 0x8a4d4e470d0a1a0a)\n        ;\n}"
Line 3003
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3003 always 3003
  "" always ""
Line 3007
  "extern uint64_t value;\nvoid foo() {\n    if( ( value >= 0x7ff0000000000001ULL )\n            && ( value <= 0x7fffffffffffffffULL ) );\n}" always "extern uint64_t value;\nvoid foo() {\n    if( ( value >= 0x7ff0000000000001ULL )\n            && ( value <= 0x7fffffffffffffffULL ) );\n}"
Line 3012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3012 always 3012
  "" always ""
Line 3017
  "void f(const struct S *s) {\n  int x1 = s->x;\n  int x2 = s->x;\n  if (x1 == 10 && x2 == 10) {}\n}" always "void f(const struct S *s) {\n  int x1 = s->x;\n  int x2 = s->x;\n  if (x1 == 10 && x2 == 10) {}\n}"
Line 3022
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3022 always 3022
  "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'x2==10' is always true\n" always "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'x2==10' is always true\n"
Line 3024
  "void f ()\n{\n    int a;\n    int b = 0;\n    int ret;\n \n    a = rand();\n    while (((0 < a) && (a < 2)) && ((8 < a) && (a < 10))) \n    {\n        b += a;\n        a ++;\n    }\n    ret = b;\n}" always "void f ()\n{\n    int a;\n    int b = 0;\n    int ret;\n \n    a = rand();\n    while (((0 < a) && (a < 2)) && ((8 < a) && (a < 10))) \n    {\n        b += a;\n        a ++;\n    }\n    ret = b;\n}"
Line 3038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3038 always 3038
  "[test.cpp:8] -> [test.cpp:8]: (style) Condition '8<a' is always false\n" always "[test.cpp:8] -> [test.cpp:8]: (style) Condition '8<a' is always false\n"
Line 3040
  "void f() {\n  int x = 0;\n  if (a) { return; }\n  if (!x) {}\n}" always "void f() {\n  int x = 0;\n  if (a) { return; }\n  if (!x) {}\n}"
Line 3045
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3045 always 3045
  "[test.cpp:4]: (style) Condition '!x' is always true\n" always "[test.cpp:4]: (style) Condition '!x' is always true\n"
Line 3047
  "bool f(int x) {\n  if(x == 0) { x++; return x == 0; }\n  return false;\n}" always "bool f(int x) {\n  if(x == 0) { x++; return x == 0; }\n  return false;\n}"
Line 3051
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3051 always 3051
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'x==0' is always false\n"
Line 3053
  "void f() {\n  int x = 0;\n  A(x++ == 1);\n  A(x++ == 2);\n}" always "void f() {\n  int x = 0;\n  A(x++ == 1);\n  A(x++ == 2);\n}"
Line 3058
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3058 always 3058
  "function argument is always true? however is code really weird/suspicious?" always "function argument is always true? however is code really weird/suspicious?"
  "" always ""
Line 3060
  "bool foo(int bar) {\n  bool ret = false;\n  if (bar == 1)\n    return ret;\n  if (bar == 2)\n    ret = true;\n  return ret;\n}" always "bool foo(int bar) {\n  bool ret = false;\n  if (bar == 1)\n    return ret;\n  if (bar == 2)\n    ret = true;\n  return ret;\n}"
Line 3068
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3068 always 3068
  "" always ""
Line 3070
  "void f1(const std::string &s) { if(s.empty()) if(s.size() == 0) {}}" always "void f1(const std::string &s) { if(s.empty()) if(s.size() == 0) {}}"
Line 3071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3071 always 3071
  "[test.cpp:1] -> [test.cpp:1]: (style) Condition 's.size()==0' is always true\n" always "[test.cpp:1] -> [test.cpp:1]: (style) Condition 's.size()==0' is always true\n"
Line 3073
  "void f() {\n   int buf[42];\n   if( buf != 0) {}\n}" always "void f() {\n   int buf[42];\n   if( buf != 0) {}\n}"
Line 3077
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3077 always 3077
  "[test.cpp:3]: (style) Condition 'buf!=0' is always true\n" always "[test.cpp:3]: (style) Condition 'buf!=0' is always true\n"
Line 3079
  "void f() {\n   int buf[42];\n   if( !buf ) {}\n}" always "void f() {\n   int buf[42];\n   if( !buf ) {}\n}"
Line 3083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3083 always 3083
  "[test.cpp:3]: (style) Condition '!buf' is always false\n" always "[test.cpp:3]: (style) Condition '!buf' is always false\n"
Line 3085
  "void f() {\n   int buf[42];\n   bool b = buf;\n   if( b ) {}\n}" always "void f() {\n   int buf[42];\n   bool b = buf;\n   if( b ) {}\n}"
Line 3090
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3090 always 3090
  "[test.cpp:4]: (style) Condition 'b' is always true\n" always "[test.cpp:4]: (style) Condition 'b' is always true\n"
Line 3092
  "void f() {\n   int buf[42];\n   bool b = buf;\n   if( !b ) {}\n}" always "void f() {\n   int buf[42];\n   bool b = buf;\n   if( !b ) {}\n}"
Line 3097
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3097 always 3097
  "[test.cpp:4]: (style) Condition '!b' is always false\n" always "[test.cpp:4]: (style) Condition '!b' is always false\n"
Line 3099
  "void f() {\n   int buf[42];\n   int * p = nullptr;\n   if( buf == p ) {}\n}" always "void f() {\n   int buf[42];\n   int * p = nullptr;\n   if( buf == p ) {}\n}"
Line 3104
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3104 always 3104
  "[test.cpp:4]: (style) Condition 'buf==p' is always false\n" always "[test.cpp:4]: (style) Condition 'buf==p' is always false\n"
Line 3106
  "void f(bool x) {\n   int buf[42];\n   if( buf || x ) {}\n}" always "void f(bool x) {\n   int buf[42];\n   if( buf || x ) {}\n}"
Line 3110
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3110 always 3110
  "[test.cpp:3]: (style) Condition 'buf' is always true\n" always "[test.cpp:3]: (style) Condition 'buf' is always true\n"
Line 3112
  "void f(int * p) {\n   int buf[42];\n   if( buf == p ) {}\n}" always "void f(int * p) {\n   int buf[42];\n   if( buf == p ) {}\n}"
Line 3116
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3116 always 3116
  "" always ""
Line 3118
  "void f() {\n   int buf[42];\n   int p[42];\n   if( buf == p ) {}\n}" always "void f() {\n   int buf[42];\n   int p[42];\n   if( buf == p ) {}\n}"
Line 3123
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3123 always 3123
  "" always ""
Line 3125
  "void f() {\n   int buf[42];\n   if( buf == 1) {}\n}" always "void f() {\n   int buf[42];\n   if( buf == 1) {}\n}"
Line 3129
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3129 always 3129
  "" always ""
Line 3132
  "#define NOT !\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (NOT x) {}\n}" always "#define NOT !\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (NOT x) {}\n}"
Line 3138
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3138 always 3138
  "" always ""
Line 3140
  "#define M  x != 0\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (M) {}\n}" always "#define M  x != 0\nvoid f() {\n  int x = 0;\n  if (a) { return; }\n  if (M) {}\n}"
Line 3146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3146 always 3146
  "" always ""
Line 3148
  "#define IF(X)  if (X && x())\nvoid f() {\n  IF(1) {}\n}" always "#define IF(X)  if (X && x())\nvoid f() {\n  IF(1) {}\n}"
Line 3152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3152 always 3152
  "" always ""
Line 3155
  "void f() {\n  if (sizeof(char) != 123) {}\n  if (123 != sizeof(char)) {}\n}" always "void f() {\n  if (sizeof(char) != 123) {}\n  if (123 != sizeof(char)) {}\n}"
Line 3159
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3159 always 3159
  "" always ""
Line 3161
  "void f() {\n  int x = 123;\n  if (sizeof(char) != x) {}\n  if (x != sizeof(char)) {}\n}" always "void f() {\n  int x = 123;\n  if (sizeof(char) != x) {}\n  if (x != sizeof(char)) {}\n}"
Line 3166
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3166 always 3166
  "[test.cpp:3]: (style) Condition 'sizeof(char)!=x' is always true\n[test.cpp:4]: (style) Condition 'x!=sizeof(char)' is always true\n" always "[test.cpp:3]: (style) Condition 'sizeof(char)!=x' is always true\n[test.cpp:4]: (style) Condition 'x!=sizeof(char)' is always true\n"
  "" always ""
Line 3171
  "void f() {\n  int x = 0;\n  assert(x == 0);\n}" always "void f() {\n  int x = 0;\n  assert(x == 0);\n}"
Line 3175
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3175 always 3175
  "" always ""
Line 3178
  "void f(bool b) {\n    if (b) {\n        if (bar(!b)) {}\n    }\n}" always "void f(bool b) {\n    if (b) {\n        if (bar(!b)) {}\n    }\n}"
Line 3183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3183 always 3183
  "" always ""
Line 3187
  "void foo(int x) {\n    if (x<0)\n    {\n        assert(0 && \"bla\");\n        ASSERT(0 && \"bla\");\n        assert_foo(0 && \"bla\");\n        ASSERT_FOO(0 && \"bla\");\n        assert((int)(0==0));\n        assert((int)(0==0) && \"bla\");\n    }\n}" always "void foo(int x) {\n    if (x<0)\n    {\n        assert(0 && \"bla\");\n        ASSERT(0 && \"bla\");\n        assert_foo(0 && \"bla\");\n        ASSERT_FOO(0 && \"bla\");\n        assert((int)(0==0));\n        assert((int)(0==0) && \"bla\");\n    }\n}"
Line 3198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3198 always 3198
  "" always ""
Line 3201
  "void f() {\n  if('a'){}\n  if(L'b'){}\n  if(1 && 'c'){}\n  int x = 'd' ? 1 : 2;\n}" always "void f() {\n  if('a'){}\n  if(L'b'){}\n  if(1 && 'c'){}\n  int x = 'd' ? 1 : 2;\n}"
Line 3207
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3207 always 3207
  "" always ""
Line 3210
  "void f(int i)\n{\n        if(i > 4)\n          for( int x = 0; i < 3; ++x){}\n}" always "void f(int i)\n{\n        if(i > 4)\n          for( int x = 0; i < 3; ++x){}\n}"
Line 3215
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3215 always 3215
  "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'i<3' is always false\n" always "[test.cpp:3] -> [test.cpp:4]: (style) Condition 'i<3' is always false\n"
Line 3218
  "void f() { if(true) {} }" always "void f() { if(true) {} }"
Line 3219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3219 always 3219
  "" always ""
Line 3221
  "void f() { if(false) {} }" always "void f() { if(false) {} }"
Line 3222
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3222 always 3222
  "" always ""
Line 3224
  "void f() { if(!true) {} }" always "void f() { if(!true) {} }"
Line 3225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3225 always 3225
  "" always ""
Line 3227
  "void f() { if(!false) {} }" always "void f() { if(!false) {} }"
Line 3228
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3228 always 3228
  "" always ""
Line 3230
  "void f() { if(0) {} }" always "void f() { if(0) {} }"
Line 3231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3231 always 3231
  "" always ""
Line 3233
  "void f() { if(1) {} }" always "void f() { if(1) {} }"
Line 3234
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3234 always 3234
  "" always ""
Line 3236
  "void f(int i) {\n    bool b = false;\n    if (i == 0) b = true;\n    else if (!b && i == 1) {}\n    if (b)\n    {}\n}" always "void f(int i) {\n    bool b = false;\n    if (i == 0) b = true;\n    else if (!b && i == 1) {}\n    if (b)\n    {}\n}"
Line 3243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3243 always 3243
  "[test.cpp:4]: (style) Condition '!b' is always true\n" always "[test.cpp:4]: (style) Condition '!b' is always true\n"
Line 3245
  "bool f() { return nullptr; }" always "bool f() { return nullptr; }"
Line 3246
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3246 always 3246
  "" always ""
Line 3248
  "enum E { A };\nbool f() { return A; }" always "enum E { A };\nbool f() { return A; }"
Line 3250
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3250 always 3250
  "" always ""
Line 3252
  "bool f() {\n    const int x = 0;\n    return x;\n}" always "bool f() {\n    const int x = 0;\n    return x;\n}"
Line 3256
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3256 always 3256
  "" always ""
Line 3258
  "int f(void){return 1/abs(10);}" always "int f(void){return 1/abs(10);}"
Line 3259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3259 always 3259
  "" always ""
Line 3261
  "bool f() {\n    int x = 0;\n    return x;\n}" always "bool f() {\n    int x = 0;\n    return x;\n}"
Line 3265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3265 always 3265
  "" always ""
Line 3267
  "bool f() {\n    const int a = 50;\n    const int b = 52;\n    return a+b;\n}" always "bool f() {\n    const int a = 50;\n    const int b = 52;\n    return a+b;\n}"
Line 3272
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3272 always 3272
  "" always ""
Line 3274
  "int f() {\n    int a = 50;\n    int b = 52;\n    a++;\n    b++;\n    return a+b;\n}" always "int f() {\n    int a = 50;\n    int b = 52;\n    a++;\n    b++;\n    return a+b;\n}"
Line 3281
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3281 always 3281
  "" always ""
Line 3283
  "bool& g();\nbool f() {\n    bool & b = g();\n    b = false;\n    return b;\n}" always "bool& g();\nbool f() {\n    bool & b = g();\n    b = false;\n    return b;\n}"
Line 3289
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3289 always 3289
  "" always ""
Line 3291
  "struct A {\n    bool b;\n    bool f() {\n        b = false;\n        return b;\n    }\n};" always "struct A {\n    bool b;\n    bool f() {\n        b = false;\n        return b;\n    }\n};"
Line 3298
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3298 always 3298
  "" always ""
Line 3300
  "bool f(long maxtime) {\n  if (std::time(0) > maxtime)\n    return std::time(0) > maxtime;\n}" always "bool f(long maxtime) {\n  if (std::time(0) > maxtime)\n    return std::time(0) > maxtime;\n}"
Line 3304
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3304 always 3304
  "" always ""
Line 3306
  "void foo(double param) {\n  while(bar()) {\n    if (param<0.)\n       return;\n  }\n  if (param<0.)\n    return;\n}" always "void foo(double param) {\n  while(bar()) {\n    if (param<0.)\n       return;\n  }\n  if (param<0.)\n    return;\n}"
Line 3314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3314 always 3314
  "" always ""
Line 3316
  "void foo(int i) {\n  if (i==42)\n  {\n    bar();\n  }\n  if (cond && (42==i))\n    return;\n}" always "void foo(int i) {\n  if (i==42)\n  {\n    bar();\n  }\n  if (cond && (42==i))\n    return;\n}"
Line 3324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3324 always 3324
  "" always ""
Line 3327
  "class a {\n  int b;\n  c(b);\n  void f() {\n    if (b) return;\n  }\n};" always "class a {\n  int b;\n  c(b);\n  void f() {\n    if (b) return;\n  }\n};"
Line 3334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3334 always 3334
  "" always ""
Line 3336
  "void f(const char* x, const char* t) {\n    if (!(strcmp(x, y) == 0)) { return; }\n}" always "void f(const char* x, const char* t) {\n    if (!(strcmp(x, y) == 0)) { return; }\n}"
Line 3339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3339 always 3339
  "" always ""
Line 3341
  "void f(const int a[]){ if (a == 0){} }" always "void f(const int a[]){ if (a == 0){} }"
Line 3342
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3342 always 3342
  "" always ""
Line 3344
  "struct S {\n  bool operator<(const S&);\n};\nint main() {\n  S s;\n  bool c = s<s;\n  if (c) return 0;\n  else return 42;\n}" always "struct S {\n  bool operator<(const S&);\n};\nint main() {\n  S s;\n  bool c = s<s;\n  if (c) return 0;\n  else return 42;\n}"
Line 3353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3353 always 3353
  "" always ""
Line 3355
  "long X::g(bool unknown, int& result) {\n    long ret = 0;\n    bool f = false;\n    f = f || unknown;\n    f ? result = 42 : ret = -1;\n    return ret;\n}" always "long X::g(bool unknown, int& result) {\n    long ret = 0;\n    bool f = false;\n    f = f || unknown;\n    f ? result = 42 : ret = -1;\n    return ret;\n}"
Line 3362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3362 always 3362
  "" always ""
Line 3364
  "int f(void *handle) {\n    if (!handle) return 0;\n    if (handle) return 1;\n    else return 0;\n}" always "int f(void *handle) {\n    if (!handle) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
Line 3369
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3369 always 3369
  "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'handle' is always true\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'handle' is always true\n"
Line 3371
  "int f(void *handle) {\n    if (handle == 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}" always "int f(void *handle) {\n    if (handle == 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
Line 3376
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3376 always 3376
  "[test.cpp:3]: (style) Condition 'handle' is always true\n" always "[test.cpp:3]: (style) Condition 'handle' is always true\n"
Line 3378
  "int f(void *handle) {\n    if (handle != 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}" always "int f(void *handle) {\n    if (handle != 0) return 0;\n    if (handle) return 1;\n    else return 0;\n}"
Line 3383
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3383 always 3383
  "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'handle!=0', second condition is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Identical condition 'handle!=0', second condition is always false\n"
Line 3385
  "void f(void* x, void* y) {\n    if (x == nullptr && y == nullptr)\n        return;\n    if (x == nullptr || y == nullptr)\n        return;\n}" always "void f(void* x, void* y) {\n    if (x == nullptr && y == nullptr)\n        return;\n    if (x == nullptr || y == nullptr)\n        return;\n}"
Line 3391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3391 always 3391
  "" always ""
Line 3393
  "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n        if (a == b)\n            break;\n    }\n    if (a) {}\n}" always "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n        if (a == b)\n            break;\n    }\n    if (a) {}\n}"
Line 3402
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3402 always 3402
  "" always ""
Line 3404
  "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n    }\n    if (a) {}\n}" always "void* g();\nvoid f(void* a, void* b) {\n    while (a) {\n        a = g();\n    }\n    if (a) {}\n}"
Line 3411
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3411 always 3411
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'a' is always false\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'a' is always false\n"
Line 3413
  "void f(int * x, bool b) {\n    if (!x && b) {}\n    else if (x) {}\n}" always "void f(int * x, bool b) {\n    if (!x && b) {}\n    else if (x) {}\n}"
Line 3417
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3417 always 3417
  "" always ""
Line 3419
  "void f() {\n    const std::string x=\"xyz\";\n    if(!x.empty()){}\n}" always "void f() {\n    const std::string x=\"xyz\";\n    if(!x.empty()){}\n}"
Line 3423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3423 always 3423
  "[test.cpp:3]: (style) Condition '!x.empty()' is always true\n" always "[test.cpp:3]: (style) Condition '!x.empty()' is always true\n"
Line 3425
  "std::string g();\nvoid f() {\n    const std::string msg = g();\n    if(!msg.empty()){}\n}" always "std::string g();\nvoid f() {\n    const std::string msg = g();\n    if(!msg.empty()){}\n}"
Line 3430
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3430 always 3430
  "" always ""
Line 3432
  "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        if(array){}\n    }\n}" always "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        if(array){}\n    }\n}"
Line 3439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3439 always 3439
  "[test.cpp:5]: (style) Condition 'array' is always true\n" always "[test.cpp:5]: (style) Condition 'array' is always true\n"
Line 3441
  "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        else if(array){}\n    }\n}" always "void f(int *array, int size ) {\n    for(int i = 0; i < size; ++i) {\n        if(array == 0)\n            continue;\n        else if(array){}\n    }\n}"
Line 3448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3448 always 3448
  "[test.cpp:5]: (style) Condition 'array' is always true\n" always "[test.cpp:5]: (style) Condition 'array' is always true\n"
Line 3451
  "int f() {\n    constexpr bool x = true;\n    if constexpr (x)\n        return 0;\n    else\n        return 1;\n}" always "int f() {\n    constexpr bool x = true;\n    if constexpr (x)\n        return 0;\n    else\n        return 1;\n}"
Line 3458
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3458 always 3458
  "" always ""
Line 3461
  "void f() {\n    const size_t a(8 * sizeof(short));\n    const size_t b(8 * sizeof(int));\n    if constexpr (a == 16 && b == 16) {}\n    else if constexpr (a == 16 && b == 32) {}\n}\n" always "void f() {\n    const size_t a(8 * sizeof(short));\n    const size_t b(8 * sizeof(int));\n    if constexpr (a == 16 && b == 16) {}\n    else if constexpr (a == 16 && b == 32) {}\n}\n"
Line 3467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3467 always 3467
  "" always ""
Line 3470
  "struct S {\n  int a;\n  int b;\n};\nvoid g(S s, bool& x);\nvoid f() {\n  bool x = false;\n  g({0, 1}, x);\n  if (x) {}\n}" always "struct S {\n  int a;\n  int b;\n};\nvoid g(S s, bool& x);\nvoid f() {\n  bool x = false;\n  g({0, 1}, x);\n  if (x) {}\n}"
Line 3480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3480 always 3480
  "" always ""
Line 3483
  "class A {};\nclass B : public A {};\nvoid f(A* x) {\n  if (!x)\n    return;\n  auto b = dynamic_cast<B*>(x);\n  if (b) {}\n}" always "class A {};\nclass B : public A {};\nvoid f(A* x) {\n  if (!x)\n    return;\n  auto b = dynamic_cast<B*>(x);\n  if (b) {}\n}"
Line 3491
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3491 always 3491
  "" always ""
Line 3493
  "int foo() {\n    auto x = getX();\n    if (x == nullptr)\n        return 1;\n    auto y = dynamic_cast<Y*>(x)\n    if (y == nullptr)\n        return 2;\n    return 3;\n}\n" always "int foo() {\n    auto x = getX();\n    if (x == nullptr)\n        return 1;\n    auto y = dynamic_cast<Y*>(x)\n    if (y == nullptr)\n        return 2;\n    return 3;\n}\n"
Line 3502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3502 always 3502
  "" always ""
Line 3505
  "bool g();\nvoid f(bool x) {\n    if (x) while(x) x = g();\n}" always "bool g();\nvoid f(bool x) {\n    if (x) while(x) x = g();\n}"
Line 3509
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3509 always 3509
  "" always ""
Line 3512
  "void f(std::istringstream& iss) {\n   std::string x;\n   while (iss) {\n       iss >> x;\n       if (!iss) break;\n   }\n}" always "void f(std::istringstream& iss) {\n   std::string x;\n   while (iss) {\n       iss >> x;\n       if (!iss) break;\n   }\n}"
Line 3519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3519 always 3519
  "" always ""
Line 3522
  "struct A { void* g(); };\nvoid f() {\n    A a;\n    void* b = a.g();\n    if (!b) return;\n    void* c = a.g();\n    if (!c) return;\n    bool compare = c == b;\n}" always "struct A { void* g(); };\nvoid f() {\n    A a;\n    void* b = a.g();\n    if (!b) return;\n    void* c = a.g();\n    if (!c) return;\n    bool compare = c == b;\n}"
Line 3531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3531 always 3531
  "" always ""
Line 3534
  "void f(char c) {\n    if (c == '.') {}\n    else if (isdigit(c) != 0) {}\n}" always "void f(char c) {\n    if (c == '.') {}\n    else if (isdigit(c) != 0) {}\n}"
Line 3538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3538 always 3538
  "" always ""
Line 3541
  "int f(int x) {\n    const bool b = x < 42;\n    if(b) return b?0:-1;\n    return 42;\n}" always "int f(int x) {\n    const bool b = x < 42;\n    if(b) return b?0:-1;\n    return 42;\n}"
Line 3546
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3546 always 3546
  "[test.cpp:3] -> [test.cpp:3]: (style) Condition 'b' is always true\n" always "[test.cpp:3] -> [test.cpp:3]: (style) Condition 'b' is always true\n"
Line 3549
  "uint8_t g();\nvoid f() {\n    const uint8_t v = g();\n    if((v != 0x00)) {\n        if( (v & 0x01) == 0x00) {}\n    }\n}" always "uint8_t g();\nvoid f() {\n    const uint8_t v = g();\n    if((v != 0x00)) {\n        if( (v & 0x01) == 0x00) {}\n    }\n}"
Line 3556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3556 always 3556
  "" always ""
Line 3559
  "void f(long x) {\n    if (x <= 0L)\n        return;\n    if (x % 360L == 0)\n        return;\n}" always "void f(long x) {\n    if (x <= 0L)\n        return;\n    if (x % 360L == 0)\n        return;\n}"
Line 3565
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3565 always 3565
  "" always ""
Line 3567
  "int f(int a, int b) {\n    static const int x = 10;\n    return x == 1 ? a : b;\n}" always "int f(int a, int b) {\n    static const int x = 10;\n    return x == 1 ? a : b;\n}"
Line 3571
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3571 always 3571
  "" always ""
Line 3573
  "const bool x = false;\nvoid f() {\n    if (x) {}\n}" always "const bool x = false;\nvoid f() {\n    if (x) {}\n}"
Line 3577
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3577 always 3577
  "" always ""
Line 3579
  "const bool x = false;\nvoid f() {\n    if (!x) {}\n}" always "const bool x = false;\nvoid f() {\n    if (!x) {}\n}"
Line 3583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3583 always 3583
  "" always ""
Line 3586
  "void f(int a) {\n    bool ok = false;\n    const char * r = nullptr;\n    do_something(&r);\n    if (r != nullptr)\n        ok = a != 0;\n    if (ok) {}\n}" always "void f(int a) {\n    bool ok = false;\n    const char * r = nullptr;\n    do_something(&r);\n    if (r != nullptr)\n        ok = a != 0;\n    if (ok) {}\n}"
Line 3594
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3594 always 3594
  "" always ""
Line 3597
  "bool g();\nvoid f() {\n    bool b = false;\n    do {\n        do {\n            if (g())\n                break;\n            b = true;\n        } while(false);\n    } while(!b);\n}\n" always "bool g();\nvoid f() {\n    bool b = false;\n    do {\n        do {\n            if (g())\n                break;\n            b = true;\n        } while(false);\n    } while(!b);\n}\n"
Line 3608
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3608 always 3608
  "" always ""
Line 3611
  "void f(const std::string &s) {\n    for (std::string::const_iterator it = s.begin(); it != s.end(); ++it) {\n        const unsigned char c = static_cast<unsigned char>(*it);\n        if (c == '0') {}\n        else if ((c == 'a' || c == 'A')\n                 || (c == 'b' || c == 'B')) {}\n        else {}\n    }\n}\n" always "void f(const std::string &s) {\n    for (std::string::const_iterator it = s.begin(); it != s.end(); ++it) {\n        const unsigned char c = static_cast<unsigned char>(*it);\n        if (c == '0') {}\n        else if ((c == 'a' || c == 'A')\n                 || (c == 'b' || c == 'B')) {}\n        else {}\n    }\n}\n"
Line 3620
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3620 always 3620
  "" always ""
Line 3623
  "int main(int argc, char* argv[]) {\n  int foo = 0;\n  struct option options[] = {\n    {\"foo\", no_argument, &foo, \'f\'},\n    {NULL, 0, NULL, 0},\n  };\n  getopt_long(argc, argv, \"f\", options, NULL);\n  if (foo) {}\n}\n" always "int main(int argc, char* argv[]) {\n  int foo = 0;\n  struct option options[] = {\n    {\"foo\", no_argument, &foo, \'f\'},\n    {NULL, 0, NULL, 0},\n  };\n  getopt_long(argc, argv, \"f\", options, NULL);\n  if (foo) {}\n}\n"
Line 3632
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3632 always 3632
  "" always ""
Line 3634
  "struct a {\n  int *b();\n};\nbool g(a c, a* d) {\n  a *v, *e = v = &c;\n  if (!v)\n    return true;\n  int *f = v->b();\n  if (f)\n    v = nullptr;\n  if (v == nullptr && e) {}\n  return d;\n}\n" always "struct a {\n  int *b();\n};\nbool g(a c, a* d) {\n  a *v, *e = v = &c;\n  if (!v)\n    return true;\n  int *f = v->b();\n  if (f)\n    v = nullptr;\n  if (v == nullptr && e) {}\n  return d;\n}\n"
Line 3647
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3647 always 3647
  "" always ""
Line 3650
  "struct a {\n    int* p;\n};\nvoid g(a*);\nvoid f() {\n    struct a b;\n    uint32_t p = (uint32_t) -1;\n    b.p = (void *) &p;\n    int r = g(&b);\n    if (r == 0)\n        if (p != (uint32_t) -1) {}\n}\n" always "struct a {\n    int* p;\n};\nvoid g(a*);\nvoid f() {\n    struct a b;\n    uint32_t p = (uint32_t) -1;\n    b.p = (void *) &p;\n    int r = g(&b);\n    if (r == 0)\n        if (p != (uint32_t) -1) {}\n}\n"
Line 3662
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3662 always 3662
  "" always ""
Line 3665
  "int g(int);\nbool h(int*);\nint f(int *x) {\n    int y = g(0);\n    if (!y) {\n        if (h(x)) {\n            y = g(1);\n            if (y) {}\n            return 0;\n        }\n        if (!y) {}\n    }\n    return 0;\n}\n" always "int g(int);\nbool h(int*);\nint f(int *x) {\n    int y = g(0);\n    if (!y) {\n        if (h(x)) {\n            y = g(1);\n            if (y) {}\n            return 0;\n        }\n        if (!y) {}\n    }\n    return 0;\n}\n"
Line 3679
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3679 always 3679
  "[test.cpp:5] -> [test.cpp:11]: (style) Condition '!y' is always true\n" always "[test.cpp:5] -> [test.cpp:11]: (style) Condition '!y' is always true\n"
Line 3682
  "bool foo(bool b);\nbool thud(const std::vector<std::wstring>& Arr, const std::wstring& Str) {\n  if (Arr.empty() && Str.empty())\n    return false;\n  bool OldFormat = Arr.empty() && !Str.empty();\n  if (OldFormat)\n    return foo(OldFormat);\n  return false;\n}\n" always "bool foo(bool b);\nbool thud(const std::vector<std::wstring>& Arr, const std::wstring& Str) {\n  if (Arr.empty() && Str.empty())\n    return false;\n  bool OldFormat = Arr.empty() && !Str.empty();\n  if (OldFormat)\n    return foo(OldFormat);\n  return false;\n}\n"
Line 3691
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3691 always 3691
  "" always ""
Line 3694
  "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n" always "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
Line 3701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3701 always 3701
  "" always ""
Line 3703
  "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n" always "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
Line 3710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3710 always 3710
  "" always ""
Line 3712
  "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{'a', 'b'}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n" always "bool GetFirst(std::string &first);\nbool GetNext(std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name{'a', 'b'}; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
Line 3719
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3719 always 3719
  "" always ""
Line 3721
  "bool GetFirst(const std::string &first);\nbool GetNext(const std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n" always "bool GetFirst(const std::string &first);\nbool GetNext(const std::string &next);\nvoid g(const std::string& name);\nvoid f() {\n  for (std::string name; name.empty() ? GetFirst(name) : GetNext(name);)\n    g(name);\n}\n"
Line 3728
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3728 always 3728
  "[test.cpp:5]: (style) Condition 'name.empty()' is always true\n" always "[test.cpp:5]: (style) Condition 'name.empty()' is always true\n"
Line 3731
  "void foo(unsigned int x) {\n    if ((100 - x) > 0) {}\n}\n" always "void foo(unsigned int x) {\n    if ((100 - x) > 0) {}\n}\n"
Line 3734
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3734 always 3734
  "" always ""
Line 3737
  "void foo(unsigned int x) {\n    if (x == -1) {}\n}\n" always "void foo(unsigned int x) {\n    if (x == -1) {}\n}\n"
Line 3740
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3740 always 3740
  "" always ""
Line 3743
  "struct AB {\n    int a;\n};\nstruct ABC {\n    AB* ab;\n};\nvoid g(ABC*);\nint f(struct ABC *abc) {\n    int err = 0;\n    AB *ab = abc->ab;\n    if (ab->a == 123){\n        g(abc);\n        if (ab->a != 123) {\n            err = 1;\n        }\n    }\n    return err;\n}\n" always "struct AB {\n    int a;\n};\nstruct ABC {\n    AB* ab;\n};\nvoid g(ABC*);\nint f(struct ABC *abc) {\n    int err = 0;\n    AB *ab = abc->ab;\n    if (ab->a == 123){\n        g(abc);\n        if (ab->a != 123) {\n            err = 1;\n        }\n    }\n    return err;\n}\n"
Line 3761
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3761 always 3761
  "" always ""
Line 3764
  "void foo(int x) {\n    if(x)\n        if(x == 1) {}\n}\n" always "void foo(int x) {\n    if(x)\n        if(x == 1) {}\n}\n"
Line 3768
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3768 always 3768
  "" always ""
Line 3770
  "void foo(int x) {\n    if(x) {}\n    else\n        if(x == 1) {}\n}\n" always "void foo(int x) {\n    if(x) {}\n    else\n        if(x == 1) {}\n}\n"
Line 3775
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3775 always 3775
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n"
Line 3778
  "void foo(unsigned int max) {\n    unsigned int num = max - 1;\n    if (num < 0) {}\n}" always "void foo(unsigned int max) {\n    unsigned int num = max - 1;\n    if (num < 0) {}\n}"
Line 3782
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3782 always 3782
  "" always ""
Line 3785
  "void foo(size_t len, int start) {\n    if (start < 0) {\n        start = len+start;\n        if (start < 0) {}\n    }\n}\n" always "void foo(size_t len, int start) {\n    if (start < 0) {\n        start = len+start;\n        if (start < 0) {}\n    }\n}\n"
Line 3791
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3791 always 3791
  "" always ""
Line 3794
  "int tok;\nvoid next();\nvoid parse_attribute() {\n    if (tok == '(') {\n        int parenthesis = 0;\n        do {\n            if (tok == '(')\n                parenthesis++;\n            else if (tok == ')')\n                parenthesis--;\n            next();\n        } while (parenthesis && tok != -1);\n    }\n}\n" always "int tok;\nvoid next();\nvoid parse_attribute() {\n    if (tok == '(') {\n        int parenthesis = 0;\n        do {\n            if (tok == '(')\n                parenthesis++;\n            else if (tok == ')')\n                parenthesis--;\n            next();\n        } while (parenthesis && tok != -1);\n    }\n}\n"
Line 3808
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3808 always 3808
  "" always ""
Line 3811
  "void f(int i) {\n    if(abs(i) == -1) {}\n}\n" always "void f(int i) {\n    if(abs(i) == -1) {}\n}\n"
Line 3814
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3814 always 3814
  "[test.cpp:2]: (style) Condition 'abs(i)==-1' is always false\n" always "[test.cpp:2]: (style) Condition 'abs(i)==-1' is always false\n"
Line 3817
  "void f(int i) {\n    if(i > 0 && abs(i) == i) {}\n}\n" always "void f(int i) {\n    if(i > 0 && abs(i) == i) {}\n}\n"
Line 3820
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3820 always 3820
  "[test.cpp:2]: (style) Condition 'abs(i)==i' is always true\n" always "[test.cpp:2]: (style) Condition 'abs(i)==i' is always true\n"
Line 3822
  "void f(int i) {\n    if(i < 0 && abs(i) == i) {}\n}\n" always "void f(int i) {\n    if(i < 0 && abs(i) == i) {}\n}\n"
Line 3825
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3825 always 3825
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'abs(i)==i' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'abs(i)==i' is always false\n"
Line 3827
  "void f(int i) {\n    if(i > -3 && abs(i) == i) {}\n}\n" always "void f(int i) {\n    if(i > -3 && abs(i) == i) {}\n}\n"
Line 3830
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3830 always 3830
  "" always ""
Line 3833
  "bool f(bool a, bool b) {\n    return a || ! b || ! a;\n}\n" always "bool f(bool a, bool b) {\n    return a || ! b || ! a;\n}\n"
Line 3836
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3836 always 3836
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a' is always true\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a' is always true\n"
Line 3839
  "void f(int i) {\n    if (i >= 64) {}\n    else if (i >= 32) {\n        i &= 31;\n        if (i == 0) {}\n        else {}\n    }\n}\n" always "void f(int i) {\n    if (i >= 64) {}\n    else if (i >= 32) {\n        i &= 31;\n        if (i == 0) {}\n        else {}\n    }\n}\n"
Line 3847
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3847 always 3847
  "" always ""
Line 3850
  "void f() {\n    int i = 0;\n    do {} while (i++ == 0);\n}\n" always "void f() {\n    int i = 0;\n    do {} while (i++ == 0);\n}\n"
Line 3854
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3854 always 3854
  "" always ""
Line 3857
  "static void fun(message_t *message) {\n    if (message->length >= 1) {\n        switch (data[0]) {}\n    }\n    uint8_t d0 = message->length > 0 ? data[0] : 0xff;\n}\n" always "static void fun(message_t *message) {\n    if (message->length >= 1) {\n        switch (data[0]) {}\n    }\n    uint8_t d0 = message->length > 0 ? data[0] : 0xff;\n}\n"
Line 3863
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3863 always 3863
  "" always ""
Line 3866
  "void f(bool b) {\n    if (b)\n        return;\n    if (g(&b) || b)\n        return;\n}\n" always "void f(bool b) {\n    if (b)\n        return;\n    if (g(&b) || b)\n        return;\n}\n"
Line 3872
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3872 always 3872
  "" always ""
Line 3875
  "bool bar(int &);\nvoid f(int a, int b) {\n    if (a + b == 3)\n        return;\n    if (bar(a) && (a + b == 3)) {}\n}\n" always "bool bar(int &);\nvoid f(int a, int b) {\n    if (a + b == 3)\n        return;\n    if (bar(a) && (a + b == 3)) {}\n}\n"
Line 3881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3881 always 3881
  "" always ""
Line 3884
  "void f() {\n  Obj* PObj = nullptr;\n  bool b = false;\n  if (GetObj(PObj) && PObj != nullptr)\n    b = true;\n  if (b) {}\n}\n" always "void f() {\n  Obj* PObj = nullptr;\n  bool b = false;\n  if (GetObj(PObj) && PObj != nullptr)\n    b = true;\n  if (b) {}\n}\n"
Line 3891
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3891 always 3891
  "" always ""
Line 3894
  "static volatile sig_atomic_t is_running;\nstatic void handler(int signum) {\n    is_running = 0;\n}\nvoid f() {\n    signal(SIGINT, &handler);\n    is_running = 1;\n    while (is_running) {}\n}\n" always "static volatile sig_atomic_t is_running;\nstatic void handler(int signum) {\n    is_running = 0;\n}\nvoid f() {\n    signal(SIGINT, &handler);\n    is_running = 1;\n    while (is_running) {}\n}\n"
Line 3903
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3903 always 3903
  "" always ""
Line 3906
  "auto func(const std::tuple<int, int>& t) {\n  auto& [foo, bar] = t;\n  std::cout << foo << bar << std::endl;\n  return foo < bar;\n}\n" always "auto func(const std::tuple<int, int>& t) {\n  auto& [foo, bar] = t;\n  std::cout << foo << bar << std::endl;\n  return foo < bar;\n}\n"
Line 3911
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3911 always 3911
  "" always ""
Line 3914
  "void f() {\n    static bool init = true;\n    if (init)\n        init = false;\n}\n" always "void f() {\n    static bool init = true;\n    if (init)\n        init = false;\n}\n"
Line 3919
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3919 always 3919
  "" always ""
Line 3921
  "void f() {\n    static bool init(true);\n    if (init)\n        init = false;\n}\n" always "void f() {\n    static bool init(true);\n    if (init)\n        init = false;\n}\n"
Line 3926
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3926 always 3926
  "" always ""
Line 3928
  "void f() {\n    static bool init{ true };\n    if (init)\n        init = false;\n}\n" always "void f() {\n    static bool init{ true };\n    if (init)\n        init = false;\n}\n"
Line 3933
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3933 always 3933
  "" always ""
Line 3936
  "void f() {\n    static int var(1);\n    if (var == 1) {}\n}\n" always "void f() {\n    static int var(1);\n    if (var == 1) {}\n}\n"
Line 3940
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3940 always 3940
  "" always ""
Line 3942
  "void f() {\n    static int var{ 1 };\n    if (var == 1) {}\n}\n" always "void f() {\n    static int var{ 1 };\n    if (var == 1) {}\n}\n"
Line 3946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3946 always 3946
  "" always ""
Line 3948
  "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 3955
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3955 always 3955
  "" always ""
Line 3957
  "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 3964
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3964 always 3964
  "" always ""
Line 3966
  "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\nusing Fn = void (*)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 3973
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3973 always 3973
  "" always ""
Line 3975
  "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger = nullptr;\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 3982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3982 always 3982
  "" always ""
Line 3984
  "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger(nullptr);\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 3991
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  3991 always 3991
  "" always ""
Line 3993
  "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n" always "void Fun();\ntypedef void (*Fn)();\nvoid f() {\n    static Fn logger{ nullptr };\n    if (logger == nullptr)\n        logger = Fun;\n}\n"
Line 4000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4000 always 4000
  "" always ""
Line 4003
  "bool f() {\n    bool b = false;\n    b = true;\n    return b;\n}\n" always "bool f() {\n    bool b = false;\n    b = true;\n    return b;\n}\n"
Line 4008
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4008 always 4008
  "" always ""
Line 4011
  "struct Object {\n  int _count=0;\n   void increment() { ++_count;}\n   auto get() const { return _count; }\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object) : _object(object) {}\n  void do_something() { _object.increment(); }\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n" always "struct Object {\n  int _count=0;\n   void increment() { ++_count;}\n   auto get() const { return _count; }\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object) : _object(object) {}\n  void do_something() { _object.increment(); }\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n"
Line 4032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4032 always 4032
  "" always ""
Line 4034
  "struct Object {\n  int _count=0;\n   auto get() const;\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object);\n  void do_something();\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n" always "struct Object {\n  int _count=0;\n   auto get() const;\n};\nstruct Modifier {\nObject & _object;\n  explicit Modifier(Object & object);\n  void do_something();\n};\nstruct Foo {\n  Object _object;\n  void foo() {\n    Modifier mod(_object);\n    if (_object.get()>0)\n      return;\n    mod.do_something();\n    if (_object.get()>0)\n      return;\n  }\n};\n"
Line 4054
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4054 always 4054
  "" always ""
Line 4056
  "void f(const uint32_t u) {\n	const uint32_t v = u < 4;\n	if (v) {\n		const uint32_t w = v < 2;\n		if (w) {}\n	}\n}\n" always "void f(const uint32_t u) {\n	const uint32_t v = u < 4;\n	if (v) {\n		const uint32_t w = v < 2;\n		if (w) {}\n	}\n}\n"
Line 4063
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4063 always 4063
  "[test.cpp:5]: (style) Condition 'w' is always true\n" always "[test.cpp:5]: (style) Condition 'w' is always true\n"
Line 4065
  "void f(double d) {\n    if (d != 0) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n" always "void f(double d) {\n    if (d != 0) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n"
Line 4071
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4071 always 4071
  "" always ""
Line 4073
  "void f(double d) {\n    if (0 != d) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n" always "void f(double d) {\n    if (0 != d) {\n        int i = (int)d;\n        if (i == 0) {}\n    }\n}\n"
Line 4079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4079 always 4079
  "" always ""
Line 4081
  "struct A { double d; }\nvoid f(A a) {\n    if (a.d != 0) {\n        int i = a.d;\n        if (i == 0) {}\n    }\n}\n" always "struct A { double d; }\nvoid f(A a) {\n    if (a.d != 0) {\n        int i = a.d;\n        if (i == 0) {}\n    }\n}\n"
Line 4088
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4088 always 4088
  "" always ""
Line 4090
  "void f() {\n    if(strlen(\"abc\") == 3) {;}\n    if(strlen(\"abc\") == 1) {;}\n    if(wcslen(L\"abc\") == 3) {;}\n    if(wcslen(L\"abc\") == 1) {;}\n}\n" always "void f() {\n    if(strlen(\"abc\") == 3) {;}\n    if(strlen(\"abc\") == 1) {;}\n    if(wcslen(L\"abc\") == 3) {;}\n    if(wcslen(L\"abc\") == 1) {;}\n}\n"
Line 4096
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4096 always 4096
  "[test.cpp:2]: (style) Condition 'strlen(\"abc\")==3' is always true\n[test.cpp:3]: (style) Condition 'strlen(\"abc\")==1' is always false\n[test.cpp:4]: (style) Condition 'wcslen(L\"abc\")==3' is always true\n[test.cpp:5]: (style) Condition 'wcslen(L\"abc\")==1' is always false\n" always "[test.cpp:2]: (style) Condition 'strlen(\"abc\")==3' is always true\n[test.cpp:3]: (style) Condition 'strlen(\"abc\")==1' is always false\n[test.cpp:4]: (style) Condition 'wcslen(L\"abc\")==3' is always true\n[test.cpp:5]: (style) Condition 'wcslen(L\"abc\")==1' is always false\n"
Line 4102
  "int foo(bool a, bool b) {\n  if(!a && b && (!a == !b))\n   return 1;\n  return 0;\n}\n" always "int foo(bool a, bool b) {\n  if(!a && b && (!a == !b))\n   return 1;\n  return 0;\n}\n"
Line 4107
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4107 always 4107
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a==!b' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition '!a==!b' is always false\n"
Line 4110
  "struct S {\n    int f() const { return g() ? 0 : 1; }\n    bool g() const { return u == 18446744073709551615ULL; }\n    unsigned long long u{};\n};\n" always "struct S {\n    int f() const { return g() ? 0 : 1; }\n    bool g() const { return u == 18446744073709551615ULL; }\n    unsigned long long u{};\n};\n"
Line 4115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4115 always 4115
  "" always ""
Line 4118
  "void f(double d) { if ((d * 0) != 0) {} }" always "void f(double d) { if ((d * 0) != 0) {} }"
Line 4119
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4119 always 4119
  "" always ""
Line 4122
  "struct S {\n    int* p;\n    void f() const;\n    int g();\n};\nvoid S::f() {\n    if ((p == NULL) || ((p) && (g() >= *p))) {}\n}\n" always "struct S {\n    int* p;\n    void f() const;\n    int g();\n};\nvoid S::f() {\n    if ((p == NULL) || ((p) && (g() >= *p))) {}\n}\n"
Line 4130
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4130 always 4130
  "[test.cpp:7]: (style) Condition 'p' is always true\n" always "[test.cpp:7]: (style) Condition 'p' is always true\n"
Line 4133
  "struct Interface {\n    virtual int method() = 0;\n};\nstruct Child : Interface {\n   int method() override { return 0; }\n   auto foo() {\n       if (method() == 0)\n           return true;\n       else\n           return false;\n   }\n};\nstruct GrandChild : Child {\n   int method() override  { return 1; }\n};\n" always "struct Interface {\n    virtual int method() = 0;\n};\nstruct Child : Interface {\n   int method() override { return 0; }\n   auto foo() {\n       if (method() == 0)\n           return true;\n       else\n           return false;\n   }\n};\nstruct GrandChild : Child {\n   int method() override  { return 1; }\n};\n"
Line 4148
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4148 always 4148
  "" always ""
Line 4151
  "struct S { int i; };\nvoid f(S& s) {\n    if (!(s.i > 0) && (s.i != 0))\n        s.i = 0;\n    else if (s.i < 0)\n        s.s = 0;\n}\n" always "struct S { int i; };\nvoid f(S& s) {\n    if (!(s.i > 0) && (s.i != 0))\n        s.i = 0;\n    else if (s.i < 0)\n        s.s = 0;\n}\n"
Line 4158
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4158 always 4158
  "[test.cpp:3] -> [test.cpp:5]: (style) Condition 's.i<0' is always false\n" always "[test.cpp:3] -> [test.cpp:5]: (style) Condition 's.i<0' is always false\n"
Line 4161
  "int bar(int i) { return i; }\nvoid foo() {\n    if (bar(1) == 0 && bar(1) > 0) {}\n}\n" always "int bar(int i) { return i; }\nvoid foo() {\n    if (bar(1) == 0 && bar(1) > 0) {}\n}\n"
Line 4165
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4165 always 4165
  "[test.cpp:3]: (style) Condition 'bar(1)==0' is always false\n[test.cpp:3]: (style) Condition 'bar(1)>0' is always true\n" always "[test.cpp:3]: (style) Condition 'bar(1)==0' is always false\n[test.cpp:3]: (style) Condition 'bar(1)>0' is always true\n"
Line 4169
  "struct S { int bar(int i) const; };\nvoid foo(const S& s) {\n    if (s.bar(1) == 0 && s.bar(1) > 0) {}\n}\n" always "struct S { int bar(int i) const; };\nvoid foo(const S& s) {\n    if (s.bar(1) == 0 && s.bar(1) > 0) {}\n}\n"
Line 4173
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4173 always 4173
  "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: s.bar(1) == 0 && s.bar(1) > 0.\n" always "[test.cpp:3]: (warning) Logical conjunction always evaluates to false: s.bar(1) == 0 && s.bar(1) > 0.\n"
Line 4179
  "void f(const uint32_t x) {\n    uint32_t y[1];\n    y[0]=x;\n    if(x > 0 || y[0] < 42){}\n}\n" always "void f(const uint32_t x) {\n    uint32_t y[1];\n    y[0]=x;\n    if(x > 0 || y[0] < 42){}\n}\n"
Line 4184
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4184 always 4184
  "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'y[0]<42' is always true\n" always "[test.cpp:4] -> [test.cpp:4]: (style) Condition 'y[0]<42' is always true\n"
Line 4186
  "void f(int x, int y) {\n    if(x < y && x < 42) {\n        --x;\n        if(x == y) {}\n    }\n}\n" always "void f(int x, int y) {\n    if(x < y && x < 42) {\n        --x;\n        if(x == y) {}\n    }\n}\n"
Line 4192
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4192 always 4192
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==y' is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==y' is always false\n"
Line 4194
  "void f(bool a, bool b) {  if (a == b && a && !b){} }" always "void f(bool a, bool b) {  if (a == b && a && !b){} }"
Line 4195
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4195 always 4195
  "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!b' is always false\n" always "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!b' is always false\n"
Line 4197
  "bool f(bool a, bool b) { if(a && b && (!a)){} }" always "bool f(bool a, bool b) { if(a && b && (!a)){} }"
Line 4198
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4198 always 4198
  "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!a' is always false\n" always "[test.cpp:1] -> [test.cpp:1]: (style) Condition '!a' is always false\n"
Line 4200
  "void f(int x, int y) {\n  if (x < y) {\n    auto z = y - x;\n    if (z < 1) {}\n  }\n}\n" always "void f(int x, int y) {\n  if (x < y) {\n    auto z = y - x;\n    if (z < 1) {}\n  }\n}\n"
Line 4206
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4206 always 4206
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'z<1' is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'z<1' is always false\n"
Line 4208
  "bool f(int &index, const int s, const double * const array, double & x) {\n    if (index >= s)\n        return false;\n    else {\n        x = array[index];\n        return (index++) >= s;\n    }\n}\n" always "bool f(int &index, const int s, const double * const array, double & x) {\n    if (index >= s)\n        return false;\n    else {\n        x = array[index];\n        return (index++) >= s;\n    }\n}\n"
Line 4216
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4216 always 4216
  "[test.cpp:2] -> [test.cpp:6]: (style) Condition '(index++)>=s' is always false\n" always "[test.cpp:2] -> [test.cpp:6]: (style) Condition '(index++)>=s' is always false\n"
Line 4218
  "struct a {\n  a *b() const;\n} c;\nvoid d() {\n  a *e = nullptr;\n  e = c.b();\n  if (e) {}\n}\n" always "struct a {\n  a *b() const;\n} c;\nvoid d() {\n  a *e = nullptr;\n  e = c.b();\n  if (e) {}\n}\n"
Line 4226
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4226 always 4226
  "" always ""
Line 4228
  "int g(int i) {\n  if (i < 256)\n    return 1;\n  const int N = 2 * i;\n  i -= 256;\n  if (i == 0)\n    return 0;\n  return N;\n}\n" always "int g(int i) {\n  if (i < 256)\n    return 1;\n  const int N = 2 * i;\n  i -= 256;\n  if (i == 0)\n    return 0;\n  return N;\n}\n"
Line 4237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4237 always 4237
  "" always ""
Line 4239
  "void f(int i, int j) {\n    if (i < j) {\n        i++;\n        if (i >= j)\n            return;\n        i++;\n        if (i >= j) {}\n    }\n}\n" always "void f(int i, int j) {\n    if (i < j) {\n        i++;\n        if (i >= j)\n            return;\n        i++;\n        if (i >= j) {}\n    }\n}\n"
Line 4248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4248 always 4248
  "" always ""
Line 4250
  "int get_delta() {\n    clock_t now_ms = (clock() / (CLOCKS_PER_SEC / 1000));\n    static clock_t last_clock_ms = now_ms;\n    clock_t delta = now_ms - last_clock_ms;\n    last_clock_ms = now_ms;\n    if (delta > 50)\n        delta = 50;\n    return delta;\n}\n" always "int get_delta() {\n    clock_t now_ms = (clock() / (CLOCKS_PER_SEC / 1000));\n    static clock_t last_clock_ms = now_ms;\n    clock_t delta = now_ms - last_clock_ms;\n    last_clock_ms = now_ms;\n    if (delta > 50)\n        delta = 50;\n    return delta;\n}\n"
Line 4259
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4259 always 4259
  "" always ""
Line 4262
  "struct C {\n  int GetI() const { return i; }\n  int i{};\n};\nstruct B {\n    C *m_PC{};\n    Modify();\n};\nstruct D : B {\n  void test();  \n};\nvoid D::test() {\n    const int I = m_PC->GetI();\n    Modify();\n    if (m_PC->GetI() != I) {}\n}\n" always "struct C {\n  int GetI() const { return i; }\n  int i{};\n};\nstruct B {\n    C *m_PC{};\n    Modify();\n};\nstruct D : B {\n  void test();  \n};\nvoid D::test() {\n    const int I = m_PC->GetI();\n    Modify();\n    if (m_PC->GetI() != I) {}\n}\n"
Line 4278
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4278 always 4278
  "" always ""
Line 4281
  "struct Data {\n  Base* PBase{};\n};\nvoid f(Data* BaseData) {\n  Base* PObj = BaseData->PBase;\n  if (PObj == nullptr)\n    return;\n  Derived* pD = dynamic_cast<Derived*>(PObj);\n  if (pD) {}\n}\n" always "struct Data {\n  Base* PBase{};\n};\nvoid f(Data* BaseData) {\n  Base* PObj = BaseData->PBase;\n  if (PObj == nullptr)\n    return;\n  Derived* pD = dynamic_cast<Derived*>(PObj);\n  if (pD) {}\n}\n"
Line 4291
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4291 always 4291
  "" always ""
Line 4294
  "void f(const uint32_t v) {\n    const uint32_t v16 = v >> 16;\n    if (v16) {\n        const uint32_t v8 = v16 >> 8;\n        if (v8) {}\n    }\n}\n" always "void f(const uint32_t v) {\n    const uint32_t v16 = v >> 16;\n    if (v16) {\n        const uint32_t v8 = v16 >> 8;\n        if (v8) {}\n    }\n}\n"
Line 4301
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4301 always 4301
  "" always ""
Line 4304
  "void foo(struct diag_msg *msg) {\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n}\n" always "void foo(struct diag_msg *msg) {\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n    msg = msg->next;\n    if (msg == NULL)\n        return CMD_OK;\n}\n"
Line 4312
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4312 always 4312
  "" always ""
Line 4314
  "int foo(bool a, bool b) {\n  if((!a == !b) && !a && b)\n   return 1;\n  return 0;\n}\n" always "int foo(bool a, bool b) {\n  if((!a == !b) && !a && b)\n   return 1;\n  return 0;\n}\n"
Line 4319
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4319 always 4319
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'b' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 'b' is always false\n"
Line 4323
  "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x == 1) {}\n    }\n}" always "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x == 1) {}\n    }\n}"
Line 4329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4329 always 4329
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x==1' is always false\n"
Line 4331
  "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x != 1) {}\n    }\n}" always "void f(int x) {\n    if (x > 5) {\n        x++;\n        if (x != 1) {}\n    }\n}"
Line 4337
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4337 always 4337
  "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x!=1' is always true\n" always "[test.cpp:2] -> [test.cpp:4]: (style) Condition 'x!=1' is always true\n"
Line 4340
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x == -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x == -1) {}\n        else {}\n    }\n}"
Line 4349
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4349 always 4349
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x==-1' is always false\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x==-1' is always false\n"
Line 4351
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x != -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x != -1) {}\n        else {}\n    }\n}"
Line 4360
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4360 always 4360
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x!=-1' is always true\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x!=-1' is always true\n"
Line 4362
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x >= -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x >= -1) {}\n        else {}\n    }\n}"
Line 4371
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4371 always 4371
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>=-1' is always true\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>=-1' is always true\n"
Line 4373
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > -1) {}\n        else {}\n    }\n}"
Line 4382
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4382 always 4382
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>-1' is always true\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>-1' is always true\n"
Line 4384
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x < -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x < -1) {}\n        else {}\n    }\n}"
Line 4393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4393 always 4393
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<-1' is always false\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<-1' is always false\n"
Line 4395
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x <= -1) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x <= -1) {}\n        else {}\n    }\n}"
Line 4404
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4404 always 4404
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<=-1' is always false\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x<=-1' is always false\n"
Line 4406
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 7) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 7) {}\n        else {}\n    }\n}"
Line 4415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4415 always 4415
  "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>7' is always true\n" always "[test.cpp:3] -> [test.cpp:6]: (style) Condition 'x>7' is always true\n"
Line 4417
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 9) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 9) {}\n        else {}\n    }\n}"
Line 4426
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4426 always 4426
  "" always ""
Line 4428
  "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 10) {}\n        else {}\n    }\n}" always "void f(int i) {\n    int x = i;\n    if (x >= 1) {}\n    else {\n        x = 8 - x;\n        if (x > 10) {}\n        else {}\n    }\n}"
Line 4437
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4437 always 4437
  "" always ""
Line 4440
  "int f(int pos, int a) {\n    if (pos <= 0)\n        pos = 0;\n    else if (pos < a)\n        if(pos > 0)\n            --pos;\n    return pos;\n}" always "int f(int pos, int a) {\n    if (pos <= 0)\n        pos = 0;\n    else if (pos < a)\n        if(pos > 0)\n            --pos;\n    return pos;\n}"
Line 4448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4448 always 4448
  "[test.cpp:2] -> [test.cpp:5]: (style) Condition 'pos>0' is always true\n" always "[test.cpp:2] -> [test.cpp:5]: (style) Condition 'pos>0' is always true\n"
Line 4451
  "void f(int x) {\n    if (x > 127) {\n        if ( (x>255) || (-128>x) )\n            return;\n    }\n}" always "void f(int x) {\n    if (x > 127) {\n        if ( (x>255) || (-128>x) )\n            return;\n    }\n}"
Line 4457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4457 always 4457
  "[test.cpp:2] -> [test.cpp:3]: (style) Condition '-128>x' is always false\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Condition '-128>x' is always false\n"
Line 4460
  "void f() {\n    for(int i = 0; i < 19; ++i)\n        if(i<=18) {}\n}\n" always "void f() {\n    for(int i = 0; i < 19; ++i)\n        if(i<=18) {}\n}\n"
Line 4464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4464 always 4464
  "[test.cpp:3]: (style) Condition 'i<=18' is always true\n" always "[test.cpp:3]: (style) Condition 'i<=18' is always true\n"
Line 4467
  "void f() {\n    for(int x = 0; x < 3; ++x)\n        if(x == -5) {}\n}" always "void f() {\n    for(int x = 0; x < 3; ++x)\n        if(x == -5) {}\n}"
Line 4471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4471 always 4471
  "[test.cpp:3]: (style) Condition 'x==-5' is always false\n" always "[test.cpp:3]: (style) Condition 'x==-5' is always false\n"
Line 4474
  "int f(void) {\n    for(int i = 0; i <1; ++i)\n        if(i == 0) return 1; \n        else return 0;\n    return -1;\n}" always "int f(void) {\n    for(int i = 0; i <1; ++i)\n        if(i == 0) return 1; \n        else return 0;\n    return -1;\n}"
Line 4480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4480 always 4480
  "[test.cpp:3]: (style) Condition 'i==0' is always true\n" always "[test.cpp:3]: (style) Condition 'i==0' is always true\n"
Line 4482
  "void f(unsigned int u1, unsigned int u2) {\n    if (u1 <= 10 && u2 >= 20) {\n        if (u1 != u2) {}\n    }\n}\n" always "void f(unsigned int u1, unsigned int u2) {\n    if (u1 <= 10 && u2 >= 20) {\n        if (u1 != u2) {}\n    }\n}\n"
Line 4487
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4487 always 4487
  "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'u1!=u2' is always true\n" always "[test.cpp:2] -> [test.cpp:3]: (style) Condition 'u1!=u2' is always true\n"
Line 4490
  "void f(int N) {\n    if (N > 0) {\n        while (N)\n            N = test();\n    }\n}\n" always "void f(int N) {\n    if (N > 0) {\n        while (N)\n            N = test();\n    }\n}\n"
Line 4496
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4496 always 4496
  "" always ""
Line 4501
  "void c1(std::vector<double>&);\nvoid c2(std::vector<double>&);\nvoid foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}" always "void c1(std::vector<double>&);\nvoid c2(std::vector<double>&);\nvoid foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}"
Line 4512
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4512 always 4512
  "" always ""
Line 4514
  "void foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}" always "void foo(int flag) {\n    std::vector<double> g;\n    if (flag)\n        c1(g );\n    else\n        c2(g );\n    if ( !g.empty() )\n        return;\n}"
Line 4523
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4523 always 4523
  "" always ""
Line 4525
  "struct A {\n    std::vector<int> v;\n    void g();\n    void f(bool b) {\n        v.clear();\n        g();\n        return !v.empty();\n    }\n};\n" always "struct A {\n    std::vector<int> v;\n    void g();\n    void f(bool b) {\n        v.clear();\n        g();\n        return !v.empty();\n    }\n};\n"
Line 4534
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4534 always 4534
  "" always ""
Line 4537
  "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s == \"ab\" ) return;\n    if( s.size() < 3 ) return;\n}\n" always "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s == \"ab\" ) return;\n    if( s.size() < 3 ) return;\n}\n"
Line 4542
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4542 always 4542
  "" always ""
Line 4544
  "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s != \"ab\" )\n        if( s.size() < 3 ) return;\n}\n" always "void foo(const std::string& s) {\n    if( s.size() < 2 ) return;\n    if( s != \"ab\" )\n        if( s.size() < 3 ) return;\n}\n"
Line 4549
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4549 always 4549
  "" always ""
Line 4552
  "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw 0;\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n" always "int f(std::vector<int>::iterator it, const std::vector<int>& vector) {\n    if (!(it != vector.end() && it != vector.begin()))\n        throw 0;\n    if (it != vector.end() && *it == 0)\n        return -1;\n    return *it;\n}\n"
Line 4559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4559 always 4559
  "[test.cpp:4]: (style) Condition 'it!=vector.end()' is always true\n" always "[test.cpp:4]: (style) Condition 'it!=vector.end()' is always true\n"
Line 4564
  "long foo() {\n  bool bUpdated = false;\n  long Ret{};\n  do {\n    Ret = bar();\n    if (Ret == 0) {\n      if (bUpdated)\n        return 1;\n      bUpdated = true;\n    }\n    else\n      bUpdated = false;\n  }\n  while (bUpdated);\n  return Ret;\n}\n" always "long foo() {\n  bool bUpdated = false;\n  long Ret{};\n  do {\n    Ret = bar();\n    if (Ret == 0) {\n      if (bUpdated)\n        return 1;\n      bUpdated = true;\n    }\n    else\n      bUpdated = false;\n  }\n  while (bUpdated);\n  return Ret;\n}\n"
Line 4580
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4580 always 4580
  "" always ""
Line 4582
  "bool foo() {\n  bool bFirst = true;\n  do {\n    if (bFirst)\n      bar();\n    if (baz())\n      break;       \n    bFirst = false;\n  } while (true);\n  return bFirst;\n}\n" always "bool foo() {\n  bool bFirst = true;\n  do {\n    if (bFirst)\n      bar();\n    if (baz())\n      break;       \n    bFirst = false;\n  } while (true);\n  return bFirst;\n}\n"
Line 4593
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4593 always 4593
  "" always ""
Line 4595
  "void f() {\n   void * pool = NULL;\n   do {\n      pool = malloc(40);\n      if (dostuff())\n         break;\n      pool = NULL;\n   }\n   while (0);\n   if (pool) {}\n}\n" always "void f() {\n   void * pool = NULL;\n   do {\n      pool = malloc(40);\n      if (dostuff())\n         break;\n      pool = NULL;\n   }\n   while (0);\n   if (pool) {}\n}\n"
Line 4606
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4606 always 4606
  "" always ""
Line 4609
  "void f(const int A[], int Len) {\n  if (Len <= 0)\n    return;\n  int I = 0;\n  while (I < Len) {\n    int K = I + 1;\n    for (; K < Len; K++) {\n      if (A[I] != A[K])\n        break;\n    } \n    I = K;   \n  }\n}\n" always "void f(const int A[], int Len) {\n  if (Len <= 0)\n    return;\n  int I = 0;\n  while (I < Len) {\n    int K = I + 1;\n    for (; K < Len; K++) {\n      if (A[I] != A[K])\n        break;\n    } \n    I = K;   \n  }\n}\n"
Line 4622
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4622 always 4622
  "" always ""
Line 4627
  "void g();\nvoid f(int x)\n{\n    if( x ) {\n        try {\n            g();\n        }\n        catch(...) {\n            return;\n        }\n    }\n    g();\n    if( x ) {\n        g();\n    }\n}\n" always "void g();\nvoid f(int x)\n{\n    if( x ) {\n        try {\n            g();\n        }\n        catch(...) {\n            return;\n        }\n    }\n    g();\n    if( x ) {\n        g();\n    }\n}\n"
Line 4643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4643 always 4643
  "" always ""
Line 4645
  "void g();\nvoid h();\nvoid f(int x) {\n    if( x ) {\n        try {\n            g();\n            return;\n        }\n        catch( ... ) {}\n    }\n    h();\n    if( x ) {\n        g();\n    }\n}\n" always "void g();\nvoid h();\nvoid f(int x) {\n    if( x ) {\n        try {\n            g();\n            return;\n        }\n        catch( ... ) {}\n    }\n    h();\n    if( x ) {\n        g();\n    }\n}\n"
Line 4660
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4660 always 4660
  "" always ""
Line 4664
  "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if (val > 0) {}\n}" always "void f() {\n  int val = 0;\n  if (val < 0) continue;\n  if (val > 0) {}\n}"
Line 4669
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4669 always 4669
  "" always ""
Line 4671
  "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val > 0) {}\n  }\n}" always "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val > 0) {}\n  }\n}"
Line 4677
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4677 always 4677
  "" always ""
Line 4679
  "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val < 0) {}\n  }\n}" always "void f() {\n  int val = 0;\n  if (val < 0) {\n    if (val < 0) {}\n  }\n}"
Line 4685
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4685 always 4685
  "" always ""
Line 4687
  "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}" always "void f() {\n  int activate = 0;\n  int foo = 0;\n  if (activate) {}\n  else if (foo) {}\n}"
Line 4693
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4693 always 4693
  "[test.cpp:4]: (style) Condition 'activate' is always false\n[test.cpp:5]: (style) Condition 'foo' is always false\n" always "[test.cpp:4]: (style) Condition 'activate' is always false\n[test.cpp:5]: (style) Condition 'foo' is always false\n"
Line 4697
  "void f() {\n  const int b[2] = { 1,0 };\n  if(b[1] == 2) {}\n}" always "void f() {\n  const int b[2] = { 1,0 };\n  if(b[1] == 2) {}\n}"
Line 4701
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4701 always 4701
  "[test.cpp:3]: (style) Condition 'b[1]==2' is always false\n" always "[test.cpp:3]: (style) Condition 'b[1]==2' is always false\n"
Line 4704
  "void f(bool a, bool b) {\n    if (a && b){;}\n    else if (!a && b){;}\n    else if (!a && !b){;}\n    else {;}\n}\n" always "void f(bool a, bool b) {\n    if (a && b){;}\n    else if (!a && b){;}\n    else if (!a && !b){;}\n    else {;}\n}\n"
Line 4710
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4710 always 4710
  "" always ""
Line 4714
  "void f(bool x) {\n    if(x) {}\n    if(x) {}\n}" always "void f(bool x) {\n    if(x) {}\n    if(x) {}\n}"
Line 4718
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4718 always 4718
  "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n"
Line 4721
  "void f(int x) {\n    if(x == 1) {}\n    if(x == 1) {}\n}" always "void f(int x) {\n    if(x == 1) {}\n    if(x == 1) {}\n}"
Line 4725
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4725 always 4725
  "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n" always "[test.cpp:2] -> [test.cpp:3]: (style) The if condition is the same as the previous if condition\n"
Line 4728
  "void f(int x) {\n    if(x == 1) {}\n    if(x == 2) {}\n}" always "void f(int x) {\n    if(x == 1) {}\n    if(x == 2) {}\n}"
Line 4732
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4732 always 4732
  "" always ""
Line 4734
  "void f(int x) {\n    if(x == 1) {}\n    if(x != 1) {}\n}" always "void f(int x) {\n    if(x == 1) {}\n    if(x != 1) {}\n}"
Line 4738
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4738 always 4738
  "" always ""
Line 4740
  "void f(bool x) {\n    if(x) {}\n    g();\n    if(x) {}\n}" always "void f(bool x) {\n    if(x) {}\n    g();\n    if(x) {}\n}"
Line 4745
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4745 always 4745
  "" always ""
Line 4747
  "void f(int x) {\n    if(x == 1) { x++; }\n    if(x == 1) {}\n}" always "void f(int x) {\n    if(x == 1) { x++; }\n    if(x == 1) {}\n}"
Line 4751
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4751 always 4751
  "" always ""
Line 4754
  "void g(int** v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  int* d[] = {&a, &b};\n  g(d);\n  if (a) {}\n  if (b) {}\n}" always "void g(int** v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  int* d[] = {&a, &b};\n  g(d);\n  if (a) {}\n  if (b) {}\n}"
Line 4763
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4763 always 4763
  "" always ""
Line 4766
  "struct c {\n  int* p;\n};\nvoid g(struct c* v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  struct c d[] = {{&a}, {&b}};\n  g(d);\n  if (a) {}\n  if (b) {}\n}" always "struct c {\n  int* p;\n};\nvoid g(struct c* v);\nvoid f() {\n  int a = 0;\n  int b = 0;\n  struct c d[] = {{&a}, {&b}};\n  g(d);\n  if (a) {}\n  if (b) {}\n}"
Line 4778
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4778 always 4778
  "" always ""
Line 4781
  "void f(const std::string& x) {\n  auto y = x;\n  if (x.empty()) y = \"1\";\n  if (y.empty()) return;\n}" always "void f(const std::string& x) {\n  auto y = x;\n  if (x.empty()) y = \"1\";\n  if (y.empty()) return;\n}"
Line 4786
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4786 always 4786
  "" always ""
Line 4789
  "struct A {int b;};\nvoid f(A a, int c) {\n    if (a.b) a.b = c;\n    if (a.b) {}\n}" always "struct A {int b;};\nvoid f(A a, int c) {\n    if (a.b) a.b = c;\n    if (a.b) {}\n}"
Line 4794
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4794 always 4794
  "" always ""
Line 4796
  "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void c();\n    void d() {\n        if(b()) {\n            c();\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n" always "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void c();\n    void d() {\n        if(b()) {\n            c();\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
Line 4811
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4811 always 4811
  "" always ""
Line 4813
  "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n            a = 2;\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n" always "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n            a = 2;\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
Line 4827
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4827 always 4827
  "" always ""
Line 4829
  "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n" always "struct A {\n    int a;\n    void b() const {\n        return a == 1;\n    }\n    void d() {\n        if(b()) {\n        }\n        if (b()) {\n            a = 3;\n        }\n    }\n}\n"
Line 4842
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4842 always 4842
  "[test.cpp:7] -> [test.cpp:9]: (style) The if condition is the same as the previous if condition\n" always "[test.cpp:7] -> [test.cpp:9]: (style) The if condition is the same as the previous if condition\n"
Line 4845
  "void f(bool a, bool b) {\n    auto g = [&] { b = !a; };\n    if (b)\n        g();\n    if (b) {}\n}\n" always "void f(bool a, bool b) {\n    auto g = [&] { b = !a; };\n    if (b)\n        g();\n    if (b) {}\n}\n"
Line 4851
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4851 always 4851
  "" always ""
Line 4853
  "void g(bool& a);\nvoid f(bool b) {\n    auto h = std::bind(&g, std::ref(b));\n    if (b)\n        h();\n    if (b) {}\n}\n" always "void g(bool& a);\nvoid f(bool b) {\n    auto h = std::bind(&g, std::ref(b));\n    if (b)\n        h();\n    if (b) {}\n}\n"
Line 4860
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4860 always 4860
  "" always ""
Line 4862
  "void f(int *i) {\n  if (*i == 0) {\n    *i = 1;\n  }\n  if (*i == 0) {\n  }\n}\n" always "void f(int *i) {\n  if (*i == 0) {\n    *i = 1;\n  }\n  if (*i == 0) {\n  }\n}\n"
Line 4869
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4869 always 4869
  "" always ""
Line 4871
  "void g(std::function<void()>);\nvoid f(std::vector<int> v) {\n    auto x = [&v] { v.push_back(1); };\n    if(v.empty()) {\n        g(x);\n    }\n    if(v.empty())\n        return;\n    return;\n}\n" always "void g(std::function<void()>);\nvoid f(std::vector<int> v) {\n    auto x = [&v] { v.push_back(1); };\n    if(v.empty()) {\n        g(x);\n    }\n    if(v.empty())\n        return;\n    return;\n}\n"
Line 4881
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4881 always 4881
  "" always ""
Line 4883
  "struct S { int i; };\nint f(const S& s) {\n    int a = 0, b = 0;\n    if (s.i == 0)\n        a = 1;\n    if (s.i == 0)\n        b = 1;\n    return a + b;\n}\n" always "struct S { int i; };\nint f(const S& s) {\n    int a = 0, b = 0;\n    if (s.i == 0)\n        a = 1;\n    if (s.i == 0)\n        b = 1;\n    return a + b;\n}\n"
Line 4892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4892 always 4892
  "[test.cpp:4] -> [test.cpp:6]: (style) The if condition is the same as the previous if condition\n" always "[test.cpp:4] -> [test.cpp:6]: (style) The if condition is the same as the previous if condition\n"
Line 4895
  "void assign(const MMA& other) {\n    if (mPA.cols != other.mPA.cols || mPA.rows != other.mPA.rows)\n        ;\n    if (other.mPA.cols > 0 && other.mPA.rows > 0)\n        ;\n}" always "void assign(const MMA& other) {\n    if (mPA.cols != other.mPA.cols || mPA.rows != other.mPA.rows)\n        ;\n    if (other.mPA.cols > 0 && other.mPA.rows > 0)\n        ;\n}"
Line 4904
  "void f(char *p, unsigned int x) {\n    assert((p + x) < p);\n}" always "void f(char *p, unsigned int x) {\n    assert((p + x) < p);\n}"
Line 4907
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4907 always 4907
  "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)<p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)<p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4909
  "void f(char *p, unsigned int x) {\n    assert((p + x) >= p);\n}" always "void f(char *p, unsigned int x) {\n    assert((p + x) >= p);\n}"
Line 4912
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4912 always 4912
  "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)>=p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:2]: (warning) Invalid test for overflow '(p+x)>=p'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4914
  "void f(char *p, unsigned int x) {\n    assert(p > (p + x));\n}" always "void f(char *p, unsigned int x) {\n    assert(p > (p + x));\n}"
Line 4917
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4917 always 4917
  "[test.cpp:2]: (warning) Invalid test for overflow 'p>(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:2]: (warning) Invalid test for overflow 'p>(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4919
  "void f(char *p, unsigned int x) {\n    assert(p <= (p + x));\n}" always "void f(char *p, unsigned int x) {\n    assert(p <= (p + x));\n}"
Line 4922
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4922 always 4922
  "[test.cpp:2]: (warning) Invalid test for overflow 'p<=(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:2]: (warning) Invalid test for overflow 'p<=(p+x)'; pointer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4924
  "void f(signed int x) {\n    assert(x + 100U < x);\n}" always "void f(signed int x) {\n    assert(x + 100U < x);\n}"
Line 4927
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4927 always 4927
  "" always ""
Line 4934
  "int f(int x) { return x + 10 > x; }" always "int f(int x) { return x + 10 > x; }"
Line 4935
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4935 always 4935
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4937
  "int f(int x) { return x + 10 >= x; }" always "int f(int x) { return x + 10 >= x; }"
Line 4938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4938 always 4938
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4940
  "int f(int x) { return x + 10 < x; }" always "int f(int x) { return x + 10 < x; }"
Line 4941
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4941 always 4941
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4943
  "int f(int x) { return x + 10 <= x; }" always "int f(int x) { return x + 10 <= x; }"
Line 4944
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4944 always 4944
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4946
  "int f(int x) { return x - 10 > x; }" always "int f(int x) { return x - 10 > x; }"
Line 4947
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4947 always 4947
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-10>x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4949
  "int f(int x) { return x - 10 >= x; }" always "int f(int x) { return x - 10 >= x; }"
Line 4950
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4950 always 4950
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-10>=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always false.\n"
Line 4952
  "int f(int x) { return x - 10 < x; }" always "int f(int x) { return x - 10 < x; }"
Line 4953
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4953 always 4953
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-10<x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4955
  "int f(int x) { return x - 10 <= x; }" always "int f(int x) { return x - 10 <= x; }"
Line 4956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4956 always 4956
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-10<=x'; signed integer overflow is undefined behavior. Some mainstream compilers remove such overflow tests when optimising the code and assume it's always true.\n"
Line 4962
  "int f(int x, int y) { return x + y < x; }" always "int f(int x, int y) { return x + y < x; }"
Line 4963
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4963 always 4963
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n"
Line 4965
  "int f(int x, int y) { return x + y <= x; }" always "int f(int x, int y) { return x + y <= x; }"
Line 4966
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4966 always 4966
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n"
Line 4968
  "int f(int x, int y) { return x + y > x; }" always "int f(int x, int y) { return x + y > x; }"
Line 4969
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4969 always 4969
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n"
Line 4971
  "int f(int x, int y) { return x + y >= x; }" always "int f(int x, int y) { return x + y >= x; }"
Line 4972
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4972 always 4972
  "[test.cpp:1]: (warning) Invalid test for overflow 'x+y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x+y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n"
Line 4975
  "int f(int x, int y) { return x - y < x; }" always "int f(int x, int y) { return x - y < x; }"
Line 4976
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4976 always 4976
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-y<x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>0'.\n"
Line 4978
  "int f(int x, int y) { return x - y <= x; }" always "int f(int x, int y) { return x - y <= x; }"
Line 4979
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4979 always 4979
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-y<=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y>=0'.\n"
Line 4981
  "int f(int x, int y) { return x - y > x; }" always "int f(int x, int y) { return x - y > x; }"
Line 4982
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4982 always 4982
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-y>x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<0'.\n"
Line 4984
  "int f(int x, int y) { return x - y >= x; }" always "int f(int x, int y) { return x - y >= x; }"
Line 4985
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4985 always 4985
  "[test.cpp:1]: (warning) Invalid test for overflow 'x-y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n" always "[test.cpp:1]: (warning) Invalid test for overflow 'x-y>=x'; signed integer overflow is undefined behavior. Some mainstream compilers removes handling of overflows when optimising the code and change the code to 'y<=0'.\n"
Line 4989
  "void f() {\n    enum states {A,B,C};\n    const unsigned g_flags = B|C;\n    if(g_flags & A) {}\n}" always "void f() {\n    enum states {A,B,C};\n    const unsigned g_flags = B|C;\n    if(g_flags & A) {}\n}"
Line 4994
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  4994 always 4994
  "[test.cpp:4]: (style) Condition 'g_flags&A' is always false\n" always "[test.cpp:4]: (style) Condition 'g_flags&A' is always false\n"
Line 4996
  "void f() {\n    int a = 5;    if(a) {}\n}" always "void f() {\n    int a = 5;    if(a) {}\n}"
Line 5000
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5000 always 5000
  "[test.cpp:2]: (style) Condition 'a' is always true\n" always "[test.cpp:2]: (style) Condition 'a' is always true\n"
Line 5002
  "void f() {\n    int a = 5;    while(a + 1) { a--; }\n}" always "void f() {\n    int a = 5;    while(a + 1) { a--; }\n}"
Line 5006
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5006 always 5006
  "" always ""
Line 5008
  "void f() {\n    int a = 5;    while(a + 1) { return; }\n}" always "void f() {\n    int a = 5;    while(a + 1) { return; }\n}"
Line 5012
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5012 always 5012
  "[test.cpp:2]: (style) Condition 'a+1' is always true\n" always "[test.cpp:2]: (style) Condition 'a+1' is always true\n"
Line 5016
  "bool f();\nvoid foo() { bool x = true; if(x||f()) {}}" always "bool f();\nvoid foo() { bool x = true; if(x||f()) {}}"
Line 5018
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5018 always 5018
  "[test.cpp:2]: (style) Condition 'x' is always true\n" always "[test.cpp:2]: (style) Condition 'x' is always true\n"
Line 5020
  "void foo(bool b) { bool x = true; if(x||b) {}}" always "void foo(bool b) { bool x = true; if(x||b) {}}"
Line 5021
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5021 always 5021
  "[test.cpp:1]: (style) Condition 'x' is always true\n" always "[test.cpp:1]: (style) Condition 'x' is always true\n"
Line 5023
  "void foo(bool b) { if(true||b) {}}" always "void foo(bool b) { if(true||b) {}}"
Line 5024
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5024 always 5024
  "" always ""
Line 5026
  "bool f();\nvoid foo() { bool x = false; if(x||f()) {}}" always "bool f();\nvoid foo() { bool x = false; if(x||f()) {}}"
Line 5028
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5028 always 5028
  "[test.cpp:2]: (style) Condition 'x' is always false\n" always "[test.cpp:2]: (style) Condition 'x' is always false\n"
Line 5030
  "bool f();\nvoid foo() { bool x = false; if(x&&f()) {}}" always "bool f();\nvoid foo() { bool x = false; if(x&&f()) {}}"
Line 5032
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5032 always 5032
  "[test.cpp:2]: (style) Condition 'x' is always false\n" always "[test.cpp:2]: (style) Condition 'x' is always false\n"
Line 5034
  "void foo(bool b) { bool x = false; if(x&&b) {}}" always "void foo(bool b) { bool x = false; if(x&&b) {}}"
Line 5035
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5035 always 5035
  "[test.cpp:1]: (style) Condition 'x' is always false\n" always "[test.cpp:1]: (style) Condition 'x' is always false\n"
Line 5037
  "void foo(bool b) { if(false&&b) {}}" always "void foo(bool b) { if(false&&b) {}}"
Line 5038
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5038 always 5038
  "" always ""
Line 5040
  "bool f();\nvoid foo() { bool x = true; if(x&&f()) {}}" always "bool f();\nvoid foo() { bool x = true; if(x&&f()) {}}"
Line 5042
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5042 always 5042
  "[test.cpp:2]: (style) Condition 'x' is always true\n" always "[test.cpp:2]: (style) Condition 'x' is always true\n"
Line 5045
  "bool f(const std::string &s) {\n        return s.size()>2U && s[0]=='4' && s[0]=='2';\n}\n" always "bool f(const std::string &s) {\n        return s.size()>2U && s[0]=='4' && s[0]=='2';\n}\n"
Line 5048
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5048 always 5048
  "[test.cpp:2] -> [test.cpp:2]: (style) Condition 's[0]=='2'' is always false\n" always "[test.cpp:2] -> [test.cpp:2]: (style) Condition 's[0]=='2'' is always false\n"
Line 5052
  "void f(char *ptr) {\n  if (ptr + 1 != 0);\n}" always "void f(char *ptr) {\n  if (ptr + 1 != 0);\n}"
Line 5055
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5055 always 5055
  "[test.cpp:2]: (warning) Comparison is wrong. Result of 'ptr+1' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.\n" always "[test.cpp:2]: (warning) Comparison is wrong. Result of 'ptr+1' can't be 0 unless there is pointer overflow, and pointer overflow is undefined behaviour.\n"
Line 5061
  "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n}" always "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n}"
Line 5065
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5065 always 5065
  "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n" always "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n"
Line 5069
  "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n}" always "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n}"
Line 5073
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5073 always 5073
  "test.cpp:2:style:The statement 'if (x!=y) x=y' is logically equivalent to 'x=y'.\ntest.cpp:3:note:Assignment 'x=y'\ntest.cpp:2:note:Condition 'x!=y' is redundant\n" always "test.cpp:2:style:The statement 'if (x!=y) x=y' is logically equivalent to 'x=y'.\ntest.cpp:3:note:Assignment 'x=y'\ntest.cpp:2:note:Condition 'x!=y' is redundant\n"
Line 5077
  "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n    else\n        x = 1;\n}" always "void f(int& x, int y) {\n    if (x == y)\n        x = y;\n    else\n        x = 1;\n}"
Line 5083
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5083 always 5083
  "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n" always "test.cpp:3:style:Assignment 'x=y' is redundant with condition 'x==y'.\ntest.cpp:2:note:Condition 'x==y'\ntest.cpp:3:note:Assignment 'x=y' is redundant\n"
Line 5087
  "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n    else\n        x = 1;\n}" always "void f(int& x, int y) {\n    if (x != y)\n        x = y;\n    else\n        x = 1;\n}"
Line 5093
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5093 always 5093
  "" always ""
Line 5095
  "void f(int& x, int y) {\n    if (x == y)\n        x = y + 1;\n}" always "void f(int& x, int y) {\n    if (x == y)\n        x = y + 1;\n}"
Line 5099
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5099 always 5099
  "" always ""
Line 5101
  "void g();\nvoid f(int& x, int y) {\n    if (x == y) {\n        x = y;\n        g();\n    }\n}" always "void g();\nvoid f(int& x, int y) {\n    if (x == y) {\n        x = y;\n        g();\n    }\n}"
Line 5108
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5108 always 5108
  "" always ""
Line 5112
  "void f(std::string s) {\n    if (s=\"123\"){}\n}" always "void f(std::string s) {\n    if (s=\"123\"){}\n}"
Line 5115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5115 always 5115
  "[test.cpp:2]: (style) Suspicious assignment in condition. Condition 's=\"123\"' is always true.\n" always "[test.cpp:2]: (style) Suspicious assignment in condition. Condition 's=\"123\"' is always true.\n"
Line 5117
  "void f(std::string *p) {\n    if (p=foo()){}\n}" always "void f(std::string *p) {\n    if (p=foo()){}\n}"
Line 5120
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5120 always 5120
  "" always ""
Line 5128
  "void f(unsigned char c) {\n  if (c == 256) {}\n}" always "void f(unsigned char c) {\n  if (c == 256) {}\n}"
Line 5130
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5131 always 5131
  "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n" always "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n"
Line 5133
  "void f(unsigned char* b, int i) {\n  if (b[i] == 256) {}\n}" always "void f(unsigned char* b, int i) {\n  if (b[i] == 256) {}\n}"
Line 5135
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5136
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5136 always 5136
  "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n" always "[test.cpp:2]: (style) Comparing expression of type 'unsigned char' against value 256. Condition is always false.\n"
Line 5138
  "void f(unsigned char c) {\n  if (c == 255) {}\n}" always "void f(unsigned char c) {\n  if (c == 255) {}\n}"
Line 5140
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5141
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5141 always 5141
  "" always ""
Line 5143
  "void f(bool b) {\n  if (b == true) {}\n}" always "void f(bool b) {\n  if (b == true) {}\n}"
Line 5145
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5146
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5146 always 5146
  "" always ""
Line 5149
  "void f(signed char x) {\n  if (x == 0xff) {}\n}" always "void f(signed char x) {\n  if (x == 0xff) {}\n}"
Line 5151
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5152
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5152 always 5152
  "[test.cpp:2]: (style) Comparing expression of type 'signed char' against value 255. Condition is always false.\n" always "[test.cpp:2]: (style) Comparing expression of type 'signed char' against value 255. Condition is always false.\n"
Line 5154
  "void f(short x) {\n  if (x == 0xffff) {}\n}" always "void f(short x) {\n  if (x == 0xffff) {}\n}"
Line 5156
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5157
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5157 always 5157
  "[test.cpp:2]: (style) Comparing expression of type 'signed short' against value 65535. Condition is always false.\n" always "[test.cpp:2]: (style) Comparing expression of type 'signed short' against value 65535. Condition is always false.\n"
Line 5159
  "void f(int x) {\n  if (x == 0xffffffff) {}\n}" always "void f(int x) {\n  if (x == 0xffffffff) {}\n}"
Line 5161
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5162
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5162 always 5162
  "" always ""
Line 5164
  "void f(long x) {\n  if (x == ~0L) {}\n}" always "void f(long x) {\n  if (x == ~0L) {}\n}"
Line 5166
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5167
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5167 always 5167
  "" always ""
Line 5169
  "void f(long long x) {\n  if (x == ~0LL) {}\n}" always "void f(long long x) {\n  if (x == ~0LL) {}\n}"
Line 5171
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5172
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5172 always 5172
  "" always ""
Line 5174
  "void f() {\n  char c;\n  if ((c = foo()) != -1) {}\n}" always "void f() {\n  char c;\n  if ((c = foo()) != -1) {}\n}"
Line 5177
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5178
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5178 always 5178
  "" always ""
Line 5180
  "void f(int x) {\n  if (x < 3000000000) {}\n}" always "void f(int x) {\n  if (x < 3000000000) {}\n}"
Line 5182
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5183
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5183 always 5183
  "[test.cpp:2]: (style) Comparing expression of type 'signed int' against value 3000000000. Condition is always true.\n" always "[test.cpp:2]: (style) Comparing expression of type 'signed int' against value 3000000000. Condition is always true.\n"
Line 5185
  "void f(const signed char i) {\n    if (i >  -129) {}\n    if (i >= -128) {}\n    if (i >= -127) {}\n    if (i <  +128) {}\n    if (i <= +127) {}\n    if (i <= +126) {}\n}\n" always "void f(const signed char i) {\n    if (i >  -129) {}\n    if (i >= -128) {}\n    if (i >= -127) {}\n    if (i <  +128) {}\n    if (i <= +127) {}\n    if (i <= +126) {}\n}\n"
Line 5192
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5193
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5193 always 5193
  "[test.cpp:2]: (style) Comparing expression of type 'const signed char' against value -129. Condition is always true.\n[test.cpp:3]: (style) Comparing expression of type 'const signed char' against value -128. Condition is always true.\n[test.cpp:5]: (style) Comparing expression of type 'const signed char' against value 128. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const signed char' against value 127. Condition is always true.\n" always "[test.cpp:2]: (style) Comparing expression of type 'const signed char' against value -129. Condition is always true.\n[test.cpp:3]: (style) Comparing expression of type 'const signed char' against value -128. Condition is always true.\n[test.cpp:5]: (style) Comparing expression of type 'const signed char' against value 128. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const signed char' against value 127. Condition is always true.\n"
Line 5199
  "void f(const unsigned char u) {\n    if (u >  0) {}\n    if (u <  0) {}\n    if (u >= 0) {}\n    if (u <= 0) {}\n    if (u >  255) {}\n    if (u <  255) {}\n    if (u >= 255) {}\n    if (u <= 255) {}\n    if (0   <  u) {}\n    if (0   >  u) {}\n    if (0   <= u) {}\n    if (0   >= u) {}\n    if (255 <  u) {}\n    if (255 >  u) {}\n    if (255 <= u) {}\n    if (255 >= u) {}\n}\n" always "void f(const unsigned char u) {\n    if (u >  0) {}\n    if (u <  0) {}\n    if (u >= 0) {}\n    if (u <= 0) {}\n    if (u >  255) {}\n    if (u <  255) {}\n    if (u >= 255) {}\n    if (u <= 255) {}\n    if (0   <  u) {}\n    if (0   >  u) {}\n    if (0   <= u) {}\n    if (0   >= u) {}\n    if (255 <  u) {}\n    if (255 >  u) {}\n    if (255 <= u) {}\n    if (255 >= u) {}\n}\n"
Line 5216
  & {lifetime[Address]=(settingsUnix64),!0}
Line 5217
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5217 always 5217
  "[test.cpp:3]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:4]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:9]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n[test.cpp:11]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:12]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:14]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:17]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n" always "[test.cpp:3]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:4]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:6]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:9]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n[test.cpp:11]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always false.\n[test.cpp:12]: (style) Comparing expression of type 'const unsigned char' against value 0. Condition is always true.\n[test.cpp:14]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always false.\n[test.cpp:17]: (style) Comparing expression of type 'const unsigned char' against value 255. Condition is always true.\n"
Line 5229
  "void f(int i) {\n    if (i < 0 || (unsigned)i > 5) {}\n}\n" always "void f(int i) {\n    if (i < 0 || (unsigned)i > 5) {}\n}\n"
Line 5232
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5232 always 5232
  "" always ""
Line 5236
  "void f() {\n    int a = 0;\n    while (++a < 5) {}\n    if (a == 1) {}\n    std::cout << a;\n}\n" always "void f() {\n    int a = 0;\n    while (++a < 5) {}\n    if (a == 1) {}\n    std::cout << a;\n}\n"
Line 5242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testcondition.cpp" always "cppcheck-2.8/test/testcondition.cpp"
  5242 always 5242
  "" always ""
