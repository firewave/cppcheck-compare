

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741935 expected@var22 !=@expr1073741936 actual@var23 ) {
62: std ::@expr1073741937 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741938 expected@var22 ;
64: std ::@expr1073741939 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741940 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741941 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741942 str (@expr1073741943 ) , actualStr@var26 .@expr1073741944 str (@expr1073741945 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741946 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741947 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741948 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741949 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testfilelister.cpp

1:
|
29:
30: class TestFileLister : public TestFixture {
31: public:
32: TestFileLister ( )
33: : TestFixture ( "TestFileLister" ) { }
34:
35: private:
36: void run ( ) override {
37:
38: {
39: std ::@expr1073741950 ifstream fin@var102 (@expr1073741951 "test/testfilelister.cpp" ) ;
40: if (@expr1073741952 !@expr1073741953 fin@var102 .@expr1073741954 is_open (@expr1073741955 ) ) {
41: return ; }
42: }
43:
44: $do ${ $if $(@expr1073741956 $prepareTest $(@expr1073741957 "isDirectory" $) $) ${ $setVerbose $(@expr1073741958 $false $) $; isDirectory $(@expr1073741959 $) $; $} $} $while $(@expr1073741960 $false $) ;
45: $do ${ $if $(@expr1073741961 $prepareTest $(@expr1073741962 "recursiveAddFiles" $) $) ${ $setVerbose $(@expr1073741963 $false $) $; recursiveAddFiles $(@expr1073741964 $) $; $} $} $while $(@expr1073741965 $false $) ;
46: $do ${ $if $(@expr1073741966 $prepareTest $(@expr1073741967 "fileExists" $) $) ${ $setVerbose $(@expr1073741968 $false $) $; fileExists $(@expr1073741969 $) $; $} $} $while $(@expr1073741970 $false $) ;
47: }
48:
49: void isDirectory ( ) const {
50: $if $(@expr1073741971 $!@expr1073741972 $assertEquals $(@expr1073741973 "cppcheck-2.8/test/testfilelister.cpp" $, 50 $, false $, FileLister ::@expr150 isDirectory (@expr1073741975 "readme.txt" ) $) $) { $return ; }
51: $if $(@expr1073741976 $!@expr1073741977 $assertEquals $(@expr1073741978 "cppcheck-2.8/test/testfilelister.cpp" $, 51 $, true $, FileLister ::@expr150 isDirectory (@expr1073741980 "lib" ) $) $) { $return ; }
52: }
53:
54: void recursiveAddFiles ( ) const {
55:
56: std ::@expr1073741981 map < std ::@expr158 string , unsigned long > files@var103 ;
57: std ::@expr1073741983 vector < std ::@expr158 string > masks@var104 ;
58: PathMatch matcher@var105 (@expr1073741985 masks@var104 ) ;
59: std ::@expr1073741986 string err@var106 ; err@var106 =@expr1073741987 FileLister ::@expr1073741988 recursiveAddFiles (@expr1073741989 files@var103 , "." , matcher@var105 ) ;
60: $if $(@expr1073741990 $!@expr1073741991 $assert_ $(@expr1073741992 "cppcheck-2.8/test/testfilelister.cpp" $, 60 $, err@var106 .@expr1073741993 empty (@expr1073741994 ) $) $) { $return ; }
61:
62:
63: for (@expr1073741995 std ::@expr158 map < std ::@expr158 string , unsigned long > ::@expr158 iterator i@var107 =@expr1073741999 files@var103 .@expr1073742000 begin (@expr1073742001 ) ; i@var107 !=@expr1073742002 files@var103 .@expr179 end (@expr180 ) ; ) {
64: if (@expr1073742005 i@var107 .@expr182 first@var108 .@expr1073742007 compare (@expr1073742008 0 , 2 , "./" ) ==@expr1073742009 0 ) {
65: files@var103 [@expr1073742010 i@var107 .@expr182 first@var108 .@expr1073742012 substr (@expr1073742013 2 ) ] =@expr1073742014 i@var107 .@expr1073742015 second@var109 ;
66: files@var103 .@expr1073742016 erase (@expr1073742017 i@var107 ++@expr1073742018 ) ;
67: } else {
68: ++@expr1073742019 i@var107 ; }
69: }
70:
71:
72: $if $(@expr1073742020 $!@expr1073742021 $assert_ $(@expr1073742022 "cppcheck-2.8/test/testfilelister.cpp" $, 72 $, files@var103 .@expr199 find (@expr1073742024 "cli/main.cpp" ) !=@expr1073742025 files@var103 .@expr179 end (@expr180 ) $) $) { $return ; }
73: $if $(@expr1073742028 $!@expr1073742029 $assert_ $(@expr1073742030 "cppcheck-2.8/test/testfilelister.cpp" $, 73 $, files@var103 .@expr199 find (@expr1073742032 "lib/token.cpp" ) !=@expr1073742033 files@var103 .@expr179 end (@expr180 ) $) $) { $return ; }
74: $if $(@expr1073742036 $!@expr1073742037 $assert_ $(@expr1073742038 "cppcheck-2.8/test/testfilelister.cpp" $, 74 $, files@var103 .@expr199 find (@expr1073742040 "lib/tokenize.cpp" ) !=@expr1073742041 files@var103 .@expr179 end (@expr180 ) $) $) { $return ; }
75: $if $(@expr1073742044 $!@expr1073742045 $assert_ $(@expr1073742046 "cppcheck-2.8/test/testfilelister.cpp" $, 75 $, files@var103 .@expr199 find (@expr1073742048 "test/testfilelister.cpp" ) !=@expr1073742049 files@var103 .@expr179 end (@expr180 ) $) $) { $return ; }
76:
77:
78: $if $(@expr1073742052 $!@expr1073742053 $assert_ $(@expr1073742054 "cppcheck-2.8/test/testfilelister.cpp" $, 78 $, files@var103 .@expr199 find (@expr1073742056 "lib/tokenize.h" ) ==@expr1073742057 files@var103 .@expr179 end (@expr180 ) $) $) { $return ; }
79: }
80:
81: void fileExists ( ) const {
82: $if $(@expr1073742060 $!@expr1073742061 $assertEquals $(@expr1073742062 "cppcheck-2.8/test/testfilelister.cpp" $, 82 $, false $, FileLister ::@expr239 fileExists (@expr1073742064 "lib" ) $) $) { $return ; }
83: $if $(@expr1073742065 $!@expr1073742066 $assertEquals $(@expr1073742067 "cppcheck-2.8/test/testfilelister.cpp" $, 83 $, true $, FileLister ::@expr239 fileExists (@expr1073742069 "readme.txt" ) $) $) { $return ; }
84: }
85: } ;
86:
87: $namespace ${ TestFileLister instance_TestFileLister@var110 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@1}
  v {!<=-1,!>=2,0@1}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 33
  "TestFileLister" always "TestFileLister"
Line 39
  "test/testfilelister.cpp" always "test/testfilelister.cpp"
Line 40
  ! always {!<=-1,!>=2}
Line 44
  ( always {!<=-1,!>=2}
  "isDirectory" always "isDirectory"
  false always 0
  false always 0
Line 45
  ( always {!<=-1,!>=2}
  "recursiveAddFiles" always "recursiveAddFiles"
  false always 0
  false always 0
Line 46
  ( always {!<=-1,!>=2}
  "fileExists" always "fileExists"
  false always 0
  false always 0
Line 50
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  50 always 50
  false always 0
  "readme.txt" always "readme.txt"
Line 51
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  51 always 51
  true always 1
  "lib" always "lib"
Line 58
  masks always size=0
Line 59
  files always size=0
  "." always "."
Line 60
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  60 always 60
  ( always {!<=-1,!>=2}
Line 63
  = {lifetime[Iterator]=(files),start=0}
  ( {lifetime[Iterator]=(files),start=0}
  i {lifetime[Iterator]=(files),start=0}
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 64
  i {lifetime[Iterator]=(files),start=0}
  0 always 0
  2 always 2
  "./" always "./"
  == always {!<=-1,!>=2}
  0 always 0
Line 65
  [ always !<=-1
  i possible lifetime[Iterator]=(files)
  2 always 2
  = always !<=-1
  i possible lifetime[Iterator]=(files)
Line 66
  i possible lifetime[Iterator]=(files)
Line 68
  i possible lifetime[Iterator]=(files)
Line 72
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  72 always 72
  ( possible lifetime[Iterator]=(files)
  "cli/main.cpp" always "cli/main.cpp"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 73
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  73 always 73
  ( possible lifetime[Iterator]=(files)
  "lib/token.cpp" always "lib/token.cpp"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 74
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  74 always 74
  ( possible lifetime[Iterator]=(files)
  "lib/tokenize.cpp" always "lib/tokenize.cpp"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 75
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  75 always 75
  ( possible lifetime[Iterator]=(files)
  "test/testfilelister.cpp" always "test/testfilelister.cpp"
  != always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 78
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  78 always 78
  ( possible lifetime[Iterator]=(files)
  "lib/tokenize.h" always "lib/tokenize.h"
  == always {!<=-1,!>=2}
  ( {lifetime[Iterator]=(files),end=0}
Line 82
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  82 always 82
  false always 0
  "lib" always "lib"
Line 83
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfilelister.cpp" always "cppcheck-2.8/test/testfilelister.cpp"
  83 always 83
  true always 1
  "readme.txt" always "readme.txt"
