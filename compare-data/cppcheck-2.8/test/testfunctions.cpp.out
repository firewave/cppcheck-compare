

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741956 expected@var22 !=@expr1073741957 actual@var23 ) {
62: std ::@expr1073741958 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741959 expected@var22 ;
64: std ::@expr1073741960 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741961 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741962 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741963 str (@expr1073741964 ) , actualStr@var26 .@expr1073741965 str (@expr1073741966 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741967 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741968 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741969 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741970 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testfunctions.cpp

1:
|
32:
33: class TestFunctions : public TestFixture {
34: public:
35: TestFunctions ( ) : TestFixture ( "TestFunctions" ) { }
36:
37: private:
38: Settings settings@var102 ;
39:
40: void run ( ) override {
41: settings@var102 .@expr154 severity@var103 .@expr155 enable (@expr1073741980 Severity ::@expr1073741981 style@expr1073741971 ) ;
42: settings@var102 .@expr154 severity@var103 .@expr155 enable (@expr1073741984 Severity ::@expr1073741985 warning@expr1073741972 ) ;
43: settings@var102 .@expr154 severity@var103 .@expr155 enable (@expr1073741988 Severity ::@expr1073741989 performance@expr1073741973 ) ;
44: settings@var102 .@expr154 severity@var103 .@expr155 enable (@expr1073741992 Severity ::@expr1073741993 portability@expr1073741974 ) ;
45: settings@var102 .@expr1073741994 certainty@var104 .@expr1073741995 enable (@expr1073741996 Certainty ::@expr1073741997 inconclusive@expr1073741975 ) ;
46: settings@var102 .@expr1073741998 libraries@var105 .@expr1073741999 emplace_back (@expr1073742000 "posix" ) ;
47: settings@var102 .@expr177 standards@var106 .@expr1073742002 c@var107 =@expr1073742003 Standards ::@expr1073742004 C11@expr1073741976 ;
48: settings@var102 .@expr177 standards@var106 .@expr1073742006 cpp@var108 =@expr1073742007 Standards ::@expr1073742008 CPP11@expr1073741977 ;
49: $do ${ $if $(@expr1073742009 settings@var102 .@expr186 library@var109 $.@expr1073742011 $load $(@expr1073742012 $exename@var11 $.@expr1073742013 $c_str $(@expr1073742014 $) $, "std.cfg" $) $.@expr1073742015 $errorcode $!=@expr1073742016 $Library $::@expr1073742017 $ErrorCode $::@expr1073742018 $OK $) ${ $complainMissingLib $(@expr1073742019 "std.cfg" $) $; $return $; $} $} $while $(@expr1073742020 $false $) ;
50: $do ${ $if $(@expr1073742021 settings@var102 .@expr186 library@var109 $.@expr1073742023 $load $(@expr1073742024 $exename@var11 $.@expr1073742025 $c_str $(@expr1073742026 $) $, "posix.cfg" $) $.@expr1073742027 $errorcode $!=@expr1073742028 $Library $::@expr1073742029 $ErrorCode $::@expr1073742030 $OK $) ${ $complainMissingLib $(@expr1073742031 "posix.cfg" $) $; $return $; $} $} $while $(@expr1073742032 $false $) ;
51:
52:
53: $do ${ $if $(@expr1073742033 $prepareTest $(@expr1073742034 "prohibitedFunctions_posix" $) $) ${ $setVerbose $(@expr1073742035 $false $) $; prohibitedFunctions_posix $(@expr1073742036 $) $; $} $} $while $(@expr1073742037 $false $) ;
54: $do ${ $if $(@expr1073742038 $prepareTest $(@expr1073742039 "prohibitedFunctions_index" $) $) ${ $setVerbose $(@expr1073742040 $false $) $; prohibitedFunctions_index $(@expr1073742041 $) $; $} $} $while $(@expr1073742042 $false $) ;
55: $do ${ $if $(@expr1073742043 $prepareTest $(@expr1073742044 "prohibitedFunctions_qt_index" $) $) ${ $setVerbose $(@expr1073742045 $false $) $; prohibitedFunctions_qt_index $(@expr1073742046 $) $; $} $} $while $(@expr1073742047 $false $) ;
56: $do ${ $if $(@expr1073742048 $prepareTest $(@expr1073742049 "prohibitedFunctions_rindex" $) $) ${ $setVerbose $(@expr1073742050 $false $) $; prohibitedFunctions_rindex $(@expr1073742051 $) $; $} $} $while $(@expr1073742052 $false $) ;
57: $do ${ $if $(@expr1073742053 $prepareTest $(@expr1073742054 "prohibitedFunctions_var" $) $) ${ $setVerbose $(@expr1073742055 $false $) $; prohibitedFunctions_var $(@expr1073742056 $) $; $} $} $while $(@expr1073742057 $false $) ;
58: $do ${ $if $(@expr1073742058 $prepareTest $(@expr1073742059 "prohibitedFunctions_gets" $) $) ${ $setVerbose $(@expr1073742060 $false $) $; prohibitedFunctions_gets $(@expr1073742061 $) $; $} $} $while $(@expr1073742062 $false $) ;
59: $do ${ $if $(@expr1073742063 $prepareTest $(@expr1073742064 "prohibitedFunctions_alloca" $) $) ${ $setVerbose $(@expr1073742065 $false $) $; prohibitedFunctions_alloca $(@expr1073742066 $) $; $} $} $while $(@expr1073742067 $false $) ;
60: $do ${ $if $(@expr1073742068 $prepareTest $(@expr1073742069 "prohibitedFunctions_declaredFunction" $) $) ${ $setVerbose $(@expr1073742070 $false $) $; prohibitedFunctions_declaredFunction $(@expr1073742071 $) $; $} $} $while $(@expr1073742072 $false $) ;
61: $do ${ $if $(@expr1073742073 $prepareTest $(@expr1073742074 "prohibitedFunctions_std_gets" $) $) ${ $setVerbose $(@expr1073742075 $false $) $; prohibitedFunctions_std_gets $(@expr1073742076 $) $; $} $} $while $(@expr1073742077 $false $) ;
62: $do ${ $if $(@expr1073742078 $prepareTest $(@expr1073742079 "prohibitedFunctions_multiple" $) $) ${ $setVerbose $(@expr1073742080 $false $) $; prohibitedFunctions_multiple $(@expr1073742081 $) $; $} $} $while $(@expr1073742082 $false $) ;
63: $do ${ $if $(@expr1073742083 $prepareTest $(@expr1073742084 "prohibitedFunctions_c_declaration" $) $) ${ $setVerbose $(@expr1073742085 $false $) $; prohibitedFunctions_c_declaration $(@expr1073742086 $) $; $} $} $while $(@expr1073742087 $false $) ;
64: $do ${ $if $(@expr1073742088 $prepareTest $(@expr1073742089 "prohibitedFunctions_functionWithBody" $) $) ${ $setVerbose $(@expr1073742090 $false $) $; prohibitedFunctions_functionWithBody $(@expr1073742091 $) $; $} $} $while $(@expr1073742092 $false $) ;
65: $do ${ $if $(@expr1073742093 $prepareTest $(@expr1073742094 "prohibitedFunctions_crypt" $) $) ${ $setVerbose $(@expr1073742095 $false $) $; prohibitedFunctions_crypt $(@expr1073742096 $) $; $} $} $while $(@expr1073742097 $false $) ;
66: $do ${ $if $(@expr1073742098 $prepareTest $(@expr1073742099 "prohibitedFunctions_namespaceHandling" $) $) ${ $setVerbose $(@expr1073742100 $false $) $; prohibitedFunctions_namespaceHandling $(@expr1073742101 $) $; $} $} $while $(@expr1073742102 $false $) ;
67:
68:
69: $do ${ $if $(@expr1073742103 $prepareTest $(@expr1073742104 "invalidFunctionUsage1" $) $) ${ $setVerbose $(@expr1073742105 $false $) $; invalidFunctionUsage1 $(@expr1073742106 $) $; $} $} $while $(@expr1073742107 $false $) ;
70: $do ${ $if $(@expr1073742108 $prepareTest $(@expr1073742109 "invalidFunctionUsageStrings" $) $) ${ $setVerbose $(@expr1073742110 $false $) $; invalidFunctionUsageStrings $(@expr1073742111 $) $; $} $} $while $(@expr1073742112 $false $) ;
71:
72:
73: $do ${ $if $(@expr1073742113 $prepareTest $(@expr1073742114 "mathfunctionCall_fmod" $) $) ${ $setVerbose $(@expr1073742115 $false $) $; mathfunctionCall_fmod $(@expr1073742116 $) $; $} $} $while $(@expr1073742117 $false $) ;
74: $do ${ $if $(@expr1073742118 $prepareTest $(@expr1073742119 "mathfunctionCall_sqrt" $) $) ${ $setVerbose $(@expr1073742120 $false $) $; mathfunctionCall_sqrt $(@expr1073742121 $) $; $} $} $while $(@expr1073742122 $false $) ;
75: $do ${ $if $(@expr1073742123 $prepareTest $(@expr1073742124 "mathfunctionCall_log" $) $) ${ $setVerbose $(@expr1073742125 $false $) $; mathfunctionCall_log $(@expr1073742126 $) $; $} $} $while $(@expr1073742127 $false $) ;
76: $do ${ $if $(@expr1073742128 $prepareTest $(@expr1073742129 "mathfunctionCall_acos" $) $) ${ $setVerbose $(@expr1073742130 $false $) $; mathfunctionCall_acos $(@expr1073742131 $) $; $} $} $while $(@expr1073742132 $false $) ;
77: $do ${ $if $(@expr1073742133 $prepareTest $(@expr1073742134 "mathfunctionCall_asin" $) $) ${ $setVerbose $(@expr1073742135 $false $) $; mathfunctionCall_asin $(@expr1073742136 $) $; $} $} $while $(@expr1073742137 $false $) ;
78: $do ${ $if $(@expr1073742138 $prepareTest $(@expr1073742139 "mathfunctionCall_pow" $) $) ${ $setVerbose $(@expr1073742140 $false $) $; mathfunctionCall_pow $(@expr1073742141 $) $; $} $} $while $(@expr1073742142 $false $) ;
79: $do ${ $if $(@expr1073742143 $prepareTest $(@expr1073742144 "mathfunctionCall_atan2" $) $) ${ $setVerbose $(@expr1073742145 $false $) $; mathfunctionCall_atan2 $(@expr1073742146 $) $; $} $} $while $(@expr1073742147 $false $) ;
80: $do ${ $if $(@expr1073742148 $prepareTest $(@expr1073742149 "mathfunctionCall_precision" $) $) ${ $setVerbose $(@expr1073742150 $false $) $; mathfunctionCall_precision $(@expr1073742151 $) $; $} $} $while $(@expr1073742152 $false $) ;
81:
82:
83: $do ${ $if $(@expr1073742153 $prepareTest $(@expr1073742154 "checkIgnoredReturnValue" $) $) ${ $setVerbose $(@expr1073742155 $false $) $; checkIgnoredReturnValue $(@expr1073742156 $) $; $} $} $while $(@expr1073742157 $false $) ;
84: $do ${ $if $(@expr1073742158 $prepareTest $(@expr1073742159 "checkIgnoredErrorCode" $) $) ${ $setVerbose $(@expr1073742160 $false $) $; checkIgnoredErrorCode $(@expr1073742161 $) $; $} $} $while $(@expr1073742162 $false $) ;
85:
86:
87: $do ${ $if $(@expr1073742163 $prepareTest $(@expr1073742164 "memsetZeroBytes" $) $) ${ $setVerbose $(@expr1073742165 $false $) $; memsetZeroBytes $(@expr1073742166 $) $; $} $} $while $(@expr1073742167 $false $) ;
88: $do ${ $if $(@expr1073742168 $prepareTest $(@expr1073742169 "memsetInvalid2ndParam" $) $) ${ $setVerbose $(@expr1073742170 $false $) $; memsetInvalid2ndParam $(@expr1073742171 $) $; $} $} $while $(@expr1073742172 $false $) ;
89:
90:
91: $do ${ $if $(@expr1073742173 $prepareTest $(@expr1073742174 "checkMissingReturn" $) $) ${ $setVerbose $(@expr1073742175 $false $) $; checkMissingReturn $(@expr1073742176 $) $; $} $} $while $(@expr1073742177 $false $) ;
92:
93:
94: $do ${ $if $(@expr1073742178 $prepareTest $(@expr1073742179 "returnLocalStdMove1" $) $) ${ $setVerbose $(@expr1073742180 $false $) $; returnLocalStdMove1 $(@expr1073742181 $) $; $} $} $while $(@expr1073742182 $false $) ;
95: $do ${ $if $(@expr1073742183 $prepareTest $(@expr1073742184 "returnLocalStdMove2" $) $) ${ $setVerbose $(@expr1073742185 $false $) $; returnLocalStdMove2 $(@expr1073742186 $) $; $} $} $while $(@expr1073742187 $false $) ;
96: $do ${ $if $(@expr1073742188 $prepareTest $(@expr1073742189 "returnLocalStdMove3" $) $) ${ $setVerbose $(@expr1073742190 $false $) $; returnLocalStdMove3 $(@expr1073742191 $) $; $} $} $while $(@expr1073742192 $false $) ;
97: $do ${ $if $(@expr1073742193 $prepareTest $(@expr1073742194 "returnLocalStdMove4" $) $) ${ $setVerbose $(@expr1073742195 $false $) $; returnLocalStdMove4 $(@expr1073742196 $) $; $} $} $while $(@expr1073742197 $false $) ;
98:
99: $do ${ $if $(@expr1073742198 $prepareTest $(@expr1073742199 "returnLocalStdMove5" $) $) ${ $setVerbose $(@expr1073742200 $false $) $; returnLocalStdMove5 $(@expr1073742201 $) $; $} $} $while $(@expr1073742202 $false $) ;
100: }
101:
102:
103: void check_ ( const char * file@var110 , int line@var111 , const char code@var112 [ ] , const char filename@var113 [ 9 ] = "test.cpp" , const Settings * settings_@var114 = nullptr ) {
104:
105: errout@var100 .@expr1073742203 str (@expr1073742204 "" ) ;
106:
107: if (@expr1073742205 !@expr1073742206 settings_@var114 ) {
108: settings_@var114 =@expr1073742207 &@expr1073742208 settings@var102 ; }
109:
110:
111: Tokenizer tokenizer@var115 (@expr1073742209 settings_@var114 , this@expr386 ) ;
112: std ::@expr1073742211 istringstream istr@var116 (@expr1073742212 code@var112 ) ;
113: $assert_ $(@expr1073742213 file@var110 $, line@var111 $, $(@expr1073742214 tokenizer@var115 .@expr1073742215 tokenize (@expr1073742216 istr@var116 , filename@var113 ) $) $) ;
114:
115: CheckFunctions checkFunctions@var117 (@expr1073742217 &@expr394 tokenizer@var115 , settings_@var114 , this@expr386 ) ;
116: checkFunctions@var117 .@expr1073742219 runChecks (@expr1073742220 &@expr394 tokenizer@var115 , settings_@var114 , this@expr386 ) ;
117: }
118:
119: void prohibitedFunctions_posix ( ) {
120: $check_ $(@expr1073742222 "cppcheck-2.8/test/testfunctions.cpp" $, 120 $, "void f()\n{\n    bsd_signal(SIGABRT, SIG_IGN);\n}" $)
121:
122:
123: ;
124: $if $(@expr1073742223 $!@expr1073742224 $assertEquals $(@expr1073742225 "cppcheck-2.8/test/testfunctions.cpp" $, 124 $, "[test.cpp:3]: (style) Obsolescent function 'bsd_signal' called. It is recommended to use 'sigaction' instead.\n" $, errout@var100 .@expr402 str (@expr403 ) $) $) { $return ; }
125:
126: $check_ $(@expr1073742228 "cppcheck-2.8/test/testfunctions.cpp" $, 126 $, "int f()\n{\n    int bsd_signal(0);\n    return bsd_signal;\n}" $)
127:
128:
129:
130: ;
131: $if $(@expr1073742229 $!@expr1073742230 $assertEquals $(@expr1073742231 "cppcheck-2.8/test/testfunctions.cpp" $, 131 $, "" $, errout@var100 .@expr402 str (@expr403 ) $) $) { $return ; }
132:
133: $check_ $(@expr1073742234 "cppcheck-2.8/test/testfunctions.cpp" $, 133 $, "void f()\n{\n    struct hostent *hp;\n    if(!hp = gethostbyname(\"127.0.0.1\")) {\n        exit(1);\n    }\n}" $)
134:
|
138:
139: ;
140: $if $(@expr1073742235 $!@expr1073742236 $assertEquals $(@expr1073742237 "cppcheck-2.8/test/testfunctions.cpp" $, 140 $, "[test.cpp:4]: (style) Obsolescent function 'gethostbyname' called. It is recommended to use 'getaddrinfo' instead.\n" $, errout@var100 .@expr402 str (@expr403 ) $) $) { $return ; }
141:
142: $check_ $(@expr1073742240 "cppcheck-2.8/test/testfunctions.cpp" $, 142 $, "void f()\n{\n    long addr;\n    addr = inet_addr(\"127.0.0.1\");\n    if(!hp = gethostbyaddr((char *) &addr, sizeof(addr), AF_INET)) {\n        exit(1);\n    }\n}" $)
143:
|
148:
149: ;
150: $if $(@expr1073742241 $!@expr1073742242 $assertEquals $(@expr1073742243 "cppcheck-2.8/test/testfunctions.cpp" $, 150 $, "[test.cpp:5]: (style) Obsolescent function 'gethostbyaddr' called. It is recommended to use 'getnameinfo' instead.\n" $, errout@var100 .@expr402 str (@expr403 ) $) $) { $return ; }
151:
152: $check_ $(@expr1073742246 "cppcheck-2.8/test/testfunctions.cpp" $, 152 $, "void f()\n{\n    usleep( 1000 );\n}" $)
153:
154:
155: ;
156: $if $(@expr1073742247 $!@expr1073742248 $assertEquals $(@expr1073742249 "cppcheck-2.8/test/testfunctions.cpp" $, 156 $, "[test.cpp:3]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n" $, errout@var100 .@expr402 str (@expr403 ) $) $) { $return ; }
157: }
158:
159: void prohibitedFunctions_index ( ) {
160: $check_ $(@expr1073742252 "cppcheck-2.8/test/testfunctions.cpp" $, 160 $, "namespace n1 {\n    int index(){ return 1; };\n}\nint main()\n{\n    n1::index();\n    return 0;\n}" $)
161:
|
166:
167: ;
168: $if $(@expr1073742253 $!@expr1073742254 $assertEquals $(@expr1073742255 "cppcheck-2.8/test/testfunctions.cpp" $, 168 $, "" $, errout@var100 .@expr432 str (@expr433 ) $) $) { $return ; }
169:
170: $check_ $(@expr1073742258 "cppcheck-2.8/test/testfunctions.cpp" $, 170 $, "std::size_t f()\n{\n    std::size_t index(0);\n    index++;\n    return index;\n}" $)
171:
|
174:
175: ;
176: $if $(@expr1073742259 $!@expr1073742260 $assertEquals $(@expr1073742261 "cppcheck-2.8/test/testfunctions.cpp" $, 176 $, "" $, errout@var100 .@expr432 str (@expr433 ) $) $) { $return ; }
177:
178: $check_ $(@expr1073742264 "cppcheck-2.8/test/testfunctions.cpp" $, 178 $, "int f()\n{\n    return this->index();\n}" $)
179:
180:
181: ;
182: $if $(@expr1073742265 $!@expr1073742266 $assertEquals $(@expr1073742267 "cppcheck-2.8/test/testfunctions.cpp" $, 182 $, "" $, errout@var100 .@expr432 str (@expr433 ) $) $) { $return ; }
183:
184: $check_ $(@expr1073742270 "cppcheck-2.8/test/testfunctions.cpp" $, 184 $, "void f()\n{\n    int index( 0 );\n}" $)
185:
186:
187: ;
188: $if $(@expr1073742271 $!@expr1073742272 $assertEquals $(@expr1073742273 "cppcheck-2.8/test/testfunctions.cpp" $, 188 $, "" $, errout@var100 .@expr432 str (@expr433 ) $) $) { $return ; }
189:
190: $check_ $(@expr1073742276 "cppcheck-2.8/test/testfunctions.cpp" $, 190 $, "const char f()\n{\n    const char var[6] = \"index\";\n    const char i = index(var, 0);\n    return i;\n}" $)
191:
|
194:
195: ;
196: $if $(@expr1073742277 $!@expr1073742278 $assertEquals $(@expr1073742279 "cppcheck-2.8/test/testfunctions.cpp" $, 196 $, "[test.cpp:4]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n" $, errout@var100 .@expr432 str (@expr433 ) $) $) { $return
197: ; }
198: }
199:
200: void prohibitedFunctions_qt_index ( ) {
201: $check_ $(@expr1073742282 "cppcheck-2.8/test/testfunctions.cpp" $, 201 $, "void TDataModel::forceRowRefresh(int row) {\n    emit dataChanged(index(row, 0), index(row, columnCount() - 1));\n}" $)
202:
203: ;
204: $if $(@expr1073742283 $!@expr1073742284 $assertEquals $(@expr1073742285 "cppcheck-2.8/test/testfunctions.cpp" $, 204 $, "[test.cpp:2]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n" $, errout@var100 .@expr1073742286 str (@expr1073742287 ) $) $) { $return ; }
205: }
206:
207: void prohibitedFunctions_rindex ( ) {
208: $check_ $(@expr1073742288 "cppcheck-2.8/test/testfunctions.cpp" $, 208 $, "void f()\n{\n    int rindex( 0 );\n}" $)
209:
210:
211: ;
212: $if $(@expr1073742289 $!@expr1073742290 $assertEquals $(@expr1073742291 "cppcheck-2.8/test/testfunctions.cpp" $, 212 $, "" $, errout@var100 .@expr468 str (@expr469 ) $) $) { $return ; }
213:
214: $check_ $(@expr1073742294 "cppcheck-2.8/test/testfunctions.cpp" $, 214 $, "void f()\n{\n    const char var[7] = \"rindex\";\n    print(rindex(var, 0));\n}" $)
215:
216:
217:
218: ;
219: $if $(@expr1073742295 $!@expr1073742296 $assertEquals $(@expr1073742297 "cppcheck-2.8/test/testfunctions.cpp" $, 219 $, "[test.cpp:4]: (style) Obsolescent function 'rindex' called. It is recommended to use 'strrchr' instead.\n" $, errout@var100 .@expr468 str (@expr469 ) $) $) { $return ; }
220: }
221:
222:
223: void prohibitedFunctions_var ( ) {
224: $check_ $(@expr1073742300 "cppcheck-2.8/test/testfunctions.cpp" $, 224 $, "class Fred {\npublic:\n    Fred() : index(0) { }\n    int index;\n};" $)
225:
226:
227:
228: ;
229: $if $(@expr1073742301 $!@expr1073742302 $assertEquals $(@expr1073742303 "cppcheck-2.8/test/testfunctions.cpp" $, 229 $, "" $, errout@var100 .@expr1073742304 str (@expr1073742305 ) $) $) { $return ; }
230: }
231:
232: void prohibitedFunctions_gets ( ) {
233: $check_ $(@expr1073742306 "cppcheck-2.8/test/testfunctions.cpp" $, 233 $, "void f()\n{\n    char *x = gets(a);\n}" $)
234:
235:
236: ;
237: $if $(@expr1073742307 $!@expr1073742308 $assertEquals $(@expr1073742309 "cppcheck-2.8/test/testfunctions.cpp" $, 237 $, "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" $, errout@var100 .@expr486 str (@expr487 ) $) $) { $return ; }
238:
239: $check_ $(@expr1073742312 "cppcheck-2.8/test/testfunctions.cpp" $, 239 $, "void f()\n{\n    foo(x, gets(a));\n}" $)
240:
241:
242: ;
243: $if $(@expr1073742313 $!@expr1073742314 $assertEquals $(@expr1073742315 "cppcheck-2.8/test/testfunctions.cpp" $, 243 $, "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" $, errout@var100 .@expr486 str (@expr487 ) $) $) { $return ; }
244: }
245:
246: void prohibitedFunctions_alloca ( ) {
247: $check_ $(@expr1073742322 "cppcheck-2.8/test/testfunctions.cpp" $, 247 $, "void f()\n{\n    char *x = alloca(10);\n}" , "test.cpp" $)
248:
249:
250: ;
251: $if $(@expr1073742323 $!@expr1073742324 $assertEquals $(@expr1073742325 "cppcheck-2.8/test/testfunctions.cpp" $, 251 $, "[test.cpp:3]: (warning) Obsolete function 'alloca' called.\n" $, errout@var100 .@expr502 str (@expr503 ) $) $) { $return ; }
252:
253: $check_ $(@expr1073742328 "cppcheck-2.8/test/testfunctions.cpp" $, 253 $, "void f()\n{\n    char *x = alloca(10);\n}" , "test.c" $)
254:
255:
256: ;
257: $if $(@expr1073742329 $!@expr1073742330 $assertEquals $(@expr1073742331 "cppcheck-2.8/test/testfunctions.cpp" $, 257 $, "[test.c:3]: (warning) Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\n" $, errout@var100 .@expr502 str (@expr503 ) $) $) { $return ; }
258:
259: settings@var102 .@expr510 standards@var106 .@expr511 c@var107 =@expr1073742336 Standards ::@expr1073742337 C89@expr1073742318 ;
260: settings@var102 .@expr510 standards@var106 .@expr515 cpp@var108 =@expr1073742340 Standards ::@expr1073742341 CPP03@expr1073742319 ;
261: $check_ $(@expr1073742342 "cppcheck-2.8/test/testfunctions.cpp" $, 261 $, "void f()\n{\n    char *x = alloca(10);\n}" , "test.cpp" $)
262:
263:
264: ;
265: $if $(@expr1073742343 $!@expr1073742344 $assertEquals $(@expr1073742345 "cppcheck-2.8/test/testfunctions.cpp" $, 265 $, "" $, errout@var100 .@expr502 str (@expr503 ) $) $) { $return ; }
266:
267: $check_ $(@expr1073742348 "cppcheck-2.8/test/testfunctions.cpp" $, 267 $, "void f()\n{\n    char *x = alloca(10);\n}" , "test.c" $)
268:
269:
270: ;
271: $if $(@expr1073742349 $!@expr1073742350 $assertEquals $(@expr1073742351 "cppcheck-2.8/test/testfunctions.cpp" $, 271 $, "" $, errout@var100 .@expr502 str (@expr503 ) $) $) { $return ; }
272:
273: $check_ $(@expr1073742354 "cppcheck-2.8/test/testfunctions.cpp" $, 273 $, "void f()\n{\n    char *x = alloca(10);\n}" , "test.c" $)
274:
275:
276: ;
277: $if $(@expr1073742355 $!@expr1073742356 $assertEquals $(@expr1073742357 "cppcheck-2.8/test/testfunctions.cpp" $, 277 $, "" $, errout@var100 .@expr502 str (@expr503 ) $) $) { $return ; }
278: settings@var102 .@expr510 standards@var106 .@expr511 c@var107 =@expr1073742362 Standards ::@expr1073742363 C11@expr1073742320 ;
279: settings@var102 .@expr510 standards@var106 .@expr515 cpp@var108 =@expr1073742366 Standards ::@expr1073742367 CPP11@expr1073742321 ;
280: }
281:
282:
283: void prohibitedFunctions_declaredFunction ( ) {
284: $check_ $(@expr1073742368 "cppcheck-2.8/test/testfunctions.cpp" $, 284 $, "int ftime ( int a )\n{\n    return a;\n}\nint main ()\n{\n    int b ; b = ftime ( 1 ) ;\n    return 0 ;\n}" $)
285:
|
291:
292: ;
293: $if $(@expr1073742369 $!@expr1073742370 $assertEquals $(@expr1073742371 "cppcheck-2.8/test/testfunctions.cpp" $, 293 $, "" $, errout@var100 .@expr1073742372 str (@expr1073742373 ) $) $) { $return ; }
294: }
295:
296:
297: void prohibitedFunctions_std_gets ( ) {
298: $check_ $(@expr1073742374 "cppcheck-2.8/test/testfunctions.cpp" $, 298 $, "void f(char * str)\n{\n    char *x = std::gets(str);\n    char *y = gets(str);\n}" $)
299:
300:
301:
302: ;
303: $if $(@expr1073742375 $!@expr1073742376 $assertEquals $(@expr1073742377 "cppcheck-2.8/test/testfunctions.cpp" $, 303 $, "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" $, errout@var100 .@expr1073742378 str (@expr1073742379 ) $) $) { $return
304: ; }
305: }
306:
307:
308: void prohibitedFunctions_multiple ( ) {
309: $check_ $(@expr1073742380 "cppcheck-2.8/test/testfunctions.cpp" $, 309 $, "void f(char * str)\n{\n    char *x = std::gets(str);\n    usleep( 1000 );\n}" $)
310:
311:
312:
313: ;
314: $if $(@expr1073742381 $!@expr1073742382 $assertEquals $(@expr1073742383 "cppcheck-2.8/test/testfunctions.cpp" $, 314 $, "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n" $, errout@var100 .@expr1073742384 str (@expr1073742385 ) $) $) { $return
315: ; }
316: }
317:
318: void prohibitedFunctions_c_declaration ( ) {
319: $check_ $(@expr1073742386 "cppcheck-2.8/test/testfunctions.cpp" $, 319 $, "char * gets ( char * c ) ;\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}" $)
320:
|
324:
325: ;
326: $if $(@expr1073742387 $!@expr1073742388 $assertEquals $(@expr1073742389 "cppcheck-2.8/test/testfunctions.cpp" $, 326 $, "[test.cpp:5]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" $, errout@var100 .@expr566 str (@expr567 ) $) $) { $return ; }
327:
328: $check_ $(@expr1073742392 "cppcheck-2.8/test/testfunctions.cpp" $, 328 $, "int getcontext(ucontext_t *ucp);\nvoid f (ucontext_t *ucp)\n{\n    getcontext ( ucp ) ;\n}" $)
329:
330:
331:
332: ;
333: $if $(@expr1073742393 $!@expr1073742394 $assertEquals $(@expr1073742395 "cppcheck-2.8/test/testfunctions.cpp" $, 333 $, "[test.cpp:4]: (portability) Obsolescent function 'getcontext' called. Applications are recommended to be rewritten to use POSIX threads.\n" $, errout@var100 .@expr566 str (@expr567 ) $) $) { $return ; }
334: }
335:
336: void prohibitedFunctions_functionWithBody ( ) {
337: $check_ $(@expr1073742398 "cppcheck-2.8/test/testfunctions.cpp" $, 337 $, "char * gets ( char * c ) { return c; }\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}" $)
338:
|
342:
343: ;
344: $if $(@expr1073742399 $!@expr1073742400 $assertEquals $(@expr1073742401 "cppcheck-2.8/test/testfunctions.cpp" $, 344 $, "" $, errout@var100 .@expr1073742402 str (@expr1073742403 ) $) $) { $return ; }
345: }
346:
347: void prohibitedFunctions_crypt ( ) {
348: $check_ $(@expr1073742404 "cppcheck-2.8/test/testfunctions.cpp" $, 348 $, "void f(char *pwd)\n{\n    char *cpwd;    crypt(pwd, cpwd);\n}" $)
349:
350:
351:
352: ;
353: $if $(@expr1073742405 $!@expr1073742406 $assertEquals $(@expr1073742407 "cppcheck-2.8/test/testfunctions.cpp" $, 353 $, "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n" $, errout@var100 .@expr584 str (@expr585 ) $) $) { $return
354: ; }
355:
356: $check_ $(@expr1073742410 "cppcheck-2.8/test/testfunctions.cpp" $, 356 $, "void f()\n{\n    char *pwd = getpass(\"Password:\");    char *cpwd;    crypt(pwd, cpwd);\n}" $)
357:
|
360:
361: ;
362: $if $(@expr1073742411 $!@expr1073742412 $assertEquals $(@expr1073742413 "cppcheck-2.8/test/testfunctions.cpp" $, 362 $, "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n" $, errout@var100 .@expr584 str (@expr585 ) $) $) { $return
363: ; }
364:
365: $check_ $(@expr1073742416 "cppcheck-2.8/test/testfunctions.cpp" $, 365 $, "int f()\n{\n    int crypt = 0;    return crypt;\n}" $)
366:
367:
368:
369: ;
370: $if $(@expr1073742417 $!@expr1073742418 $assertEquals $(@expr1073742419 "cppcheck-2.8/test/testfunctions.cpp" $, 370 $, "" $, errout@var100 .@expr584 str (@expr585 ) $) $) { $return ; }
371: }
372:
373: void prohibitedFunctions_namespaceHandling ( ) {
374: $check_ $(@expr1073742422 "cppcheck-2.8/test/testfunctions.cpp" $, 374 $, "void f()\n{\n    time_t t = 0;    auto lt = std::localtime(&t);\n}" $)
375:
376:
377:
378: ;
379: $if $(@expr1073742423 $!@expr1073742424 $assertEquals $(@expr1073742425 "cppcheck-2.8/test/testfunctions.cpp" $, 379 $, "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
380:
381:
382: $check_ $(@expr1073742428 "cppcheck-2.8/test/testfunctions.cpp" $, 382 $, "void f()\n{\n    printf(\"Magic guess: %d\", getpwent());\n}" $)
383:
384:
385: ;
386: $if $(@expr1073742429 $!@expr1073742430 $assertEquals $(@expr1073742431 "cppcheck-2.8/test/testfunctions.cpp" $, 386 $, "[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
387:
388:
389: $check_ $(@expr1073742434 "cppcheck-2.8/test/testfunctions.cpp" $, 389 $, "void f()\n{\n    time_t t = 0;    struct tm *foo = localtime(&t);\n}" $)
390:
391:
392:
393: ;
394: $if $(@expr1073742435 $!@expr1073742436 $assertEquals $(@expr1073742437 "cppcheck-2.8/test/testfunctions.cpp" $, 394 $, "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
395:
396:
397: $check_ $(@expr1073742440 "cppcheck-2.8/test/testfunctions.cpp" $, 397 $, "void f()\n{\n    ::getpwent();\n}" $)
398:
399:
400: ;
401: $if $(@expr1073742441 $!@expr1073742442 $assertEquals $(@expr1073742443 "cppcheck-2.8/test/testfunctions.cpp" $, 401 $, "[test.cpp:3]: (warning) Return value of function getpwent() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return
402: ; }
403:
404:
405: $check_ $(@expr1073742446 "cppcheck-2.8/test/testfunctions.cpp" $, 405 $, "int getpwent()\n{\n    return 123;\n}" $)
406:
407:
408: ;
409: $if $(@expr1073742447 $!@expr1073742448 $assertEquals $(@expr1073742449 "cppcheck-2.8/test/testfunctions.cpp" $, 409 $, "" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
410:
411:
412: $check_ $(@expr1073742452 "cppcheck-2.8/test/testfunctions.cpp" $, 412 $, "void f()\n{\n    foobar::getpwent();\n}" $)
413:
414:
415: ;
416: $if $(@expr1073742453 $!@expr1073742454 $assertEquals $(@expr1073742455 "cppcheck-2.8/test/testfunctions.cpp" $, 416 $, "" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
417:
418:
419: $check_ $(@expr1073742458 "cppcheck-2.8/test/testfunctions.cpp" $, 419 $, "void f()\n{\n    foobar.getpwent();\n}" $)
420:
421:
422: ;
423: $if $(@expr1073742459 $!@expr1073742460 $assertEquals $(@expr1073742461 "cppcheck-2.8/test/testfunctions.cpp" $, 423 $, "" $, errout@var100 .@expr602 str (@expr603 ) $) $) { $return ; }
424: }
425:
426: void invalidFunctionUsage1 ( ) {
427: $check_ $(@expr1073742464 "cppcheck-2.8/test/testfunctions.cpp" $, 427 $, "void f() { memset(a,b,sizeof(a)!=12); }" $) ;
428: $if $(@expr1073742465 $!@expr1073742466 $assertEquals $(@expr1073742467 "cppcheck-2.8/test/testfunctions.cpp" $, 428 $, "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
429:
430: $check_ $(@expr1073742470 "cppcheck-2.8/test/testfunctions.cpp" $, 430 $, "void f() { memset(a,b,sizeof(a)!=0); }" $) ;
431: $if $(@expr1073742471 $!@expr1073742472 $assertEquals $(@expr1073742473 "cppcheck-2.8/test/testfunctions.cpp" $, 431 $, "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
432:
433: $check_ $(@expr1073742476 "cppcheck-2.8/test/testfunctions.cpp" $, 433 $, "void f() { memset(a,b,!c); }" $) ;
434: $if $(@expr1073742477 $!@expr1073742478 $assertEquals $(@expr1073742479 "cppcheck-2.8/test/testfunctions.cpp" $, 434 $, "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
435:
436:
437: $check_ $(@expr1073742482 "cppcheck-2.8/test/testfunctions.cpp" $, 437 $, "void f(bool c) { memset(a,b,c); }" $) ;
438: $if $(@expr1073742483 $!@expr1073742484 $assertEquals $(@expr1073742485 "cppcheck-2.8/test/testfunctions.cpp" $, 438 $, "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
439: $check_ $(@expr1073742488 "cppcheck-2.8/test/testfunctions.cpp" $, 439 $, "void f() { memset(a,b,true); }" $) ;
440: $if $(@expr1073742489 $!@expr1073742490 $assertEquals $(@expr1073742491 "cppcheck-2.8/test/testfunctions.cpp" $, 440 $, "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
441:
442:
443: $check_ $(@expr1073742494 "cppcheck-2.8/test/testfunctions.cpp" $, 443 $, "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}" , "test.c" $)
444:
445:
446: ;
447: $if $(@expr1073742495 $!@expr1073742496 $assertEquals $(@expr1073742497 "cppcheck-2.8/test/testfunctions.cpp" $, 447 $, "[test.c:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
448:
449:
450: $check_ $(@expr1073742500 "cppcheck-2.8/test/testfunctions.cpp" $, 450 $, "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}" $)
451:
452:
453: ;
454: $if $(@expr1073742501 $!@expr1073742502 $assertEquals $(@expr1073742503 "cppcheck-2.8/test/testfunctions.cpp" $, 454 $, "[test.cpp:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
455:
456: $check_ $(@expr1073742506 "cppcheck-2.8/test/testfunctions.cpp" $, 456 $, "int boolArgZeroIsInvalidButOneIsValid(int a, int param) {\n  return div(a, param > 0);\n}" $)
457:
458: ;
459: $if $(@expr1073742507 $!@expr1073742508 $assertEquals $(@expr1073742509 "cppcheck-2.8/test/testfunctions.cpp" $, 459 $, "[test.cpp:2]: (error) Invalid div() argument nr 2. The value is 0 or 1 (boolean) but the valid values are ':-1,1:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
460:
461: $check_ $(@expr1073742512 "cppcheck-2.8/test/testfunctions.cpp" $, 461 $, "void boolArgZeroIsValidButOneIsInvalid(int param) {\n  strtol(a, b, param > 0);\n}" $)
462:
463: ;
464: $if $(@expr1073742513 $!@expr1073742514 $assertEquals $(@expr1073742515 "cppcheck-2.8/test/testfunctions.cpp" $, 464 $, "[test.cpp:2]: (error) Invalid strtol() argument nr 3. The value is 0 or 1 (boolean) but the valid values are '0,2:36'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
465:
466: $check_ $(@expr1073742518 "cppcheck-2.8/test/testfunctions.cpp" $, 466 $, "void f() { strtol(a,b,1); }" $) ;
467: $if $(@expr1073742519 $!@expr1073742520 $assertEquals $(@expr1073742521 "cppcheck-2.8/test/testfunctions.cpp" $, 467 $, "[test.cpp:1]: (error) Invalid strtol() argument nr 3. The value is 1 but the valid values are '0,2:36'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
468:
469: $check_ $(@expr1073742524 "cppcheck-2.8/test/testfunctions.cpp" $, 469 $, "void f() { strtol(a,b,10); }" $) ;
470: $if $(@expr1073742525 $!@expr1073742526 $assertEquals $(@expr1073742527 "cppcheck-2.8/test/testfunctions.cpp" $, 470 $, "" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
471:
472: $check_ $(@expr1073742530 "cppcheck-2.8/test/testfunctions.cpp" $, 472 $, "void f(std::vector<int>& v) {\n    int N = -1;\n    for (long i = 0; i < g(); i++)\n        N = h(N);\n    v.resize(N);\n}\n" $)
473:
|
476:
477: ;
478: $if $(@expr1073742531 $!@expr1073742532 $assertEquals $(@expr1073742533 "cppcheck-2.8/test/testfunctions.cpp" $, 478 $, "[test.cpp:5]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return ; }
479:
480: $check_ $(@expr1073742536 "cppcheck-2.8/test/testfunctions.cpp" $, 480 $, "void f(std::vector<int>& v, int N) {\n    if (N < -1)\n        return;\n    v.resize(N);\n}\n" $)
481:
482:
483:
484: ;
485: $if $(@expr1073742537 $!@expr1073742538 $assertEquals $(@expr1073742539 "cppcheck-2.8/test/testfunctions.cpp" $, 485 $, "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'N<-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return
486: ; }
487:
488: $check_ $(@expr1073742542 "cppcheck-2.8/test/testfunctions.cpp" $, 488 $, "void f(std::vector<int>& v, int N) {\n    if (N == -1) {}\n    v.resize(N);\n}\n" $)
489:
490:
491: ;
492: $if $(@expr1073742543 $!@expr1073742544 $assertEquals $(@expr1073742545 "cppcheck-2.8/test/testfunctions.cpp" $, 492 $, "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'N==-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return
493: ; }
494:
495: $check_ $(@expr1073742548 "cppcheck-2.8/test/testfunctions.cpp" $, 495 $, "void f(std::vector<int>& v, int N, bool b) {\n    if (b)\n        N = -1;\n    v.resize(N);\n}\n" $)
496:
497:
498:
499: ;
500: $if $(@expr1073742549 $!@expr1073742550 $assertEquals $(@expr1073742551 "cppcheck-2.8/test/testfunctions.cpp" $, 500 $, "[test.cpp:4]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return
501: ; }
502:
503: $check_ $(@expr1073742554 "cppcheck-2.8/test/testfunctions.cpp" $, 503 $, "void f(std::vector<int>& v) {\n    int N = -1;\n    v.resize(N);\n}\n" $)
504:
505:
506: ;
507: $if $(@expr1073742555 $!@expr1073742556 $assertEquals $(@expr1073742557 "cppcheck-2.8/test/testfunctions.cpp" $, 507 $, "[test.cpp:3]: (error) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" $, errout@var100 .@expr644 str (@expr645 ) $) $) { $return
508: ; }
509: }
510:
511: void invalidFunctionUsageStrings ( ) {
512: $check_ $(@expr1073742560 "cppcheck-2.8/test/testfunctions.cpp" $, 512 $, "size_t f() { char x = 'x'; return strlen(&x); }" $) ;
513: $if $(@expr1073742561 $!@expr1073742562 $assertEquals $(@expr1073742563 "cppcheck-2.8/test/testfunctions.cpp" $, 513 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
514:
515: $check_ $(@expr1073742566 "cppcheck-2.8/test/testfunctions.cpp" $, 515 $, "size_t f() { return strlen(&x); }" $) ;
516: $if $(@expr1073742567 $!@expr1073742568 $assertEquals $(@expr1073742569 "cppcheck-2.8/test/testfunctions.cpp" $, 516 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
517:
518: $check_ $(@expr1073742572 "cppcheck-2.8/test/testfunctions.cpp" $, 518 $, "size_t f(char x) { return strlen(&x); }" $) ;
519: $if $(@expr1073742573 $!@expr1073742574 $assertEquals $(@expr1073742575 "cppcheck-2.8/test/testfunctions.cpp" $, 519 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
520:
521: $check_ $(@expr1073742578 "cppcheck-2.8/test/testfunctions.cpp" $, 521 $, "size_t f() { char x = '\\0'; return strlen(&x); }" $) ;
522: $if $(@expr1073742579 $!@expr1073742580 $assertEquals $(@expr1073742581 "cppcheck-2.8/test/testfunctions.cpp" $, 522 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
523:
524: $check_ $(@expr1073742584 "cppcheck-2.8/test/testfunctions.cpp" $, 524 $, "size_t f() {\n  char x;\n  if (y)\n    x = '\\0';\n  else\n    x = 'a';\n  return strlen(&x);\n}" $)
525:
|
530:
531: ;
532: $if $(@expr1073742585 $!@expr1073742586 $assertEquals $(@expr1073742587 "cppcheck-2.8/test/testfunctions.cpp" $, 532 $, "[test.cpp:7]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
533:
534: $check_ $(@expr1073742590 "cppcheck-2.8/test/testfunctions.cpp" $, 534 $, "int f() { char x = '\\0'; return strcmp(\"Hello world\", &x); }" $) ;
535: $if $(@expr1073742591 $!@expr1073742592 $assertEquals $(@expr1073742593 "cppcheck-2.8/test/testfunctions.cpp" $, 535 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
536:
537: $check_ $(@expr1073742596 "cppcheck-2.8/test/testfunctions.cpp" $, 537 $, "int f() { char x = 'x'; return strcmp(\"Hello world\", &x); }" $) ;
538: $if $(@expr1073742597 $!@expr1073742598 $assertEquals $(@expr1073742599 "cppcheck-2.8/test/testfunctions.cpp" $, 538 $, "[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
539:
540: $check_ $(@expr1073742602 "cppcheck-2.8/test/testfunctions.cpp" $, 540 $, "size_t f(char x) { char * y = &x; return strlen(y); }" $) ;
541: $todoAssertEquals $(@expr1073742603 "cppcheck-2.8/test/testfunctions.cpp" $, 541 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, "" $, errout@var100 .@expr740 str (@expr741 ) $) ;
542:
543: $check_ $(@expr1073742606 "cppcheck-2.8/test/testfunctions.cpp" $, 543 $, "size_t f(char x) { char * y = &x; char *z = y; return strlen(z); }" $) ;
544: $todoAssertEquals $(@expr1073742607 "cppcheck-2.8/test/testfunctions.cpp" $, 544 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, "" $, errout@var100 .@expr740 str (@expr741 ) $) ;
545:
546: $check_ $(@expr1073742610 "cppcheck-2.8/test/testfunctions.cpp" $, 546 $, "size_t f() { char x = 'x'; char * y = &x; char *z = y; return strlen(z); }" $) ;
547: $todoAssertEquals $(@expr1073742611 "cppcheck-2.8/test/testfunctions.cpp" $, 547 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, "" $, errout@var100 .@expr740 str (@expr741 ) $) ;
548:
549: $check_ $(@expr1073742614 "cppcheck-2.8/test/testfunctions.cpp" $, 549 $, "size_t f() { char x = '\\0'; char * y = &x; char *z = y; return strlen(z); }" $) ;
550: $if $(@expr1073742615 $!@expr1073742616 $assertEquals $(@expr1073742617 "cppcheck-2.8/test/testfunctions.cpp" $, 550 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
551:
552: $check_ $(@expr1073742620 "cppcheck-2.8/test/testfunctions.cpp" $, 552 $, "size_t f() { char x[] = \"Hello world\"; return strlen(x); }" $) ;
553: $if $(@expr1073742621 $!@expr1073742622 $assertEquals $(@expr1073742623 "cppcheck-2.8/test/testfunctions.cpp" $, 553 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
554:
555: $check_ $(@expr1073742626 "cppcheck-2.8/test/testfunctions.cpp" $, 555 $, "size_t f(char x[]) { return strlen(x); }" $) ;
556: $if $(@expr1073742627 $!@expr1073742628 $assertEquals $(@expr1073742629 "cppcheck-2.8/test/testfunctions.cpp" $, 556 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
557:
558: $check_ $(@expr1073742632 "cppcheck-2.8/test/testfunctions.cpp" $, 558 $, "int f(char x, char y) { return strcmp(&x, &y); }" $) ;
559: $if $(@expr1073742633 $!@expr1073742634 $assertEquals $(@expr1073742635 "cppcheck-2.8/test/testfunctions.cpp" $, 559 $, "[test.cpp:1]: (error) Invalid strcmp() argument nr 1. A nul-terminated string is required.\n[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return
560: ; }
561:
562: $check_ $(@expr1073742638 "cppcheck-2.8/test/testfunctions.cpp" $, 562 $, "size_t f() { char x[] = \"Hello world\"; return strlen(&x[0]); }" $) ;
563: $if $(@expr1073742639 $!@expr1073742640 $assertEquals $(@expr1073742641 "cppcheck-2.8/test/testfunctions.cpp" $, 563 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
564:
565: $check_ $(@expr1073742644 "cppcheck-2.8/test/testfunctions.cpp" $, 565 $, "size_t f() { char* x = \"Hello world\"; return strlen(&x[0]); }" $) ;
566: $if $(@expr1073742645 $!@expr1073742646 $assertEquals $(@expr1073742647 "cppcheck-2.8/test/testfunctions.cpp" $, 566 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
567:
568: $check_ $(@expr1073742650 "cppcheck-2.8/test/testfunctions.cpp" $, 568 $, "struct S {\n  char x;\n};\nsize_t f() {\n  S s1 = {0};\n  S s2;\n;  s2.x = 'x';\n  size_t l1 = strlen(&s1.x);\n  size_t l2 = strlen(&s2.x);\n  return l1 + l2;\n}" $)
569:
|
577:
578: ;
579: $todoAssertEquals $(@expr1073742651 "cppcheck-2.8/test/testfunctions.cpp" $, 579 $, "[test.cpp:9]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, "" $, errout@var100 .@expr740 str (@expr741 ) $) ;
580:
581: $check_ $(@expr1073742654 "cppcheck-2.8/test/testfunctions.cpp" $, 581 $, "const char x = 'x'; size_t f() { return strlen(&x); }" $) ;
582: $todoAssertEquals $(@expr1073742655 "cppcheck-2.8/test/testfunctions.cpp" $, 582 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, "" $, errout@var100 .@expr740 str (@expr741 ) $) ;
583:
584: $check_ $(@expr1073742658 "cppcheck-2.8/test/testfunctions.cpp" $, 584 $, "const char x = 'x'; size_t f() { char y = x; return strlen(&y); }" $) ;
585: $if $(@expr1073742659 $!@expr1073742660 $assertEquals $(@expr1073742661 "cppcheck-2.8/test/testfunctions.cpp" $, 585 $, "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
586:
587: $check_ $(@expr1073742664 "cppcheck-2.8/test/testfunctions.cpp" $, 587 $, "const char x = '\\0'; size_t f() { return strlen(&x); }" $) ;
588: $if $(@expr1073742665 $!@expr1073742666 $assertEquals $(@expr1073742667 "cppcheck-2.8/test/testfunctions.cpp" $, 588 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
589:
590: $check_ $(@expr1073742670 "cppcheck-2.8/test/testfunctions.cpp" $, 590 $, "const char x = '\\0'; size_t f() { char y = x; return strlen(&y); }" $) ;
591: $if $(@expr1073742671 $!@expr1073742672 $assertEquals $(@expr1073742673 "cppcheck-2.8/test/testfunctions.cpp" $, 591 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
592:
593: $check_ $(@expr1073742676 "cppcheck-2.8/test/testfunctions.cpp" $, 593 $, "size_t f() {\n  char * a = \"Hello world\";\n  char ** b = &a;\n  return strlen(&b[0][0]);\n}" $)
594:
595:
596:
597: ;
598: $if $(@expr1073742677 $!@expr1073742678 $assertEquals $(@expr1073742679 "cppcheck-2.8/test/testfunctions.cpp" $, 598 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
599:
600: $check_ $(@expr1073742682 "cppcheck-2.8/test/testfunctions.cpp" $, 600 $, "size_t f() {\n  char ca[] = \"asdf\";\n  return strlen((char*) &ca);\n}" $)
601:
602:
603: ;
604: $if $(@expr1073742683 $!@expr1073742684 $assertEquals $(@expr1073742685 "cppcheck-2.8/test/testfunctions.cpp" $, 604 $, "" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
605:
606:
607: $check_ $(@expr1073742688 "cppcheck-2.8/test/testfunctions.cpp" $, 607 $, "int main(void)\n{\n  char str[80] = \"hello worl\";\n  char d = 'd';\n  strcat(str, &d);\n  puts(str);\n  return 0;\n}" $)
608:
|
613:
614: ;
615: $if $(@expr1073742689 $!@expr1073742690 $assertEquals $(@expr1073742691 "cppcheck-2.8/test/testfunctions.cpp" $, 615 $, "[test.cpp:5]: (error) Invalid strcat() argument nr 2. A nul-terminated string is required.\n" $, errout@var100 .@expr740 str (@expr741 ) $) $) { $return ; }
616: }
617:
618: void mathfunctionCall_sqrt ( ) {
619:
620: $check_ $(@expr1073742694 "cppcheck-2.8/test/testfunctions.cpp" $, 620 $, "void foo()\n{\n    std::cout <<  sqrt(-1) << std::endl;\n    std::cout <<  sqrtf(-1) << std::endl;\n    std::cout <<  sqrtl(-1) << std::endl;\n}" $)
621:
|
624:
625: ;
626: $if $(@expr1073742695 $!@expr1073742696 $assertEquals $(@expr1073742697 "cppcheck-2.8/test/testfunctions.cpp" $, 626 $, "[test.cpp:3]: (error) Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:4]: (error) Invalid sqrtf() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:5]: (error) Invalid sqrtl() argument nr 1. The value is -1 but the valid values are '0.0:'.\n" $, errout@var100 .@expr874 str (@expr875 ) $) $) { $return
627:
628: ; }
629:
630:
631: $check_ $(@expr1073742700 "cppcheck-2.8/test/testfunctions.cpp" $, 631 $, "void foo()\n{\n    std::cout <<  sqrt(-0.) << std::endl;\n    std::cout <<  sqrtf(-0.) << std::endl;\n    std::cout <<  sqrtl(-0.) << std::endl;\n}" $)
632:
|
635:
636: ;
637: $if $(@expr1073742701 $!@expr1073742702 $assertEquals $(@expr1073742703 "cppcheck-2.8/test/testfunctions.cpp" $, 637 $, "" $, errout@var100 .@expr874 str (@expr875 ) $) $) { $return ; }
638:
639: $check_ $(@expr1073742706 "cppcheck-2.8/test/testfunctions.cpp" $, 639 $, "void foo()\n{\n    std::cout <<  sqrt(1) << std::endl;\n    std::cout <<  sqrtf(1) << std::endl;\n    std::cout <<  sqrtl(1) << std::endl;\n}" $)
640:
|
643:
644: ;
645: $if $(@expr1073742707 $!@expr1073742708 $assertEquals $(@expr1073742709 "cppcheck-2.8/test/testfunctions.cpp" $, 645 $, "" $, errout@var100 .@expr874 str (@expr875 ) $) $) { $return ; }
646: }
647:
648: void mathfunctionCall_log ( ) {
649:
650: $check_ $(@expr1073742712 "cppcheck-2.8/test/testfunctions.cpp" $, 650 $, "void foo()\n{\n    std::cout <<  log(-2) << std::endl;\n    std::cout <<  logf(-2) << std::endl;\n    std::cout <<  logl(-2) << std::endl;\n    std::cout <<  log10(-2) << std::endl;\n    std::cout <<  log10f(-2) << std::endl;\n    std::cout <<  log10l(-2) << std::endl;\n    std::cout <<  log2(-2) << std::endl;\n    std::cout <<  log2f(-2) << std::endl;\n    std::cout <<  log2l(-2) << std::endl;\n    std::cout <<  log1p(-3) << std::endl;\n    std::cout <<  log1pf(-3) << std::endl;\n    std::cout <<  log1pl(-3) << std::endl;\n}" $)
651:
|
663:
664: ;
665: $if $(@expr1073742713 $!@expr1073742714 $assertEquals $(@expr1073742715 "cppcheck-2.8/test/testfunctions.cpp" $, 665 $, "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -2 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -2 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -2 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -2 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -2 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -2 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -2 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -2 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -2 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -3 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -3 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -3 to log1pl() leads to implementation-defined result.\n" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return
666:
|
684:
685: ; }
686:
687: $check_ $(@expr1073742718 "cppcheck-2.8/test/testfunctions.cpp" $, 687 $, "void foo()\n{\n    std::cout <<  log(-1) << std::endl;\n    std::cout <<  logf(-1) << std::endl;\n    std::cout <<  logl(-1) << std::endl;\n    std::cout <<  log10(-1) << std::endl;\n    std::cout <<  log10f(-1) << std::endl;\n    std::cout <<  log10l(-1) << std::endl;\n    std::cout <<  log2(-1) << std::endl;\n    std::cout <<  log2f(-1) << std::endl;\n    std::cout <<  log2l(-1) << std::endl;\n    std::cout <<  log1p(-2) << std::endl;\n    std::cout <<  log1pf(-2) << std::endl;\n    std::cout <<  log1pl(-2) << std::endl;\n}" $)
688:
|
700:
701: ;
702: $if $(@expr1073742719 $!@expr1073742720 $assertEquals $(@expr1073742721 "cppcheck-2.8/test/testfunctions.cpp" $, 702 $, "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2 to log1pl() leads to implementation-defined result.\n" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return
703:
|
721:
722: ; }
723:
724: $check_ $(@expr1073742724 "cppcheck-2.8/test/testfunctions.cpp" $, 724 $, "void foo()\n{\n    std::cout <<  log(-1.0) << std::endl;\n    std::cout <<  logf(-1.0) << std::endl;\n    std::cout <<  logl(-1.0) << std::endl;\n    std::cout <<  log10(-1.0) << std::endl;\n    std::cout <<  log10f(-1.0) << std::endl;\n    std::cout <<  log10l(-1.0) << std::endl;\n    std::cout <<  log2(-1.0) << std::endl;\n    std::cout <<  log2f(-1.0) << std::endl;\n    std::cout <<  log2l(-1.0) << std::endl;\n    std::cout <<  log1p(-2.0) << std::endl;\n    std::cout <<  log1pf(-2.0) << std::endl;\n    std::cout <<  log1pl(-2.0) << std::endl;\n}" $)
725:
|
737:
738: ;
739: $if $(@expr1073742725 $!@expr1073742726 $assertEquals $(@expr1073742727 "cppcheck-2.8/test/testfunctions.cpp" $, 739 $, "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1.0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1.0 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1.0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1.0 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1.0 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1.0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2.0 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2.0 to log1pl() leads to implementation-defined result.\n" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return
740:
|
758:
759: ; }
760:
761: $check_ $(@expr1073742730 "cppcheck-2.8/test/testfunctions.cpp" $, 761 $, "void foo()\n{\n    std::cout <<  log(-0.1) << std::endl;\n    std::cout <<  logf(-0.1) << std::endl;\n    std::cout <<  logl(-0.1) << std::endl;\n    std::cout <<  log10(-0.1) << std::endl;\n    std::cout <<  log10f(-0.1) << std::endl;\n    std::cout <<  log10l(-0.1) << std::endl;\n    std::cout <<  log2(-0.1) << std::endl;\n    std::cout <<  log2f(-0.1) << std::endl;\n    std::cout <<  log2l(-0.1) << std::endl;\n    std::cout <<  log1p(-1.1) << std::endl;\n    std::cout <<  log1pf(-1.1) << std::endl;\n    std::cout <<  log1pl(-1.1) << std::endl;\n}" $)
762:
|
774:
775: ;
776: $if $(@expr1073742731 $!@expr1073742732 $assertEquals $(@expr1073742733 "cppcheck-2.8/test/testfunctions.cpp" $, 776 $, "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -0.1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -0.1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -0.1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -0.1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -0.1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -0.1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -0.1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -0.1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -0.1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1.1 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.1 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1.1 to log1pl() leads to implementation-defined result.\n" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return
777:
|
795:
796: ; }
797:
798: $check_ $(@expr1073742736 "cppcheck-2.8/test/testfunctions.cpp" $, 798 $, "void foo()\n{\n    std::cout <<  log(0) << std::endl;\n    std::cout <<  logf(0.) << std::endl;\n    std::cout <<  logl(0.0) << std::endl;\n    std::cout <<  log10(0.0) << std::endl;\n    std::cout <<  log10f(0) << std::endl;\n    std::cout <<  log10l(0.) << std::endl;\n    std::cout <<  log2(0.) << std::endl;\n    std::cout <<  log2f(0.0) << std::endl;\n    std::cout <<  log2l(0) << std::endl;\n    std::cout <<  log1p(-1.) << std::endl;\n    std::cout <<  log1pf(-1.0) << std::endl;\n    std::cout <<  log1pl(-1) << std::endl;\n}" $)
799:
|
811:
812: ;
813: $if $(@expr1073742737 $!@expr1073742738 $assertEquals $(@expr1073742739 "cppcheck-2.8/test/testfunctions.cpp" $, 813 $, "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value 0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value 0. to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value 0.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value 0.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value 0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value 0. to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value 0. to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value 0.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value 0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1. to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1 to log1pl() leads to implementation-defined result.\n" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return
814:
|
832:
833: ; }
834:
835: $check_ $(@expr1073742742 "cppcheck-2.8/test/testfunctions.cpp" $, 835 $, "void foo()\n{\n    std::cout <<  log(1E-3)         << std::endl;\n    std::cout <<  logf(1E-3)        << std::endl;\n    std::cout <<  logl(1E-3)        << std::endl;\n    std::cout <<  log10(1E-3)       << std::endl;\n    std::cout <<  log10f(1E-3)      << std::endl;\n    std::cout <<  log10l(1E-3)      << std::endl;\n    std::cout <<  log2(1E-3)        << std::endl;\n    std::cout <<  log2f(1E-3)       << std::endl;\n    std::cout <<  log2l(1E-3)       << std::endl;\n    std::cout <<  log1p(-1+1E-3)    << std::endl;\n    std::cout <<  log1pf(-1+1E-3)   << std::endl;\n    std::cout <<  log1pl(-1+1E-3)   << std::endl;\n    std::cout <<  log(1.0E-3)       << std::endl;\n    std::cout <<  logf(1.0E-3)      << std::endl;\n    std::cout <<  logl(1.0E-3)      << std::endl;\n    std::cout <<  log10(1.0E-3)     << std::endl;\n    std::cout <<  log10f(1.0E-3)    << std::endl;\n    std::cout <<  log10l(1.0E-3)    << std::endl;\n    std::cout <<  log2(1.0E-3)      << std::endl;\n    std::cout <<  log2f(1.0E-3)     << std::endl;\n    std::cout <<  log2l(1.0E-3)     << std::endl;\n    std::cout <<  log1p(-1+1.0E-3)  << std::endl;\n    std::cout <<  log1pf(-1+1.0E-3) << std::endl;\n    std::cout <<  log1pl(-1+1.0E-3) << std::endl;\n    std::cout <<  log(1.0E+3)       << std::endl;\n    std::cout <<  logf(1.0E+3)      << std::endl;\n    std::cout <<  logl(1.0E+3)      << std::endl;\n    std::cout <<  log10(1.0E+3)     << std::endl;\n    std::cout <<  log10f(1.0E+3)    << std::endl;\n    std::cout <<  log10l(1.0E+3)    << std::endl;\n    std::cout <<  log2(1.0E+3)      << std::endl;\n    std::cout <<  log2f(1.0E+3)     << std::endl;\n    std::cout <<  log2l(1.0E+3)     << std::endl;\n    std::cout <<  log1p(1.0E+3)     << std::endl;\n    std::cout <<  log1pf(1.0E+3)    << std::endl;\n    std::cout <<  log1pl(1.0E+3)    << std::endl;\n    std::cout <<  log(2.0)          << std::endl;\n    std::cout <<  logf(2.0)         << std::endl;\n    std::cout <<  logf(2.0f)        << std::endl;\n    std::cout <<  log10(2.0)        << std::endl;\n    std::cout <<  log10f(2.0)       << std::endl;\n    std::cout <<  log10f(2.0f)      << std::endl;\n    std::cout <<  log2(2.0)         << std::endl;\n    std::cout <<  log2f(2.0)        << std::endl;\n    std::cout <<  log2f(2.0f)       << std::endl;\n    std::cout <<  log1p(2.0)        << std::endl;\n    std::cout <<  log1pf(2.0)       << std::endl;\n    std::cout <<  log1pf(2.0f)      << std::endl;\n}" $)
836:
|
884:
885: ;
886: $if $(@expr1073742743 $!@expr1073742744 $assertEquals $(@expr1073742745 "cppcheck-2.8/test/testfunctions.cpp" $, 886 $, "" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return ; }
887:
888: $check_ $(@expr1073742748 "cppcheck-2.8/test/testfunctions.cpp" $, 888 $, "void foo()\n{\n    std::string *log(0);\n}" $)
889:
890:
891: ;
892: $if $(@expr1073742749 $!@expr1073742750 $assertEquals $(@expr1073742751 "cppcheck-2.8/test/testfunctions.cpp" $, 892 $, "" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return ; }
893:
894:
895: $check_ $(@expr1073742754 "cppcheck-2.8/test/testfunctions.cpp" $, 895 $, "Fred::Fred() : log(0) { }" $) ;
896: $if $(@expr1073742755 $!@expr1073742756 $assertEquals $(@expr1073742757 "cppcheck-2.8/test/testfunctions.cpp" $, 896 $, "" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return ; }
897:
898:
899: $check_ $(@expr1073742760 "cppcheck-2.8/test/testfunctions.cpp" $, 899 $, "void f() { foo.log(0); }" $) ;
900: $if $(@expr1073742761 $!@expr1073742762 $assertEquals $(@expr1073742763 "cppcheck-2.8/test/testfunctions.cpp" $, 900 $, "" $, errout@var100 .@expr892 str (@expr893 ) $) $) { $return ; }
901: }
902:
903: void mathfunctionCall_acos ( ) {
904:
905: $check_ $(@expr1073742766 "cppcheck-2.8/test/testfunctions.cpp" $, 905 $, "void foo()\n{\n return acos(-1)     \n    + acos(0.1)      \n    + acos(0.0001)   \n    + acos(0.01)     \n    + acos(1.0E-1)   \n    + acos(-1.0E-1)  \n    + acos(+1.0E-1)  \n    + acos(0.1E-1)   \n    + acos(+0.1E-1)  \n    + acos(-0.1E-1)  \n    + acosf(-1)      \n    + acosf(0.1)     \n    + acosf(0.0001)  \n    + acosf(0.01)    \n    + acosf(1.0E-1)  \n    + acosf(-1.0E-1) \n    + acosf(+1.0E-1) \n    + acosf(0.1E-1)  \n    + acosf(+0.1E-1) \n    + acosf(-0.1E-1) \n    + acosl(-1)      \n    + acosl(0.1)     \n    + acosl(0.0001)  \n    + acosl(0.01)    \n    + acosl(1.0E-1)  \n    + acosl(-1.0E-1) \n    + acosl(+1.0E-1) \n    + acosl(0.1E-1)  \n    + acosl(+0.1E-1) \n    + acosl(-0.1E-1);\n}" $)
906:
|
936:
937: ;
938: $if $(@expr1073742767 $!@expr1073742768 $assertEquals $(@expr1073742769 "cppcheck-2.8/test/testfunctions.cpp" $, 938 $, "" $, errout@var100 .@expr946 str (@expr947 ) $) $) { $return ; }
939:
940: $check_ $(@expr1073742772 "cppcheck-2.8/test/testfunctions.cpp" $, 940 $, "void foo()\n{\n    std::cout <<  acos(1.1) << std::endl;\n    std::cout <<  acosf(1.1) << std::endl;\n    std::cout <<  acosl(1.1) << std::endl;\n}" $)
941:
|
944:
945: ;
946: $if $(@expr1073742773 $!@expr1073742774 $assertEquals $(@expr1073742775 "cppcheck-2.8/test/testfunctions.cpp" $, 946 $, "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n" $, errout@var100 .@expr946 str (@expr947 ) $) $) { $return
947:
948: ; }
949:
950: $check_ $(@expr1073742778 "cppcheck-2.8/test/testfunctions.cpp" $, 950 $, "void foo()\n{\n    std::cout <<  acos(-1.1) << std::endl;\n    std::cout <<  acosf(-1.1) << std::endl;\n    std::cout <<  acosl(-1.1) << std::endl;\n}" $)
951:
|
954:
955: ;
956: $if $(@expr1073742779 $!@expr1073742780 $assertEquals $(@expr1073742781 "cppcheck-2.8/test/testfunctions.cpp" $, 956 $, "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n" $, errout@var100 .@expr946 str (@expr947 ) $) $) { $return
957:
958: ; }
959: }
960:
961: void mathfunctionCall_asin ( ) {
962:
963: $check_ $(@expr1073742784 "cppcheck-2.8/test/testfunctions.cpp" $, 963 $, "void foo()\n{\n return asin(1)      \n    + asin(-1)       \n    + asin(0.1)      \n    + asin(0.0001)   \n    + asin(0.01)     \n    + asin(1.0E-1)   \n    + asin(-1.0E-1)  \n    + asin(+1.0E-1)  \n    + asin(0.1E-1)   \n    + asin(+0.1E-1)  \n    + asin(-0.1E-1)  \n    + asinf(1)       \n    + asinf(-1)      \n    + asinf(0.1)     \n    + asinf(0.0001)  \n    + asinf(0.01)    \n    + asinf(1.0E-1)  \n    + asinf(-1.0E-1) \n    + asinf(+1.0E-1) \n    + asinf(0.1E-1)  \n    + asinf(+0.1E-1) \n    + asinf(-0.1E-1) \n    + asinl(1)       \n    + asinl(-1)      \n    + asinl(0.1)     \n    + asinl(0.0001)  \n    + asinl(0.01)    \n    + asinl(1.0E-1)  \n    + asinl(-1.0E-1) \n    + asinl(+1.0E-1) \n    + asinl(0.1E-1)  \n    + asinl(+0.1E-1) \n    + asinl(-0.1E-1);\n}" $)
964:
|
997:
998: ;
999: $if $(@expr1073742785 $!@expr1073742786 $assertEquals $(@expr1073742787 "cppcheck-2.8/test/testfunctions.cpp" $, 999 $, "" $, errout@var100 .@expr964 str (@expr965 ) $) $) { $return ; }
1000:
1001: $check_ $(@expr1073742790 "cppcheck-2.8/test/testfunctions.cpp" $, 1001 $, "void foo()\n{\n    std::cout <<  asin(1.1) << std::endl;\n    std::cout <<  asinf(1.1) << std::endl;\n    std::cout <<  asinl(1.1) << std::endl;\n}" $)
1002:
|
1005:
1006: ;
1007: $if $(@expr1073742791 $!@expr1073742792 $assertEquals $(@expr1073742793 "cppcheck-2.8/test/testfunctions.cpp" $, 1007 $, "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n" $, errout@var100 .@expr964 str (@expr965 ) $) $) { $return
1008:
1009: ; }
1010:
1011: $check_ $(@expr1073742796 "cppcheck-2.8/test/testfunctions.cpp" $, 1011 $, "void foo()\n{\n    std::cout <<  asin(-1.1) << std::endl;\n    std::cout <<  asinf(-1.1) << std::endl;\n    std::cout <<  asinl(-1.1) << std::endl;\n}" $)
1012:
|
1015:
1016: ;
1017: $if $(@expr1073742797 $!@expr1073742798 $assertEquals $(@expr1073742799 "cppcheck-2.8/test/testfunctions.cpp" $, 1017 $, "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n" $, errout@var100 .@expr964 str (@expr965 ) $) $) { $return
1018:
1019: ; }
1020: }
1021:
1022: void mathfunctionCall_pow ( ) {
1023:
1024: $check_ $(@expr1073742802 "cppcheck-2.8/test/testfunctions.cpp" $, 1024 $, "void foo()\n{\n    std::cout <<  pow(0,-10) << std::endl;\n    std::cout <<  powf(0,-10) << std::endl;\n    std::cout <<  powl(0,-10) << std::endl;\n}" $)
1025:
|
1028:
1029: ;
1030: $if $(@expr1073742803 $!@expr1073742804 $assertEquals $(@expr1073742805 "cppcheck-2.8/test/testfunctions.cpp" $, 1030 $, "[test.cpp:3]: (warning) Passing values 0 and -10 to pow() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and -10 to powf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and -10 to powl() leads to implementation-defined result.\n" $, errout@var100 .@expr982 str (@expr983 ) $) $) { $return
1031:
1032: ; }
1033:
1034: $check_ $(@expr1073742808 "cppcheck-2.8/test/testfunctions.cpp" $, 1034 $, "void foo()\n{\n    std::cout <<  pow(0,10) << std::endl;\n    std::cout <<  powf(0,10) << std::endl;\n    std::cout <<  powl(0,10) << std::endl;\n}" $)
1035:
|
1038:
1039: ;
1040: $if $(@expr1073742809 $!@expr1073742810 $assertEquals $(@expr1073742811 "cppcheck-2.8/test/testfunctions.cpp" $, 1040 $, "" $, errout@var100 .@expr982 str (@expr983 ) $) $) { $return ; }
1041: }
1042:
1043: void mathfunctionCall_atan2 ( ) {
1044:
1045: $check_ $(@expr1073742814 "cppcheck-2.8/test/testfunctions.cpp" $, 1045 $, "void foo()\n{\n    std::cout <<  atan2(1,1)         ;\n    std::cout <<  atan2(-1,-1)       ;\n    std::cout <<  atan2(0.1,1)       ;\n    std::cout <<  atan2(0.0001,100)  ;\n    std::cout <<  atan2(0.0,1e-1)    ;\n    std::cout <<  atan2(1.0E-1,-3)   ;\n    std::cout <<  atan2(-1.0E-1,+2)  ;\n    std::cout <<  atan2(+1.0E-1,0)   ;\n    std::cout <<  atan2(0.1E-1,3)    ;\n    std::cout <<  atan2(+0.1E-1,1)   ;\n    std::cout <<  atan2(-0.1E-1,8)   ;\n    std::cout <<  atan2f(1,1)        ;\n    std::cout <<  atan2f(-1,-1)      ;\n    std::cout <<  atan2f(0.1,1)      ;\n    std::cout <<  atan2f(0.0001,100) ;\n    std::cout <<  atan2f(0.0,1e-1)   ;\n    std::cout <<  atan2f(1.0E-1,-3)  ;\n    std::cout <<  atan2f(-1.0E-1,+2) ;\n    std::cout <<  atan2f(+1.0E-1,0)  ;\n    std::cout <<  atan2f(0.1E-1,3)   ;\n    std::cout <<  atan2f(+0.1E-1,1)  ;\n    std::cout <<  atan2f(-0.1E-1,8)  ;\n    std::cout <<  atan2l(1,1)        ;\n    std::cout <<  atan2l(-1,-1)      ;\n    std::cout <<  atan2l(0.1,1)      ;\n    std::cout <<  atan2l(0.0001,100) ;\n    std::cout <<  atan2l(0.0,1e-1)   ;\n    std::cout <<  atan2l(1.0E-1,-3)  ;\n    std::cout <<  atan2l(-1.0E-1,+2) ;\n    std::cout <<  atan2l(+1.0E-1,0)  ;\n    std::cout <<  atan2l(0.1E-1,3)   ;\n    std::cout <<  atan2l(+0.1E-1,1)  ;\n    std::cout <<  atan2l(-0.1E-1,8)  ;\n}" $)
1046:
|
1079:
1080: ;
1081: $if $(@expr1073742815 $!@expr1073742816 $assertEquals $(@expr1073742817 "cppcheck-2.8/test/testfunctions.cpp" $, 1081 $, "" $, errout@var100 .@expr994 str (@expr995 ) $) $) { $return ; }
1082:
1083: $check_ $(@expr1073742820 "cppcheck-2.8/test/testfunctions.cpp" $, 1083 $, "void foo()\n{\n    std::cout <<  atan2(0,0) << std::endl;\n    std::cout <<  atan2f(0,0) << std::endl;\n    std::cout <<  atan2l(0,0) << std::endl;\n}" $)
1084:
|
1087:
1088: ;
1089: $if $(@expr1073742821 $!@expr1073742822 $assertEquals $(@expr1073742823 "cppcheck-2.8/test/testfunctions.cpp" $, 1089 $, "[test.cpp:3]: (warning) Passing values 0 and 0 to atan2() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and 0 to atan2f() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and 0 to atan2l() leads to implementation-defined result.\n" $, errout@var100 .@expr994 str (@expr995 ) $) $) { $return
1090:
1091: ; }
1092: }
1093:
1094: void mathfunctionCall_fmod ( ) {
1095:
1096: $check_ $(@expr1073742826 "cppcheck-2.8/test/testfunctions.cpp" $, 1096 $, "void foo()\n{\n    std::cout <<  fmod(1.0,0) << std::endl;\n    std::cout <<  fmodf(1.0,0) << std::endl;\n    std::cout <<  fmodl(1.0,0) << std::endl;\n}" $)
1097:
|
1100:
1101: ;
1102: $if $(@expr1073742827 $!@expr1073742828 $assertEquals $(@expr1073742829 "cppcheck-2.8/test/testfunctions.cpp" $, 1102 $, "[test.cpp:3]: (error) Invalid fmod() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:4]: (error) Invalid fmodf() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:5]: (error) Invalid fmodl() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:3]: (warning) Passing values 1.0 and 0 to fmod() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 1.0 and 0 to fmodf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 1.0 and 0 to fmodl() leads to implementation-defined result.\n" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return
1103:
|
1106:
1107: ; }
1108:
1109: $check_ $(@expr1073742832 "cppcheck-2.8/test/testfunctions.cpp" $, 1109 $, "void foo()\n{\n    std::cout <<  fmod(1.0,1) << std::endl;\n    std::cout <<  fmodf(1.0,1) << std::endl;\n    std::cout <<  fmodl(1.0,1) << std::endl;\n}" $)
1110:
|
1113:
1114: ;
1115: $if $(@expr1073742833 $!@expr1073742834 $assertEquals $(@expr1073742835 "cppcheck-2.8/test/testfunctions.cpp" $, 1115 $, "" $, errout@var100 .@expr1006 str (@expr1007 ) $) $) { $return ; }
1116: }
1117:
1118: void mathfunctionCall_precision ( ) {
1119: $check_ $(@expr1073742838 "cppcheck-2.8/test/testfunctions.cpp" $, 1119 $, "void foo() {\n    print(exp(x) - 1);\n    print(log(1 + x));\n    print(1 - erf(x));\n}" $)
1120:
1121:
1122:
1123: ;
1124: $if $(@expr1073742839 $!@expr1073742840 $assertEquals $(@expr1073742841 "cppcheck-2.8/test/testfunctions.cpp" $, 1124 $, "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" $, errout@var100 .@expr1018 str (@expr1019 ) $) $) { $return
1125:
1126: ; }
1127:
1128: $check_ $(@expr1073742844 "cppcheck-2.8/test/testfunctions.cpp" $, 1128 $, "void foo() {\n    print(exp(x) - 1.0);\n    print(log(1.0 + x));\n    print(1.0 - erf(x));\n}" $)
1129:
1130:
1131:
1132: ;
1133: $if $(@expr1073742845 $!@expr1073742846 $assertEquals $(@expr1073742847 "cppcheck-2.8/test/testfunctions.cpp" $, 1133 $, "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" $, errout@var100 .@expr1018 str (@expr1019 ) $) $) { $return
1134:
1135: ; }
1136:
1137: $check_ $(@expr1073742850 "cppcheck-2.8/test/testfunctions.cpp" $, 1137 $, "void foo() {\n    print(exp(3 + x*f(a)) - 1);\n    print(log(x*4 + 1));\n    print(1 - erf(34*x + f(x) - c));\n}" $)
1138:
1139:
1140:
1141: ;
1142: $if $(@expr1073742851 $!@expr1073742852 $assertEquals $(@expr1073742853 "cppcheck-2.8/test/testfunctions.cpp" $, 1142 $, "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" $, errout@var100 .@expr1018 str (@expr1019 ) $) $) { $return
1143:
1144: ; }
1145:
1146: $check_ $(@expr1073742856 "cppcheck-2.8/test/testfunctions.cpp" $, 1146 $, "void foo() {\n    print(2*exp(x) - 1);\n    print(1 - erf(x)/2.0);\n}" $)
1147:
1148:
1149: ;
1150: $if $(@expr1073742857 $!@expr1073742858 $assertEquals $(@expr1073742859 "cppcheck-2.8/test/testfunctions.cpp" $, 1150 $, "" $, errout@var100 .@expr1018 str (@expr1019 ) $) $) { $return ; }
1151: }
1152:
1153: void checkIgnoredReturnValue ( ) {
1154: Settings settings2@var118 ;
1155: settings2@var118 .@expr1073742863 severity@var119 .@expr1073742864 enable (@expr1073742865 Severity ::@expr1073742866 warning@expr1073742862 ) ;
1156: const char xmldata@var120 [@expr1073742867 158 ] =@expr1073742868 "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
1157:
|
1162:
1163: ;
1164: tinyxml2 ::@expr1073742869 XMLDocument doc@var121 ;
1165: doc@var121 .@expr1073742870 Parse (@expr1073742871 xmldata@var120 , sizeof (@expr1073742872 xmldata@var120 ) ) ;
1166: settings2@var118 .@expr1073742873 library@var122 .@expr1073742874 load (@expr1073742875 doc@var121 ) ;
1167:
1168: $check_ $(@expr1073742876 "cppcheck-2.8/test/testfunctions.cpp" $, 1168 $, "void foo() {\n  mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1169:
1170: ;
1171: $if $(@expr1073742878 $!@expr1073742879 $assertEquals $(@expr1073742880 "cppcheck-2.8/test/testfunctions.cpp" $, 1171 $, "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1172:
1173: $check_ $(@expr1073742883 "cppcheck-2.8/test/testfunctions.cpp" $, 1173 $, "void foo() {\n  foo::mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1174:
1175: ;
1176: $if $(@expr1073742885 $!@expr1073742886 $assertEquals $(@expr1073742887 "cppcheck-2.8/test/testfunctions.cpp" $, 1176 $, "[test.cpp:2]: (warning) Return value of function foo::mystrcmp() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1177:
1178: $check_ $(@expr1073742890 "cppcheck-2.8/test/testfunctions.cpp" $, 1178 $, "void f() {\n  foo x;\n  x.mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1179:
1180:
1181: ;
1182: $if $(@expr1073742892 $!@expr1073742893 $assertEquals $(@expr1073742894 "cppcheck-2.8/test/testfunctions.cpp" $, 1182 $, "[test.cpp:3]: (warning) Return value of function x.mystrcmp() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1183:
1184: $check_ $(@expr1073742897 "cppcheck-2.8/test/testfunctions.cpp" $, 1184 $, "bool mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1185:
1186:
1187: ;
1188: $if $(@expr1073742899 $!@expr1073742900 $assertEquals $(@expr1073742901 "cppcheck-2.8/test/testfunctions.cpp" $, 1188 $, "[test.cpp:3]: (warning) Return value of function mystrcmp() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1189:
1190: $check_ $(@expr1073742904 "cppcheck-2.8/test/testfunctions.cpp" $, 1190 $, "void mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1191:
1192:
1193: ;
1194: $if $(@expr1073742906 $!@expr1073742907 $assertEquals $(@expr1073742908 "cppcheck-2.8/test/testfunctions.cpp" $, 1194 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1195:
1196: $check_ $(@expr1073742911 "cppcheck-2.8/test/testfunctions.cpp" $, 1196 $, "void foo() {\n    class mystrcmp { mystrcmp() {} };\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1197:
1198: ;
1199: $if $(@expr1073742913 $!@expr1073742914 $assertEquals $(@expr1073742915 "cppcheck-2.8/test/testfunctions.cpp" $, 1199 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1200:
1201: $check_ $(@expr1073742918 "cppcheck-2.8/test/testfunctions.cpp" $, 1201 $, "void foo() {\n    return mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1202:
1203: ;
1204: $if $(@expr1073742920 $!@expr1073742921 $assertEquals $(@expr1073742922 "cppcheck-2.8/test/testfunctions.cpp" $, 1204 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1205:
1206: $check_ $(@expr1073742925 "cppcheck-2.8/test/testfunctions.cpp" $, 1206 $, "void foo() {\n    return foo::mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1207:
1208: ;
1209: $if $(@expr1073742927 $!@expr1073742928 $assertEquals $(@expr1073742929 "cppcheck-2.8/test/testfunctions.cpp" $, 1209 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1210:
1211: $check_ $(@expr1073742932 "cppcheck-2.8/test/testfunctions.cpp" $, 1211 $, "void foo() {\n    if(mystrcmp(a, b));\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1212:
1213: ;
1214: $if $(@expr1073742934 $!@expr1073742935 $assertEquals $(@expr1073742936 "cppcheck-2.8/test/testfunctions.cpp" $, 1214 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1215:
1216: $check_ $(@expr1073742939 "cppcheck-2.8/test/testfunctions.cpp" $, 1216 $, "void foo() {\n    bool b = mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1217:
1218: ;
1219: $if $(@expr1073742941 $!@expr1073742942 $assertEquals $(@expr1073742943 "cppcheck-2.8/test/testfunctions.cpp" $, 1219 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1220:
1221:
1222: $check_ $(@expr1073742946 "cppcheck-2.8/test/testfunctions.cpp" $, 1222 $, "void foo() {\n    MyStrCmp mystrcmp(x, y);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1223:
1224: ;
1225: $if $(@expr1073742948 $!@expr1073742949 $assertEquals $(@expr1073742950 "cppcheck-2.8/test/testfunctions.cpp" $, 1225 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1226:
1227:
1228: $check_ $(@expr1073742953 "cppcheck-2.8/test/testfunctions.cpp" $, 1228 $, "void foo() {\n    abc::def.mystrcmp(a,b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1229:
1230: ;
1231: $if $(@expr1073742955 $!@expr1073742956 $assertEquals $(@expr1073742957 "cppcheck-2.8/test/testfunctions.cpp" $, 1231 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1232:
1233:
1234: $check_ $(@expr1073742960 "cppcheck-2.8/test/testfunctions.cpp" $, 1234 $, "int main() {\n    auto lambda = [](double value) {\n        double rounded = floor(value + 0.5);\n        printf(\"Rounded value = %f\\n\", rounded);\n    };\n    lambda(13.3);\n    return 0;\n}" $)
1235:
|
1240:
1241: ;
1242: $if $(@expr1073742961 $!@expr1073742962 $assertEquals $(@expr1073742963 "cppcheck-2.8/test/testfunctions.cpp" $, 1242 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1243:
1244:
1245: $check_ $(@expr1073742966 "cppcheck-2.8/test/testfunctions.cpp" $, 1245 $, "void foo(size_t size) {\n   void * res{malloc(size)};\n}" $)
1246:
1247: ;
1248: $if $(@expr1073742967 $!@expr1073742968 $assertEquals $(@expr1073742969 "cppcheck-2.8/test/testfunctions.cpp" $, 1248 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1249:
1250:
1251: $check_ $(@expr1073742972 "cppcheck-2.8/test/testfunctions.cpp" $, 1251 $, "void foo() {\n   int x{mystrcmp(a,b)};\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1252:
1253: ;
1254: $if $(@expr1073742974 $!@expr1073742975 $assertEquals $(@expr1073742976 "cppcheck-2.8/test/testfunctions.cpp" $, 1254 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1255:
1256:
1257: $check_ $(@expr1073742979 "cppcheck-2.8/test/testfunctions.cpp" $, 1257 $, "void foo() {\n   int x({mystrcmp(a,b)});\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1258:
1259: ;
1260: $if $(@expr1073742981 $!@expr1073742982 $assertEquals $(@expr1073742983 "cppcheck-2.8/test/testfunctions.cpp" $, 1260 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1261:
1262: $check_ $(@expr1073742986 "cppcheck-2.8/test/testfunctions.cpp" $, 1262 $, "void foo() {\n  DEBUG(123)(mystrcmp(a,b))(fd);\n}" , "test.c" , &@expr1053 settings2@var118 $)
1263:
1264: ;
1265: $check_ $(@expr1073742988 "cppcheck-2.8/test/testfunctions.cpp" $, 1265 $, "struct teststruct {\n    int testfunc1() __attribute__ ((warn_unused_result)) { return 1; }\n    [[nodiscard]] int testfunc2() { return 1; }\n    void foo() { testfunc1(); testfunc2(); }\n};\nint main() {\n    teststruct TestStruct1;\n    TestStruct1.testfunc1();\n    TestStruct1.testfunc2();\n    return 0;\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1266:
|
1274:
1275: ;
1276: $if $(@expr1073742990 $!@expr1073742991 $assertEquals $(@expr1073742992 "cppcheck-2.8/test/testfunctions.cpp" $, 1276 $, "[test.cpp:4]: (warning) Return value of function testfunc1() is not used.\n[test.cpp:4]: (warning) Return value of function testfunc2() is not used.\n[test.cpp:8]: (warning) Return value of function TestStruct1.testfunc1() is not used.\n[test.cpp:9]: (warning) Return value of function TestStruct1.testfunc2() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return
1277:
1278:
1279: ; }
1280:
1281:
1282: $check_ $(@expr1073742995 "cppcheck-2.8/test/testfunctions.cpp" $, 1282 $, "template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}" $)
1283:
1284:
1285: ;
1286: $if $(@expr1073742996 $!@expr1073742997 $assertEquals $(@expr1073742998 "cppcheck-2.8/test/testfunctions.cpp" $, 1286 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1287:
1288: $check_ $(@expr1073743001 "cppcheck-2.8/test/testfunctions.cpp" $, 1288 $, "struct A { int x; };\ntemplate <class... Ts>\nA f(int x, Ts... xs) {\n    return {std::move(x), static_cast<int>(xs)...};\n}\nA g() { return f(1); }" $)
1289:
|
1292:
1293: ;
1294: $if $(@expr1073743002 $!@expr1073743003 $assertEquals $(@expr1073743004 "cppcheck-2.8/test/testfunctions.cpp" $, 1294 $, "" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1295:
1296:
1297: $check_ $(@expr1073743007 "cppcheck-2.8/test/testfunctions.cpp" $, 1297 $, "void foo() {\n  !mystrcmp(a, b);\n}" , "test.cpp" , &@expr1053 settings2@var118 $)
1298:
1299: ;
1300: $if $(@expr1073743009 $!@expr1073743010 $assertEquals $(@expr1073743011 "cppcheck-2.8/test/testfunctions.cpp" $, 1300 $, "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n" $, errout@var100 .@expr1057 str (@expr1058 ) $) $) { $return ; }
1301:
1302: }
1303:
1304: void checkIgnoredErrorCode ( ) {
1305: Settings settings2@var123 ;
1306: settings2@var123 .@expr1073743014 addEnabled (@expr1073743015 "style" ) ;
1307: const char xmldata@var124 [@expr1073743016 162 ] =@expr1073743017 "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
1308:
|
1313:
1314: ;
1315: tinyxml2 ::@expr1073743018 XMLDocument doc@var125 ;
1316: doc@var125 .@expr1073743019 Parse (@expr1073743020 xmldata@var124 , sizeof (@expr1073743021 xmldata@var124 ) ) ;
1317: settings2@var123 .@expr1073743022 library@var126 .@expr1073743023 load (@expr1073743024 doc@var125 ) ;
1318:
1319: $check_ $(@expr1073743025 "cppcheck-2.8/test/testfunctions.cpp" $, 1319 $, "void foo() {\n  mystrcmp(a, b);\n}" , "test.cpp" , &@expr1073743026 settings2@var123 $)
1320:
1321: ;
1322: $if $(@expr1073743027 $!@expr1073743028 $assertEquals $(@expr1073743029 "cppcheck-2.8/test/testfunctions.cpp" $, 1322 $, "[test.cpp:2]: (style) Error code from the return value of function mystrcmp() is not used.\n" $, errout@var100 .@expr1073743030 str (@expr1073743031 ) $) $) { $return ; }
1323: }
1324:
1325: void memsetZeroBytes ( ) {
1326: $check_ $(@expr1073743032 "cppcheck-2.8/test/testfunctions.cpp" $, 1326 $, "void f() {\n    memset(p, 10, 0x0);\n}" $)
1327:
1328: ;
1329: $if $(@expr1073743033 $!@expr1073743034 $assertEquals $(@expr1073743035 "cppcheck-2.8/test/testfunctions.cpp" $, 1329 $, "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" $, errout@var100 .@expr1212 str (@expr1213 ) $) $) { $return ; }
1330:
1331: $check_ $(@expr1073743038 "cppcheck-2.8/test/testfunctions.cpp" $, 1331 $, "void f() {\n    memset(p, sizeof(p), 0);\n}" $)
1332:
1333: ;
1334: $if $(@expr1073743039 $!@expr1073743040 $assertEquals $(@expr1073743041 "cppcheck-2.8/test/testfunctions.cpp" $, 1334 $, "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" $, errout@var100 .@expr1212 str (@expr1213 ) $) $) { $return ; }
1335:
1336: $check_ $(@expr1073743044 "cppcheck-2.8/test/testfunctions.cpp" $, 1336 $, "void f() {\n    memset(p, sizeof(p), i);\n}" $)
1337:
1338: ;
1339: $if $(@expr1073743045 $!@expr1073743046 $assertEquals $(@expr1073743047 "cppcheck-2.8/test/testfunctions.cpp" $, 1339 $, "" $, errout@var100 .@expr1212 str (@expr1213 ) $) $) { $return ; }
1340:
1341:
1342: $check_ $(@expr1073743050 "cppcheck-2.8/test/testfunctions.cpp" $, 1342 $, "class c {\n  void memset( int i );\n  void f( void )   {\n     memset( 0 );\n  }\n};" $)
1343:
|
1346:
1347: ;
1348: $if $(@expr1073743051 $!@expr1073743052 $assertEquals $(@expr1073743053 "cppcheck-2.8/test/testfunctions.cpp" $, 1348 $, "" $, errout@var100 .@expr1212 str (@expr1213 ) $) $) { $return ; }
1349:
1350:
1351: $check_ $(@expr1073743056 "cppcheck-2.8/test/testfunctions.cpp" $, 1351 $, "void f() {\n    memset(&tm, sizeof(tm), 0);\n}" $)
1352:
1353: ;
1354: $if $(@expr1073743057 $!@expr1073743058 $assertEquals $(@expr1073743059 "cppcheck-2.8/test/testfunctions.cpp" $, 1354 $, "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" $, errout@var100 .@expr1212 str (@expr1213 ) $) $) { $return ; }
1355:
1356: }
1357:
1358: void memsetInvalid2ndParam ( ) {
1359: $check_ $(@expr1073743062 "cppcheck-2.8/test/testfunctions.cpp" $, 1359 $, "void f() {\n    int* is = new int[10];\n    memset(is, 1.0f, 40);\n    int* is2 = new int[10];\n    memset(is2, 0.1f, 40);\n}" $)
1360:
|
1363:
1364: ;
1365: $if $(@expr1073743063 $!@expr1073743064 $assertEquals $(@expr1073743065 "cppcheck-2.8/test/testfunctions.cpp" $, 1365 $, "[test.cpp:3]: (portability) The 2nd memset() argument '1.0f' is a float, its representation is implementation defined.\n[test.cpp:5]: (portability) The 2nd memset() argument '0.1f' is a float, its representation is implementation defined.\n" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return
1366: ; }
1367:
1368: $check_ $(@expr1073743068 "cppcheck-2.8/test/testfunctions.cpp" $, 1368 $, "void f() {\n    int* is = new int[10];\n    float g = computeG();\n    memset(is, g, 40);\n}" $)
1369:
1370:
1371:
1372: ;
1373: $if $(@expr1073743069 $!@expr1073743070 $assertEquals $(@expr1073743071 "cppcheck-2.8/test/testfunctions.cpp" $, 1373 $, "[test.cpp:4]: (portability) The 2nd memset() argument 'g' is a float, its representation is implementation defined.\n" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return ; }
1374:
1375: $check_ $(@expr1073743074 "cppcheck-2.8/test/testfunctions.cpp" $, 1375 $, "void f() {\n    int* is = new int[10];\n    memset(is, 0.0f, 40);\n}" $)
1376:
1377:
1378: ;
1379: $if $(@expr1073743075 $!@expr1073743076 $assertEquals $(@expr1073743077 "cppcheck-2.8/test/testfunctions.cpp" $, 1379 $, "" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return ; }
1380:
1381: $check_ $(@expr1073743080 "cppcheck-2.8/test/testfunctions.cpp" $, 1381 $, "void f() {\n    float x = 2.3f;\n    memset(a, (x?64:0), 40);\n}" $)
1382:
1383:
1384: ;
1385: $if $(@expr1073743081 $!@expr1073743082 $assertEquals $(@expr1073743083 "cppcheck-2.8/test/testfunctions.cpp" $, 1385 $, "" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return ; }
1386:
1387: $check_ $(@expr1073743086 "cppcheck-2.8/test/testfunctions.cpp" $, 1387 $, "void f() {\n    short ss[] = {1, 2};\n    memset(ss, 256, 4);\n    short ss2[2];\n    memset(ss2, -129, 4);\n}" $)
1388:
|
1391:
1392: ;
1393: $if $(@expr1073743087 $!@expr1073743088 $assertEquals $(@expr1073743089 "cppcheck-2.8/test/testfunctions.cpp" $, 1393 $, "[test.cpp:3]: (warning) The 2nd memset() argument '256' doesn't fit into an 'unsigned char'.\n[test.cpp:5]: (warning) The 2nd memset() argument '-129' doesn't fit into an 'unsigned char'.\n" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return
1394: ; }
1395:
1396: $check_ $(@expr1073743092 "cppcheck-2.8/test/testfunctions.cpp" $, 1396 $, "void f() {\n    int is[10];\n    memset(is, 0xEE, 40);\n    unsigned char* cs = malloc(256);\n    memset(cs, -1, 256);\n    short* ss[30];\n    memset(ss, -128, 60);\n    char cs2[30];\n    memset(cs2, 255, 30);\n    char cs3[30];\n    memset(cs3, 0, 30);\n}" $)
1397:
|
1406:
1407: ;
1408: $if $(@expr1073743093 $!@expr1073743094 $assertEquals $(@expr1073743095 "cppcheck-2.8/test/testfunctions.cpp" $, 1408 $, "" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return ; }
1409:
1410: $check_ $(@expr1073743098 "cppcheck-2.8/test/testfunctions.cpp" $, 1410 $, "void f() {\n    int is[10];\n    const int i = g();\n    memset(is, 1.0f + i, 40);\n}" $)
1411:
1412:
1413:
1414: ;
1415: $if $(@expr1073743099 $!@expr1073743100 $assertEquals $(@expr1073743101 "cppcheck-2.8/test/testfunctions.cpp" $, 1415 $, "[test.cpp:4]: (portability) The 2nd memset() argument '1.0f+i' is a float, its representation is implementation defined.\n" $, errout@var100 .@expr1242 str (@expr1243 ) $) $) { $return ; }
1416: }
1417:
1418: void checkMissingReturn ( ) {
1419: $check_ $(@expr1073743106 "cppcheck-2.8/test/testfunctions.cpp" $, 1419 $, "int f() {}" $) ;
1420: $if $(@expr1073743107 $!@expr1073743108 $assertEquals $(@expr1073743109 "cppcheck-2.8/test/testfunctions.cpp" $, 1420 $, "[test.cpp:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1421:
1422: {
1423: const char code@var127 [@expr1073743112 18 ] =@expr1073743113 "int main(void) {}" ;
1424: Settings s@var128 ;
1425:
1426: s@var128 .@expr1290 standards@var129 .@expr1291 c@var130 =@expr1073743116 Standards ::@expr1073743117 C89@expr1073743104 ;
1427: $check_ $(@expr1073743118 "cppcheck-2.8/test/testfunctions.cpp" $, 1427 $, code@var127 , "test.c" , &@expr1295 s@var128 $) ;
1428: $if $(@expr1073743120 $!@expr1073743121 $assertEquals $(@expr1073743122 "cppcheck-2.8/test/testfunctions.cpp" $, 1428 $, "[test.c:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1429:
1430: s@var128 .@expr1290 standards@var129 .@expr1291 c@var130 =@expr1073743127 Standards ::@expr1073743128 C99@expr1073743105 ;
1431: $check_ $(@expr1073743129 "cppcheck-2.8/test/testfunctions.cpp" $, 1431 $, code@var127 , "test.c" , &@expr1295 s@var128 $) ;
1432: $if $(@expr1073743131 $!@expr1073743132 $assertEquals $(@expr1073743133 "cppcheck-2.8/test/testfunctions.cpp" $, 1432 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1433:
1434: $check_ $(@expr1073743136 "cppcheck-2.8/test/testfunctions.cpp" $, 1434 $, code@var127 , "test.cpp" , &@expr1295 s@var128 $) ;
1435: $if $(@expr1073743138 $!@expr1073743139 $assertEquals $(@expr1073743140 "cppcheck-2.8/test/testfunctions.cpp" $, 1435 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1436: }
1437:
1438: $check_ $(@expr1073743143 "cppcheck-2.8/test/testfunctions.cpp" $, 1438 $, "F(A,B) { x=1; }" $) ;
1439: $if $(@expr1073743144 $!@expr1073743145 $assertEquals $(@expr1073743146 "cppcheck-2.8/test/testfunctions.cpp" $, 1439 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1440:
1441: $check_ $(@expr1073743149 "cppcheck-2.8/test/testfunctions.cpp" $, 1441 $, "auto foo4() -> void {}" $) ;
1442: $if $(@expr1073743150 $!@expr1073743151 $assertEquals $(@expr1073743152 "cppcheck-2.8/test/testfunctions.cpp" $, 1442 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1443:
1444: $check_ $(@expr1073743155 "cppcheck-2.8/test/testfunctions.cpp" $, 1444 $, "void STDCALL foo() {}" $) ;
1445: $if $(@expr1073743156 $!@expr1073743157 $assertEquals $(@expr1073743158 "cppcheck-2.8/test/testfunctions.cpp" $, 1445 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1446:
1447: $check_ $(@expr1073743161 "cppcheck-2.8/test/testfunctions.cpp" $, 1447 $, "void operator=(int y) { x=y; }" $) ;
1448: $if $(@expr1073743162 $!@expr1073743163 $assertEquals $(@expr1073743164 "cppcheck-2.8/test/testfunctions.cpp" $, 1448 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1449:
1450: $check_ $(@expr1073743167 "cppcheck-2.8/test/testfunctions.cpp" $, 1450 $, "int f() {\nback:\n    return 0;\nng:\n    x=y;\n    goto back;\n}\n" $)
1451:
|
1455:
1456: ;
1457: $if $(@expr1073743168 $!@expr1073743169 $assertEquals $(@expr1073743170 "cppcheck-2.8/test/testfunctions.cpp" $, 1457 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1458:
1459:
1460: $check_ $(@expr1073743173 "cppcheck-2.8/test/testfunctions.cpp" $, 1460 $, "int foo(int x) {\n  return 1;\n  (void)x;\n}" $)
1461:
1462:
1463: ;
1464: $if $(@expr1073743174 $!@expr1073743175 $assertEquals $(@expr1073743176 "cppcheck-2.8/test/testfunctions.cpp" $, 1464 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1465:
1466: $check_ $(@expr1073743179 "cppcheck-2.8/test/testfunctions.cpp" $, 1466 $, "int foo(int x) {\n  if (x) goto out;\n  return 1;\nout:\n}" $)
1467:
1468:
1469:
1470: ;
1471: $if $(@expr1073743180 $!@expr1073743181 $assertEquals $(@expr1073743182 "cppcheck-2.8/test/testfunctions.cpp" $, 1471 $, "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1472:
1473:
1474: $check_ $(@expr1073743185 "cppcheck-2.8/test/testfunctions.cpp" $, 1474 $, "int f() {\n    switch (x) {\n        case 1: break;\n        case 2: return 1;\n    }\n}" $)
1475:
|
1478:
1479: ;
1480: $if $(@expr1073743186 $!@expr1073743187 $assertEquals $(@expr1073743188 "cppcheck-2.8/test/testfunctions.cpp" $, 1480 $, "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1481:
1482: $check_ $(@expr1073743191 "cppcheck-2.8/test/testfunctions.cpp" $, 1482 $, "int f() {\n    switch (x) {\n        case 1: return 2; break;\n        default: return 1;\n    }\n}" $)
1483:
|
1486:
1487: ;
1488: $if $(@expr1073743192 $!@expr1073743193 $assertEquals $(@expr1073743194 "cppcheck-2.8/test/testfunctions.cpp" $, 1488 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1489:
1490: $check_ $(@expr1073743197 "cppcheck-2.8/test/testfunctions.cpp" $, 1490 $, "bool test(unsigned char v1, int v2) {\n    switch (v1) {\n        case 0:\n            switch (v2) {\n            case 48000:\n                break;\n            }\n            return false;\n        default:\n            return true;\n    }\n}" $)
1491:
|
1500:
1501: ;
1502: $if $(@expr1073743198 $!@expr1073743199 $assertEquals $(@expr1073743200 "cppcheck-2.8/test/testfunctions.cpp" $, 1502 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1503:
1504:
1505: $check_ $(@expr1073743203 "cppcheck-2.8/test/testfunctions.cpp" $, 1505 $, "int f(int x) {\n    if (x) {\n        return 1;\n    }\n}" $)
1506:
1507:
1508:
1509: ;
1510: $if $(@expr1073743204 $!@expr1073743205 $assertEquals $(@expr1073743206 "cppcheck-2.8/test/testfunctions.cpp" $, 1510 $, "[test.cpp:4]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1511:
1512: $check_ $(@expr1073743209 "cppcheck-2.8/test/testfunctions.cpp" $, 1512 $, "int f(int x) {\n    if (x) {\n        ;\n    } else {\n        return 1;\n    }\n}" $)
1513:
|
1517:
1518: ;
1519: $if $(@expr1073743210 $!@expr1073743211 $assertEquals $(@expr1073743212 "cppcheck-2.8/test/testfunctions.cpp" $, 1519 $, "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1520:
1521: $check_ $(@expr1073743215 "cppcheck-2.8/test/testfunctions.cpp" $, 1521 $, "int f() {\n    if (!0) {\n        return 1;\n    }\n}" $)
1522:
1523:
1524:
1525: ;
1526: $if $(@expr1073743216 $!@expr1073743217 $assertEquals $(@expr1073743218 "cppcheck-2.8/test/testfunctions.cpp" $, 1526 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1527:
1528: $check_ $(@expr1073743221 "cppcheck-2.8/test/testfunctions.cpp" $, 1528 $, "int f() {\n    if (!0) {}\n}" $)
1529:
1530: ;
1531: $if $(@expr1073743222 $!@expr1073743223 $assertEquals $(@expr1073743224 "cppcheck-2.8/test/testfunctions.cpp" $, 1531 $, "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1532:
1533:
1534: $check_ $(@expr1073743227 "cppcheck-2.8/test/testfunctions.cpp" $, 1534 $, "int f(int x) {\n    while (1) {\n        dostuff();\n    }\n}" $)
1535:
1536:
1537:
1538: ;
1539: $if $(@expr1073743228 $!@expr1073743229 $assertEquals $(@expr1073743230 "cppcheck-2.8/test/testfunctions.cpp" $, 1539 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1540:
1541:
1542: $check_ $(@expr1073743233 "cppcheck-2.8/test/testfunctions.cpp" $, 1542 $, "std::pair<int, int> typeDecl(int tok) {\n    if (!tok)\n        return {};\n    else\n        return {1, 2};\n}" $)
1543:
|
1546:
1547: ;
1548: $if $(@expr1073743234 $!@expr1073743235 $assertEquals $(@expr1073743236 "cppcheck-2.8/test/testfunctions.cpp" $, 1548 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1549:
1550:
1551: $check_ $(@expr1073743239 "cppcheck-2.8/test/testfunctions.cpp" $, 1551 $, "int f(int x) { exit(0); }" $) ;
1552: $if $(@expr1073743240 $!@expr1073743241 $assertEquals $(@expr1073743242 "cppcheck-2.8/test/testfunctions.cpp" $, 1552 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1553:
1554: $check_ $(@expr1073743245 "cppcheck-2.8/test/testfunctions.cpp" $, 1554 $, "int f(int x) { assert(0); }" $) ;
1555: $if $(@expr1073743246 $!@expr1073743247 $assertEquals $(@expr1073743248 "cppcheck-2.8/test/testfunctions.cpp" $, 1555 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1556:
1557: $check_ $(@expr1073743251 "cppcheck-2.8/test/testfunctions.cpp" $, 1557 $, "int f(int x) { if (x) return 1; else return bar({1}, {}); }" $) ;
1558: $if $(@expr1073743252 $!@expr1073743253 $assertEquals $(@expr1073743254 "cppcheck-2.8/test/testfunctions.cpp" $, 1558 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1559:
1560: $check_ $(@expr1073743257 "cppcheck-2.8/test/testfunctions.cpp" $, 1560 $, "auto f() -> void {}" $) ;
1561: $if $(@expr1073743258 $!@expr1073743259 $assertEquals $(@expr1073743260 "cppcheck-2.8/test/testfunctions.cpp" $, 1561 $, "" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return ; }
1562:
1563: $check_ $(@expr1073743263 "cppcheck-2.8/test/testfunctions.cpp" $, 1563 $, "struct S1 {\n    S1& operator=(const S1& r) { if (this != &r) { i = r.i; } }\n    int i;\n};\nstruct S2 {\n    S2& operator=(const S2& s) { if (this != &s) { j = s.j; } return *this; }\n    int j;\n};\nstruct S3 {\n    S3& operator=(const S3& t) { if (this != &t) { k = t.k; return *this; } }\n    int k;\n};\n" $)
1564:
|
1573:
1574: ;
1575: $if $(@expr1073743264 $!@expr1073743265 $assertEquals $(@expr1073743266 "cppcheck-2.8/test/testfunctions.cpp" $, 1575 $, "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n[test.cpp:10]: (error) Found a exit path from function with non-void return type that has missing return statement\n" $, errout@var100 .@expr1286 str (@expr1287 ) $) $) { $return
1576:
1577: ; }
1578: }
1579:
1580:
1581: void returnLocalStdMove1 ( ) {
1582: $check_ $(@expr1073743269 "cppcheck-2.8/test/testfunctions.cpp" $, 1582 $, "struct A{}; A f() { A var; return std::move(var); }" $) ;
1583: $if $(@expr1073743270 $!@expr1073743271 $assertEquals $(@expr1073743272 "cppcheck-2.8/test/testfunctions.cpp" $, 1583 $, "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" $, errout@var100 .@expr1073743273 str (@expr1073743274 ) $) $) { $return
1584: ; }
1585: }
1586:
1587:
1588: void returnLocalStdMove2 ( ) {
1589: $check_ $(@expr1073743275 "cppcheck-2.8/test/testfunctions.cpp" $, 1589 $, "struct A{}; A f() { return std::move( A() ); }" $) ;
1590: $if $(@expr1073743276 $!@expr1073743277 $assertEquals $(@expr1073743278 "cppcheck-2.8/test/testfunctions.cpp" $, 1590 $, "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" $, errout@var100 .@expr1073743279 str (@expr1073743280 ) $) $) { $return
1591: ; }
1592: }
1593:
1594:
1595: void returnLocalStdMove3 ( ) {
1596: $check_ $(@expr1073743281 "cppcheck-2.8/test/testfunctions.cpp" $, 1596 $, "struct A{}; A f() { return std::move(A{}); }" $) ;
1597: $if $(@expr1073743282 $!@expr1073743283 $assertEquals $(@expr1073743284 "cppcheck-2.8/test/testfunctions.cpp" $, 1597 $, "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" $, errout@var100 .@expr1073743285 str (@expr1073743286 ) $) $) { $return
1598: ; }
1599: }
1600:
1601:
1602: void returnLocalStdMove4 ( ) {
1603: $check_ $(@expr1073743287 "cppcheck-2.8/test/testfunctions.cpp" $, 1603 $, "struct A{}; A f(A a) { return std::move(A{}); }" $) ;
1604: $if $(@expr1073743288 $!@expr1073743289 $assertEquals $(@expr1073743290 "cppcheck-2.8/test/testfunctions.cpp" $, 1604 $, "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" $, errout@var100 .@expr1073743291 str (@expr1073743292 ) $) $) { $return
1605: ; }
1606: }
1607:
1608: void returnLocalStdMove5 ( ) {
1609: $check_ $(@expr1073743293 "cppcheck-2.8/test/testfunctions.cpp" $, 1609 $, "struct A{} a; A f1() { return std::move(a); }\nA f2() { volatile A var; return std::move(var); }" $)
1610: ;
1611: $if $(@expr1073743294 $!@expr1073743295 $assertEquals $(@expr1073743296 "cppcheck-2.8/test/testfunctions.cpp" $, 1611 $, "" $, errout@var100 .@expr1073743297 str (@expr1073743298 ) $) $) { $return ; }
1612: }
1613: } ;
1614:
1615: $namespace ${ TestFunctions instance_TestFunctions@var131 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@170}
  v {!<=-1,!>=2,0@170}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 35
  "TestFunctions" always "TestFunctions"
Line 46
  "posix" always "posix"
Line 49
  ( {lifetime[Object]=(exename),!0}
  "std.cfg" always "std.cfg"
  != always {!<=-1,!>=2}
  "std.cfg" always "std.cfg"
  false always 0
Line 50
  ( {lifetime[Object]=(exename),!0}
  "posix.cfg" always "posix.cfg"
  != always {!<=-1,!>=2}
  "posix.cfg" always "posix.cfg"
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_posix" always "prohibitedFunctions_posix"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_index" always "prohibitedFunctions_index"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_qt_index" always "prohibitedFunctions_qt_index"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_rindex" always "prohibitedFunctions_rindex"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_var" always "prohibitedFunctions_var"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_gets" always "prohibitedFunctions_gets"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_alloca" always "prohibitedFunctions_alloca"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_declaredFunction" always "prohibitedFunctions_declaredFunction"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_std_gets" always "prohibitedFunctions_std_gets"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_multiple" always "prohibitedFunctions_multiple"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_c_declaration" always "prohibitedFunctions_c_declaration"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_functionWithBody" always "prohibitedFunctions_functionWithBody"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_crypt" always "prohibitedFunctions_crypt"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "prohibitedFunctions_namespaceHandling" always "prohibitedFunctions_namespaceHandling"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "invalidFunctionUsage1" always "invalidFunctionUsage1"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "invalidFunctionUsageStrings" always "invalidFunctionUsageStrings"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "mathfunctionCall_fmod" always "mathfunctionCall_fmod"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "mathfunctionCall_sqrt" always "mathfunctionCall_sqrt"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "mathfunctionCall_log" always "mathfunctionCall_log"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "mathfunctionCall_acos" always "mathfunctionCall_acos"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "mathfunctionCall_asin" always "mathfunctionCall_asin"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "mathfunctionCall_pow" always "mathfunctionCall_pow"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "mathfunctionCall_atan2" always "mathfunctionCall_atan2"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "mathfunctionCall_precision" always "mathfunctionCall_precision"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "checkIgnoredReturnValue" always "checkIgnoredReturnValue"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "checkIgnoredErrorCode" always "checkIgnoredErrorCode"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "memsetZeroBytes" always "memsetZeroBytes"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "memsetInvalid2ndParam" always "memsetInvalid2ndParam"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "checkMissingReturn" always "checkMissingReturn"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "returnLocalStdMove1" always "returnLocalStdMove1"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "returnLocalStdMove2" always "returnLocalStdMove2"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "returnLocalStdMove3" always "returnLocalStdMove3"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "returnLocalStdMove4" always "returnLocalStdMove4"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "returnLocalStdMove5" always "returnLocalStdMove5"
  false always 0
  false always 0
Line 103
  , always "test.cpp"
  9 always 9
  = always "test.cpp"
  "test.cpp" always "test.cpp"
  , always 0
  = always 0
  nullptr always 0
Line 105
  "" always ""
Line 107
  ! always {!<=-1,!>=2}
  settings_ possible {lifetime[Address]=(s)@7,lifetime[Address]=(s)@8,lifetime[Address]=(s)@9,lifetime[Address]=(settings2)@43,lifetime[Address]=(settings2)@44,lifetime[Address]=(settings2)@45,lifetime[Address]=(settings2)@46,lifetime[Address]=(settings2)@47,lifetime[Address]=(settings2)@48,lifetime[Address]=(settings2)@49}
Line 108
  = {&,lifetime[Address]=(settings),!0}
  & {&,lifetime[Address]=(settings),!0}
Line 111
  settings_ possible {lifetime[Address]=(settings),symbolic=(&settings),&,lifetime[Address]=(s)@7,lifetime[Address]=(s)@8,lifetime[Address]=(s)@9,lifetime[Address]=(settings2)@43,lifetime[Address]=(settings2)@44,lifetime[Address]=(settings2)@45,lifetime[Address]=(settings2)@46}
  this always !0
Line 112
  code {"struct A{} a; A f1() { return std::move(a); }\nA f2() { volatile A var; return std::move(var); }"@1,"struct A{}; A f(A a) { return std::move(A{}); }"@2,"struct A{}; A f() { return std::move(A{}); }"@3,"struct A{}; A f() { return std::move( A() ); }"@4,"struct A{}; A f() { A var; return std::move(var); }"@5,"int f() {}"@6,"int main(void) {}"@7,"F(A,B) { x=1; }"@10,"auto foo4() -> void {}"@11,"void STDCALL foo() {}"@12}
Line 113
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testfunctions.cpp"@1,"cppcheck-2.8/test/testfunctions.cpp"@2,"cppcheck-2.8/test/testfunctions.cpp"@3,"cppcheck-2.8/test/testfunctions.cpp"@4,"cppcheck-2.8/test/testfunctions.cpp"@5,"cppcheck-2.8/test/testfunctions.cpp"@6,"cppcheck-2.8/test/testfunctions.cpp"@7,"cppcheck-2.8/test/testfunctions.cpp"@8,"cppcheck-2.8/test/testfunctions.cpp"@9,"cppcheck-2.8/test/testfunctions.cpp"@10}
  line inconclusive {1609@1,1603@2,1596@3,1589@4,1582@5,1419@6,1427@7,1431@8,1434@9,1438@10}
  filename inconclusive {"test.c"@7,"test.c"@8,"test.cpp"@9,"test.cpp"@43,"test.cpp"@44,"test.cpp"@45,"test.cpp"@46,"test.cpp"@47,"test.cpp"@48,"test.cpp"@49}
Line 115
  & {lifetime[Address]=(tokenizer),!0}
  settings_ inconclusive {lifetime[Address]=(settings),&,lifetime[Address]=(s)@7,lifetime[Address]=(s)@8,lifetime[Address]=(s)@9,lifetime[Address]=(settings2)@43,lifetime[Address]=(settings2)@44,lifetime[Address]=(settings2)@45,lifetime[Address]=(settings2)@46,lifetime[Address]=(settings2)@47}
  this always !0
Line 116
  & {lifetime[Address]=(tokenizer),!0}
  settings_ inconclusive {lifetime[Address]=(settings),&,lifetime[Address]=(s)@7,lifetime[Address]=(s)@8,lifetime[Address]=(s)@9,lifetime[Address]=(settings2)@43,lifetime[Address]=(settings2)@44,lifetime[Address]=(settings2)@45,lifetime[Address]=(settings2)@46,lifetime[Address]=(settings2)@47}
  this always !0
Line 120
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  120 always 120
  "void f()\n{\n    bsd_signal(SIGABRT, SIG_IGN);\n}" always "void f()\n{\n    bsd_signal(SIGABRT, SIG_IGN);\n}"
Line 124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  124 always 124
  "[test.cpp:3]: (style) Obsolescent function 'bsd_signal' called. It is recommended to use 'sigaction' instead.\n" always "[test.cpp:3]: (style) Obsolescent function 'bsd_signal' called. It is recommended to use 'sigaction' instead.\n"
Line 126
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  126 always 126
  "int f()\n{\n    int bsd_signal(0);\n    return bsd_signal;\n}" always "int f()\n{\n    int bsd_signal(0);\n    return bsd_signal;\n}"
Line 131
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  131 always 131
  "" always ""
Line 133
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  133 always 133
  "void f()\n{\n    struct hostent *hp;\n    if(!hp = gethostbyname(\"127.0.0.1\")) {\n        exit(1);\n    }\n}" always "void f()\n{\n    struct hostent *hp;\n    if(!hp = gethostbyname(\"127.0.0.1\")) {\n        exit(1);\n    }\n}"
Line 140
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  140 always 140
  "[test.cpp:4]: (style) Obsolescent function 'gethostbyname' called. It is recommended to use 'getaddrinfo' instead.\n" always "[test.cpp:4]: (style) Obsolescent function 'gethostbyname' called. It is recommended to use 'getaddrinfo' instead.\n"
Line 142
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  142 always 142
  "void f()\n{\n    long addr;\n    addr = inet_addr(\"127.0.0.1\");\n    if(!hp = gethostbyaddr((char *) &addr, sizeof(addr), AF_INET)) {\n        exit(1);\n    }\n}" always "void f()\n{\n    long addr;\n    addr = inet_addr(\"127.0.0.1\");\n    if(!hp = gethostbyaddr((char *) &addr, sizeof(addr), AF_INET)) {\n        exit(1);\n    }\n}"
Line 150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  150 always 150
  "[test.cpp:5]: (style) Obsolescent function 'gethostbyaddr' called. It is recommended to use 'getnameinfo' instead.\n" always "[test.cpp:5]: (style) Obsolescent function 'gethostbyaddr' called. It is recommended to use 'getnameinfo' instead.\n"
Line 152
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  152 always 152
  "void f()\n{\n    usleep( 1000 );\n}" always "void f()\n{\n    usleep( 1000 );\n}"
Line 156
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  156 always 156
  "[test.cpp:3]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n" always "[test.cpp:3]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n"
Line 160
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  160 always 160
  "namespace n1 {\n    int index(){ return 1; };\n}\nint main()\n{\n    n1::index();\n    return 0;\n}" always "namespace n1 {\n    int index(){ return 1; };\n}\nint main()\n{\n    n1::index();\n    return 0;\n}"
Line 168
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  168 always 168
  "" always ""
Line 170
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  170 always 170
  "std::size_t f()\n{\n    std::size_t index(0);\n    index++;\n    return index;\n}" always "std::size_t f()\n{\n    std::size_t index(0);\n    index++;\n    return index;\n}"
Line 176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  176 always 176
  "" always ""
Line 178
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  178 always 178
  "int f()\n{\n    return this->index();\n}" always "int f()\n{\n    return this->index();\n}"
Line 182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  182 always 182
  "" always ""
Line 184
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  184 always 184
  "void f()\n{\n    int index( 0 );\n}" always "void f()\n{\n    int index( 0 );\n}"
Line 188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  188 always 188
  "" always ""
Line 190
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  190 always 190
  "const char f()\n{\n    const char var[6] = \"index\";\n    const char i = index(var, 0);\n    return i;\n}" always "const char f()\n{\n    const char var[6] = \"index\";\n    const char i = index(var, 0);\n    return i;\n}"
Line 196
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  196 always 196
  "[test.cpp:4]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n" always "[test.cpp:4]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n"
Line 201
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  201 always 201
  "void TDataModel::forceRowRefresh(int row) {\n    emit dataChanged(index(row, 0), index(row, columnCount() - 1));\n}" always "void TDataModel::forceRowRefresh(int row) {\n    emit dataChanged(index(row, 0), index(row, columnCount() - 1));\n}"
Line 204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  204 always 204
  "[test.cpp:2]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n" always "[test.cpp:2]: (style) Obsolescent function 'index' called. It is recommended to use 'strchr' instead.\n"
Line 208
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  208 always 208
  "void f()\n{\n    int rindex( 0 );\n}" always "void f()\n{\n    int rindex( 0 );\n}"
Line 212
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  212 always 212
  "" always ""
Line 214
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  214 always 214
  "void f()\n{\n    const char var[7] = \"rindex\";\n    print(rindex(var, 0));\n}" always "void f()\n{\n    const char var[7] = \"rindex\";\n    print(rindex(var, 0));\n}"
Line 219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  219 always 219
  "[test.cpp:4]: (style) Obsolescent function 'rindex' called. It is recommended to use 'strrchr' instead.\n" always "[test.cpp:4]: (style) Obsolescent function 'rindex' called. It is recommended to use 'strrchr' instead.\n"
Line 224
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  224 always 224
  "class Fred {\npublic:\n    Fred() : index(0) { }\n    int index;\n};" always "class Fred {\npublic:\n    Fred() : index(0) { }\n    int index;\n};"
Line 229
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  229 always 229
  "" always ""
Line 233
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  233 always 233
  "void f()\n{\n    char *x = gets(a);\n}" always "void f()\n{\n    char *x = gets(a);\n}"
Line 237
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  237 always 237
  "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" always "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n"
Line 239
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  239 always 239
  "void f()\n{\n    foo(x, gets(a));\n}" always "void f()\n{\n    foo(x, gets(a));\n}"
Line 243
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  243 always 243
  "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" always "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n"
Line 247
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  247 always 247
  "void f()\n{\n    char *x = alloca(10);\n}" always "void f()\n{\n    char *x = alloca(10);\n}"
  "test.cpp" always "test.cpp"
Line 251
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  251 always 251
  "[test.cpp:3]: (warning) Obsolete function 'alloca' called.\n" always "[test.cpp:3]: (warning) Obsolete function 'alloca' called.\n"
Line 253
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  253 always 253
  "void f()\n{\n    char *x = alloca(10);\n}" always "void f()\n{\n    char *x = alloca(10);\n}"
  "test.c" always "test.c"
Line 257
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  257 always 257
  "[test.c:3]: (warning) Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\n" always "[test.c:3]: (warning) Obsolete function 'alloca' called. In C99 and later it is recommended to use a variable length array instead.\n"
Line 261
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  261 always 261
  "void f()\n{\n    char *x = alloca(10);\n}" always "void f()\n{\n    char *x = alloca(10);\n}"
  "test.cpp" always "test.cpp"
Line 265
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  265 always 265
  "" always ""
Line 267
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  267 always 267
  "void f()\n{\n    char *x = alloca(10);\n}" always "void f()\n{\n    char *x = alloca(10);\n}"
  "test.c" always "test.c"
Line 271
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  271 always 271
  "" always ""
Line 273
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  273 always 273
  "void f()\n{\n    char *x = alloca(10);\n}" always "void f()\n{\n    char *x = alloca(10);\n}"
  "test.c" always "test.c"
Line 277
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  277 always 277
  "" always ""
Line 284
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  284 always 284
  "int ftime ( int a )\n{\n    return a;\n}\nint main ()\n{\n    int b ; b = ftime ( 1 ) ;\n    return 0 ;\n}" always "int ftime ( int a )\n{\n    return a;\n}\nint main ()\n{\n    int b ; b = ftime ( 1 ) ;\n    return 0 ;\n}"
Line 293
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  293 always 293
  "" always ""
Line 298
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  298 always 298
  "void f(char * str)\n{\n    char *x = std::gets(str);\n    char *y = gets(str);\n}" always "void f(char * str)\n{\n    char *x = std::gets(str);\n    char *y = gets(str);\n}"
Line 303
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  303 always 303
  "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" always "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n"
Line 309
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  309 always 309
  "void f(char * str)\n{\n    char *x = std::gets(str);\n    usleep( 1000 );\n}" always "void f(char * str)\n{\n    char *x = std::gets(str);\n    usleep( 1000 );\n}"
Line 314
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  314 always 314
  "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n" always "[test.cpp:3]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n[test.cpp:4]: (style) Obsolescent function 'usleep' called. It is recommended to use 'nanosleep' or 'setitimer' instead.\n"
Line 319
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  319 always 319
  "char * gets ( char * c ) ;\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}" always "char * gets ( char * c ) ;\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}"
Line 326
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  326 always 326
  "[test.cpp:5]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n" always "[test.cpp:5]: (warning) Obsolete function 'gets' called. It is recommended to use 'fgets' or 'gets_s' instead.\n"
Line 328
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  328 always 328
  "int getcontext(ucontext_t *ucp);\nvoid f (ucontext_t *ucp)\n{\n    getcontext ( ucp ) ;\n}" always "int getcontext(ucontext_t *ucp);\nvoid f (ucontext_t *ucp)\n{\n    getcontext ( ucp ) ;\n}"
Line 333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  333 always 333
  "[test.cpp:4]: (portability) Obsolescent function 'getcontext' called. Applications are recommended to be rewritten to use POSIX threads.\n" always "[test.cpp:4]: (portability) Obsolescent function 'getcontext' called. Applications are recommended to be rewritten to use POSIX threads.\n"
Line 337
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  337 always 337
  "char * gets ( char * c ) { return c; }\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}" always "char * gets ( char * c ) { return c; }\nint main ()\n{\n    char s [ 10 ] ;\n    gets ( s ) ;\n    return 0;\n}"
Line 344
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  344 always 344
  "" always ""
Line 348
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  348 always 348
  "void f(char *pwd)\n{\n    char *cpwd;    crypt(pwd, cpwd);\n}" always "void f(char *pwd)\n{\n    char *cpwd;    crypt(pwd, cpwd);\n}"
Line 353
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  353 always 353
  "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n" always "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n"
Line 356
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  356 always 356
  "void f()\n{\n    char *pwd = getpass(\"Password:\");    char *cpwd;    crypt(pwd, cpwd);\n}" always "void f()\n{\n    char *pwd = getpass(\"Password:\");    char *cpwd;    crypt(pwd, cpwd);\n}"
Line 362
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  362 always 362
  "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n" always "[test.cpp:3]: (warning) Return value of function crypt() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'crypt' called. For threadsafe applications it is recommended to use the reentrant replacement function 'crypt_r'.\n"
Line 365
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  365 always 365
  "int f()\n{\n    int crypt = 0;    return crypt;\n}" always "int f()\n{\n    int crypt = 0;    return crypt;\n}"
Line 370
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  370 always 370
  "" always ""
Line 374
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  374 always 374
  "void f()\n{\n    time_t t = 0;    auto lt = std::localtime(&t);\n}" always "void f()\n{\n    time_t t = 0;    auto lt = std::localtime(&t);\n}"
Line 379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  379 always 379
  "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n" always "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n"
Line 382
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  382 always 382
  "void f()\n{\n    printf(\"Magic guess: %d\", getpwent());\n}" always "void f()\n{\n    printf(\"Magic guess: %d\", getpwent());\n}"
Line 386
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  386 always 386
  "[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n" always "[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n"
Line 389
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  389 always 389
  "void f()\n{\n    time_t t = 0;    struct tm *foo = localtime(&t);\n}" always "void f()\n{\n    time_t t = 0;    struct tm *foo = localtime(&t);\n}"
Line 394
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  394 always 394
  "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n" always "[test.cpp:3]: (portability) Non reentrant function 'localtime' called. For threadsafe applications it is recommended to use the reentrant replacement function 'localtime_r'.\n"
Line 397
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  397 always 397
  "void f()\n{\n    ::getpwent();\n}" always "void f()\n{\n    ::getpwent();\n}"
Line 401
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  401 always 401
  "[test.cpp:3]: (warning) Return value of function getpwent() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n" always "[test.cpp:3]: (warning) Return value of function getpwent() is not used.\n[test.cpp:3]: (portability) Non reentrant function 'getpwent' called. For threadsafe applications it is recommended to use the reentrant replacement function 'getpwent_r'.\n"
Line 405
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  405 always 405
  "int getpwent()\n{\n    return 123;\n}" always "int getpwent()\n{\n    return 123;\n}"
Line 409
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  409 always 409
  "" always ""
Line 412
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  412 always 412
  "void f()\n{\n    foobar::getpwent();\n}" always "void f()\n{\n    foobar::getpwent();\n}"
Line 416
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  416 always 416
  "" always ""
Line 419
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  419 always 419
  "void f()\n{\n    foobar.getpwent();\n}" always "void f()\n{\n    foobar.getpwent();\n}"
Line 423
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  423 always 423
  "" always ""
Line 427
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  427 always 427
  "void f() { memset(a,b,sizeof(a)!=12); }" always "void f() { memset(a,b,sizeof(a)!=12); }"
Line 428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  428 always 428
  "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 430
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  430 always 430
  "void f() { memset(a,b,sizeof(a)!=0); }" always "void f() { memset(a,b,sizeof(a)!=0); }"
Line 431
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  431 always 431
  "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 433
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  433 always 433
  "void f() { memset(a,b,!c); }" always "void f() { memset(a,b,!c); }"
Line 434
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  434 always 434
  "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 437
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  437 always 437
  "void f(bool c) { memset(a,b,c); }" always "void f(bool c) { memset(a,b,c); }"
Line 438
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  438 always 438
  "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 439
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  439 always 439
  "void f() { memset(a,b,true); }" always "void f() { memset(a,b,true); }"
Line 440
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  440 always 440
  "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:1]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 443
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  443 always 443
  "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}" always "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}"
  "test.c" always "test.c"
Line 447
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  447 always 447
  "[test.c:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.c:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 450
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  450 always 450
  "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}" always "void record(char* buf, int n) {\n  memset(buf, 0, n < 255);\n  memset(buf, 0, n < 255 ? n : 255);\n}"
Line 454
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  454 always 454
  "[test.cpp:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n" always "[test.cpp:2]: (error) Invalid memset() argument nr 3. A non-boolean value is required.\n"
Line 456
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  456 always 456
  "int boolArgZeroIsInvalidButOneIsValid(int a, int param) {\n  return div(a, param > 0);\n}" always "int boolArgZeroIsInvalidButOneIsValid(int a, int param) {\n  return div(a, param > 0);\n}"
Line 459
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  459 always 459
  "[test.cpp:2]: (error) Invalid div() argument nr 2. The value is 0 or 1 (boolean) but the valid values are ':-1,1:'.\n" always "[test.cpp:2]: (error) Invalid div() argument nr 2. The value is 0 or 1 (boolean) but the valid values are ':-1,1:'.\n"
Line 461
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  461 always 461
  "void boolArgZeroIsValidButOneIsInvalid(int param) {\n  strtol(a, b, param > 0);\n}" always "void boolArgZeroIsValidButOneIsInvalid(int param) {\n  strtol(a, b, param > 0);\n}"
Line 464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  464 always 464
  "[test.cpp:2]: (error) Invalid strtol() argument nr 3. The value is 0 or 1 (boolean) but the valid values are '0,2:36'.\n" always "[test.cpp:2]: (error) Invalid strtol() argument nr 3. The value is 0 or 1 (boolean) but the valid values are '0,2:36'.\n"
Line 466
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  466 always 466
  "void f() { strtol(a,b,1); }" always "void f() { strtol(a,b,1); }"
Line 467
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  467 always 467
  "[test.cpp:1]: (error) Invalid strtol() argument nr 3. The value is 1 but the valid values are '0,2:36'.\n" always "[test.cpp:1]: (error) Invalid strtol() argument nr 3. The value is 1 but the valid values are '0,2:36'.\n"
Line 469
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  469 always 469
  "void f() { strtol(a,b,10); }" always "void f() { strtol(a,b,10); }"
Line 470
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  470 always 470
  "" always ""
Line 472
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  472 always 472
  "void f(std::vector<int>& v) {\n    int N = -1;\n    for (long i = 0; i < g(); i++)\n        N = h(N);\n    v.resize(N);\n}\n" always "void f(std::vector<int>& v) {\n    int N = -1;\n    for (long i = 0; i < g(); i++)\n        N = h(N);\n    v.resize(N);\n}\n"
Line 478
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  478 always 478
  "[test.cpp:5]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" always "[test.cpp:5]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n"
Line 480
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  480 always 480
  "void f(std::vector<int>& v, int N) {\n    if (N < -1)\n        return;\n    v.resize(N);\n}\n" always "void f(std::vector<int>& v, int N) {\n    if (N < -1)\n        return;\n    v.resize(N);\n}\n"
Line 485
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  485 always 485
  "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'N<-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n" always "[test.cpp:2] -> [test.cpp:4]: (warning) Either the condition 'N<-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n"
Line 488
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  488 always 488
  "void f(std::vector<int>& v, int N) {\n    if (N == -1) {}\n    v.resize(N);\n}\n" always "void f(std::vector<int>& v, int N) {\n    if (N == -1) {}\n    v.resize(N);\n}\n"
Line 492
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  492 always 492
  "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'N==-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n" always "[test.cpp:2] -> [test.cpp:3]: (warning) Either the condition 'N==-1' is redundant or v.resize() argument nr 1 can have invalid value. The value is -1 but the valid values are '0:'.\n"
Line 495
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  495 always 495
  "void f(std::vector<int>& v, int N, bool b) {\n    if (b)\n        N = -1;\n    v.resize(N);\n}\n" always "void f(std::vector<int>& v, int N, bool b) {\n    if (b)\n        N = -1;\n    v.resize(N);\n}\n"
Line 500
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  500 always 500
  "[test.cpp:4]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" always "[test.cpp:4]: (warning) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n"
Line 503
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  503 always 503
  "void f(std::vector<int>& v) {\n    int N = -1;\n    v.resize(N);\n}\n" always "void f(std::vector<int>& v) {\n    int N = -1;\n    v.resize(N);\n}\n"
Line 507
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  507 always 507
  "[test.cpp:3]: (error) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n" always "[test.cpp:3]: (error) Invalid v.resize() argument nr 1. The value is -1 but the valid values are '0:'.\n"
Line 512
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  512 always 512
  "size_t f() { char x = 'x'; return strlen(&x); }" always "size_t f() { char x = 'x'; return strlen(&x); }"
Line 513
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  513 always 513
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
Line 515
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  515 always 515
  "size_t f() { return strlen(&x); }" always "size_t f() { return strlen(&x); }"
Line 516
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  516 always 516
  "" always ""
Line 518
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  518 always 518
  "size_t f(char x) { return strlen(&x); }" always "size_t f(char x) { return strlen(&x); }"
Line 519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  519 always 519
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
Line 521
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  521 always 521
  "size_t f() { char x = '\\0'; return strlen(&x); }" always "size_t f() { char x = '\\0'; return strlen(&x); }"
Line 522
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  522 always 522
  "" always ""
Line 524
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  524 always 524
  "size_t f() {\n  char x;\n  if (y)\n    x = '\\0';\n  else\n    x = 'a';\n  return strlen(&x);\n}" always "size_t f() {\n  char x;\n  if (y)\n    x = '\\0';\n  else\n    x = 'a';\n  return strlen(&x);\n}"
Line 532
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  532 always 532
  "[test.cpp:7]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:7]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
Line 534
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  534 always 534
  "int f() { char x = '\\0'; return strcmp(\"Hello world\", &x); }" always "int f() { char x = '\\0'; return strcmp(\"Hello world\", &x); }"
Line 535
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  535 always 535
  "" always ""
Line 537
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  537 always 537
  "int f() { char x = 'x'; return strcmp(\"Hello world\", &x); }" always "int f() { char x = 'x'; return strcmp(\"Hello world\", &x); }"
Line 538
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  538 always 538
  "[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n"
Line 540
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  540 always 540
  "size_t f(char x) { char * y = &x; return strlen(y); }" always "size_t f(char x) { char * y = &x; return strlen(y); }"
Line 541
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  541 always 541
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
  "" always ""
Line 543
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  543 always 543
  "size_t f(char x) { char * y = &x; char *z = y; return strlen(z); }" always "size_t f(char x) { char * y = &x; char *z = y; return strlen(z); }"
Line 544
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  544 always 544
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
  "" always ""
Line 546
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  546 always 546
  "size_t f() { char x = 'x'; char * y = &x; char *z = y; return strlen(z); }" always "size_t f() { char x = 'x'; char * y = &x; char *z = y; return strlen(z); }"
Line 547
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  547 always 547
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
  "" always ""
Line 549
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  549 always 549
  "size_t f() { char x = '\\0'; char * y = &x; char *z = y; return strlen(z); }" always "size_t f() { char x = '\\0'; char * y = &x; char *z = y; return strlen(z); }"
Line 550
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  550 always 550
  "" always ""
Line 552
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  552 always 552
  "size_t f() { char x[] = \"Hello world\"; return strlen(x); }" always "size_t f() { char x[] = \"Hello world\"; return strlen(x); }"
Line 553
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  553 always 553
  "" always ""
Line 555
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  555 always 555
  "size_t f(char x[]) { return strlen(x); }" always "size_t f(char x[]) { return strlen(x); }"
Line 556
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  556 always 556
  "" always ""
Line 558
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  558 always 558
  "int f(char x, char y) { return strcmp(&x, &y); }" always "int f(char x, char y) { return strcmp(&x, &y); }"
Line 559
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  559 always 559
  "[test.cpp:1]: (error) Invalid strcmp() argument nr 1. A nul-terminated string is required.\n[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strcmp() argument nr 1. A nul-terminated string is required.\n[test.cpp:1]: (error) Invalid strcmp() argument nr 2. A nul-terminated string is required.\n"
Line 562
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  562 always 562
  "size_t f() { char x[] = \"Hello world\"; return strlen(&x[0]); }" always "size_t f() { char x[] = \"Hello world\"; return strlen(&x[0]); }"
Line 563
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  563 always 563
  "" always ""
Line 565
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  565 always 565
  "size_t f() { char* x = \"Hello world\"; return strlen(&x[0]); }" always "size_t f() { char* x = \"Hello world\"; return strlen(&x[0]); }"
Line 566
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  566 always 566
  "" always ""
Line 568
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  568 always 568
  "struct S {\n  char x;\n};\nsize_t f() {\n  S s1 = {0};\n  S s2;\n;  s2.x = 'x';\n  size_t l1 = strlen(&s1.x);\n  size_t l2 = strlen(&s2.x);\n  return l1 + l2;\n}" always "struct S {\n  char x;\n};\nsize_t f() {\n  S s1 = {0};\n  S s2;\n;  s2.x = 'x';\n  size_t l1 = strlen(&s1.x);\n  size_t l2 = strlen(&s2.x);\n  return l1 + l2;\n}"
Line 579
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  579 always 579
  "[test.cpp:9]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:9]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
  "" always ""
Line 581
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  581 always 581
  "const char x = 'x'; size_t f() { return strlen(&x); }" always "const char x = 'x'; size_t f() { return strlen(&x); }"
Line 582
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  582 always 582
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
  "" always ""
Line 584
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  584 always 584
  "const char x = 'x'; size_t f() { char y = x; return strlen(&y); }" always "const char x = 'x'; size_t f() { char y = x; return strlen(&y); }"
Line 585
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  585 always 585
  "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n" always "[test.cpp:1]: (error) Invalid strlen() argument nr 1. A nul-terminated string is required.\n"
Line 587
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  587 always 587
  "const char x = '\\0'; size_t f() { return strlen(&x); }" always "const char x = '\\0'; size_t f() { return strlen(&x); }"
Line 588
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  588 always 588
  "" always ""
Line 590
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  590 always 590
  "const char x = '\\0'; size_t f() { char y = x; return strlen(&y); }" always "const char x = '\\0'; size_t f() { char y = x; return strlen(&y); }"
Line 591
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  591 always 591
  "" always ""
Line 593
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  593 always 593
  "size_t f() {\n  char * a = \"Hello world\";\n  char ** b = &a;\n  return strlen(&b[0][0]);\n}" always "size_t f() {\n  char * a = \"Hello world\";\n  char ** b = &a;\n  return strlen(&b[0][0]);\n}"
Line 598
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  598 always 598
  "" always ""
Line 600
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  600 always 600
  "size_t f() {\n  char ca[] = \"asdf\";\n  return strlen((char*) &ca);\n}" always "size_t f() {\n  char ca[] = \"asdf\";\n  return strlen((char*) &ca);\n}"
Line 604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  604 always 604
  "" always ""
Line 607
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  607 always 607
  "int main(void)\n{\n  char str[80] = \"hello worl\";\n  char d = 'd';\n  strcat(str, &d);\n  puts(str);\n  return 0;\n}" always "int main(void)\n{\n  char str[80] = \"hello worl\";\n  char d = 'd';\n  strcat(str, &d);\n  puts(str);\n  return 0;\n}"
Line 615
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  615 always 615
  "[test.cpp:5]: (error) Invalid strcat() argument nr 2. A nul-terminated string is required.\n" always "[test.cpp:5]: (error) Invalid strcat() argument nr 2. A nul-terminated string is required.\n"
Line 620
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  620 always 620
  "void foo()\n{\n    std::cout <<  sqrt(-1) << std::endl;\n    std::cout <<  sqrtf(-1) << std::endl;\n    std::cout <<  sqrtl(-1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  sqrt(-1) << std::endl;\n    std::cout <<  sqrtf(-1) << std::endl;\n    std::cout <<  sqrtl(-1) << std::endl;\n}"
Line 626
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  626 always 626
  "[test.cpp:3]: (error) Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:4]: (error) Invalid sqrtf() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:5]: (error) Invalid sqrtl() argument nr 1. The value is -1 but the valid values are '0.0:'.\n" always "[test.cpp:3]: (error) Invalid sqrt() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:4]: (error) Invalid sqrtf() argument nr 1. The value is -1 but the valid values are '0.0:'.\n[test.cpp:5]: (error) Invalid sqrtl() argument nr 1. The value is -1 but the valid values are '0.0:'.\n"
Line 631
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  631 always 631
  "void foo()\n{\n    std::cout <<  sqrt(-0.) << std::endl;\n    std::cout <<  sqrtf(-0.) << std::endl;\n    std::cout <<  sqrtl(-0.) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  sqrt(-0.) << std::endl;\n    std::cout <<  sqrtf(-0.) << std::endl;\n    std::cout <<  sqrtl(-0.) << std::endl;\n}"
Line 637
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  637 always 637
  "" always ""
Line 639
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  639 always 639
  "void foo()\n{\n    std::cout <<  sqrt(1) << std::endl;\n    std::cout <<  sqrtf(1) << std::endl;\n    std::cout <<  sqrtl(1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  sqrt(1) << std::endl;\n    std::cout <<  sqrtf(1) << std::endl;\n    std::cout <<  sqrtl(1) << std::endl;\n}"
Line 645
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  645 always 645
  "" always ""
Line 650
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  650 always 650
  "void foo()\n{\n    std::cout <<  log(-2) << std::endl;\n    std::cout <<  logf(-2) << std::endl;\n    std::cout <<  logl(-2) << std::endl;\n    std::cout <<  log10(-2) << std::endl;\n    std::cout <<  log10f(-2) << std::endl;\n    std::cout <<  log10l(-2) << std::endl;\n    std::cout <<  log2(-2) << std::endl;\n    std::cout <<  log2f(-2) << std::endl;\n    std::cout <<  log2l(-2) << std::endl;\n    std::cout <<  log1p(-3) << std::endl;\n    std::cout <<  log1pf(-3) << std::endl;\n    std::cout <<  log1pl(-3) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(-2) << std::endl;\n    std::cout <<  logf(-2) << std::endl;\n    std::cout <<  logl(-2) << std::endl;\n    std::cout <<  log10(-2) << std::endl;\n    std::cout <<  log10f(-2) << std::endl;\n    std::cout <<  log10l(-2) << std::endl;\n    std::cout <<  log2(-2) << std::endl;\n    std::cout <<  log2f(-2) << std::endl;\n    std::cout <<  log2l(-2) << std::endl;\n    std::cout <<  log1p(-3) << std::endl;\n    std::cout <<  log1pf(-3) << std::endl;\n    std::cout <<  log1pl(-3) << std::endl;\n}"
Line 665
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  665 always 665
  "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -2 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -2 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -2 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -2 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -2 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -2 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -2 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -2 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -2 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -3 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -3 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -3 to log1pl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -2 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -2 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -2 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -2 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -2 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -2 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -2 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -2 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -2 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -2 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -2 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -3 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -3 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -3 to log1pl() leads to implementation-defined result.\n"
Line 687
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  687 always 687
  "void foo()\n{\n    std::cout <<  log(-1) << std::endl;\n    std::cout <<  logf(-1) << std::endl;\n    std::cout <<  logl(-1) << std::endl;\n    std::cout <<  log10(-1) << std::endl;\n    std::cout <<  log10f(-1) << std::endl;\n    std::cout <<  log10l(-1) << std::endl;\n    std::cout <<  log2(-1) << std::endl;\n    std::cout <<  log2f(-1) << std::endl;\n    std::cout <<  log2l(-1) << std::endl;\n    std::cout <<  log1p(-2) << std::endl;\n    std::cout <<  log1pf(-2) << std::endl;\n    std::cout <<  log1pl(-2) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(-1) << std::endl;\n    std::cout <<  logf(-1) << std::endl;\n    std::cout <<  logl(-1) << std::endl;\n    std::cout <<  log10(-1) << std::endl;\n    std::cout <<  log10f(-1) << std::endl;\n    std::cout <<  log10l(-1) << std::endl;\n    std::cout <<  log2(-1) << std::endl;\n    std::cout <<  log2f(-1) << std::endl;\n    std::cout <<  log2l(-1) << std::endl;\n    std::cout <<  log1p(-2) << std::endl;\n    std::cout <<  log1pf(-2) << std::endl;\n    std::cout <<  log1pl(-2) << std::endl;\n}"
Line 702
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  702 always 702
  "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2 to log1pl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2 to log1pl() leads to implementation-defined result.\n"
Line 724
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  724 always 724
  "void foo()\n{\n    std::cout <<  log(-1.0) << std::endl;\n    std::cout <<  logf(-1.0) << std::endl;\n    std::cout <<  logl(-1.0) << std::endl;\n    std::cout <<  log10(-1.0) << std::endl;\n    std::cout <<  log10f(-1.0) << std::endl;\n    std::cout <<  log10l(-1.0) << std::endl;\n    std::cout <<  log2(-1.0) << std::endl;\n    std::cout <<  log2f(-1.0) << std::endl;\n    std::cout <<  log2l(-1.0) << std::endl;\n    std::cout <<  log1p(-2.0) << std::endl;\n    std::cout <<  log1pf(-2.0) << std::endl;\n    std::cout <<  log1pl(-2.0) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(-1.0) << std::endl;\n    std::cout <<  logf(-1.0) << std::endl;\n    std::cout <<  logl(-1.0) << std::endl;\n    std::cout <<  log10(-1.0) << std::endl;\n    std::cout <<  log10f(-1.0) << std::endl;\n    std::cout <<  log10l(-1.0) << std::endl;\n    std::cout <<  log2(-1.0) << std::endl;\n    std::cout <<  log2f(-1.0) << std::endl;\n    std::cout <<  log2l(-1.0) << std::endl;\n    std::cout <<  log1p(-2.0) << std::endl;\n    std::cout <<  log1pf(-2.0) << std::endl;\n    std::cout <<  log1pl(-2.0) << std::endl;\n}"
Line 739
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  739 always 739
  "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1.0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1.0 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1.0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1.0 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1.0 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1.0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2.0 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2.0 to log1pl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -1.0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -1.0 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -1.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -1.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -1.0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -1.0 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -1.0 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -1.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -1.0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -2.0 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -2.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -2.0 to log1pl() leads to implementation-defined result.\n"
Line 761
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  761 always 761
  "void foo()\n{\n    std::cout <<  log(-0.1) << std::endl;\n    std::cout <<  logf(-0.1) << std::endl;\n    std::cout <<  logl(-0.1) << std::endl;\n    std::cout <<  log10(-0.1) << std::endl;\n    std::cout <<  log10f(-0.1) << std::endl;\n    std::cout <<  log10l(-0.1) << std::endl;\n    std::cout <<  log2(-0.1) << std::endl;\n    std::cout <<  log2f(-0.1) << std::endl;\n    std::cout <<  log2l(-0.1) << std::endl;\n    std::cout <<  log1p(-1.1) << std::endl;\n    std::cout <<  log1pf(-1.1) << std::endl;\n    std::cout <<  log1pl(-1.1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(-0.1) << std::endl;\n    std::cout <<  logf(-0.1) << std::endl;\n    std::cout <<  logl(-0.1) << std::endl;\n    std::cout <<  log10(-0.1) << std::endl;\n    std::cout <<  log10f(-0.1) << std::endl;\n    std::cout <<  log10l(-0.1) << std::endl;\n    std::cout <<  log2(-0.1) << std::endl;\n    std::cout <<  log2f(-0.1) << std::endl;\n    std::cout <<  log2l(-0.1) << std::endl;\n    std::cout <<  log1p(-1.1) << std::endl;\n    std::cout <<  log1pf(-1.1) << std::endl;\n    std::cout <<  log1pl(-1.1) << std::endl;\n}"
Line 776
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  776 always 776
  "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -0.1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -0.1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -0.1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -0.1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -0.1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -0.1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -0.1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -0.1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -0.1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1.1 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.1 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1.1 to log1pl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is -0.1 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is -0.1 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value -0.1 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value -0.1 to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value -0.1 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value -0.1 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value -0.1 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value -0.1 to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value -0.1 to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value -0.1 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value -0.1 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1.1 to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.1 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1.1 to log1pl() leads to implementation-defined result.\n"
Line 798
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  798 always 798
  "void foo()\n{\n    std::cout <<  log(0) << std::endl;\n    std::cout <<  logf(0.) << std::endl;\n    std::cout <<  logl(0.0) << std::endl;\n    std::cout <<  log10(0.0) << std::endl;\n    std::cout <<  log10f(0) << std::endl;\n    std::cout <<  log10l(0.) << std::endl;\n    std::cout <<  log2(0.) << std::endl;\n    std::cout <<  log2f(0.0) << std::endl;\n    std::cout <<  log2l(0) << std::endl;\n    std::cout <<  log1p(-1.) << std::endl;\n    std::cout <<  log1pf(-1.0) << std::endl;\n    std::cout <<  log1pl(-1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(0) << std::endl;\n    std::cout <<  logf(0.) << std::endl;\n    std::cout <<  logl(0.0) << std::endl;\n    std::cout <<  log10(0.0) << std::endl;\n    std::cout <<  log10f(0) << std::endl;\n    std::cout <<  log10l(0.) << std::endl;\n    std::cout <<  log2(0.) << std::endl;\n    std::cout <<  log2f(0.0) << std::endl;\n    std::cout <<  log2l(0) << std::endl;\n    std::cout <<  log1p(-1.) << std::endl;\n    std::cout <<  log1pf(-1.0) << std::endl;\n    std::cout <<  log1pl(-1) << std::endl;\n}"
Line 813
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  813 always 813
  "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value 0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value 0. to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value 0.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value 0.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value 0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value 0. to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value 0. to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value 0.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value 0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1. to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1 to log1pl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid log() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:4]: (error) Invalid logf() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:5]: (error) Invalid logl() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:6]: (error) Invalid log10() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:7]: (error) Invalid log10f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:8]: (error) Invalid log10l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:9]: (error) Invalid log2() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:10]: (error) Invalid log2f() argument nr 1. The value is 0 but the valid values are '1.4013e-45:'.\n[test.cpp:11]: (error) Invalid log2l() argument nr 1. The value is 0 but the valid values are '4.94066e-324:'.\n[test.cpp:3]: (warning) Passing value 0 to log() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing value 0. to logf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing value 0.0 to logl() leads to implementation-defined result.\n[test.cpp:6]: (warning) Passing value 0.0 to log10() leads to implementation-defined result.\n[test.cpp:7]: (warning) Passing value 0 to log10f() leads to implementation-defined result.\n[test.cpp:8]: (warning) Passing value 0. to log10l() leads to implementation-defined result.\n[test.cpp:9]: (warning) Passing value 0. to log2() leads to implementation-defined result.\n[test.cpp:10]: (warning) Passing value 0.0 to log2f() leads to implementation-defined result.\n[test.cpp:11]: (warning) Passing value 0 to log2l() leads to implementation-defined result.\n[test.cpp:12]: (warning) Passing value -1. to log1p() leads to implementation-defined result.\n[test.cpp:13]: (warning) Passing value -1.0 to log1pf() leads to implementation-defined result.\n[test.cpp:14]: (warning) Passing value -1 to log1pl() leads to implementation-defined result.\n"
Line 835
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  835 always 835
  "void foo()\n{\n    std::cout <<  log(1E-3)         << std::endl;\n    std::cout <<  logf(1E-3)        << std::endl;\n    std::cout <<  logl(1E-3)        << std::endl;\n    std::cout <<  log10(1E-3)       << std::endl;\n    std::cout <<  log10f(1E-3)      << std::endl;\n    std::cout <<  log10l(1E-3)      << std::endl;\n    std::cout <<  log2(1E-3)        << std::endl;\n    std::cout <<  log2f(1E-3)       << std::endl;\n    std::cout <<  log2l(1E-3)       << std::endl;\n    std::cout <<  log1p(-1+1E-3)    << std::endl;\n    std::cout <<  log1pf(-1+1E-3)   << std::endl;\n    std::cout <<  log1pl(-1+1E-3)   << std::endl;\n    std::cout <<  log(1.0E-3)       << std::endl;\n    std::cout <<  logf(1.0E-3)      << std::endl;\n    std::cout <<  logl(1.0E-3)      << std::endl;\n    std::cout <<  log10(1.0E-3)     << std::endl;\n    std::cout <<  log10f(1.0E-3)    << std::endl;\n    std::cout <<  log10l(1.0E-3)    << std::endl;\n    std::cout <<  log2(1.0E-3)      << std::endl;\n    std::cout <<  log2f(1.0E-3)     << std::endl;\n    std::cout <<  log2l(1.0E-3)     << std::endl;\n    std::cout <<  log1p(-1+1.0E-3)  << std::endl;\n    std::cout <<  log1pf(-1+1.0E-3) << std::endl;\n    std::cout <<  log1pl(-1+1.0E-3) << std::endl;\n    std::cout <<  log(1.0E+3)       << std::endl;\n    std::cout <<  logf(1.0E+3)      << std::endl;\n    std::cout <<  logl(1.0E+3)      << std::endl;\n    std::cout <<  log10(1.0E+3)     << std::endl;\n    std::cout <<  log10f(1.0E+3)    << std::endl;\n    std::cout <<  log10l(1.0E+3)    << std::endl;\n    std::cout <<  log2(1.0E+3)      << std::endl;\n    std::cout <<  log2f(1.0E+3)     << std::endl;\n    std::cout <<  log2l(1.0E+3)     << std::endl;\n    std::cout <<  log1p(1.0E+3)     << std::endl;\n    std::cout <<  log1pf(1.0E+3)    << std::endl;\n    std::cout <<  log1pl(1.0E+3)    << std::endl;\n    std::cout <<  log(2.0)          << std::endl;\n    std::cout <<  logf(2.0)         << std::endl;\n    std::cout <<  logf(2.0f)        << std::endl;\n    std::cout <<  log10(2.0)        << std::endl;\n    std::cout <<  log10f(2.0)       << std::endl;\n    std::cout <<  log10f(2.0f)      << std::endl;\n    std::cout <<  log2(2.0)         << std::endl;\n    std::cout <<  log2f(2.0)        << std::endl;\n    std::cout <<  log2f(2.0f)       << std::endl;\n    std::cout <<  log1p(2.0)        << std::endl;\n    std::cout <<  log1pf(2.0)       << std::endl;\n    std::cout <<  log1pf(2.0f)      << std::endl;\n}" always "void foo()\n{\n    std::cout <<  log(1E-3)         << std::endl;\n    std::cout <<  logf(1E-3)        << std::endl;\n    std::cout <<  logl(1E-3)        << std::endl;\n    std::cout <<  log10(1E-3)       << std::endl;\n    std::cout <<  log10f(1E-3)      << std::endl;\n    std::cout <<  log10l(1E-3)      << std::endl;\n    std::cout <<  log2(1E-3)        << std::endl;\n    std::cout <<  log2f(1E-3)       << std::endl;\n    std::cout <<  log2l(1E-3)       << std::endl;\n    std::cout <<  log1p(-1+1E-3)    << std::endl;\n    std::cout <<  log1pf(-1+1E-3)   << std::endl;\n    std::cout <<  log1pl(-1+1E-3)   << std::endl;\n    std::cout <<  log(1.0E-3)       << std::endl;\n    std::cout <<  logf(1.0E-3)      << std::endl;\n    std::cout <<  logl(1.0E-3)      << std::endl;\n    std::cout <<  log10(1.0E-3)     << std::endl;\n    std::cout <<  log10f(1.0E-3)    << std::endl;\n    std::cout <<  log10l(1.0E-3)    << std::endl;\n    std::cout <<  log2(1.0E-3)      << std::endl;\n    std::cout <<  log2f(1.0E-3)     << std::endl;\n    std::cout <<  log2l(1.0E-3)     << std::endl;\n    std::cout <<  log1p(-1+1.0E-3)  << std::endl;\n    std::cout <<  log1pf(-1+1.0E-3) << std::endl;\n    std::cout <<  log1pl(-1+1.0E-3) << std::endl;\n    std::cout <<  log(1.0E+3)       << std::endl;\n    std::cout <<  logf(1.0E+3)      << std::endl;\n    std::cout <<  logl(1.0E+3)      << std::endl;\n    std::cout <<  log10(1.0E+3)     << std::endl;\n    std::cout <<  log10f(1.0E+3)    << std::endl;\n    std::cout <<  log10l(1.0E+3)    << std::endl;\n    std::cout <<  log2(1.0E+3)      << std::endl;\n    std::cout <<  log2f(1.0E+3)     << std::endl;\n    std::cout <<  log2l(1.0E+3)     << std::endl;\n    std::cout <<  log1p(1.0E+3)     << std::endl;\n    std::cout <<  log1pf(1.0E+3)    << std::endl;\n    std::cout <<  log1pl(1.0E+3)    << std::endl;\n    std::cout <<  log(2.0)          << std::endl;\n    std::cout <<  logf(2.0)         << std::endl;\n    std::cout <<  logf(2.0f)        << std::endl;\n    std::cout <<  log10(2.0)        << std::endl;\n    std::cout <<  log10f(2.0)       << std::endl;\n    std::cout <<  log10f(2.0f)      << std::endl;\n    std::cout <<  log2(2.0)         << std::endl;\n    std::cout <<  log2f(2.0)        << std::endl;\n    std::cout <<  log2f(2.0f)       << std::endl;\n    std::cout <<  log1p(2.0)        << std::endl;\n    std::cout <<  log1pf(2.0)       << std::endl;\n    std::cout <<  log1pf(2.0f)      << std::endl;\n}"
Line 886
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  886 always 886
  "" always ""
Line 888
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  888 always 888
  "void foo()\n{\n    std::string *log(0);\n}" always "void foo()\n{\n    std::string *log(0);\n}"
Line 892
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  892 always 892
  "" always ""
Line 895
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  895 always 895
  "Fred::Fred() : log(0) { }" always "Fred::Fred() : log(0) { }"
Line 896
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  896 always 896
  "" always ""
Line 899
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  899 always 899
  "void f() { foo.log(0); }" always "void f() { foo.log(0); }"
Line 900
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  900 always 900
  "" always ""
Line 905
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  905 always 905
  "void foo()\n{\n return acos(-1)     \n    + acos(0.1)      \n    + acos(0.0001)   \n    + acos(0.01)     \n    + acos(1.0E-1)   \n    + acos(-1.0E-1)  \n    + acos(+1.0E-1)  \n    + acos(0.1E-1)   \n    + acos(+0.1E-1)  \n    + acos(-0.1E-1)  \n    + acosf(-1)      \n    + acosf(0.1)     \n    + acosf(0.0001)  \n    + acosf(0.01)    \n    + acosf(1.0E-1)  \n    + acosf(-1.0E-1) \n    + acosf(+1.0E-1) \n    + acosf(0.1E-1)  \n    + acosf(+0.1E-1) \n    + acosf(-0.1E-1) \n    + acosl(-1)      \n    + acosl(0.1)     \n    + acosl(0.0001)  \n    + acosl(0.01)    \n    + acosl(1.0E-1)  \n    + acosl(-1.0E-1) \n    + acosl(+1.0E-1) \n    + acosl(0.1E-1)  \n    + acosl(+0.1E-1) \n    + acosl(-0.1E-1);\n}" always "void foo()\n{\n return acos(-1)     \n    + acos(0.1)      \n    + acos(0.0001)   \n    + acos(0.01)     \n    + acos(1.0E-1)   \n    + acos(-1.0E-1)  \n    + acos(+1.0E-1)  \n    + acos(0.1E-1)   \n    + acos(+0.1E-1)  \n    + acos(-0.1E-1)  \n    + acosf(-1)      \n    + acosf(0.1)     \n    + acosf(0.0001)  \n    + acosf(0.01)    \n    + acosf(1.0E-1)  \n    + acosf(-1.0E-1) \n    + acosf(+1.0E-1) \n    + acosf(0.1E-1)  \n    + acosf(+0.1E-1) \n    + acosf(-0.1E-1) \n    + acosl(-1)      \n    + acosl(0.1)     \n    + acosl(0.0001)  \n    + acosl(0.01)    \n    + acosl(1.0E-1)  \n    + acosl(-1.0E-1) \n    + acosl(+1.0E-1) \n    + acosl(0.1E-1)  \n    + acosl(+0.1E-1) \n    + acosl(-0.1E-1);\n}"
Line 938
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  938 always 938
  "" always ""
Line 940
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  940 always 940
  "void foo()\n{\n    std::cout <<  acos(1.1) << std::endl;\n    std::cout <<  acosf(1.1) << std::endl;\n    std::cout <<  acosl(1.1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  acos(1.1) << std::endl;\n    std::cout <<  acosf(1.1) << std::endl;\n    std::cout <<  acosl(1.1) << std::endl;\n}"
Line 946
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  946 always 946
  "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n" always "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n"
Line 950
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  950 always 950
  "void foo()\n{\n    std::cout <<  acos(-1.1) << std::endl;\n    std::cout <<  acosf(-1.1) << std::endl;\n    std::cout <<  acosl(-1.1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  acos(-1.1) << std::endl;\n    std::cout <<  acosf(-1.1) << std::endl;\n    std::cout <<  acosl(-1.1) << std::endl;\n}"
Line 956
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  956 always 956
  "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n" always "[test.cpp:3]: (error) Invalid acos() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid acosf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid acosl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n"
Line 963
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  963 always 963
  "void foo()\n{\n return asin(1)      \n    + asin(-1)       \n    + asin(0.1)      \n    + asin(0.0001)   \n    + asin(0.01)     \n    + asin(1.0E-1)   \n    + asin(-1.0E-1)  \n    + asin(+1.0E-1)  \n    + asin(0.1E-1)   \n    + asin(+0.1E-1)  \n    + asin(-0.1E-1)  \n    + asinf(1)       \n    + asinf(-1)      \n    + asinf(0.1)     \n    + asinf(0.0001)  \n    + asinf(0.01)    \n    + asinf(1.0E-1)  \n    + asinf(-1.0E-1) \n    + asinf(+1.0E-1) \n    + asinf(0.1E-1)  \n    + asinf(+0.1E-1) \n    + asinf(-0.1E-1) \n    + asinl(1)       \n    + asinl(-1)      \n    + asinl(0.1)     \n    + asinl(0.0001)  \n    + asinl(0.01)    \n    + asinl(1.0E-1)  \n    + asinl(-1.0E-1) \n    + asinl(+1.0E-1) \n    + asinl(0.1E-1)  \n    + asinl(+0.1E-1) \n    + asinl(-0.1E-1);\n}" always "void foo()\n{\n return asin(1)      \n    + asin(-1)       \n    + asin(0.1)      \n    + asin(0.0001)   \n    + asin(0.01)     \n    + asin(1.0E-1)   \n    + asin(-1.0E-1)  \n    + asin(+1.0E-1)  \n    + asin(0.1E-1)   \n    + asin(+0.1E-1)  \n    + asin(-0.1E-1)  \n    + asinf(1)       \n    + asinf(-1)      \n    + asinf(0.1)     \n    + asinf(0.0001)  \n    + asinf(0.01)    \n    + asinf(1.0E-1)  \n    + asinf(-1.0E-1) \n    + asinf(+1.0E-1) \n    + asinf(0.1E-1)  \n    + asinf(+0.1E-1) \n    + asinf(-0.1E-1) \n    + asinl(1)       \n    + asinl(-1)      \n    + asinl(0.1)     \n    + asinl(0.0001)  \n    + asinl(0.01)    \n    + asinl(1.0E-1)  \n    + asinl(-1.0E-1) \n    + asinl(+1.0E-1) \n    + asinl(0.1E-1)  \n    + asinl(+0.1E-1) \n    + asinl(-0.1E-1);\n}"
Line 999
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  999 always 999
  "" always ""
Line 1001
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1001 always 1001
  "void foo()\n{\n    std::cout <<  asin(1.1) << std::endl;\n    std::cout <<  asinf(1.1) << std::endl;\n    std::cout <<  asinl(1.1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  asin(1.1) << std::endl;\n    std::cout <<  asinf(1.1) << std::endl;\n    std::cout <<  asinl(1.1) << std::endl;\n}"
Line 1007
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1007 always 1007
  "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n" always "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is 1.1 but the valid values are '-1.0:1.0'.\n"
Line 1011
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1011 always 1011
  "void foo()\n{\n    std::cout <<  asin(-1.1) << std::endl;\n    std::cout <<  asinf(-1.1) << std::endl;\n    std::cout <<  asinl(-1.1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  asin(-1.1) << std::endl;\n    std::cout <<  asinf(-1.1) << std::endl;\n    std::cout <<  asinl(-1.1) << std::endl;\n}"
Line 1017
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1017 always 1017
  "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n" always "[test.cpp:3]: (error) Invalid asin() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:4]: (error) Invalid asinf() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n[test.cpp:5]: (error) Invalid asinl() argument nr 1. The value is -1.1 but the valid values are '-1.0:1.0'.\n"
Line 1024
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1024 always 1024
  "void foo()\n{\n    std::cout <<  pow(0,-10) << std::endl;\n    std::cout <<  powf(0,-10) << std::endl;\n    std::cout <<  powl(0,-10) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  pow(0,-10) << std::endl;\n    std::cout <<  powf(0,-10) << std::endl;\n    std::cout <<  powl(0,-10) << std::endl;\n}"
Line 1030
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1030 always 1030
  "[test.cpp:3]: (warning) Passing values 0 and -10 to pow() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and -10 to powf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and -10 to powl() leads to implementation-defined result.\n" always "[test.cpp:3]: (warning) Passing values 0 and -10 to pow() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and -10 to powf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and -10 to powl() leads to implementation-defined result.\n"
Line 1034
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1034 always 1034
  "void foo()\n{\n    std::cout <<  pow(0,10) << std::endl;\n    std::cout <<  powf(0,10) << std::endl;\n    std::cout <<  powl(0,10) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  pow(0,10) << std::endl;\n    std::cout <<  powf(0,10) << std::endl;\n    std::cout <<  powl(0,10) << std::endl;\n}"
Line 1040
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1040 always 1040
  "" always ""
Line 1045
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1045 always 1045
  "void foo()\n{\n    std::cout <<  atan2(1,1)         ;\n    std::cout <<  atan2(-1,-1)       ;\n    std::cout <<  atan2(0.1,1)       ;\n    std::cout <<  atan2(0.0001,100)  ;\n    std::cout <<  atan2(0.0,1e-1)    ;\n    std::cout <<  atan2(1.0E-1,-3)   ;\n    std::cout <<  atan2(-1.0E-1,+2)  ;\n    std::cout <<  atan2(+1.0E-1,0)   ;\n    std::cout <<  atan2(0.1E-1,3)    ;\n    std::cout <<  atan2(+0.1E-1,1)   ;\n    std::cout <<  atan2(-0.1E-1,8)   ;\n    std::cout <<  atan2f(1,1)        ;\n    std::cout <<  atan2f(-1,-1)      ;\n    std::cout <<  atan2f(0.1,1)      ;\n    std::cout <<  atan2f(0.0001,100) ;\n    std::cout <<  atan2f(0.0,1e-1)   ;\n    std::cout <<  atan2f(1.0E-1,-3)  ;\n    std::cout <<  atan2f(-1.0E-1,+2) ;\n    std::cout <<  atan2f(+1.0E-1,0)  ;\n    std::cout <<  atan2f(0.1E-1,3)   ;\n    std::cout <<  atan2f(+0.1E-1,1)  ;\n    std::cout <<  atan2f(-0.1E-1,8)  ;\n    std::cout <<  atan2l(1,1)        ;\n    std::cout <<  atan2l(-1,-1)      ;\n    std::cout <<  atan2l(0.1,1)      ;\n    std::cout <<  atan2l(0.0001,100) ;\n    std::cout <<  atan2l(0.0,1e-1)   ;\n    std::cout <<  atan2l(1.0E-1,-3)  ;\n    std::cout <<  atan2l(-1.0E-1,+2) ;\n    std::cout <<  atan2l(+1.0E-1,0)  ;\n    std::cout <<  atan2l(0.1E-1,3)   ;\n    std::cout <<  atan2l(+0.1E-1,1)  ;\n    std::cout <<  atan2l(-0.1E-1,8)  ;\n}" always "void foo()\n{\n    std::cout <<  atan2(1,1)         ;\n    std::cout <<  atan2(-1,-1)       ;\n    std::cout <<  atan2(0.1,1)       ;\n    std::cout <<  atan2(0.0001,100)  ;\n    std::cout <<  atan2(0.0,1e-1)    ;\n    std::cout <<  atan2(1.0E-1,-3)   ;\n    std::cout <<  atan2(-1.0E-1,+2)  ;\n    std::cout <<  atan2(+1.0E-1,0)   ;\n    std::cout <<  atan2(0.1E-1,3)    ;\n    std::cout <<  atan2(+0.1E-1,1)   ;\n    std::cout <<  atan2(-0.1E-1,8)   ;\n    std::cout <<  atan2f(1,1)        ;\n    std::cout <<  atan2f(-1,-1)      ;\n    std::cout <<  atan2f(0.1,1)      ;\n    std::cout <<  atan2f(0.0001,100) ;\n    std::cout <<  atan2f(0.0,1e-1)   ;\n    std::cout <<  atan2f(1.0E-1,-3)  ;\n    std::cout <<  atan2f(-1.0E-1,+2) ;\n    std::cout <<  atan2f(+1.0E-1,0)  ;\n    std::cout <<  atan2f(0.1E-1,3)   ;\n    std::cout <<  atan2f(+0.1E-1,1)  ;\n    std::cout <<  atan2f(-0.1E-1,8)  ;\n    std::cout <<  atan2l(1,1)        ;\n    std::cout <<  atan2l(-1,-1)      ;\n    std::cout <<  atan2l(0.1,1)      ;\n    std::cout <<  atan2l(0.0001,100) ;\n    std::cout <<  atan2l(0.0,1e-1)   ;\n    std::cout <<  atan2l(1.0E-1,-3)  ;\n    std::cout <<  atan2l(-1.0E-1,+2) ;\n    std::cout <<  atan2l(+1.0E-1,0)  ;\n    std::cout <<  atan2l(0.1E-1,3)   ;\n    std::cout <<  atan2l(+0.1E-1,1)  ;\n    std::cout <<  atan2l(-0.1E-1,8)  ;\n}"
Line 1081
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1081 always 1081
  "" always ""
Line 1083
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1083 always 1083
  "void foo()\n{\n    std::cout <<  atan2(0,0) << std::endl;\n    std::cout <<  atan2f(0,0) << std::endl;\n    std::cout <<  atan2l(0,0) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  atan2(0,0) << std::endl;\n    std::cout <<  atan2f(0,0) << std::endl;\n    std::cout <<  atan2l(0,0) << std::endl;\n}"
Line 1089
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1089 always 1089
  "[test.cpp:3]: (warning) Passing values 0 and 0 to atan2() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and 0 to atan2f() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and 0 to atan2l() leads to implementation-defined result.\n" always "[test.cpp:3]: (warning) Passing values 0 and 0 to atan2() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 0 and 0 to atan2f() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 0 and 0 to atan2l() leads to implementation-defined result.\n"
Line 1096
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1096 always 1096
  "void foo()\n{\n    std::cout <<  fmod(1.0,0) << std::endl;\n    std::cout <<  fmodf(1.0,0) << std::endl;\n    std::cout <<  fmodl(1.0,0) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  fmod(1.0,0) << std::endl;\n    std::cout <<  fmodf(1.0,0) << std::endl;\n    std::cout <<  fmodl(1.0,0) << std::endl;\n}"
Line 1102
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1102 always 1102
  "[test.cpp:3]: (error) Invalid fmod() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:4]: (error) Invalid fmodf() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:5]: (error) Invalid fmodl() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:3]: (warning) Passing values 1.0 and 0 to fmod() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 1.0 and 0 to fmodf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 1.0 and 0 to fmodl() leads to implementation-defined result.\n" always "[test.cpp:3]: (error) Invalid fmod() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:4]: (error) Invalid fmodf() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:5]: (error) Invalid fmodl() argument nr 2. The value is 0 but the valid values are '!0.0'.\n[test.cpp:3]: (warning) Passing values 1.0 and 0 to fmod() leads to implementation-defined result.\n[test.cpp:4]: (warning) Passing values 1.0 and 0 to fmodf() leads to implementation-defined result.\n[test.cpp:5]: (warning) Passing values 1.0 and 0 to fmodl() leads to implementation-defined result.\n"
Line 1109
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1109 always 1109
  "void foo()\n{\n    std::cout <<  fmod(1.0,1) << std::endl;\n    std::cout <<  fmodf(1.0,1) << std::endl;\n    std::cout <<  fmodl(1.0,1) << std::endl;\n}" always "void foo()\n{\n    std::cout <<  fmod(1.0,1) << std::endl;\n    std::cout <<  fmodf(1.0,1) << std::endl;\n    std::cout <<  fmodl(1.0,1) << std::endl;\n}"
Line 1115
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1115 always 1115
  "" always ""
Line 1119
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1119 always 1119
  "void foo() {\n    print(exp(x) - 1);\n    print(log(1 + x));\n    print(1 - erf(x));\n}" always "void foo() {\n    print(exp(x) - 1);\n    print(log(1 + x));\n    print(1 - erf(x));\n}"
Line 1124
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1124 always 1124
  "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" always "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n"
Line 1128
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1128 always 1128
  "void foo() {\n    print(exp(x) - 1.0);\n    print(log(1.0 + x));\n    print(1.0 - erf(x));\n}" always "void foo() {\n    print(exp(x) - 1.0);\n    print(log(1.0 + x));\n    print(1.0 - erf(x));\n}"
Line 1133
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1133 always 1133
  "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" always "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n"
Line 1137
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1137 always 1137
  "void foo() {\n    print(exp(3 + x*f(a)) - 1);\n    print(log(x*4 + 1));\n    print(1 - erf(34*x + f(x) - c));\n}" always "void foo() {\n    print(exp(3 + x*f(a)) - 1);\n    print(log(x*4 + 1));\n    print(1 - erf(34*x + f(x) - c));\n}"
Line 1142
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1142 always 1142
  "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n" always "[test.cpp:2]: (style) Expression 'exp(x) - 1' can be replaced by 'expm1(x)' to avoid loss of precision.\n[test.cpp:3]: (style) Expression 'log(1 + x)' can be replaced by 'log1p(x)' to avoid loss of precision.\n[test.cpp:4]: (style) Expression '1 - erf(x)' can be replaced by 'erfc(x)' to avoid loss of precision.\n"
Line 1146
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1146 always 1146
  "void foo() {\n    print(2*exp(x) - 1);\n    print(1 - erf(x)/2.0);\n}" always "void foo() {\n    print(2*exp(x) - 1);\n    print(1 - erf(x)/2.0);\n}"
Line 1150
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1150 always 1150
  "" always ""
Line 1156
  158 always 158
  = always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 1165
  xmldata always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  sizeof always 158
  ( always 158
  xmldata always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp,foo::mystrcmp\">\n    <use-retval/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 1168
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1168 always 1168
  "void foo() {\n  mystrcmp(a, b);\n}" always "void foo() {\n  mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1171
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1171 always 1171
  "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n" always "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n"
Line 1173
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1173 always 1173
  "void foo() {\n  foo::mystrcmp(a, b);\n}" always "void foo() {\n  foo::mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1176
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1176 always 1176
  "[test.cpp:2]: (warning) Return value of function foo::mystrcmp() is not used.\n" always "[test.cpp:2]: (warning) Return value of function foo::mystrcmp() is not used.\n"
Line 1178
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1178 always 1178
  "void f() {\n  foo x;\n  x.mystrcmp(a, b);\n}" always "void f() {\n  foo x;\n  x.mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1182
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1182 always 1182
  "[test.cpp:3]: (warning) Return value of function x.mystrcmp() is not used.\n" always "[test.cpp:3]: (warning) Return value of function x.mystrcmp() is not used.\n"
Line 1184
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1184 always 1184
  "bool mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}" always "bool mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1188
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1188 always 1188
  "[test.cpp:3]: (warning) Return value of function mystrcmp() is not used.\n" always "[test.cpp:3]: (warning) Return value of function mystrcmp() is not used.\n"
Line 1190
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1190 always 1190
  "void mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}" always "void mystrcmp(char* a, char* b);\nvoid foo() {\n    mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1194
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1194 always 1194
  "" always ""
Line 1196
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1196 always 1196
  "void foo() {\n    class mystrcmp { mystrcmp() {} };\n}" always "void foo() {\n    class mystrcmp { mystrcmp() {} };\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1199
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1199 always 1199
  "" always ""
Line 1201
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1201 always 1201
  "void foo() {\n    return mystrcmp(a, b);\n}" always "void foo() {\n    return mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1204
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1204 always 1204
  "" always ""
Line 1206
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1206 always 1206
  "void foo() {\n    return foo::mystrcmp(a, b);\n}" always "void foo() {\n    return foo::mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1209
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1209 always 1209
  "" always ""
Line 1211
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1211 always 1211
  "void foo() {\n    if(mystrcmp(a, b));\n}" always "void foo() {\n    if(mystrcmp(a, b));\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1214
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1214 always 1214
  "" always ""
Line 1216
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1216 always 1216
  "void foo() {\n    bool b = mystrcmp(a, b);\n}" always "void foo() {\n    bool b = mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1219
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1219 always 1219
  "" always ""
Line 1222
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1222 always 1222
  "void foo() {\n    MyStrCmp mystrcmp(x, y);\n}" always "void foo() {\n    MyStrCmp mystrcmp(x, y);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1225
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1225 always 1225
  "" always ""
Line 1228
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1228 always 1228
  "void foo() {\n    abc::def.mystrcmp(a,b);\n}" always "void foo() {\n    abc::def.mystrcmp(a,b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1231
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1231 always 1231
  "" always ""
Line 1234
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1234 always 1234
  "int main() {\n    auto lambda = [](double value) {\n        double rounded = floor(value + 0.5);\n        printf(\"Rounded value = %f\\n\", rounded);\n    };\n    lambda(13.3);\n    return 0;\n}" always "int main() {\n    auto lambda = [](double value) {\n        double rounded = floor(value + 0.5);\n        printf(\"Rounded value = %f\\n\", rounded);\n    };\n    lambda(13.3);\n    return 0;\n}"
Line 1242
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1242 always 1242
  "" always ""
Line 1245
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1245 always 1245
  "void foo(size_t size) {\n   void * res{malloc(size)};\n}" always "void foo(size_t size) {\n   void * res{malloc(size)};\n}"
Line 1248
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1248 always 1248
  "" always ""
Line 1251
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1251 always 1251
  "void foo() {\n   int x{mystrcmp(a,b)};\n}" always "void foo() {\n   int x{mystrcmp(a,b)};\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1254
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1254 always 1254
  "" always ""
Line 1257
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1257 always 1257
  "void foo() {\n   int x({mystrcmp(a,b)});\n}" always "void foo() {\n   int x({mystrcmp(a,b)});\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1260
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1260 always 1260
  "" always ""
Line 1262
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1262 always 1262
  "void foo() {\n  DEBUG(123)(mystrcmp(a,b))(fd);\n}" always "void foo() {\n  DEBUG(123)(mystrcmp(a,b))(fd);\n}"
  "test.c" always "test.c"
  & {lifetime[Address]=(settings2),!0}
Line 1265
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1265 always 1265
  "struct teststruct {\n    int testfunc1() __attribute__ ((warn_unused_result)) { return 1; }\n    [[nodiscard]] int testfunc2() { return 1; }\n    void foo() { testfunc1(); testfunc2(); }\n};\nint main() {\n    teststruct TestStruct1;\n    TestStruct1.testfunc1();\n    TestStruct1.testfunc2();\n    return 0;\n}" always "struct teststruct {\n    int testfunc1() __attribute__ ((warn_unused_result)) { return 1; }\n    [[nodiscard]] int testfunc2() { return 1; }\n    void foo() { testfunc1(); testfunc2(); }\n};\nint main() {\n    teststruct TestStruct1;\n    TestStruct1.testfunc1();\n    TestStruct1.testfunc2();\n    return 0;\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1276
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1276 always 1276
  "[test.cpp:4]: (warning) Return value of function testfunc1() is not used.\n[test.cpp:4]: (warning) Return value of function testfunc2() is not used.\n[test.cpp:8]: (warning) Return value of function TestStruct1.testfunc1() is not used.\n[test.cpp:9]: (warning) Return value of function TestStruct1.testfunc2() is not used.\n" always "[test.cpp:4]: (warning) Return value of function testfunc1() is not used.\n[test.cpp:4]: (warning) Return value of function testfunc2() is not used.\n[test.cpp:8]: (warning) Return value of function TestStruct1.testfunc1() is not used.\n[test.cpp:9]: (warning) Return value of function TestStruct1.testfunc2() is not used.\n"
Line 1282
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1282 always 1282
  "template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}" always "template <typename... a> uint8_t b(std::tuple<uint8_t> d) {\n  std::tuple<a...> c{std::move(d)};\n  return std::get<0>(c);\n}"
Line 1286
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1286 always 1286
  "" always ""
Line 1288
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1288 always 1288
  "struct A { int x; };\ntemplate <class... Ts>\nA f(int x, Ts... xs) {\n    return {std::move(x), static_cast<int>(xs)...};\n}\nA g() { return f(1); }" always "struct A { int x; };\ntemplate <class... Ts>\nA f(int x, Ts... xs) {\n    return {std::move(x), static_cast<int>(xs)...};\n}\nA g() { return f(1); }"
Line 1294
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1294 always 1294
  "" always ""
Line 1297
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1297 always 1297
  "void foo() {\n  !mystrcmp(a, b);\n}" always "void foo() {\n  !mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1300
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1300 always 1300
  "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n" always "[test.cpp:2]: (warning) Return value of function mystrcmp() is not used.\n"
Line 1306
  "style" always "style"
Line 1307
  162 always 162
  = always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>" always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 1316
  xmldata always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
  sizeof always 162
  ( always 162
  xmldata always "<?xml version=\"1.0\"?>\n<def version=\"2\">\n  <function name=\"mystrcmp\">\n    <use-retval type=\"error-code\"/>\n    <arg nr=\"1\"/>\n    <arg nr=\"2\"/>\n  </function>\n</def>"
Line 1319
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1319 always 1319
  "void foo() {\n  mystrcmp(a, b);\n}" always "void foo() {\n  mystrcmp(a, b);\n}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(settings2),!0}
Line 1322
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1322 always 1322
  "[test.cpp:2]: (style) Error code from the return value of function mystrcmp() is not used.\n" always "[test.cpp:2]: (style) Error code from the return value of function mystrcmp() is not used.\n"
Line 1326
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1326 always 1326
  "void f() {\n    memset(p, 10, 0x0);\n}" always "void f() {\n    memset(p, 10, 0x0);\n}"
Line 1329
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1329 always 1329
  "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" always "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n"
Line 1331
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1331 always 1331
  "void f() {\n    memset(p, sizeof(p), 0);\n}" always "void f() {\n    memset(p, sizeof(p), 0);\n}"
Line 1334
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1334 always 1334
  "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" always "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n"
Line 1336
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1336 always 1336
  "void f() {\n    memset(p, sizeof(p), i);\n}" always "void f() {\n    memset(p, sizeof(p), i);\n}"
Line 1339
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1339 always 1339
  "" always ""
Line 1342
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1342 always 1342
  "class c {\n  void memset( int i );\n  void f( void )   {\n     memset( 0 );\n  }\n};" always "class c {\n  void memset( int i );\n  void f( void )   {\n     memset( 0 );\n  }\n};"
Line 1348
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1348 always 1348
  "" always ""
Line 1351
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1351 always 1351
  "void f() {\n    memset(&tm, sizeof(tm), 0);\n}" always "void f() {\n    memset(&tm, sizeof(tm), 0);\n}"
Line 1354
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1354 always 1354
  "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n" always "[test.cpp:2]: (warning) memset() called to fill 0 bytes.\n"
Line 1359
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1359 always 1359
  "void f() {\n    int* is = new int[10];\n    memset(is, 1.0f, 40);\n    int* is2 = new int[10];\n    memset(is2, 0.1f, 40);\n}" always "void f() {\n    int* is = new int[10];\n    memset(is, 1.0f, 40);\n    int* is2 = new int[10];\n    memset(is2, 0.1f, 40);\n}"
Line 1365
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1365 always 1365
  "[test.cpp:3]: (portability) The 2nd memset() argument '1.0f' is a float, its representation is implementation defined.\n[test.cpp:5]: (portability) The 2nd memset() argument '0.1f' is a float, its representation is implementation defined.\n" always "[test.cpp:3]: (portability) The 2nd memset() argument '1.0f' is a float, its representation is implementation defined.\n[test.cpp:5]: (portability) The 2nd memset() argument '0.1f' is a float, its representation is implementation defined.\n"
Line 1368
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1368 always 1368
  "void f() {\n    int* is = new int[10];\n    float g = computeG();\n    memset(is, g, 40);\n}" always "void f() {\n    int* is = new int[10];\n    float g = computeG();\n    memset(is, g, 40);\n}"
Line 1373
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1373 always 1373
  "[test.cpp:4]: (portability) The 2nd memset() argument 'g' is a float, its representation is implementation defined.\n" always "[test.cpp:4]: (portability) The 2nd memset() argument 'g' is a float, its representation is implementation defined.\n"
Line 1375
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1375 always 1375
  "void f() {\n    int* is = new int[10];\n    memset(is, 0.0f, 40);\n}" always "void f() {\n    int* is = new int[10];\n    memset(is, 0.0f, 40);\n}"
Line 1379
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1379 always 1379
  "" always ""
Line 1381
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1381 always 1381
  "void f() {\n    float x = 2.3f;\n    memset(a, (x?64:0), 40);\n}" always "void f() {\n    float x = 2.3f;\n    memset(a, (x?64:0), 40);\n}"
Line 1385
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1385 always 1385
  "" always ""
Line 1387
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1387 always 1387
  "void f() {\n    short ss[] = {1, 2};\n    memset(ss, 256, 4);\n    short ss2[2];\n    memset(ss2, -129, 4);\n}" always "void f() {\n    short ss[] = {1, 2};\n    memset(ss, 256, 4);\n    short ss2[2];\n    memset(ss2, -129, 4);\n}"
Line 1393
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1393 always 1393
  "[test.cpp:3]: (warning) The 2nd memset() argument '256' doesn't fit into an 'unsigned char'.\n[test.cpp:5]: (warning) The 2nd memset() argument '-129' doesn't fit into an 'unsigned char'.\n" always "[test.cpp:3]: (warning) The 2nd memset() argument '256' doesn't fit into an 'unsigned char'.\n[test.cpp:5]: (warning) The 2nd memset() argument '-129' doesn't fit into an 'unsigned char'.\n"
Line 1396
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1396 always 1396
  "void f() {\n    int is[10];\n    memset(is, 0xEE, 40);\n    unsigned char* cs = malloc(256);\n    memset(cs, -1, 256);\n    short* ss[30];\n    memset(ss, -128, 60);\n    char cs2[30];\n    memset(cs2, 255, 30);\n    char cs3[30];\n    memset(cs3, 0, 30);\n}" always "void f() {\n    int is[10];\n    memset(is, 0xEE, 40);\n    unsigned char* cs = malloc(256);\n    memset(cs, -1, 256);\n    short* ss[30];\n    memset(ss, -128, 60);\n    char cs2[30];\n    memset(cs2, 255, 30);\n    char cs3[30];\n    memset(cs3, 0, 30);\n}"
Line 1408
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1408 always 1408
  "" always ""
Line 1410
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1410 always 1410
  "void f() {\n    int is[10];\n    const int i = g();\n    memset(is, 1.0f + i, 40);\n}" always "void f() {\n    int is[10];\n    const int i = g();\n    memset(is, 1.0f + i, 40);\n}"
Line 1415
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1415 always 1415
  "[test.cpp:4]: (portability) The 2nd memset() argument '1.0f+i' is a float, its representation is implementation defined.\n" always "[test.cpp:4]: (portability) The 2nd memset() argument '1.0f+i' is a float, its representation is implementation defined.\n"
Line 1419
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1419 always 1419
  "int f() {}" always "int f() {}"
Line 1420
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1420 always 1420
  "[test.cpp:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1423
  18 always 18
  = always "int main(void) {}"
  "int main(void) {}" always "int main(void) {}"
Line 1427
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1427 always 1427
  code always "int main(void) {}"
  "test.c" always "test.c"
  & {lifetime[Address]=(s),!0}
Line 1428
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1428 always 1428
  "[test.c:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.c:1]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1431
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1431 always 1431
  code always "int main(void) {}"
  "test.c" always "test.c"
  & {lifetime[Address]=(s),!0}
Line 1432
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1432 always 1432
  "" always ""
Line 1434
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1434 always 1434
  code always "int main(void) {}"
  "test.cpp" always "test.cpp"
  & {lifetime[Address]=(s),!0}
Line 1435
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1435 always 1435
  "" always ""
Line 1438
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1438 always 1438
  "F(A,B) { x=1; }" always "F(A,B) { x=1; }"
Line 1439
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1439 always 1439
  "" always ""
Line 1441
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1441 always 1441
  "auto foo4() -> void {}" always "auto foo4() -> void {}"
Line 1442
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1442 always 1442
  "" always ""
Line 1444
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1444 always 1444
  "void STDCALL foo() {}" always "void STDCALL foo() {}"
Line 1445
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1445 always 1445
  "" always ""
Line 1447
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1447 always 1447
  "void operator=(int y) { x=y; }" always "void operator=(int y) { x=y; }"
Line 1448
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1448 always 1448
  "" always ""
Line 1450
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1450 always 1450
  "int f() {\nback:\n    return 0;\nng:\n    x=y;\n    goto back;\n}\n" always "int f() {\nback:\n    return 0;\nng:\n    x=y;\n    goto back;\n}\n"
Line 1457
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1457 always 1457
  "" always ""
Line 1460
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1460 always 1460
  "int foo(int x) {\n  return 1;\n  (void)x;\n}" always "int foo(int x) {\n  return 1;\n  (void)x;\n}"
Line 1464
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1464 always 1464
  "" always ""
Line 1466
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1466 always 1466
  "int foo(int x) {\n  if (x) goto out;\n  return 1;\nout:\n}" always "int foo(int x) {\n  if (x) goto out;\n  return 1;\nout:\n}"
Line 1471
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1471 always 1471
  "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1474
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1474 always 1474
  "int f() {\n    switch (x) {\n        case 1: break;\n        case 2: return 1;\n    }\n}" always "int f() {\n    switch (x) {\n        case 1: break;\n        case 2: return 1;\n    }\n}"
Line 1480
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1480 always 1480
  "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1482
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1482 always 1482
  "int f() {\n    switch (x) {\n        case 1: return 2; break;\n        default: return 1;\n    }\n}" always "int f() {\n    switch (x) {\n        case 1: return 2; break;\n        default: return 1;\n    }\n}"
Line 1488
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1488 always 1488
  "" always ""
Line 1490
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1490 always 1490
  "bool test(unsigned char v1, int v2) {\n    switch (v1) {\n        case 0:\n            switch (v2) {\n            case 48000:\n                break;\n            }\n            return false;\n        default:\n            return true;\n    }\n}" always "bool test(unsigned char v1, int v2) {\n    switch (v1) {\n        case 0:\n            switch (v2) {\n            case 48000:\n                break;\n            }\n            return false;\n        default:\n            return true;\n    }\n}"
Line 1502
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1502 always 1502
  "" always ""
Line 1505
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1505 always 1505
  "int f(int x) {\n    if (x) {\n        return 1;\n    }\n}" always "int f(int x) {\n    if (x) {\n        return 1;\n    }\n}"
Line 1510
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1510 always 1510
  "[test.cpp:4]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:4]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1512
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1512 always 1512
  "int f(int x) {\n    if (x) {\n        ;\n    } else {\n        return 1;\n    }\n}" always "int f(int x) {\n    if (x) {\n        ;\n    } else {\n        return 1;\n    }\n}"
Line 1519
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1519 always 1519
  "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:3]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1521
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1521 always 1521
  "int f() {\n    if (!0) {\n        return 1;\n    }\n}" always "int f() {\n    if (!0) {\n        return 1;\n    }\n}"
Line 1526
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1526 always 1526
  "" always ""
Line 1528
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1528 always 1528
  "int f() {\n    if (!0) {}\n}" always "int f() {\n    if (!0) {}\n}"
Line 1531
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1531 always 1531
  "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1534
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1534 always 1534
  "int f(int x) {\n    while (1) {\n        dostuff();\n    }\n}" always "int f(int x) {\n    while (1) {\n        dostuff();\n    }\n}"
Line 1539
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1539 always 1539
  "" always ""
Line 1542
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1542 always 1542
  "std::pair<int, int> typeDecl(int tok) {\n    if (!tok)\n        return {};\n    else\n        return {1, 2};\n}" always "std::pair<int, int> typeDecl(int tok) {\n    if (!tok)\n        return {};\n    else\n        return {1, 2};\n}"
Line 1548
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1548 always 1548
  "" always ""
Line 1551
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1551 always 1551
  "int f(int x) { exit(0); }" always "int f(int x) { exit(0); }"
Line 1552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1552 always 1552
  "" always ""
Line 1554
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1554 always 1554
  "int f(int x) { assert(0); }" always "int f(int x) { assert(0); }"
Line 1555
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1555 always 1555
  "" always ""
Line 1557
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1557 always 1557
  "int f(int x) { if (x) return 1; else return bar({1}, {}); }" always "int f(int x) { if (x) return 1; else return bar({1}, {}); }"
Line 1558
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1558 always 1558
  "" always ""
Line 1560
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1560 always 1560
  "auto f() -> void {}" always "auto f() -> void {}"
Line 1561
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1561 always 1561
  "" always ""
Line 1563
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1563 always 1563
  "struct S1 {\n    S1& operator=(const S1& r) { if (this != &r) { i = r.i; } }\n    int i;\n};\nstruct S2 {\n    S2& operator=(const S2& s) { if (this != &s) { j = s.j; } return *this; }\n    int j;\n};\nstruct S3 {\n    S3& operator=(const S3& t) { if (this != &t) { k = t.k; return *this; } }\n    int k;\n};\n" always "struct S1 {\n    S1& operator=(const S1& r) { if (this != &r) { i = r.i; } }\n    int i;\n};\nstruct S2 {\n    S2& operator=(const S2& s) { if (this != &s) { j = s.j; } return *this; }\n    int j;\n};\nstruct S3 {\n    S3& operator=(const S3& t) { if (this != &t) { k = t.k; return *this; } }\n    int k;\n};\n"
Line 1575
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1575 always 1575
  "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n[test.cpp:10]: (error) Found a exit path from function with non-void return type that has missing return statement\n" always "[test.cpp:2]: (error) Found a exit path from function with non-void return type that has missing return statement\n[test.cpp:10]: (error) Found a exit path from function with non-void return type that has missing return statement\n"
Line 1582
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1582 always 1582
  "struct A{}; A f() { A var; return std::move(var); }" always "struct A{}; A f() { A var; return std::move(var); }"
Line 1583
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1583 always 1583
  "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" always "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n"
Line 1589
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1589 always 1589
  "struct A{}; A f() { return std::move( A() ); }" always "struct A{}; A f() { return std::move( A() ); }"
Line 1590
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1590 always 1590
  "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" always "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n"
Line 1596
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1596 always 1596
  "struct A{}; A f() { return std::move(A{}); }" always "struct A{}; A f() { return std::move(A{}); }"
Line 1597
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1597 always 1597
  "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" always "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n"
Line 1603
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1603 always 1603
  "struct A{}; A f(A a) { return std::move(A{}); }" always "struct A{}; A f(A a) { return std::move(A{}); }"
Line 1604
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1604 always 1604
  "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n" always "[test.cpp:1]: (performance) Using std::move for returning object by-value from function will affect copy elision optimization. More: https://isocpp.github.io/CppCoreGuidelines/CppCoreGuidelines#Rf-return-move-local\n"
Line 1609
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1609 always 1609
  "struct A{} a; A f1() { return std::move(a); }\nA f2() { volatile A var; return std::move(var); }" always "struct A{} a; A f1() { return std::move(a); }\nA f2() { volatile A var; return std::move(var); }"
Line 1611
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testfunctions.cpp" always "cppcheck-2.8/test/testfunctions.cpp"
  1611 always 1611
  "" always ""
