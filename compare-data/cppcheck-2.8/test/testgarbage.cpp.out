

##file cppcheck-2.8/test/testsuite.h

1:
|
31:
32: class options ;
33:
34: class TestFixture : public ErrorLogger {
35: private:
36: static std :: ostringstream errmsg@var1 ;
37: static unsigned int countTests@var2 ;
38: static unsigned long fails_counter@var3 ;
39: static unsigned long todos_counter@var4 ;
40: static unsigned long succeeded_todos_counter@var5 ;
41: static std :: set < std :: string > missingLibs@var6 ;
42: bool mVerbose@var7 ;
43: std :: string mTemplateFormat@var8 ;
44: std :: string mTemplateLocation@var9 ;
45: std :: string mTestname@var10 ;
46:
47: protected:
48: std :: string exename@var11 ;
49: std :: string testToRun@var12 ;
50: bool quiet_tests@var13 ;
51:
52: virtual void run ( ) = 0 ;
53:
54: bool prepareTest ( const char testname@var14 [ ] ) ;
55: std :: string getLocationStr ( const char * const filename@var15 , const unsigned int linenr@var16 ) const ;
56:
57: bool assert_ ( const char * const filename@var17 , const unsigned int linenr@var18 , const bool condition@var19 ) const ;
58:
59: template < typename T , typename U >
60: bool assertEquals ( const char * const filename@var20 , const unsigned int linenr@var21 , const T & expected@var22 , const U & actual@var23 , const std :: string & msg@var24 = emptyString ) const {
61: if (@expr1073741979 expected@var22 !=@expr1073741980 actual@var23 ) {
62: std ::@expr1073741981 ostringstream expectedStr@var25 ;
63: expectedStr@var25 <<@expr1073741982 expected@var22 ;
64: std ::@expr1073741983 ostringstream actualStr@var26 ;
65: actualStr@var26 <<@expr1073741984 actual@var23 ;
66:
67: assertEqualsFailed (@expr1073741985 filename@var20 , linenr@var21 , expectedStr@var25 .@expr1073741986 str (@expr1073741987 ) , actualStr@var26 .@expr1073741988 str (@expr1073741989 ) , msg@var24 ) ;
68: }
69: return expected@var22 ==@expr1073741990 actual@var23 ;
70: }
71:
72:
73:
74: void assertEqualsFailed ( const char * const filename@var27 , const unsigned int linenr@var28 , const std :: string & expected@var29 , const std :: string & actual@var30 , const std :: string & msg@var31 ) const ;
75:
76: bool assertEquals ( const char * const filename@var32 , const unsigned int linenr@var33 , const std :: string & expected@var34 , const std :: string & actual@var35 , const std :: string & msg@var36 = emptyString ) const ;
77: void assertEqualsWithoutLineNumbers ( const char * const filename@var37 , const unsigned int linenr@var38 , const std :: string & expected@var39 , const std :: string & actual@var40 , const std :: string & msg@var41 = emptyString ) const ;
78: bool assertEquals ( const char * const filename@var42 , const unsigned int linenr@var43 , const char expected@var44 [ ] , const std :: string & actual@var45 , const std :: string & msg@var46 = emptyString ) const ;
79: bool assertEquals ( const char * const filename@var47 , const unsigned int linenr@var48 , const char expected@var49 [ ] , const char actual@var50 [ ] , const std :: string & msg@var51 = emptyString ) const ;
80: bool assertEquals ( const char * const filename@var52 , const unsigned int linenr@var53 , const std :: string & expected@var54 , const char actual@var55 [ ] , const std :: string & msg@var56 = emptyString ) const ;
81: bool assertEquals ( const char * const filename@var57 , const unsigned int linenr@var58 , const long long expected@var59 , const long long actual@var60 , const std :: string & msg@var61 = emptyString ) const ;
82: void assertEqualsDouble ( const char * const filename@var62 , const unsigned int linenr@var63 , const double expected@var64 , const double actual@var65 , const double tolerance@var66 , const std :: string & msg@var67 = emptyString ) const ;
83:
84: void todoAssertEquals ( const char * const filename@var68 , const unsigned int linenr@var69 , const std :: string & wanted@var70 ,
85: const std :: string & current@var71 , const std :: string & actual@var72 ) const ;
86: void todoAssertEquals ( const char * const filename@var73 , const unsigned int linenr@var74 , const char wanted@var75 [ ] ,
87: const char current@var76 [ ] , const std :: string & actual@var77 ) const ;
88: void todoAssertEquals ( const char * const filename@var78 , const unsigned int linenr@var79 , const long long wanted@var80 ,
89: const long long current@var81 , const long long actual@var82 ) const ;
90: void assertThrow ( const char * const filename@var83 , const unsigned int linenr@var84 ) const ;
91: void assertThrowFail ( const char * const filename@var85 , const unsigned int linenr@var86 ) const ;
92: void assertNoThrowFail ( const char * const filename@var87 , const unsigned int linenr@var88 ) const ;
93: static void complainMissingLib ( const char * const libname@var89 ) ;
94: static std :: string deleteLineNumber ( const std :: string & message@var90 ) ;
95:
96: void setVerbose ( bool v@var91 ) {
97: mVerbose@var7 =@expr1073741991 v@var91 ;
98: }
99:
100: void setMultiline ( ) {
101: mTemplateFormat@var8 =@expr1073741992 "{file}:{line}:{severity}:{message}" ;
102: mTemplateLocation@var9 =@expr1073741993 "{file}:{line}:note:{info}" ;
103: }
104:
105: void processOptions ( const options & args@var92 ) ;
106: public:
107: void reportOut ( const std :: string & outmsg@var93 , Color c@var94 = Color :: Reset ) override ;
108: void reportErr ( const ErrorMessage & msg@var95 ) override ;
109: void run ( const std :: string & str@var96 ) ;
110: static void printHelp ( ) ;
111: const std :: string classname@var97 ;
112:
113: explicit TestFixture ( const char * const _name@var98 ) ;
114: ~ TestFixture ( ) override { }
115:
116: static unsigned long runTests ( const options & args@var99 ) ;
117: } ;
118:
119: extern std :: ostringstream errout@var100 ;
120: extern std :: ostringstream output@var101 ;

##file cppcheck-2.8/test/testgarbage.cpp

1:
|
31:
32: class TestGarbage : public TestFixture {
33: public:
34: TestGarbage ( ) : TestFixture ( "TestGarbage" ) { }
35:
36: private:
37: Settings settings@var102 ;
38:
39: void run ( ) override {
40: settings@var102 .@expr1073741994 debugwarnings@var103 =@expr1073741995 true ;
41: settings@var102 .@expr1073741996 severity@var104 .@expr1073741997 fill (@expr1073741998 ) ;
42: settings@var102 .@expr1073741999 certainty@var105 .@expr1073742000 fill (@expr1073742001 ) ;
43:
44:
45:
46: $do ${ $if $(@expr1073742002 $prepareTest $(@expr1073742003 "final_class_x" $) $) ${ $setVerbose $(@expr1073742004 $false $) $; final_class_x $(@expr1073742005 $) $; $} $} $while $(@expr1073742006 $false $) ;
47: $do ${ $if $(@expr1073742007 $prepareTest $(@expr1073742008 "wrong_syntax1" $) $) ${ $setVerbose $(@expr1073742009 $false $) $; wrong_syntax1 $(@expr1073742010 $) $; $} $} $while $(@expr1073742011 $false $) ;
48: $do ${ $if $(@expr1073742012 $prepareTest $(@expr1073742013 "wrong_syntax2" $) $) ${ $setVerbose $(@expr1073742014 $false $) $; wrong_syntax2 $(@expr1073742015 $) $; $} $} $while $(@expr1073742016 $false $) ;
49: $do ${ $if $(@expr1073742017 $prepareTest $(@expr1073742018 "wrong_syntax3" $) $) ${ $setVerbose $(@expr1073742019 $false $) $; wrong_syntax3 $(@expr1073742020 $) $; $} $} $while $(@expr1073742021 $false $) ;
50: $do ${ $if $(@expr1073742022 $prepareTest $(@expr1073742023 "wrong_syntax4" $) $) ${ $setVerbose $(@expr1073742024 $false $) $; wrong_syntax4 $(@expr1073742025 $) $; $} $} $while $(@expr1073742026 $false $) ;
51: $do ${ $if $(@expr1073742027 $prepareTest $(@expr1073742028 "wrong_syntax_if_macro" $) $) ${ $setVerbose $(@expr1073742029 $false $) $; wrong_syntax_if_macro $(@expr1073742030 $) $; $} $} $while $(@expr1073742031 $false $) ;
52: $do ${ $if $(@expr1073742032 $prepareTest $(@expr1073742033 "wrong_syntax_class_x_y" $) $) ${ $setVerbose $(@expr1073742034 $false $) $; wrong_syntax_class_x_y $(@expr1073742035 $) $; $} $} $while $(@expr1073742036 $false $) ;
53: $do ${ $if $(@expr1073742037 $prepareTest $(@expr1073742038 "wrong_syntax_anonymous_struct" $) $) ${ $setVerbose $(@expr1073742039 $false $) $; wrong_syntax_anonymous_struct $(@expr1073742040 $) $; $} $} $while $(@expr1073742041 $false $) ;
54: $do ${ $if $(@expr1073742042 $prepareTest $(@expr1073742043 "syntax_case_default" $) $) ${ $setVerbose $(@expr1073742044 $false $) $; syntax_case_default $(@expr1073742045 $) $; $} $} $while $(@expr1073742046 $false $) ;
55: $do ${ $if $(@expr1073742047 $prepareTest $(@expr1073742048 "garbageCode1" $) $) ${ $setVerbose $(@expr1073742049 $false $) $; garbageCode1 $(@expr1073742050 $) $; $} $} $while $(@expr1073742051 $false $) ;
56: $do ${ $if $(@expr1073742052 $prepareTest $(@expr1073742053 "garbageCode2" $) $) ${ $setVerbose $(@expr1073742054 $false $) $; garbageCode2 $(@expr1073742055 $) $; $} $} $while $(@expr1073742056 $false $) ;
57: $do ${ $if $(@expr1073742057 $prepareTest $(@expr1073742058 "garbageCode3" $) $) ${ $setVerbose $(@expr1073742059 $false $) $; garbageCode3 $(@expr1073742060 $) $; $} $} $while $(@expr1073742061 $false $) ;
58: $do ${ $if $(@expr1073742062 $prepareTest $(@expr1073742063 "garbageCode4" $) $) ${ $setVerbose $(@expr1073742064 $false $) $; garbageCode4 $(@expr1073742065 $) $; $} $} $while $(@expr1073742066 $false $) ;
59: $do ${ $if $(@expr1073742067 $prepareTest $(@expr1073742068 "garbageCode5" $) $) ${ $setVerbose $(@expr1073742069 $false $) $; garbageCode5 $(@expr1073742070 $) $; $} $} $while $(@expr1073742071 $false $) ;
60: $do ${ $if $(@expr1073742072 $prepareTest $(@expr1073742073 "garbageCode6" $) $) ${ $setVerbose $(@expr1073742074 $false $) $; garbageCode6 $(@expr1073742075 $) $; $} $} $while $(@expr1073742076 $false $) ;
61: $do ${ $if $(@expr1073742077 $prepareTest $(@expr1073742078 "garbageCode7" $) $) ${ $setVerbose $(@expr1073742079 $false $) $; garbageCode7 $(@expr1073742080 $) $; $} $} $while $(@expr1073742081 $false $) ;
62: $do ${ $if $(@expr1073742082 $prepareTest $(@expr1073742083 "garbageCode8" $) $) ${ $setVerbose $(@expr1073742084 $false $) $; garbageCode8 $(@expr1073742085 $) $; $} $} $while $(@expr1073742086 $false $) ;
63: $do ${ $if $(@expr1073742087 $prepareTest $(@expr1073742088 "garbageCode9" $) $) ${ $setVerbose $(@expr1073742089 $false $) $; garbageCode9 $(@expr1073742090 $) $; $} $} $while $(@expr1073742091 $false $) ;
64: $do ${ $if $(@expr1073742092 $prepareTest $(@expr1073742093 "garbageCode10" $) $) ${ $setVerbose $(@expr1073742094 $false $) $; garbageCode10 $(@expr1073742095 $) $; $} $} $while $(@expr1073742096 $false $) ;
65: $do ${ $if $(@expr1073742097 $prepareTest $(@expr1073742098 "garbageCode12" $) $) ${ $setVerbose $(@expr1073742099 $false $) $; garbageCode12 $(@expr1073742100 $) $; $} $} $while $(@expr1073742101 $false $) ;
66: $do ${ $if $(@expr1073742102 $prepareTest $(@expr1073742103 "garbageCode13" $) $) ${ $setVerbose $(@expr1073742104 $false $) $; garbageCode13 $(@expr1073742105 $) $; $} $} $while $(@expr1073742106 $false $) ;
67: $do ${ $if $(@expr1073742107 $prepareTest $(@expr1073742108 "garbageCode15" $) $) ${ $setVerbose $(@expr1073742109 $false $) $; garbageCode15 $(@expr1073742110 $) $; $} $} $while $(@expr1073742111 $false $) ;
68: $do ${ $if $(@expr1073742112 $prepareTest $(@expr1073742113 "garbageCode16" $) $) ${ $setVerbose $(@expr1073742114 $false $) $; garbageCode16 $(@expr1073742115 $) $; $} $} $while $(@expr1073742116 $false $) ;
69: $do ${ $if $(@expr1073742117 $prepareTest $(@expr1073742118 "garbageCode17" $) $) ${ $setVerbose $(@expr1073742119 $false $) $; garbageCode17 $(@expr1073742120 $) $; $} $} $while $(@expr1073742121 $false $) ;
70: $do ${ $if $(@expr1073742122 $prepareTest $(@expr1073742123 "garbageCode18" $) $) ${ $setVerbose $(@expr1073742124 $false $) $; garbageCode18 $(@expr1073742125 $) $; $} $} $while $(@expr1073742126 $false $) ;
71: $do ${ $if $(@expr1073742127 $prepareTest $(@expr1073742128 "garbageCode20" $) $) ${ $setVerbose $(@expr1073742129 $false $) $; garbageCode20 $(@expr1073742130 $) $; $} $} $while $(@expr1073742131 $false $) ;
72: $do ${ $if $(@expr1073742132 $prepareTest $(@expr1073742133 "garbageCode21" $) $) ${ $setVerbose $(@expr1073742134 $false $) $; garbageCode21 $(@expr1073742135 $) $; $} $} $while $(@expr1073742136 $false $) ;
73: $do ${ $if $(@expr1073742137 $prepareTest $(@expr1073742138 "garbageCode22" $) $) ${ $setVerbose $(@expr1073742139 $false $) $; garbageCode22 $(@expr1073742140 $) $; $} $} $while $(@expr1073742141 $false $) ;
74: $do ${ $if $(@expr1073742142 $prepareTest $(@expr1073742143 "garbageCode23" $) $) ${ $setVerbose $(@expr1073742144 $false $) $; garbageCode23 $(@expr1073742145 $) $; $} $} $while $(@expr1073742146 $false $) ;
75: $do ${ $if $(@expr1073742147 $prepareTest $(@expr1073742148 "garbageCode24" $) $) ${ $setVerbose $(@expr1073742149 $false $) $; garbageCode24 $(@expr1073742150 $) $; $} $} $while $(@expr1073742151 $false $) ;
76: $do ${ $if $(@expr1073742152 $prepareTest $(@expr1073742153 "garbageCode25" $) $) ${ $setVerbose $(@expr1073742154 $false $) $; garbageCode25 $(@expr1073742155 $) $; $} $} $while $(@expr1073742156 $false $) ;
77: $do ${ $if $(@expr1073742157 $prepareTest $(@expr1073742158 "garbageCode26" $) $) ${ $setVerbose $(@expr1073742159 $false $) $; garbageCode26 $(@expr1073742160 $) $; $} $} $while $(@expr1073742161 $false $) ;
78: $do ${ $if $(@expr1073742162 $prepareTest $(@expr1073742163 "garbageCode27" $) $) ${ $setVerbose $(@expr1073742164 $false $) $; garbageCode27 $(@expr1073742165 $) $; $} $} $while $(@expr1073742166 $false $) ;
79: $do ${ $if $(@expr1073742167 $prepareTest $(@expr1073742168 "garbageCode28" $) $) ${ $setVerbose $(@expr1073742169 $false $) $; garbageCode28 $(@expr1073742170 $) $; $} $} $while $(@expr1073742171 $false $) ;
80: $do ${ $if $(@expr1073742172 $prepareTest $(@expr1073742173 "garbageCode30" $) $) ${ $setVerbose $(@expr1073742174 $false $) $; garbageCode30 $(@expr1073742175 $) $; $} $} $while $(@expr1073742176 $false $) ;
81: $do ${ $if $(@expr1073742177 $prepareTest $(@expr1073742178 "garbageCode31" $) $) ${ $setVerbose $(@expr1073742179 $false $) $; garbageCode31 $(@expr1073742180 $) $; $} $} $while $(@expr1073742181 $false $) ;
82: $do ${ $if $(@expr1073742182 $prepareTest $(@expr1073742183 "garbageCode33" $) $) ${ $setVerbose $(@expr1073742184 $false $) $; garbageCode33 $(@expr1073742185 $) $; $} $} $while $(@expr1073742186 $false $) ;
83: $do ${ $if $(@expr1073742187 $prepareTest $(@expr1073742188 "garbageCode34" $) $) ${ $setVerbose $(@expr1073742189 $false $) $; garbageCode34 $(@expr1073742190 $) $; $} $} $while $(@expr1073742191 $false $) ;
84: $do ${ $if $(@expr1073742192 $prepareTest $(@expr1073742193 "garbageCode35" $) $) ${ $setVerbose $(@expr1073742194 $false $) $; garbageCode35 $(@expr1073742195 $) $; $} $} $while $(@expr1073742196 $false $) ;
85: $do ${ $if $(@expr1073742197 $prepareTest $(@expr1073742198 "garbageCode36" $) $) ${ $setVerbose $(@expr1073742199 $false $) $; garbageCode36 $(@expr1073742200 $) $; $} $} $while $(@expr1073742201 $false $) ;
86: $do ${ $if $(@expr1073742202 $prepareTest $(@expr1073742203 "garbageCode37" $) $) ${ $setVerbose $(@expr1073742204 $false $) $; garbageCode37 $(@expr1073742205 $) $; $} $} $while $(@expr1073742206 $false $) ;
87: $do ${ $if $(@expr1073742207 $prepareTest $(@expr1073742208 "garbageCode38" $) $) ${ $setVerbose $(@expr1073742209 $false $) $; garbageCode38 $(@expr1073742210 $) $; $} $} $while $(@expr1073742211 $false $) ;
88: $do ${ $if $(@expr1073742212 $prepareTest $(@expr1073742213 "garbageCode40" $) $) ${ $setVerbose $(@expr1073742214 $false $) $; garbageCode40 $(@expr1073742215 $) $; $} $} $while $(@expr1073742216 $false $) ;
89: $do ${ $if $(@expr1073742217 $prepareTest $(@expr1073742218 "garbageCode41" $) $) ${ $setVerbose $(@expr1073742219 $false $) $; garbageCode41 $(@expr1073742220 $) $; $} $} $while $(@expr1073742221 $false $) ;
90: $do ${ $if $(@expr1073742222 $prepareTest $(@expr1073742223 "garbageCode42" $) $) ${ $setVerbose $(@expr1073742224 $false $) $; garbageCode42 $(@expr1073742225 $) $; $} $} $while $(@expr1073742226 $false $) ;
91: $do ${ $if $(@expr1073742227 $prepareTest $(@expr1073742228 "garbageCode43" $) $) ${ $setVerbose $(@expr1073742229 $false $) $; garbageCode43 $(@expr1073742230 $) $; $} $} $while $(@expr1073742231 $false $) ;
92: $do ${ $if $(@expr1073742232 $prepareTest $(@expr1073742233 "garbageCode44" $) $) ${ $setVerbose $(@expr1073742234 $false $) $; garbageCode44 $(@expr1073742235 $) $; $} $} $while $(@expr1073742236 $false $) ;
93: $do ${ $if $(@expr1073742237 $prepareTest $(@expr1073742238 "garbageCode45" $) $) ${ $setVerbose $(@expr1073742239 $false $) $; garbageCode45 $(@expr1073742240 $) $; $} $} $while $(@expr1073742241 $false $) ;
94: $do ${ $if $(@expr1073742242 $prepareTest $(@expr1073742243 "garbageCode46" $) $) ${ $setVerbose $(@expr1073742244 $false $) $; garbageCode46 $(@expr1073742245 $) $; $} $} $while $(@expr1073742246 $false $) ;
95: $do ${ $if $(@expr1073742247 $prepareTest $(@expr1073742248 "garbageCode47" $) $) ${ $setVerbose $(@expr1073742249 $false $) $; garbageCode47 $(@expr1073742250 $) $; $} $} $while $(@expr1073742251 $false $) ;
96: $do ${ $if $(@expr1073742252 $prepareTest $(@expr1073742253 "garbageCode48" $) $) ${ $setVerbose $(@expr1073742254 $false $) $; garbageCode48 $(@expr1073742255 $) $; $} $} $while $(@expr1073742256 $false $) ;
97: $do ${ $if $(@expr1073742257 $prepareTest $(@expr1073742258 "garbageCode49" $) $) ${ $setVerbose $(@expr1073742259 $false $) $; garbageCode49 $(@expr1073742260 $) $; $} $} $while $(@expr1073742261 $false $) ;
98: $do ${ $if $(@expr1073742262 $prepareTest $(@expr1073742263 "garbageCode51" $) $) ${ $setVerbose $(@expr1073742264 $false $) $; garbageCode51 $(@expr1073742265 $) $; $} $} $while $(@expr1073742266 $false $) ;
99: $do ${ $if $(@expr1073742267 $prepareTest $(@expr1073742268 "garbageCode53" $) $) ${ $setVerbose $(@expr1073742269 $false $) $; garbageCode53 $(@expr1073742270 $) $; $} $} $while $(@expr1073742271 $false $) ;
100: $do ${ $if $(@expr1073742272 $prepareTest $(@expr1073742273 "garbageCode54" $) $) ${ $setVerbose $(@expr1073742274 $false $) $; garbageCode54 $(@expr1073742275 $) $; $} $} $while $(@expr1073742276 $false $) ;
101: $do ${ $if $(@expr1073742277 $prepareTest $(@expr1073742278 "garbageCode55" $) $) ${ $setVerbose $(@expr1073742279 $false $) $; garbageCode55 $(@expr1073742280 $) $; $} $} $while $(@expr1073742281 $false $) ;
102: $do ${ $if $(@expr1073742282 $prepareTest $(@expr1073742283 "garbageCode56" $) $) ${ $setVerbose $(@expr1073742284 $false $) $; garbageCode56 $(@expr1073742285 $) $; $} $} $while $(@expr1073742286 $false $) ;
103: $do ${ $if $(@expr1073742287 $prepareTest $(@expr1073742288 "garbageCode57" $) $) ${ $setVerbose $(@expr1073742289 $false $) $; garbageCode57 $(@expr1073742290 $) $; $} $} $while $(@expr1073742291 $false $) ;
104: $do ${ $if $(@expr1073742292 $prepareTest $(@expr1073742293 "garbageCode58" $) $) ${ $setVerbose $(@expr1073742294 $false $) $; garbageCode58 $(@expr1073742295 $) $; $} $} $while $(@expr1073742296 $false $) ;
105: $do ${ $if $(@expr1073742297 $prepareTest $(@expr1073742298 "garbageCode59" $) $) ${ $setVerbose $(@expr1073742299 $false $) $; garbageCode59 $(@expr1073742300 $) $; $} $} $while $(@expr1073742301 $false $) ;
106: $do ${ $if $(@expr1073742302 $prepareTest $(@expr1073742303 "garbageCode60" $) $) ${ $setVerbose $(@expr1073742304 $false $) $; garbageCode60 $(@expr1073742305 $) $; $} $} $while $(@expr1073742306 $false $) ;
107: $do ${ $if $(@expr1073742307 $prepareTest $(@expr1073742308 "garbageCode61" $) $) ${ $setVerbose $(@expr1073742309 $false $) $; garbageCode61 $(@expr1073742310 $) $; $} $} $while $(@expr1073742311 $false $) ;
108: $do ${ $if $(@expr1073742312 $prepareTest $(@expr1073742313 "garbageCode63" $) $) ${ $setVerbose $(@expr1073742314 $false $) $; garbageCode63 $(@expr1073742315 $) $; $} $} $while $(@expr1073742316 $false $) ;
109: $do ${ $if $(@expr1073742317 $prepareTest $(@expr1073742318 "garbageCode64" $) $) ${ $setVerbose $(@expr1073742319 $false $) $; garbageCode64 $(@expr1073742320 $) $; $} $} $while $(@expr1073742321 $false $) ;
110: $do ${ $if $(@expr1073742322 $prepareTest $(@expr1073742323 "garbageCode65" $) $) ${ $setVerbose $(@expr1073742324 $false $) $; garbageCode65 $(@expr1073742325 $) $; $} $} $while $(@expr1073742326 $false $) ;
111: $do ${ $if $(@expr1073742327 $prepareTest $(@expr1073742328 "garbageCode66" $) $) ${ $setVerbose $(@expr1073742329 $false $) $; garbageCode66 $(@expr1073742330 $) $; $} $} $while $(@expr1073742331 $false $) ;
112: $do ${ $if $(@expr1073742332 $prepareTest $(@expr1073742333 "garbageCode68" $) $) ${ $setVerbose $(@expr1073742334 $false $) $; garbageCode68 $(@expr1073742335 $) $; $} $} $while $(@expr1073742336 $false $) ;
113: $do ${ $if $(@expr1073742337 $prepareTest $(@expr1073742338 "garbageCode69" $) $) ${ $setVerbose $(@expr1073742339 $false $) $; garbageCode69 $(@expr1073742340 $) $; $} $} $while $(@expr1073742341 $false $) ;
114: $do ${ $if $(@expr1073742342 $prepareTest $(@expr1073742343 "garbageCode70" $) $) ${ $setVerbose $(@expr1073742344 $false $) $; garbageCode70 $(@expr1073742345 $) $; $} $} $while $(@expr1073742346 $false $) ;
115: $do ${ $if $(@expr1073742347 $prepareTest $(@expr1073742348 "garbageCode71" $) $) ${ $setVerbose $(@expr1073742349 $false $) $; garbageCode71 $(@expr1073742350 $) $; $} $} $while $(@expr1073742351 $false $) ;
116: $do ${ $if $(@expr1073742352 $prepareTest $(@expr1073742353 "garbageCode72" $) $) ${ $setVerbose $(@expr1073742354 $false $) $; garbageCode72 $(@expr1073742355 $) $; $} $} $while $(@expr1073742356 $false $) ;
117: $do ${ $if $(@expr1073742357 $prepareTest $(@expr1073742358 "garbageCode73" $) $) ${ $setVerbose $(@expr1073742359 $false $) $; garbageCode73 $(@expr1073742360 $) $; $} $} $while $(@expr1073742361 $false $) ;
118: $do ${ $if $(@expr1073742362 $prepareTest $(@expr1073742363 "garbageCode74" $) $) ${ $setVerbose $(@expr1073742364 $false $) $; garbageCode74 $(@expr1073742365 $) $; $} $} $while $(@expr1073742366 $false $) ;
119: $do ${ $if $(@expr1073742367 $prepareTest $(@expr1073742368 "garbageCode76" $) $) ${ $setVerbose $(@expr1073742369 $false $) $; garbageCode76 $(@expr1073742370 $) $; $} $} $while $(@expr1073742371 $false $) ;
120: $do ${ $if $(@expr1073742372 $prepareTest $(@expr1073742373 "garbageCode77" $) $) ${ $setVerbose $(@expr1073742374 $false $) $; garbageCode77 $(@expr1073742375 $) $; $} $} $while $(@expr1073742376 $false $) ;
121: $do ${ $if $(@expr1073742377 $prepareTest $(@expr1073742378 "garbageCode78" $) $) ${ $setVerbose $(@expr1073742379 $false $) $; garbageCode78 $(@expr1073742380 $) $; $} $} $while $(@expr1073742381 $false $) ;
122: $do ${ $if $(@expr1073742382 $prepareTest $(@expr1073742383 "garbageCode79" $) $) ${ $setVerbose $(@expr1073742384 $false $) $; garbageCode79 $(@expr1073742385 $) $; $} $} $while $(@expr1073742386 $false $) ;
123: $do ${ $if $(@expr1073742387 $prepareTest $(@expr1073742388 "garbageCode80" $) $) ${ $setVerbose $(@expr1073742389 $false $) $; garbageCode80 $(@expr1073742390 $) $; $} $} $while $(@expr1073742391 $false $) ;
124: $do ${ $if $(@expr1073742392 $prepareTest $(@expr1073742393 "garbageCode81" $) $) ${ $setVerbose $(@expr1073742394 $false $) $; garbageCode81 $(@expr1073742395 $) $; $} $} $while $(@expr1073742396 $false $) ;
125: $do ${ $if $(@expr1073742397 $prepareTest $(@expr1073742398 "garbageCode82" $) $) ${ $setVerbose $(@expr1073742399 $false $) $; garbageCode82 $(@expr1073742400 $) $; $} $} $while $(@expr1073742401 $false $) ;
126: $do ${ $if $(@expr1073742402 $prepareTest $(@expr1073742403 "garbageCode83" $) $) ${ $setVerbose $(@expr1073742404 $false $) $; garbageCode83 $(@expr1073742405 $) $; $} $} $while $(@expr1073742406 $false $) ;
127: $do ${ $if $(@expr1073742407 $prepareTest $(@expr1073742408 "garbageCode84" $) $) ${ $setVerbose $(@expr1073742409 $false $) $; garbageCode84 $(@expr1073742410 $) $; $} $} $while $(@expr1073742411 $false $) ;
128: $do ${ $if $(@expr1073742412 $prepareTest $(@expr1073742413 "garbageCode85" $) $) ${ $setVerbose $(@expr1073742414 $false $) $; garbageCode85 $(@expr1073742415 $) $; $} $} $while $(@expr1073742416 $false $) ;
129: $do ${ $if $(@expr1073742417 $prepareTest $(@expr1073742418 "garbageCode86" $) $) ${ $setVerbose $(@expr1073742419 $false $) $; garbageCode86 $(@expr1073742420 $) $; $} $} $while $(@expr1073742421 $false $) ;
130: $do ${ $if $(@expr1073742422 $prepareTest $(@expr1073742423 "garbageCode87" $) $) ${ $setVerbose $(@expr1073742424 $false $) $; garbageCode87 $(@expr1073742425 $) $; $} $} $while $(@expr1073742426 $false $) ;
131: $do ${ $if $(@expr1073742427 $prepareTest $(@expr1073742428 "garbageCode88" $) $) ${ $setVerbose $(@expr1073742429 $false $) $; garbageCode88 $(@expr1073742430 $) $; $} $} $while $(@expr1073742431 $false $) ;
132: $do ${ $if $(@expr1073742432 $prepareTest $(@expr1073742433 "garbageCode90" $) $) ${ $setVerbose $(@expr1073742434 $false $) $; garbageCode90 $(@expr1073742435 $) $; $} $} $while $(@expr1073742436 $false $) ;
133: $do ${ $if $(@expr1073742437 $prepareTest $(@expr1073742438 "garbageCode91" $) $) ${ $setVerbose $(@expr1073742439 $false $) $; garbageCode91 $(@expr1073742440 $) $; $} $} $while $(@expr1073742441 $false $) ;
134: $do ${ $if $(@expr1073742442 $prepareTest $(@expr1073742443 "garbageCode92" $) $) ${ $setVerbose $(@expr1073742444 $false $) $; garbageCode92 $(@expr1073742445 $) $; $} $} $while $(@expr1073742446 $false $) ;
135: $do ${ $if $(@expr1073742447 $prepareTest $(@expr1073742448 "garbageCode94" $) $) ${ $setVerbose $(@expr1073742449 $false $) $; garbageCode94 $(@expr1073742450 $) $; $} $} $while $(@expr1073742451 $false $) ;
136: $do ${ $if $(@expr1073742452 $prepareTest $(@expr1073742453 "garbageCode95" $) $) ${ $setVerbose $(@expr1073742454 $false $) $; garbageCode95 $(@expr1073742455 $) $; $} $} $while $(@expr1073742456 $false $) ;
137: $do ${ $if $(@expr1073742457 $prepareTest $(@expr1073742458 "garbageCode96" $) $) ${ $setVerbose $(@expr1073742459 $false $) $; garbageCode96 $(@expr1073742460 $) $; $} $} $while $(@expr1073742461 $false $) ;
138: $do ${ $if $(@expr1073742462 $prepareTest $(@expr1073742463 "garbageCode97" $) $) ${ $setVerbose $(@expr1073742464 $false $) $; garbageCode97 $(@expr1073742465 $) $; $} $} $while $(@expr1073742466 $false $) ;
139: $do ${ $if $(@expr1073742467 $prepareTest $(@expr1073742468 "garbageCode98" $) $) ${ $setVerbose $(@expr1073742469 $false $) $; garbageCode98 $(@expr1073742470 $) $; $} $} $while $(@expr1073742471 $false $) ;
140: $do ${ $if $(@expr1073742472 $prepareTest $(@expr1073742473 "garbageCode99" $) $) ${ $setVerbose $(@expr1073742474 $false $) $; garbageCode99 $(@expr1073742475 $) $; $} $} $while $(@expr1073742476 $false $) ;
141: $do ${ $if $(@expr1073742477 $prepareTest $(@expr1073742478 "garbageCode100" $) $) ${ $setVerbose $(@expr1073742479 $false $) $; garbageCode100 $(@expr1073742480 $) $; $} $} $while $(@expr1073742481 $false $) ;
142: $do ${ $if $(@expr1073742482 $prepareTest $(@expr1073742483 "garbageCode101" $) $) ${ $setVerbose $(@expr1073742484 $false $) $; garbageCode101 $(@expr1073742485 $) $; $} $} $while $(@expr1073742486 $false $) ;
143: $do ${ $if $(@expr1073742487 $prepareTest $(@expr1073742488 "garbageCode102" $) $) ${ $setVerbose $(@expr1073742489 $false $) $; garbageCode102 $(@expr1073742490 $) $; $} $} $while $(@expr1073742491 $false $) ;
144: $do ${ $if $(@expr1073742492 $prepareTest $(@expr1073742493 "garbageCode103" $) $) ${ $setVerbose $(@expr1073742494 $false $) $; garbageCode103 $(@expr1073742495 $) $; $} $} $while $(@expr1073742496 $false $) ;
145: $do ${ $if $(@expr1073742497 $prepareTest $(@expr1073742498 "garbageCode104" $) $) ${ $setVerbose $(@expr1073742499 $false $) $; garbageCode104 $(@expr1073742500 $) $; $} $} $while $(@expr1073742501 $false $) ;
146: $do ${ $if $(@expr1073742502 $prepareTest $(@expr1073742503 "garbageCode105" $) $) ${ $setVerbose $(@expr1073742504 $false $) $; garbageCode105 $(@expr1073742505 $) $; $} $} $while $(@expr1073742506 $false $) ;
147: $do ${ $if $(@expr1073742507 $prepareTest $(@expr1073742508 "garbageCode106" $) $) ${ $setVerbose $(@expr1073742509 $false $) $; garbageCode106 $(@expr1073742510 $) $; $} $} $while $(@expr1073742511 $false $) ;
148: $do ${ $if $(@expr1073742512 $prepareTest $(@expr1073742513 "garbageCode107" $) $) ${ $setVerbose $(@expr1073742514 $false $) $; garbageCode107 $(@expr1073742515 $) $; $} $} $while $(@expr1073742516 $false $) ;
149: $do ${ $if $(@expr1073742517 $prepareTest $(@expr1073742518 "garbageCode108" $) $) ${ $setVerbose $(@expr1073742519 $false $) $; garbageCode108 $(@expr1073742520 $) $; $} $} $while $(@expr1073742521 $false $) ;
150: $do ${ $if $(@expr1073742522 $prepareTest $(@expr1073742523 "garbageCode109" $) $) ${ $setVerbose $(@expr1073742524 $false $) $; garbageCode109 $(@expr1073742525 $) $; $} $} $while $(@expr1073742526 $false $) ;
151: $do ${ $if $(@expr1073742527 $prepareTest $(@expr1073742528 "garbageCode110" $) $) ${ $setVerbose $(@expr1073742529 $false $) $; garbageCode110 $(@expr1073742530 $) $; $} $} $while $(@expr1073742531 $false $) ;
152: $do ${ $if $(@expr1073742532 $prepareTest $(@expr1073742533 "garbageCode111" $) $) ${ $setVerbose $(@expr1073742534 $false $) $; garbageCode111 $(@expr1073742535 $) $; $} $} $while $(@expr1073742536 $false $) ;
153: $do ${ $if $(@expr1073742537 $prepareTest $(@expr1073742538 "garbageCode112" $) $) ${ $setVerbose $(@expr1073742539 $false $) $; garbageCode112 $(@expr1073742540 $) $; $} $} $while $(@expr1073742541 $false $) ;
154: $do ${ $if $(@expr1073742542 $prepareTest $(@expr1073742543 "garbageCode114" $) $) ${ $setVerbose $(@expr1073742544 $false $) $; garbageCode114 $(@expr1073742545 $) $; $} $} $while $(@expr1073742546 $false $) ;
155: $do ${ $if $(@expr1073742547 $prepareTest $(@expr1073742548 "garbageCode115" $) $) ${ $setVerbose $(@expr1073742549 $false $) $; garbageCode115 $(@expr1073742550 $) $; $} $} $while $(@expr1073742551 $false $) ;
156: $do ${ $if $(@expr1073742552 $prepareTest $(@expr1073742553 "garbageCode116" $) $) ${ $setVerbose $(@expr1073742554 $false $) $; garbageCode116 $(@expr1073742555 $) $; $} $} $while $(@expr1073742556 $false $) ;
157: $do ${ $if $(@expr1073742557 $prepareTest $(@expr1073742558 "garbageCode117" $) $) ${ $setVerbose $(@expr1073742559 $false $) $; garbageCode117 $(@expr1073742560 $) $; $} $} $while $(@expr1073742561 $false $) ;
158: $do ${ $if $(@expr1073742562 $prepareTest $(@expr1073742563 "garbageCode118" $) $) ${ $setVerbose $(@expr1073742564 $false $) $; garbageCode118 $(@expr1073742565 $) $; $} $} $while $(@expr1073742566 $false $) ;
159: $do ${ $if $(@expr1073742567 $prepareTest $(@expr1073742568 "garbageCode119" $) $) ${ $setVerbose $(@expr1073742569 $false $) $; garbageCode119 $(@expr1073742570 $) $; $} $} $while $(@expr1073742571 $false $) ;
160: $do ${ $if $(@expr1073742572 $prepareTest $(@expr1073742573 "garbageCode120" $) $) ${ $setVerbose $(@expr1073742574 $false $) $; garbageCode120 $(@expr1073742575 $) $; $} $} $while $(@expr1073742576 $false $) ;
161: $do ${ $if $(@expr1073742577 $prepareTest $(@expr1073742578 "garbageCode121" $) $) ${ $setVerbose $(@expr1073742579 $false $) $; garbageCode121 $(@expr1073742580 $) $; $} $} $while $(@expr1073742581 $false $) ;
162: $do ${ $if $(@expr1073742582 $prepareTest $(@expr1073742583 "garbageCode122" $) $) ${ $setVerbose $(@expr1073742584 $false $) $; garbageCode122 $(@expr1073742585 $) $; $} $} $while $(@expr1073742586 $false $) ;
163: $do ${ $if $(@expr1073742587 $prepareTest $(@expr1073742588 "garbageCode123" $) $) ${ $setVerbose $(@expr1073742589 $false $) $; garbageCode123 $(@expr1073742590 $) $; $} $} $while $(@expr1073742591 $false $) ;
164: $do ${ $if $(@expr1073742592 $prepareTest $(@expr1073742593 "garbageCode125" $) $) ${ $setVerbose $(@expr1073742594 $false $) $; garbageCode125 $(@expr1073742595 $) $; $} $} $while $(@expr1073742596 $false $) ;
165: $do ${ $if $(@expr1073742597 $prepareTest $(@expr1073742598 "garbageCode126" $) $) ${ $setVerbose $(@expr1073742599 $false $) $; garbageCode126 $(@expr1073742600 $) $; $} $} $while $(@expr1073742601 $false $) ;
166: $do ${ $if $(@expr1073742602 $prepareTest $(@expr1073742603 "garbageCode127" $) $) ${ $setVerbose $(@expr1073742604 $false $) $; garbageCode127 $(@expr1073742605 $) $; $} $} $while $(@expr1073742606 $false $) ;
167: $do ${ $if $(@expr1073742607 $prepareTest $(@expr1073742608 "garbageCode128" $) $) ${ $setVerbose $(@expr1073742609 $false $) $; garbageCode128 $(@expr1073742610 $) $; $} $} $while $(@expr1073742611 $false $) ;
168: $do ${ $if $(@expr1073742612 $prepareTest $(@expr1073742613 "garbageCode129" $) $) ${ $setVerbose $(@expr1073742614 $false $) $; garbageCode129 $(@expr1073742615 $) $; $} $} $while $(@expr1073742616 $false $) ;
169: $do ${ $if $(@expr1073742617 $prepareTest $(@expr1073742618 "garbageCode130" $) $) ${ $setVerbose $(@expr1073742619 $false $) $; garbageCode130 $(@expr1073742620 $) $; $} $} $while $(@expr1073742621 $false $) ;
170: $do ${ $if $(@expr1073742622 $prepareTest $(@expr1073742623 "garbageCode131" $) $) ${ $setVerbose $(@expr1073742624 $false $) $; garbageCode131 $(@expr1073742625 $) $; $} $} $while $(@expr1073742626 $false $) ;
171: $do ${ $if $(@expr1073742627 $prepareTest $(@expr1073742628 "garbageCode132" $) $) ${ $setVerbose $(@expr1073742629 $false $) $; garbageCode132 $(@expr1073742630 $) $; $} $} $while $(@expr1073742631 $false $) ;
172: $do ${ $if $(@expr1073742632 $prepareTest $(@expr1073742633 "garbageCode133" $) $) ${ $setVerbose $(@expr1073742634 $false $) $; garbageCode133 $(@expr1073742635 $) $; $} $} $while $(@expr1073742636 $false $) ;
173: $do ${ $if $(@expr1073742637 $prepareTest $(@expr1073742638 "garbageCode134" $) $) ${ $setVerbose $(@expr1073742639 $false $) $; garbageCode134 $(@expr1073742640 $) $; $} $} $while $(@expr1073742641 $false $) ;
174: $do ${ $if $(@expr1073742642 $prepareTest $(@expr1073742643 "garbageCode135" $) $) ${ $setVerbose $(@expr1073742644 $false $) $; garbageCode135 $(@expr1073742645 $) $; $} $} $while $(@expr1073742646 $false $) ;
175: $do ${ $if $(@expr1073742647 $prepareTest $(@expr1073742648 "garbageCode136" $) $) ${ $setVerbose $(@expr1073742649 $false $) $; garbageCode136 $(@expr1073742650 $) $; $} $} $while $(@expr1073742651 $false $) ;
176: $do ${ $if $(@expr1073742652 $prepareTest $(@expr1073742653 "garbageCode137" $) $) ${ $setVerbose $(@expr1073742654 $false $) $; garbageCode137 $(@expr1073742655 $) $; $} $} $while $(@expr1073742656 $false $) ;
177: $do ${ $if $(@expr1073742657 $prepareTest $(@expr1073742658 "garbageCode138" $) $) ${ $setVerbose $(@expr1073742659 $false $) $; garbageCode138 $(@expr1073742660 $) $; $} $} $while $(@expr1073742661 $false $) ;
178: $do ${ $if $(@expr1073742662 $prepareTest $(@expr1073742663 "garbageCode139" $) $) ${ $setVerbose $(@expr1073742664 $false $) $; garbageCode139 $(@expr1073742665 $) $; $} $} $while $(@expr1073742666 $false $) ;
179: $do ${ $if $(@expr1073742667 $prepareTest $(@expr1073742668 "garbageCode140" $) $) ${ $setVerbose $(@expr1073742669 $false $) $; garbageCode140 $(@expr1073742670 $) $; $} $} $while $(@expr1073742671 $false $) ;
180: $do ${ $if $(@expr1073742672 $prepareTest $(@expr1073742673 "garbageCode141" $) $) ${ $setVerbose $(@expr1073742674 $false $) $; garbageCode141 $(@expr1073742675 $) $; $} $} $while $(@expr1073742676 $false $) ;
181: $do ${ $if $(@expr1073742677 $prepareTest $(@expr1073742678 "garbageCode142" $) $) ${ $setVerbose $(@expr1073742679 $false $) $; garbageCode142 $(@expr1073742680 $) $; $} $} $while $(@expr1073742681 $false $) ;
182: $do ${ $if $(@expr1073742682 $prepareTest $(@expr1073742683 "garbageCode143" $) $) ${ $setVerbose $(@expr1073742684 $false $) $; garbageCode143 $(@expr1073742685 $) $; $} $} $while $(@expr1073742686 $false $) ;
183: $do ${ $if $(@expr1073742687 $prepareTest $(@expr1073742688 "garbageCode144" $) $) ${ $setVerbose $(@expr1073742689 $false $) $; garbageCode144 $(@expr1073742690 $) $; $} $} $while $(@expr1073742691 $false $) ;
184: $do ${ $if $(@expr1073742692 $prepareTest $(@expr1073742693 "garbageCode146" $) $) ${ $setVerbose $(@expr1073742694 $false $) $; garbageCode146 $(@expr1073742695 $) $; $} $} $while $(@expr1073742696 $false $) ;
185: $do ${ $if $(@expr1073742697 $prepareTest $(@expr1073742698 "garbageCode147" $) $) ${ $setVerbose $(@expr1073742699 $false $) $; garbageCode147 $(@expr1073742700 $) $; $} $} $while $(@expr1073742701 $false $) ;
186: $do ${ $if $(@expr1073742702 $prepareTest $(@expr1073742703 "garbageCode148" $) $) ${ $setVerbose $(@expr1073742704 $false $) $; garbageCode148 $(@expr1073742705 $) $; $} $} $while $(@expr1073742706 $false $) ;
187: $do ${ $if $(@expr1073742707 $prepareTest $(@expr1073742708 "garbageCode149" $) $) ${ $setVerbose $(@expr1073742709 $false $) $; garbageCode149 $(@expr1073742710 $) $; $} $} $while $(@expr1073742711 $false $) ;
188: $do ${ $if $(@expr1073742712 $prepareTest $(@expr1073742713 "garbageCode150" $) $) ${ $setVerbose $(@expr1073742714 $false $) $; garbageCode150 $(@expr1073742715 $) $; $} $} $while $(@expr1073742716 $false $) ;
189: $do ${ $if $(@expr1073742717 $prepareTest $(@expr1073742718 "garbageCode151" $) $) ${ $setVerbose $(@expr1073742719 $false $) $; garbageCode151 $(@expr1073742720 $) $; $} $} $while $(@expr1073742721 $false $) ;
190: $do ${ $if $(@expr1073742722 $prepareTest $(@expr1073742723 "garbageCode152" $) $) ${ $setVerbose $(@expr1073742724 $false $) $; garbageCode152 $(@expr1073742725 $) $; $} $} $while $(@expr1073742726 $false $) ;
191: $do ${ $if $(@expr1073742727 $prepareTest $(@expr1073742728 "garbageCode153" $) $) ${ $setVerbose $(@expr1073742729 $false $) $; garbageCode153 $(@expr1073742730 $) $; $} $} $while $(@expr1073742731 $false $) ;
192: $do ${ $if $(@expr1073742732 $prepareTest $(@expr1073742733 "garbageCode154" $) $) ${ $setVerbose $(@expr1073742734 $false $) $; garbageCode154 $(@expr1073742735 $) $; $} $} $while $(@expr1073742736 $false $) ;
193: $do ${ $if $(@expr1073742737 $prepareTest $(@expr1073742738 "garbageCode156" $) $) ${ $setVerbose $(@expr1073742739 $false $) $; garbageCode156 $(@expr1073742740 $) $; $} $} $while $(@expr1073742741 $false $) ;
194: $do ${ $if $(@expr1073742742 $prepareTest $(@expr1073742743 "garbageCode157" $) $) ${ $setVerbose $(@expr1073742744 $false $) $; garbageCode157 $(@expr1073742745 $) $; $} $} $while $(@expr1073742746 $false $) ;
195: $do ${ $if $(@expr1073742747 $prepareTest $(@expr1073742748 "garbageCode158" $) $) ${ $setVerbose $(@expr1073742749 $false $) $; garbageCode158 $(@expr1073742750 $) $; $} $} $while $(@expr1073742751 $false $) ;
196: $do ${ $if $(@expr1073742752 $prepareTest $(@expr1073742753 "garbageCode159" $) $) ${ $setVerbose $(@expr1073742754 $false $) $; garbageCode159 $(@expr1073742755 $) $; $} $} $while $(@expr1073742756 $false $) ;
197: $do ${ $if $(@expr1073742757 $prepareTest $(@expr1073742758 "garbageCode160" $) $) ${ $setVerbose $(@expr1073742759 $false $) $; garbageCode160 $(@expr1073742760 $) $; $} $} $while $(@expr1073742761 $false $) ;
198: $do ${ $if $(@expr1073742762 $prepareTest $(@expr1073742763 "garbageCode161" $) $) ${ $setVerbose $(@expr1073742764 $false $) $; garbageCode161 $(@expr1073742765 $) $; $} $} $while $(@expr1073742766 $false $) ;
199: $do ${ $if $(@expr1073742767 $prepareTest $(@expr1073742768 "garbageCode162" $) $) ${ $setVerbose $(@expr1073742769 $false $) $; garbageCode162 $(@expr1073742770 $) $; $} $} $while $(@expr1073742771 $false $) ;
200: $do ${ $if $(@expr1073742772 $prepareTest $(@expr1073742773 "garbageCode163" $) $) ${ $setVerbose $(@expr1073742774 $false $) $; garbageCode163 $(@expr1073742775 $) $; $} $} $while $(@expr1073742776 $false $) ;
201: $do ${ $if $(@expr1073742777 $prepareTest $(@expr1073742778 "garbageCode164" $) $) ${ $setVerbose $(@expr1073742779 $false $) $; garbageCode164 $(@expr1073742780 $) $; $} $} $while $(@expr1073742781 $false $) ;
202: $do ${ $if $(@expr1073742782 $prepareTest $(@expr1073742783 "garbageCode165" $) $) ${ $setVerbose $(@expr1073742784 $false $) $; garbageCode165 $(@expr1073742785 $) $; $} $} $while $(@expr1073742786 $false $) ;
203: $do ${ $if $(@expr1073742787 $prepareTest $(@expr1073742788 "garbageCode167" $) $) ${ $setVerbose $(@expr1073742789 $false $) $; garbageCode167 $(@expr1073742790 $) $; $} $} $while $(@expr1073742791 $false $) ;
204: $do ${ $if $(@expr1073742792 $prepareTest $(@expr1073742793 "garbageCode168" $) $) ${ $setVerbose $(@expr1073742794 $false $) $; garbageCode168 $(@expr1073742795 $) $; $} $} $while $(@expr1073742796 $false $) ;
205: $do ${ $if $(@expr1073742797 $prepareTest $(@expr1073742798 "garbageCode169" $) $) ${ $setVerbose $(@expr1073742799 $false $) $; garbageCode169 $(@expr1073742800 $) $; $} $} $while $(@expr1073742801 $false $) ;
206: $do ${ $if $(@expr1073742802 $prepareTest $(@expr1073742803 "garbageCode170" $) $) ${ $setVerbose $(@expr1073742804 $false $) $; garbageCode170 $(@expr1073742805 $) $; $} $} $while $(@expr1073742806 $false $) ;
207: $do ${ $if $(@expr1073742807 $prepareTest $(@expr1073742808 "garbageCode171" $) $) ${ $setVerbose $(@expr1073742809 $false $) $; garbageCode171 $(@expr1073742810 $) $; $} $} $while $(@expr1073742811 $false $) ;
208: $do ${ $if $(@expr1073742812 $prepareTest $(@expr1073742813 "garbageCode172" $) $) ${ $setVerbose $(@expr1073742814 $false $) $; garbageCode172 $(@expr1073742815 $) $; $} $} $while $(@expr1073742816 $false $) ;
209: $do ${ $if $(@expr1073742817 $prepareTest $(@expr1073742818 "garbageCode173" $) $) ${ $setVerbose $(@expr1073742819 $false $) $; garbageCode173 $(@expr1073742820 $) $; $} $} $while $(@expr1073742821 $false $) ;
210: $do ${ $if $(@expr1073742822 $prepareTest $(@expr1073742823 "garbageCode174" $) $) ${ $setVerbose $(@expr1073742824 $false $) $; garbageCode174 $(@expr1073742825 $) $; $} $} $while $(@expr1073742826 $false $) ;
211: $do ${ $if $(@expr1073742827 $prepareTest $(@expr1073742828 "garbageCode175" $) $) ${ $setVerbose $(@expr1073742829 $false $) $; garbageCode175 $(@expr1073742830 $) $; $} $} $while $(@expr1073742831 $false $) ;
212: $do ${ $if $(@expr1073742832 $prepareTest $(@expr1073742833 "garbageCode176" $) $) ${ $setVerbose $(@expr1073742834 $false $) $; garbageCode176 $(@expr1073742835 $) $; $} $} $while $(@expr1073742836 $false $) ;
213: $do ${ $if $(@expr1073742837 $prepareTest $(@expr1073742838 "garbageCode181" $) $) ${ $setVerbose $(@expr1073742839 $false $) $; garbageCode181 $(@expr1073742840 $) $; $} $} $while $(@expr1073742841 $false $) ;
214: $do ${ $if $(@expr1073742842 $prepareTest $(@expr1073742843 "garbageCode182" $) $) ${ $setVerbose $(@expr1073742844 $false $) $; garbageCode182 $(@expr1073742845 $) $; $} $} $while $(@expr1073742846 $false $) ;
215: $do ${ $if $(@expr1073742847 $prepareTest $(@expr1073742848 "garbageCode183" $) $) ${ $setVerbose $(@expr1073742849 $false $) $; garbageCode183 $(@expr1073742850 $) $; $} $} $while $(@expr1073742851 $false $) ;
216: $do ${ $if $(@expr1073742852 $prepareTest $(@expr1073742853 "garbageCode184" $) $) ${ $setVerbose $(@expr1073742854 $false $) $; garbageCode184 $(@expr1073742855 $) $; $} $} $while $(@expr1073742856 $false $) ;
217: $do ${ $if $(@expr1073742857 $prepareTest $(@expr1073742858 "garbageCode185" $) $) ${ $setVerbose $(@expr1073742859 $false $) $; garbageCode185 $(@expr1073742860 $) $; $} $} $while $(@expr1073742861 $false $) ;
218: $do ${ $if $(@expr1073742862 $prepareTest $(@expr1073742863 "garbageCode186" $) $) ${ $setVerbose $(@expr1073742864 $false $) $; garbageCode186 $(@expr1073742865 $) $; $} $} $while $(@expr1073742866 $false $) ;
219: $do ${ $if $(@expr1073742867 $prepareTest $(@expr1073742868 "garbageCode187" $) $) ${ $setVerbose $(@expr1073742869 $false $) $; garbageCode187 $(@expr1073742870 $) $; $} $} $while $(@expr1073742871 $false $) ;
220: $do ${ $if $(@expr1073742872 $prepareTest $(@expr1073742873 "garbageCode188" $) $) ${ $setVerbose $(@expr1073742874 $false $) $; garbageCode188 $(@expr1073742875 $) $; $} $} $while $(@expr1073742876 $false $) ;
221: $do ${ $if $(@expr1073742877 $prepareTest $(@expr1073742878 "garbageCode189" $) $) ${ $setVerbose $(@expr1073742879 $false $) $; garbageCode189 $(@expr1073742880 $) $; $} $} $while $(@expr1073742881 $false $) ;
222: $do ${ $if $(@expr1073742882 $prepareTest $(@expr1073742883 "garbageCode190" $) $) ${ $setVerbose $(@expr1073742884 $false $) $; garbageCode190 $(@expr1073742885 $) $; $} $} $while $(@expr1073742886 $false $) ;
223: $do ${ $if $(@expr1073742887 $prepareTest $(@expr1073742888 "garbageCode191" $) $) ${ $setVerbose $(@expr1073742889 $false $) $; garbageCode191 $(@expr1073742890 $) $; $} $} $while $(@expr1073742891 $false $) ;
224: $do ${ $if $(@expr1073742892 $prepareTest $(@expr1073742893 "garbageCode192" $) $) ${ $setVerbose $(@expr1073742894 $false $) $; garbageCode192 $(@expr1073742895 $) $; $} $} $while $(@expr1073742896 $false $) ;
225: $do ${ $if $(@expr1073742897 $prepareTest $(@expr1073742898 "garbageCode193" $) $) ${ $setVerbose $(@expr1073742899 $false $) $; garbageCode193 $(@expr1073742900 $) $; $} $} $while $(@expr1073742901 $false $) ;
226: $do ${ $if $(@expr1073742902 $prepareTest $(@expr1073742903 "garbageCode194" $) $) ${ $setVerbose $(@expr1073742904 $false $) $; garbageCode194 $(@expr1073742905 $) $; $} $} $while $(@expr1073742906 $false $) ;
227: $do ${ $if $(@expr1073742907 $prepareTest $(@expr1073742908 "garbageCode195" $) $) ${ $setVerbose $(@expr1073742909 $false $) $; garbageCode195 $(@expr1073742910 $) $; $} $} $while $(@expr1073742911 $false $) ;
228: $do ${ $if $(@expr1073742912 $prepareTest $(@expr1073742913 "garbageCode196" $) $) ${ $setVerbose $(@expr1073742914 $false $) $; garbageCode196 $(@expr1073742915 $) $; $} $} $while $(@expr1073742916 $false $) ;
229: $do ${ $if $(@expr1073742917 $prepareTest $(@expr1073742918 "garbageCode197" $) $) ${ $setVerbose $(@expr1073742919 $false $) $; garbageCode197 $(@expr1073742920 $) $; $} $} $while $(@expr1073742921 $false $) ;
230: $do ${ $if $(@expr1073742922 $prepareTest $(@expr1073742923 "garbageCode198" $) $) ${ $setVerbose $(@expr1073742924 $false $) $; garbageCode198 $(@expr1073742925 $) $; $} $} $while $(@expr1073742926 $false $) ;
231: $do ${ $if $(@expr1073742927 $prepareTest $(@expr1073742928 "garbageCode199" $) $) ${ $setVerbose $(@expr1073742929 $false $) $; garbageCode199 $(@expr1073742930 $) $; $} $} $while $(@expr1073742931 $false $) ;
232: $do ${ $if $(@expr1073742932 $prepareTest $(@expr1073742933 "garbageCode200" $) $) ${ $setVerbose $(@expr1073742934 $false $) $; garbageCode200 $(@expr1073742935 $) $; $} $} $while $(@expr1073742936 $false $) ;
233: $do ${ $if $(@expr1073742937 $prepareTest $(@expr1073742938 "garbageCode201" $) $) ${ $setVerbose $(@expr1073742939 $false $) $; garbageCode201 $(@expr1073742940 $) $; $} $} $while $(@expr1073742941 $false $) ;
234: $do ${ $if $(@expr1073742942 $prepareTest $(@expr1073742943 "garbageCode202" $) $) ${ $setVerbose $(@expr1073742944 $false $) $; garbageCode202 $(@expr1073742945 $) $; $} $} $while $(@expr1073742946 $false $) ;
235: $do ${ $if $(@expr1073742947 $prepareTest $(@expr1073742948 "garbageCode203" $) $) ${ $setVerbose $(@expr1073742949 $false $) $; garbageCode203 $(@expr1073742950 $) $; $} $} $while $(@expr1073742951 $false $) ;
236: $do ${ $if $(@expr1073742952 $prepareTest $(@expr1073742953 "garbageCode204" $) $) ${ $setVerbose $(@expr1073742954 $false $) $; garbageCode204 $(@expr1073742955 $) $; $} $} $while $(@expr1073742956 $false $) ;
237: $do ${ $if $(@expr1073742957 $prepareTest $(@expr1073742958 "garbageCode205" $) $) ${ $setVerbose $(@expr1073742959 $false $) $; garbageCode205 $(@expr1073742960 $) $; $} $} $while $(@expr1073742961 $false $) ;
238: $do ${ $if $(@expr1073742962 $prepareTest $(@expr1073742963 "garbageCode206" $) $) ${ $setVerbose $(@expr1073742964 $false $) $; garbageCode206 $(@expr1073742965 $) $; $} $} $while $(@expr1073742966 $false $) ;
239: $do ${ $if $(@expr1073742967 $prepareTest $(@expr1073742968 "garbageCode207" $) $) ${ $setVerbose $(@expr1073742969 $false $) $; garbageCode207 $(@expr1073742970 $) $; $} $} $while $(@expr1073742971 $false $) ;
240: $do ${ $if $(@expr1073742972 $prepareTest $(@expr1073742973 "garbageCode208" $) $) ${ $setVerbose $(@expr1073742974 $false $) $; garbageCode208 $(@expr1073742975 $) $; $} $} $while $(@expr1073742976 $false $) ;
241: $do ${ $if $(@expr1073742977 $prepareTest $(@expr1073742978 "garbageCode209" $) $) ${ $setVerbose $(@expr1073742979 $false $) $; garbageCode209 $(@expr1073742980 $) $; $} $} $while $(@expr1073742981 $false $) ;
242: $do ${ $if $(@expr1073742982 $prepareTest $(@expr1073742983 "garbageCode210" $) $) ${ $setVerbose $(@expr1073742984 $false $) $; garbageCode210 $(@expr1073742985 $) $; $} $} $while $(@expr1073742986 $false $) ;
243: $do ${ $if $(@expr1073742987 $prepareTest $(@expr1073742988 "garbageCode211" $) $) ${ $setVerbose $(@expr1073742989 $false $) $; garbageCode211 $(@expr1073742990 $) $; $} $} $while $(@expr1073742991 $false $) ;
244: $do ${ $if $(@expr1073742992 $prepareTest $(@expr1073742993 "garbageCode212" $) $) ${ $setVerbose $(@expr1073742994 $false $) $; garbageCode212 $(@expr1073742995 $) $; $} $} $while $(@expr1073742996 $false $) ;
245: $do ${ $if $(@expr1073742997 $prepareTest $(@expr1073742998 "garbageCode213" $) $) ${ $setVerbose $(@expr1073742999 $false $) $; garbageCode213 $(@expr1073743000 $) $; $} $} $while $(@expr1073743001 $false $) ;
246: $do ${ $if $(@expr1073743002 $prepareTest $(@expr1073743003 "garbageCode214" $) $) ${ $setVerbose $(@expr1073743004 $false $) $; garbageCode214 $(@expr1073743005 $) $; $} $} $while $(@expr1073743006 $false $) ;
247: $do ${ $if $(@expr1073743007 $prepareTest $(@expr1073743008 "garbageCode215" $) $) ${ $setVerbose $(@expr1073743009 $false $) $; garbageCode215 $(@expr1073743010 $) $; $} $} $while $(@expr1073743011 $false $) ;
248: $do ${ $if $(@expr1073743012 $prepareTest $(@expr1073743013 "garbageCode216" $) $) ${ $setVerbose $(@expr1073743014 $false $) $; garbageCode216 $(@expr1073743015 $) $; $} $} $while $(@expr1073743016 $false $) ;
249: $do ${ $if $(@expr1073743017 $prepareTest $(@expr1073743018 "garbageCode217" $) $) ${ $setVerbose $(@expr1073743019 $false $) $; garbageCode217 $(@expr1073743020 $) $; $} $} $while $(@expr1073743021 $false $) ;
250: $do ${ $if $(@expr1073743022 $prepareTest $(@expr1073743023 "garbageCode218" $) $) ${ $setVerbose $(@expr1073743024 $false $) $; garbageCode218 $(@expr1073743025 $) $; $} $} $while $(@expr1073743026 $false $) ;
251: $do ${ $if $(@expr1073743027 $prepareTest $(@expr1073743028 "garbageCode219" $) $) ${ $setVerbose $(@expr1073743029 $false $) $; garbageCode219 $(@expr1073743030 $) $; $} $} $while $(@expr1073743031 $false $) ;
252: $do ${ $if $(@expr1073743032 $prepareTest $(@expr1073743033 "garbageCode220" $) $) ${ $setVerbose $(@expr1073743034 $false $) $; garbageCode220 $(@expr1073743035 $) $; $} $} $while $(@expr1073743036 $false $) ;
253: $do ${ $if $(@expr1073743037 $prepareTest $(@expr1073743038 "garbageCode221" $) $) ${ $setVerbose $(@expr1073743039 $false $) $; garbageCode221 $(@expr1073743040 $) $; $} $} $while $(@expr1073743041 $false $) ;
254: $do ${ $if $(@expr1073743042 $prepareTest $(@expr1073743043 "garbageCode222" $) $) ${ $setVerbose $(@expr1073743044 $false $) $; garbageCode222 $(@expr1073743045 $) $; $} $} $while $(@expr1073743046 $false $) ;
255:
256: $do ${ $if $(@expr1073743047 $prepareTest $(@expr1073743048 "garbageCodeFuzzerClientMode1" $) $) ${ $setVerbose $(@expr1073743049 $false $) $; garbageCodeFuzzerClientMode1 $(@expr1073743050 $) $; $} $} $while $(@expr1073743051 $false $) ;
257:
258: $do ${ $if $(@expr1073743052 $prepareTest $(@expr1073743053 "garbageValueFlow" $) $) ${ $setVerbose $(@expr1073743054 $false $) $; garbageValueFlow $(@expr1073743055 $) $; $} $} $while $(@expr1073743056 $false $) ;
259: $do ${ $if $(@expr1073743057 $prepareTest $(@expr1073743058 "garbageSymbolDatabase" $) $) ${ $setVerbose $(@expr1073743059 $false $) $; garbageSymbolDatabase $(@expr1073743060 $) $; $} $} $while $(@expr1073743061 $false $) ;
260: $do ${ $if $(@expr1073743062 $prepareTest $(@expr1073743063 "garbageAST" $) $) ${ $setVerbose $(@expr1073743064 $false $) $; garbageAST $(@expr1073743065 $) $; $} $} $while $(@expr1073743066 $false $) ;
261: $do ${ $if $(@expr1073743067 $prepareTest $(@expr1073743068 "templateSimplifierCrashes" $) $) ${ $setVerbose $(@expr1073743069 $false $) $; templateSimplifierCrashes $(@expr1073743070 $) $; $} $} $while $(@expr1073743071 $false $) ;
262: $do ${ $if $(@expr1073743072 $prepareTest $(@expr1073743073 "syntaxErrorFirstToken" $) $) ${ $setVerbose $(@expr1073743074 $false $) $; syntaxErrorFirstToken $(@expr1073743075 $) $; $} $} $while $(@expr1073743076 $false $) ;
263: $do ${ $if $(@expr1073743077 $prepareTest $(@expr1073743078 "syntaxErrorLastToken" $) $) ${ $setVerbose $(@expr1073743079 $false $) $; syntaxErrorLastToken $(@expr1073743080 $) $; $} $} $while $(@expr1073743081 $false $) ;
264: $do ${ $if $(@expr1073743082 $prepareTest $(@expr1073743083 "syntaxErrorCase" $) $) ${ $setVerbose $(@expr1073743084 $false $) $; syntaxErrorCase $(@expr1073743085 $) $; $} $} $while $(@expr1073743086 $false $) ;
265: $do ${ $if $(@expr1073743087 $prepareTest $(@expr1073743088 "syntaxErrorFuzzerCliType1" $) $) ${ $setVerbose $(@expr1073743089 $false $) $; syntaxErrorFuzzerCliType1 $(@expr1073743090 $) $; $} $} $while $(@expr1073743091 $false $) ;
266: $do ${ $if $(@expr1073743092 $prepareTest $(@expr1073743093 "cliCode" $) $) ${ $setVerbose $(@expr1073743094 $false $) $; cliCode $(@expr1073743095 $) $; $} $} $while $(@expr1073743096 $false $) ;
267: $do ${ $if $(@expr1073743097 $prepareTest $(@expr1073743098 "enumTrailingComma" $) $) ${ $setVerbose $(@expr1073743099 $false $) $; enumTrailingComma $(@expr1073743100 $) $; $} $} $while $(@expr1073743101 $false $) ;
268:
269: $do ${ $if $(@expr1073743102 $prepareTest $(@expr1073743103 "nonGarbageCode1" $) $) ${ $setVerbose $(@expr1073743104 $false $) $; nonGarbageCode1 $(@expr1073743105 $) $; $} $} $while $(@expr1073743106 $false $) ;
270: }
271:
272:
273: std :: string checkCode ( const std :: string & code@var106 , bool cpp@var107 = true ) {
274:
275: const char * const filename@var108 ; filename@var108 =@expr1073743107 cpp@var107 ?@expr1073743108 "test.cpp" :@expr1073743109 "test.c" ;
276: const char * const alternatefilename@var109 ; alternatefilename@var109 =@expr1073743110 cpp@var107 ?@expr1073743111 "test.c" :@expr1073743112 "test.cpp" ;
277:
278:
279: try {
280: $checkCodeInternal_ $(@expr1073743113 code@var106 $, alternatefilename@var109 $, "cppcheck-2.8/test/testgarbage.cpp" $, 280 $) ;
281: } catch (@expr1073743114 const InternalError &@expr1073743115 ) { }
282:
283: return $checkCodeInternal_ $(@expr1073743116 code@var106 $, filename@var108 $, "cppcheck-2.8/test/testgarbage.cpp" $, 283 $) ;
284: }
285:
286: std :: string checkCodeInternal_ ( const std :: string & code@var110 , const char * filename@var111 , const char * file@var112 , int line@var113 ) {
287: errout@var100 .@expr1073743117 str (@expr1073743118 "" ) ;
288:
289:
290: Tokenizer tokenizer@var114 (@expr1073743119 &@expr1296 settings@var102 , this@expr1297 ) ;
291: std ::@expr1073743122 istringstream istr@var115 (@expr1073743123 code@var110 ) ;
292: $assert_ $(@expr1073743124 file@var112 $, line@var113 $, $(@expr1073743125 tokenizer@var114 .@expr1073743126 tokenize (@expr1073743127 istr@var115 , filename@var111 ) $) $) ;
293:
294:
295: for (@expr1073743128 std ::@expr1305 list < Check *@expr1073743130 > ::@expr1305 const_iterator it@var116 =@expr1073743132 Check ::@expr1309 instances (@expr1310 ) .@expr1073743135 begin (@expr1073743136 ) ; it@var116 !=@expr1073743137 Check ::@expr1309 instances (@expr1310 ) .@expr1073743140 end (@expr1073743141 ) ; ++@expr1073743142 it@var116 ) {
296: (@expr1073743143 *@expr1073743144 it@var116 ) .@expr1073743145 runChecks (@expr1073743146 &@expr1073743147 tokenizer@var114 , &@expr1296 settings@var102 , this@expr1297 ) ;
297: }
298:
299: return tokenizer@var114 .@expr1073743149 tokens (@expr1073743150 ) .@expr1073743151 stringifyList (@expr1073743152 false , false , false , true , false , nullptr , nullptr ) ;
300: }
301:
302:
303: std :: string getSyntaxError_ ( const char code@var117 [ ] , const char * file@var118 , int line@var119 ) {
304: Tokenizer tokenizer@var120 (@expr1073743153 &@expr1073743154 settings@var102 , this@expr1073743155 ) ;
305: std ::@expr1073743156 istringstream istr@var121 (@expr1073743157 code@var117 ) ;
306: try {
307: $assert_ $(@expr1073743158 file@var118 $, line@var119 $, $(@expr1073743159 tokenizer@var120 .@expr1073743160 tokenize (@expr1073743161 istr@var121 , "test.cpp" ) $) $) ;
308: } catch (@expr1073743162 InternalError & e@var122 ) {
309: if (@expr1073743163 e@var122 .@expr1073743164 id@var123 !=@expr1073743165 "syntaxError" ) {
310: return "" ; }
311: return "[test.cpp:" +@expr1073743166 MathLib ::@expr1073743167 toString (@expr1073743168 e@var122 .@expr1073743169 token@var124 .@expr1073743170 linenr (@expr1073743171 ) ) +@expr1073743172 "] " +@expr1073743173 e@var122 .@expr1073743174 errorMessage@var125 ;
312: }
313: return "" ;
314: }
315:
316:
317: void final_class_x ( ) {
318:
319: const char code@var126 [@expr1073743175 41 ] =@expr1073743176 "class __declspec(dllexport) x final { };" ;
320: {
321: errout@var100 .@expr1353 str (@expr1073743178 "" ) ;
322: Tokenizer tokenizer@var127 (@expr1073743179 &@expr1073743180 settings@var102 , this@expr1073743181 ) ;
323: std ::@expr1073743182 istringstream istr@var128 (@expr1073743183 code@var126 ) ;
324: $if $(@expr1073743184 $!@expr1073743185 $assert_ $(@expr1073743186 "cppcheck-2.8/test/testgarbage.cpp" $, 324 $, $(@expr1073743187 tokenizer@var127 .@expr1073743188 tokenize (@expr1073743189 istr@var128 , "test.cpp" ) $) $) $) { $return ; }
325: $if $(@expr1073743190 $!@expr1073743191 $assertEquals $(@expr1073743192 "cppcheck-2.8/test/testgarbage.cpp" $, 325 $, "" $, errout@var100 .@expr1353 str (@expr1073743194 ) $) $) { $return ; }
326: }
327: }
328:
329: void wrong_syntax1 ( ) {
330: {
331: const char code@var129 [@expr1073743195 50 ] =@expr1073743196 "TR(kvmpio, PROTO(int rw), ARGS(rw), TP_(aa->rw;))" ;
332: $do ${ $try ${ checkCode (@expr1073743197 code@var129 ) $; $assertThrowFail $(@expr1073743198 "cppcheck-2.8/test/testgarbage.cpp" $, 332 $) $; $} $catch $(@expr1073743199 $const InternalError $&@expr1073743200 $) ${ $} $catch $(@expr1073743201 $... $) ${ $assertThrowFail $(@expr1073743202 "cppcheck-2.8/test/testgarbage.cpp" $, 332 $) $; $} $} $while $(@expr1073743203 $false $) ;
333: $if $(@expr1073743204 $!@expr1073743205 $assertEquals $(@expr1073743206 "cppcheck-2.8/test/testgarbage.cpp" $, 333 $, "" $, errout@var100 .@expr1073743207 str (@expr1073743208 ) $) $) { $return ; }
334: }
335:
336: {
337: const char code@var130 [@expr1073743209 40 ] =@expr1073743210 "struct A { template<int> struct { }; };" ;
338: $do ${ $try ${ checkCode (@expr1073743211 code@var130 ) $; $assertThrowFail $(@expr1073743212 "cppcheck-2.8/test/testgarbage.cpp" $, 338 $) $; $} $catch $(@expr1073743213 $const InternalError $&@expr1073743214 $) ${ $} $catch $(@expr1073743215 $... $) ${ $assertThrowFail $(@expr1073743216 "cppcheck-2.8/test/testgarbage.cpp" $, 338 $) $; $} $} $while $(@expr1073743217 $false $) ;
339: }
340:
341: {
342: const char code@var131 [@expr1073743218 38 ] =@expr1073743219 "enum ABC { A,B, typedef enum { C } };" ;
343: $do ${ $try ${ checkCode (@expr1073743220 code@var131 ) $; $assertThrowFail $(@expr1073743221 "cppcheck-2.8/test/testgarbage.cpp" $, 343 $) $; $} $catch $(@expr1073743222 $const InternalError $&@expr1073743223 $) ${ $} $catch $(@expr1073743224 $... $) ${ $assertThrowFail $(@expr1073743225 "cppcheck-2.8/test/testgarbage.cpp" $, 343 $) $; $} $} $while $(@expr1073743226 $false $) ;
344: }
345: }
346:
347: void wrong_syntax2 ( ) {
348: const char code@var132 [@expr1073743227 113 ] =@expr1073743228 "void f() {\n    X<int> x;\n    Y<int, int, int, int, int, char> y;\n}\n\nvoid G( template <typename T> class (j) ) {}"
349:
|
352:
353: ;
354:
355:
356: $do ${ $try ${ checkCode (@expr1073743229 code@var132 ) $; $assertThrowFail $(@expr1073743230 "cppcheck-2.8/test/testgarbage.cpp" $, 356 $) $; $} $catch $(@expr1073743231 $const InternalError $&@expr1073743232 $) ${ $} $catch $(@expr1073743233 $... $) ${ $assertThrowFail $(@expr1073743234 "cppcheck-2.8/test/testgarbage.cpp" $, 356 $) $; $} $} $while $(@expr1073743235 $false $) ;
357: }
358:
359:
360: void wrong_syntax3 ( ) {
361: const char code@var133 [@expr1073743236 83 ] =@expr1073743237 "X #define\n{\n (\n  for(  #endif typedef typedef cb[N] )\n        ca[N]; =  cb[i]\n )\n}"
362:
|
366:
367: ;
368:
369: Tokenizer tokenizer@var134 (@expr1073743238 &@expr1073743239 settings@var102 , this@expr1073743240 ) ;
370: std ::@expr1073743241 istringstream istr@var135 (@expr1073743242 code@var133 ) ;
371: try {
372: $if $(@expr1073743243 $!@expr1073743244 $assert_ $(@expr1073743245 "cppcheck-2.8/test/testgarbage.cpp" $, 372 $, $(@expr1073743246 tokenizer@var134 .@expr1073743247 tokenize (@expr1073743248 istr@var135 , "test.cpp" ) $) $) $) { $return ; }
373: assertThrowFail (@expr1073743249 "cppcheck-2.8/test/testgarbage.cpp" , 373 ) ;
374: } catch (@expr1073743250 InternalError & e@var136 ) {
375: $if $(@expr1073743251 $!@expr1073743252 $assertEquals $(@expr1073743253 "cppcheck-2.8/test/testgarbage.cpp" $, 375 $, "syntax error" $, e@var136 .@expr1073743254 errorMessage@var137 $) $) { $return ; }
376: $if $(@expr1073743255 $!@expr1073743256 $assertEquals $(@expr1073743257 "cppcheck-2.8/test/testgarbage.cpp" $, 376 $, "syntaxError" $, e@var136 .@expr1073743258 id@var138 $) $) { $return ; }
377: $if $(@expr1073743259 $!@expr1073743260 $assertEquals $(@expr1073743261 "cppcheck-2.8/test/testgarbage.cpp" $, 377 $, 4 $, e@var136 .@expr1073743262 token@var139 .@expr1073743263 linenr (@expr1073743264 ) $) $) { $return ; }
378: }
379: }
380:
381: void wrong_syntax4 ( ) {
382: const char code@var140 [@expr1073743265 37 ] =@expr1073743266 "typedef void (x) (int);    return x&" ;
383:
384: $do ${ $try ${ checkCode (@expr1073743267 code@var140 ) $; $assertThrowFail $(@expr1073743268 "cppcheck-2.8/test/testgarbage.cpp" $, 384 $) $; $} $catch $(@expr1073743269 $const InternalError $&@expr1073743270 $) ${ $} $catch $(@expr1073743271 $... $) ${ $assertThrowFail $(@expr1073743272 "cppcheck-2.8/test/testgarbage.cpp" $, 384 $) $; $} $} $while $(@expr1073743273 $false $) ;
385: }
386:
387: void wrong_syntax_if_macro ( ) {
388:
389: $do ${ $try ${ checkCode (@expr1073743274 "void f() { if MACRO(); }" ) $; $assertThrowFail $(@expr1073743275 "cppcheck-2.8/test/testgarbage.cpp" $, 389 $) $; $} $catch $(@expr1073743276 $const InternalError $&@expr1073743277 $) ${ $} $catch $(@expr1073743278 $... $) ${ $assertThrowFail $(@expr1073743279 "cppcheck-2.8/test/testgarbage.cpp" $, 389 $) $; $} $} $while $(@expr1073743280 $false $) ;
390:
391:
392: $do ${ $try ${ checkCode (@expr1073743281 "void f() { if (x) MACRO() {} }" ) $; $assertThrowFail $(@expr1073743282 "cppcheck-2.8/test/testgarbage.cpp" $, 392 $) $; $} $catch $(@expr1073743283 $const InternalError $&@expr1073743284 $) ${ $} $catch $(@expr1073743285 $... $) ${ $assertThrowFail $(@expr1073743286 "cppcheck-2.8/test/testgarbage.cpp" $, 392 $) $; $} $} $while $(@expr1073743287 $false $) ;
393:
394:
395: $do ${ $try ${ checkCode (@expr1073743288 "void f() { if (x) MACRO() else ; }" ) $; $assertThrowFail $(@expr1073743289 "cppcheck-2.8/test/testgarbage.cpp" $, 395 $) $; $} $catch $(@expr1073743290 $const InternalError $&@expr1073743291 $) ${ $} $catch $(@expr1073743292 $... $) ${ $assertThrowFail $(@expr1073743293 "cppcheck-2.8/test/testgarbage.cpp" $, 395 $) $; $} $} $while $(@expr1073743294 $false $) ;
396: }
397:
398: void wrong_syntax_class_x_y ( ) {
399:
400: const char code@var141 [@expr1073743295 15 ] =@expr1073743296 "class x y { };" ;
401:
402: {
403: errout@var100 .@expr1473 str (@expr1474 "" ) ;
404: Tokenizer tokenizer@var142 (@expr1073743299 &@expr1476 settings@var102 , this@expr1477 ) ;
405: std ::@expr1073743302 istringstream istr@var143 (@expr1073743303 code@var141 ) ;
406: $if $(@expr1073743304 $!@expr1073743305 $assert_ $(@expr1073743306 "cppcheck-2.8/test/testgarbage.cpp" $, 406 $, $(@expr1073743307 tokenizer@var142 .@expr1073743308 tokenize (@expr1073743309 istr@var143 , "test.c" ) $) $) $) { $return ; }
407: $if $(@expr1073743310 $!@expr1073743311 $assertEquals $(@expr1073743312 "cppcheck-2.8/test/testgarbage.cpp" $, 407 $, "" $, errout@var100 .@expr1473 str (@expr1490 ) $) $) { $return ; }
408: }
409: {
410: errout@var100 .@expr1473 str (@expr1474 "" ) ;
411: Tokenizer tokenizer@var144 (@expr1073743317 &@expr1476 settings@var102 , this@expr1477 ) ;
412: std ::@expr1073743319 istringstream istr@var145 (@expr1073743320 code@var141 ) ;
413: $if $(@expr1073743321 $!@expr1073743322 $assert_ $(@expr1073743323 "cppcheck-2.8/test/testgarbage.cpp" $, 413 $, $(@expr1073743324 tokenizer@var144 .@expr1073743325 tokenize (@expr1073743326 istr@var145 , "test.cpp" ) $) $) $) { $return ; }
414: $if $(@expr1073743327 $!@expr1073743328 $assertEquals $(@expr1073743329 "cppcheck-2.8/test/testgarbage.cpp" $, 414 $, "[test.cpp:1]: (information) The code 'class x y {' is not handled. You can use -I or --include to add handling of this code.\n" $, errout@var100 .@expr1473 str (@expr1490 ) $) $) { $return ; }
415: }
416: }
417:
418: void wrong_syntax_anonymous_struct ( ) {
419: $do ${ $try ${ checkCode (@expr1073743332 "struct { int x; } = {0};" ) $; $assertThrowFail $(@expr1073743333 "cppcheck-2.8/test/testgarbage.cpp" $, 419 $) $; $} $catch $(@expr1073743334 $const InternalError $&@expr1073743335 $) ${ $} $catch $(@expr1073743336 $... $) ${ $assertThrowFail $(@expr1073743337 "cppcheck-2.8/test/testgarbage.cpp" $, 419 $) $; $} $} $while $(@expr1073743338 $false $) ;
420: $do ${ $try ${ checkCode (@expr1073743339 "struct { int x; } * = {0};" ) $; $assertThrowFail $(@expr1073743340 "cppcheck-2.8/test/testgarbage.cpp" $, 420 $) $; $} $catch $(@expr1073743341 $const InternalError $&@expr1073743342 $) ${ $} $catch $(@expr1073743343 $... $) ${ $assertThrowFail $(@expr1073743344 "cppcheck-2.8/test/testgarbage.cpp" $, 420 $) $; $} $} $while $(@expr1073743345 $false $) ;
421: }
422:
423: void syntax_case_default ( ) {
424: $do ${ $try ${ checkCode (@expr1073743346 "void f() {switch (n) { case: z(); break;}}" ) $; $assertThrowFail $(@expr1073743347 "cppcheck-2.8/test/testgarbage.cpp" $, 424 $) $; $} $catch $(@expr1073743348 $const InternalError $&@expr1073743349 $) ${ $} $catch $(@expr1073743350 $... $) ${ $assertThrowFail $(@expr1073743351 "cppcheck-2.8/test/testgarbage.cpp" $, 424 $) $; $} $} $while $(@expr1073743352 $false $) ;
425:
426: $do ${ $try ${ checkCode (@expr1073743353 "void f() {switch (n) { case;: z(); break;}}" ) $; $assertThrowFail $(@expr1073743354 "cppcheck-2.8/test/testgarbage.cpp" $, 426 $) $; $} $catch $(@expr1073743355 $const InternalError $&@expr1073743356 $) ${ $} $catch $(@expr1073743357 $... $) ${ $assertThrowFail $(@expr1073743358 "cppcheck-2.8/test/testgarbage.cpp" $, 426 $) $; $} $} $while $(@expr1073743359 $false $) ;
427:
428: $do ${ $try ${ checkCode (@expr1073743360 "void f() {switch (n) { case {}: z(); break;}}" ) $; $assertThrowFail $(@expr1073743361 "cppcheck-2.8/test/testgarbage.cpp" $, 428 $) $; $} $catch $(@expr1073743362 $const InternalError $&@expr1073743363 $) ${ $} $catch $(@expr1073743364 $... $) ${ $assertThrowFail $(@expr1073743365 "cppcheck-2.8/test/testgarbage.cpp" $, 428 $) $; $} $} $while $(@expr1073743366 $false $) ;
429:
430: $do ${ $try ${ checkCode (@expr1073743367 "void f() {switch (n) { case 0?{1}:{2} : z(); break;}}" ) $; $assertThrowFail $(@expr1073743368 "cppcheck-2.8/test/testgarbage.cpp" $, 430 $) $; $} $catch $(@expr1073743369 $const InternalError $&@expr1073743370 $) ${ $} $catch $(@expr1073743371 $... $) ${ $assertThrowFail $(@expr1073743372 "cppcheck-2.8/test/testgarbage.cpp" $, 430 $) $; $} $} $while $(@expr1073743373 $false $) ;
431:
432: $do ${ $try ${ checkCode (@expr1073743374 "void f() {switch (n) { case 0?1;:{2} : z(); break;}}" ) $; $assertThrowFail $(@expr1073743375 "cppcheck-2.8/test/testgarbage.cpp" $, 432 $) $; $} $catch $(@expr1073743376 $const InternalError $&@expr1073743377 $) ${ $} $catch $(@expr1073743378 $... $) ${ $assertThrowFail $(@expr1073743379 "cppcheck-2.8/test/testgarbage.cpp" $, 432 $) $; $} $} $while $(@expr1073743380 $false $) ;
433:
434: $do ${ $try ${ checkCode (@expr1073743381 "void f() {switch (n) { case 0?(1?{3:4}):2 : z(); break;}}" ) $; $assertThrowFail $(@expr1073743382 "cppcheck-2.8/test/testgarbage.cpp" $, 434 $) $; $} $catch $(@expr1073743383 $const InternalError $&@expr1073743384 $) ${ $} $catch $(@expr1073743385 $... $) ${ $assertThrowFail $(@expr1073743386 "cppcheck-2.8/test/testgarbage.cpp" $, 434 $) $; $} $} $while $(@expr1073743387 $false $) ;
435:
436:
437: $do ${ $try ${ checkCode (@expr1073743388 "( ) { switch break ; { switch ( x ) { case } y break ; : } }" ) $; $assertThrowFail $(@expr1073743389 "cppcheck-2.8/test/testgarbage.cpp" $, 437 $) $; $} $catch $(@expr1073743390 $const InternalError $&@expr1073743391 $) ${ $} $catch $(@expr1073743392 $... $) ${ $assertThrowFail $(@expr1073743393 "cppcheck-2.8/test/testgarbage.cpp" $, 437 $) $; $} $} $while $(@expr1073743394 $false $) ;
438:
439:
440: $do ${ $try ${ checkCode (@expr1073743395 "f ( ) { switch break; { switch ( x ) { case } case break; -6: ( ) ; } }" ) $; $assertThrowFail $(@expr1073743396 "cppcheck-2.8/test/testgarbage.cpp" $, 440 $) $; $} $catch $(@expr1073743397 $const InternalError $&@expr1073743398 $) ${ $} $catch $(@expr1073743399 $... $) ${ $assertThrowFail $(@expr1073743400 "cppcheck-2.8/test/testgarbage.cpp" $, 440 $) $; $} $} $while $(@expr1073743401 $false $) ;
441:
442:
443: $do ${ $try ${ checkCode (@expr1073743402 "void foo () { switch(0) case 0 : default : }" ) $; $assertThrowFail $(@expr1073743403 "cppcheck-2.8/test/testgarbage.cpp" $, 443 $) $; $} $catch $(@expr1073743404 $const InternalError $&@expr1073743405 $) ${ $} $catch $(@expr1073743406 $... $) ${ $assertThrowFail $(@expr1073743407 "cppcheck-2.8/test/testgarbage.cpp" $, 443 $) $; $} $} $while $(@expr1073743408 $false $) ;
444: }
445:
446: void garbageCode1 ( ) {
447: checkCode (@expr1073743409 "struct x foo_t; foo_t typedef y;" ) ;
448: }
449:
450: void garbageCode2 ( ) {
451: $do ${ $try ${ checkCode (@expr1073743410 "enum { D = 1  struct  { } ; }  s.b = D;" ) $; $} $catch $(@expr1073743411 $const InternalError $&@expr1073743412 $) ${ $} $catch $(@expr1073743413 $... $) ${ $assertThrow $(@expr1073743414 "cppcheck-2.8/test/testgarbage.cpp" $, 451 $) $; $} $} $while $(@expr1073743415 $false $) ;
452: }
453:
454: void garbageCode3 ( ) {
455: $do ${ $try ${ checkCode (@expr1073743416 "enum {  D = 2 s ; struct y  { x } ; } { s.a = C ; s.b = D ; }" ) $; $} $catch $(@expr1073743417 $const InternalError $&@expr1073743418 $) ${ $} $catch $(@expr1073743419 $... $) ${ $assertThrow $(@expr1073743420 "cppcheck-2.8/test/testgarbage.cpp" $, 455 $) $; $} $} $while $(@expr1073743421 $false $) ;
456: }
457:
458: void garbageCode4 ( ) {
459: $do ${ $try ${ checkCode (@expr1073743422 "void f ( ) { = a ; if ( 1 ) if = ( 0 ) ; }" ) $; $assertThrowFail $(@expr1073743423 "cppcheck-2.8/test/testgarbage.cpp" $, 459 $) $; $} $catch $(@expr1073743424 $const InternalError $&@expr1073743425 $) ${ $} $catch $(@expr1073743426 $... $) ${ $assertThrowFail $(@expr1073743427 "cppcheck-2.8/test/testgarbage.cpp" $, 459 $) $; $} $} $while $(@expr1073743428 $false $) ;
460: }
461:
462: void garbageCode5 ( ) {
463: checkCode (@expr1073743429 "( asm : ; void : );" ) ;
464: }
465:
466: void garbageCode6 ( ) {
467: $do ${ $try ${ checkCode (@expr1073743430 "int b = ( 0 ? ? ) 1 : 0 ;" ) $; $assertThrowFail $(@expr1073743431 "cppcheck-2.8/test/testgarbage.cpp" $, 467 $) $; $} $catch $(@expr1073743432 $const InternalError $&@expr1073743433 $) ${ $} $catch $(@expr1073743434 $... $) ${ $assertThrowFail $(@expr1073743435 "cppcheck-2.8/test/testgarbage.cpp" $, 467 $) $; $} $} $while $(@expr1073743436 $false $) ;
468: $do ${ $try ${ checkCode (@expr1073743437 "int a = int b = ( 0 ? ? ) 1 : 0 ;" ) $; $assertThrowFail $(@expr1073743438 "cppcheck-2.8/test/testgarbage.cpp" $, 468 $) $; $} $catch $(@expr1073743439 $const InternalError $&@expr1073743440 $) ${ $} $catch $(@expr1073743441 $... $) ${ $assertThrowFail $(@expr1073743442 "cppcheck-2.8/test/testgarbage.cpp" $, 468 $) $; $} $} $while $(@expr1073743443 $false $) ;
469: }
470:
471: void garbageCode7 ( ) {
472: $do ${ $try ${ checkCode (@expr1073743444 "1 (int j) { return return (c) * sizeof } y[1];" ) $; $assertThrowFail $(@expr1073743445 "cppcheck-2.8/test/testgarbage.cpp" $, 472 $) $; $} $catch $(@expr1073743446 $const InternalError $&@expr1073743447 $) ${ $} $catch $(@expr1073743448 $... $) ${ $assertThrowFail $(@expr1073743449 "cppcheck-2.8/test/testgarbage.cpp" $, 472 $) $; $} $} $while $(@expr1073743450 $false $) ;
473: $do ${ $try ${ checkCode (@expr1073743451 "foo(Args&&...) fn void = { } auto template<typename... bar(Args&&...)" ) $; $assertThrowFail $(@expr1073743452 "cppcheck-2.8/test/testgarbage.cpp" $, 473 $) $; $} $catch $(@expr1073743453 $const InternalError $&@expr1073743454 $) ${ $} $catch $(@expr1073743455 $... $) ${ $assertThrowFail $(@expr1073743456 "cppcheck-2.8/test/testgarbage.cpp" $, 473 $) $; $} $} $while $(@expr1073743457 $false $) ;
474: }
475:
476: void garbageCode8 ( ) {
477: $do ${ $try ${ checkCode (@expr1073743458 "{ enum struct : };" ) $; $} $catch $(@expr1073743459 $const InternalError $&@expr1073743460 $) ${ $} $catch $(@expr1073743461 $... $) ${ $assertThrow $(@expr1073743462 "cppcheck-2.8/test/testgarbage.cpp" $, 477 $) $; $} $} $while $(@expr1073743463 $false $) ;
478: $do ${ $try ${ checkCode (@expr1073743464 "int ScopedEnum{ template<typename T> { { e = T::error }; };\nScopedEnum1<int> se1; { enum class E : T { e = 0 = e ScopedEnum2<void*> struct UnscopedEnum3 { T{ e = 4 }; };\narr[(int) E::e]; }; UnscopedEnum3<int> e2 = f()\n{ { e = e1; T::error } int test1 ue2; g() { enum class E { e = T::error }; return E::e; } int test2 = }\nnamespace UnscopedEnum { template<typename T> struct UnscopedEnum1 { E{ e = T::error }; }; UnscopedEnum1<int> { enum E : { e = 0 }; };\nUnscopedEnum2<void*> ue3; template<typename T> struct UnscopedEnum3 { enum { }; }; int arr[E::e]; };\nUnscopedEnum3<int> namespace template<typename T> int f() { enum E { e }; T::error }; return (int) E(); } int test1 int g() { enum E { e = E };\nE::e; } int test2 = g<int>(); }" ) $; $} $catch $(@expr1073743465 $const InternalError $&@expr1073743466 $) ${ $} $catch $(@expr1073743467 $... $) ${ $assertThrow $(@expr1073743468 "cppcheck-2.8/test/testgarbage.cpp" $, 478 $) $; $} $} $while $(@expr1073743469 $false $)
479:
|
484:
485: ;
486: }
487:
488: void garbageCode9 ( ) {
489: $do ${ $try ${ checkCode (@expr1073743470 "enum { e = { } } ( ) { { enum { } } } { e } " ) $; $} $catch $(@expr1073743471 $const InternalError $&@expr1073743472 $) ${ $} $catch $(@expr1073743473 $... $) ${ $assertThrow $(@expr1073743474 "cppcheck-2.8/test/testgarbage.cpp" $, 489 $) $; $} $} $while $(@expr1073743475 $false $) ;
490: }
491:
492: void garbageCode10 ( ) {
493: $do ${ $try ${ checkCode (@expr1073743476 "for( rl=reslist; rl!=NULL; rl=rl->next )" ) $; $assertThrowFail $(@expr1073743477 "cppcheck-2.8/test/testgarbage.cpp" $, 493 $) $; $} $catch $(@expr1073743478 $const InternalError $&@expr1073743479 $) ${ $} $catch $(@expr1073743480 $... $) ${ $assertThrowFail $(@expr1073743481 "cppcheck-2.8/test/testgarbage.cpp" $, 493 $) $; $} $} $while $(@expr1073743482 $false $) ;
494: }
495:
496: void garbageCode12 ( ) {
497: checkCode (@expr1073743483 "{ g; S (void) { struct } { } int &g; }" ) ;
498: }
499:
500: void garbageCode13 ( ) {
501: checkCode (@expr1073743484 "struct C {} {} x" ) ;
502: }
503:
504: void garbageCode15 ( ) {
505: $do ${ $try ${ checkCode (@expr1073743485 "int f ( int* r ) { {  int s[2] ; f ( s ) ; if ( ) } }" ) $; $assertThrowFail $(@expr1073743486 "cppcheck-2.8/test/testgarbage.cpp" $, 505 $) $; $} $catch $(@expr1073743487 $const InternalError $&@expr1073743488 $) ${ $} $catch $(@expr1073743489 $... $) ${ $assertThrowFail $(@expr1073743490 "cppcheck-2.8/test/testgarbage.cpp" $, 505 $) $; $} $} $while $(@expr1073743491 $false $) ;
506: }
507:
508: void garbageCode16 ( ) {
509: checkCode (@expr1073743492 "{ } A() { delete }" ) ;
510: }
511:
512: void garbageCode17 ( ) {
513: $do ${ $try ${ checkCode (@expr1073743493 "void h(int l) {\n    while\n}" ) $; $assertThrowFail $(@expr1073743494 "cppcheck-2.8/test/testgarbage.cpp" $, 513 $) $; $} $catch $(@expr1073743495 $const InternalError $&@expr1073743496 $) ${ $} $catch $(@expr1073743497 $... $) ${ $assertThrowFail $(@expr1073743498 "cppcheck-2.8/test/testgarbage.cpp" $, 513 $) $; $} $} $while $(@expr1073743499 $false $)
514:
515: ;
516: }
517:
518: void garbageCode18 ( ) {
519: $do ${ $try ${ checkCode (@expr1073743500 "switch(){case}" ) $; $assertThrowFail $(@expr1073743501 "cppcheck-2.8/test/testgarbage.cpp" $, 519 $) $; $} $catch $(@expr1073743502 $const InternalError $&@expr1073743503 $) ${ $} $catch $(@expr1073743504 $... $) ${ $assertThrowFail $(@expr1073743505 "cppcheck-2.8/test/testgarbage.cpp" $, 519 $) $; $} $} $while $(@expr1073743506 $false $) ;
520: }
521:
522: void garbageCode20 ( ) {
523:
524: $if $(@expr1073743507 $!@expr1073743508 $assertEquals $(@expr1073743509 "cppcheck-2.8/test/testgarbage.cpp" $, 524 $, "void f ( 0 * ) ;" $, checkCode (@expr1073743510 "void f ( 0 * ) ;" ) $) $) { $return ; }
525: }
526:
527: void garbageCode21 ( ) {
528:
529: $do ${ $try ${ checkCode (@expr1073743511 "void f()\n{\n  (\n    x;\n    int a, a2, a2*x; if () ;\n  )\n}" ) $; $assertThrowFail $(@expr1073743512 "cppcheck-2.8/test/testgarbage.cpp" $, 529 $) $; $} $catch $(@expr1073743513 $const InternalError $&@expr1073743514 $) ${ $} $catch $(@expr1073743515 $... $) ${ $assertThrowFail $(@expr1073743516 "cppcheck-2.8/test/testgarbage.cpp" $, 529 $) $; $} $} $while $(@expr1073743517 $false $)
530:
|
534:
535: ;
536: }
537:
538: void garbageCode22 ( ) {
539:
540: $do ${ $try ${ checkCode (@expr1073743518 "int f()\n{\n    return if\n}" ) $; $assertThrowFail $(@expr1073743519 "cppcheck-2.8/test/testgarbage.cpp" $, 540 $) $; $} $catch $(@expr1073743520 $const InternalError $&@expr1073743521 $) ${ $} $catch $(@expr1073743522 $... $) ${ $assertThrowFail $(@expr1073743523 "cppcheck-2.8/test/testgarbage.cpp" $, 540 $) $; $} $} $while $(@expr1073743524 $false $)
541:
542:
543: ;
544: }
545:
546: void garbageCode23 ( ) {
547:
548: checkCode (@expr1073743525 "{\n    if (1) = x\n    else abort s[2]\n}"
549:
550:
551: ) ;
552: $if $(@expr1073743526 $!@expr1073743527 $assertEquals $(@expr1073743528 "cppcheck-2.8/test/testgarbage.cpp" $, 552 $, "" $, errout@var100 .@expr1073743529 str (@expr1073743530 ) $) $) { $return ; }
553: }
554:
555: void garbageCode24 ( ) {
556:
557: $do ${ $try ${ checkCode (@expr1073743531 "float buffer[64];\nmain (void)\n{\n  char *cptr;\n  cptr = (char *)buffer;\n  cptr += (-(long int) buffer & (16 * sizeof (float) - 1));\n}\n" ) $; $assertThrowFail $(@expr1073743532 "cppcheck-2.8/test/testgarbage.cpp" $, 557 $) $; $} $catch $(@expr1073743533 $const InternalError $&@expr1073743534 $) ${ $} $catch $(@expr1073743535 $... $) ${ $assertThrowFail $(@expr1073743536 "cppcheck-2.8/test/testgarbage.cpp" $, 557 $) $; $} $} $while $(@expr1073743537 $false $)
558:
|
562:
563: ;
564: }
565:
566: void garbageCode25 ( ) {
567:
568: $do ${ $try ${ checkCode (@expr1073743538 "void f() {\n    switch ( x ) {\n        case struct Tree : break;\n    }\n}" ) $; $assertThrowFail $(@expr1073743539 "cppcheck-2.8/test/testgarbage.cpp" $, 568 $) $; $} $catch $(@expr1073743540 $const InternalError $&@expr1073743541 $) ${ $} $catch $(@expr1073743542 $... $) ${ $assertThrowFail $(@expr1073743543 "cppcheck-2.8/test/testgarbage.cpp" $, 568 $) $; $} $} $while $(@expr1073743544 $false $)
569:
570:
571:
572: ;
573: }
574:
575: void garbageCode26 ( ) {
576:
577: $do ${ $try ${ checkCode (@expr1073743545 "void f() {\n    switch MAKEWORD(1)\n    {\n    case 0:\n        return;\n    }\n}" ) $; $assertThrowFail $(@expr1073743546 "cppcheck-2.8/test/testgarbage.cpp" $, 577 $) $; $} $catch $(@expr1073743547 $const InternalError $&@expr1073743548 $) ${ $} $catch $(@expr1073743549 $... $) ${ $assertThrowFail $(@expr1073743550 "cppcheck-2.8/test/testgarbage.cpp" $, 577 $) $; $} $} $while $(@expr1073743551 $false $)
578:
|
582:
583: ;
584: }
585:
586: void garbageCode27 ( ) {
587: $do ${ $try ${ checkCode (@expr1073743552 "int f() {\n    return if\n}" ) $; $assertThrowFail $(@expr1073743553 "cppcheck-2.8/test/testgarbage.cpp" $, 587 $) $; $} $catch $(@expr1073743554 $const InternalError $&@expr1073743555 $) ${ $} $catch $(@expr1073743556 $... $) ${ $assertThrowFail $(@expr1073743557 "cppcheck-2.8/test/testgarbage.cpp" $, 587 $) $; $} $} $while $(@expr1073743558 $false $)
588:
589: ;
590: }
591:
592: void garbageCode28 ( ) {
593:
594: checkCode (@expr1073743559 "struct R1 {\n  int a;\n  R1 () : a { }\n};"
595:
596:
597: ) ;
598: }
599:
600: void garbageCode30 ( ) {
601:
602: checkCode (@expr1073743560 "void f(int x) {\n x = 42\n}"
603:
604: ) ;
605: }
606:
607: void garbageCode31 ( ) {
608: $do ${ $try ${ checkCode (@expr1073743561 "typedef struct{}x[([],)]typedef e y;(y,x 0){}" ) $; $assertThrowFail $(@expr1073743562 "cppcheck-2.8/test/testgarbage.cpp" $, 608 $) $; $} $catch $(@expr1073743563 $const InternalError $&@expr1073743564 $) ${ $} $catch $(@expr1073743565 $... $) ${ $assertThrowFail $(@expr1073743566 "cppcheck-2.8/test/testgarbage.cpp" $, 608 $) $; $} $} $while $(@expr1073743567 $false $) ;
609: }
610:
611: void garbageCode33 ( ) {
612: checkCode (@expr1073743568 "main(()B{});" ) ;
613: }
614:
615:
616: void garbageCode34 ( ) {
617: const char code@var146 [@expr1073743569 35 ] =@expr1073743570 "void foo(void) {\n do\n while (0);\n}"
618:
619:
620: ;
621: $do ${ $try ${ checkCode (@expr1073743571 code@var146 ) $; $assertThrowFail $(@expr1073743572 "cppcheck-2.8/test/testgarbage.cpp" $, 621 $) $; $} $catch $(@expr1073743573 $const InternalError $&@expr1073743574 $) ${ $} $catch $(@expr1073743575 $... $) ${ $assertThrowFail $(@expr1073743576 "cppcheck-2.8/test/testgarbage.cpp" $, 621 $) $; $} $} $while $(@expr1073743577 $false $) ;
622: }
623:
624: void garbageCode35 ( ) {
625:
626: $do ${ $try ${ checkCode (@expr1073743578 "sizeof <= A" ) $; $assertThrowFail $(@expr1073743579 "cppcheck-2.8/test/testgarbage.cpp" $, 626 $) $; $} $catch $(@expr1073743580 $const InternalError $&@expr1073743581 $) ${ $} $catch $(@expr1073743582 $... $) ${ $assertThrowFail $(@expr1073743583 "cppcheck-2.8/test/testgarbage.cpp" $, 626 $) $; $} $} $while $(@expr1073743584 $false $) ;
627: }
628:
629: void garbageCode36 ( ) {
630: $do ${ $try ${ checkCode (@expr1073743585 "{ } < class template < > , { = } ; class... >\nstruct Y { }\nclass Types { }\n( X < int > \"uses template\" ) ( < ( ) \"uses ;( int int ::primary \"uses template\" ) int double \"uses )::primary , \"uses template\" ;\n" ) $; $assertThrowFail $(@expr1073743586 "cppcheck-2.8/test/testgarbage.cpp" $, 630 $) $; $} $catch $(@expr1073743587 $const InternalError $&@expr1073743588 $) ${ $} $catch $(@expr1073743589 $... $) ${ $assertThrowFail $(@expr1073743590 "cppcheck-2.8/test/testgarbage.cpp" $, 630 $) $; $} $} $while $(@expr1073743591 $false $)
631:
|
634:
635: ;
636: }
637:
638: void garbageCode37 ( ) {
639:
640: checkCode (@expr1073743592 "void * f { } void b ( ) { * f }" ) ;
641: }
642:
643: void garbageCode38 ( ) {
644: checkCode (@expr1073743593 "{ f2 { } } void f3 () { delete[] } { }" ) ;
645: }
646:
647: void garbageCode40 ( ) {
648: checkCode (@expr1073743594 "{ ( ) () { virtual } ; { } E } A { : { } ( ) } * const ( ) const { }" ) ;
649:
650: }
651:
652: void garbageCode41 ( ) {
653: checkCode (@expr1073743595 " { } { return } *malloc(__SIZE_TYPE__ size); *memcpy(void n); static * const () { memcpy (*slot, 3); } { (); } { }" ) ;
654: }
655:
656: void garbageCode42 ( ) {
657: checkCode (@expr1073743596 "{  } * const ( ) { }" ) ;
658: }
659:
660: void garbageCode43 ( ) {
661: checkCode (@expr1073743597 "int { }; struct A<void> a = { }" ) ;
662: }
663:
664: void garbageCode44 ( ) {
665: $do ${ $try ${ checkCode (@expr1073743598 "{ { }; }; { class A : }; public typedef b;" ) $; $assertThrowFail $(@expr1073743599 "cppcheck-2.8/test/testgarbage.cpp" $, 665 $) $; $} $catch $(@expr1073743600 $const InternalError $&@expr1073743601 $) ${ $} $catch $(@expr1073743602 $... $) ${ $assertThrowFail $(@expr1073743603 "cppcheck-2.8/test/testgarbage.cpp" $, 665 $) $; $} $} $while $(@expr1073743604 $false $) ;
666: }
667:
668: void garbageCode45 ( ) {
669: $do ${ $try ${ checkCode (@expr1073743605 "struct true template < > { = } > struct Types \"s\" ; static_assert < int > ;" ) $; $assertThrowFail $(@expr1073743606 "cppcheck-2.8/test/testgarbage.cpp" $, 669 $) $; $} $catch $(@expr1073743607 $const InternalError $&@expr1073743608 $) ${ $} $catch $(@expr1073743609 $... $) ${ $assertThrowFail $(@expr1073743610 "cppcheck-2.8/test/testgarbage.cpp" $, 669 $) $; $} $} $while $(@expr1073743611 $false $) ;
670: }
671:
672: void garbageCode46 ( ) {
673: checkCode (@expr1073743612 " { bar(char *x); void foo (int ...) { struct } va_list ap; va_start(ap, size); va_arg(ap, (d)); }" ) ;
674: }
675:
676: void garbageCode47 ( ) {
677: checkCode (@expr1073743613 " { { }; }; * new private: B: B;" ) ;
678: }
679:
680: void garbageCode48 ( ) {
681: checkCode (@expr1073743614 " { d\" ) d ...\" } int main ( ) { ( ) catch ( A a ) { { } catch ( ) \"\" } }" ) ;
682: }
683:
684: void garbageCode49 ( ) {
685: $do ${ $try ${ checkCode (@expr1073743615 " ( ( ) ) { } ( { ( __builtin_va_arg_pack ( ) ) ; } ) { ( int { ( ) ( ( ) ) } ( ) { } ( ) ) += ( ) }" ) $; $assertThrowFail $(@expr1073743616 "cppcheck-2.8/test/testgarbage.cpp" $, 685 $) $; $} $catch $(@expr1073743617 $const InternalError $&@expr1073743618 $) ${ $} $catch $(@expr1073743619 $... $) ${ $assertThrowFail $(@expr1073743620 "cppcheck-2.8/test/testgarbage.cpp" $, 685 $) $; $} $} $while $(@expr1073743621 $false $) ;
686: }
687:
688: void garbageCode51 ( ) {
689: $do ${ $try ${ checkCode (@expr1073743622 " (const \"C\" ...); struct base { int f2; base (int arg1, int arg2); }; global_base(0x55, 0xff); { ((global_base.f1 0x55) (global_base.f2 0xff)) { } } base::base(int arg1, int arg2) { f2 = }" ) $; $assertThrowFail $(@expr1073743623 "cppcheck-2.8/test/testgarbage.cpp" $, 689 $) $; $} $catch $(@expr1073743624 $const InternalError $&@expr1073743625 $) ${ $} $catch $(@expr1073743626 $... $) ${ $assertThrowFail $(@expr1073743627 "cppcheck-2.8/test/testgarbage.cpp" $, 689 $) $; $} $} $while $(@expr1073743628 $false $) ;
690: }
691:
692: void garbageCode53 ( ) {
693: $do ${ $try ${ checkCode (@expr1073743629 "{ { } }; void foo (struct int i) { x->b[i] = = }" ) $; $assertThrowFail $(@expr1073743630 "cppcheck-2.8/test/testgarbage.cpp" $, 693 $) $; $} $catch $(@expr1073743631 $const InternalError $&@expr1073743632 $) ${ $} $catch $(@expr1073743633 $... $) ${ $assertThrowFail $(@expr1073743634 "cppcheck-2.8/test/testgarbage.cpp" $, 693 $) $; $} $} $while $(@expr1073743635 $false $) ;
694: }
695:
696: void garbageCode54 ( ) {
697: $do ${ $try ${ checkCode (@expr1073743636 "{ typedef long ((pf) p) (); }" ) $; $assertThrowFail $(@expr1073743637 "cppcheck-2.8/test/testgarbage.cpp" $, 697 $) $; $} $catch $(@expr1073743638 $const InternalError $&@expr1073743639 $) ${ $} $catch $(@expr1073743640 $... $) ${ $assertThrowFail $(@expr1073743641 "cppcheck-2.8/test/testgarbage.cpp" $, 697 $) $; $} $} $while $(@expr1073743642 $false $) ;
698: }
699:
700: void garbageCode55 ( ) {
701: $do ${ $try ${ checkCode (@expr1073743643 "() __attribute__((constructor)); { } { }" ) $; $assertThrowFail $(@expr1073743644 "cppcheck-2.8/test/testgarbage.cpp" $, 701 $) $; $} $catch $(@expr1073743645 $const InternalError $&@expr1073743646 $) ${ $} $catch $(@expr1073743647 $... $) ${ $assertThrowFail $(@expr1073743648 "cppcheck-2.8/test/testgarbage.cpp" $, 701 $) $; $} $} $while $(@expr1073743649 $false $) ;
702: }
703:
704: void garbageCode56 ( ) {
705: $do ${ $try ${ checkCode (@expr1073743650 "void foo() { int a = 0; int b = ???; }" ) $; $assertThrowFail $(@expr1073743651 "cppcheck-2.8/test/testgarbage.cpp" $, 705 $) $; $} $catch $(@expr1073743652 $const InternalError $&@expr1073743653 $) ${ $} $catch $(@expr1073743654 $... $) ${ $assertThrowFail $(@expr1073743655 "cppcheck-2.8/test/testgarbage.cpp" $, 705 $) $; $} $} $while $(@expr1073743656 $false $) ;
706: }
707:
708: void garbageCode57 ( ) {
709: $do ${ $try ${ checkCode (@expr1073743657 "{ } if () try { } catch (...) B::~B { }" ) $; $assertThrowFail $(@expr1073743658 "cppcheck-2.8/test/testgarbage.cpp" $, 709 $) $; $} $catch $(@expr1073743659 $const InternalError $&@expr1073743660 $) ${ $} $catch $(@expr1073743661 $... $) ${ $assertThrowFail $(@expr1073743662 "cppcheck-2.8/test/testgarbage.cpp" $, 709 $) $; $} $} $while $(@expr1073743663 $false $) ;
710: }
711:
712: void garbageCode58 ( ) {
713: $do ${ $try ${ checkCode (@expr1073743664 "{ }> {= ~A()^{} }P { }" ) $; $assertThrowFail $(@expr1073743665 "cppcheck-2.8/test/testgarbage.cpp" $, 713 $) $; $} $catch $(@expr1073743666 $const InternalError $&@expr1073743667 $) ${ $} $catch $(@expr1073743668 $... $) ${ $assertThrowFail $(@expr1073743669 "cppcheck-2.8/test/testgarbage.cpp" $, 713 $) $; $} $} $while $(@expr1073743670 $false $) ;
714: $do ${ $try ${ checkCode (@expr1073743671 "{= ~A()^{} }P { } { }> is" ) $; $assertThrowFail $(@expr1073743672 "cppcheck-2.8/test/testgarbage.cpp" $, 714 $) $; $} $catch $(@expr1073743673 $const InternalError $&@expr1073743674 $) ${ $} $catch $(@expr1073743675 $... $) ${ $assertThrowFail $(@expr1073743676 "cppcheck-2.8/test/testgarbage.cpp" $, 714 $) $; $} $} $while $(@expr1073743677 $false $) ;
715: }
716:
717: void garbageCode59 ( ) {
718: $do ${ $try ${ checkCode (@expr1073743678 "{ { } }; char font8x8[256][8]" ) $; $assertThrowFail $(@expr1073743679 "cppcheck-2.8/test/testgarbage.cpp" $, 718 $) $; $} $catch $(@expr1073743680 $const InternalError $&@expr1073743681 $) ${ $} $catch $(@expr1073743682 $... $) ${ $assertThrowFail $(@expr1073743683 "cppcheck-2.8/test/testgarbage.cpp" $, 718 $) $; $} $} $while $(@expr1073743684 $false $) ;
719: }
720:
721: void garbageCode60 ( ) {
722: $do ${ $try ${ checkCode (@expr1073743685 "{ } { } typedef int int_array[]; int_array &right =" ) $; $assertThrowFail $(@expr1073743686 "cppcheck-2.8/test/testgarbage.cpp" $, 722 $) $; $} $catch $(@expr1073743687 $const InternalError $&@expr1073743688 $) ${ $} $catch $(@expr1073743689 $... $) ${ $assertThrowFail $(@expr1073743690 "cppcheck-2.8/test/testgarbage.cpp" $, 722 $) $; $} $} $while $(@expr1073743691 $false $) ;
723: }
724:
725: void garbageCode61 ( ) {
726: $do ${ $try ${ checkCode (@expr1073743692 "{ (const U&) }; { }; { }; struct U : virtual public" ) $; $assertThrowFail $(@expr1073743693 "cppcheck-2.8/test/testgarbage.cpp" $, 726 $) $; $} $catch $(@expr1073743694 $const InternalError $&@expr1073743695 $) ${ $} $catch $(@expr1073743696 $... $) ${ $assertThrowFail $(@expr1073743697 "cppcheck-2.8/test/testgarbage.cpp" $, 726 $) $; $} $} $while $(@expr1073743698 $false $) ;
727: }
728:
729: void garbageCode63 ( ) {
730: $do ${ $try ${ checkCode (@expr1073743699 "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref u_array_ref_gbl_obj0" ) $; $assertThrowFail $(@expr1073743700 "cppcheck-2.8/test/testgarbage.cpp" $, 730 $) $; $} $catch $(@expr1073743701 $const InternalError $&@expr1073743702 $) ${ $} $catch $(@expr1073743703 $... $) ${ $assertThrowFail $(@expr1073743704 "cppcheck-2.8/test/testgarbage.cpp" $, 730 $) $; $} $} $while $(@expr1073743705 $false $) ;
731: }
732:
733: void garbageCode64 ( ) {
734: $do ${ $try ${ checkCode (@expr1073743706 "{ } foo(void (*bar)(void))" ) $; $assertThrowFail $(@expr1073743707 "cppcheck-2.8/test/testgarbage.cpp" $, 734 $) $; $} $catch $(@expr1073743708 $const InternalError $&@expr1073743709 $) ${ $} $catch $(@expr1073743710 $... $) ${ $assertThrowFail $(@expr1073743711 "cppcheck-2.8/test/testgarbage.cpp" $, 734 $) $; $} $} $while $(@expr1073743712 $false $) ;
735: }
736:
737: void garbageCode65 ( ) {
738: $do ${ $try ${ checkCode (@expr1073743713 "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref" ) $; $assertThrowFail $(@expr1073743714 "cppcheck-2.8/test/testgarbage.cpp" $, 738 $) $; $} $catch $(@expr1073743715 $const InternalError $&@expr1073743716 $) ${ $} $catch $(@expr1073743717 $... $) ${ $assertThrowFail $(@expr1073743718 "cppcheck-2.8/test/testgarbage.cpp" $, 738 $) $; $} $} $while $(@expr1073743719 $false $) ;
739: }
740:
741: void garbageCode66 ( ) {
742: $do ${ $try ${ checkCode (@expr1073743720 "{ { } }; { { } }; { }; class bar : public virtual" ) $; $assertThrowFail $(@expr1073743721 "cppcheck-2.8/test/testgarbage.cpp" $, 742 $) $; $} $catch $(@expr1073743722 $const InternalError $&@expr1073743723 $) ${ $} $catch $(@expr1073743724 $... $) ${ $assertThrowFail $(@expr1073743725 "cppcheck-2.8/test/testgarbage.cpp" $, 742 $) $; $} $} $while $(@expr1073743726 $false $) ;
743: }
744:
745: void garbageCode68 ( ) {
746: checkCode (@expr1073743727 "(int a[3]); typedef void (*fp) (void); fp" ) ;
747: }
748:
749: void garbageCode69 ( ) {
750: $do ${ $try ${ checkCode (@expr1073743728 "{ (make_mess, aux); } typedef void F(void); aux(void (*x)()) { } (void (*y)()) { } F*" ) $; $assertThrowFail $(@expr1073743729 "cppcheck-2.8/test/testgarbage.cpp" $, 750 $) $; $} $catch $(@expr1073743730 $const InternalError $&@expr1073743731 $) ${ $} $catch $(@expr1073743732 $... $) ${ $assertThrowFail $(@expr1073743733 "cppcheck-2.8/test/testgarbage.cpp" $, 750 $) $; $} $} $while $(@expr1073743734 $false $) ;
751: }
752:
753: void garbageCode70 ( ) {
754: $do ${ $try ${ checkCode (@expr1073743735 "{ } __attribute__((constructor)) void" ) $; $assertThrowFail $(@expr1073743736 "cppcheck-2.8/test/testgarbage.cpp" $, 754 $) $; $} $catch $(@expr1073743737 $const InternalError $&@expr1073743738 $) ${ $} $catch $(@expr1073743739 $... $) ${ $assertThrowFail $(@expr1073743740 "cppcheck-2.8/test/testgarbage.cpp" $, 754 $) $; $} $} $while $(@expr1073743741 $false $) ;
755: }
756:
757: void garbageCode71 ( ) {
758: $do ${ $try ${ checkCode (@expr1073743742 "( ) { } typedef void noattr_t ( ) ; noattr_t __attribute__ ( )" ) $; $assertThrowFail $(@expr1073743743 "cppcheck-2.8/test/testgarbage.cpp" $, 758 $) $; $} $catch $(@expr1073743744 $const InternalError $&@expr1073743745 $) ${ $} $catch $(@expr1073743746 $... $) ${ $assertThrowFail $(@expr1073743747 "cppcheck-2.8/test/testgarbage.cpp" $, 758 $) $; $} $} $while $(@expr1073743748 $false $) ;
759: }
760:
761: void garbageCode72 ( ) {
762: $do ${ $try ${ checkCode (@expr1073743749 "{ } { } typedef void voidfn(void); <voidfn&" ) $; $assertThrowFail $(@expr1073743750 "cppcheck-2.8/test/testgarbage.cpp" $, 762 $) $; $} $catch $(@expr1073743751 $const InternalError $&@expr1073743752 $) ${ $} $catch $(@expr1073743753 $... $) ${ $assertThrowFail $(@expr1073743754 "cppcheck-2.8/test/testgarbage.cpp" $, 762 $) $; $} $} $while $(@expr1073743755 $false $) ;
763: }
764:
765: void garbageCode73 ( ) {
766: $do ${ $try ${ checkCode (@expr1073743756 "typedef int IRT[2]; IRT&" ) $; $assertThrowFail $(@expr1073743757 "cppcheck-2.8/test/testgarbage.cpp" $, 766 $) $; $} $catch $(@expr1073743758 $const InternalError $&@expr1073743759 $) ${ $} $catch $(@expr1073743760 $... $) ${ $assertThrowFail $(@expr1073743761 "cppcheck-2.8/test/testgarbage.cpp" $, 766 $) $; $} $} $while $(@expr1073743762 $false $) ;
767: }
768:
769: void garbageCode74 ( ) {
770: $do ${ $try ${ checkCode (@expr1073743763 "_lenraw(const char* digits) { } typedef decltype(sizeof(0)) { } operator" ) $; $assertThrowFail $(@expr1073743764 "cppcheck-2.8/test/testgarbage.cpp" $, 770 $) $; $} $catch $(@expr1073743765 $const InternalError $&@expr1073743766 $) ${ $} $catch $(@expr1073743767 $... $) ${ $assertThrowFail $(@expr1073743768 "cppcheck-2.8/test/testgarbage.cpp" $, 770 $) $; $} $} $while $(@expr1073743769 $false $) ;
771: }
772:
773: void garbageCode76 ( ) {
774: $do ${ $try ${ checkCode (@expr1073743770 " ( ) ( ) { ( ) [ ] } TEST ( ) { ( _broadcast_f32x4 ) ( ) ( ) ( ) ( ) if ( ) ( ) ; } E mask = ( ) [ ] ( ) res1.x =" ) $; $assertThrowFail $(@expr1073743771 "cppcheck-2.8/test/testgarbage.cpp" $, 774 $) $; $} $catch $(@expr1073743772 $const InternalError $&@expr1073743773 $) ${ $} $catch $(@expr1073743774 $... $) ${ $assertThrowFail $(@expr1073743775 "cppcheck-2.8/test/testgarbage.cpp" $, 774 $) $; $} $} $while $(@expr1073743776 $false $) ;
775: }
776:
777: void garbageCode77 ( ) {
778: $do ${ $try ${ checkCode (@expr1073743777 "void foo (int **p) { { { };>= } } unsigned *d = (b b--) --*d" ) $; $assertThrowFail $(@expr1073743778 "cppcheck-2.8/test/testgarbage.cpp" $, 778 $) $; $} $catch $(@expr1073743779 $const InternalError $&@expr1073743780 $) ${ $} $catch $(@expr1073743781 $... $) ${ $assertThrowFail $(@expr1073743782 "cppcheck-2.8/test/testgarbage.cpp" $, 778 $) $; $} $} $while $(@expr1073743783 $false $) ;
779: }
780:
781: void garbageCode78 ( ) {
782: $do ${ $try ${ checkCode (@expr1073743784 "( ) { [ ] } ( ) { } const_array_of_int ( ) { } typedef int A [ ] [ ] ; A a = { { } { } }" ) $; $assertThrowFail $(@expr1073743785 "cppcheck-2.8/test/testgarbage.cpp" $, 782 $) $; $} $catch $(@expr1073743786 $const InternalError $&@expr1073743787 $) ${ $} $catch $(@expr1073743788 $... $) ${ $assertThrowFail $(@expr1073743789 "cppcheck-2.8/test/testgarbage.cpp" $, 782 $) $; $} $} $while $(@expr1073743790 $false $) ;
783: }
784:
785: void garbageCode79 ( ) {
786: $do ${ $try ${ checkCode (@expr1073743791 "{ } { } typedef void ( func_type ) ( ) ; func_type & ( )" ) $; $assertThrowFail $(@expr1073743792 "cppcheck-2.8/test/testgarbage.cpp" $, 786 $) $; $} $catch $(@expr1073743793 $const InternalError $&@expr1073743794 $) ${ $} $catch $(@expr1073743795 $... $) ${ $assertThrowFail $(@expr1073743796 "cppcheck-2.8/test/testgarbage.cpp" $, 786 $) $; $} $} $while $(@expr1073743797 $false $) ;
787: }
788:
789: void garbageCode80 ( ) {
790: $do ${ $try ${ checkCode (@expr1073743798 "( ) { ; ( ) ; ( * ) [ ] ; [ ] = ( ( ) ( ) h ) ! ( ( ) ) } { ; } { } head heads [ ] = ; = & heads [ 2 ]" ) $; $assertThrowFail $(@expr1073743799 "cppcheck-2.8/test/testgarbage.cpp" $, 790 $) $; $} $catch $(@expr1073743800 $const InternalError $&@expr1073743801 $) ${ $} $catch $(@expr1073743802 $... $) ${ $assertThrowFail $(@expr1073743803 "cppcheck-2.8/test/testgarbage.cpp" $, 790 $) $; $} $} $while $(@expr1073743804 $false $) ;
791: }
792:
793: void garbageCode81 ( ) {
794: $do ${ $try ${ checkCode (@expr1073743805 "{ } [ ] { ( ) } { } typedef void ( *fptr1 ) ( ) const" ) $; $assertThrowFail $(@expr1073743806 "cppcheck-2.8/test/testgarbage.cpp" $, 794 $) $; $} $catch $(@expr1073743807 $const InternalError $&@expr1073743808 $) ${ $} $catch $(@expr1073743809 $... $) ${ $assertThrowFail $(@expr1073743810 "cppcheck-2.8/test/testgarbage.cpp" $, 794 $) $; $} $} $while $(@expr1073743811 $false $) ;
795: }
796:
797: void garbageCode82 ( ) {
798: $do ${ $try ${ checkCode (@expr1073743812 "p(\"Hello \" 14) _yn(const size_t) typedef bool pfunk (*pfunk)(const size_t)" ) $; $assertThrowFail $(@expr1073743813 "cppcheck-2.8/test/testgarbage.cpp" $, 798 $) $; $} $catch $(@expr1073743814 $const InternalError $&@expr1073743815 $) ${ $} $catch $(@expr1073743816 $... $) ${ $assertThrowFail $(@expr1073743817 "cppcheck-2.8/test/testgarbage.cpp" $, 798 $) $; $} $} $while $(@expr1073743818 $false $) ;
799: }
800:
801: void garbageCode83 ( ) {
802: $do ${ $try ${ checkCode (@expr1073743819 "namespace A { class } class A { friend C ; } { } ;" ) $; $assertThrowFail $(@expr1073743820 "cppcheck-2.8/test/testgarbage.cpp" $, 802 $) $; $} $catch $(@expr1073743821 $const InternalError $&@expr1073743822 $) ${ $} $catch $(@expr1073743823 $... $) ${ $assertThrowFail $(@expr1073743824 "cppcheck-2.8/test/testgarbage.cpp" $, 802 $) $; $} $} $while $(@expr1073743825 $false $) ;
803: }
804:
805: void garbageCode84 ( ) {
806: $do ${ $try ${ checkCode (@expr1073743826 "int main ( [ ] ) {  [ ] ; int i = 0 ; do { } ; } ( [ ] ) { }" ) $; $assertThrowFail $(@expr1073743827 "cppcheck-2.8/test/testgarbage.cpp" $, 806 $) $; $} $catch $(@expr1073743828 $const InternalError $&@expr1073743829 $) ${ $} $catch $(@expr1073743830 $... $) ${ $assertThrowFail $(@expr1073743831 "cppcheck-2.8/test/testgarbage.cpp" $, 806 $) $; $} $} $while $(@expr1073743832 $false $) ;
807: }
808:
809: void garbageCode85 ( ) {
810: $do ${ $try ${ checkCode (@expr1073743833 "{ } { } typedef void ( *VoidFunc() ) ( ) ; VoidFunc" ) $; $assertThrowFail $(@expr1073743834 "cppcheck-2.8/test/testgarbage.cpp" $, 810 $) $; $} $catch $(@expr1073743835 $const InternalError $&@expr1073743836 $) ${ $} $catch $(@expr1073743837 $... $) ${ $assertThrowFail $(@expr1073743838 "cppcheck-2.8/test/testgarbage.cpp" $, 810 $) $; $} $} $while $(@expr1073743839 $false $) ;
811: }
812:
813: void garbageCode86 ( ) {
814: $do ${ $try ${ checkCode (@expr1073743840 "{ } typedef char ( *( X ) ( void) , char ) ;" ) $; $assertThrowFail $(@expr1073743841 "cppcheck-2.8/test/testgarbage.cpp" $, 814 $) $; $} $catch $(@expr1073743842 $const InternalError $&@expr1073743843 $) ${ $} $catch $(@expr1073743844 $... $) ${ $assertThrowFail $(@expr1073743845 "cppcheck-2.8/test/testgarbage.cpp" $, 814 $) $; $} $} $while $(@expr1073743846 $false $) ;
815: }
816:
817: void garbageCode87 ( ) {
818: $do ${ $try ${ checkCode (@expr1073743847 "((X (128))) (int a) { v[ = {} (x 42) a] += }" ) $; $assertThrowFail $(@expr1073743848 "cppcheck-2.8/test/testgarbage.cpp" $, 818 $) $; $} $catch $(@expr1073743849 $const InternalError $&@expr1073743850 $) ${ $} $catch $(@expr1073743851 $... $) ${ $assertThrowFail $(@expr1073743852 "cppcheck-2.8/test/testgarbage.cpp" $, 818 $) $; $} $} $while $(@expr1073743853 $false $) ;
819: }
820:
821: void garbageCode88 ( ) {
822: $do ${ $try ${ checkCode (@expr1073743854 "( ) { ( 0 ) { ( ) } } g ( ) { i( ( false ?) ( ) : 1 ) ; } ;" ) $; $assertThrowFail $(@expr1073743855 "cppcheck-2.8/test/testgarbage.cpp" $, 822 $) $; $} $catch $(@expr1073743856 $const InternalError $&@expr1073743857 $) ${ $} $catch $(@expr1073743858 $... $) ${ $assertThrowFail $(@expr1073743859 "cppcheck-2.8/test/testgarbage.cpp" $, 822 $) $; $} $} $while $(@expr1073743860 $false $) ;
823: }
824:
825: void garbageCode90 ( ) {
826: $do ${ $try ${ checkCode (@expr1073743861 "{ } { } typedef int u_array [[ ] ; typedef u_array & u_array_ref] ( ) { } u_array_ref_gbl_obj0" ) $; $assertThrowFail $(@expr1073743862 "cppcheck-2.8/test/testgarbage.cpp" $, 826 $) $; $} $catch $(@expr1073743863 $const InternalError $&@expr1073743864 $) ${ $} $catch $(@expr1073743865 $... $) ${ $assertThrowFail $(@expr1073743866 "cppcheck-2.8/test/testgarbage.cpp" $, 826 $) $; $} $} $while $(@expr1073743867 $false $) ;
827: }
828:
829: void garbageCode91 ( ) {
830: $do ${ $try ${ checkCode (@expr1073743868 "typedef __attribute__((vector_size (16))) { return[ (v2df){ } ;] }" ) $; $assertThrowFail $(@expr1073743869 "cppcheck-2.8/test/testgarbage.cpp" $, 830 $) $; $} $catch $(@expr1073743870 $const InternalError $&@expr1073743871 $) ${ $} $catch $(@expr1073743872 $... $) ${ $assertThrowFail $(@expr1073743873 "cppcheck-2.8/test/testgarbage.cpp" $, 830 $) $; $} $} $while $(@expr1073743874 $false $) ;
831: }
832:
833: void garbageCode92 ( ) {
834: $do ${ $try ${ checkCode (@expr1073743875 "template < typename _Tp ( ( ) ; _Tp ) , decltype > { } { ( ) ( ) }" ) $; $assertThrowFail $(@expr1073743876 "cppcheck-2.8/test/testgarbage.cpp" $, 834 $) $; $} $catch $(@expr1073743877 $const InternalError $&@expr1073743878 $) ${ $} $catch $(@expr1073743879 $... $) ${ $assertThrowFail $(@expr1073743880 "cppcheck-2.8/test/testgarbage.cpp" $, 834 $) $; $} $} $while $(@expr1073743881 $false $) ;
835: }
836:
837: void garbageCode94 ( ) {
838:
839: $do ${ $try ${ checkCode (@expr1073743882 "typedef long __m256i __attribute__ ( ( ( ) ) )[ ; ( ) { } typedef __m256i __attribute__ ( ( ( ) ) ) < ] ( ) { ; }" ) $; $assertThrowFail $(@expr1073743883 "cppcheck-2.8/test/testgarbage.cpp" $, 839 $) $; $} $catch $(@expr1073743884 $const InternalError $&@expr1073743885 $) ${ $} $catch $(@expr1073743886 $... $) ${ $assertThrowFail $(@expr1073743887 "cppcheck-2.8/test/testgarbage.cpp" $, 839 $) $; $} $} $while $(@expr1073743888 $false $) ;
840: }
841:
842: void garbageCode95 ( ) {
843: $do ${ $try ${ checkCode (@expr1073743889 "{ } x x ; { } h h [ ] ( ) ( ) { struct x ( x ) ; int __attribute__ ( ) f ( ) { h - > first = & x ; struct x * n = h - > first ; ( ) n > } }" ) $; $assertThrowFail $(@expr1073743890 "cppcheck-2.8/test/testgarbage.cpp" $, 843 $) $; $} $catch $(@expr1073743891 $const InternalError $&@expr1073743892 $) ${ $} $catch $(@expr1073743893 $... $) ${ $assertThrowFail $(@expr1073743894 "cppcheck-2.8/test/testgarbage.cpp" $, 843 $) $; $} $} $while $(@expr1073743895 $false $) ;
844: }
845:
846: void garbageCode96 ( ) {
847: $do ${ $try ${ checkCode (@expr1073743896 "typedef J J[ ; typedef ( ) ( ) { ; } typedef J J ;] ( ) ( J cx ) { n } ;" ) $; $assertThrowFail $(@expr1073743897 "cppcheck-2.8/test/testgarbage.cpp" $, 847 $) $; $} $catch $(@expr1073743898 $const InternalError $&@expr1073743899 $) ${ $} $catch $(@expr1073743900 $... $) ${ $assertThrowFail $(@expr1073743901 "cppcheck-2.8/test/testgarbage.cpp" $, 847 $) $; $} $} $while $(@expr1073743902 $false $) ;
848: }
849:
850: void garbageCode97 ( ) {
851: $do ${ $try ${ checkCode (@expr1073743903 "namespace A {> } class A{ { }} class A : T< ;" ) $; $assertThrowFail $(@expr1073743904 "cppcheck-2.8/test/testgarbage.cpp" $, 851 $) $; $} $catch $(@expr1073743905 $const InternalError $&@expr1073743906 $) ${ $} $catch $(@expr1073743907 $... $) ${ $assertThrowFail $(@expr1073743908 "cppcheck-2.8/test/testgarbage.cpp" $, 851 $) $; $} $} $while $(@expr1073743909 $false $) ;
852: }
853:
854: void garbageCode98 ( ) {
855: $do ${ $try ${ checkCode (@expr1073743910 "for (cocon To::ta@Taaaaaforconst oken aaaaaaaaaaaa5Dl()\nconst unsigned in;\nfon *tok = f);.s(Token i = d-)L;" ) $; $assertThrowFail $(@expr1073743911 "cppcheck-2.8/test/testgarbage.cpp" $, 855 $) $; $} $catch $(@expr1073743912 $const InternalError $&@expr1073743913 $) ${ $} $catch $(@expr1073743914 $... $) ${ $assertThrowFail $(@expr1073743915 "cppcheck-2.8/test/testgarbage.cpp" $, 855 $) $; $} $} $while $(@expr1073743916 $false $)
856:
857: ;
858: }
859:
860: void garbageCode99 ( ) {
861: $do ${ $try ${ checkCode (@expr1073743917 "{ xs :: i(:) ! ! x/5 ! !\ni, :: a :: b integer, } foo2(x) :: j(:)\nb type(*), d(:), a x :: end d(..), foo end\nfoo4 b d(..), a a x type(*), b foo2 b" ) $; $assertThrowFail $(@expr1073743918 "cppcheck-2.8/test/testgarbage.cpp" $, 861 $) $; $} $catch $(@expr1073743919 $const InternalError $&@expr1073743920 $) ${ $} $catch $(@expr1073743921 $... $) ${ $assertThrowFail $(@expr1073743922 "cppcheck-2.8/test/testgarbage.cpp" $, 861 $) $; $} $} $while $(@expr1073743923 $false $)
862:
863:
864: ;
865: }
866:
867: void garbageCode100 ( ) {
868: $do ${ $try ${ checkCode (@expr1073743924 "( ) { ( i< ) } int foo ( ) { int i ; ( for ( i => 1 ) ; ) }" ) $; $assertThrowFail $(@expr1073743925 "cppcheck-2.8/test/testgarbage.cpp" $, 868 $) $; $} $catch $(@expr1073743926 $const InternalError $&@expr1073743927 $) ${ $} $catch $(@expr1073743928 $... $) ${ $assertThrowFail $(@expr1073743929 "cppcheck-2.8/test/testgarbage.cpp" $, 868 $) $; $} $} $while $(@expr1073743930 $false $) ;
869: }
870:
871: void garbageCode101 ( ) {
872:
873: $do ${ $try ${ checkCode (@expr1073743931 "template < class , =( , int) X = 1 > struct A { } ( ) { = } [ { } ] ( ) { A < void > 0 }" ) $; $assertThrowFail $(@expr1073743932 "cppcheck-2.8/test/testgarbage.cpp" $, 873 $) $; $} $catch $(@expr1073743933 $const InternalError $&@expr1073743934 $) ${ $} $catch $(@expr1073743935 $... $) ${ $assertThrowFail $(@expr1073743936 "cppcheck-2.8/test/testgarbage.cpp" $, 873 $) $; $} $} $while $(@expr1073743937 $false $) ;
874:
875: $do ${ $try ${ checkCode (@expr1073743938 "template < class =( , ) X = 1> struct A {}; A<void> a;" ) $; $assertThrowFail $(@expr1073743939 "cppcheck-2.8/test/testgarbage.cpp" $, 875 $) $; $} $catch $(@expr1073743940 $const InternalError $&@expr1073743941 $) ${ $} $catch $(@expr1073743942 $... $) ${ $assertThrowFail $(@expr1073743943 "cppcheck-2.8/test/testgarbage.cpp" $, 875 $) $; $} $} $while $(@expr1073743944 $false $) ;
876: }
877:
878: void garbageCode102 ( ) {
879: checkCode (@expr1073743945 "struct Object { ( ) ; Object & operator= ( Object ) { ( ) { } if ( this != & b ) } }" ) ;
880: }
881:
882: void garbageCode103 ( ) {
883: $do ${ $try ${ checkCode (@expr1073743946 "a f(r) int * r; { { int s[2]; [f(s); if () ]  } }" ) $; $assertThrowFail $(@expr1073743947 "cppcheck-2.8/test/testgarbage.cpp" $, 883 $) $; $} $catch $(@expr1073743948 $const InternalError $&@expr1073743949 $) ${ $} $catch $(@expr1073743950 $... $) ${ $assertThrowFail $(@expr1073743951 "cppcheck-2.8/test/testgarbage.cpp" $, 883 $) $; $} $} $while $(@expr1073743952 $false $) ;
884: }
885:
886: void garbageCode104 ( ) {
887: $do ${ $try ${ checkCode (@expr1073743953 "template < Types > struct S {> ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) } { ( )> >} { ( ) { } } ( ) { ( ) }" ) $; $assertThrowFail $(@expr1073743954 "cppcheck-2.8/test/testgarbage.cpp" $, 887 $) $; $} $catch $(@expr1073743955 $const InternalError $&@expr1073743956 $) ${ $} $catch $(@expr1073743957 $... $) ${ $assertThrowFail $(@expr1073743958 "cppcheck-2.8/test/testgarbage.cpp" $, 887 $) $; $} $} $while $(@expr1073743959 $false $) ;
888: }
889:
890: void garbageCode105 ( ) {
891: $do ${ $try ${ checkCode (@expr1073743960 "void foo (int i) { int a , for (a 1; a( < 4; a++) if (a) (b b++) (b);) n++; }" ) $; $assertThrowFail $(@expr1073743961 "cppcheck-2.8/test/testgarbage.cpp" $, 891 $) $; $} $catch $(@expr1073743962 $const InternalError $&@expr1073743963 $) ${ $} $catch $(@expr1073743964 $... $) ${ $assertThrowFail $(@expr1073743965 "cppcheck-2.8/test/testgarbage.cpp" $, 891 $) $; $} $} $while $(@expr1073743966 $false $) ;
892: }
893:
894: void garbageCode106 ( ) {
895: $do ${ $try ${ checkCode (@expr1073743967 "[ ] typedef typedef b_array b_array_ref [ ; ] ( ) b_array_ref b_array_ref_gbl_obj0 { ; { b_array_ref b_array_ref_gbl_obj0 } }" ) $; $assertThrowFail $(@expr1073743968 "cppcheck-2.8/test/testgarbage.cpp" $, 895 $) $; $} $catch $(@expr1073743969 $const InternalError $&@expr1073743970 $) ${ $} $catch $(@expr1073743971 $... $) ${ $assertThrowFail $(@expr1073743972 "cppcheck-2.8/test/testgarbage.cpp" $, 895 $) $; $} $} $while $(@expr1073743973 $false $) ;
896: }
897:
898: void garbageCode107 ( ) {
899: $do ${ $try ${ checkCode (@expr1073743974 "enum { val = 1{ }; { const} }; { } Bar { const int A = val const } ;" ) $; $} $catch $(@expr1073743975 $const InternalError $&@expr1073743976 $) ${ $} $catch $(@expr1073743977 $... $) ${ $assertThrow $(@expr1073743978 "cppcheck-2.8/test/testgarbage.cpp" $, 899 $) $; $} $} $while $(@expr1073743979 $false $) ;
900: }
901:
902: void garbageCode108 ( ) {
903: $do ${ $try ${ checkCode (@expr1073743980 "A( ) { } bool f( ) { ( ) F; ( ) { ( == ) if ( !=< || ( !A( ) && r[2] ) ) ( !A( ) ) ( ) } }" ) $; $assertThrowFail $(@expr1073743981 "cppcheck-2.8/test/testgarbage.cpp" $, 903 $) $; $} $catch $(@expr1073743982 $const InternalError $&@expr1073743983 $) ${ $} $catch $(@expr1073743984 $... $) ${ $assertThrowFail $(@expr1073743985 "cppcheck-2.8/test/testgarbage.cpp" $, 903 $) $; $} $} $while $(@expr1073743986 $false $) ;
904: }
905:
906: void garbageCode109 ( ) {
907: checkCode (@expr1073743987 "( *const<> (( ) ) { } ( *const ( ) ( ) ) { } ( * const<> ( size_t )) ) { } ( * const ( ) ( ) ) { }" ) ;
908: }
909:
910: void garbageCode110 ( ) {
911: $do ${ $try ${ checkCode (@expr1073743988 "( *const<> ( size_t ) ; foo ) { } * ( *const ( size_t ) ( ) ;> foo )< { }" ) $; $assertThrowFail $(@expr1073743989 "cppcheck-2.8/test/testgarbage.cpp" $, 911 $) $; $} $catch $(@expr1073743990 $const InternalError $&@expr1073743991 $) ${ $} $catch $(@expr1073743992 $... $) ${ $assertThrowFail $(@expr1073743993 "cppcheck-2.8/test/testgarbage.cpp" $, 911 $) $; $} $} $while $(@expr1073743994 $false $) ;
912: }
913:
914: void garbageCode111 ( ) {
915: $do ${ $try ${ checkCode (@expr1073743995 "enum { FOO = 1( ,) } {{ FOO }} ;" ) $; $} $catch $(@expr1073743996 $const InternalError $&@expr1073743997 $) ${ $} $catch $(@expr1073743998 $... $) ${ $assertThrow $(@expr1073743999 "cppcheck-2.8/test/testgarbage.cpp" $, 915 $) $; $} $} $while $(@expr1073744000 $false $) ;
916: }
917:
918: void garbageCode112 ( ) {
919: $do ${ $try ${ checkCode (@expr1073744001 "enum { FOO = ( , ) } {{ }}>> enum { FOO< = ( ) } { { } } ;" ) $; $} $catch $(@expr1073744002 $const InternalError $&@expr1073744003 $) ${ $} $catch $(@expr1073744004 $... $) ${ $assertThrow $(@expr1073744005 "cppcheck-2.8/test/testgarbage.cpp" $, 919 $) $; $} $} $while $(@expr1073744006 $false $) ;
920: }
921:
922: void garbageCode114 ( ) {
923: checkCode (@expr1073744007 "Q_GLOBAL_STATIC_WITH_INITIALIZER(Qt4NodeStaticData, qt4NodeStaticData, {\n    for (unsigned i = 0 ; i < count; i++) {\n    }\n});"
924:
925:
926: ) ;
927: }
928:
929: void garbageCode115 ( ) {
930: $do ${ $try ${ checkCode (@expr1073744008 "A template < int { int = -1 ; } template < int N > struct B { int [ A < N > :: zero ] ;  } ; B < 0 > b ;" ) $; $assertThrowFail $(@expr1073744009 "cppcheck-2.8/test/testgarbage.cpp" $, 930 $) $; $} $catch $(@expr1073744010 $const InternalError $&@expr1073744011 $) ${ $} $catch $(@expr1073744012 $... $) ${ $assertThrowFail $(@expr1073744013 "cppcheck-2.8/test/testgarbage.cpp" $, 930 $) $; $} $} $while $(@expr1073744014 $false $) ;
931: }
932:
933: void garbageCode116 ( ) {
934: $do ${ $try ${ checkCode (@expr1073744015 "struct template<int { = }; > struct B { }; B < 0 > b;" ) $; $assertThrowFail $(@expr1073744016 "cppcheck-2.8/test/testgarbage.cpp" $, 934 $) $; $} $catch $(@expr1073744017 $const InternalError $&@expr1073744018 $) ${ $} $catch $(@expr1073744019 $... $) ${ $assertThrowFail $(@expr1073744020 "cppcheck-2.8/test/testgarbage.cpp" $, 934 $) $; $} $} $while $(@expr1073744021 $false $) ;
935: }
936:
937: void garbageCode117 ( ) {
938: $do ${ $try ${ checkCode (@expr1073744022 "enum E { f = {} };\nint a = f;" ) $; $} $catch $(@expr1073744023 $const InternalError $&@expr1073744024 $) ${ $} $catch $(@expr1073744025 $... $) ${ $assertThrow $(@expr1073744026 "cppcheck-2.8/test/testgarbage.cpp" $, 938 $) $; $} $} $while $(@expr1073744027 $false $)
939: ;
940: }
941:
942: void garbageCode118 ( ) {
943: $do ${ $try ${ checkCode (@expr1073744028 "enum {\n    NUM_OPCODES =\n};\nstruct bytecode {};\njv jq_next() { opcode = ((opcode) +NUM_OPCODES);\n}" ) $; $assertThrowFail $(@expr1073744029 "cppcheck-2.8/test/testgarbage.cpp" $, 943 $) $; $} $catch $(@expr1073744030 $const InternalError $&@expr1073744031 $) ${ $} $catch $(@expr1073744032 $... $) ${ $assertThrowFail $(@expr1073744033 "cppcheck-2.8/test/testgarbage.cpp" $, 943 $) $; $} $} $while $(@expr1073744034 $false $)
944:
|
948:
949: ;
950: }
951:
952: void garbageCode119 ( ) {
953: checkCode (@expr1073744035 "{ { void foo() { struct }; template <typename> struct S { Used x; void bar() } auto f = [this] { }; } };" ) ;
954: }
955:
956: void garbageCode120 ( ) {
957: checkCode (@expr1073744036 "int main() {\n   return 0\n}"
958:
959: ) ;
960: $if $(@expr1073744037 $!@expr1073744038 $assertEquals $(@expr1073744039 "cppcheck-2.8/test/testgarbage.cpp" $, 960 $, "" $, errout@var100 .@expr1073744040 str (@expr1073744041 ) $) $) { $return ; }
961: }
962:
963: void garbageCode121 ( ) {
964: $do ${ $try ${ checkCode (@expr1073744042 "abcdef??<123456??>+??=" ) $; $assertThrowFail $(@expr1073744043 "cppcheck-2.8/test/testgarbage.cpp" $, 964 $) $; $} $catch $(@expr1073744044 $const InternalError $&@expr1073744045 $) ${ $} $catch $(@expr1073744046 $... $) ${ $assertThrowFail $(@expr1073744047 "cppcheck-2.8/test/testgarbage.cpp" $, 964 $) $; $} $} $while $(@expr1073744048 $false $)
965:
966: ;
967: }
968:
969: void garbageCode122 ( ) {
970: checkCode (@expr1073744049 "void foo() {\nchar *a = malloc(10);\na[0]\n}"
971:
972:
973: ) ;
974: }
975:
976: void garbageCode123 ( ) {
977: checkCode (@expr1073744050 "namespace pr16989 {\n    class C {\n        C tpl_mem(T *) { return }\n    };\n}"
978:
979:
980:
981: ) ;
982: }
983:
984: void garbageCode125 ( ) {
985: $do ${ $try ${ checkCode (@expr1073744051 "{ T struct B : T valueA_AA ; } T : [ T > ( ) { B } template < T > struct A < > : ] { ( ) { return valueA_AC struct { : } } b A < int > AC ( ) a_aa.M ; ( ) ( ) }" ) $; $assertThrowFail $(@expr1073744052 "cppcheck-2.8/test/testgarbage.cpp" $, 985 $) $; $} $catch $(@expr1073744053 $const InternalError $&@expr1073744054 $) ${ $} $catch $(@expr1073744055 $... $) ${ $assertThrowFail $(@expr1073744056 "cppcheck-2.8/test/testgarbage.cpp" $, 985 $) $; $} $} $while $(@expr1073744057 $false $) ;
986: $do ${ $try ${ checkCode (@expr1073744058 "template < Types > struct S :{ ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) }" ) $; $assertThrowFail $(@expr1073744059 "cppcheck-2.8/test/testgarbage.cpp" $, 986 $) $; $} $catch $(@expr1073744060 $const InternalError $&@expr1073744061 $) ${ $} $catch $(@expr1073744062 $... $) ${ $assertThrowFail $(@expr1073744063 "cppcheck-2.8/test/testgarbage.cpp" $, 986 $) $; $} $} $while $(@expr1073744064 $false $)
987: ;
988: }
989:
990: void garbageCode126 ( ) {
991: $do ${ $try ${ checkCode (@expr1073744065 "{ } float __ieee754_sinhf ( float x ) { float t , , do { gf_u ( jx ) { } ( 0 ) return ; ( ) { } t } ( 0x42b17180 ) { } }" ) $; $assertThrowFail $(@expr1073744066 "cppcheck-2.8/test/testgarbage.cpp" $, 991 $) $; $} $catch $(@expr1073744067 $const InternalError $&@expr1073744068 $) ${ $} $catch $(@expr1073744069 $... $) ${ $assertThrowFail $(@expr1073744070 "cppcheck-2.8/test/testgarbage.cpp" $, 991 $) $; $} $} $while $(@expr1073744071 $false $)
992: ;
993: }
994:
995: void garbageCode127 ( ) {
996: checkCode (@expr1073744072 "extern \"C\" int printf(const char* fmt, ...);\nclass A {\npublic:\n  int Var;\n  A(int arg) { Var = arg; }\n  ~A() { printf(\"A d'tor\\n\"); }\n};\n const A& foo(const A& arg) { return arg; }\n foo(A(12)).Var"
997:
|
1003:
1004: ) ;
1005: }
1006:
1007: void garbageCode128 ( ) {
1008: $do ${ $try ${ checkCode (@expr1073744073 "enum { FOO = ( , ) } {{ }} enum {{ FOO << = } ( ) } {{ }} ;" ) $; $} $catch $(@expr1073744074 $const InternalError $&@expr1073744075 $) ${ $} $catch $(@expr1073744076 $... $) ${ $assertThrow $(@expr1073744077 "cppcheck-2.8/test/testgarbage.cpp" $, 1008 $) $; $} $} $while $(@expr1073744078 $false $)
1009: ;
1010: }
1011:
1012: void garbageCode129 ( ) {
1013: $do ${ $try ${ checkCode (@expr1073744079 "operator - ( { } typedef typename x ; ( ) ) { ( { { ( ( ) ) } ( { } ) } ) }" ) $; $assertThrowFail $(@expr1073744080 "cppcheck-2.8/test/testgarbage.cpp" $, 1013 $) $; $} $catch $(@expr1073744081 $const InternalError $&@expr1073744082 $) ${ $} $catch $(@expr1073744083 $... $) ${ $assertThrowFail $(@expr1073744084 "cppcheck-2.8/test/testgarbage.cpp" $, 1013 $) $; $} $} $while $(@expr1073744085 $false $)
1014: ;
1015: }
1016:
1017: void garbageCode130 ( ) {
1018: $do ${ $try ${ checkCode (@expr1073744086 "enum { FOO = ( , ){ } { { } } { { FOO} = } ( ) } { { } } enumL\" ( enumL\" { { FOO } ( ) } { { } } ;" ) $; $} $catch $(@expr1073744087 $const InternalError $&@expr1073744088 $) ${ $} $catch $(@expr1073744089 $... $) ${ $assertThrow $(@expr1073744090 "cppcheck-2.8/test/testgarbage.cpp" $, 1018 $) $; $} $} $while $(@expr1073744091 $false $)
1019: ;
1020: }
1021:
1022: void garbageCode131 ( ) {
1023: $do ${ $try ${ checkCode (@expr1073744092 "( void ) { ( ) } ( ) / { ( ) }" ) $; $assertThrowFail $(@expr1073744093 "cppcheck-2.8/test/testgarbage.cpp" $, 1023 $) $; $} $catch $(@expr1073744094 $const InternalError $&@expr1073744095 $) ${ $} $catch $(@expr1073744096 $... $) ${ $assertThrowFail $(@expr1073744097 "cppcheck-2.8/test/testgarbage.cpp" $, 1023 $) $; $} $} $while $(@expr1073744098 $false $) ;
1024:
1025: }
1026:
1027: void garbageCode132 ( ) {
1028: $do ${ $try ${ checkCode (@expr1073744099 "() () { } { () () ({}) i() } void i(void(*ptr) ()) { ptr(!) () }" ) $; $assertThrowFail $(@expr1073744100 "cppcheck-2.8/test/testgarbage.cpp" $, 1028 $) $; $} $catch $(@expr1073744101 $const InternalError $&@expr1073744102 $) ${ $} $catch $(@expr1073744103 $... $) ${ $assertThrowFail $(@expr1073744104 "cppcheck-2.8/test/testgarbage.cpp" $, 1028 $) $; $} $} $while $(@expr1073744105 $false $) ;
1029: }
1030:
1031: void garbageCode133 ( ) {
1032: $do ${ $try ${ checkCode (@expr1073744106 "void f() {{}" ) $; $assertThrowFail $(@expr1073744107 "cppcheck-2.8/test/testgarbage.cpp" $, 1032 $) $; $} $catch $(@expr1073744108 $const InternalError $&@expr1073744109 $) ${ $} $catch $(@expr1073744110 $... $) ${ $assertThrowFail $(@expr1073744111 "cppcheck-2.8/test/testgarbage.cpp" $, 1032 $) $; $} $} $while $(@expr1073744112 $false $) ;
1033:
1034: $do ${ $try ${ checkCode (@expr1073744113 "void f()) {}" ) $; $assertThrowFail $(@expr1073744114 "cppcheck-2.8/test/testgarbage.cpp" $, 1034 $) $; $} $catch $(@expr1073744115 $const InternalError $&@expr1073744116 $) ${ $} $catch $(@expr1073744117 $... $) ${ $assertThrowFail $(@expr1073744118 "cppcheck-2.8/test/testgarbage.cpp" $, 1034 $) $; $} $} $while $(@expr1073744119 $false $) ;
1035:
1036: $do ${ $try ${ checkCode (@expr1073744120 "void f()\n{\n foo(;\n}\n" ) $; $assertThrowFail $(@expr1073744121 "cppcheck-2.8/test/testgarbage.cpp" $, 1036 $) $; $} $catch $(@expr1073744122 $const InternalError $&@expr1073744123 $) ${ $} $catch $(@expr1073744124 $... $) ${ $assertThrowFail $(@expr1073744125 "cppcheck-2.8/test/testgarbage.cpp" $, 1036 $) $; $} $} $while $(@expr1073744126 $false $)
1037:
1038:
1039: ;
1040:
1041: $do ${ $try ${ checkCode (@expr1073744127 "void f()\n{\n for(;;){ foo();\n}\n" ) $; $assertThrowFail $(@expr1073744128 "cppcheck-2.8/test/testgarbage.cpp" $, 1041 $) $; $} $catch $(@expr1073744129 $const InternalError $&@expr1073744130 $) ${ $} $catch $(@expr1073744131 $... $) ${ $assertThrowFail $(@expr1073744132 "cppcheck-2.8/test/testgarbage.cpp" $, 1041 $) $; $} $} $while $(@expr1073744133 $false $)
1042:
1043:
1044: ;
1045:
1046: $do ${ $try ${ checkCode (@expr1073744134 "void f()\n{\n a[10;\n}\n" ) $; $assertThrowFail $(@expr1073744135 "cppcheck-2.8/test/testgarbage.cpp" $, 1046 $) $; $} $catch $(@expr1073744136 $const InternalError $&@expr1073744137 $) ${ $} $catch $(@expr1073744138 $... $) ${ $assertThrowFail $(@expr1073744139 "cppcheck-2.8/test/testgarbage.cpp" $, 1046 $) $; $} $} $while $(@expr1073744140 $false $)
1047:
1048:
1049: ;
1050:
1051: {
1052: const char code@var147 [@expr1073744141 24 ] =@expr1073744142 "{\n   a(\n}\n{\n   b());\n}\n"
1053:
|
1056:
1057: ;
1058: $if $(@expr1073744143 $!@expr1073744144 $assertEquals $(@expr1073744145 "cppcheck-2.8/test/testgarbage.cpp" $, 1058 $, "[test.cpp:2] Unmatched '('. Configuration: ''." $, $getSyntaxError_ $(@expr1073744146 code@var147 $, "cppcheck-2.8/test/testgarbage.cpp" $, 1058 $) $) $) { $return ; }
1059: }
1060:
1061: {
1062: const char code@var148 [@expr1073744147 33 ] =@expr1073744148 "void f() {\n   int x = 3) + 0;\n}\n"
1063:
1064: ;
1065: $if $(@expr1073744149 $!@expr1073744150 $assertEquals $(@expr1073744151 "cppcheck-2.8/test/testgarbage.cpp" $, 1065 $, "[test.cpp:2] Unmatched ')'. Configuration: ''." $, $getSyntaxError_ $(@expr1073744152 code@var148 $, "cppcheck-2.8/test/testgarbage.cpp" $, 1065 $) $) $) { $return ; }
1066: }
1067:
1068: {
1069: const char code@var149 [@expr1073744153 34 ] =@expr1073744154 "void f() {\n   int x = (3] + 0;\n}\n"
1070:
1071: ;
1072: $if $(@expr1073744155 $!@expr1073744156 $assertEquals $(@expr1073744157 "cppcheck-2.8/test/testgarbage.cpp" $, 1072 $, "[test.cpp:2] Unmatched ']'. Configuration: ''." $, $getSyntaxError_ $(@expr1073744158 code@var149 $, "cppcheck-2.8/test/testgarbage.cpp" $, 1072 $) $) $) { $return ; }
1073: }
1074:
1075: {
1076: const char code@var150 [@expr1073744159 19 ] =@expr1073744160 "void f() {\n   {\n}\n"
1077:
1078: ;
1079: $if $(@expr1073744161 $!@expr1073744162 $assertEquals $(@expr1073744163 "cppcheck-2.8/test/testgarbage.cpp" $, 1079 $, "[test.cpp:1] Unmatched '{'. Configuration: ''." $, $getSyntaxError_ $(@expr1073744164 code@var150 $, "cppcheck-2.8/test/testgarbage.cpp" $, 1079 $) $) $) { $return ; }
1080: }
1081: }
1082:
1083: void garbageCode134 ( ) {
1084:
1085: $do ${ $try ${ checkCode (@expr1073744165 "foo() template<typename T1 = T2 = typename = unused, T5 = = unused> struct tuple Args> tuple<Args...> { } main() { foo<int,int,int,int,int,int>(); }" ) $; $assertThrowFail $(@expr1073744166 "cppcheck-2.8/test/testgarbage.cpp" $, 1085 $) $; $} $catch $(@expr1073744167 $const InternalError $&@expr1073744168 $) ${ $} $catch $(@expr1073744169 $... $) ${ $assertThrowFail $(@expr1073744170 "cppcheck-2.8/test/testgarbage.cpp" $, 1085 $) $; $} $} $while $(@expr1073744171 $false $) ;
1086: $do ${ $try ${ checkCode (@expr1073744172 "( ) template < T1 = typename = unused> struct Args { } main ( ) { foo < int > ( ) ; }" ) $; $assertThrowFail $(@expr1073744173 "cppcheck-2.8/test/testgarbage.cpp" $, 1086 $) $; $} $catch $(@expr1073744174 $const InternalError $&@expr1073744175 $) ${ $} $catch $(@expr1073744176 $... $) ${ $assertThrowFail $(@expr1073744177 "cppcheck-2.8/test/testgarbage.cpp" $, 1086 $) $; $} $} $while $(@expr1073744178 $false $) ;
1087: $do ${ $try ${ checkCode (@expr1073744179 "() template < T = typename = x > struct a {} { f <int> () }" ) $; $assertThrowFail $(@expr1073744180 "cppcheck-2.8/test/testgarbage.cpp" $, 1087 $) $; $} $catch $(@expr1073744181 $const InternalError $&@expr1073744182 $) ${ $} $catch $(@expr1073744183 $... $) ${ $assertThrowFail $(@expr1073744184 "cppcheck-2.8/test/testgarbage.cpp" $, 1087 $) $; $} $} $while $(@expr1073744185 $false $) ;
1088: $do ${ $try ${ checkCode (@expr1073744186 "template < T = typename = > struct a { f <int> }" ) $; $assertThrowFail $(@expr1073744187 "cppcheck-2.8/test/testgarbage.cpp" $, 1088 $) $; $} $catch $(@expr1073744188 $const InternalError $&@expr1073744189 $) ${ $} $catch $(@expr1073744190 $... $) ${ $assertThrowFail $(@expr1073744191 "cppcheck-2.8/test/testgarbage.cpp" $, 1088 $) $; $} $} $while $(@expr1073744192 $false $) ;
1089: checkCode (@expr1073744193 "struct S { int i, j; }; template<int S::*p, typename U> struct X {}; X<&S::i, int> x = X<&S::i, int>(); X<&S::j, int> y = X<&S::j, int>();"
1090:
1091:
1092: ) ;
1093: checkCode (@expr1073744194 "template <typename T> struct A {}; template <> struct A<void> {}; void foo(const void* f = 0) {}"
1094:
1095: ) ;
1096: checkCode (@expr1073744195 "template<typename... T> struct A {   static const int s = 0; }; A<int> a;"
1097:
1098:
1099: ) ;
1100: checkCode (@expr1073744196 "template<class T, class U> class A {}; template<class T = A<int, int> > class B {}; template<class T = B<int> > class C {     C() : _a(0), _b(0) {}     int _a, _b; };"
1101:
|
1104:
1105: ) ;
1106: checkCode (@expr1073744197 "template<class... T> struct A {   static int i; }; void f() { A<int>::i = 0; }"
1107:
1108:
1109: ) ;
1110: }
1111:
1112: void garbageCode135 ( ) {
1113: checkCode (@expr1073744198 "long f () {\n  return a >> extern\n}\nlong a = 1 ;\nlong b = 2 ;"
1114:
1115:
1116:
1117: ) ;
1118: }
1119:
1120: void garbageCode136 ( ) {
1121: $do ${ $try ${ checkCode (@expr1073744199 "{ } () { void f() { node_t * n; for (; -n) {} } } { }" ) $; $assertThrowFail $(@expr1073744200 "cppcheck-2.8/test/testgarbage.cpp" $, 1121 $) $; $} $catch $(@expr1073744201 $const InternalError $&@expr1073744202 $) ${ $} $catch $(@expr1073744203 $... $) ${ $assertThrowFail $(@expr1073744204 "cppcheck-2.8/test/testgarbage.cpp" $, 1121 $) $; $} $} $while $(@expr1073744205 $false $)
1122: ;
1123: }
1124:
1125: void garbageCode137 ( ) {
1126: $do ${ $try ${ checkCode (@expr1073744206 "\" \" typedef signed char f; \" \"; void a() { f * s = () &[]; (; ) (; ) }" ) $; $assertThrowFail $(@expr1073744207 "cppcheck-2.8/test/testgarbage.cpp" $, 1126 $) $; $} $catch $(@expr1073744208 $const InternalError $&@expr1073744209 $) ${ $} $catch $(@expr1073744210 $... $) ${ $assertThrowFail $(@expr1073744211 "cppcheck-2.8/test/testgarbage.cpp" $, 1126 $) $; $} $} $while $(@expr1073744212 $false $) ;
1127: }
1128:
1129: void garbageCode138 ( ) {
1130: checkCode (@expr1073744213 "CS_PLUGIN_NAMESPACE_BEGIN(csparser)\n{\n    struct foo\n    {\n      union\n      {};\n    } halo;\n}\nCS_PLUGIN_NAMESPACE_END(csparser)"
1131:
|
1137:
1138: ) ;
1139: }
1140:
1141: void garbageCode139 ( ) {
1142: $do ${ $try ${ checkCode (@expr1073744214 "void hw_copyarea() {\n   de_ctrl = (nDirection == RIGHT_TO_LEFT) ?\n    ( (0 & ~(((1 << (1 - (0 ? DE_CONTROL_DIRECTION))) - 1) << (0 ? DE_CONTROL_DIRECTION))) )\n    : 42;\n}" ) $; $assertThrowFail $(@expr1073744215 "cppcheck-2.8/test/testgarbage.cpp" $, 1142 $) $; $} $catch $(@expr1073744216 $const InternalError $&@expr1073744217 $) ${ $} $catch $(@expr1073744218 $... $) ${ $assertThrowFail $(@expr1073744219 "cppcheck-2.8/test/testgarbage.cpp" $, 1142 $) $; $} $} $while $(@expr1073744220 $false $)
1143:
1144:
1145:
1146: ;
1147: }
1148:
1149: void garbageCode140 ( ) {
1150: $do ${ $try ${ checkCode (@expr1073744221 "int foo(int align) { int off(= 0 % align;  return off) ? \\ align - off  :  0;  \\ }" ) $; $assertThrowFail $(@expr1073744222 "cppcheck-2.8/test/testgarbage.cpp" $, 1150 $) $; $} $catch $(@expr1073744223 $const InternalError $&@expr1073744224 $) ${ $} $catch $(@expr1073744225 $... $) ${ $assertThrowFail $(@expr1073744226 "cppcheck-2.8/test/testgarbage.cpp" $, 1150 $) $; $} $} $while $(@expr1073744227 $false $) ;
1151: }
1152:
1153: void garbageCode141 ( ) {
1154: $do ${ $try ${ checkCode (@expr1073744228 "enum { X = << { X } } enum { X = X } = X ;" ) $; $} $catch $(@expr1073744229 $const InternalError $&@expr1073744230 $) ${ $} $catch $(@expr1073744231 $... $) ${ $assertThrow $(@expr1073744232 "cppcheck-2.8/test/testgarbage.cpp" $, 1154 $) $; $} $} $while $(@expr1073744233 $false $) ;
1155: }
1156:
1157: void garbageCode142 ( ) {
1158: checkCode (@expr1073744234 "{ } (  ) { void mapGraphs ( ) { node_t * n ; for (!oid n ) { } } } { }" ) ;
1159: }
1160:
1161: void garbageCode143 ( ) {
1162: $do ${ $try ${ checkCode (@expr1073744235 "void neoProgramShadowRegs() {\n    int i;\n    Bool noProgramShadowRegs;\n    if (noProgramShadowRegs) {\n    } else {\n        switch (nPtr->NeoPanelWidth) {\n        case 1280:\n            VGAwCR(0x64,0x?? );\n        }\n    }\n}" ) $; $assertThrowFail $(@expr1073744236 "cppcheck-2.8/test/testgarbage.cpp" $, 1162 $) $; $} $catch $(@expr1073744237 $const InternalError $&@expr1073744238 $) ${ $} $catch $(@expr1073744239 $... $) ${ $assertThrowFail $(@expr1073744240 "cppcheck-2.8/test/testgarbage.cpp" $, 1162 $) $; $} $} $while $(@expr1073744241 $false $)
1163:
|
1171:
1172: ;
1173: }
1174:
1175: void garbageCode144 ( ) {
1176: $do ${ $try ${ checkCode (@expr1073744242 "template < typename > struct A { } ; template < typename > struct A < INVALID > : A < int[ > { }] ;" ) $; $assertThrowFail $(@expr1073744243 "cppcheck-2.8/test/testgarbage.cpp" $, 1176 $) $; $} $catch $(@expr1073744244 $const InternalError $&@expr1073744245 $) ${ $} $catch $(@expr1073744246 $... $) ${ $assertThrowFail $(@expr1073744247 "cppcheck-2.8/test/testgarbage.cpp" $, 1176 $) $; $} $} $while $(@expr1073744248 $false $) ;
1177: }
1178:
1179: void garbageCode146 ( ) {
1180: $do ${ $try ${ checkCode (@expr1073744249 "void foo() {\n    ? std::cout << pow((, 1) << std::endl;\n    double <ip = NUO ip) << std::end;\n}" ) $; $assertThrowFail $(@expr1073744250 "cppcheck-2.8/test/testgarbage.cpp" $, 1180 $) $; $} $catch $(@expr1073744251 $const InternalError $&@expr1073744252 $) ${ $} $catch $(@expr1073744253 $... $) ${ $assertThrowFail $(@expr1073744254 "cppcheck-2.8/test/testgarbage.cpp" $, 1180 $) $; $} $} $while $(@expr1073744255 $false $)
1181:
1182:
1183: ;
1184: }
1185:
1186: void garbageCode147 ( ) {
1187: $do ${ $try ${ checkCode (@expr1073744256 "free(3();\n$  vWrongAllocp1) test1<int, -!>() ^ {\n    int *p<ynew int[n];\n    delete[]p;\n    int *p1 = (int*)malloc(n*sizeof(int));\n    free(p1);\n}\nvoid est2() {\n    for (int ui = 0; ui < 1z; ui++)\n        ;\n}" ) $; $assertThrowFail $(@expr1073744257 "cppcheck-2.8/test/testgarbage.cpp" $, 1187 $) $; $} $catch $(@expr1073744258 $const InternalError $&@expr1073744259 $) ${ $} $catch $(@expr1073744260 $... $) ${ $assertThrowFail $(@expr1073744261 "cppcheck-2.8/test/testgarbage.cpp" $, 1187 $) $; $} $} $while $(@expr1073744262 $false $)
1188:
|
1196:
1197: ;
1198:
1199: $do ${ $try ${ checkCode (@expr1073744263 "; void f ^ { return } int main ( ) { }" ) $; $assertThrowFail $(@expr1073744264 "cppcheck-2.8/test/testgarbage.cpp" $, 1199 $) $; $} $catch $(@expr1073744265 $const InternalError $&@expr1073744266 $) ${ $} $catch $(@expr1073744267 $... $) ${ $assertThrowFail $(@expr1073744268 "cppcheck-2.8/test/testgarbage.cpp" $, 1199 $) $; $} $} $while $(@expr1073744269 $false $) ;
1200: }
1201:
1202: void garbageCode148 ( ) {
1203: $do ${ $try ${ checkCode (@expr1073744270 "void f_1() {\n    typedef S0 b[][1][1] != 0\n};\nb[K][0] S0 b[][1][1] != 4{ 0 };\nb[0][0]" ) $; $assertThrowFail $(@expr1073744271 "cppcheck-2.8/test/testgarbage.cpp" $, 1203 $) $; $} $catch $(@expr1073744272 $const InternalError $&@expr1073744273 $) ${ $} $catch $(@expr1073744274 $... $) ${ $assertThrowFail $(@expr1073744275 "cppcheck-2.8/test/testgarbage.cpp" $, 1203 $) $; $} $} $while $(@expr1073744276 $false $)
1204:
1205:
1206:
1207: ;
1208: }
1209:
1210: void garbageCode149 ( ) {
1211: checkCode (@expr1073744277 "int main() {\n    for (j = 0; j < 1; j)\n        j6;\n}"
1212:
1213:
1214: ) ;
1215: }
1216:
1217: void garbageCode150 ( ) {
1218: $do ${ $try ${ checkCode (@expr1073744278 "class A {\n    pl vFoo() {\n        A::\n    };\n    A::\n}\n" ) $; $assertThrowFail $(@expr1073744279 "cppcheck-2.8/test/testgarbage.cpp" $, 1218 $) $; $} $catch $(@expr1073744280 $const InternalError $&@expr1073744281 $) ${ $} $catch $(@expr1073744282 $... $) ${ $assertThrowFail $(@expr1073744283 "cppcheck-2.8/test/testgarbage.cpp" $, 1218 $) $; $} $} $while $(@expr1073744284 $false $)
1219:
|
1222:
1223: ;
1224: }
1225:
1226: void garbageCode151 ( ) {
1227: checkCode (@expr1073744285 "void f() {\n    int a;\n    do { a=do_something() } while (a);\n}"
1228:
1229:
1230: ) ;
1231: }
1232:
1233: void garbageCode152 ( ) {
1234: const char * code@var151 ; code@var151 =@expr1073744286 "template <bool foo = std::value &&>\nstatic std::string foo(char *Bla) {\n    while (Bla[1] && Bla[1] != ',') }\n"
1235:
1236: ;
1237: checkCode (@expr1073744287 code@var151 ) ;
1238: }
1239:
1240: void garbageCode153 ( ) {
1241: $do ${ $try ${ checkCode (@expr1073744288 "enum { X = << { X } } { X X } enum { X = << { ( X ) } } { } X */" ) $; $} $catch $(@expr1073744289 $const InternalError $&@expr1073744290 $) ${ $} $catch $(@expr1073744291 $... $) ${ $assertThrow $(@expr1073744292 "cppcheck-2.8/test/testgarbage.cpp" $, 1241 $) $; $} $} $while $(@expr1073744293 $false $) ;
1242: }
1243:
1244: void garbageCode154 ( ) {
1245: checkCode (@expr1073744294 "\"abc\"[];" ) ;
1246: }
1247:
1248: void garbageCode156 ( ) {
1249: $do ${ $try ${ checkCode (@expr1073744295 "struct {}a; d f() { c ? : } {}a.p" ) $; $assertThrowFail $(@expr1073744296 "cppcheck-2.8/test/testgarbage.cpp" $, 1249 $) $; $} $catch $(@expr1073744297 $const InternalError $&@expr1073744298 $) ${ $} $catch $(@expr1073744299 $... $) ${ $assertThrowFail $(@expr1073744300 "cppcheck-2.8/test/testgarbage.cpp" $, 1249 $) $; $} $} $while $(@expr1073744301 $false $) ;
1250: }
1251:
1252: void garbageCode157 ( ) {
1253: $do ${ $try ${ checkCode (@expr1073744302 "namespace std {\n  template < typename >\n  void swap();\n}template std::swap\n" ) $; $assertThrowFail $(@expr1073744303 "cppcheck-2.8/test/testgarbage.cpp" $, 1253 $) $; $} $catch $(@expr1073744304 $const InternalError $&@expr1073744305 $) ${ $} $catch $(@expr1073744306 $... $) ${ $assertThrowFail $(@expr1073744307 "cppcheck-2.8/test/testgarbage.cpp" $, 1253 $) $; $} $} $while $(@expr1073744308 $false $)
1254:
1255:
1256:
1257: ;
1258: }
1259:
1260: void garbageCode158 ( ) {
1261: checkCode (@expr1073744309 "__FBSDID(\"...\");" ) ;
1262: }
1263:
1264: void garbageCode159 ( ) {
1265: $do ${ $try ${ checkCode (@expr1073744310 "({}typedef typename x;typename x!){({{}()})}" ) $; $assertThrowFail $(@expr1073744311 "cppcheck-2.8/test/testgarbage.cpp" $, 1265 $) $; $} $catch $(@expr1073744312 $const InternalError $&@expr1073744313 $) ${ $} $catch $(@expr1073744314 $... $) ${ $assertThrowFail $(@expr1073744315 "cppcheck-2.8/test/testgarbage.cpp" $, 1265 $) $; $} $} $while $(@expr1073744316 $false $) ;
1266: }
1267:
1268: void garbageCode160 ( ) {
1269: $do ${ $try ${ checkCode (@expr1073744317 "f(a,b,c,d)float [  a[],d;int ]  b[],c;{} " ) $; $assertThrowFail $(@expr1073744318 "cppcheck-2.8/test/testgarbage.cpp" $, 1269 $) $; $} $catch $(@expr1073744319 $const InternalError $&@expr1073744320 $) ${ $} $catch $(@expr1073744321 $... $) ${ $assertThrowFail $(@expr1073744322 "cppcheck-2.8/test/testgarbage.cpp" $, 1269 $) $; $} $} $while $(@expr1073744323 $false $) ;
1270: }
1271:
1272:
1273: void garbageCodeFuzzerClientMode1 ( ) {
1274: $do ${ $try ${ checkCode (@expr1073744324 "void f() { x= name2 & name3 name2 = | 0.1 , | 0.1 , | 0.1 name4 <= >( ); }" ) $; $assertThrowFail $(@expr1073744325 "cppcheck-2.8/test/testgarbage.cpp" $, 1274 $) $; $} $catch $(@expr1073744326 $const InternalError $&@expr1073744327 $) ${ $} $catch $(@expr1073744328 $... $) ${ $assertThrowFail $(@expr1073744329 "cppcheck-2.8/test/testgarbage.cpp" $, 1274 $) $; $} $} $while $(@expr1073744330 $false $) ;
1275: $do ${ $try ${ checkCode (@expr1073744331 "void f() { x = , * [ | + 0xff | > 0xff]; }" ) $; $assertThrowFail $(@expr1073744332 "cppcheck-2.8/test/testgarbage.cpp" $, 1275 $) $; $} $catch $(@expr1073744333 $const InternalError $&@expr1073744334 $) ${ $} $catch $(@expr1073744335 $... $) ${ $assertThrowFail $(@expr1073744336 "cppcheck-2.8/test/testgarbage.cpp" $, 1275 $) $; $} $} $while $(@expr1073744337 $false $) ;
1276: $do ${ $try ${ checkCode (@expr1073744338 "void f() {  x = , | 0xff , 0.1 < ; }" ) $; $assertThrowFail $(@expr1073744339 "cppcheck-2.8/test/testgarbage.cpp" $, 1276 $) $; $} $catch $(@expr1073744340 $const InternalError $&@expr1073744341 $) ${ $} $catch $(@expr1073744342 $... $) ${ $assertThrowFail $(@expr1073744343 "cppcheck-2.8/test/testgarbage.cpp" $, 1276 $) $; $} $} $while $(@expr1073744344 $false $) ;
1277: $do ${ $try ${ checkCode (@expr1073744345 "void f() { x = [ 1 || ] ; }" ) $; $assertThrowFail $(@expr1073744346 "cppcheck-2.8/test/testgarbage.cpp" $, 1277 $) $; $} $catch $(@expr1073744347 $const InternalError $&@expr1073744348 $) ${ $} $catch $(@expr1073744349 $... $) ${ $assertThrowFail $(@expr1073744350 "cppcheck-2.8/test/testgarbage.cpp" $, 1277 $) $; $} $} $while $(@expr1073744351 $false $) ;
1278: $do ${ $try ${ checkCode (@expr1073744352 "void f1() { x = name6 1 || ? name3 [  ( 1 || +) ] ; }" ) $; $assertThrowFail $(@expr1073744353 "cppcheck-2.8/test/testgarbage.cpp" $, 1278 $) $; $} $catch $(@expr1073744354 $const InternalError $&@expr1073744355 $) ${ $} $catch $(@expr1073744356 $... $) ${ $assertThrowFail $(@expr1073744357 "cppcheck-2.8/test/testgarbage.cpp" $, 1278 $) $; $} $} $while $(@expr1073744358 $false $) ;
1279: }
1280:
1281: void garbageValueFlow ( ) {
1282:
1283: const char * code@var152 ; code@var152 =@expr1073744359 "{} int foo(struct, x1, struct x2, x3, int, x5, x6, x7)\n{\n    (foo(s, , 2, , , 5, , 7)) abort()\n}\n"
1284:
1285:
1286: ;
1287: $do ${ $try ${ checkCode (@expr2536 code@var152 ) $; $assertThrowFail $(@expr1073744361 "cppcheck-2.8/test/testgarbage.cpp" $, 1287 $) $; $} $catch $(@expr1073744362 $const InternalError $&@expr1073744363 $) ${ $} $catch $(@expr1073744364 $... $) ${ $assertThrowFail $(@expr1073744365 "cppcheck-2.8/test/testgarbage.cpp" $, 1287 $) $; $} $} $while $(@expr1073744366 $false $) ;
1288:
1289:
1290: code@var152 =@expr1073744367 "; { int i ; for ( i = 0 ; = 123 ; ) - ; }" ;
1291: $do ${ $try ${ checkCode (@expr2536 code@var152 ) $; $assertThrowFail $(@expr1073744369 "cppcheck-2.8/test/testgarbage.cpp" $, 1291 $) $; $} $catch $(@expr1073744370 $const InternalError $&@expr1073744371 $) ${ $} $catch $(@expr1073744372 $... $) ${ $assertThrowFail $(@expr1073744373 "cppcheck-2.8/test/testgarbage.cpp" $, 1291 $) $; $} $} $while $(@expr1073744374 $false $) ;
1292:
1293: code@var152 =@expr1073744375 "void f1() { for (int n = 0 n < 10 n++); }" ;
1294: checkCode (@expr2536 code@var152 ) ;
1295: }
1296:
1297: void garbageSymbolDatabase ( ) {
1298: checkCode (@expr1073744377 "void f( { u = 1 ; } ) { }" ) ;
1299:
1300: $do ${ $try ${ checkCode (@expr1073744378 "{ }; void namespace A::f; { g() { int } }" ) $; $assertThrowFail $(@expr1073744379 "cppcheck-2.8/test/testgarbage.cpp" $, 1300 $) $; $} $catch $(@expr1073744380 $const InternalError $&@expr1073744381 $) ${ $} $catch $(@expr1073744382 $... $) ${ $assertThrowFail $(@expr1073744383 "cppcheck-2.8/test/testgarbage.cpp" $, 1300 $) $; $} $} $while $(@expr1073744384 $false $) ;
1301:
1302: $do ${ $try ${ checkCode (@expr1073744385 "class Foo {}; class Bar : public Foo" ) $; $assertThrowFail $(@expr1073744386 "cppcheck-2.8/test/testgarbage.cpp" $, 1302 $) $; $} $catch $(@expr1073744387 $const InternalError $&@expr1073744388 $) ${ $} $catch $(@expr1073744389 $... $) ${ $assertThrowFail $(@expr1073744390 "cppcheck-2.8/test/testgarbage.cpp" $, 1302 $) $; $} $} $while $(@expr1073744391 $false $) ;
1303:
1304: checkCode (@expr1073744392 "YY_DECL { switch (yy_act) {\n    case 65: YY_BREAK\n    case YY_STATE_EOF(block):\n        yyterminate();\n} }"
1305:
1306:
1307:
1308: ) ;
1309: }
1310:
1311: void garbageAST ( ) {
1312: $do ${ $try ${ checkCode (@expr1073744393 "N 1024 float a[N], b[N + 3], c[N]; void N; (void) i;\nint #define for (i = avx_test i < c[i]; i++)\nb[i + 3] = a[i] * {}" ) $; $assertThrowFail $(@expr1073744394 "cppcheck-2.8/test/testgarbage.cpp" $, 1312 $) $; $} $catch $(@expr1073744395 $const InternalError $&@expr1073744396 $) ${ $} $catch $(@expr1073744397 $... $) ${ $assertThrowFail $(@expr1073744398 "cppcheck-2.8/test/testgarbage.cpp" $, 1312 $) $; $} $} $while $(@expr1073744399 $false $)
1313:
1314: ;
1315:
1316: checkCode (@expr1073744400 "START_SECTION([EXTRA](bool isValid(const String &filename)))" ) ;
1317:
1318:
1319: $do ${ $try ${ checkCode (@expr1073744401 "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { name6 | ; ++}}}}}}}" ) $; $assertThrowFail $(@expr1073744402 "cppcheck-2.8/test/testgarbage.cpp" $, 1319 $) $; $} $catch $(@expr1073744403 $const InternalError $&@expr1073744404 $) ${ $} $catch $(@expr1073744405 $... $) ${ $assertThrowFail $(@expr1073744406 "cppcheck-2.8/test/testgarbage.cpp" $, 1319 $) $; $} $} $while $(@expr1073744407 $false $)
1320: ;
1321: $do ${ $try ${ checkCode (@expr1073744408 "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { { || ; ++}}}}}}}}" ) $; $assertThrowFail $(@expr1073744409 "cppcheck-2.8/test/testgarbage.cpp" $, 1321 $) $; $} $catch $(@expr1073744410 $const InternalError $&@expr1073744411 $) ${ $} $catch $(@expr1073744412 $... $) ${ $assertThrowFail $(@expr1073744413 "cppcheck-2.8/test/testgarbage.cpp" $, 1321 $) $; $} $} $while $(@expr1073744414 $false $)
1322: ;
1323: }
1324:
1325: void templateSimplifierCrashes ( ) {
1326: checkCode (@expr1073744415
1327: "struct A {\n  template <class T> operator T*();\n};\n\ntemplate <> A::operator char*(){ return 0; } // specialization\n\nint main() {\n  A a;\n  int *ip = a.operator int*();\n}\n\nnamespace PR5742 {\n  template <class T> struct A { };\n  struct S {\n    template <class T> operator T();\n  } s;\n  void f() {\n    s.operator A<A<int> >();\n  }\n}"
1328:
|
1345:
1346: ) ;
1347:
1348: checkCode (@expr1073744416
1349: "template<template<typename...> class T, typename... Args>\nstruct foo<T<Args...> > {\n    const bool value = true;\n};\n\ntemplate<int I>\nstruct int_\n{};\n\nint main() {\n  foo<int_<0> >::value;\n}"
1350:
|
1359:
1360: ) ;
1361:
1362: checkCode (@expr1073744417
1363: "template <typename ...> struct something_like_tuple\n{};\ntemplate <typename, typename> struct is_last {\n  static const bool value = false;\n};\ntemplate <typename T, template <typename ...> class Tuple, typename ... Head>\nstruct is_last<T, Tuple<Head ..., T>>\n{\n  static const bool value = true;\n};\n\n#define SA(X) static_assert (X, #X)\n\ntypedef something_like_tuple<char, int, float> something_like_tuple_t;\nSA ((is_last<float, something_like_tuple_t>::value == false));\nSA ((is_last<int, something_like_tuple_t>::value == false));"
1364:
|
1377:
1378: ) ;
1379:
1380: checkCode (@expr1073744418
1381: "template <typename...>\nvoid templ_fun_with_ty_pack() {}\n\nnamespace PR20047 {\n        template <typename T>\n        struct A {};\n        using AliasA = A<T>;\n}"
1382:
|
1387:
1388: ) ;
1389:
1390:
1391: $if $(@expr1073744419 $!@expr1073744420 $assertEquals $(@expr1073744421 "cppcheck-2.8/test/testgarbage.cpp" $, 1391 $, "template < typename T > struct A ;\nstruct B { template < typename T > struct C } ;\n{ } ;" $, checkCode (@expr1073744422 "template<typename T> struct A;\nstruct B { template<typename T> struct C };\n{};" ) $) $) { $return
1392:
|
1395:
1396: ; }
1397: }
1398: void garbageCode161 ( ) {
1399:
1400: $do ${ $try ${ checkCode (@expr1073744423 "{ }{ if () try { } catch (...)} B : : ~B { }" ) $; $assertThrowFail $(@expr1073744424 "cppcheck-2.8/test/testgarbage.cpp" $, 1400 $) $; $} $catch $(@expr1073744425 $const InternalError $&@expr1073744426 $) ${ $} $catch $(@expr1073744427 $... $) ${ $assertThrowFail $(@expr1073744428 "cppcheck-2.8/test/testgarbage.cpp" $, 1400 $) $; $} $} $while $(@expr1073744429 $false $) ;
1401: }
1402:
1403: void garbageCode162 ( ) {
1404:
1405: $do ${ $try ${ checkCode (@expr1073744430 "return <<  >>  x return <<  >>  x " , false ) $; $assertThrowFail $(@expr1073744431 "cppcheck-2.8/test/testgarbage.cpp" $, 1405 $) $; $} $catch $(@expr1073744432 $const InternalError $&@expr1073744433 $) ${ $} $catch $(@expr1073744434 $... $) ${ $assertThrowFail $(@expr1073744435 "cppcheck-2.8/test/testgarbage.cpp" $, 1405 $) $; $} $} $while $(@expr1073744436 $false $) ;
1406: }
1407:
1408: void garbageCode163 ( ) {
1409:
1410: $do ${ $try ${ checkCode (@expr1073744437 "typedef s f[](){typedef d h(;f)}" , false ) $; $assertThrowFail $(@expr1073744438 "cppcheck-2.8/test/testgarbage.cpp" $, 1410 $) $; $} $catch $(@expr1073744439 $const InternalError $&@expr1073744440 $) ${ $} $catch $(@expr1073744441 $... $) ${ $assertThrowFail $(@expr1073744442 "cppcheck-2.8/test/testgarbage.cpp" $, 1410 $) $; $} $} $while $(@expr1073744443 $false $) ;
1411: }
1412:
1413: void garbageCode164 ( ) {
1414:
1415: $do ${ $try ${ checkCode (@expr1073744444 "class d{k p;}(){d::d():B<()}" ) $; $assertThrowFail $(@expr1073744445 "cppcheck-2.8/test/testgarbage.cpp" $, 1415 $) $; $} $catch $(@expr1073744446 $const InternalError $&@expr1073744447 $) ${ $} $catch $(@expr1073744448 $... $) ${ $assertThrowFail $(@expr1073744449 "cppcheck-2.8/test/testgarbage.cpp" $, 1415 $) $; $} $} $while $(@expr1073744450 $false $) ;
1416: }
1417:
1418: void garbageCode165 ( ) {
1419:
1420: $do ${ $try ${ checkCode (@expr1073744451 "for(;..)" , false ) $; $assertThrowFail $(@expr1073744452 "cppcheck-2.8/test/testgarbage.cpp" $, 1420 $) $; $} $catch $(@expr1073744453 $const InternalError $&@expr1073744454 $) ${ $} $catch $(@expr1073744455 $... $) ${ $assertThrowFail $(@expr1073744456 "cppcheck-2.8/test/testgarbage.cpp" $, 1420 $) $; $} $} $while $(@expr1073744457 $false $) ;
1421: }
1422:
1423: void garbageCode167 ( ) {
1424:
1425: $do ${ $try ${ checkCode (@expr1073744458 "class D00i000{:D00i000::}i" ) $; $assertThrowFail $(@expr1073744459 "cppcheck-2.8/test/testgarbage.cpp" $, 1425 $) $; $} $catch $(@expr1073744460 $const InternalError $&@expr1073744461 $) ${ $} $catch $(@expr1073744462 $... $) ${ $assertThrowFail $(@expr1073744463 "cppcheck-2.8/test/testgarbage.cpp" $, 1425 $) $; $} $} $while $(@expr1073744464 $false $) ;
1426: }
1427:
1428: void garbageCode168 ( ) {
1429:
1430: checkCode (@expr1073744465 "long foo(void) { return *bar; }" , false ) ;
1431: }
1432:
1433: void garbageCode169 ( ) {
1434:
1435: $do ${ $try ${ checkCode (@expr1073744466 "( ) { ( ) ; { return } switch ( ) i\nset case break ; default: ( ) }" , false ) $; $assertThrowFail $(@expr1073744467 "cppcheck-2.8/test/testgarbage.cpp" $, 1435 $) $; $} $catch $(@expr1073744468 $const InternalError $&@expr1073744469 $) ${ $} $catch $(@expr1073744470 $... $) ${ $assertThrowFail $(@expr1073744471 "cppcheck-2.8/test/testgarbage.cpp" $, 1435 $) $; $} $} $while $(@expr1073744472 $false $)
1436: ;
1437: }
1438:
1439: void garbageCode170 ( ) {
1440:
1441: $do ${ $try ${ checkCode (@expr1073744473 "d i(){{f*s=typeid(()0,)}}" , false ) $; $assertThrowFail $(@expr1073744474 "cppcheck-2.8/test/testgarbage.cpp" $, 1441 $) $; $} $catch $(@expr1073744475 $const InternalError $&@expr1073744476 $) ${ $} $catch $(@expr1073744477 $... $) ${ $assertThrowFail $(@expr1073744478 "cppcheck-2.8/test/testgarbage.cpp" $, 1441 $) $; $} $} $while $(@expr1073744479 $false $) ;
1442: }
1443:
1444: void garbageCode171 ( ) {
1445:
1446: $do ${ $try ${ checkCode (@expr1073744480 "(){case()?():}:" , false ) $; $assertThrowFail $(@expr1073744481 "cppcheck-2.8/test/testgarbage.cpp" $, 1446 $) $; $} $catch $(@expr1073744482 $const InternalError $&@expr1073744483 $) ${ $} $catch $(@expr1073744484 $... $) ${ $assertThrowFail $(@expr1073744485 "cppcheck-2.8/test/testgarbage.cpp" $, 1446 $) $; $} $} $while $(@expr1073744486 $false $) ;
1447: }
1448:
1449: void garbageCode172 ( ) {
1450:
1451: $do ${ $try ${ checkCode (@expr1073744487 "p<e T=l[<]<>>," ) $; $assertThrowFail $(@expr1073744488 "cppcheck-2.8/test/testgarbage.cpp" $, 1451 $) $; $} $catch $(@expr1073744489 $const InternalError $&@expr1073744490 $) ${ $} $catch $(@expr1073744491 $... $) ${ $assertThrowFail $(@expr1073744492 "cppcheck-2.8/test/testgarbage.cpp" $, 1451 $) $; $} $} $while $(@expr1073744493 $false $) ;
1452: }
1453:
1454: void garbageCode173 ( ) {
1455:
1456: $do ${ $try ${ checkCode (@expr1073744494 " template < Types > struct S : >( S < ...Types... > S <) > { ( ) { } } ( ) { return S < void > ( ) }" ) $; $assertThrowFail $(@expr1073744495 "cppcheck-2.8/test/testgarbage.cpp" $, 1456 $) $; $} $catch $(@expr1073744496 $const InternalError $&@expr1073744497 $) ${ $} $catch $(@expr1073744498 $... $) ${ $assertThrowFail $(@expr1073744499 "cppcheck-2.8/test/testgarbage.cpp" $, 1456 $) $; $} $} $while $(@expr1073744500 $false $) ;
1457: }
1458:
1459: void garbageCode174 ( ) {
1460: $do ${ $try ${ checkCode (@expr1073744501 "{r e() { w*constD = (())D = cast< }}" ) $; $assertThrowFail $(@expr1073744502 "cppcheck-2.8/test/testgarbage.cpp" $, 1460 $) $; $} $catch $(@expr1073744503 $const InternalError $&@expr1073744504 $) ${ $} $catch $(@expr1073744505 $... $) ${ $assertThrowFail $(@expr1073744506 "cppcheck-2.8/test/testgarbage.cpp" $, 1460 $) $; $} $} $while $(@expr1073744507 $false $) ;
1461: }
1462:
1463: void garbageCode175 ( ) {
1464: $do ${ $try ${ checkCode (@expr1073744508 "int f() {\n  int i , j;\n  for ( i = t3 , i < t1 ; i++ )\n    for ( j = 0 ; j < = j++ )\n        return t1 ,\n}" ) $; $assertThrowFail $(@expr1073744509 "cppcheck-2.8/test/testgarbage.cpp" $, 1464 $) $; $} $catch $(@expr1073744510 $const InternalError $&@expr1073744511 $) ${ $} $catch $(@expr1073744512 $... $) ${ $assertThrowFail $(@expr1073744513 "cppcheck-2.8/test/testgarbage.cpp" $, 1464 $) $; $} $} $while $(@expr1073744514 $false $)
1465:
|
1468:
1469: ;
1470: }
1471:
1472: void garbageCode176 ( ) {
1473: checkCode (@expr1073744515 "class t { { struct } enum class f : unsigned { q } b ; operator= ( T ) { switch ( b ) { case f::q: } } { assert ( b ) ; } } { ; & ( t ) ( f::t ) ; } ;" ) ;
1474: }
1475:
1476: void garbageCode181 ( ) {
1477: $do ${ $try ${ checkCode (@expr1073744516 "int test() { int +; }" ) $; $assertThrowFail $(@expr1073744517 "cppcheck-2.8/test/testgarbage.cpp" $, 1477 $) $; $} $catch $(@expr1073744518 $const InternalError $&@expr1073744519 $) ${ $} $catch $(@expr1073744520 $... $) ${ $assertThrowFail $(@expr1073744521 "cppcheck-2.8/test/testgarbage.cpp" $, 1477 $) $; $} $} $while $(@expr1073744522 $false $) ;
1478: }
1479:
1480:
1481: void garbageCode182 ( ) {
1482: $do ${ $try ${ checkCode (@expr1073744523 "enum { int f ( ) { return = } r = f ( ) ; }" ) $; $assertThrowFail $(@expr1073744524 "cppcheck-2.8/test/testgarbage.cpp" $, 1482 $) $; $} $catch $(@expr1073744525 $const InternalError $&@expr1073744526 $) ${ $} $catch $(@expr1073744527 $... $) ${ $assertThrowFail $(@expr1073744528 "cppcheck-2.8/test/testgarbage.cpp" $, 1482 $) $; $} $} $while $(@expr1073744529 $false $) ;
1483: }
1484:
1485: void garbageCode183 ( ) {
1486: $do ${ $try ${ checkCode (@expr1073744530 "= { int } enum return { r = f() f(); }" ) $; $assertThrowFail $(@expr1073744531 "cppcheck-2.8/test/testgarbage.cpp" $, 1486 $) $; $} $catch $(@expr1073744532 $const InternalError $&@expr1073744533 $) ${ $} $catch $(@expr1073744534 $... $) ${ $assertThrowFail $(@expr1073744535 "cppcheck-2.8/test/testgarbage.cpp" $, 1486 $) $; $} $} $while $(@expr1073744536 $false $) ;
1487: }
1488:
1489: void garbageCode184 ( ) {
1490: $do ${ $try ${ checkCode (@expr1073744537 "unsigned int AquaSalSystem::GetDisplayScreenCount() {\n    NSArray* pScreens = [NSScreen screens];\n    return pScreens ? [pScreens count] : 1;\n}" ) $; $assertThrowFail $(@expr1073744538 "cppcheck-2.8/test/testgarbage.cpp" $, 1490 $) $; $} $catch $(@expr1073744539 $const InternalError $&@expr1073744540 $) ${ $} $catch $(@expr1073744541 $... $) ${ $assertThrowFail $(@expr1073744542 "cppcheck-2.8/test/testgarbage.cpp" $, 1490 $) $; $} $} $while $(@expr1073744543 $false $)
1491:
1492:
1493: ;
1494: }
1495:
1496: void garbageCode185 ( ) {
1497: checkCode (@expr1073744544
1498: "namespace binfilter\n{\n       BOOL EnhWMFReader::ReadEnhWMF()\n       {\n               pOut->CreateObject( nIndex, GDI_BRUSH, new WinMtfFillStyle( ReadColor(), ( nStyle == BS_HOLLOW ) ? TRUE : FALSE ) );\n               return bStatus;\n       };\n}"
1499:
|
1504:
1505: ) ;
1506: }
1507:
1508:
1509: void garbageCode186 ( ) {
1510: $do ${ $try ${ checkCode (@expr1073744545 "A<B<><>C" ) $; $assertThrowFail $(@expr1073744546 "cppcheck-2.8/test/testgarbage.cpp" $, 1510 $) $; $} $catch $(@expr1073744547 $const InternalError $&@expr1073744548 $) ${ $} $catch $(@expr1073744549 $... $) ${ $assertThrowFail $(@expr1073744550 "cppcheck-2.8/test/testgarbage.cpp" $, 1510 $) $; $} $} $while $(@expr1073744551 $false $) ;
1511: }
1512:
1513: void garbageCode187 ( ) {
1514: const std ::@expr1073744552 string inp@var153 (@expr1073744553 "0|\0|0>;\n" , 8 ) ;
1515: $do ${ $try ${ checkCode (@expr1073744554 inp@var153 ) $; $assertThrowFail $(@expr1073744555 "cppcheck-2.8/test/testgarbage.cpp" $, 1515 $) $; $} $catch $(@expr1073744556 $const InternalError $&@expr1073744557 $) ${ $} $catch $(@expr1073744558 $... $) ${ $assertThrowFail $(@expr1073744559 "cppcheck-2.8/test/testgarbage.cpp" $, 1515 $) $; $} $} $while $(@expr1073744560 $false $) ;
1516:
1517: checkCode (@expr1073744561 "template<class T> struct S : A< B<T> || C<T> > {};" ) ;
1518: checkCode (@expr1073744562 "static_assert(A<x> || B<x>, ab);" ) ;
1519: }
1520:
1521: void garbageCode188 ( ) {
1522: $do ${ $try ${ checkCode (@expr1073744563 "{z r(){(){for(;<(x);){if(0==0)}}}}" ) $; $assertThrowFail $(@expr1073744564 "cppcheck-2.8/test/testgarbage.cpp" $, 1522 $) $; $} $catch $(@expr1073744565 $const InternalError $&@expr1073744566 $) ${ $} $catch $(@expr1073744567 $... $) ${ $assertThrowFail $(@expr1073744568 "cppcheck-2.8/test/testgarbage.cpp" $, 1522 $) $; $} $} $while $(@expr1073744569 $false $) ;
1523: }
1524:
1525: void garbageCode189 ( ) {
1526: checkCode (@expr1073744570 "t&n(){()()[](){()}}$" ) ;
1527: }
1528:
1529: void garbageCode190 ( ) {
1530: $do ${ $try ${ checkCode (@expr1073744571 "void foo() {\n    int i;\n    i *= 0;\n    !i <;\n}" ) $; $assertThrowFail $(@expr1073744572 "cppcheck-2.8/test/testgarbage.cpp" $, 1530 $) $; $} $catch $(@expr1073744573 $const InternalError $&@expr1073744574 $) ${ $} $catch $(@expr1073744575 $... $) ${ $assertThrowFail $(@expr1073744576 "cppcheck-2.8/test/testgarbage.cpp" $, 1530 $) $; $} $} $while $(@expr1073744577 $false $)
1531:
|
1534:
1535: ;
1536: }
1537:
1538: void garbageCode191 ( ) {
1539: $do ${ $try ${ checkCode (@expr1073744578 "struct A { int f(const); };" ) $; $assertThrowFail $(@expr1073744579 "cppcheck-2.8/test/testgarbage.cpp" $, 1539 $) $; $} $catch $(@expr1073744580 $const InternalError $&@expr1073744581 $) ${ $} $catch $(@expr1073744582 $... $) ${ $assertThrowFail $(@expr1073744583 "cppcheck-2.8/test/testgarbage.cpp" $, 1539 $) $; $} $} $while $(@expr1073744584 $false $) ;
1540: $do ${ $try ${ checkCode (@expr1073744585 "struct A { int f(int, const, char); };" ) $; $assertThrowFail $(@expr1073744586 "cppcheck-2.8/test/testgarbage.cpp" $, 1540 $) $; $} $catch $(@expr1073744587 $const InternalError $&@expr1073744588 $) ${ $} $catch $(@expr1073744589 $... $) ${ $assertThrowFail $(@expr1073744590 "cppcheck-2.8/test/testgarbage.cpp" $, 1540 $) $; $} $} $while $(@expr1073744591 $false $) ;
1541: $do ${ $try ${ checkCode (@expr1073744592 "struct A { int f(struct); };" ) $; $assertThrowFail $(@expr1073744593 "cppcheck-2.8/test/testgarbage.cpp" $, 1541 $) $; $} $catch $(@expr1073744594 $const InternalError $&@expr1073744595 $) ${ $} $catch $(@expr1073744596 $... $) ${ $assertThrowFail $(@expr1073744597 "cppcheck-2.8/test/testgarbage.cpp" $, 1541 $) $; $} $} $while $(@expr1073744598 $false $) ;
1542:
1543:
1544: checkCode (@expr1073744599 "struct A { int f ( char ) ; } ;" ) ;
1545: }
1546:
1547: void garbageCode192 ( ) {
1548: $do ${ $try ${ checkCode (@expr1073744600 "{(()[((0||0xf||))]0[])}" ) $; $assertThrowFail $(@expr1073744601 "cppcheck-2.8/test/testgarbage.cpp" $, 1548 $) $; $} $catch $(@expr1073744602 $const InternalError $&@expr1073744603 $) ${ $} $catch $(@expr1073744604 $... $) ${ $assertThrowFail $(@expr1073744605 "cppcheck-2.8/test/testgarbage.cpp" $, 1548 $) $; $} $} $while $(@expr1073744606 $false $) ;
1549: }
1550:
1551:
1552: void garbageCode193 ( ) {
1553: $do ${ $try ${ checkCode (@expr1073744607 "d f(){!=[]&&0()!=0}" ) $; $assertThrowFail $(@expr1073744608 "cppcheck-2.8/test/testgarbage.cpp" $, 1553 $) $; $} $catch $(@expr1073744609 $const InternalError $&@expr1073744610 $) ${ $} $catch $(@expr1073744611 $... $) ${ $assertThrowFail $(@expr1073744612 "cppcheck-2.8/test/testgarbage.cpp" $, 1553 $) $; $} $} $while $(@expr1073744613 $false $) ;
1554: }
1555:
1556:
1557: void garbageCode194 ( ) {
1558: $do ${ $try ${ checkCode (@expr1073744614 "{((()))(return 1||);}" ) $; $assertThrowFail $(@expr1073744615 "cppcheck-2.8/test/testgarbage.cpp" $, 1558 $) $; $} $catch $(@expr1073744616 $const InternalError $&@expr1073744617 $) ${ $} $catch $(@expr1073744618 $... $) ${ $assertThrowFail $(@expr1073744619 "cppcheck-2.8/test/testgarbage.cpp" $, 1558 $) $; $} $} $while $(@expr1073744620 $false $) ;
1559: }
1560:
1561:
1562: void garbageCode195 ( ) {
1563: checkCode (@expr1073744621 "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}"
1564:
|
1567:
1568: ) ;
1569: }
1570:
1571:
1572: void garbageCode196 ( ) {
1573: $do ${ $try ${ checkCode (@expr1073744622 "0|,0<<V" ) $; $assertThrowFail $(@expr1073744623 "cppcheck-2.8/test/testgarbage.cpp" $, 1573 $) $; $} $catch $(@expr1073744624 $const InternalError $&@expr1073744625 $) ${ $} $catch $(@expr1073744626 $... $) ${ $assertThrowFail $(@expr1073744627 "cppcheck-2.8/test/testgarbage.cpp" $, 1573 $) $; $} $} $while $(@expr1073744628 $false $) ;
1574: $do ${ $try ${ checkCode (@expr1073744629 ";|4|<0;" ) $; $assertThrowFail $(@expr1073744630 "cppcheck-2.8/test/testgarbage.cpp" $, 1574 $) $; $} $catch $(@expr1073744631 $const InternalError $&@expr1073744632 $) ${ $} $catch $(@expr1073744633 $... $) ${ $assertThrowFail $(@expr1073744634 "cppcheck-2.8/test/testgarbage.cpp" $, 1574 $) $; $} $} $while $(@expr1073744635 $false $) ;
1575: }
1576:
1577:
1578: void garbageCode197 ( ) {
1579: $do ${ $try ${ checkCode (@expr1073744636 "(){e break,{(case)|{e:[()]}}}" ) $; $assertThrowFail $(@expr1073744637 "cppcheck-2.8/test/testgarbage.cpp" $, 1579 $) $; $} $catch $(@expr1073744638 $const InternalError $&@expr1073744639 $) ${ $} $catch $(@expr1073744640 $... $) ${ $assertThrowFail $(@expr1073744641 "cppcheck-2.8/test/testgarbage.cpp" $, 1579 $) $; $} $} $while $(@expr1073744642 $false $) ;
1580: }
1581:
1582:
1583: void garbageCode198 ( ) {
1584: $do ${ $try ${ checkCode (@expr1073744643 "void f(){\nx= ={(continue continue { ( struct continue { ( ++ name5 name5 ) ( name5 name5 n\name5 ( name5 struct ( name5 name5 < ) ) ( default ) { name4 != name5 name5 name5\n ( name5 name5 name5 ( { 1 >= void { ( ()) } 1 name3 return >= >= ( ) >= name5 (\n name5 name6 :nam00 [ ()])}))})})})};\n}" ) $; $assertThrowFail $(@expr1073744644 "cppcheck-2.8/test/testgarbage.cpp" $, 1584 $) $; $} $catch $(@expr1073744645 $const InternalError $&@expr1073744646 $) ${ $} $catch $(@expr1073744647 $... $) ${ $assertThrowFail $(@expr1073744648 "cppcheck-2.8/test/testgarbage.cpp" $, 1584 $) $; $} $} $while $(@expr1073744649 $false $)
1585:
|
1588:
1589: ;
1590: }
1591:
1592:
1593: void garbageCode199 ( ) {
1594: checkCode (@expr1073744650 "d f(){e n00e0[]n00e0&0+f=0}" ) ;
1595: }
1596:
1597:
1598: void garbageCode200 ( ) {
1599: $do ${ $try ${ checkCode (@expr1073744651 "(){e break,{(case)!{e:[]}}}" ) $; $assertThrowFail $(@expr1073744652 "cppcheck-2.8/test/testgarbage.cpp" $, 1599 $) $; $} $catch $(@expr1073744653 $const InternalError $&@expr1073744654 $) ${ $} $catch $(@expr1073744655 $... $) ${ $assertThrowFail $(@expr1073744656 "cppcheck-2.8/test/testgarbage.cpp" $, 1599 $) $; $} $} $while $(@expr1073744657 $false $) ;
1600: }
1601:
1602:
1603: void garbageCode201 ( ) {
1604: $do ${ $try ${ checkCode (@expr1073744658 "void f() { std::string s=\"abc\"; return s + }" ) $; $assertThrowFail $(@expr1073744659 "cppcheck-2.8/test/testgarbage.cpp" $, 1604 $) $; $} $catch $(@expr1073744660 $const InternalError $&@expr1073744661 $) ${ $} $catch $(@expr1073744662 $... $) ${ $assertThrowFail $(@expr1073744663 "cppcheck-2.8/test/testgarbage.cpp" $, 1604 $) $; $} $} $while $(@expr1073744664 $false $) ;
1605: }
1606:
1607:
1608: void garbageCode202 ( ) {
1609: $do ${ $try ${ checkCode (@expr1073744665 "void f() { UNKNOWN_MACRO(return); }" ) $; $assertThrowFail $(@expr1073744666 "cppcheck-2.8/test/testgarbage.cpp" $, 1609 $) $; $} $catch $(@expr1073744667 $const InternalError $&@expr1073744668 $) ${ $} $catch $(@expr1073744669 $... $) ${ $assertThrowFail $(@expr1073744670 "cppcheck-2.8/test/testgarbage.cpp" $, 1609 $) $; $} $} $while $(@expr1073744671 $false $) ;
1610: $do ${ $try ${ checkCode (@expr1073744672 "void f() { UNKNOWN_MACRO(throw); }" ) $; $assertThrowFail $(@expr1073744673 "cppcheck-2.8/test/testgarbage.cpp" $, 1610 $) $; $} $catch $(@expr1073744674 $const InternalError $&@expr1073744675 $) ${ $} $catch $(@expr1073744676 $... $) ${ $assertThrowFail $(@expr1073744677 "cppcheck-2.8/test/testgarbage.cpp" $, 1610 $) $; $} $} $while $(@expr1073744678 $false $) ;
1611: }
1612:
1613: void garbageCode203 ( ) {
1614: checkCode (@expr1073744679 "{ > () {} }" ) ;
1615: checkCode (@expr1073744680 "template <> a > ::b();" ) ;
1616: }
1617:
1618: void garbageCode204 ( ) {
1619: $do ${ $try ${ checkCode (@expr1073744681 "template <a, = b<>()> c; template <a> a as() {} as<c<>>();" ) $; $assertThrowFail $(@expr1073744682 "cppcheck-2.8/test/testgarbage.cpp" $, 1619 $) $; $} $catch $(@expr1073744683 $const InternalError $&@expr1073744684 $) ${ $} $catch $(@expr1073744685 $... $) ${ $assertThrowFail $(@expr1073744686 "cppcheck-2.8/test/testgarbage.cpp" $, 1619 $) $; $} $} $while $(@expr1073744687 $false $) ;
1620: }
1621:
1622: void garbageCode205 ( ) {
1623: checkCode (@expr1073744688 "class CodeSnippetsEvent : public wxCommandEvent {\npublic :\n    CodeSnippetsEvent ( wxEventType commandType =  wxEventType , int id = 0 ) ;\n    CodeSnippetsEvent ( const CodeSnippetsEvent & event ) ;\nvirtual wxEvent * Clone ( ) const { return new CodeSnippetsEvent ( * this ) ; }\nprivate :\n    int m_SnippetID ;\n} ;\nconst  wxEventType wxEVT_CODESNIPPETS_GETFILELINKS  =  wxNewEventType  (  )\nCodeSnippetsEvent :: CodeSnippetsEvent ( wxEventType commandType , int id )\n: wxCommandEvent ( commandType , id ) {\n}\nCodeSnippetsEvent :: CodeSnippetsEvent ( const CodeSnippetsEvent & Event )\n: wxCommandEvent ( Event )\n, m_SnippetID ( 0 ) {\n}"
1624:
|
1637:
1638: ) ;
1639: }
1640:
1641: void garbageCode206 ( ) {
1642: $if $(@expr1073744689 $!@expr1073744690 $assertEquals $(@expr1073744691 "cppcheck-2.8/test/testgarbage.cpp" $, 1642 $, "[test.cpp:1] syntax error: operator" $, $getSyntaxError_ $(@expr1073744692 "void foo() { for (auto operator new : int); }" $, "cppcheck-2.8/test/testgarbage.cpp" $, 1642 $) $) $) { $return ; }
1643: $if $(@expr1073744693 $!@expr1073744694 $assertEquals $(@expr1073744695 "cppcheck-2.8/test/testgarbage.cpp" $, 1643 $, "[test.cpp:1] syntax error: operator" $, $getSyntaxError_ $(@expr1073744696 "void foo() { for (a operator== :) }" $, "cppcheck-2.8/test/testgarbage.cpp" $, 1643 $) $) $) { $return ; }
1644: }
1645:
1646: void garbageCode207 ( ) {
1647: $do ${ $try ${ checkCode (@expr1073744697 "d f(){(.n00e0(return%n00e0''('')));}" ) $; $assertThrowFail $(@expr1073744698 "cppcheck-2.8/test/testgarbage.cpp" $, 1647 $) $; $} $catch $(@expr1073744699 $const InternalError $&@expr1073744700 $) ${ $} $catch $(@expr1073744701 $... $) ${ $assertThrowFail $(@expr1073744702 "cppcheck-2.8/test/testgarbage.cpp" $, 1647 $) $; $} $} $while $(@expr1073744703 $false $) ;
1648: }
1649:
1650: void garbageCode208 ( ) {
1651: $do ${ $try ${ checkCode (@expr1073744704 "d f(){(for(((((0{t b;((((((((()))))))))}))))))}" ) $; $assertThrowFail $(@expr1073744705 "cppcheck-2.8/test/testgarbage.cpp" $, 1651 $) $; $} $catch $(@expr1073744706 $const InternalError $&@expr1073744707 $) ${ $} $catch $(@expr1073744708 $... $) ${ $assertThrowFail $(@expr1073744709 "cppcheck-2.8/test/testgarbage.cpp" $, 1651 $) $; $} $} $while $(@expr1073744710 $false $) ;
1652: }
1653:
1654: void garbageCode209 ( ) {
1655: $do ${ $try ${ checkCode (@expr1073744711 "{(- -##0xf/-1 0)[]}" ) $; $assertThrowFail $(@expr1073744712 "cppcheck-2.8/test/testgarbage.cpp" $, 1655 $) $; $} $catch $(@expr1073744713 $const InternalError $&@expr1073744714 $) ${ $} $catch $(@expr1073744715 $... $) ${ $assertThrowFail $(@expr1073744716 "cppcheck-2.8/test/testgarbage.cpp" $, 1655 $) $; $} $} $while $(@expr1073744717 $false $) ;
1656: }
1657:
1658: void garbageCode210 ( ) {
1659: $do ${ $try ${ checkCode (@expr1073744718 "{typedef typedef c n00e0[]c000(;n00e0&c000)}" ) $; $assertThrowFail $(@expr1073744719 "cppcheck-2.8/test/testgarbage.cpp" $, 1659 $) $; $} $catch $(@expr1073744720 $const InternalError $&@expr1073744721 $) ${ $} $catch $(@expr1073744722 $... $) ${ $assertThrowFail $(@expr1073744723 "cppcheck-2.8/test/testgarbage.cpp" $, 1659 $) $; $} $} $while $(@expr1073744724 $false $) ;
1660: }
1661:
1662: void garbageCode211 ( ) {
1663: $do ${ $try ${ checkCode (@expr1073744725 "{typedef f typedef[]({typedef e e,>;typedef(((typedef<typedef|)))})}" ) $; $assertThrowFail $(@expr1073744726 "cppcheck-2.8/test/testgarbage.cpp" $, 1663 $) $; $} $catch $(@expr1073744727 $const InternalError $&@expr1073744728 $) ${ $} $catch $(@expr1073744729 $... $) ${ $assertThrowFail $(@expr1073744730 "cppcheck-2.8/test/testgarbage.cpp" $, 1663 $) $; $} $} $while $(@expr1073744731 $false $) ;
1664: }
1665:
1666: void garbageCode212 ( ) {
1667: $do ${ $try ${ checkCode (@expr1073744732 "{(){}[]typedef r n00e0[](((n00e0 0((;()))))){(0 typedef n00e0 bre00 n00e0())}[]();typedef n n00e0()[],(bre00)}" ) $; $assertThrowFail $(@expr1073744733 "cppcheck-2.8/test/testgarbage.cpp" $, 1667 $) $; $} $catch $(@expr1073744734 $const InternalError $&@expr1073744735 $) ${ $} $catch $(@expr1073744736 $... $) ${ $assertThrowFail $(@expr1073744737 "cppcheck-2.8/test/testgarbage.cpp" $, 1667 $) $; $} $} $while $(@expr1073744738 $false $) ;
1668: }
1669:
1670: void garbageCode213 ( ) {
1671: $do ${ $try ${ checkCode (@expr1073744739 "{\"\"[(1||)];}" ) $; $assertThrowFail $(@expr1073744740 "cppcheck-2.8/test/testgarbage.cpp" $, 1671 $) $; $} $catch $(@expr1073744741 $const InternalError $&@expr1073744742 $) ${ $} $catch $(@expr1073744743 $... $) ${ $assertThrowFail $(@expr1073744744 "cppcheck-2.8/test/testgarbage.cpp" $, 1671 $) $; $} $} $while $(@expr1073744745 $false $) ;
1672: }
1673:
1674: void garbageCode214 ( ) {
1675: checkCode (@expr1073744746 "THIS FILE CONTAINS VARIOUS TEXT" ) ;
1676: }
1677:
1678: void garbageCode215 ( ) {
1679: $do ${ $try ${ checkCode (@expr1073744747 "a = [1,2,3];" ) $; $assertThrowFail $(@expr1073744748 "cppcheck-2.8/test/testgarbage.cpp" $, 1679 $) $; $} $catch $(@expr1073744749 $const InternalError $&@expr1073744750 $) ${ $} $catch $(@expr1073744751 $... $) ${ $assertThrowFail $(@expr1073744752 "cppcheck-2.8/test/testgarbage.cpp" $, 1679 $) $; $} $} $while $(@expr1073744753 $false $) ;
1680: }
1681:
1682: void garbageCode216 ( ) {
1683: checkCode (@expr1073744754 "template<typename> struct A {};\ntemplate<typename...T> struct A<T::T...> {}; \nA<int> a;"
1684:
1685: ) ;
1686: }
1687:
1688: void garbageCode217 ( ) {
1689: $do ${ $try ${ checkCode (@expr1073744755 "void f() {\n    auto p;\n    if (g(p)) {}\n    assert();\n}" ) $; $assertThrowFail $(@expr1073744756 "cppcheck-2.8/test/testgarbage.cpp" $, 1689 $) $; $} $catch $(@expr1073744757 $const InternalError $&@expr1073744758 $) ${ $} $catch $(@expr1073744759 $... $) ${ $assertThrowFail $(@expr1073744760 "cppcheck-2.8/test/testgarbage.cpp" $, 1689 $) $; $} $} $while $(@expr1073744761 $false $)
1690:
1691:
1692:
1693: ;
1694: }
1695:
1696: void garbageCode218 ( ) {
1697: checkCode (@expr1073744762 "d f(){t n0000 const[]n0000+0!=n0000,(0)}" ) ;
1698: }
1699: void garbageCode219 ( ) {
1700: checkCode (@expr1073744763 "typedef void (*func) (addr) ;\nvoid bar(void) {\n    func f;\n    f & = (func)42;\n}\n"
1701:
1702:
1703:
1704: ) ;
1705: }
1706: void garbageCode220 ( ) {
1707: $do ${ $try ${ checkCode (@expr1073744764 "(){(){{()}}return;{switch()0 case(){}break;l:()}}\n" ) $; $assertThrowFail $(@expr1073744765 "cppcheck-2.8/test/testgarbage.cpp" $, 1707 $) $; $} $catch $(@expr1073744766 $const InternalError $&@expr1073744767 $) ${ $} $catch $(@expr1073744768 $... $) ${ $assertThrowFail $(@expr1073744769 "cppcheck-2.8/test/testgarbage.cpp" $, 1707 $) $; $} $} $while $(@expr1073744770 $false $) ;
1708: }
1709: void garbageCode221 ( ) {
1710: $do ${ $try ${ checkCode (@expr1073744771 "struct A<0<;\n" ) $; $assertThrowFail $(@expr1073744772 "cppcheck-2.8/test/testgarbage.cpp" $, 1710 $) $; $} $catch $(@expr1073744773 $const InternalError $&@expr1073744774 $) ${ $} $catch $(@expr1073744775 $... $) ${ $assertThrowFail $(@expr1073744776 "cppcheck-2.8/test/testgarbage.cpp" $, 1710 $) $; $} $} $while $(@expr1073744777 $false $) ;
1711: }
1712: void garbageCode222 ( ) {
1713: $do ${ $try ${ checkCode (@expr1073744778 "template<template<class>\n" ) $; $assertThrowFail $(@expr1073744779 "cppcheck-2.8/test/testgarbage.cpp" $, 1713 $) $; $} $catch $(@expr1073744780 $const InternalError $&@expr1073744781 $) ${ $} $catch $(@expr1073744782 $... $) ${ $assertThrowFail $(@expr1073744783 "cppcheck-2.8/test/testgarbage.cpp" $, 1713 $) $; $} $} $while $(@expr1073744784 $false $) ;
1714: }
1715:
1716: void syntaxErrorFirstToken ( ) {
1717: $do ${ $try ${ checkCode (@expr1073744785 "&operator(){[]};" ) $; $assertThrowFail $(@expr1073744786 "cppcheck-2.8/test/testgarbage.cpp" $, 1717 $) $; $} $catch $(@expr1073744787 $const InternalError $&@expr1073744788 $) ${ $} $catch $(@expr1073744789 $... $) ${ $assertThrowFail $(@expr1073744790 "cppcheck-2.8/test/testgarbage.cpp" $, 1717 $) $; $} $} $while $(@expr1073744791 $false $) ;
1718: $do ${ $try ${ checkCode (@expr1073744792 "*(*const<> (size_t); foo) { } *(*const (size_t)() ; foo) { }" ) $; $assertThrowFail $(@expr1073744793 "cppcheck-2.8/test/testgarbage.cpp" $, 1718 $) $; $} $catch $(@expr1073744794 $const InternalError $&@expr1073744795 $) ${ $} $catch $(@expr1073744796 $... $) ${ $assertThrowFail $(@expr1073744797 "cppcheck-2.8/test/testgarbage.cpp" $, 1718 $) $; $} $} $while $(@expr1073744798 $false $) ;
1719: $do ${ $try ${ checkCode (@expr1073744799 ">{ x while (y) z int = }" ) $; $assertThrowFail $(@expr1073744800 "cppcheck-2.8/test/testgarbage.cpp" $, 1719 $) $; $} $catch $(@expr1073744801 $const InternalError $&@expr1073744802 $) ${ $} $catch $(@expr1073744803 $... $) ${ $assertThrowFail $(@expr1073744804 "cppcheck-2.8/test/testgarbage.cpp" $, 1719 $) $; $} $} $while $(@expr1073744805 $false $) ;
1720: $do ${ $try ${ checkCode (@expr1073744806 "&p(!{}e x){({(0?:?){({})}()})}" ) $; $assertThrowFail $(@expr1073744807 "cppcheck-2.8/test/testgarbage.cpp" $, 1720 $) $; $} $catch $(@expr1073744808 $const InternalError $&@expr1073744809 $) ${ $} $catch $(@expr1073744810 $... $) ${ $assertThrowFail $(@expr1073744811 "cppcheck-2.8/test/testgarbage.cpp" $, 1720 $) $; $} $} $while $(@expr1073744812 $false $) ;
1721: $do ${ $try ${ checkCode (@expr1073744813 "<class T> { struct { typename D4:typename Base<T*> }; };" ) $; $assertThrowFail $(@expr1073744814 "cppcheck-2.8/test/testgarbage.cpp" $, 1721 $) $; $} $catch $(@expr1073744815 $const InternalError $&@expr1073744816 $) ${ $} $catch $(@expr1073744817 $... $) ${ $assertThrowFail $(@expr1073744818 "cppcheck-2.8/test/testgarbage.cpp" $, 1721 $) $; $} $} $while $(@expr1073744819 $false $) ;
1722: $do ${ $try ${ checkCode (@expr1073744820 " > template < . > struct Y < T > { = } ;\n" ) $; $assertThrowFail $(@expr1073744821 "cppcheck-2.8/test/testgarbage.cpp" $, 1722 $) $; $} $catch $(@expr1073744822 $const InternalError $&@expr1073744823 $) ${ $} $catch $(@expr1073744824 $... $) ${ $assertThrowFail $(@expr1073744825 "cppcheck-2.8/test/testgarbage.cpp" $, 1722 $) $; $} $} $while $(@expr1073744826 $false $) ;
1723: }
1724:
1725: void syntaxErrorLastToken ( ) {
1726: $do ${ $try ${ checkCode (@expr1073744827 "int *" ) $; $assertThrowFail $(@expr1073744828 "cppcheck-2.8/test/testgarbage.cpp" $, 1726 $) $; $} $catch $(@expr1073744829 $const InternalError $&@expr1073744830 $) ${ $} $catch $(@expr1073744831 $... $) ${ $assertThrowFail $(@expr1073744832 "cppcheck-2.8/test/testgarbage.cpp" $, 1726 $) $; $} $} $while $(@expr1073744833 $false $) ;
1727: $do ${ $try ${ checkCode (@expr1073744834 "x[y]" ) $; $assertThrowFail $(@expr1073744835 "cppcheck-2.8/test/testgarbage.cpp" $, 1727 $) $; $} $catch $(@expr1073744836 $const InternalError $&@expr1073744837 $) ${ $} $catch $(@expr1073744838 $... $) ${ $assertThrowFail $(@expr1073744839 "cppcheck-2.8/test/testgarbage.cpp" $, 1727 $) $; $} $} $while $(@expr1073744840 $false $) ;
1728: $do ${ $try ${ checkCode (@expr1073744841 "( ) &" ) $; $assertThrowFail $(@expr1073744842 "cppcheck-2.8/test/testgarbage.cpp" $, 1728 $) $; $} $catch $(@expr1073744843 $const InternalError $&@expr1073744844 $) ${ $} $catch $(@expr1073744845 $... $) ${ $assertThrowFail $(@expr1073744846 "cppcheck-2.8/test/testgarbage.cpp" $, 1728 $) $; $} $} $while $(@expr1073744847 $false $) ;
1729: $do ${ $try ${ checkCode (@expr1073744848 "|| #if #define <=" ) $; $assertThrowFail $(@expr1073744849 "cppcheck-2.8/test/testgarbage.cpp" $, 1729 $) $; $} $catch $(@expr1073744850 $const InternalError $&@expr1073744851 $) ${ $} $catch $(@expr1073744852 $... $) ${ $assertThrowFail $(@expr1073744853 "cppcheck-2.8/test/testgarbage.cpp" $, 1729 $) $; $} $} $while $(@expr1073744854 $false $) ;
1730: $do ${ $try ${ checkCode (@expr1073744855 "f::y:y : <x::" ) $; $assertThrowFail $(@expr1073744856 "cppcheck-2.8/test/testgarbage.cpp" $, 1730 $) $; $} $catch $(@expr1073744857 $const InternalError $&@expr1073744858 $) ${ $} $catch $(@expr1073744859 $... $) ${ $assertThrowFail $(@expr1073744860 "cppcheck-2.8/test/testgarbage.cpp" $, 1730 $) $; $} $} $while $(@expr1073744861 $false $) ;
1731: $do ${ $try ${ checkCode (@expr1073744862 "a \"b\" not_eq \"c\"" ) $; $assertThrowFail $(@expr1073744863 "cppcheck-2.8/test/testgarbage.cpp" $, 1731 $) $; $} $catch $(@expr1073744864 $const InternalError $&@expr1073744865 $) ${ $} $catch $(@expr1073744866 $... $) ${ $assertThrowFail $(@expr1073744867 "cppcheck-2.8/test/testgarbage.cpp" $, 1731 $) $; $} $} $while $(@expr1073744868 $false $) ;
1732: $do ${ $try ${ checkCode (@expr1073744869 "(int arg2) { } { } typedef void (func_type) (int, int); typedef func_type&" ) $; $assertThrowFail $(@expr1073744870 "cppcheck-2.8/test/testgarbage.cpp" $, 1732 $) $; $} $catch $(@expr1073744871 $const InternalError $&@expr1073744872 $) ${ $} $catch $(@expr1073744873 $... $) ${ $assertThrowFail $(@expr1073744874 "cppcheck-2.8/test/testgarbage.cpp" $, 1732 $) $; $} $} $while $(@expr1073744875 $false $) ;
1733: $do ${ $try ${ checkCode (@expr1073744876 "&g[0]; { (g[0] 0) } =" , false ) $; $assertThrowFail $(@expr1073744877 "cppcheck-2.8/test/testgarbage.cpp" $, 1733 $) $; $} $catch $(@expr1073744878 $const InternalError $&@expr1073744879 $) ${ $} $catch $(@expr1073744880 $... $) ${ $assertThrowFail $(@expr1073744881 "cppcheck-2.8/test/testgarbage.cpp" $, 1733 $) $; $} $} $while $(@expr1073744882 $false $) ;
1734: $do ${ $try ${ checkCode (@expr1073744883 "{ { void foo() { struct }; { }; } }; struct S { } f =" , false ) $; $assertThrowFail $(@expr1073744884 "cppcheck-2.8/test/testgarbage.cpp" $, 1734 $) $; $} $catch $(@expr1073744885 $const InternalError $&@expr1073744886 $) ${ $} $catch $(@expr1073744887 $... $) ${ $assertThrowFail $(@expr1073744888 "cppcheck-2.8/test/testgarbage.cpp" $, 1734 $) $; $} $} $while $(@expr1073744889 $false $) ;
1735: $do ${ $try ${ checkCode (@expr1073744890 "{ { ( ) } P ( ) ^ { } { } { } ( ) } 0" ) $; $assertThrowFail $(@expr1073744891 "cppcheck-2.8/test/testgarbage.cpp" $, 1735 $) $; $} $catch $(@expr1073744892 $const InternalError $&@expr1073744893 $) ${ $} $catch $(@expr1073744894 $... $) ${ $assertThrowFail $(@expr1073744895 "cppcheck-2.8/test/testgarbage.cpp" $, 1735 $) $; $} $} $while $(@expr1073744896 $false $) ;
1736: $do ${ $try ${ checkCode (@expr1073744897 "+---+" ) $; $assertThrowFail $(@expr1073744898 "cppcheck-2.8/test/testgarbage.cpp" $, 1736 $) $; $} $catch $(@expr1073744899 $const InternalError $&@expr1073744900 $) ${ $} $catch $(@expr1073744901 $... $) ${ $assertThrowFail $(@expr1073744902 "cppcheck-2.8/test/testgarbage.cpp" $, 1736 $) $; $} $} $while $(@expr1073744903 $false $) ;
1737: $do ${ $try ${ checkCode (@expr1073744904 "template<>\n" ) $; $assertThrowFail $(@expr1073744905 "cppcheck-2.8/test/testgarbage.cpp" $, 1737 $) $; $} $catch $(@expr1073744906 $const InternalError $&@expr1073744907 $) ${ $} $catch $(@expr1073744908 $... $) ${ $assertThrowFail $(@expr1073744909 "cppcheck-2.8/test/testgarbage.cpp" $, 1737 $) $; $} $} $while $(@expr1073744910 $false $) ;
1738: $do ${ $try ${ checkCode (@expr1073744911 "++4++ +  + E++++++++++ + ch tp.oed5[.]" ) $; $assertThrowFail $(@expr1073744912 "cppcheck-2.8/test/testgarbage.cpp" $, 1738 $) $; $} $catch $(@expr1073744913 $const InternalError $&@expr1073744914 $) ${ $} $catch $(@expr1073744915 $... $) ${ $assertThrowFail $(@expr1073744916 "cppcheck-2.8/test/testgarbage.cpp" $, 1738 $) $; $} $} $while $(@expr1073744917 $false $) ;
1739: $do ${ $try ${ checkCode (@expr1073744918 "d a(){f s=0()8[]s?():0}*()?:0" , false ) $; $assertThrowFail $(@expr1073744919 "cppcheck-2.8/test/testgarbage.cpp" $, 1739 $) $; $} $catch $(@expr1073744920 $const InternalError $&@expr1073744921 $) ${ $} $catch $(@expr1073744922 $... $) ${ $assertThrowFail $(@expr1073744923 "cppcheck-2.8/test/testgarbage.cpp" $, 1739 $) $; $} $} $while $(@expr1073744924 $false $) ;
1740: $do ${ $try ${ checkCode (@expr1073744925 "!2 : #h2 ?:" , false ) $; $assertThrowFail $(@expr1073744926 "cppcheck-2.8/test/testgarbage.cpp" $, 1740 $) $; $} $catch $(@expr1073744927 $const InternalError $&@expr1073744928 $) ${ $} $catch $(@expr1073744929 $... $) ${ $assertThrowFail $(@expr1073744930 "cppcheck-2.8/test/testgarbage.cpp" $, 1740 $) $; $} $} $while $(@expr1073744931 $false $) ;
1741: $do ${ $try ${ checkCode (@expr1073744932 "--" ) $; $assertThrowFail $(@expr1073744933 "cppcheck-2.8/test/testgarbage.cpp" $, 1741 $) $; $} $catch $(@expr1073744934 $const InternalError $&@expr1073744935 $) ${ $} $catch $(@expr1073744936 $... $) ${ $assertThrowFail $(@expr1073744937 "cppcheck-2.8/test/testgarbage.cpp" $, 1741 $) $; $} $} $while $(@expr1073744938 $false $) ;
1742: $do ${ $try ${ checkCode (@expr1073744939 "volatile true , test < test < #ifdef __ppc__ true ," ) $; $assertThrowFail $(@expr1073744940 "cppcheck-2.8/test/testgarbage.cpp" $, 1742 $) $; $} $catch $(@expr1073744941 $const InternalError $&@expr1073744942 $) ${ $} $catch $(@expr1073744943 $... $) ${ $assertThrowFail $(@expr1073744944 "cppcheck-2.8/test/testgarbage.cpp" $, 1742 $) $; $} $} $while $(@expr1073744945 $false $) ;
1743: $do ${ $try ${ checkCode (@expr1073744946 "a,b--\n" ) $; $assertThrowFail $(@expr1073744947 "cppcheck-2.8/test/testgarbage.cpp" $, 1743 $) $; $} $catch $(@expr1073744948 $const InternalError $&@expr1073744949 $) ${ $} $catch $(@expr1073744950 $... $) ${ $assertThrowFail $(@expr1073744951 "cppcheck-2.8/test/testgarbage.cpp" $, 1743 $) $; $} $} $while $(@expr1073744952 $false $) ;
1744: $do ${ $try ${ checkCode (@expr1073744953 "x a[0] =" ) $; $assertThrowFail $(@expr1073744954 "cppcheck-2.8/test/testgarbage.cpp" $, 1744 $) $; $} $catch $(@expr1073744955 $const InternalError $&@expr1073744956 $) ${ $} $catch $(@expr1073744957 $... $) ${ $assertThrowFail $(@expr1073744958 "cppcheck-2.8/test/testgarbage.cpp" $, 1744 $) $; $} $} $while $(@expr1073744959 $false $) ;
1745: $do ${ $try ${ checkCode (@expr1073744960 "auto_ptr<x>\n" ) $; $assertThrowFail $(@expr1073744961 "cppcheck-2.8/test/testgarbage.cpp" $, 1745 $) $; $} $catch $(@expr1073744962 $const InternalError $&@expr1073744963 $) ${ $} $catch $(@expr1073744964 $... $) ${ $assertThrowFail $(@expr1073744965 "cppcheck-2.8/test/testgarbage.cpp" $, 1745 $) $; $} $} $while $(@expr1073744966 $false $) ;
1746: $do ${ $try ${ checkCode (@expr1073744967 "char a[1]\n" ) $; $assertThrowFail $(@expr1073744968 "cppcheck-2.8/test/testgarbage.cpp" $, 1746 $) $; $} $catch $(@expr1073744969 $const InternalError $&@expr1073744970 $) ${ $} $catch $(@expr1073744971 $... $) ${ $assertThrowFail $(@expr1073744972 "cppcheck-2.8/test/testgarbage.cpp" $, 1746 $) $; $} $} $while $(@expr1073744973 $false $) ;
1747: $do ${ $try ${ checkCode (@expr1073744974 "<><<" ) $; $assertThrowFail $(@expr1073744975 "cppcheck-2.8/test/testgarbage.cpp" $, 1747 $) $; $} $catch $(@expr1073744976 $const InternalError $&@expr1073744977 $) ${ $} $catch $(@expr1073744978 $... $) ${ $assertThrowFail $(@expr1073744979 "cppcheck-2.8/test/testgarbage.cpp" $, 1747 $) $; $} $} $while $(@expr1073744980 $false $) ;
1748: $do ${ $try ${ checkCode (@expr1073744981 "z<y<x>" ) $; $assertThrowFail $(@expr1073744982 "cppcheck-2.8/test/testgarbage.cpp" $, 1748 $) $; $} $catch $(@expr1073744983 $const InternalError $&@expr1073744984 $) ${ $} $catch $(@expr1073744985 $... $) ${ $assertThrowFail $(@expr1073744986 "cppcheck-2.8/test/testgarbage.cpp" $, 1748 $) $; $} $} $while $(@expr1073744987 $false $) ;
1749: $do ${ $try ${ checkCode (@expr1073744988 "><,f<i," ) $; $assertThrowFail $(@expr1073744989 "cppcheck-2.8/test/testgarbage.cpp" $, 1749 $) $; $} $catch $(@expr1073744990 $const InternalError $&@expr1073744991 $) ${ $} $catch $(@expr1073744992 $... $) ${ $assertThrowFail $(@expr1073744993 "cppcheck-2.8/test/testgarbage.cpp" $, 1749 $) $; $} $} $while $(@expr1073744994 $false $) ;
1750: $do ${ $try ${ checkCode (@expr1073744995 "0; (a) < (a)" ) $; $assertThrowFail $(@expr1073744996 "cppcheck-2.8/test/testgarbage.cpp" $, 1750 $) $; $} $catch $(@expr1073744997 $const InternalError $&@expr1073744998 $) ${ $} $catch $(@expr1073744999 $... $) ${ $assertThrowFail $(@expr1073745000 "cppcheck-2.8/test/testgarbage.cpp" $, 1750 $) $; $} $} $while $(@expr1073745001 $false $) ;
1751: $do ${ $try ${ checkCode (@expr1073745002 " ( * const ( size_t ) ; foo )" ) $; $assertThrowFail $(@expr1073745003 "cppcheck-2.8/test/testgarbage.cpp" $, 1751 $) $; $} $catch $(@expr1073745004 $const InternalError $&@expr1073745005 $) ${ $} $catch $(@expr1073745006 $... $) ${ $assertThrowFail $(@expr1073745007 "cppcheck-2.8/test/testgarbage.cpp" $, 1751 $) $; $} $} $while $(@expr1073745008 $false $) ;
1752: $do ${ $try ${ checkCode (@expr1073745009 "({ (); strcat(strcat(() ()) ()) })" ) $; $assertThrowFail $(@expr1073745010 "cppcheck-2.8/test/testgarbage.cpp" $, 1752 $) $; $} $catch $(@expr1073745011 $const InternalError $&@expr1073745012 $) ${ $} $catch $(@expr1073745013 $... $) ${ $assertThrowFail $(@expr1073745014 "cppcheck-2.8/test/testgarbage.cpp" $, 1752 $) $; $} $} $while $(@expr1073745015 $false $) ;
1753: $do ${ $try ${ checkCode (@expr1073745016 "%: return ; ()" ) $; $assertThrowFail $(@expr1073745017 "cppcheck-2.8/test/testgarbage.cpp" $, 1753 $) $; $} $catch $(@expr1073745018 $const InternalError $&@expr1073745019 $) ${ $} $catch $(@expr1073745020 $... $) ${ $assertThrowFail $(@expr1073745021 "cppcheck-2.8/test/testgarbage.cpp" $, 1753 $) $; $} $} $while $(@expr1073745022 $false $) ;
1754: $do ${ $try ${ checkCode (@expr1073745023 "__attribute__((destructor)) void" ) $; $assertThrowFail $(@expr1073745024 "cppcheck-2.8/test/testgarbage.cpp" $, 1754 $) $; $} $catch $(@expr1073745025 $const InternalError $&@expr1073745026 $) ${ $} $catch $(@expr1073745027 $... $) ${ $assertThrowFail $(@expr1073745028 "cppcheck-2.8/test/testgarbage.cpp" $, 1754 $) $; $} $} $while $(@expr1073745029 $false $) ;
1755: $do ${ $try ${ checkCode (@expr1073745030 "1 *p = const" ) $; $assertThrowFail $(@expr1073745031 "cppcheck-2.8/test/testgarbage.cpp" $, 1755 $) $; $} $catch $(@expr1073745032 $const InternalError $&@expr1073745033 $) ${ $} $catch $(@expr1073745034 $... $) ${ $assertThrowFail $(@expr1073745035 "cppcheck-2.8/test/testgarbage.cpp" $, 1755 $) $; $} $} $while $(@expr1073745036 $false $) ;
1756: $do ${ $try ${ checkCode (@expr1073745037 "sizeof" ) $; $assertThrowFail $(@expr1073745038 "cppcheck-2.8/test/testgarbage.cpp" $, 1756 $) $; $} $catch $(@expr1073745039 $const InternalError $&@expr1073745040 $) ${ $} $catch $(@expr1073745041 $... $) ${ $assertThrowFail $(@expr1073745042 "cppcheck-2.8/test/testgarbage.cpp" $, 1756 $) $; $} $} $while $(@expr1073745043 $false $) ;
1757: $do ${ $try ${ checkCode (@expr1073745044 " enum struct" ) $; $assertThrowFail $(@expr1073745045 "cppcheck-2.8/test/testgarbage.cpp" $, 1757 $) $; $} $catch $(@expr1073745046 $const InternalError $&@expr1073745047 $) ${ $} $catch $(@expr1073745048 $... $) ${ $assertThrowFail $(@expr1073745049 "cppcheck-2.8/test/testgarbage.cpp" $, 1757 $) $; $} $} $while $(@expr1073745050 $false $) ;
1758: $do ${ $try ${ checkCode (@expr1073745051 "{(){(())}}r&const" ) $; $assertThrowFail $(@expr1073745052 "cppcheck-2.8/test/testgarbage.cpp" $, 1758 $) $; $} $catch $(@expr1073745053 $const InternalError $&@expr1073745054 $) ${ $} $catch $(@expr1073745055 $... $) ${ $assertThrowFail $(@expr1073745056 "cppcheck-2.8/test/testgarbage.cpp" $, 1758 $) $; $} $} $while $(@expr1073745057 $false $) ;
1759: $do ${ $try ${ checkCode (@expr1073745058 "int" ) $; $assertThrowFail $(@expr1073745059 "cppcheck-2.8/test/testgarbage.cpp" $, 1759 $) $; $} $catch $(@expr1073745060 $const InternalError $&@expr1073745061 $) ${ $} $catch $(@expr1073745062 $... $) ${ $assertThrowFail $(@expr1073745063 "cppcheck-2.8/test/testgarbage.cpp" $, 1759 $) $; $} $} $while $(@expr1073745064 $false $) ;
1760: $do ${ $try ${ checkCode (@expr1073745065 "struct A :\n" ) $; $assertThrowFail $(@expr1073745066 "cppcheck-2.8/test/testgarbage.cpp" $, 1760 $) $; $} $catch $(@expr1073745067 $const InternalError $&@expr1073745068 $) ${ $} $catch $(@expr1073745069 $... $) ${ $assertThrowFail $(@expr1073745070 "cppcheck-2.8/test/testgarbage.cpp" $, 1760 $) $; $} $} $while $(@expr1073745071 $false $) ;
1761: $do ${ $try ${ checkCode (@expr1073745072 "{} const const\n" ) $; $assertThrowFail $(@expr1073745073 "cppcheck-2.8/test/testgarbage.cpp" $, 1761 $) $; $} $catch $(@expr1073745074 $const InternalError $&@expr1073745075 $) ${ $} $catch $(@expr1073745076 $... $) ${ $assertThrowFail $(@expr1073745077 "cppcheck-2.8/test/testgarbage.cpp" $, 1761 $) $; $} $} $while $(@expr1073745078 $false $) ;
1762: $do ${ $try ${ checkCode (@expr1073745079 "re2c: error: line 14, column 4: can only difference char sets" ) $; $assertThrowFail $(@expr1073745080 "cppcheck-2.8/test/testgarbage.cpp" $, 1762 $) $; $} $catch $(@expr1073745081 $const InternalError $&@expr1073745082 $) ${ $} $catch $(@expr1073745083 $... $) ${ $assertThrowFail $(@expr1073745084 "cppcheck-2.8/test/testgarbage.cpp" $, 1762 $) $; $} $} $while $(@expr1073745085 $false $) ;
1763:
1764:
1765: }
1766:
1767: void syntaxErrorCase ( ) {
1768:
1769: $do ${ $try ${ checkCode (@expr1073745086 "void f() { switch (a) {}; case 1: }" ) $; $assertThrowFail $(@expr1073745087 "cppcheck-2.8/test/testgarbage.cpp" $, 1769 $) $; $} $catch $(@expr1073745088 $const InternalError $&@expr1073745089 $) ${ $} $catch $(@expr1073745090 $... $) ${ $assertThrowFail $(@expr1073745091 "cppcheck-2.8/test/testgarbage.cpp" $, 1769 $) $; $} $} $while $(@expr1073745092 $false $) ;
1770: $do ${ $try ${ checkCode (@expr1073745093 "struct V : { public case {} ; struct U : U  void { V *f (int x) (x) } }" ) $; $assertThrowFail $(@expr1073745094 "cppcheck-2.8/test/testgarbage.cpp" $, 1770 $) $; $} $catch $(@expr1073745095 $const InternalError $&@expr1073745096 $) ${ $} $catch $(@expr1073745097 $... $) ${ $assertThrowFail $(@expr1073745098 "cppcheck-2.8/test/testgarbage.cpp" $, 1770 $) $; $} $} $while $(@expr1073745099 $false $) ;
1771: $do ${ $try ${ checkCode (@expr1073745100 "void f() { 0 0; }" ) $; $assertThrowFail $(@expr1073745101 "cppcheck-2.8/test/testgarbage.cpp" $, 1771 $) $; $} $catch $(@expr1073745102 $const InternalError $&@expr1073745103 $) ${ $} $catch $(@expr1073745104 $... $) ${ $assertThrowFail $(@expr1073745105 "cppcheck-2.8/test/testgarbage.cpp" $, 1771 $) $; $} $} $while $(@expr1073745106 $false $) ;
1772: $do ${ $try ${ checkCode (@expr1073745107 "void f() { true 0; }" ) $; $assertThrowFail $(@expr1073745108 "cppcheck-2.8/test/testgarbage.cpp" $, 1772 $) $; $} $catch $(@expr1073745109 $const InternalError $&@expr1073745110 $) ${ $} $catch $(@expr1073745111 $... $) ${ $assertThrowFail $(@expr1073745112 "cppcheck-2.8/test/testgarbage.cpp" $, 1772 $) $; $} $} $while $(@expr1073745113 $false $) ;
1773: $do ${ $try ${ checkCode (@expr1073745114 "void f() { 'a' 0; }" ) $; $assertThrowFail $(@expr1073745115 "cppcheck-2.8/test/testgarbage.cpp" $, 1773 $) $; $} $catch $(@expr1073745116 $const InternalError $&@expr1073745117 $) ${ $} $catch $(@expr1073745118 $... $) ${ $assertThrowFail $(@expr1073745119 "cppcheck-2.8/test/testgarbage.cpp" $, 1773 $) $; $} $} $while $(@expr1073745120 $false $) ;
1774: $do ${ $try ${ checkCode (@expr1073745121 "void f() { 1 \"\"; }" ) $; $assertThrowFail $(@expr1073745122 "cppcheck-2.8/test/testgarbage.cpp" $, 1774 $) $; $} $catch $(@expr1073745123 $const InternalError $&@expr1073745124 $) ${ $} $catch $(@expr1073745125 $... $) ${ $assertThrowFail $(@expr1073745126 "cppcheck-2.8/test/testgarbage.cpp" $, 1774 $) $; $} $} $while $(@expr1073745127 $false $) ;
1775: }
1776:
1777: void syntaxErrorFuzzerCliType1 ( ) {
1778: $do ${ $try ${ checkCode (@expr1073745128 "void f(){x=0,return return''[]()}" ) $; $assertThrowFail $(@expr1073745129 "cppcheck-2.8/test/testgarbage.cpp" $, 1778 $) $; $} $catch $(@expr1073745130 $const InternalError $&@expr1073745131 $) ${ $} $catch $(@expr1073745132 $... $) ${ $assertThrowFail $(@expr1073745133 "cppcheck-2.8/test/testgarbage.cpp" $, 1778 $) $; $} $} $while $(@expr1073745134 $false $) ;
1779: $do ${ $try ${ checkCode (@expr1073745135 "void f(){x='0'++'0'(return)[];}" ) $; $assertThrowFail $(@expr1073745136 "cppcheck-2.8/test/testgarbage.cpp" $, 1779 $) $; $} $catch $(@expr1073745137 $const InternalError $&@expr1073745138 $) ${ $} $catch $(@expr1073745139 $... $) ${ $assertThrowFail $(@expr1073745140 "cppcheck-2.8/test/testgarbage.cpp" $, 1779 $) $; $} $} $while $(@expr1073745141 $false $) ;
1780: checkCode (@expr1073745142 "void f(){*(int *)42=0;}" ) ;
1781: $do ${ $try ${ checkCode (@expr1073745143 "void f() { x= 'x' > typedef name5 | ( , ;){ } (); }" ) $; $assertThrowFail $(@expr1073745144 "cppcheck-2.8/test/testgarbage.cpp" $, 1781 $) $; $} $catch $(@expr1073745145 $const InternalError $&@expr1073745146 $) ${ $} $catch $(@expr1073745147 $... $) ${ $assertThrowFail $(@expr1073745148 "cppcheck-2.8/test/testgarbage.cpp" $, 1781 $) $; $} $} $while $(@expr1073745149 $false $) ;
1782: $do ${ $try ${ checkCode (@expr1073745150 "void f() { x= {}( ) ( 'x')[ ] (); }" ) $; $assertThrowFail $(@expr1073745151 "cppcheck-2.8/test/testgarbage.cpp" $, 1782 $) $; $} $catch $(@expr1073745152 $const InternalError $&@expr1073745153 $) ${ $} $catch $(@expr1073745154 $... $) ${ $assertThrowFail $(@expr1073745155 "cppcheck-2.8/test/testgarbage.cpp" $, 1782 $) $; $} $} $while $(@expr1073745156 $false $) ;
1783: $do ${ $try ${ checkCode (@expr1073745157 "void f() { x= y{ } name5 y[ ] + y ^ name5 ^ name5 for ( ( y y y && y y y && name5 ++ int )); }" ) $; $assertThrowFail $(@expr1073745158 "cppcheck-2.8/test/testgarbage.cpp" $, 1783 $) $; $} $catch $(@expr1073745159 $const InternalError $&@expr1073745160 $) ${ $} $catch $(@expr1073745161 $... $) ${ $assertThrowFail $(@expr1073745162 "cppcheck-2.8/test/testgarbage.cpp" $, 1783 $) $; $} $} $while $(@expr1073745163 $false $) ;
1784: }
1785:
1786: void cliCode ( ) {
1787:
1788: $do ${ $try ${ checkCode (@expr1073745164 "public ref class LibCecSharp : public CecCallbackMethods {\narray<CecAdapter ^> ^ FindAdapters(String ^ path) {}\nbool GetDeviceInformation(String ^ port, LibCECConfiguration ^configuration, uint32_t timeoutMs) {\nbool bReturn(false);\n}\n};" ) $; $} $catch $(@expr1073745165 $... $) ${ $assertNoThrowFail $(@expr1073745166 "cppcheck-2.8/test/testgarbage.cpp" $, 1788 $) $; $} $} $while $(@expr1073745167 $false $)
1789:
|
1793:
1794: ;
1795: }
1796:
1797: void enumTrailingComma ( ) {
1798: $do ${ $try ${ checkCode (@expr1073745168 "enum ssl_shutdown_t {ssl_shutdown_none = 0,ssl_shutdown_close_notify = , } ;" ) $; $assertThrowFail $(@expr1073745169 "cppcheck-2.8/test/testgarbage.cpp" $, 1798 $) $; $} $catch $(@expr1073745170 $const InternalError $&@expr1073745171 $) ${ $} $catch $(@expr1073745172 $... $) ${ $assertThrowFail $(@expr1073745173 "cppcheck-2.8/test/testgarbage.cpp" $, 1798 $) $; $} $} $while $(@expr1073745174 $false $) ;
1799: }
1800:
1801: void nonGarbageCode1 ( ) {
1802: checkCode (@expr1073745175 "template <class T> class List {\npublic:\n   List();\n   virtual ~List();\n   template< class Predicate > u_int DeleteIf( const Predicate &pred );\n};\ntemplate< class T >\ntemplate< class Predicate > int\nList<T>::DeleteIf( const Predicate &pred )\n{}"
1803:
|
1810:
1811: ) ;
1812:
1813:
1814: checkCode (@expr1073745176
1815: "struct A {\n    void operator+=(A&) && = delete;\n};"
1816:
1817: ) ;
1818:
1819:
1820: checkCode (@expr1073745177
1821: "struct foo;\nvoid f() {\n    auto fn = []() -> foo* { return new foo(); };\n}"
1822:
1823:
1824: ) ;
1825: }
1826: } ;
1827:
1828: $namespace ${ TestGarbage instance_TestGarbage@var154 $; $}



##Value flow
Line 37
  countTests always !<=-1
Line 38
  fails_counter always !<=-1
Line 39
  todos_counter always !<=-1
Line 40
  succeeded_todos_counter always !<=-1
Line 42
  mVerbose always {!<=-1,!>=2}
Line 50
  quiet_tests always {!<=-1,!>=2}
Line 52
  = always 0
  0 always 0
Line 54
  ( always {!<=-1,!>=2}
Line 55
  , always !<=-1
  linenr always !<=-1
Line 57
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
  , always {!<=-1,!>=2}
  condition always {!<=-1,!>=2}
Line 60
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 61
  != always {!<=-1,!>=2}
Line 63
  expected always !symbolic=(actual)
Line 65
  actual always !symbolic=(expected)
Line 67
  linenr always !<=-1
Line 69
  return always {!<=-1,!>=2}
  == always {!<=-1,!>=2}
Line 74
  , always !<=-1
  linenr always !<=-1
Line 76
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 77
  , always !<=-1
  linenr always !<=-1
Line 78
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 79
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 80
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 81
  ( always {!<=-1,!>=2}
  , always !<=-1
  linenr always !<=-1
Line 82
  , always !<=-1
  linenr always !<=-1
Line 84
  , always !<=-1
  linenr always !<=-1
Line 86
  , always !<=-1
  linenr always !<=-1
Line 88
  , always !<=-1
  linenr always !<=-1
Line 90
  , always !<=-1
  linenr always !<=-1
Line 91
  , always !<=-1
  linenr always !<=-1
Line 92
  , always !<=-1
  linenr always !<=-1
Line 96
  v always {!<=-1,!>=2}
Line 97
  mVerbose always {!<=-1,!>=2}
  = {!<=-1,!>=2,0@79}
  v {!<=-1,!>=2,0@79}
Line 101
  = always "{file}:{line}:{severity}:{message}"
  "{file}:{line}:{severity}:{message}" always "{file}:{line}:{severity}:{message}"
Line 102
  = always "{file}:{line}:note:{info}"
  "{file}:{line}:note:{info}" always "{file}:{line}:note:{info}"
Line 116
  ( always !<=-1
Line 34
  "TestGarbage" always "TestGarbage"
Line 40
  = always 1
  true always 1
Line 46
  ( always {!<=-1,!>=2}
  "final_class_x" always "final_class_x"
  false always 0
  false always 0
Line 47
  ( always {!<=-1,!>=2}
  "wrong_syntax1" always "wrong_syntax1"
  false always 0
  false always 0
Line 48
  ( always {!<=-1,!>=2}
  "wrong_syntax2" always "wrong_syntax2"
  false always 0
  false always 0
Line 49
  ( always {!<=-1,!>=2}
  "wrong_syntax3" always "wrong_syntax3"
  false always 0
  false always 0
Line 50
  ( always {!<=-1,!>=2}
  "wrong_syntax4" always "wrong_syntax4"
  false always 0
  false always 0
Line 51
  ( always {!<=-1,!>=2}
  "wrong_syntax_if_macro" always "wrong_syntax_if_macro"
  false always 0
  false always 0
Line 52
  ( always {!<=-1,!>=2}
  "wrong_syntax_class_x_y" always "wrong_syntax_class_x_y"
  false always 0
  false always 0
Line 53
  ( always {!<=-1,!>=2}
  "wrong_syntax_anonymous_struct" always "wrong_syntax_anonymous_struct"
  false always 0
  false always 0
Line 54
  ( always {!<=-1,!>=2}
  "syntax_case_default" always "syntax_case_default"
  false always 0
  false always 0
Line 55
  ( always {!<=-1,!>=2}
  "garbageCode1" always "garbageCode1"
  false always 0
  false always 0
Line 56
  ( always {!<=-1,!>=2}
  "garbageCode2" always "garbageCode2"
  false always 0
  false always 0
Line 57
  ( always {!<=-1,!>=2}
  "garbageCode3" always "garbageCode3"
  false always 0
  false always 0
Line 58
  ( always {!<=-1,!>=2}
  "garbageCode4" always "garbageCode4"
  false always 0
  false always 0
Line 59
  ( always {!<=-1,!>=2}
  "garbageCode5" always "garbageCode5"
  false always 0
  false always 0
Line 60
  ( always {!<=-1,!>=2}
  "garbageCode6" always "garbageCode6"
  false always 0
  false always 0
Line 61
  ( always {!<=-1,!>=2}
  "garbageCode7" always "garbageCode7"
  false always 0
  false always 0
Line 62
  ( always {!<=-1,!>=2}
  "garbageCode8" always "garbageCode8"
  false always 0
  false always 0
Line 63
  ( always {!<=-1,!>=2}
  "garbageCode9" always "garbageCode9"
  false always 0
  false always 0
Line 64
  ( always {!<=-1,!>=2}
  "garbageCode10" always "garbageCode10"
  false always 0
  false always 0
Line 65
  ( always {!<=-1,!>=2}
  "garbageCode12" always "garbageCode12"
  false always 0
  false always 0
Line 66
  ( always {!<=-1,!>=2}
  "garbageCode13" always "garbageCode13"
  false always 0
  false always 0
Line 67
  ( always {!<=-1,!>=2}
  "garbageCode15" always "garbageCode15"
  false always 0
  false always 0
Line 68
  ( always {!<=-1,!>=2}
  "garbageCode16" always "garbageCode16"
  false always 0
  false always 0
Line 69
  ( always {!<=-1,!>=2}
  "garbageCode17" always "garbageCode17"
  false always 0
  false always 0
Line 70
  ( always {!<=-1,!>=2}
  "garbageCode18" always "garbageCode18"
  false always 0
  false always 0
Line 71
  ( always {!<=-1,!>=2}
  "garbageCode20" always "garbageCode20"
  false always 0
  false always 0
Line 72
  ( always {!<=-1,!>=2}
  "garbageCode21" always "garbageCode21"
  false always 0
  false always 0
Line 73
  ( always {!<=-1,!>=2}
  "garbageCode22" always "garbageCode22"
  false always 0
  false always 0
Line 74
  ( always {!<=-1,!>=2}
  "garbageCode23" always "garbageCode23"
  false always 0
  false always 0
Line 75
  ( always {!<=-1,!>=2}
  "garbageCode24" always "garbageCode24"
  false always 0
  false always 0
Line 76
  ( always {!<=-1,!>=2}
  "garbageCode25" always "garbageCode25"
  false always 0
  false always 0
Line 77
  ( always {!<=-1,!>=2}
  "garbageCode26" always "garbageCode26"
  false always 0
  false always 0
Line 78
  ( always {!<=-1,!>=2}
  "garbageCode27" always "garbageCode27"
  false always 0
  false always 0
Line 79
  ( always {!<=-1,!>=2}
  "garbageCode28" always "garbageCode28"
  false always 0
  false always 0
Line 80
  ( always {!<=-1,!>=2}
  "garbageCode30" always "garbageCode30"
  false always 0
  false always 0
Line 81
  ( always {!<=-1,!>=2}
  "garbageCode31" always "garbageCode31"
  false always 0
  false always 0
Line 82
  ( always {!<=-1,!>=2}
  "garbageCode33" always "garbageCode33"
  false always 0
  false always 0
Line 83
  ( always {!<=-1,!>=2}
  "garbageCode34" always "garbageCode34"
  false always 0
  false always 0
Line 84
  ( always {!<=-1,!>=2}
  "garbageCode35" always "garbageCode35"
  false always 0
  false always 0
Line 85
  ( always {!<=-1,!>=2}
  "garbageCode36" always "garbageCode36"
  false always 0
  false always 0
Line 86
  ( always {!<=-1,!>=2}
  "garbageCode37" always "garbageCode37"
  false always 0
  false always 0
Line 87
  ( always {!<=-1,!>=2}
  "garbageCode38" always "garbageCode38"
  false always 0
  false always 0
Line 88
  ( always {!<=-1,!>=2}
  "garbageCode40" always "garbageCode40"
  false always 0
  false always 0
Line 89
  ( always {!<=-1,!>=2}
  "garbageCode41" always "garbageCode41"
  false always 0
  false always 0
Line 90
  ( always {!<=-1,!>=2}
  "garbageCode42" always "garbageCode42"
  false always 0
  false always 0
Line 91
  ( always {!<=-1,!>=2}
  "garbageCode43" always "garbageCode43"
  false always 0
  false always 0
Line 92
  ( always {!<=-1,!>=2}
  "garbageCode44" always "garbageCode44"
  false always 0
  false always 0
Line 93
  ( always {!<=-1,!>=2}
  "garbageCode45" always "garbageCode45"
  false always 0
  false always 0
Line 94
  ( always {!<=-1,!>=2}
  "garbageCode46" always "garbageCode46"
  false always 0
  false always 0
Line 95
  ( always {!<=-1,!>=2}
  "garbageCode47" always "garbageCode47"
  false always 0
  false always 0
Line 96
  ( always {!<=-1,!>=2}
  "garbageCode48" always "garbageCode48"
  false always 0
  false always 0
Line 97
  ( always {!<=-1,!>=2}
  "garbageCode49" always "garbageCode49"
  false always 0
  false always 0
Line 98
  ( always {!<=-1,!>=2}
  "garbageCode51" always "garbageCode51"
  false always 0
  false always 0
Line 99
  ( always {!<=-1,!>=2}
  "garbageCode53" always "garbageCode53"
  false always 0
  false always 0
Line 100
  ( always {!<=-1,!>=2}
  "garbageCode54" always "garbageCode54"
  false always 0
  false always 0
Line 101
  ( always {!<=-1,!>=2}
  "garbageCode55" always "garbageCode55"
  false always 0
  false always 0
Line 102
  ( always {!<=-1,!>=2}
  "garbageCode56" always "garbageCode56"
  false always 0
  false always 0
Line 103
  ( always {!<=-1,!>=2}
  "garbageCode57" always "garbageCode57"
  false always 0
  false always 0
Line 104
  ( always {!<=-1,!>=2}
  "garbageCode58" always "garbageCode58"
  false always 0
  false always 0
Line 105
  ( always {!<=-1,!>=2}
  "garbageCode59" always "garbageCode59"
  false always 0
  false always 0
Line 106
  ( always {!<=-1,!>=2}
  "garbageCode60" always "garbageCode60"
  false always 0
  false always 0
Line 107
  ( always {!<=-1,!>=2}
  "garbageCode61" always "garbageCode61"
  false always 0
  false always 0
Line 108
  ( always {!<=-1,!>=2}
  "garbageCode63" always "garbageCode63"
  false always 0
  false always 0
Line 109
  ( always {!<=-1,!>=2}
  "garbageCode64" always "garbageCode64"
  false always 0
  false always 0
Line 110
  ( always {!<=-1,!>=2}
  "garbageCode65" always "garbageCode65"
  false always 0
  false always 0
Line 111
  ( always {!<=-1,!>=2}
  "garbageCode66" always "garbageCode66"
  false always 0
  false always 0
Line 112
  ( always {!<=-1,!>=2}
  "garbageCode68" always "garbageCode68"
  false always 0
  false always 0
Line 113
  ( always {!<=-1,!>=2}
  "garbageCode69" always "garbageCode69"
  false always 0
  false always 0
Line 114
  ( always {!<=-1,!>=2}
  "garbageCode70" always "garbageCode70"
  false always 0
  false always 0
Line 115
  ( always {!<=-1,!>=2}
  "garbageCode71" always "garbageCode71"
  false always 0
  false always 0
Line 116
  ( always {!<=-1,!>=2}
  "garbageCode72" always "garbageCode72"
  false always 0
  false always 0
Line 117
  ( always {!<=-1,!>=2}
  "garbageCode73" always "garbageCode73"
  false always 0
  false always 0
Line 118
  ( always {!<=-1,!>=2}
  "garbageCode74" always "garbageCode74"
  false always 0
  false always 0
Line 119
  ( always {!<=-1,!>=2}
  "garbageCode76" always "garbageCode76"
  false always 0
  false always 0
Line 120
  ( always {!<=-1,!>=2}
  "garbageCode77" always "garbageCode77"
  false always 0
  false always 0
Line 121
  ( always {!<=-1,!>=2}
  "garbageCode78" always "garbageCode78"
  false always 0
  false always 0
Line 122
  ( always {!<=-1,!>=2}
  "garbageCode79" always "garbageCode79"
  false always 0
  false always 0
Line 123
  ( always {!<=-1,!>=2}
  "garbageCode80" always "garbageCode80"
  false always 0
  false always 0
Line 124
  ( always {!<=-1,!>=2}
  "garbageCode81" always "garbageCode81"
  false always 0
  false always 0
Line 125
  ( always {!<=-1,!>=2}
  "garbageCode82" always "garbageCode82"
  false always 0
  false always 0
Line 126
  ( always {!<=-1,!>=2}
  "garbageCode83" always "garbageCode83"
  false always 0
  false always 0
Line 127
  ( always {!<=-1,!>=2}
  "garbageCode84" always "garbageCode84"
  false always 0
  false always 0
Line 128
  ( always {!<=-1,!>=2}
  "garbageCode85" always "garbageCode85"
  false always 0
  false always 0
Line 129
  ( always {!<=-1,!>=2}
  "garbageCode86" always "garbageCode86"
  false always 0
  false always 0
Line 130
  ( always {!<=-1,!>=2}
  "garbageCode87" always "garbageCode87"
  false always 0
  false always 0
Line 131
  ( always {!<=-1,!>=2}
  "garbageCode88" always "garbageCode88"
  false always 0
  false always 0
Line 132
  ( always {!<=-1,!>=2}
  "garbageCode90" always "garbageCode90"
  false always 0
  false always 0
Line 133
  ( always {!<=-1,!>=2}
  "garbageCode91" always "garbageCode91"
  false always 0
  false always 0
Line 134
  ( always {!<=-1,!>=2}
  "garbageCode92" always "garbageCode92"
  false always 0
  false always 0
Line 135
  ( always {!<=-1,!>=2}
  "garbageCode94" always "garbageCode94"
  false always 0
  false always 0
Line 136
  ( always {!<=-1,!>=2}
  "garbageCode95" always "garbageCode95"
  false always 0
  false always 0
Line 137
  ( always {!<=-1,!>=2}
  "garbageCode96" always "garbageCode96"
  false always 0
  false always 0
Line 138
  ( always {!<=-1,!>=2}
  "garbageCode97" always "garbageCode97"
  false always 0
  false always 0
Line 139
  ( always {!<=-1,!>=2}
  "garbageCode98" always "garbageCode98"
  false always 0
  false always 0
Line 140
  ( always {!<=-1,!>=2}
  "garbageCode99" always "garbageCode99"
  false always 0
  false always 0
Line 141
  ( always {!<=-1,!>=2}
  "garbageCode100" always "garbageCode100"
  false always 0
  false always 0
Line 142
  ( always {!<=-1,!>=2}
  "garbageCode101" always "garbageCode101"
  false always 0
  false always 0
Line 143
  ( always {!<=-1,!>=2}
  "garbageCode102" always "garbageCode102"
  false always 0
  false always 0
Line 144
  ( always {!<=-1,!>=2}
  "garbageCode103" always "garbageCode103"
  false always 0
  false always 0
Line 145
  ( always {!<=-1,!>=2}
  "garbageCode104" always "garbageCode104"
  false always 0
  false always 0
Line 146
  ( always {!<=-1,!>=2}
  "garbageCode105" always "garbageCode105"
  false always 0
  false always 0
Line 147
  ( always {!<=-1,!>=2}
  "garbageCode106" always "garbageCode106"
  false always 0
  false always 0
Line 148
  ( always {!<=-1,!>=2}
  "garbageCode107" always "garbageCode107"
  false always 0
  false always 0
Line 149
  ( always {!<=-1,!>=2}
  "garbageCode108" always "garbageCode108"
  false always 0
  false always 0
Line 150
  ( always {!<=-1,!>=2}
  "garbageCode109" always "garbageCode109"
  false always 0
  false always 0
Line 151
  ( always {!<=-1,!>=2}
  "garbageCode110" always "garbageCode110"
  false always 0
  false always 0
Line 152
  ( always {!<=-1,!>=2}
  "garbageCode111" always "garbageCode111"
  false always 0
  false always 0
Line 153
  ( always {!<=-1,!>=2}
  "garbageCode112" always "garbageCode112"
  false always 0
  false always 0
Line 154
  ( always {!<=-1,!>=2}
  "garbageCode114" always "garbageCode114"
  false always 0
  false always 0
Line 155
  ( always {!<=-1,!>=2}
  "garbageCode115" always "garbageCode115"
  false always 0
  false always 0
Line 156
  ( always {!<=-1,!>=2}
  "garbageCode116" always "garbageCode116"
  false always 0
  false always 0
Line 157
  ( always {!<=-1,!>=2}
  "garbageCode117" always "garbageCode117"
  false always 0
  false always 0
Line 158
  ( always {!<=-1,!>=2}
  "garbageCode118" always "garbageCode118"
  false always 0
  false always 0
Line 159
  ( always {!<=-1,!>=2}
  "garbageCode119" always "garbageCode119"
  false always 0
  false always 0
Line 160
  ( always {!<=-1,!>=2}
  "garbageCode120" always "garbageCode120"
  false always 0
  false always 0
Line 161
  ( always {!<=-1,!>=2}
  "garbageCode121" always "garbageCode121"
  false always 0
  false always 0
Line 162
  ( always {!<=-1,!>=2}
  "garbageCode122" always "garbageCode122"
  false always 0
  false always 0
Line 163
  ( always {!<=-1,!>=2}
  "garbageCode123" always "garbageCode123"
  false always 0
  false always 0
Line 164
  ( always {!<=-1,!>=2}
  "garbageCode125" always "garbageCode125"
  false always 0
  false always 0
Line 165
  ( always {!<=-1,!>=2}
  "garbageCode126" always "garbageCode126"
  false always 0
  false always 0
Line 166
  ( always {!<=-1,!>=2}
  "garbageCode127" always "garbageCode127"
  false always 0
  false always 0
Line 167
  ( always {!<=-1,!>=2}
  "garbageCode128" always "garbageCode128"
  false always 0
  false always 0
Line 168
  ( always {!<=-1,!>=2}
  "garbageCode129" always "garbageCode129"
  false always 0
  false always 0
Line 169
  ( always {!<=-1,!>=2}
  "garbageCode130" always "garbageCode130"
  false always 0
  false always 0
Line 170
  ( always {!<=-1,!>=2}
  "garbageCode131" always "garbageCode131"
  false always 0
  false always 0
Line 171
  ( always {!<=-1,!>=2}
  "garbageCode132" always "garbageCode132"
  false always 0
  false always 0
Line 172
  ( always {!<=-1,!>=2}
  "garbageCode133" always "garbageCode133"
  false always 0
  false always 0
Line 173
  ( always {!<=-1,!>=2}
  "garbageCode134" always "garbageCode134"
  false always 0
  false always 0
Line 174
  ( always {!<=-1,!>=2}
  "garbageCode135" always "garbageCode135"
  false always 0
  false always 0
Line 175
  ( always {!<=-1,!>=2}
  "garbageCode136" always "garbageCode136"
  false always 0
  false always 0
Line 176
  ( always {!<=-1,!>=2}
  "garbageCode137" always "garbageCode137"
  false always 0
  false always 0
Line 177
  ( always {!<=-1,!>=2}
  "garbageCode138" always "garbageCode138"
  false always 0
  false always 0
Line 178
  ( always {!<=-1,!>=2}
  "garbageCode139" always "garbageCode139"
  false always 0
  false always 0
Line 179
  ( always {!<=-1,!>=2}
  "garbageCode140" always "garbageCode140"
  false always 0
  false always 0
Line 180
  ( always {!<=-1,!>=2}
  "garbageCode141" always "garbageCode141"
  false always 0
  false always 0
Line 181
  ( always {!<=-1,!>=2}
  "garbageCode142" always "garbageCode142"
  false always 0
  false always 0
Line 182
  ( always {!<=-1,!>=2}
  "garbageCode143" always "garbageCode143"
  false always 0
  false always 0
Line 183
  ( always {!<=-1,!>=2}
  "garbageCode144" always "garbageCode144"
  false always 0
  false always 0
Line 184
  ( always {!<=-1,!>=2}
  "garbageCode146" always "garbageCode146"
  false always 0
  false always 0
Line 185
  ( always {!<=-1,!>=2}
  "garbageCode147" always "garbageCode147"
  false always 0
  false always 0
Line 186
  ( always {!<=-1,!>=2}
  "garbageCode148" always "garbageCode148"
  false always 0
  false always 0
Line 187
  ( always {!<=-1,!>=2}
  "garbageCode149" always "garbageCode149"
  false always 0
  false always 0
Line 188
  ( always {!<=-1,!>=2}
  "garbageCode150" always "garbageCode150"
  false always 0
  false always 0
Line 189
  ( always {!<=-1,!>=2}
  "garbageCode151" always "garbageCode151"
  false always 0
  false always 0
Line 190
  ( always {!<=-1,!>=2}
  "garbageCode152" always "garbageCode152"
  false always 0
  false always 0
Line 191
  ( always {!<=-1,!>=2}
  "garbageCode153" always "garbageCode153"
  false always 0
  false always 0
Line 192
  ( always {!<=-1,!>=2}
  "garbageCode154" always "garbageCode154"
  false always 0
  false always 0
Line 193
  ( always {!<=-1,!>=2}
  "garbageCode156" always "garbageCode156"
  false always 0
  false always 0
Line 194
  ( always {!<=-1,!>=2}
  "garbageCode157" always "garbageCode157"
  false always 0
  false always 0
Line 195
  ( always {!<=-1,!>=2}
  "garbageCode158" always "garbageCode158"
  false always 0
  false always 0
Line 196
  ( always {!<=-1,!>=2}
  "garbageCode159" always "garbageCode159"
  false always 0
  false always 0
Line 197
  ( always {!<=-1,!>=2}
  "garbageCode160" always "garbageCode160"
  false always 0
  false always 0
Line 198
  ( always {!<=-1,!>=2}
  "garbageCode161" always "garbageCode161"
  false always 0
  false always 0
Line 199
  ( always {!<=-1,!>=2}
  "garbageCode162" always "garbageCode162"
  false always 0
  false always 0
Line 200
  ( always {!<=-1,!>=2}
  "garbageCode163" always "garbageCode163"
  false always 0
  false always 0
Line 201
  ( always {!<=-1,!>=2}
  "garbageCode164" always "garbageCode164"
  false always 0
  false always 0
Line 202
  ( always {!<=-1,!>=2}
  "garbageCode165" always "garbageCode165"
  false always 0
  false always 0
Line 203
  ( always {!<=-1,!>=2}
  "garbageCode167" always "garbageCode167"
  false always 0
  false always 0
Line 204
  ( always {!<=-1,!>=2}
  "garbageCode168" always "garbageCode168"
  false always 0
  false always 0
Line 205
  ( always {!<=-1,!>=2}
  "garbageCode169" always "garbageCode169"
  false always 0
  false always 0
Line 206
  ( always {!<=-1,!>=2}
  "garbageCode170" always "garbageCode170"
  false always 0
  false always 0
Line 207
  ( always {!<=-1,!>=2}
  "garbageCode171" always "garbageCode171"
  false always 0
  false always 0
Line 208
  ( always {!<=-1,!>=2}
  "garbageCode172" always "garbageCode172"
  false always 0
  false always 0
Line 209
  ( always {!<=-1,!>=2}
  "garbageCode173" always "garbageCode173"
  false always 0
  false always 0
Line 210
  ( always {!<=-1,!>=2}
  "garbageCode174" always "garbageCode174"
  false always 0
  false always 0
Line 211
  ( always {!<=-1,!>=2}
  "garbageCode175" always "garbageCode175"
  false always 0
  false always 0
Line 212
  ( always {!<=-1,!>=2}
  "garbageCode176" always "garbageCode176"
  false always 0
  false always 0
Line 213
  ( always {!<=-1,!>=2}
  "garbageCode181" always "garbageCode181"
  false always 0
  false always 0
Line 214
  ( always {!<=-1,!>=2}
  "garbageCode182" always "garbageCode182"
  false always 0
  false always 0
Line 215
  ( always {!<=-1,!>=2}
  "garbageCode183" always "garbageCode183"
  false always 0
  false always 0
Line 216
  ( always {!<=-1,!>=2}
  "garbageCode184" always "garbageCode184"
  false always 0
  false always 0
Line 217
  ( always {!<=-1,!>=2}
  "garbageCode185" always "garbageCode185"
  false always 0
  false always 0
Line 218
  ( always {!<=-1,!>=2}
  "garbageCode186" always "garbageCode186"
  false always 0
  false always 0
Line 219
  ( always {!<=-1,!>=2}
  "garbageCode187" always "garbageCode187"
  false always 0
  false always 0
Line 220
  ( always {!<=-1,!>=2}
  "garbageCode188" always "garbageCode188"
  false always 0
  false always 0
Line 221
  ( always {!<=-1,!>=2}
  "garbageCode189" always "garbageCode189"
  false always 0
  false always 0
Line 222
  ( always {!<=-1,!>=2}
  "garbageCode190" always "garbageCode190"
  false always 0
  false always 0
Line 223
  ( always {!<=-1,!>=2}
  "garbageCode191" always "garbageCode191"
  false always 0
  false always 0
Line 224
  ( always {!<=-1,!>=2}
  "garbageCode192" always "garbageCode192"
  false always 0
  false always 0
Line 225
  ( always {!<=-1,!>=2}
  "garbageCode193" always "garbageCode193"
  false always 0
  false always 0
Line 226
  ( always {!<=-1,!>=2}
  "garbageCode194" always "garbageCode194"
  false always 0
  false always 0
Line 227
  ( always {!<=-1,!>=2}
  "garbageCode195" always "garbageCode195"
  false always 0
  false always 0
Line 228
  ( always {!<=-1,!>=2}
  "garbageCode196" always "garbageCode196"
  false always 0
  false always 0
Line 229
  ( always {!<=-1,!>=2}
  "garbageCode197" always "garbageCode197"
  false always 0
  false always 0
Line 230
  ( always {!<=-1,!>=2}
  "garbageCode198" always "garbageCode198"
  false always 0
  false always 0
Line 231
  ( always {!<=-1,!>=2}
  "garbageCode199" always "garbageCode199"
  false always 0
  false always 0
Line 232
  ( always {!<=-1,!>=2}
  "garbageCode200" always "garbageCode200"
  false always 0
  false always 0
Line 233
  ( always {!<=-1,!>=2}
  "garbageCode201" always "garbageCode201"
  false always 0
  false always 0
Line 234
  ( always {!<=-1,!>=2}
  "garbageCode202" always "garbageCode202"
  false always 0
  false always 0
Line 235
  ( always {!<=-1,!>=2}
  "garbageCode203" always "garbageCode203"
  false always 0
  false always 0
Line 236
  ( always {!<=-1,!>=2}
  "garbageCode204" always "garbageCode204"
  false always 0
  false always 0
Line 237
  ( always {!<=-1,!>=2}
  "garbageCode205" always "garbageCode205"
  false always 0
  false always 0
Line 238
  ( always {!<=-1,!>=2}
  "garbageCode206" always "garbageCode206"
  false always 0
  false always 0
Line 239
  ( always {!<=-1,!>=2}
  "garbageCode207" always "garbageCode207"
  false always 0
  false always 0
Line 240
  ( always {!<=-1,!>=2}
  "garbageCode208" always "garbageCode208"
  false always 0
  false always 0
Line 241
  ( always {!<=-1,!>=2}
  "garbageCode209" always "garbageCode209"
  false always 0
  false always 0
Line 242
  ( always {!<=-1,!>=2}
  "garbageCode210" always "garbageCode210"
  false always 0
  false always 0
Line 243
  ( always {!<=-1,!>=2}
  "garbageCode211" always "garbageCode211"
  false always 0
  false always 0
Line 244
  ( always {!<=-1,!>=2}
  "garbageCode212" always "garbageCode212"
  false always 0
  false always 0
Line 245
  ( always {!<=-1,!>=2}
  "garbageCode213" always "garbageCode213"
  false always 0
  false always 0
Line 246
  ( always {!<=-1,!>=2}
  "garbageCode214" always "garbageCode214"
  false always 0
  false always 0
Line 247
  ( always {!<=-1,!>=2}
  "garbageCode215" always "garbageCode215"
  false always 0
  false always 0
Line 248
  ( always {!<=-1,!>=2}
  "garbageCode216" always "garbageCode216"
  false always 0
  false always 0
Line 249
  ( always {!<=-1,!>=2}
  "garbageCode217" always "garbageCode217"
  false always 0
  false always 0
Line 250
  ( always {!<=-1,!>=2}
  "garbageCode218" always "garbageCode218"
  false always 0
  false always 0
Line 251
  ( always {!<=-1,!>=2}
  "garbageCode219" always "garbageCode219"
  false always 0
  false always 0
Line 252
  ( always {!<=-1,!>=2}
  "garbageCode220" always "garbageCode220"
  false always 0
  false always 0
Line 253
  ( always {!<=-1,!>=2}
  "garbageCode221" always "garbageCode221"
  false always 0
  false always 0
Line 254
  ( always {!<=-1,!>=2}
  "garbageCode222" always "garbageCode222"
  false always 0
  false always 0
Line 256
  ( always {!<=-1,!>=2}
  "garbageCodeFuzzerClientMode1" always "garbageCodeFuzzerClientMode1"
  false always 0
  false always 0
Line 258
  ( always {!<=-1,!>=2}
  "garbageValueFlow" always "garbageValueFlow"
  false always 0
  false always 0
Line 259
  ( always {!<=-1,!>=2}
  "garbageSymbolDatabase" always "garbageSymbolDatabase"
  false always 0
  false always 0
Line 260
  ( always {!<=-1,!>=2}
  "garbageAST" always "garbageAST"
  false always 0
  false always 0
Line 261
  ( always {!<=-1,!>=2}
  "templateSimplifierCrashes" always "templateSimplifierCrashes"
  false always 0
  false always 0
Line 262
  ( always {!<=-1,!>=2}
  "syntaxErrorFirstToken" always "syntaxErrorFirstToken"
  false always 0
  false always 0
Line 263
  ( always {!<=-1,!>=2}
  "syntaxErrorLastToken" always "syntaxErrorLastToken"
  false always 0
  false always 0
Line 264
  ( always {!<=-1,!>=2}
  "syntaxErrorCase" always "syntaxErrorCase"
  false always 0
  false always 0
Line 265
  ( always {!<=-1,!>=2}
  "syntaxErrorFuzzerCliType1" always "syntaxErrorFuzzerCliType1"
  false always 0
  false always 0
Line 266
  ( always {!<=-1,!>=2}
  "cliCode" always "cliCode"
  false always 0
  false always 0
Line 267
  ( always {!<=-1,!>=2}
  "enumTrailingComma" always "enumTrailingComma"
  false always 0
  false always 0
Line 269
  ( always {!<=-1,!>=2}
  "nonGarbageCode1" always "nonGarbageCode1"
  false always 0
  false always 0
Line 273
  , always 1
  cpp always {!<=-1,!>=2}
  = always 1
  true always 1
Line 275
  = possible {"test.cpp","test.c"}
  cpp {!<=-1,!>=2,0@25}
  ? possible {"test.cpp","test.c"}
  "test.cpp" always "test.cpp"
  : always "test.c"
  "test.c" always "test.c"
Line 276
  = possible {"test.c","test.cpp"}
  cpp {!<=-1,!>=2,0@25}
  ? possible {"test.c","test.cpp"}
  "test.c" always "test.c"
  : always "test.cpp"
  "test.cpp" always "test.cpp"
Line 280
  code possible {"template <class T> class List {\npublic:\n   List();\n   virtual ~List();\n   template< class Predicate > u_int DeleteIf( const Predicate &pred );\n};\ntemplate< class T >\ntemplate< class Predicate > int\nList<T>::DeleteIf( const Predicate &pred )\n{}"@1,"struct A {\n    void operator+=(A&) && = delete;\n};"@2,"struct foo;\nvoid f() {\n    auto fn = []() -> foo* { return new foo(); };\n}"@3,"enum ssl_shutdown_t {ssl_shutdown_none = 0,ssl_shutdown_close_notify = , } ;"@4,"public ref class LibCecSharp : public CecCallbackMethods {\narray<CecAdapter ^> ^ FindAdapters(String ^ path) {}\nbool GetDeviceInformation(String ^ port, LibCECConfiguration ^configuration, uint32_t timeoutMs) {\nbool bReturn(false);\n}\n};"@5,"void f(){x=0,return return''[]()}"@6,"void f(){x='0'++'0'(return)[];}"@7,"void f(){*(int *)42=0;}"@8,"void f() { x= 'x' > typedef name5 | ( , ;){ } (); }"@9,"void f() { x= {}( ) ( 'x')[ ] (); }"@10}
  alternatefilename {symbolic=(cpp?"test.c":"test.cpp"),"test.c","test.cpp"}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  280 always 280
Line 283
  code possible {"template <class T> class List {\npublic:\n   List();\n   virtual ~List();\n   template< class Predicate > u_int DeleteIf( const Predicate &pred );\n};\ntemplate< class T >\ntemplate< class Predicate > int\nList<T>::DeleteIf( const Predicate &pred )\n{}"@1,"struct A {\n    void operator+=(A&) && = delete;\n};"@2,"struct foo;\nvoid f() {\n    auto fn = []() -> foo* { return new foo(); };\n}"@3,"enum ssl_shutdown_t {ssl_shutdown_none = 0,ssl_shutdown_close_notify = , } ;"@4,"public ref class LibCecSharp : public CecCallbackMethods {\narray<CecAdapter ^> ^ FindAdapters(String ^ path) {}\nbool GetDeviceInformation(String ^ port, LibCECConfiguration ^configuration, uint32_t timeoutMs) {\nbool bReturn(false);\n}\n};"@5,"void f(){x=0,return return''[]()}"@6,"void f(){x='0'++'0'(return)[];}"@7,"void f(){*(int *)42=0;}"@8,"void f() { x= 'x' > typedef name5 | ( , ;){ } (); }"@9,"void f() { x= {}( ) ( 'x')[ ] (); }"@10}
  filename always symbolic=(cpp?"test.cpp":"test.c")
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  283 always 283
Line 287
  "" always ""
Line 290
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 292
  ( always {!<=-1,!>=2}
Line 295
  != always {!<=-1,!>=2}
Line 296
  & {lifetime[Address]=(tokenizer),!0}
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 299
  false always 0
  false always 0
  false always 0
  true always 1
  false always 0
  nullptr always 0
  nullptr always 0
Line 304
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 305
  code possible {"void foo() { for (auto operator new : int); }"@77,"void foo() { for (a operator== :) }"@78,"{\n   a(\n}\n{\n   b());\n}\n"@187,"void f() {\n   int x = 3) + 0;\n}\n"@188,"void f() {\n   int x = (3] + 0;\n}\n"@189,"void f() {\n   {\n}\n"@190}
Line 307
  ( always {!<=-1,!>=2}
  file inconclusive {"cppcheck-2.8/test/testgarbage.cpp"@77,"cppcheck-2.8/test/testgarbage.cpp"@78,"cppcheck-2.8/test/testgarbage.cpp"@187,"cppcheck-2.8/test/testgarbage.cpp"@188,"cppcheck-2.8/test/testgarbage.cpp"@189,"cppcheck-2.8/test/testgarbage.cpp"@190}
  line inconclusive {1642@77,1643@78,1058@187,1065@188,1072@189,1079@190}
  "test.cpp" always "test.cpp"
Line 309
  != always {!<=-1,!>=2}
  "syntaxError" always "syntaxError"
Line 310
  "" always ""
Line 311
  "[test.cpp:" always "[test.cpp:"
  "] " always "] "
Line 313
  "" always ""
Line 319
  41 always 41
  = always "class __declspec(dllexport) x final { };"
  "class __declspec(dllexport) x final { };" always "class __declspec(dllexport) x final { };"
Line 321
  "" always ""
Line 322
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 323
  code always "class __declspec(dllexport) x final { };"
Line 324
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  324 always 324
  "test.cpp" always "test.cpp"
Line 325
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  325 always 325
  "" always ""
Line 331
  50 always 50
  = always "TR(kvmpio, PROTO(int rw), ARGS(rw), TP_(aa->rw;))"
  "TR(kvmpio, PROTO(int rw), ARGS(rw), TP_(aa->rw;))" always "TR(kvmpio, PROTO(int rw), ARGS(rw), TP_(aa->rw;))"
Line 332
  code always "TR(kvmpio, PROTO(int rw), ARGS(rw), TP_(aa->rw;))"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  332 always 332
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  332 always 332
  false always 0
Line 333
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  333 always 333
  "" always ""
Line 337
  40 always 40
  = always "struct A { template<int> struct { }; };"
  "struct A { template<int> struct { }; };" always "struct A { template<int> struct { }; };"
Line 338
  code always "struct A { template<int> struct { }; };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  338 always 338
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  338 always 338
  false always 0
Line 342
  38 always 38
  = always "enum ABC { A,B, typedef enum { C } };"
  "enum ABC { A,B, typedef enum { C } };" always "enum ABC { A,B, typedef enum { C } };"
Line 343
  code always "enum ABC { A,B, typedef enum { C } };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  343 always 343
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  343 always 343
  false always 0
Line 348
  113 always 113
  = always "void f() {\n    X<int> x;\n    Y<int, int, int, int, int, char> y;\n}\n\nvoid G( template <typename T> class (j) ) {}"
  "void f() {\n    X<int> x;\n    Y<int, int, int, int, int, char> y;\n}\n\nvoid G( template <typename T> class (j) ) {}" always "void f() {\n    X<int> x;\n    Y<int, int, int, int, int, char> y;\n}\n\nvoid G( template <typename T> class (j) ) {}"
Line 356
  code always "void f() {\n    X<int> x;\n    Y<int, int, int, int, int, char> y;\n}\n\nvoid G( template <typename T> class (j) ) {}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  356 always 356
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  356 always 356
  false always 0
Line 361
  83 always 83
  = always "X #define\n{\n (\n  for(  #endif typedef typedef cb[N] )\n        ca[N]; =  cb[i]\n )\n}"
  "X #define\n{\n (\n  for(  #endif typedef typedef cb[N] )\n        ca[N]; =  cb[i]\n )\n}" always "X #define\n{\n (\n  for(  #endif typedef typedef cb[N] )\n        ca[N]; =  cb[i]\n )\n}"
Line 369
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 370
  code always "X #define\n{\n (\n  for(  #endif typedef typedef cb[N] )\n        ca[N]; =  cb[i]\n )\n}"
Line 372
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  372 always 372
  "test.cpp" always "test.cpp"
Line 373
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  373 always 373
Line 375
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  375 always 375
  "syntax error" always "syntax error"
Line 376
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  376 always 376
  "syntaxError" always "syntaxError"
Line 377
  ! always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  377 always 377
  4 always 4
Line 382
  37 always 37
  = always "typedef void (x) (int);    return x&"
  "typedef void (x) (int);    return x&" always "typedef void (x) (int);    return x&"
Line 384
  code always "typedef void (x) (int);    return x&"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  384 always 384
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  384 always 384
  false always 0
Line 389
  "void f() { if MACRO(); }" always "void f() { if MACRO(); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  389 always 389
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  389 always 389
  false always 0
Line 392
  "void f() { if (x) MACRO() {} }" always "void f() { if (x) MACRO() {} }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  392 always 392
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  392 always 392
  false always 0
Line 395
  "void f() { if (x) MACRO() else ; }" always "void f() { if (x) MACRO() else ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  395 always 395
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  395 always 395
  false always 0
Line 400
  15 always 15
  = always "class x y { };"
  "class x y { };" always "class x y { };"
Line 403
  "" always ""
Line 404
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 405
  code always "class x y { };"
Line 406
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  406 always 406
  "test.c" always "test.c"
Line 407
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  407 always 407
  "" always ""
Line 410
  "" always ""
Line 411
  & {lifetime[Address]=(settings),!0}
  this always !0
Line 412
  code always "class x y { };"
Line 413
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  413 always 413
  "test.cpp" always "test.cpp"
Line 414
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  414 always 414
  "[test.cpp:1]: (information) The code 'class x y {' is not handled. You can use -I or --include to add handling of this code.\n" always "[test.cpp:1]: (information) The code 'class x y {' is not handled. You can use -I or --include to add handling of this code.\n"
Line 419
  "struct { int x; } = {0};" always "struct { int x; } = {0};"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  419 always 419
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  419 always 419
  false always 0
Line 420
  "struct { int x; } * = {0};" always "struct { int x; } * = {0};"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  420 always 420
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  420 always 420
  false always 0
Line 424
  "void f() {switch (n) { case: z(); break;}}" always "void f() {switch (n) { case: z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  424 always 424
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  424 always 424
  false always 0
Line 426
  "void f() {switch (n) { case;: z(); break;}}" always "void f() {switch (n) { case;: z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  426 always 426
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  426 always 426
  false always 0
Line 428
  "void f() {switch (n) { case {}: z(); break;}}" always "void f() {switch (n) { case {}: z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  428 always 428
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  428 always 428
  false always 0
Line 430
  "void f() {switch (n) { case 0?{1}:{2} : z(); break;}}" always "void f() {switch (n) { case 0?{1}:{2} : z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  430 always 430
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  430 always 430
  false always 0
Line 432
  "void f() {switch (n) { case 0?1;:{2} : z(); break;}}" always "void f() {switch (n) { case 0?1;:{2} : z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  432 always 432
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  432 always 432
  false always 0
Line 434
  "void f() {switch (n) { case 0?(1?{3:4}):2 : z(); break;}}" always "void f() {switch (n) { case 0?(1?{3:4}):2 : z(); break;}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  434 always 434
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  434 always 434
  false always 0
Line 437
  "( ) { switch break ; { switch ( x ) { case } y break ; : } }" always "( ) { switch break ; { switch ( x ) { case } y break ; : } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  437 always 437
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  437 always 437
  false always 0
Line 440
  "f ( ) { switch break; { switch ( x ) { case } case break; -6: ( ) ; } }" always "f ( ) { switch break; { switch ( x ) { case } case break; -6: ( ) ; } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  440 always 440
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  440 always 440
  false always 0
Line 443
  "void foo () { switch(0) case 0 : default : }" always "void foo () { switch(0) case 0 : default : }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  443 always 443
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  443 always 443
  false always 0
Line 447
  "struct x foo_t; foo_t typedef y;" always "struct x foo_t; foo_t typedef y;"
Line 451
  "enum { D = 1  struct  { } ; }  s.b = D;" always "enum { D = 1  struct  { } ; }  s.b = D;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  451 always 451
  false always 0
Line 455
  "enum {  D = 2 s ; struct y  { x } ; } { s.a = C ; s.b = D ; }" always "enum {  D = 2 s ; struct y  { x } ; } { s.a = C ; s.b = D ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  455 always 455
  false always 0
Line 459
  "void f ( ) { = a ; if ( 1 ) if = ( 0 ) ; }" always "void f ( ) { = a ; if ( 1 ) if = ( 0 ) ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  459 always 459
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  459 always 459
  false always 0
Line 463
  "( asm : ; void : );" always "( asm : ; void : );"
Line 467
  "int b = ( 0 ? ? ) 1 : 0 ;" always "int b = ( 0 ? ? ) 1 : 0 ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  467 always 467
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  467 always 467
  false always 0
Line 468
  "int a = int b = ( 0 ? ? ) 1 : 0 ;" always "int a = int b = ( 0 ? ? ) 1 : 0 ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  468 always 468
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  468 always 468
  false always 0
Line 472
  "1 (int j) { return return (c) * sizeof } y[1];" always "1 (int j) { return return (c) * sizeof } y[1];"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  472 always 472
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  472 always 472
  false always 0
Line 473
  "foo(Args&&...) fn void = { } auto template<typename... bar(Args&&...)" always "foo(Args&&...) fn void = { } auto template<typename... bar(Args&&...)"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  473 always 473
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  473 always 473
  false always 0
Line 477
  "{ enum struct : };" always "{ enum struct : };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  477 always 477
  false always 0
Line 478
  "int ScopedEnum{ template<typename T> { { e = T::error }; };\nScopedEnum1<int> se1; { enum class E : T { e = 0 = e ScopedEnum2<void*> struct UnscopedEnum3 { T{ e = 4 }; };\narr[(int) E::e]; }; UnscopedEnum3<int> e2 = f()\n{ { e = e1; T::error } int test1 ue2; g() { enum class E { e = T::error }; return E::e; } int test2 = }\nnamespace UnscopedEnum { template<typename T> struct UnscopedEnum1 { E{ e = T::error }; }; UnscopedEnum1<int> { enum E : { e = 0 }; };\nUnscopedEnum2<void*> ue3; template<typename T> struct UnscopedEnum3 { enum { }; }; int arr[E::e]; };\nUnscopedEnum3<int> namespace template<typename T> int f() { enum E { e }; T::error }; return (int) E(); } int test1 int g() { enum E { e = E };\nE::e; } int test2 = g<int>(); }" always "int ScopedEnum{ template<typename T> { { e = T::error }; };\nScopedEnum1<int> se1; { enum class E : T { e = 0 = e ScopedEnum2<void*> struct UnscopedEnum3 { T{ e = 4 }; };\narr[(int) E::e]; }; UnscopedEnum3<int> e2 = f()\n{ { e = e1; T::error } int test1 ue2; g() { enum class E { e = T::error }; return E::e; } int test2 = }\nnamespace UnscopedEnum { template<typename T> struct UnscopedEnum1 { E{ e = T::error }; }; UnscopedEnum1<int> { enum E : { e = 0 }; };\nUnscopedEnum2<void*> ue3; template<typename T> struct UnscopedEnum3 { enum { }; }; int arr[E::e]; };\nUnscopedEnum3<int> namespace template<typename T> int f() { enum E { e }; T::error }; return (int) E(); } int test1 int g() { enum E { e = E };\nE::e; } int test2 = g<int>(); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  478 always 478
  false always 0
Line 489
  "enum { e = { } } ( ) { { enum { } } } { e } " always "enum { e = { } } ( ) { { enum { } } } { e } "
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  489 always 489
  false always 0
Line 493
  "for( rl=reslist; rl!=NULL; rl=rl->next )" always "for( rl=reslist; rl!=NULL; rl=rl->next )"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  493 always 493
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  493 always 493
  false always 0
Line 497
  "{ g; S (void) { struct } { } int &g; }" always "{ g; S (void) { struct } { } int &g; }"
Line 501
  "struct C {} {} x" always "struct C {} {} x"
Line 505
  "int f ( int* r ) { {  int s[2] ; f ( s ) ; if ( ) } }" always "int f ( int* r ) { {  int s[2] ; f ( s ) ; if ( ) } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  505 always 505
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  505 always 505
  false always 0
Line 509
  "{ } A() { delete }" always "{ } A() { delete }"
Line 513
  "void h(int l) {\n    while\n}" always "void h(int l) {\n    while\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  513 always 513
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  513 always 513
  false always 0
Line 519
  "switch(){case}" always "switch(){case}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  519 always 519
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  519 always 519
  false always 0
Line 524
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  524 always 524
  "void f ( 0 * ) ;" always "void f ( 0 * ) ;"
  "void f ( 0 * ) ;" always "void f ( 0 * ) ;"
Line 529
  "void f()\n{\n  (\n    x;\n    int a, a2, a2*x; if () ;\n  )\n}" always "void f()\n{\n  (\n    x;\n    int a, a2, a2*x; if () ;\n  )\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  529 always 529
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  529 always 529
  false always 0
Line 540
  "int f()\n{\n    return if\n}" always "int f()\n{\n    return if\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  540 always 540
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  540 always 540
  false always 0
Line 548
  "{\n    if (1) = x\n    else abort s[2]\n}" always "{\n    if (1) = x\n    else abort s[2]\n}"
Line 552
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  552 always 552
  "" always ""
Line 557
  "float buffer[64];\nmain (void)\n{\n  char *cptr;\n  cptr = (char *)buffer;\n  cptr += (-(long int) buffer & (16 * sizeof (float) - 1));\n}\n" always "float buffer[64];\nmain (void)\n{\n  char *cptr;\n  cptr = (char *)buffer;\n  cptr += (-(long int) buffer & (16 * sizeof (float) - 1));\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  557 always 557
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  557 always 557
  false always 0
Line 568
  "void f() {\n    switch ( x ) {\n        case struct Tree : break;\n    }\n}" always "void f() {\n    switch ( x ) {\n        case struct Tree : break;\n    }\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  568 always 568
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  568 always 568
  false always 0
Line 577
  "void f() {\n    switch MAKEWORD(1)\n    {\n    case 0:\n        return;\n    }\n}" always "void f() {\n    switch MAKEWORD(1)\n    {\n    case 0:\n        return;\n    }\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  577 always 577
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  577 always 577
  false always 0
Line 587
  "int f() {\n    return if\n}" always "int f() {\n    return if\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  587 always 587
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  587 always 587
  false always 0
Line 594
  "struct R1 {\n  int a;\n  R1 () : a { }\n};" always "struct R1 {\n  int a;\n  R1 () : a { }\n};"
Line 602
  "void f(int x) {\n x = 42\n}" always "void f(int x) {\n x = 42\n}"
Line 608
  "typedef struct{}x[([],)]typedef e y;(y,x 0){}" always "typedef struct{}x[([],)]typedef e y;(y,x 0){}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  608 always 608
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  608 always 608
  false always 0
Line 612
  "main(()B{});" always "main(()B{});"
Line 617
  35 always 35
  = always "void foo(void) {\n do\n while (0);\n}"
  "void foo(void) {\n do\n while (0);\n}" always "void foo(void) {\n do\n while (0);\n}"
Line 621
  code always "void foo(void) {\n do\n while (0);\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  621 always 621
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  621 always 621
  false always 0
Line 626
  "sizeof <= A" always "sizeof <= A"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  626 always 626
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  626 always 626
  false always 0
Line 630
  "{ } < class template < > , { = } ; class... >\nstruct Y { }\nclass Types { }\n( X < int > \"uses template\" ) ( < ( ) \"uses ;( int int ::primary \"uses template\" ) int double \"uses )::primary , \"uses template\" ;\n" always "{ } < class template < > , { = } ; class... >\nstruct Y { }\nclass Types { }\n( X < int > \"uses template\" ) ( < ( ) \"uses ;( int int ::primary \"uses template\" ) int double \"uses )::primary , \"uses template\" ;\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  630 always 630
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  630 always 630
  false always 0
Line 640
  "void * f { } void b ( ) { * f }" always "void * f { } void b ( ) { * f }"
Line 644
  "{ f2 { } } void f3 () { delete[] } { }" always "{ f2 { } } void f3 () { delete[] } { }"
Line 648
  "{ ( ) () { virtual } ; { } E } A { : { } ( ) } * const ( ) const { }" always "{ ( ) () { virtual } ; { } E } A { : { } ( ) } * const ( ) const { }"
Line 653
  " { } { return } *malloc(__SIZE_TYPE__ size); *memcpy(void n); static * const () { memcpy (*slot, 3); } { (); } { }" always " { } { return } *malloc(__SIZE_TYPE__ size); *memcpy(void n); static * const () { memcpy (*slot, 3); } { (); } { }"
Line 657
  "{  } * const ( ) { }" always "{  } * const ( ) { }"
Line 661
  "int { }; struct A<void> a = { }" always "int { }; struct A<void> a = { }"
Line 665
  "{ { }; }; { class A : }; public typedef b;" always "{ { }; }; { class A : }; public typedef b;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  665 always 665
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  665 always 665
  false always 0
Line 669
  "struct true template < > { = } > struct Types \"s\" ; static_assert < int > ;" always "struct true template < > { = } > struct Types \"s\" ; static_assert < int > ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  669 always 669
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  669 always 669
  false always 0
Line 673
  " { bar(char *x); void foo (int ...) { struct } va_list ap; va_start(ap, size); va_arg(ap, (d)); }" always " { bar(char *x); void foo (int ...) { struct } va_list ap; va_start(ap, size); va_arg(ap, (d)); }"
Line 677
  " { { }; }; * new private: B: B;" always " { { }; }; * new private: B: B;"
Line 681
  " { d\" ) d ...\" } int main ( ) { ( ) catch ( A a ) { { } catch ( ) \"\" } }" always " { d\" ) d ...\" } int main ( ) { ( ) catch ( A a ) { { } catch ( ) \"\" } }"
Line 685
  " ( ( ) ) { } ( { ( __builtin_va_arg_pack ( ) ) ; } ) { ( int { ( ) ( ( ) ) } ( ) { } ( ) ) += ( ) }" always " ( ( ) ) { } ( { ( __builtin_va_arg_pack ( ) ) ; } ) { ( int { ( ) ( ( ) ) } ( ) { } ( ) ) += ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  685 always 685
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  685 always 685
  false always 0
Line 689
  " (const \"C\" ...); struct base { int f2; base (int arg1, int arg2); }; global_base(0x55, 0xff); { ((global_base.f1 0x55) (global_base.f2 0xff)) { } } base::base(int arg1, int arg2) { f2 = }" always " (const \"C\" ...); struct base { int f2; base (int arg1, int arg2); }; global_base(0x55, 0xff); { ((global_base.f1 0x55) (global_base.f2 0xff)) { } } base::base(int arg1, int arg2) { f2 = }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  689 always 689
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  689 always 689
  false always 0
Line 693
  "{ { } }; void foo (struct int i) { x->b[i] = = }" always "{ { } }; void foo (struct int i) { x->b[i] = = }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  693 always 693
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  693 always 693
  false always 0
Line 697
  "{ typedef long ((pf) p) (); }" always "{ typedef long ((pf) p) (); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  697 always 697
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  697 always 697
  false always 0
Line 701
  "() __attribute__((constructor)); { } { }" always "() __attribute__((constructor)); { } { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  701 always 701
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  701 always 701
  false always 0
Line 705
  "void foo() { int a = 0; int b = ???; }" always "void foo() { int a = 0; int b = ???; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  705 always 705
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  705 always 705
  false always 0
Line 709
  "{ } if () try { } catch (...) B::~B { }" always "{ } if () try { } catch (...) B::~B { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  709 always 709
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  709 always 709
  false always 0
Line 713
  "{ }> {= ~A()^{} }P { }" always "{ }> {= ~A()^{} }P { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  713 always 713
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  713 always 713
  false always 0
Line 714
  "{= ~A()^{} }P { } { }> is" always "{= ~A()^{} }P { } { }> is"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  714 always 714
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  714 always 714
  false always 0
Line 718
  "{ { } }; char font8x8[256][8]" always "{ { } }; char font8x8[256][8]"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  718 always 718
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  718 always 718
  false always 0
Line 722
  "{ } { } typedef int int_array[]; int_array &right =" always "{ } { } typedef int int_array[]; int_array &right ="
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  722 always 722
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  722 always 722
  false always 0
Line 726
  "{ (const U&) }; { }; { }; struct U : virtual public" always "{ (const U&) }; { }; { }; struct U : virtual public"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  726 always 726
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  726 always 726
  false always 0
Line 730
  "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref u_array_ref_gbl_obj0" always "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref u_array_ref_gbl_obj0"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  730 always 730
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  730 always 730
  false always 0
Line 734
  "{ } foo(void (*bar)(void))" always "{ } foo(void (*bar)(void))"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  734 always 734
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  734 always 734
  false always 0
Line 738
  "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref" always "{ } { } typedef int u_array[]; typedef u_array &u_array_ref; (u_array_ref arg) { } u_array_ref"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  738 always 738
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  738 always 738
  false always 0
Line 742
  "{ { } }; { { } }; { }; class bar : public virtual" always "{ { } }; { { } }; { }; class bar : public virtual"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  742 always 742
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  742 always 742
  false always 0
Line 746
  "(int a[3]); typedef void (*fp) (void); fp" always "(int a[3]); typedef void (*fp) (void); fp"
Line 750
  "{ (make_mess, aux); } typedef void F(void); aux(void (*x)()) { } (void (*y)()) { } F*" always "{ (make_mess, aux); } typedef void F(void); aux(void (*x)()) { } (void (*y)()) { } F*"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  750 always 750
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  750 always 750
  false always 0
Line 754
  "{ } __attribute__((constructor)) void" always "{ } __attribute__((constructor)) void"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  754 always 754
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  754 always 754
  false always 0
Line 758
  "( ) { } typedef void noattr_t ( ) ; noattr_t __attribute__ ( )" always "( ) { } typedef void noattr_t ( ) ; noattr_t __attribute__ ( )"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  758 always 758
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  758 always 758
  false always 0
Line 762
  "{ } { } typedef void voidfn(void); <voidfn&" always "{ } { } typedef void voidfn(void); <voidfn&"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  762 always 762
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  762 always 762
  false always 0
Line 766
  "typedef int IRT[2]; IRT&" always "typedef int IRT[2]; IRT&"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  766 always 766
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  766 always 766
  false always 0
Line 770
  "_lenraw(const char* digits) { } typedef decltype(sizeof(0)) { } operator" always "_lenraw(const char* digits) { } typedef decltype(sizeof(0)) { } operator"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  770 always 770
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  770 always 770
  false always 0
Line 774
  " ( ) ( ) { ( ) [ ] } TEST ( ) { ( _broadcast_f32x4 ) ( ) ( ) ( ) ( ) if ( ) ( ) ; } E mask = ( ) [ ] ( ) res1.x =" always " ( ) ( ) { ( ) [ ] } TEST ( ) { ( _broadcast_f32x4 ) ( ) ( ) ( ) ( ) if ( ) ( ) ; } E mask = ( ) [ ] ( ) res1.x ="
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  774 always 774
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  774 always 774
  false always 0
Line 778
  "void foo (int **p) { { { };>= } } unsigned *d = (b b--) --*d" always "void foo (int **p) { { { };>= } } unsigned *d = (b b--) --*d"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  778 always 778
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  778 always 778
  false always 0
Line 782
  "( ) { [ ] } ( ) { } const_array_of_int ( ) { } typedef int A [ ] [ ] ; A a = { { } { } }" always "( ) { [ ] } ( ) { } const_array_of_int ( ) { } typedef int A [ ] [ ] ; A a = { { } { } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  782 always 782
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  782 always 782
  false always 0
Line 786
  "{ } { } typedef void ( func_type ) ( ) ; func_type & ( )" always "{ } { } typedef void ( func_type ) ( ) ; func_type & ( )"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  786 always 786
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  786 always 786
  false always 0
Line 790
  "( ) { ; ( ) ; ( * ) [ ] ; [ ] = ( ( ) ( ) h ) ! ( ( ) ) } { ; } { } head heads [ ] = ; = & heads [ 2 ]" always "( ) { ; ( ) ; ( * ) [ ] ; [ ] = ( ( ) ( ) h ) ! ( ( ) ) } { ; } { } head heads [ ] = ; = & heads [ 2 ]"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  790 always 790
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  790 always 790
  false always 0
Line 794
  "{ } [ ] { ( ) } { } typedef void ( *fptr1 ) ( ) const" always "{ } [ ] { ( ) } { } typedef void ( *fptr1 ) ( ) const"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  794 always 794
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  794 always 794
  false always 0
Line 798
  "p(\"Hello \" 14) _yn(const size_t) typedef bool pfunk (*pfunk)(const size_t)" always "p(\"Hello \" 14) _yn(const size_t) typedef bool pfunk (*pfunk)(const size_t)"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  798 always 798
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  798 always 798
  false always 0
Line 802
  "namespace A { class } class A { friend C ; } { } ;" always "namespace A { class } class A { friend C ; } { } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  802 always 802
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  802 always 802
  false always 0
Line 806
  "int main ( [ ] ) {  [ ] ; int i = 0 ; do { } ; } ( [ ] ) { }" always "int main ( [ ] ) {  [ ] ; int i = 0 ; do { } ; } ( [ ] ) { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  806 always 806
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  806 always 806
  false always 0
Line 810
  "{ } { } typedef void ( *VoidFunc() ) ( ) ; VoidFunc" always "{ } { } typedef void ( *VoidFunc() ) ( ) ; VoidFunc"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  810 always 810
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  810 always 810
  false always 0
Line 814
  "{ } typedef char ( *( X ) ( void) , char ) ;" always "{ } typedef char ( *( X ) ( void) , char ) ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  814 always 814
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  814 always 814
  false always 0
Line 818
  "((X (128))) (int a) { v[ = {} (x 42) a] += }" always "((X (128))) (int a) { v[ = {} (x 42) a] += }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  818 always 818
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  818 always 818
  false always 0
Line 822
  "( ) { ( 0 ) { ( ) } } g ( ) { i( ( false ?) ( ) : 1 ) ; } ;" always "( ) { ( 0 ) { ( ) } } g ( ) { i( ( false ?) ( ) : 1 ) ; } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  822 always 822
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  822 always 822
  false always 0
Line 826
  "{ } { } typedef int u_array [[ ] ; typedef u_array & u_array_ref] ( ) { } u_array_ref_gbl_obj0" always "{ } { } typedef int u_array [[ ] ; typedef u_array & u_array_ref] ( ) { } u_array_ref_gbl_obj0"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  826 always 826
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  826 always 826
  false always 0
Line 830
  "typedef __attribute__((vector_size (16))) { return[ (v2df){ } ;] }" always "typedef __attribute__((vector_size (16))) { return[ (v2df){ } ;] }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  830 always 830
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  830 always 830
  false always 0
Line 834
  "template < typename _Tp ( ( ) ; _Tp ) , decltype > { } { ( ) ( ) }" always "template < typename _Tp ( ( ) ; _Tp ) , decltype > { } { ( ) ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  834 always 834
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  834 always 834
  false always 0
Line 839
  "typedef long __m256i __attribute__ ( ( ( ) ) )[ ; ( ) { } typedef __m256i __attribute__ ( ( ( ) ) ) < ] ( ) { ; }" always "typedef long __m256i __attribute__ ( ( ( ) ) )[ ; ( ) { } typedef __m256i __attribute__ ( ( ( ) ) ) < ] ( ) { ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  839 always 839
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  839 always 839
  false always 0
Line 843
  "{ } x x ; { } h h [ ] ( ) ( ) { struct x ( x ) ; int __attribute__ ( ) f ( ) { h - > first = & x ; struct x * n = h - > first ; ( ) n > } }" always "{ } x x ; { } h h [ ] ( ) ( ) { struct x ( x ) ; int __attribute__ ( ) f ( ) { h - > first = & x ; struct x * n = h - > first ; ( ) n > } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  843 always 843
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  843 always 843
  false always 0
Line 847
  "typedef J J[ ; typedef ( ) ( ) { ; } typedef J J ;] ( ) ( J cx ) { n } ;" always "typedef J J[ ; typedef ( ) ( ) { ; } typedef J J ;] ( ) ( J cx ) { n } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  847 always 847
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  847 always 847
  false always 0
Line 851
  "namespace A {> } class A{ { }} class A : T< ;" always "namespace A {> } class A{ { }} class A : T< ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  851 always 851
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  851 always 851
  false always 0
Line 855
  "for (cocon To::ta@Taaaaaforconst oken aaaaaaaaaaaa5Dl()\nconst unsigned in;\nfon *tok = f);.s(Token i = d-)L;" always "for (cocon To::ta@Taaaaaforconst oken aaaaaaaaaaaa5Dl()\nconst unsigned in;\nfon *tok = f);.s(Token i = d-)L;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  855 always 855
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  855 always 855
  false always 0
Line 861
  "{ xs :: i(:) ! ! x/5 ! !\ni, :: a :: b integer, } foo2(x) :: j(:)\nb type(*), d(:), a x :: end d(..), foo end\nfoo4 b d(..), a a x type(*), b foo2 b" always "{ xs :: i(:) ! ! x/5 ! !\ni, :: a :: b integer, } foo2(x) :: j(:)\nb type(*), d(:), a x :: end d(..), foo end\nfoo4 b d(..), a a x type(*), b foo2 b"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  861 always 861
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  861 always 861
  false always 0
Line 868
  "( ) { ( i< ) } int foo ( ) { int i ; ( for ( i => 1 ) ; ) }" always "( ) { ( i< ) } int foo ( ) { int i ; ( for ( i => 1 ) ; ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  868 always 868
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  868 always 868
  false always 0
Line 873
  "template < class , =( , int) X = 1 > struct A { } ( ) { = } [ { } ] ( ) { A < void > 0 }" always "template < class , =( , int) X = 1 > struct A { } ( ) { = } [ { } ] ( ) { A < void > 0 }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  873 always 873
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  873 always 873
  false always 0
Line 875
  "template < class =( , ) X = 1> struct A {}; A<void> a;" always "template < class =( , ) X = 1> struct A {}; A<void> a;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  875 always 875
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  875 always 875
  false always 0
Line 879
  "struct Object { ( ) ; Object & operator= ( Object ) { ( ) { } if ( this != & b ) } }" always "struct Object { ( ) ; Object & operator= ( Object ) { ( ) { } if ( this != & b ) } }"
Line 883
  "a f(r) int * r; { { int s[2]; [f(s); if () ]  } }" always "a f(r) int * r; { { int s[2]; [f(s); if () ]  } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  883 always 883
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  883 always 883
  false always 0
Line 887
  "template < Types > struct S {> ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) } { ( )> >} { ( ) { } } ( ) { ( ) }" always "template < Types > struct S {> ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) } { ( )> >} { ( ) { } } ( ) { ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  887 always 887
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  887 always 887
  false always 0
Line 891
  "void foo (int i) { int a , for (a 1; a( < 4; a++) if (a) (b b++) (b);) n++; }" always "void foo (int i) { int a , for (a 1; a( < 4; a++) if (a) (b b++) (b);) n++; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  891 always 891
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  891 always 891
  false always 0
Line 895
  "[ ] typedef typedef b_array b_array_ref [ ; ] ( ) b_array_ref b_array_ref_gbl_obj0 { ; { b_array_ref b_array_ref_gbl_obj0 } }" always "[ ] typedef typedef b_array b_array_ref [ ; ] ( ) b_array_ref b_array_ref_gbl_obj0 { ; { b_array_ref b_array_ref_gbl_obj0 } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  895 always 895
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  895 always 895
  false always 0
Line 899
  "enum { val = 1{ }; { const} }; { } Bar { const int A = val const } ;" always "enum { val = 1{ }; { const} }; { } Bar { const int A = val const } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  899 always 899
  false always 0
Line 903
  "A( ) { } bool f( ) { ( ) F; ( ) { ( == ) if ( !=< || ( !A( ) && r[2] ) ) ( !A( ) ) ( ) } }" always "A( ) { } bool f( ) { ( ) F; ( ) { ( == ) if ( !=< || ( !A( ) && r[2] ) ) ( !A( ) ) ( ) } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  903 always 903
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  903 always 903
  false always 0
Line 907
  "( *const<> (( ) ) { } ( *const ( ) ( ) ) { } ( * const<> ( size_t )) ) { } ( * const ( ) ( ) ) { }" always "( *const<> (( ) ) { } ( *const ( ) ( ) ) { } ( * const<> ( size_t )) ) { } ( * const ( ) ( ) ) { }"
Line 911
  "( *const<> ( size_t ) ; foo ) { } * ( *const ( size_t ) ( ) ;> foo )< { }" always "( *const<> ( size_t ) ; foo ) { } * ( *const ( size_t ) ( ) ;> foo )< { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  911 always 911
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  911 always 911
  false always 0
Line 915
  "enum { FOO = 1( ,) } {{ FOO }} ;" always "enum { FOO = 1( ,) } {{ FOO }} ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  915 always 915
  false always 0
Line 919
  "enum { FOO = ( , ) } {{ }}>> enum { FOO< = ( ) } { { } } ;" always "enum { FOO = ( , ) } {{ }}>> enum { FOO< = ( ) } { { } } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  919 always 919
  false always 0
Line 923
  "Q_GLOBAL_STATIC_WITH_INITIALIZER(Qt4NodeStaticData, qt4NodeStaticData, {\n    for (unsigned i = 0 ; i < count; i++) {\n    }\n});" always "Q_GLOBAL_STATIC_WITH_INITIALIZER(Qt4NodeStaticData, qt4NodeStaticData, {\n    for (unsigned i = 0 ; i < count; i++) {\n    }\n});"
Line 930
  "A template < int { int = -1 ; } template < int N > struct B { int [ A < N > :: zero ] ;  } ; B < 0 > b ;" always "A template < int { int = -1 ; } template < int N > struct B { int [ A < N > :: zero ] ;  } ; B < 0 > b ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  930 always 930
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  930 always 930
  false always 0
Line 934
  "struct template<int { = }; > struct B { }; B < 0 > b;" always "struct template<int { = }; > struct B { }; B < 0 > b;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  934 always 934
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  934 always 934
  false always 0
Line 938
  "enum E { f = {} };\nint a = f;" always "enum E { f = {} };\nint a = f;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  938 always 938
  false always 0
Line 943
  "enum {\n    NUM_OPCODES =\n};\nstruct bytecode {};\njv jq_next() { opcode = ((opcode) +NUM_OPCODES);\n}" always "enum {\n    NUM_OPCODES =\n};\nstruct bytecode {};\njv jq_next() { opcode = ((opcode) +NUM_OPCODES);\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  943 always 943
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  943 always 943
  false always 0
Line 953
  "{ { void foo() { struct }; template <typename> struct S { Used x; void bar() } auto f = [this] { }; } };" always "{ { void foo() { struct }; template <typename> struct S { Used x; void bar() } auto f = [this] { }; } };"
Line 957
  "int main() {\n   return 0\n}" always "int main() {\n   return 0\n}"
Line 960
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  960 always 960
  "" always ""
Line 964
  "abcdef??<123456??>+??=" always "abcdef??<123456??>+??="
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  964 always 964
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  964 always 964
  false always 0
Line 970
  "void foo() {\nchar *a = malloc(10);\na[0]\n}" always "void foo() {\nchar *a = malloc(10);\na[0]\n}"
Line 977
  "namespace pr16989 {\n    class C {\n        C tpl_mem(T *) { return }\n    };\n}" always "namespace pr16989 {\n    class C {\n        C tpl_mem(T *) { return }\n    };\n}"
Line 985
  "{ T struct B : T valueA_AA ; } T : [ T > ( ) { B } template < T > struct A < > : ] { ( ) { return valueA_AC struct { : } } b A < int > AC ( ) a_aa.M ; ( ) ( ) }" always "{ T struct B : T valueA_AA ; } T : [ T > ( ) { B } template < T > struct A < > : ] { ( ) { return valueA_AC struct { : } } b A < int > AC ( ) a_aa.M ; ( ) ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  985 always 985
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  985 always 985
  false always 0
Line 986
  "template < Types > struct S :{ ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) }" always "template < Types > struct S :{ ( S < ) S >} { ( ) { } } ( ) { return S < void > ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  986 always 986
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  986 always 986
  false always 0
Line 991
  "{ } float __ieee754_sinhf ( float x ) { float t , , do { gf_u ( jx ) { } ( 0 ) return ; ( ) { } t } ( 0x42b17180 ) { } }" always "{ } float __ieee754_sinhf ( float x ) { float t , , do { gf_u ( jx ) { } ( 0 ) return ; ( ) { } t } ( 0x42b17180 ) { } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  991 always 991
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  991 always 991
  false always 0
Line 996
  "extern \"C\" int printf(const char* fmt, ...);\nclass A {\npublic:\n  int Var;\n  A(int arg) { Var = arg; }\n  ~A() { printf(\"A d'tor\\n\"); }\n};\n const A& foo(const A& arg) { return arg; }\n foo(A(12)).Var" always "extern \"C\" int printf(const char* fmt, ...);\nclass A {\npublic:\n  int Var;\n  A(int arg) { Var = arg; }\n  ~A() { printf(\"A d'tor\\n\"); }\n};\n const A& foo(const A& arg) { return arg; }\n foo(A(12)).Var"
Line 1008
  "enum { FOO = ( , ) } {{ }} enum {{ FOO << = } ( ) } {{ }} ;" always "enum { FOO = ( , ) } {{ }} enum {{ FOO << = } ( ) } {{ }} ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1008 always 1008
  false always 0
Line 1013
  "operator - ( { } typedef typename x ; ( ) ) { ( { { ( ( ) ) } ( { } ) } ) }" always "operator - ( { } typedef typename x ; ( ) ) { ( { { ( ( ) ) } ( { } ) } ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1013 always 1013
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1013 always 1013
  false always 0
Line 1018
  "enum { FOO = ( , ){ } { { } } { { FOO} = } ( ) } { { } } enumL\" ( enumL\" { { FOO } ( ) } { { } } ;" always "enum { FOO = ( , ){ } { { } } { { FOO} = } ( ) } { { } } enumL\" ( enumL\" { { FOO } ( ) } { { } } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1018 always 1018
  false always 0
Line 1023
  "( void ) { ( ) } ( ) / { ( ) }" always "( void ) { ( ) } ( ) / { ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1023 always 1023
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1023 always 1023
  false always 0
Line 1028
  "() () { } { () () ({}) i() } void i(void(*ptr) ()) { ptr(!) () }" always "() () { } { () () ({}) i() } void i(void(*ptr) ()) { ptr(!) () }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1028 always 1028
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1028 always 1028
  false always 0
Line 1032
  "void f() {{}" always "void f() {{}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1032 always 1032
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1032 always 1032
  false always 0
Line 1034
  "void f()) {}" always "void f()) {}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1034 always 1034
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1034 always 1034
  false always 0
Line 1036
  "void f()\n{\n foo(;\n}\n" always "void f()\n{\n foo(;\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1036 always 1036
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1036 always 1036
  false always 0
Line 1041
  "void f()\n{\n for(;;){ foo();\n}\n" always "void f()\n{\n for(;;){ foo();\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1041 always 1041
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1041 always 1041
  false always 0
Line 1046
  "void f()\n{\n a[10;\n}\n" always "void f()\n{\n a[10;\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1046 always 1046
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1046 always 1046
  false always 0
Line 1052
  24 always 24
  = always "{\n   a(\n}\n{\n   b());\n}\n"
  "{\n   a(\n}\n{\n   b());\n}\n" always "{\n   a(\n}\n{\n   b());\n}\n"
Line 1058
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1058 always 1058
  "[test.cpp:2] Unmatched '('. Configuration: ''." always "[test.cpp:2] Unmatched '('. Configuration: ''."
  code always "{\n   a(\n}\n{\n   b());\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1058 always 1058
Line 1062
  33 always 33
  = always "void f() {\n   int x = 3) + 0;\n}\n"
  "void f() {\n   int x = 3) + 0;\n}\n" always "void f() {\n   int x = 3) + 0;\n}\n"
Line 1065
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1065 always 1065
  "[test.cpp:2] Unmatched ')'. Configuration: ''." always "[test.cpp:2] Unmatched ')'. Configuration: ''."
  code always "void f() {\n   int x = 3) + 0;\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1065 always 1065
Line 1069
  34 always 34
  = always "void f() {\n   int x = (3] + 0;\n}\n"
  "void f() {\n   int x = (3] + 0;\n}\n" always "void f() {\n   int x = (3] + 0;\n}\n"
Line 1072
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1072 always 1072
  "[test.cpp:2] Unmatched ']'. Configuration: ''." always "[test.cpp:2] Unmatched ']'. Configuration: ''."
  code always "void f() {\n   int x = (3] + 0;\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1072 always 1072
Line 1076
  19 always 19
  = always "void f() {\n   {\n}\n"
  "void f() {\n   {\n}\n" always "void f() {\n   {\n}\n"
Line 1079
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1079 always 1079
  "[test.cpp:1] Unmatched '{'. Configuration: ''." always "[test.cpp:1] Unmatched '{'. Configuration: ''."
  code always "void f() {\n   {\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1079 always 1079
Line 1085
  "foo() template<typename T1 = T2 = typename = unused, T5 = = unused> struct tuple Args> tuple<Args...> { } main() { foo<int,int,int,int,int,int>(); }" always "foo() template<typename T1 = T2 = typename = unused, T5 = = unused> struct tuple Args> tuple<Args...> { } main() { foo<int,int,int,int,int,int>(); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1085 always 1085
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1085 always 1085
  false always 0
Line 1086
  "( ) template < T1 = typename = unused> struct Args { } main ( ) { foo < int > ( ) ; }" always "( ) template < T1 = typename = unused> struct Args { } main ( ) { foo < int > ( ) ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1086 always 1086
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1086 always 1086
  false always 0
Line 1087
  "() template < T = typename = x > struct a {} { f <int> () }" always "() template < T = typename = x > struct a {} { f <int> () }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1087 always 1087
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1087 always 1087
  false always 0
Line 1088
  "template < T = typename = > struct a { f <int> }" always "template < T = typename = > struct a { f <int> }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1088 always 1088
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1088 always 1088
  false always 0
Line 1089
  "struct S { int i, j; }; template<int S::*p, typename U> struct X {}; X<&S::i, int> x = X<&S::i, int>(); X<&S::j, int> y = X<&S::j, int>();" always "struct S { int i, j; }; template<int S::*p, typename U> struct X {}; X<&S::i, int> x = X<&S::i, int>(); X<&S::j, int> y = X<&S::j, int>();"
Line 1093
  "template <typename T> struct A {}; template <> struct A<void> {}; void foo(const void* f = 0) {}" always "template <typename T> struct A {}; template <> struct A<void> {}; void foo(const void* f = 0) {}"
Line 1096
  "template<typename... T> struct A {   static const int s = 0; }; A<int> a;" always "template<typename... T> struct A {   static const int s = 0; }; A<int> a;"
Line 1100
  "template<class T, class U> class A {}; template<class T = A<int, int> > class B {}; template<class T = B<int> > class C {     C() : _a(0), _b(0) {}     int _a, _b; };" always "template<class T, class U> class A {}; template<class T = A<int, int> > class B {}; template<class T = B<int> > class C {     C() : _a(0), _b(0) {}     int _a, _b; };"
Line 1106
  "template<class... T> struct A {   static int i; }; void f() { A<int>::i = 0; }" always "template<class... T> struct A {   static int i; }; void f() { A<int>::i = 0; }"
Line 1113
  "long f () {\n  return a >> extern\n}\nlong a = 1 ;\nlong b = 2 ;" always "long f () {\n  return a >> extern\n}\nlong a = 1 ;\nlong b = 2 ;"
Line 1121
  "{ } () { void f() { node_t * n; for (; -n) {} } } { }" always "{ } () { void f() { node_t * n; for (; -n) {} } } { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1121 always 1121
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1121 always 1121
  false always 0
Line 1126
  "\" \" typedef signed char f; \" \"; void a() { f * s = () &[]; (; ) (; ) }" always "\" \" typedef signed char f; \" \"; void a() { f * s = () &[]; (; ) (; ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1126 always 1126
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1126 always 1126
  false always 0
Line 1130
  "CS_PLUGIN_NAMESPACE_BEGIN(csparser)\n{\n    struct foo\n    {\n      union\n      {};\n    } halo;\n}\nCS_PLUGIN_NAMESPACE_END(csparser)" always "CS_PLUGIN_NAMESPACE_BEGIN(csparser)\n{\n    struct foo\n    {\n      union\n      {};\n    } halo;\n}\nCS_PLUGIN_NAMESPACE_END(csparser)"
Line 1142
  "void hw_copyarea() {\n   de_ctrl = (nDirection == RIGHT_TO_LEFT) ?\n    ( (0 & ~(((1 << (1 - (0 ? DE_CONTROL_DIRECTION))) - 1) << (0 ? DE_CONTROL_DIRECTION))) )\n    : 42;\n}" always "void hw_copyarea() {\n   de_ctrl = (nDirection == RIGHT_TO_LEFT) ?\n    ( (0 & ~(((1 << (1 - (0 ? DE_CONTROL_DIRECTION))) - 1) << (0 ? DE_CONTROL_DIRECTION))) )\n    : 42;\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1142 always 1142
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1142 always 1142
  false always 0
Line 1150
  "int foo(int align) { int off(= 0 % align;  return off) ? \\ align - off  :  0;  \\ }" always "int foo(int align) { int off(= 0 % align;  return off) ? \\ align - off  :  0;  \\ }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1150 always 1150
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1150 always 1150
  false always 0
Line 1154
  "enum { X = << { X } } enum { X = X } = X ;" always "enum { X = << { X } } enum { X = X } = X ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1154 always 1154
  false always 0
Line 1158
  "{ } (  ) { void mapGraphs ( ) { node_t * n ; for (!oid n ) { } } } { }" always "{ } (  ) { void mapGraphs ( ) { node_t * n ; for (!oid n ) { } } } { }"
Line 1162
  "void neoProgramShadowRegs() {\n    int i;\n    Bool noProgramShadowRegs;\n    if (noProgramShadowRegs) {\n    } else {\n        switch (nPtr->NeoPanelWidth) {\n        case 1280:\n            VGAwCR(0x64,0x?? );\n        }\n    }\n}" always "void neoProgramShadowRegs() {\n    int i;\n    Bool noProgramShadowRegs;\n    if (noProgramShadowRegs) {\n    } else {\n        switch (nPtr->NeoPanelWidth) {\n        case 1280:\n            VGAwCR(0x64,0x?? );\n        }\n    }\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1162 always 1162
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1162 always 1162
  false always 0
Line 1176
  "template < typename > struct A { } ; template < typename > struct A < INVALID > : A < int[ > { }] ;" always "template < typename > struct A { } ; template < typename > struct A < INVALID > : A < int[ > { }] ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1176 always 1176
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1176 always 1176
  false always 0
Line 1180
  "void foo() {\n    ? std::cout << pow((, 1) << std::endl;\n    double <ip = NUO ip) << std::end;\n}" always "void foo() {\n    ? std::cout << pow((, 1) << std::endl;\n    double <ip = NUO ip) << std::end;\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1180 always 1180
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1180 always 1180
  false always 0
Line 1187
  "free(3();\n$  vWrongAllocp1) test1<int, -!>() ^ {\n    int *p<ynew int[n];\n    delete[]p;\n    int *p1 = (int*)malloc(n*sizeof(int));\n    free(p1);\n}\nvoid est2() {\n    for (int ui = 0; ui < 1z; ui++)\n        ;\n}" always "free(3();\n$  vWrongAllocp1) test1<int, -!>() ^ {\n    int *p<ynew int[n];\n    delete[]p;\n    int *p1 = (int*)malloc(n*sizeof(int));\n    free(p1);\n}\nvoid est2() {\n    for (int ui = 0; ui < 1z; ui++)\n        ;\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1187 always 1187
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1187 always 1187
  false always 0
Line 1199
  "; void f ^ { return } int main ( ) { }" always "; void f ^ { return } int main ( ) { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1199 always 1199
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1199 always 1199
  false always 0
Line 1203
  "void f_1() {\n    typedef S0 b[][1][1] != 0\n};\nb[K][0] S0 b[][1][1] != 4{ 0 };\nb[0][0]" always "void f_1() {\n    typedef S0 b[][1][1] != 0\n};\nb[K][0] S0 b[][1][1] != 4{ 0 };\nb[0][0]"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1203 always 1203
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1203 always 1203
  false always 0
Line 1211
  "int main() {\n    for (j = 0; j < 1; j)\n        j6;\n}" always "int main() {\n    for (j = 0; j < 1; j)\n        j6;\n}"
Line 1218
  "class A {\n    pl vFoo() {\n        A::\n    };\n    A::\n}\n" always "class A {\n    pl vFoo() {\n        A::\n    };\n    A::\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1218 always 1218
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1218 always 1218
  false always 0
Line 1227
  "void f() {\n    int a;\n    do { a=do_something() } while (a);\n}" always "void f() {\n    int a;\n    do { a=do_something() } while (a);\n}"
Line 1234
  = always "template <bool foo = std::value &&>\nstatic std::string foo(char *Bla) {\n    while (Bla[1] && Bla[1] != ',') }\n"
  "template <bool foo = std::value &&>\nstatic std::string foo(char *Bla) {\n    while (Bla[1] && Bla[1] != ',') }\n" always "template <bool foo = std::value &&>\nstatic std::string foo(char *Bla) {\n    while (Bla[1] && Bla[1] != ',') }\n"
Line 1237
  code always "template <bool foo = std::value &&>\nstatic std::string foo(char *Bla) {\n    while (Bla[1] && Bla[1] != ',') }\n"
Line 1241
  "enum { X = << { X } } { X X } enum { X = << { ( X ) } } { } X */" always "enum { X = << { X } } { X X } enum { X = << { ( X ) } } { } X */"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1241 always 1241
  false always 0
Line 1245
  "\"abc\"[];" always "\"abc\"[];"
Line 1249
  "struct {}a; d f() { c ? : } {}a.p" always "struct {}a; d f() { c ? : } {}a.p"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1249 always 1249
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1249 always 1249
  false always 0
Line 1253
  "namespace std {\n  template < typename >\n  void swap();\n}template std::swap\n" always "namespace std {\n  template < typename >\n  void swap();\n}template std::swap\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1253 always 1253
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1253 always 1253
  false always 0
Line 1261
  "__FBSDID(\"...\");" always "__FBSDID(\"...\");"
Line 1265
  "({}typedef typename x;typename x!){({{}()})}" always "({}typedef typename x;typename x!){({{}()})}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1265 always 1265
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1265 always 1265
  false always 0
Line 1269
  "f(a,b,c,d)float [  a[],d;int ]  b[],c;{} " always "f(a,b,c,d)float [  a[],d;int ]  b[],c;{} "
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1269 always 1269
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1269 always 1269
  false always 0
Line 1274
  "void f() { x= name2 & name3 name2 = | 0.1 , | 0.1 , | 0.1 name4 <= >( ); }" always "void f() { x= name2 & name3 name2 = | 0.1 , | 0.1 , | 0.1 name4 <= >( ); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1274 always 1274
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1274 always 1274
  false always 0
Line 1275
  "void f() { x = , * [ | + 0xff | > 0xff]; }" always "void f() { x = , * [ | + 0xff | > 0xff]; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1275 always 1275
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1275 always 1275
  false always 0
Line 1276
  "void f() {  x = , | 0xff , 0.1 < ; }" always "void f() {  x = , | 0xff , 0.1 < ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1276 always 1276
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1276 always 1276
  false always 0
Line 1277
  "void f() { x = [ 1 || ] ; }" always "void f() { x = [ 1 || ] ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1277 always 1277
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1277 always 1277
  false always 0
Line 1278
  "void f1() { x = name6 1 || ? name3 [  ( 1 || +) ] ; }" always "void f1() { x = name6 1 || ? name3 [  ( 1 || +) ] ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1278 always 1278
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1278 always 1278
  false always 0
Line 1283
  = always "{} int foo(struct, x1, struct x2, x3, int, x5, x6, x7)\n{\n    (foo(s, , 2, , , 5, , 7)) abort()\n}\n"
  "{} int foo(struct, x1, struct x2, x3, int, x5, x6, x7)\n{\n    (foo(s, , 2, , , 5, , 7)) abort()\n}\n" always "{} int foo(struct, x1, struct x2, x3, int, x5, x6, x7)\n{\n    (foo(s, , 2, , , 5, , 7)) abort()\n}\n"
Line 1287
  code always "{} int foo(struct, x1, struct x2, x3, int, x5, x6, x7)\n{\n    (foo(s, , 2, , , 5, , 7)) abort()\n}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1287 always 1287
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1287 always 1287
  false always 0
Line 1290
  = always "; { int i ; for ( i = 0 ; = 123 ; ) - ; }"
  "; { int i ; for ( i = 0 ; = 123 ; ) - ; }" always "; { int i ; for ( i = 0 ; = 123 ; ) - ; }"
Line 1291
  code always "; { int i ; for ( i = 0 ; = 123 ; ) - ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1291 always 1291
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1291 always 1291
  false always 0
Line 1293
  = always "void f1() { for (int n = 0 n < 10 n++); }"
  "void f1() { for (int n = 0 n < 10 n++); }" always "void f1() { for (int n = 0 n < 10 n++); }"
Line 1294
  code always "void f1() { for (int n = 0 n < 10 n++); }"
Line 1298
  "void f( { u = 1 ; } ) { }" always "void f( { u = 1 ; } ) { }"
Line 1300
  "{ }; void namespace A::f; { g() { int } }" always "{ }; void namespace A::f; { g() { int } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1300 always 1300
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1300 always 1300
  false always 0
Line 1302
  "class Foo {}; class Bar : public Foo" always "class Foo {}; class Bar : public Foo"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1302 always 1302
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1302 always 1302
  false always 0
Line 1304
  "YY_DECL { switch (yy_act) {\n    case 65: YY_BREAK\n    case YY_STATE_EOF(block):\n        yyterminate();\n} }" always "YY_DECL { switch (yy_act) {\n    case 65: YY_BREAK\n    case YY_STATE_EOF(block):\n        yyterminate();\n} }"
Line 1312
  "N 1024 float a[N], b[N + 3], c[N]; void N; (void) i;\nint #define for (i = avx_test i < c[i]; i++)\nb[i + 3] = a[i] * {}" always "N 1024 float a[N], b[N + 3], c[N]; void N; (void) i;\nint #define for (i = avx_test i < c[i]; i++)\nb[i + 3] = a[i] * {}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1312 always 1312
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1312 always 1312
  false always 0
Line 1316
  "START_SECTION([EXTRA](bool isValid(const String &filename)))" always "START_SECTION([EXTRA](bool isValid(const String &filename)))"
Line 1319
  "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { name6 | ; ++}}}}}}}" always "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { name6 | ; ++}}}}}}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1319 always 1319
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1319 always 1319
  false always 0
Line 1321
  "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { { || ; ++}}}}}}}}" always "else return % name5 name2 - =name1 return enum | { - name3 1 enum != >= 1 >= ++ { { || { return return { | { - name3 1 enum != >= 1 >= ++ { { || ; ++}}}}}}}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1321 always 1321
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1321 always 1321
  false always 0
Line 1327
  "struct A {\n  template <class T> operator T*();\n};\n\ntemplate <> A::operator char*(){ return 0; } // specialization\n\nint main() {\n  A a;\n  int *ip = a.operator int*();\n}\n\nnamespace PR5742 {\n  template <class T> struct A { };\n  struct S {\n    template <class T> operator T();\n  } s;\n  void f() {\n    s.operator A<A<int> >();\n  }\n}" always "struct A {\n  template <class T> operator T*();\n};\n\ntemplate <> A::operator char*(){ return 0; } // specialization\n\nint main() {\n  A a;\n  int *ip = a.operator int*();\n}\n\nnamespace PR5742 {\n  template <class T> struct A { };\n  struct S {\n    template <class T> operator T();\n  } s;\n  void f() {\n    s.operator A<A<int> >();\n  }\n}"
Line 1349
  "template<template<typename...> class T, typename... Args>\nstruct foo<T<Args...> > {\n    const bool value = true;\n};\n\ntemplate<int I>\nstruct int_\n{};\n\nint main() {\n  foo<int_<0> >::value;\n}" always "template<template<typename...> class T, typename... Args>\nstruct foo<T<Args...> > {\n    const bool value = true;\n};\n\ntemplate<int I>\nstruct int_\n{};\n\nint main() {\n  foo<int_<0> >::value;\n}"
Line 1363
  "template <typename ...> struct something_like_tuple\n{};\ntemplate <typename, typename> struct is_last {\n  static const bool value = false;\n};\ntemplate <typename T, template <typename ...> class Tuple, typename ... Head>\nstruct is_last<T, Tuple<Head ..., T>>\n{\n  static const bool value = true;\n};\n\n#define SA(X) static_assert (X, #X)\n\ntypedef something_like_tuple<char, int, float> something_like_tuple_t;\nSA ((is_last<float, something_like_tuple_t>::value == false));\nSA ((is_last<int, something_like_tuple_t>::value == false));" always "template <typename ...> struct something_like_tuple\n{};\ntemplate <typename, typename> struct is_last {\n  static const bool value = false;\n};\ntemplate <typename T, template <typename ...> class Tuple, typename ... Head>\nstruct is_last<T, Tuple<Head ..., T>>\n{\n  static const bool value = true;\n};\n\n#define SA(X) static_assert (X, #X)\n\ntypedef something_like_tuple<char, int, float> something_like_tuple_t;\nSA ((is_last<float, something_like_tuple_t>::value == false));\nSA ((is_last<int, something_like_tuple_t>::value == false));"
Line 1381
  "template <typename...>\nvoid templ_fun_with_ty_pack() {}\n\nnamespace PR20047 {\n        template <typename T>\n        struct A {};\n        using AliasA = A<T>;\n}" always "template <typename...>\nvoid templ_fun_with_ty_pack() {}\n\nnamespace PR20047 {\n        template <typename T>\n        struct A {};\n        using AliasA = A<T>;\n}"
Line 1391
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1391 always 1391
  "template < typename T > struct A ;\nstruct B { template < typename T > struct C } ;\n{ } ;" always "template < typename T > struct A ;\nstruct B { template < typename T > struct C } ;\n{ } ;"
  "template<typename T> struct A;\nstruct B { template<typename T> struct C };\n{};" always "template<typename T> struct A;\nstruct B { template<typename T> struct C };\n{};"
Line 1400
  "{ }{ if () try { } catch (...)} B : : ~B { }" always "{ }{ if () try { } catch (...)} B : : ~B { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1400 always 1400
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1400 always 1400
  false always 0
Line 1405
  "return <<  >>  x return <<  >>  x " always "return <<  >>  x return <<  >>  x "
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1405 always 1405
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1405 always 1405
  false always 0
Line 1410
  "typedef s f[](){typedef d h(;f)}" always "typedef s f[](){typedef d h(;f)}"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1410 always 1410
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1410 always 1410
  false always 0
Line 1415
  "class d{k p;}(){d::d():B<()}" always "class d{k p;}(){d::d():B<()}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1415 always 1415
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1415 always 1415
  false always 0
Line 1420
  "for(;..)" always "for(;..)"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1420 always 1420
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1420 always 1420
  false always 0
Line 1425
  "class D00i000{:D00i000::}i" always "class D00i000{:D00i000::}i"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1425 always 1425
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1425 always 1425
  false always 0
Line 1430
  "long foo(void) { return *bar; }" always "long foo(void) { return *bar; }"
  false always 0
Line 1435
  "( ) { ( ) ; { return } switch ( ) i\nset case break ; default: ( ) }" always "( ) { ( ) ; { return } switch ( ) i\nset case break ; default: ( ) }"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1435 always 1435
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1435 always 1435
  false always 0
Line 1441
  "d i(){{f*s=typeid(()0,)}}" always "d i(){{f*s=typeid(()0,)}}"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1441 always 1441
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1441 always 1441
  false always 0
Line 1446
  "(){case()?():}:" always "(){case()?():}:"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1446 always 1446
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1446 always 1446
  false always 0
Line 1451
  "p<e T=l[<]<>>," always "p<e T=l[<]<>>,"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1451 always 1451
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1451 always 1451
  false always 0
Line 1456
  " template < Types > struct S : >( S < ...Types... > S <) > { ( ) { } } ( ) { return S < void > ( ) }" always " template < Types > struct S : >( S < ...Types... > S <) > { ( ) { } } ( ) { return S < void > ( ) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1456 always 1456
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1456 always 1456
  false always 0
Line 1460
  "{r e() { w*constD = (())D = cast< }}" always "{r e() { w*constD = (())D = cast< }}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1460 always 1460
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1460 always 1460
  false always 0
Line 1464
  "int f() {\n  int i , j;\n  for ( i = t3 , i < t1 ; i++ )\n    for ( j = 0 ; j < = j++ )\n        return t1 ,\n}" always "int f() {\n  int i , j;\n  for ( i = t3 , i < t1 ; i++ )\n    for ( j = 0 ; j < = j++ )\n        return t1 ,\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1464 always 1464
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1464 always 1464
  false always 0
Line 1473
  "class t { { struct } enum class f : unsigned { q } b ; operator= ( T ) { switch ( b ) { case f::q: } } { assert ( b ) ; } } { ; & ( t ) ( f::t ) ; } ;" always "class t { { struct } enum class f : unsigned { q } b ; operator= ( T ) { switch ( b ) { case f::q: } } { assert ( b ) ; } } { ; & ( t ) ( f::t ) ; } ;"
Line 1477
  "int test() { int +; }" always "int test() { int +; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1477 always 1477
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1477 always 1477
  false always 0
Line 1482
  "enum { int f ( ) { return = } r = f ( ) ; }" always "enum { int f ( ) { return = } r = f ( ) ; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1482 always 1482
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1482 always 1482
  false always 0
Line 1486
  "= { int } enum return { r = f() f(); }" always "= { int } enum return { r = f() f(); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1486 always 1486
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1486 always 1486
  false always 0
Line 1490
  "unsigned int AquaSalSystem::GetDisplayScreenCount() {\n    NSArray* pScreens = [NSScreen screens];\n    return pScreens ? [pScreens count] : 1;\n}" always "unsigned int AquaSalSystem::GetDisplayScreenCount() {\n    NSArray* pScreens = [NSScreen screens];\n    return pScreens ? [pScreens count] : 1;\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1490 always 1490
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1490 always 1490
  false always 0
Line 1498
  "namespace binfilter\n{\n       BOOL EnhWMFReader::ReadEnhWMF()\n       {\n               pOut->CreateObject( nIndex, GDI_BRUSH, new WinMtfFillStyle( ReadColor(), ( nStyle == BS_HOLLOW ) ? TRUE : FALSE ) );\n               return bStatus;\n       };\n}" always "namespace binfilter\n{\n       BOOL EnhWMFReader::ReadEnhWMF()\n       {\n               pOut->CreateObject( nIndex, GDI_BRUSH, new WinMtfFillStyle( ReadColor(), ( nStyle == BS_HOLLOW ) ? TRUE : FALSE ) );\n               return bStatus;\n       };\n}"
Line 1510
  "A<B<><>C" always "A<B<><>C"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1510 always 1510
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1510 always 1510
  false always 0
Line 1514
  "0| |0>;\n" always "0| |0>;\n"
  8 always 8
Line 1515
  inp always size=8
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1515 always 1515
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1515 always 1515
  false always 0
Line 1517
  "template<class T> struct S : A< B<T> || C<T> > {};" always "template<class T> struct S : A< B<T> || C<T> > {};"
Line 1518
  "static_assert(A<x> || B<x>, ab);" always "static_assert(A<x> || B<x>, ab);"
Line 1522
  "{z r(){(){for(;<(x);){if(0==0)}}}}" always "{z r(){(){for(;<(x);){if(0==0)}}}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1522 always 1522
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1522 always 1522
  false always 0
Line 1526
  "t&n(){()()[](){()}}$" always "t&n(){()()[](){()}}$"
Line 1530
  "void foo() {\n    int i;\n    i *= 0;\n    !i <;\n}" always "void foo() {\n    int i;\n    i *= 0;\n    !i <;\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1530 always 1530
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1530 always 1530
  false always 0
Line 1539
  "struct A { int f(const); };" always "struct A { int f(const); };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1539 always 1539
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1539 always 1539
  false always 0
Line 1540
  "struct A { int f(int, const, char); };" always "struct A { int f(int, const, char); };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1540 always 1540
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1540 always 1540
  false always 0
Line 1541
  "struct A { int f(struct); };" always "struct A { int f(struct); };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1541 always 1541
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1541 always 1541
  false always 0
Line 1544
  "struct A { int f ( char ) ; } ;" always "struct A { int f ( char ) ; } ;"
Line 1548
  "{(()[((0||0xf||))]0[])}" always "{(()[((0||0xf||))]0[])}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1548 always 1548
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1548 always 1548
  false always 0
Line 1553
  "d f(){!=[]&&0()!=0}" always "d f(){!=[]&&0()!=0}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1553 always 1553
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1553 always 1553
  false always 0
Line 1558
  "{((()))(return 1||);}" always "{((()))(return 1||);}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1558 always 1558
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1558 always 1558
  false always 0
Line 1563
  "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}" always "a b;\nvoid c() {\n  switch (d) { case b:; }\n  double e(b);\n  if(e <= 0) {}\n}"
Line 1573
  "0|,0<<V" always "0|,0<<V"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1573 always 1573
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1573 always 1573
  false always 0
Line 1574
  ";|4|<0;" always ";|4|<0;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1574 always 1574
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1574 always 1574
  false always 0
Line 1579
  "(){e break,{(case)|{e:[()]}}}" always "(){e break,{(case)|{e:[()]}}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1579 always 1579
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1579 always 1579
  false always 0
Line 1584
  "void f(){\nx= ={(continue continue { ( struct continue { ( ++ name5 name5 ) ( name5 name5 n\name5 ( name5 struct ( name5 name5 < ) ) ( default ) { name4 != name5 name5 name5\n ( name5 name5 name5 ( { 1 >= void { ( ()) } 1 name3 return >= >= ( ) >= name5 (\n name5 name6 :nam00 [ ()])}))})})})};\n}" always "void f(){\nx= ={(continue continue { ( struct continue { ( ++ name5 name5 ) ( name5 name5 n\name5 ( name5 struct ( name5 name5 < ) ) ( default ) { name4 != name5 name5 name5\n ( name5 name5 name5 ( { 1 >= void { ( ()) } 1 name3 return >= >= ( ) >= name5 (\n name5 name6 :nam00 [ ()])}))})})})};\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1584 always 1584
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1584 always 1584
  false always 0
Line 1594
  "d f(){e n00e0[]n00e0&0+f=0}" always "d f(){e n00e0[]n00e0&0+f=0}"
Line 1599
  "(){e break,{(case)!{e:[]}}}" always "(){e break,{(case)!{e:[]}}}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1599 always 1599
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1599 always 1599
  false always 0
Line 1604
  "void f() { std::string s=\"abc\"; return s + }" always "void f() { std::string s=\"abc\"; return s + }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1604 always 1604
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1604 always 1604
  false always 0
Line 1609
  "void f() { UNKNOWN_MACRO(return); }" always "void f() { UNKNOWN_MACRO(return); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1609 always 1609
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1609 always 1609
  false always 0
Line 1610
  "void f() { UNKNOWN_MACRO(throw); }" always "void f() { UNKNOWN_MACRO(throw); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1610 always 1610
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1610 always 1610
  false always 0
Line 1614
  "{ > () {} }" always "{ > () {} }"
Line 1615
  "template <> a > ::b();" always "template <> a > ::b();"
Line 1619
  "template <a, = b<>()> c; template <a> a as() {} as<c<>>();" always "template <a, = b<>()> c; template <a> a as() {} as<c<>>();"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1619 always 1619
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1619 always 1619
  false always 0
Line 1623
  "class CodeSnippetsEvent : public wxCommandEvent {\npublic :\n    CodeSnippetsEvent ( wxEventType commandType =  wxEventType , int id = 0 ) ;\n    CodeSnippetsEvent ( const CodeSnippetsEvent & event ) ;\nvirtual wxEvent * Clone ( ) const { return new CodeSnippetsEvent ( * this ) ; }\nprivate :\n    int m_SnippetID ;\n} ;\nconst  wxEventType wxEVT_CODESNIPPETS_GETFILELINKS  =  wxNewEventType  (  )\nCodeSnippetsEvent :: CodeSnippetsEvent ( wxEventType commandType , int id )\n: wxCommandEvent ( commandType , id ) {\n}\nCodeSnippetsEvent :: CodeSnippetsEvent ( const CodeSnippetsEvent & Event )\n: wxCommandEvent ( Event )\n, m_SnippetID ( 0 ) {\n}" always "class CodeSnippetsEvent : public wxCommandEvent {\npublic :\n    CodeSnippetsEvent ( wxEventType commandType =  wxEventType , int id = 0 ) ;\n    CodeSnippetsEvent ( const CodeSnippetsEvent & event ) ;\nvirtual wxEvent * Clone ( ) const { return new CodeSnippetsEvent ( * this ) ; }\nprivate :\n    int m_SnippetID ;\n} ;\nconst  wxEventType wxEVT_CODESNIPPETS_GETFILELINKS  =  wxNewEventType  (  )\nCodeSnippetsEvent :: CodeSnippetsEvent ( wxEventType commandType , int id )\n: wxCommandEvent ( commandType , id ) {\n}\nCodeSnippetsEvent :: CodeSnippetsEvent ( const CodeSnippetsEvent & Event )\n: wxCommandEvent ( Event )\n, m_SnippetID ( 0 ) {\n}"
Line 1642
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1642 always 1642
  "[test.cpp:1] syntax error: operator" always "[test.cpp:1] syntax error: operator"
  "void foo() { for (auto operator new : int); }" always "void foo() { for (auto operator new : int); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1642 always 1642
Line 1643
  ! always {!<=-1,!>=2}
  ( always {!<=-1,!>=2}
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1643 always 1643
  "[test.cpp:1] syntax error: operator" always "[test.cpp:1] syntax error: operator"
  "void foo() { for (a operator== :) }" always "void foo() { for (a operator== :) }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1643 always 1643
Line 1647
  "d f(){(.n00e0(return%n00e0''('')));}" always "d f(){(.n00e0(return%n00e0''('')));}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1647 always 1647
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1647 always 1647
  false always 0
Line 1651
  "d f(){(for(((((0{t b;((((((((()))))))))}))))))}" always "d f(){(for(((((0{t b;((((((((()))))))))}))))))}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1651 always 1651
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1651 always 1651
  false always 0
Line 1655
  "{(- -##0xf/-1 0)[]}" always "{(- -##0xf/-1 0)[]}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1655 always 1655
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1655 always 1655
  false always 0
Line 1659
  "{typedef typedef c n00e0[]c000(;n00e0&c000)}" always "{typedef typedef c n00e0[]c000(;n00e0&c000)}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1659 always 1659
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1659 always 1659
  false always 0
Line 1663
  "{typedef f typedef[]({typedef e e,>;typedef(((typedef<typedef|)))})}" always "{typedef f typedef[]({typedef e e,>;typedef(((typedef<typedef|)))})}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1663 always 1663
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1663 always 1663
  false always 0
Line 1667
  "{(){}[]typedef r n00e0[](((n00e0 0((;()))))){(0 typedef n00e0 bre00 n00e0())}[]();typedef n n00e0()[],(bre00)}" always "{(){}[]typedef r n00e0[](((n00e0 0((;()))))){(0 typedef n00e0 bre00 n00e0())}[]();typedef n n00e0()[],(bre00)}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1667 always 1667
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1667 always 1667
  false always 0
Line 1671
  "{\"\"[(1||)];}" always "{\"\"[(1||)];}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1671 always 1671
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1671 always 1671
  false always 0
Line 1675
  "THIS FILE CONTAINS VARIOUS TEXT" always "THIS FILE CONTAINS VARIOUS TEXT"
Line 1679
  "a = [1,2,3];" always "a = [1,2,3];"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1679 always 1679
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1679 always 1679
  false always 0
Line 1683
  "template<typename> struct A {};\ntemplate<typename...T> struct A<T::T...> {}; \nA<int> a;" always "template<typename> struct A {};\ntemplate<typename...T> struct A<T::T...> {}; \nA<int> a;"
Line 1689
  "void f() {\n    auto p;\n    if (g(p)) {}\n    assert();\n}" always "void f() {\n    auto p;\n    if (g(p)) {}\n    assert();\n}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1689 always 1689
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1689 always 1689
  false always 0
Line 1697
  "d f(){t n0000 const[]n0000+0!=n0000,(0)}" always "d f(){t n0000 const[]n0000+0!=n0000,(0)}"
Line 1700
  "typedef void (*func) (addr) ;\nvoid bar(void) {\n    func f;\n    f & = (func)42;\n}\n" always "typedef void (*func) (addr) ;\nvoid bar(void) {\n    func f;\n    f & = (func)42;\n}\n"
Line 1707
  "(){(){{()}}return;{switch()0 case(){}break;l:()}}\n" always "(){(){{()}}return;{switch()0 case(){}break;l:()}}\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1707 always 1707
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1707 always 1707
  false always 0
Line 1710
  "struct A<0<;\n" always "struct A<0<;\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1710 always 1710
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1710 always 1710
  false always 0
Line 1713
  "template<template<class>\n" always "template<template<class>\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1713 always 1713
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1713 always 1713
  false always 0
Line 1717
  "&operator(){[]};" always "&operator(){[]};"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1717 always 1717
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1717 always 1717
  false always 0
Line 1718
  "*(*const<> (size_t); foo) { } *(*const (size_t)() ; foo) { }" always "*(*const<> (size_t); foo) { } *(*const (size_t)() ; foo) { }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1718 always 1718
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1718 always 1718
  false always 0
Line 1719
  ">{ x while (y) z int = }" always ">{ x while (y) z int = }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1719 always 1719
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1719 always 1719
  false always 0
Line 1720
  "&p(!{}e x){({(0?:?){({})}()})}" always "&p(!{}e x){({(0?:?){({})}()})}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1720 always 1720
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1720 always 1720
  false always 0
Line 1721
  "<class T> { struct { typename D4:typename Base<T*> }; };" always "<class T> { struct { typename D4:typename Base<T*> }; };"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1721 always 1721
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1721 always 1721
  false always 0
Line 1722
  " > template < . > struct Y < T > { = } ;\n" always " > template < . > struct Y < T > { = } ;\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1722 always 1722
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1722 always 1722
  false always 0
Line 1726
  "int *" always "int *"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1726 always 1726
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1726 always 1726
  false always 0
Line 1727
  "x[y]" always "x[y]"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1727 always 1727
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1727 always 1727
  false always 0
Line 1728
  "( ) &" always "( ) &"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1728 always 1728
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1728 always 1728
  false always 0
Line 1729
  "|| #if #define <=" always "|| #if #define <="
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1729 always 1729
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1729 always 1729
  false always 0
Line 1730
  "f::y:y : <x::" always "f::y:y : <x::"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1730 always 1730
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1730 always 1730
  false always 0
Line 1731
  "a \"b\" not_eq \"c\"" always "a \"b\" not_eq \"c\""
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1731 always 1731
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1731 always 1731
  false always 0
Line 1732
  "(int arg2) { } { } typedef void (func_type) (int, int); typedef func_type&" always "(int arg2) { } { } typedef void (func_type) (int, int); typedef func_type&"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1732 always 1732
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1732 always 1732
  false always 0
Line 1733
  "&g[0]; { (g[0] 0) } =" always "&g[0]; { (g[0] 0) } ="
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1733 always 1733
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1733 always 1733
  false always 0
Line 1734
  "{ { void foo() { struct }; { }; } }; struct S { } f =" always "{ { void foo() { struct }; { }; } }; struct S { } f ="
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1734 always 1734
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1734 always 1734
  false always 0
Line 1735
  "{ { ( ) } P ( ) ^ { } { } { } ( ) } 0" always "{ { ( ) } P ( ) ^ { } { } { } ( ) } 0"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1735 always 1735
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1735 always 1735
  false always 0
Line 1736
  "+---+" always "+---+"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1736 always 1736
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1736 always 1736
  false always 0
Line 1737
  "template<>\n" always "template<>\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1737 always 1737
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1737 always 1737
  false always 0
Line 1738
  "++4++ +  + E++++++++++ + ch tp.oed5[.]" always "++4++ +  + E++++++++++ + ch tp.oed5[.]"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1738 always 1738
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1738 always 1738
  false always 0
Line 1739
  "d a(){f s=0()8[]s?():0}*()?:0" always "d a(){f s=0()8[]s?():0}*()?:0"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1739 always 1739
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1739 always 1739
  false always 0
Line 1740
  "!2 : #h2 ?:" always "!2 : #h2 ?:"
  false always 0
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1740 always 1740
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1740 always 1740
  false always 0
Line 1741
  "--" always "--"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1741 always 1741
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1741 always 1741
  false always 0
Line 1742
  "volatile true , test < test < #ifdef __ppc__ true ," always "volatile true , test < test < #ifdef __ppc__ true ,"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1742 always 1742
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1742 always 1742
  false always 0
Line 1743
  "a,b--\n" always "a,b--\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1743 always 1743
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1743 always 1743
  false always 0
Line 1744
  "x a[0] =" always "x a[0] ="
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1744 always 1744
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1744 always 1744
  false always 0
Line 1745
  "auto_ptr<x>\n" always "auto_ptr<x>\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1745 always 1745
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1745 always 1745
  false always 0
Line 1746
  "char a[1]\n" always "char a[1]\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1746 always 1746
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1746 always 1746
  false always 0
Line 1747
  "<><<" always "<><<"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1747 always 1747
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1747 always 1747
  false always 0
Line 1748
  "z<y<x>" always "z<y<x>"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1748 always 1748
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1748 always 1748
  false always 0
Line 1749
  "><,f<i," always "><,f<i,"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1749 always 1749
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1749 always 1749
  false always 0
Line 1750
  "0; (a) < (a)" always "0; (a) < (a)"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1750 always 1750
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1750 always 1750
  false always 0
Line 1751
  " ( * const ( size_t ) ; foo )" always " ( * const ( size_t ) ; foo )"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1751 always 1751
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1751 always 1751
  false always 0
Line 1752
  "({ (); strcat(strcat(() ()) ()) })" always "({ (); strcat(strcat(() ()) ()) })"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1752 always 1752
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1752 always 1752
  false always 0
Line 1753
  "%: return ; ()" always "%: return ; ()"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1753 always 1753
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1753 always 1753
  false always 0
Line 1754
  "__attribute__((destructor)) void" always "__attribute__((destructor)) void"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1754 always 1754
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1754 always 1754
  false always 0
Line 1755
  "1 *p = const" always "1 *p = const"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1755 always 1755
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1755 always 1755
  false always 0
Line 1756
  "sizeof" always "sizeof"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1756 always 1756
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1756 always 1756
  false always 0
Line 1757
  " enum struct" always " enum struct"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1757 always 1757
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1757 always 1757
  false always 0
Line 1758
  "{(){(())}}r&const" always "{(){(())}}r&const"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1758 always 1758
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1758 always 1758
  false always 0
Line 1759
  "int" always "int"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1759 always 1759
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1759 always 1759
  false always 0
Line 1760
  "struct A :\n" always "struct A :\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1760 always 1760
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1760 always 1760
  false always 0
Line 1761
  "{} const const\n" always "{} const const\n"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1761 always 1761
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1761 always 1761
  false always 0
Line 1762
  "re2c: error: line 14, column 4: can only difference char sets" always "re2c: error: line 14, column 4: can only difference char sets"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1762 always 1762
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1762 always 1762
  false always 0
Line 1769
  "void f() { switch (a) {}; case 1: }" always "void f() { switch (a) {}; case 1: }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1769 always 1769
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1769 always 1769
  false always 0
Line 1770
  "struct V : { public case {} ; struct U : U  void { V *f (int x) (x) } }" always "struct V : { public case {} ; struct U : U  void { V *f (int x) (x) } }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1770 always 1770
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1770 always 1770
  false always 0
Line 1771
  "void f() { 0 0; }" always "void f() { 0 0; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1771 always 1771
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1771 always 1771
  false always 0
Line 1772
  "void f() { true 0; }" always "void f() { true 0; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1772 always 1772
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1772 always 1772
  false always 0
Line 1773
  "void f() { 'a' 0; }" always "void f() { 'a' 0; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1773 always 1773
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1773 always 1773
  false always 0
Line 1774
  "void f() { 1 \"\"; }" always "void f() { 1 \"\"; }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1774 always 1774
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1774 always 1774
  false always 0
Line 1778
  "void f(){x=0,return return''[]()}" always "void f(){x=0,return return''[]()}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1778 always 1778
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1778 always 1778
  false always 0
Line 1779
  "void f(){x='0'++'0'(return)[];}" always "void f(){x='0'++'0'(return)[];}"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1779 always 1779
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1779 always 1779
  false always 0
Line 1780
  "void f(){*(int *)42=0;}" always "void f(){*(int *)42=0;}"
Line 1781
  "void f() { x= 'x' > typedef name5 | ( , ;){ } (); }" always "void f() { x= 'x' > typedef name5 | ( , ;){ } (); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1781 always 1781
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1781 always 1781
  false always 0
Line 1782
  "void f() { x= {}( ) ( 'x')[ ] (); }" always "void f() { x= {}( ) ( 'x')[ ] (); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1782 always 1782
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1782 always 1782
  false always 0
Line 1783
  "void f() { x= y{ } name5 y[ ] + y ^ name5 ^ name5 for ( ( y y y && y y y && name5 ++ int )); }" always "void f() { x= y{ } name5 y[ ] + y ^ name5 ^ name5 for ( ( y y y && y y y && name5 ++ int )); }"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1783 always 1783
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1783 always 1783
  false always 0
Line 1788
  "public ref class LibCecSharp : public CecCallbackMethods {\narray<CecAdapter ^> ^ FindAdapters(String ^ path) {}\nbool GetDeviceInformation(String ^ port, LibCECConfiguration ^configuration, uint32_t timeoutMs) {\nbool bReturn(false);\n}\n};" always "public ref class LibCecSharp : public CecCallbackMethods {\narray<CecAdapter ^> ^ FindAdapters(String ^ path) {}\nbool GetDeviceInformation(String ^ port, LibCECConfiguration ^configuration, uint32_t timeoutMs) {\nbool bReturn(false);\n}\n};"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1788 always 1788
  false always 0
Line 1798
  "enum ssl_shutdown_t {ssl_shutdown_none = 0,ssl_shutdown_close_notify = , } ;" always "enum ssl_shutdown_t {ssl_shutdown_none = 0,ssl_shutdown_close_notify = , } ;"
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1798 always 1798
  "cppcheck-2.8/test/testgarbage.cpp" always "cppcheck-2.8/test/testgarbage.cpp"
  1798 always 1798
  false always 0
Line 1802
  "template <class T> class List {\npublic:\n   List();\n   virtual ~List();\n   template< class Predicate > u_int DeleteIf( const Predicate &pred );\n};\ntemplate< class T >\ntemplate< class Predicate > int\nList<T>::DeleteIf( const Predicate &pred )\n{}" always "template <class T> class List {\npublic:\n   List();\n   virtual ~List();\n   template< class Predicate > u_int DeleteIf( const Predicate &pred );\n};\ntemplate< class T >\ntemplate< class Predicate > int\nList<T>::DeleteIf( const Predicate &pred )\n{}"
Line 1815
  "struct A {\n    void operator+=(A&) && = delete;\n};" always "struct A {\n    void operator+=(A&) && = delete;\n};"
Line 1821
  "struct foo;\nvoid f() {\n    auto fn = []() -> foo* { return new foo(); };\n}" always "struct foo;\nvoid f() {\n    auto fn = []() -> foo* { return new foo(); };\n}"
